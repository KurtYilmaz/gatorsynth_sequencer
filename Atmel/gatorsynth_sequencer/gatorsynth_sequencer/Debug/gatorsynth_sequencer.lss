
gatorsynth_sequencer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002df0  00400000  00400000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000620  20000000  00402df0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  2 .bss          000080e4  20000620  00403410  00020620  2**2
                  ALLOC
  3 .stack        00003004  20008704  0040b4f4  00020620  2**0
                  ALLOC
  4 .ARM.attributes 0000002a  00000000  00000000  00020620  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0002064a  2**0
                  CONTENTS, READONLY
  6 .debug_info   000071a3  00000000  00000000  000206a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001e7a  00000000  00000000  00027846  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000027e8  00000000  00000000  000296c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000678  00000000  00000000  0002bea8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000538  00000000  00000000  0002c520  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00011e83  00000000  00000000  0002ca58  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000eb4f  00000000  00000000  0003e8db  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0003d477  00000000  00000000  0004d42a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000dcc  00000000  00000000  0008a8a4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <_sfixed>:
  400000:	2000b708 	.word	0x2000b708
  400004:	004022ed 	.word	0x004022ed
  400008:	004022e9 	.word	0x004022e9
  40000c:	004022e9 	.word	0x004022e9
  400010:	004022e9 	.word	0x004022e9
  400014:	004022e9 	.word	0x004022e9
  400018:	004022e9 	.word	0x004022e9
	...
  40002c:	004022e9 	.word	0x004022e9
  400030:	004022e9 	.word	0x004022e9
  400034:	00000000 	.word	0x00000000
  400038:	004022e9 	.word	0x004022e9
  40003c:	004022e9 	.word	0x004022e9
  400040:	004022e9 	.word	0x004022e9
  400044:	004022e9 	.word	0x004022e9
  400048:	004022e9 	.word	0x004022e9
  40004c:	004022e9 	.word	0x004022e9
  400050:	004022e9 	.word	0x004022e9
  400054:	004022e9 	.word	0x004022e9
  400058:	004022e9 	.word	0x004022e9
  40005c:	00000000 	.word	0x00000000
  400060:	004022e9 	.word	0x004022e9
  400064:	004022e9 	.word	0x004022e9
  400068:	004022e9 	.word	0x004022e9
  40006c:	00401cc5 	.word	0x00401cc5
  400070:	00402725 	.word	0x00402725
  400074:	00400e91 	.word	0x00400e91
  400078:	004022e9 	.word	0x004022e9
  40007c:	004022e9 	.word	0x004022e9
  400080:	004022e9 	.word	0x004022e9
  400084:	004022e9 	.word	0x004022e9
  400088:	00000000 	.word	0x00000000
  40008c:	004022e9 	.word	0x004022e9
  400090:	004022e9 	.word	0x004022e9
  400094:	004022e9 	.word	0x004022e9
  400098:	004022e9 	.word	0x004022e9
  40009c:	004020d5 	.word	0x004020d5
  4000a0:	004022e9 	.word	0x004022e9
  4000a4:	004022e9 	.word	0x004022e9
  4000a8:	004022e9 	.word	0x004022e9
  4000ac:	004022e9 	.word	0x004022e9
  4000b0:	004022e9 	.word	0x004022e9
  4000b4:	004001bd 	.word	0x004001bd
  4000b8:	004022e9 	.word	0x004022e9
  4000bc:	004022e9 	.word	0x004022e9

004000c0 <__do_global_dtors_aux>:
  4000c0:	b510      	push	{r4, lr}
  4000c2:	4c05      	ldr	r4, [pc, #20]	; (4000d8 <__do_global_dtors_aux+0x18>)
  4000c4:	7823      	ldrb	r3, [r4, #0]
  4000c6:	b933      	cbnz	r3, 4000d6 <__do_global_dtors_aux+0x16>
  4000c8:	4b04      	ldr	r3, [pc, #16]	; (4000dc <__do_global_dtors_aux+0x1c>)
  4000ca:	b113      	cbz	r3, 4000d2 <__do_global_dtors_aux+0x12>
  4000cc:	4804      	ldr	r0, [pc, #16]	; (4000e0 <__do_global_dtors_aux+0x20>)
  4000ce:	f3af 8000 	nop.w
  4000d2:	2301      	movs	r3, #1
  4000d4:	7023      	strb	r3, [r4, #0]
  4000d6:	bd10      	pop	{r4, pc}
  4000d8:	20000620 	.word	0x20000620
  4000dc:	00000000 	.word	0x00000000
  4000e0:	00402df0 	.word	0x00402df0

004000e4 <frame_dummy>:
  4000e4:	4b08      	ldr	r3, [pc, #32]	; (400108 <frame_dummy+0x24>)
  4000e6:	b510      	push	{r4, lr}
  4000e8:	b11b      	cbz	r3, 4000f2 <frame_dummy+0xe>
  4000ea:	4908      	ldr	r1, [pc, #32]	; (40010c <frame_dummy+0x28>)
  4000ec:	4808      	ldr	r0, [pc, #32]	; (400110 <frame_dummy+0x2c>)
  4000ee:	f3af 8000 	nop.w
  4000f2:	4808      	ldr	r0, [pc, #32]	; (400114 <frame_dummy+0x30>)
  4000f4:	6803      	ldr	r3, [r0, #0]
  4000f6:	b903      	cbnz	r3, 4000fa <frame_dummy+0x16>
  4000f8:	bd10      	pop	{r4, pc}
  4000fa:	4b07      	ldr	r3, [pc, #28]	; (400118 <frame_dummy+0x34>)
  4000fc:	2b00      	cmp	r3, #0
  4000fe:	d0fb      	beq.n	4000f8 <frame_dummy+0x14>
  400100:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400104:	4718      	bx	r3
  400106:	bf00      	nop
  400108:	00000000 	.word	0x00000000
  40010c:	20000624 	.word	0x20000624
  400110:	00402df0 	.word	0x00402df0
  400114:	00402df0 	.word	0x00402df0
  400118:	00000000 	.word	0x00000000

0040011c <ADC_init>:
 //define register to read CH2 conversion from
#define REG_ADC_CDR2     (*(__I  uint32_t*)0x40038058U) /**< \brief (ADC) Channel Data Register */ 

 void ADC_init(){

	note_length = 5000;
  40011c:	f241 3288 	movw	r2, #5000	; 0x1388
  400120:	4b0f      	ldr	r3, [pc, #60]	; (400160 <ADC_init+0x44>)
  400122:	801a      	strh	r2, [r3, #0]

	//enable peripheral clock for ADC
	REG_PMC_PCER0 |= PMC_PCER0_PID29;
  400124:	4a0f      	ldr	r2, [pc, #60]	; (400164 <ADC_init+0x48>)
  400126:	6813      	ldr	r3, [r2, #0]
  400128:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  40012c:	6013      	str	r3, [r2, #0]
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  40012e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400132:	4b0d      	ldr	r3, [pc, #52]	; (400168 <ADC_init+0x4c>)
  400134:	601a      	str	r2, [r3, #0]

	//enable interrupts for ADC
	NVIC_EnableIRQ(ADC_IRQn);

	//enable Channel 2 of ADC (PORTA 19)
	REG_ADC_CHER |= ADC_CHER_CH2;
  400136:	4a0d      	ldr	r2, [pc, #52]	; (40016c <ADC_init+0x50>)
  400138:	6813      	ldr	r3, [r2, #0]
  40013a:	f043 0304 	orr.w	r3, r3, #4
  40013e:	6013      	str	r3, [r2, #0]

	//configure ADC clock to 5MHz
	REG_ADC_MR |= ADC_MR_PRESCAL(9);
  400140:	3a0c      	subs	r2, #12
  400142:	6813      	ldr	r3, [r2, #0]
  400144:	f443 6310 	orr.w	r3, r3, #2304	; 0x900
  400148:	6013      	str	r3, [r2, #0]

	//enable interrupt for end of ADC conversion on CH2
	REG_ADC_IER |= ADC_IER_EOC2;
  40014a:	3220      	adds	r2, #32
  40014c:	6813      	ldr	r3, [r2, #0]
  40014e:	f043 0304 	orr.w	r3, r3, #4
  400152:	6013      	str	r3, [r2, #0]

	//start initial conversion
	REG_ADC_CR |= ADC_CR_START;
  400154:	3a24      	subs	r2, #36	; 0x24
  400156:	6813      	ldr	r3, [r2, #0]
  400158:	f043 0302 	orr.w	r3, r3, #2
  40015c:	6013      	str	r3, [r2, #0]
  40015e:	4770      	bx	lr
  400160:	200086f2 	.word	0x200086f2
  400164:	400e0410 	.word	0x400e0410
  400168:	e000e100 	.word	0xe000e100
  40016c:	40038010 	.word	0x40038010

00400170 <convert_NoteLength>:

 }

  void convert_NoteLength(uint32_t DAC_data){
  400170:	b508      	push	{r3, lr}

	  //get note length as a proportion of the overflow count of the timer
	  float note_float = 10000*(((float)DAC_data)/1023);
	  note_length = (uint16_t) note_float;
  400172:	4b0d      	ldr	r3, [pc, #52]	; (4001a8 <convert_NoteLength+0x38>)
  400174:	4798      	blx	r3
  400176:	490d      	ldr	r1, [pc, #52]	; (4001ac <convert_NoteLength+0x3c>)
  400178:	4b0d      	ldr	r3, [pc, #52]	; (4001b0 <convert_NoteLength+0x40>)
  40017a:	4798      	blx	r3
  40017c:	4b0d      	ldr	r3, [pc, #52]	; (4001b4 <convert_NoteLength+0x44>)
  40017e:	4798      	blx	r3
  400180:	b280      	uxth	r0, r0

	  //in case of over flow from offset
	  if (note_length > 9000){
  400182:	f242 3328 	movw	r3, #9000	; 0x2328
  400186:	4298      	cmp	r0, r3
  400188:	d903      	bls.n	400192 <convert_NoteLength+0x22>
		note_length = 9000;
  40018a:	461a      	mov	r2, r3
  40018c:	4b0a      	ldr	r3, [pc, #40]	; (4001b8 <convert_NoteLength+0x48>)
  40018e:	801a      	strh	r2, [r3, #0]
  400190:	bd08      	pop	{r3, pc}
	  }
	  else if (note_length < 1000){
  400192:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
  400196:	d302      	bcc.n	40019e <convert_NoteLength+0x2e>

  void convert_NoteLength(uint32_t DAC_data){

	  //get note length as a proportion of the overflow count of the timer
	  float note_float = 10000*(((float)DAC_data)/1023);
	  note_length = (uint16_t) note_float;
  400198:	4b07      	ldr	r3, [pc, #28]	; (4001b8 <convert_NoteLength+0x48>)
  40019a:	8018      	strh	r0, [r3, #0]
  40019c:	bd08      	pop	{r3, pc}
	  //in case of over flow from offset
	  if (note_length > 9000){
		note_length = 9000;
	  }
	  else if (note_length < 1000){
		note_length = 1000;
  40019e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  4001a2:	4b05      	ldr	r3, [pc, #20]	; (4001b8 <convert_NoteLength+0x48>)
  4001a4:	801a      	strh	r2, [r3, #0]
  4001a6:	bd08      	pop	{r3, pc}
  4001a8:	004028f1 	.word	0x004028f1
  4001ac:	411c671a 	.word	0x411c671a
  4001b0:	004029a1 	.word	0x004029a1
  4001b4:	00402c41 	.word	0x00402c41
  4001b8:	200086f2 	.word	0x200086f2

004001bc <ADC_Handler>:
	  }

  }

 void ADC_Handler(){
  4001bc:	b508      	push	{r3, lr}

	//read the interrupt flag and clear it
	uint32_t status = REG_ADC_ISR;
  4001be:	4b05      	ldr	r3, [pc, #20]	; (4001d4 <ADC_Handler+0x18>)
  4001c0:	681b      	ldr	r3, [r3, #0]

	//store the data
	uint32_t data;

	//check for CH2 interrupt
	if ((status & ADC_IMR_EOC2) > 0){
  4001c2:	f013 0f04 	tst.w	r3, #4
		data = REG_ADC_CDR2;	//read ADC data off CH2
  4001c6:	bf1c      	itt	ne
  4001c8:	4b03      	ldrne	r3, [pc, #12]	; (4001d8 <ADC_Handler+0x1c>)
  4001ca:	6818      	ldrne	r0, [r3, #0]
	}

	convert_NoteLength(data);
  4001cc:	4b03      	ldr	r3, [pc, #12]	; (4001dc <ADC_Handler+0x20>)
  4001ce:	4798      	blx	r3
  4001d0:	bd08      	pop	{r3, pc}
  4001d2:	bf00      	nop
  4001d4:	40038030 	.word	0x40038030
  4001d8:	40038058 	.word	0x40038058
  4001dc:	00400171 	.word	0x00400171

004001e0 <twi_master_read>:
 * \param p_packet Packet information and data (see \ref twi_packet_t).
 *
 * \return TWI_SUCCESS if all bytes were read, error code otherwise.
 */
uint32_t twi_master_read(Twi *p_twi, twi_packet_t *p_packet)
{
  4001e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	//cpu_irq_disable();
	
	uint32_t status;
	uint32_t cnt = p_packet->length;
  4001e4:	68cb      	ldr	r3, [r1, #12]
	uint8_t *buffer = p_packet->buffer;
	uint8_t stop_sent = 0;
	uint32_t timeout = TWI_TIMEOUT;;
	
	/* Check argument */
	if (cnt == 0) {
  4001e6:	2b00      	cmp	r3, #0
  4001e8:	d049      	beq.n	40027e <twi_master_read+0x9e>
{
	//cpu_irq_disable();
	
	uint32_t status;
	uint32_t cnt = p_packet->length;
	uint8_t *buffer = p_packet->buffer;
  4001ea:	688c      	ldr	r4, [r1, #8]
	if (cnt == 0) {
		return TWI_INVALID_ARGUMENT;
	}

	/* Set read mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
  4001ec:	2600      	movs	r6, #0
  4001ee:	6046      	str	r6, [r0, #4]
	p_twi->TWI_MMR = TWI_MMR_MREAD | TWI_MMR_DADR(p_packet->chip) |
  4001f0:	684a      	ldr	r2, [r1, #4]
  4001f2:	0212      	lsls	r2, r2, #8
  4001f4:	f402 7240 	and.w	r2, r2, #768	; 0x300
  4001f8:	f442 5580 	orr.w	r5, r2, #4096	; 0x1000
  4001fc:	7c0a      	ldrb	r2, [r1, #16]
  4001fe:	0412      	lsls	r2, r2, #16
  400200:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
  400204:	432a      	orrs	r2, r5
  400206:	6042      	str	r2, [r0, #4]
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
  400208:	60c6      	str	r6, [r0, #12]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
  40020a:	684d      	ldr	r5, [r1, #4]
 */
static uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
	uint32_t val;

	if (len == 0)
  40020c:	b15d      	cbz	r5, 400226 <twi_master_read+0x46>
		return 0;

	val = addr[0];
  40020e:	780a      	ldrb	r2, [r1, #0]
	if (len > 1) {
  400210:	2d01      	cmp	r5, #1
		val <<= 8;
		val |= addr[1];
  400212:	bfc4      	itt	gt
  400214:	784e      	ldrbgt	r6, [r1, #1]
  400216:	ea46 2202 	orrgt.w	r2, r6, r2, lsl #8
	}
	if (len > 2) {
  40021a:	2d02      	cmp	r5, #2
  40021c:	dd04      	ble.n	400228 <twi_master_read+0x48>
		val <<= 8;
		val |= addr[2];
  40021e:	7889      	ldrb	r1, [r1, #2]
  400220:	ea41 2202 	orr.w	r2, r1, r2, lsl #8
  400224:	e000      	b.n	400228 <twi_master_read+0x48>
static uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
	uint32_t val;

	if (len == 0)
		return 0;
  400226:	2200      	movs	r2, #0
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
  400228:	60c2      	str	r2, [r0, #12]

	/* Send a START condition */
	if (cnt == 1) {
  40022a:	2b01      	cmp	r3, #1
  40022c:	d103      	bne.n	400236 <twi_master_read+0x56>
		p_twi->TWI_CR = TWI_CR_START | TWI_CR_STOP;
  40022e:	2203      	movs	r2, #3
  400230:	6002      	str	r2, [r0, #0]
		stop_sent = 1;
  400232:	2701      	movs	r7, #1
  400234:	e02f      	b.n	400296 <twi_master_read+0xb6>
	} else {
		p_twi->TWI_CR = TWI_CR_START;
  400236:	2201      	movs	r2, #1
  400238:	6002      	str	r2, [r0, #0]
		stop_sent = 0;
  40023a:	2700      	movs	r7, #0
  40023c:	e02b      	b.n	400296 <twi_master_read+0xb6>
		if (cnt == 1  && !stop_sent) {
			p_twi->TWI_CR = TWI_CR_STOP;
			stop_sent = 1;
		}

		if (!(status & TWI_SR_RXRDY)) {
  40023e:	4629      	mov	r1, r5
		p_twi->TWI_CR = TWI_CR_START;
		stop_sent = 0;
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
  400240:	6a02      	ldr	r2, [r0, #32]
		if (status & TWI_SR_NACK) {
  400242:	f412 7f80 	tst.w	r2, #256	; 0x100
  400246:	d11d      	bne.n	400284 <twi_master_read+0xa4>
			return TWI_RECEIVE_NACK;
		}

		if (!timeout--) {
  400248:	1e4d      	subs	r5, r1, #1
  40024a:	b1f1      	cbz	r1, 40028a <twi_master_read+0xaa>
			return TWI_ERROR_TIMEOUT;
		}
				
		/* Last byte ? */
		if (cnt == 1  && !stop_sent) {
  40024c:	2b01      	cmp	r3, #1
  40024e:	d104      	bne.n	40025a <twi_master_read+0x7a>
  400250:	bb77      	cbnz	r7, 4002b0 <twi_master_read+0xd0>
			p_twi->TWI_CR = TWI_CR_STOP;
  400252:	f8c0 8000 	str.w	r8, [r0]
			stop_sent = 1;
  400256:	4667      	mov	r7, ip
  400258:	e02a      	b.n	4002b0 <twi_master_read+0xd0>
		}

		if (!(status & TWI_SR_RXRDY)) {
  40025a:	f012 0f02 	tst.w	r2, #2
  40025e:	d005      	beq.n	40026c <twi_master_read+0x8c>
			continue;
		}
		*buffer++ = p_twi->TWI_RHR;
  400260:	6b02      	ldr	r2, [r0, #48]	; 0x30
  400262:	7022      	strb	r2, [r4, #0]

		cnt--;
  400264:	3b01      	subs	r3, #1
		}

		if (!(status & TWI_SR_RXRDY)) {
			continue;
		}
		*buffer++ = p_twi->TWI_RHR;
  400266:	3401      	adds	r4, #1

		cnt--;
		timeout = TWI_TIMEOUT;
  400268:	4631      	mov	r1, r6
  40026a:	e000      	b.n	40026e <twi_master_read+0x8e>
  40026c:	4629      	mov	r1, r5
	} else {
		p_twi->TWI_CR = TWI_CR_START;
		stop_sent = 0;
	}

	while (cnt > 0) {
  40026e:	2b00      	cmp	r3, #0
  400270:	d1e6      	bne.n	400240 <twi_master_read+0x60>

		cnt--;
		timeout = TWI_TIMEOUT;
	}

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
  400272:	6a03      	ldr	r3, [r0, #32]
  400274:	f013 0f01 	tst.w	r3, #1
  400278:	d0fb      	beq.n	400272 <twi_master_read+0x92>
	}

	p_twi->TWI_SR;
  40027a:	6a03      	ldr	r3, [r0, #32]

	//cpu_irq_enable();

	return TWI_SUCCESS;
  40027c:	e01c      	b.n	4002b8 <twi_master_read+0xd8>
	uint8_t stop_sent = 0;
	uint32_t timeout = TWI_TIMEOUT;;
	
	/* Check argument */
	if (cnt == 0) {
		return TWI_INVALID_ARGUMENT;
  40027e:	f04f 0e01 	mov.w	lr, #1
  400282:	e019      	b.n	4002b8 <twi_master_read+0xd8>
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
  400284:	f04f 0e05 	mov.w	lr, #5
  400288:	e016      	b.n	4002b8 <twi_master_read+0xd8>
		}

		if (!timeout--) {
			return TWI_ERROR_TIMEOUT;
  40028a:	f04f 0e09 	mov.w	lr, #9
  40028e:	e013      	b.n	4002b8 <twi_master_read+0xd8>
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
  400290:	f04f 0e05 	mov.w	lr, #5
  400294:	e010      	b.n	4002b8 <twi_master_read+0xd8>
		p_twi->TWI_CR = TWI_CR_START;
		stop_sent = 0;
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
  400296:	6a02      	ldr	r2, [r0, #32]
		if (status & TWI_SR_NACK) {
  400298:	f412 7e80 	ands.w	lr, r2, #256	; 0x100
  40029c:	d1f8      	bne.n	400290 <twi_master_read+0xb0>
  40029e:	f643 2597 	movw	r5, #14999	; 0x3a97
			continue;
		}
		*buffer++ = p_twi->TWI_RHR;

		cnt--;
		timeout = TWI_TIMEOUT;
  4002a2:	f643 2698 	movw	r6, #15000	; 0x3a98
			return TWI_ERROR_TIMEOUT;
		}
				
		/* Last byte ? */
		if (cnt == 1  && !stop_sent) {
			p_twi->TWI_CR = TWI_CR_STOP;
  4002a6:	f04f 0802 	mov.w	r8, #2
			stop_sent = 1;
  4002aa:	f04f 0c01 	mov.w	ip, #1
  4002ae:	e7cd      	b.n	40024c <twi_master_read+0x6c>
		}

		if (!(status & TWI_SR_RXRDY)) {
  4002b0:	f012 0f02 	tst.w	r2, #2
  4002b4:	d0c3      	beq.n	40023e <twi_master_read+0x5e>
  4002b6:	e7d3      	b.n	400260 <twi_master_read+0x80>
	p_twi->TWI_SR;

	//cpu_irq_enable();

	return TWI_SUCCESS;
}
  4002b8:	4670      	mov	r0, lr
  4002ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4002be:	bf00      	nop

004002c0 <twi_master_write>:
 * \param p_packet Packet information and data (see \ref twi_packet_t).
 *
 * \return TWI_SUCCESS if all bytes were written, error code otherwise.
 */
uint32_t twi_master_write(Twi *p_twi, twi_packet_t *p_packet)
{
  4002c0:	4602      	mov	r2, r0
	//cpu_irq_disable();

	uint32_t status;
	uint32_t cnt = p_packet->length;
  4002c2:	68c8      	ldr	r0, [r1, #12]
	uint8_t *buffer = p_packet->buffer;

	/* Check argument */
	if (cnt == 0) {
  4002c4:	b330      	cbz	r0, 400314 <twi_master_write+0x54>
 * \param p_packet Packet information and data (see \ref twi_packet_t).
 *
 * \return TWI_SUCCESS if all bytes were written, error code otherwise.
 */
uint32_t twi_master_write(Twi *p_twi, twi_packet_t *p_packet)
{
  4002c6:	b410      	push	{r4}
	//cpu_irq_disable();

	uint32_t status;
	uint32_t cnt = p_packet->length;
	uint8_t *buffer = p_packet->buffer;
  4002c8:	688c      	ldr	r4, [r1, #8]
		return TWI_INVALID_ARGUMENT;
	}

	/* Set write mode, slave address and 3 internal address byte lengths */
	//p_twi->TWI_MMR = 0;
	p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip);
  4002ca:	7c0b      	ldrb	r3, [r1, #16]
  4002cc:	041b      	lsls	r3, r3, #16
  4002ce:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
  4002d2:	6053      	str	r3, [r2, #4]
	//p_twi->TWI_IADR = 0;
	//p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);

	/* Send all bytes */
	while (cnt > 0) {
		status = p_twi->TWI_SR;
  4002d4:	6a13      	ldr	r3, [r2, #32]
		if (status & TWI_SR_NACK) {
  4002d6:	f413 7f80 	tst.w	r3, #256	; 0x100
  4002da:	d004      	beq.n	4002e6 <twi_master_write+0x26>
  4002dc:	e01c      	b.n	400318 <twi_master_write+0x58>
	//p_twi->TWI_IADR = 0;
	//p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);

	/* Send all bytes */
	while (cnt > 0) {
		status = p_twi->TWI_SR;
  4002de:	6a13      	ldr	r3, [r2, #32]
		if (status & TWI_SR_NACK) {
  4002e0:	f413 7f80 	tst.w	r3, #256	; 0x100
  4002e4:	d11a      	bne.n	40031c <twi_master_write+0x5c>
			return TWI_RECEIVE_NACK;
		}

		if (!(status & TWI_SR_TXRDY)) {
  4002e6:	f013 0f04 	tst.w	r3, #4
  4002ea:	d003      	beq.n	4002f4 <twi_master_write+0x34>
			continue;
		}
		p_twi->TWI_THR = *buffer++;
  4002ec:	7823      	ldrb	r3, [r4, #0]
  4002ee:	6353      	str	r3, [r2, #52]	; 0x34

		cnt--;
  4002f0:	3801      	subs	r0, #1
		}

		if (!(status & TWI_SR_TXRDY)) {
			continue;
		}
		p_twi->TWI_THR = *buffer++;
  4002f2:	3401      	adds	r4, #1
	/* Set internal address for remote chip */
	//p_twi->TWI_IADR = 0;
	//p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);

	/* Send all bytes */
	while (cnt > 0) {
  4002f4:	2800      	cmp	r0, #0
  4002f6:	d1f2      	bne.n	4002de <twi_master_write+0x1e>

		cnt--;
	}

	while (1) {
		status = p_twi->TWI_SR;
  4002f8:	6a13      	ldr	r3, [r2, #32]
		if (status & TWI_SR_NACK) {
  4002fa:	f413 7080 	ands.w	r0, r3, #256	; 0x100
  4002fe:	d10f      	bne.n	400320 <twi_master_write+0x60>
			return TWI_RECEIVE_NACK;
		}

		if (status & TWI_SR_TXRDY) {
  400300:	f013 0f04 	tst.w	r3, #4
  400304:	d0f8      	beq.n	4002f8 <twi_master_write+0x38>
			break;
		}
	}

	p_twi->TWI_CR = TWI_CR_STOP;
  400306:	2302      	movs	r3, #2
  400308:	6013      	str	r3, [r2, #0]

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
  40030a:	6a13      	ldr	r3, [r2, #32]
  40030c:	f013 0f01 	tst.w	r3, #1
  400310:	d0fb      	beq.n	40030a <twi_master_write+0x4a>
  400312:	e006      	b.n	400322 <twi_master_write+0x62>
	uint32_t cnt = p_packet->length;
	uint8_t *buffer = p_packet->buffer;

	/* Check argument */
	if (cnt == 0) {
		return TWI_INVALID_ARGUMENT;
  400314:	2001      	movs	r0, #1
	}

	//cpu_irq_enable();

	return TWI_SUCCESS;
}
  400316:	4770      	bx	lr

	/* Send all bytes */
	while (cnt > 0) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
  400318:	2005      	movs	r0, #5
  40031a:	e002      	b.n	400322 <twi_master_write+0x62>
  40031c:	2005      	movs	r0, #5
  40031e:	e000      	b.n	400322 <twi_master_write+0x62>
	}

	while (1) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
  400320:	2005      	movs	r0, #5
	}

	//cpu_irq_enable();

	return TWI_SUCCESS;
}
  400322:	bc10      	pop	{r4}
  400324:	4770      	bx	lr
  400326:	bf00      	nop

00400328 <DAC_write_cv>:


#define VREF 10
#define max 1023

void DAC_write_cv(float voltage){
  400328:	b570      	push	{r4, r5, r6, lr}
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  40032a:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  40032c:	f3bf 8f5f 	dmb	sy

	cpu_irq_disable();
  400330:	4d13      	ldr	r5, [pc, #76]	; (400380 <DAC_write_cv+0x58>)
  400332:	2300      	movs	r3, #0
  400334:	702b      	strb	r3, [r5, #0]

	float float_voltage = (max*(voltage))/VREF;
	uint16_t dac_voltage = (uint16_t) float_voltage;
  400336:	4913      	ldr	r1, [pc, #76]	; (400384 <DAC_write_cv+0x5c>)
  400338:	4b13      	ldr	r3, [pc, #76]	; (400388 <DAC_write_cv+0x60>)
  40033a:	4798      	blx	r3
  40033c:	4b13      	ldr	r3, [pc, #76]	; (40038c <DAC_write_cv+0x64>)
  40033e:	4798      	blx	r3
  400340:	b284      	uxth	r4, r0

	uint8_t low_byte = (uint8_t) (dac_voltage << 2);
	uint8_t high_byte = ((uint8_t) (dac_voltage >> 6)) | (0x90);

	
	SPI_dac_init();
  400342:	4b13      	ldr	r3, [pc, #76]	; (400390 <DAC_write_cv+0x68>)
  400344:	4798      	blx	r3
	REG_PIOB_CODR |=  PIO_PER_P13;
  400346:	4a13      	ldr	r2, [pc, #76]	; (400394 <DAC_write_cv+0x6c>)
  400348:	6813      	ldr	r3, [r2, #0]
  40034a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  40034e:	6013      	str	r3, [r2, #0]
	SPI_byteSend(high_byte);
  400350:	09a0      	lsrs	r0, r4, #6
  400352:	f060 006f 	orn	r0, r0, #111	; 0x6f
  400356:	b2c0      	uxtb	r0, r0
  400358:	4e0f      	ldr	r6, [pc, #60]	; (400398 <DAC_write_cv+0x70>)
  40035a:	47b0      	blx	r6
	SPI_byteSend(low_byte);
  40035c:	00a0      	lsls	r0, r4, #2
  40035e:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
  400362:	47b0      	blx	r6
	delay_us(3);
  400364:	2016      	movs	r0, #22
  400366:	4b0d      	ldr	r3, [pc, #52]	; (40039c <DAC_write_cv+0x74>)
  400368:	4798      	blx	r3
	REG_PIOB_SODR |=  PIO_PER_P13;
  40036a:	4a0d      	ldr	r2, [pc, #52]	; (4003a0 <DAC_write_cv+0x78>)
  40036c:	6813      	ldr	r3, [r2, #0]
  40036e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  400372:	6013      	str	r3, [r2, #0]

	cpu_irq_enable();
  400374:	2301      	movs	r3, #1
  400376:	702b      	strb	r3, [r5, #0]
  400378:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  40037c:	b662      	cpsie	i
  40037e:	bd70      	pop	{r4, r5, r6, pc}
  400380:	200001f0 	.word	0x200001f0
  400384:	42cc999a 	.word	0x42cc999a
  400388:	004029a1 	.word	0x004029a1
  40038c:	00402c41 	.word	0x00402c41
  400390:	00401e69 	.word	0x00401e69
  400394:	400e1034 	.word	0x400e1034
  400398:	00401ef5 	.word	0x00401ef5
  40039c:	20000001 	.word	0x20000001
  4003a0:	400e1030 	.word	0x400e1030

004003a4 <DAC_write_gate_on>:
	

}

void DAC_write_gate_on(){
  4003a4:	b538      	push	{r3, r4, r5, lr}
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  4003a6:	b672      	cpsid	i
  4003a8:	f3bf 8f5f 	dmb	sy

	cpu_irq_disable();
  4003ac:	4c0e      	ldr	r4, [pc, #56]	; (4003e8 <DAC_write_gate_on+0x44>)
  4003ae:	2300      	movs	r3, #0
  4003b0:	7023      	strb	r3, [r4, #0]
	uint16_t dac_voltage = (uint16_t) float_voltage;

	uint8_t low_byte = (uint8_t) (dac_voltage << 2);
	uint8_t high_byte = ((uint8_t) (dac_voltage >> 6)) | (0xA0);

	SPI_dac_init();
  4003b2:	4b0e      	ldr	r3, [pc, #56]	; (4003ec <DAC_write_gate_on+0x48>)
  4003b4:	4798      	blx	r3
	REG_PIOB_CODR |=  PIO_PER_P13;
  4003b6:	4a0e      	ldr	r2, [pc, #56]	; (4003f0 <DAC_write_gate_on+0x4c>)
  4003b8:	6813      	ldr	r3, [r2, #0]
  4003ba:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  4003be:	6013      	str	r3, [r2, #0]
	SPI_byteSend(high_byte);
  4003c0:	20af      	movs	r0, #175	; 0xaf
  4003c2:	4d0c      	ldr	r5, [pc, #48]	; (4003f4 <DAC_write_gate_on+0x50>)
  4003c4:	47a8      	blx	r5
	SPI_byteSend(low_byte);
  4003c6:	20fc      	movs	r0, #252	; 0xfc
  4003c8:	47a8      	blx	r5
	delay_us(3);
  4003ca:	2016      	movs	r0, #22
  4003cc:	4b0a      	ldr	r3, [pc, #40]	; (4003f8 <DAC_write_gate_on+0x54>)
  4003ce:	4798      	blx	r3
	REG_PIOB_SODR |=  PIO_PER_P13;
  4003d0:	4a0a      	ldr	r2, [pc, #40]	; (4003fc <DAC_write_gate_on+0x58>)
  4003d2:	6813      	ldr	r3, [r2, #0]
  4003d4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  4003d8:	6013      	str	r3, [r2, #0]

	cpu_irq_enable();
  4003da:	2301      	movs	r3, #1
  4003dc:	7023      	strb	r3, [r4, #0]
  4003de:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  4003e2:	b662      	cpsie	i
  4003e4:	bd38      	pop	{r3, r4, r5, pc}
  4003e6:	bf00      	nop
  4003e8:	200001f0 	.word	0x200001f0
  4003ec:	00401e69 	.word	0x00401e69
  4003f0:	400e1034 	.word	0x400e1034
  4003f4:	00401ef5 	.word	0x00401ef5
  4003f8:	20000001 	.word	0x20000001
  4003fc:	400e1030 	.word	0x400e1030

00400400 <DAC_write_gate_off>:
}

void DAC_write_gate_off(){
  400400:	b570      	push	{r4, r5, r6, lr}
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  400402:	b672      	cpsid	i
  400404:	f3bf 8f5f 	dmb	sy

	cpu_irq_disable();
  400408:	4c0e      	ldr	r4, [pc, #56]	; (400444 <DAC_write_gate_off+0x44>)
  40040a:	2600      	movs	r6, #0
  40040c:	7026      	strb	r6, [r4, #0]
	uint16_t dac_voltage = (uint16_t) float_voltage;

	uint8_t low_byte = (uint8_t) (dac_voltage << 2);
	uint8_t high_byte = ((uint8_t) (dac_voltage >> 6)) | (0xA0);

	SPI_dac_init();
  40040e:	4b0e      	ldr	r3, [pc, #56]	; (400448 <DAC_write_gate_off+0x48>)
  400410:	4798      	blx	r3
	REG_PIOB_CODR |=  PIO_PER_P13;
  400412:	4a0e      	ldr	r2, [pc, #56]	; (40044c <DAC_write_gate_off+0x4c>)
  400414:	6813      	ldr	r3, [r2, #0]
  400416:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  40041a:	6013      	str	r3, [r2, #0]
	SPI_byteSend(high_byte);
  40041c:	20a0      	movs	r0, #160	; 0xa0
  40041e:	4d0c      	ldr	r5, [pc, #48]	; (400450 <DAC_write_gate_off+0x50>)
  400420:	47a8      	blx	r5
	SPI_byteSend(low_byte);
  400422:	4630      	mov	r0, r6
  400424:	47a8      	blx	r5
	delay_us(3);
  400426:	2016      	movs	r0, #22
  400428:	4b0a      	ldr	r3, [pc, #40]	; (400454 <DAC_write_gate_off+0x54>)
  40042a:	4798      	blx	r3
	REG_PIOB_SODR |=  PIO_PER_P13;
  40042c:	4a0a      	ldr	r2, [pc, #40]	; (400458 <DAC_write_gate_off+0x58>)
  40042e:	6813      	ldr	r3, [r2, #0]
  400430:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  400434:	6013      	str	r3, [r2, #0]

	cpu_irq_enable();
  400436:	2301      	movs	r3, #1
  400438:	7023      	strb	r3, [r4, #0]
  40043a:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  40043e:	b662      	cpsie	i
  400440:	bd70      	pop	{r4, r5, r6, pc}
  400442:	bf00      	nop
  400444:	200001f0 	.word	0x200001f0
  400448:	00401e69 	.word	0x00401e69
  40044c:	400e1034 	.word	0x400e1034
  400450:	00401ef5 	.word	0x00401ef5
  400454:	20000001 	.word	0x20000001
  400458:	400e1030 	.word	0x400e1030

0040045c <display_command>:
 #define BOARD_ID_TWI    ID_TWI0
 #define BOARD_BASE_TWI  TWI0


 //Used to sent command to the display during operation
 void display_command(uint8_t control_data){
  40045c:	b500      	push	{lr}
  40045e:	b087      	sub	sp, #28
	 twi_packet_t packet_tx;
	 uint8_t command_data[] = {control, control_data};
  400460:	2300      	movs	r3, #0
  400462:	f88d 3000 	strb.w	r3, [sp]
  400466:	f88d 0001 	strb.w	r0, [sp, #1]

	 packet_tx.chip        = 0b0111100;		// 0x78 is slave address for display
  40046a:	223c      	movs	r2, #60	; 0x3c
  40046c:	f88d 2014 	strb.w	r2, [sp, #20]
	 packet_tx.addr_length = 0;
  400470:	9302      	str	r3, [sp, #8]
	 packet_tx.buffer      = (uint8_t *) command_data;
  400472:	f8cd d00c 	str.w	sp, [sp, #12]
	 packet_tx.length      = 2;
  400476:	2302      	movs	r3, #2
  400478:	9304      	str	r3, [sp, #16]
	 twi_master_write(BOARD_BASE_TWI, &packet_tx);
  40047a:	a901      	add	r1, sp, #4
  40047c:	4802      	ldr	r0, [pc, #8]	; (400488 <display_command+0x2c>)
  40047e:	4b03      	ldr	r3, [pc, #12]	; (40048c <display_command+0x30>)
  400480:	4798      	blx	r3

 }
  400482:	b007      	add	sp, #28
  400484:	f85d fb04 	ldr.w	pc, [sp], #4
  400488:	40018000 	.word	0x40018000
  40048c:	004002c1 	.word	0x004002c1

00400490 <display_reset>:
	packet_tx.buffer      = (uint8_t *) command_data;
	packet_tx.length      = 2;
	twi_master_write(BOARD_BASE_TWI, &packet_tx);
 }

 void display_reset(){
  400490:	b538      	push	{r3, r4, r5, lr}
	REG_PIOA_SODR |= PIO_PER_P31; //set high
  400492:	4c0a      	ldr	r4, [pc, #40]	; (4004bc <display_reset+0x2c>)
  400494:	6823      	ldr	r3, [r4, #0]
  400496:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  40049a:	6023      	str	r3, [r4, #0]
	delay_ms(1);
  40049c:	f641 30e7 	movw	r0, #7143	; 0x1be7
  4004a0:	4d07      	ldr	r5, [pc, #28]	; (4004c0 <display_reset+0x30>)
  4004a2:	47a8      	blx	r5
	REG_PIOA_CODR |= PIO_PER_P31; //set low
  4004a4:	4a07      	ldr	r2, [pc, #28]	; (4004c4 <display_reset+0x34>)
  4004a6:	6813      	ldr	r3, [r2, #0]
  4004a8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  4004ac:	6013      	str	r3, [r2, #0]
	delay_ms(10);
  4004ae:	4806      	ldr	r0, [pc, #24]	; (4004c8 <display_reset+0x38>)
  4004b0:	47a8      	blx	r5
	REG_PIOA_SODR |= PIO_PER_P31; //set high and hold for normal operation
  4004b2:	6823      	ldr	r3, [r4, #0]
  4004b4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  4004b8:	6023      	str	r3, [r4, #0]
  4004ba:	bd38      	pop	{r3, r4, r5, pc}
  4004bc:	400e0e30 	.word	0x400e0e30
  4004c0:	20000001 	.word	0x20000001
  4004c4:	400e0e34 	.word	0x400e0e34
  4004c8:	00011705 	.word	0x00011705

004004cc <display_ports_init>:
 }

 void display_ports_init(){
	//configure register used for display reset if not already done
	REG_PIOA_PER |= PIO_PER_P31; //enable PIO controller on PA31
  4004cc:	4a11      	ldr	r2, [pc, #68]	; (400514 <display_ports_init+0x48>)
  4004ce:	6813      	ldr	r3, [r2, #0]
  4004d0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  4004d4:	6013      	str	r3, [r2, #0]
	REG_PIOA_OER |= PIO_PER_P31; //enable output on pin PA31
  4004d6:	4b10      	ldr	r3, [pc, #64]	; (400518 <display_ports_init+0x4c>)
  4004d8:	6819      	ldr	r1, [r3, #0]
  4004da:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
  4004de:	6019      	str	r1, [r3, #0]

	//configure Display Select 0
	REG_PIOA_PER |= PIO_PER_P28; //enable PIO controller on PA28
  4004e0:	6811      	ldr	r1, [r2, #0]
  4004e2:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
  4004e6:	6011      	str	r1, [r2, #0]
	REG_PIOA_OER |= PIO_PER_P28; //enable output on pin PA28
  4004e8:	6819      	ldr	r1, [r3, #0]
  4004ea:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
  4004ee:	6019      	str	r1, [r3, #0]

	//configure Display Select 1
	REG_PIOA_PER |= PIO_PER_P29; //enable PIO controller on PA29
  4004f0:	6811      	ldr	r1, [r2, #0]
  4004f2:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
  4004f6:	6011      	str	r1, [r2, #0]
	REG_PIOA_OER |= PIO_PER_P29; //enable output on pin PA29
  4004f8:	6819      	ldr	r1, [r3, #0]
  4004fa:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
  4004fe:	6019      	str	r1, [r3, #0]

	//configure Display Select 2
	REG_PIOA_PER |= PIO_PER_P30; //enable PIO controller on PA30
  400500:	6811      	ldr	r1, [r2, #0]
  400502:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
  400506:	6011      	str	r1, [r2, #0]
	REG_PIOA_OER |= PIO_PER_P30; //enable output on pin PA30
  400508:	681a      	ldr	r2, [r3, #0]
  40050a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
  40050e:	601a      	str	r2, [r3, #0]
  400510:	4770      	bx	lr
  400512:	bf00      	nop
  400514:	400e0e00 	.word	0x400e0e00
  400518:	400e0e10 	.word	0x400e0e10

0040051c <display_init>:
 }

 void display_init(){
  40051c:	b510      	push	{r4, lr}

	delay_ms(40);
  40051e:	481b      	ldr	r0, [pc, #108]	; (40058c <display_init+0x70>)
  400520:	4b1b      	ldr	r3, [pc, #108]	; (400590 <display_init+0x74>)
  400522:	4798      	blx	r3

	//reset display to begin
	display_ports_init();
  400524:	4b1b      	ldr	r3, [pc, #108]	; (400594 <display_init+0x78>)
  400526:	4798      	blx	r3
	display_reset();	
  400528:	4b1b      	ldr	r3, [pc, #108]	; (400598 <display_init+0x7c>)
  40052a:	4798      	blx	r3

	//init settings for OLED
	display_command(SSD1306_DISPLAYOFF);
  40052c:	20ae      	movs	r0, #174	; 0xae
  40052e:	4c1b      	ldr	r4, [pc, #108]	; (40059c <display_init+0x80>)
  400530:	47a0      	blx	r4

	display_command(SSD1306_SETDISPLAYCLOCKDIV);
  400532:	20d5      	movs	r0, #213	; 0xd5
  400534:	47a0      	blx	r4
	display_command(0x80);
  400536:	2080      	movs	r0, #128	; 0x80
  400538:	47a0      	blx	r4

	display_command(SSD1306_SETMULTIPLEX);
  40053a:	20a8      	movs	r0, #168	; 0xa8
  40053c:	47a0      	blx	r4
	display_command(0x3F);
  40053e:	203f      	movs	r0, #63	; 0x3f
  400540:	47a0      	blx	r4

	//set no display offset
	display_command(SSD1306_SETDISPLAYOFFSET);
  400542:	20d3      	movs	r0, #211	; 0xd3
  400544:	47a0      	blx	r4
	display_command(0x00);
  400546:	2000      	movs	r0, #0
  400548:	47a0      	blx	r4

	//start at line 0
	display_command(SSD1306_SETSTARTLINE);
  40054a:	2040      	movs	r0, #64	; 0x40
  40054c:	47a0      	blx	r4

	display_command(SSD1306_CHARGEPUMP);
  40054e:	208d      	movs	r0, #141	; 0x8d
  400550:	47a0      	blx	r4
	display_command(0x14);	//internal VCC from charge pump
  400552:	2014      	movs	r0, #20
  400554:	47a0      	blx	r4

	//set segment remap
	display_command(0xA1);
  400556:	20a1      	movs	r0, #161	; 0xa1
  400558:	47a0      	blx	r4

	//set com scan direction
	display_command(SSD1306_COMSCANDEC);
  40055a:	20c8      	movs	r0, #200	; 0xc8
  40055c:	47a0      	blx	r4

	display_command(SSD1306_SETCOMPINS);
  40055e:	20da      	movs	r0, #218	; 0xda
  400560:	47a0      	blx	r4
	display_command(0x12);
  400562:	2012      	movs	r0, #18
  400564:	47a0      	blx	r4

	display_command(SSD1306_SETCONTRAST);
  400566:	2081      	movs	r0, #129	; 0x81
  400568:	47a0      	blx	r4
	display_command(0xCF);
  40056a:	20cf      	movs	r0, #207	; 0xcf
  40056c:	47a0      	blx	r4

	display_command(SSD1306_SETPRECHARGE);
  40056e:	20d9      	movs	r0, #217	; 0xd9
  400570:	47a0      	blx	r4
	display_command(0xF1);
  400572:	20f1      	movs	r0, #241	; 0xf1
  400574:	47a0      	blx	r4

	display_command(SSD1306_SETVCOMDETECT);
  400576:	20db      	movs	r0, #219	; 0xdb
  400578:	47a0      	blx	r4
	display_command(0x40);
  40057a:	2040      	movs	r0, #64	; 0x40
  40057c:	47a0      	blx	r4

	display_command(SSD1306_NORMALDISPLAY);
  40057e:	20a6      	movs	r0, #166	; 0xa6
  400580:	47a0      	blx	r4
	display_command(SSD1306_DISPLAYALLON);
  400582:	20a5      	movs	r0, #165	; 0xa5
  400584:	47a0      	blx	r4

	display_command(SSD1306_DISPLAYON);
  400586:	20af      	movs	r0, #175	; 0xaf
  400588:	47a0      	blx	r4
  40058a:	bd10      	pop	{r4, pc}
  40058c:	00045c13 	.word	0x00045c13
  400590:	20000001 	.word	0x20000001
  400594:	004004cd 	.word	0x004004cd
  400598:	00400491 	.word	0x00400491
  40059c:	0040045d 	.word	0x0040045d

004005a0 <encoder_direction>:
#include "timers.h"

uint8_t A_seq;
uint8_t B_seq;

 void encoder_direction(uint32_t A, uint32_t B, uint8_t step){
  4005a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	//read Encoder input A
	bool A_in = REG_PIOC_PDSR & A;
  4005a2:	4b19      	ldr	r3, [pc, #100]	; (400608 <encoder_direction+0x68>)
  4005a4:	681f      	ldr	r7, [r3, #0]
	//read Encoder input B
	bool B_in = REG_PIOC_PDSR & B;
  4005a6:	681d      	ldr	r5, [r3, #0]
	
	A_seq = A_seq << 1;
	A_seq |= A_in;
	
	B_seq = B_seq << 1;
  4005a8:	4c18      	ldr	r4, [pc, #96]	; (40060c <encoder_direction+0x6c>)
	B_seq |= B_in;
  4005aa:	7823      	ldrb	r3, [r4, #0]
  4005ac:	420d      	tst	r5, r1
  4005ae:	bf14      	ite	ne
  4005b0:	2101      	movne	r1, #1
  4005b2:	2100      	moveq	r1, #0
  4005b4:	ea41 0143 	orr.w	r1, r1, r3, lsl #1
	//read Encoder input A
	bool A_in = REG_PIOC_PDSR & A;
	//read Encoder input B
	bool B_in = REG_PIOC_PDSR & B;
	
	A_seq = A_seq << 1;
  4005b8:	4d15      	ldr	r5, [pc, #84]	; (400610 <encoder_direction+0x70>)
	A_seq |= A_in;
	
	B_seq = B_seq << 1;
	B_seq |= B_in;
	
	A_seq &= 0b00001111;
  4005ba:	782e      	ldrb	r6, [r5, #0]
  4005bc:	4207      	tst	r7, r0
  4005be:	bf14      	ite	ne
  4005c0:	2301      	movne	r3, #1
  4005c2:	2300      	moveq	r3, #0
  4005c4:	ea43 0346 	orr.w	r3, r3, r6, lsl #1
  4005c8:	f003 030f 	and.w	r3, r3, #15
  4005cc:	702b      	strb	r3, [r5, #0]
	B_seq &= 0b00001111;
  4005ce:	f001 010f 	and.w	r1, r1, #15
  4005d2:	7021      	strb	r1, [r4, #0]


	//return true if turned right
	if ((A_seq == 0b00001001) && (B_seq == 0b00000011)){
  4005d4:	2b09      	cmp	r3, #9
  4005d6:	d10a      	bne.n	4005ee <encoder_direction+0x4e>
  4005d8:	2903      	cmp	r1, #3
  4005da:	d114      	bne.n	400606 <encoder_direction+0x66>
		REG_PIOB_SODR |= PIO_PER_P3; //set output high on PB3
  4005dc:	490d      	ldr	r1, [pc, #52]	; (400614 <encoder_direction+0x74>)
  4005de:	680b      	ldr	r3, [r1, #0]
  4005e0:	f043 0308 	orr.w	r3, r3, #8
  4005e4:	600b      	str	r3, [r1, #0]
		notes_inc(step);
  4005e6:	4610      	mov	r0, r2
  4005e8:	4b0b      	ldr	r3, [pc, #44]	; (400618 <encoder_direction+0x78>)
  4005ea:	4798      	blx	r3
  4005ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}

	else if ((A_seq == 0b00000011) && (B_seq == 0b00001001)){
  4005ee:	2b03      	cmp	r3, #3
  4005f0:	d109      	bne.n	400606 <encoder_direction+0x66>
  4005f2:	2909      	cmp	r1, #9
  4005f4:	d107      	bne.n	400606 <encoder_direction+0x66>
		REG_PIOB_CODR |= PIO_PER_P3; //set output low on PB3
  4005f6:	4909      	ldr	r1, [pc, #36]	; (40061c <encoder_direction+0x7c>)
  4005f8:	680b      	ldr	r3, [r1, #0]
  4005fa:	f043 0308 	orr.w	r3, r3, #8
  4005fe:	600b      	str	r3, [r1, #0]
		notes_dec(step);
  400600:	4610      	mov	r0, r2
  400602:	4b07      	ldr	r3, [pc, #28]	; (400620 <encoder_direction+0x80>)
  400604:	4798      	blx	r3
  400606:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400608:	400e123c 	.word	0x400e123c
  40060c:	200086f6 	.word	0x200086f6
  400610:	200086f5 	.word	0x200086f5
  400614:	400e1030 	.word	0x400e1030
  400618:	00401fb1 	.word	0x00401fb1
  40061c:	400e1034 	.word	0x400e1034
  400620:	00401fed 	.word	0x00401fed

00400624 <Encoder_init>:
	}
}


void Encoder_init(){
  400624:	b470      	push	{r4, r5, r6}
	A_seq = 0;
  400626:	2300      	movs	r3, #0
  400628:	4aa8      	ldr	r2, [pc, #672]	; (4008cc <Encoder_init+0x2a8>)
  40062a:	7013      	strb	r3, [r2, #0]
	B_seq = 0;
  40062c:	4aa8      	ldr	r2, [pc, #672]	; (4008d0 <Encoder_init+0x2ac>)
  40062e:	7013      	strb	r3, [r2, #0]

	//enable clock for PIOC
	REG_PMC_PCER0 |= PMC_PCER0_PID13;
  400630:	4aa8      	ldr	r2, [pc, #672]	; (4008d4 <Encoder_init+0x2b0>)
  400632:	6813      	ldr	r3, [r2, #0]
  400634:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  400638:	6013      	str	r3, [r2, #0]


	/**************			CONFIGURE 16 STEP ENCODERS			**************/

	//Set up PC0 as ENCODER 1 INPUT A
	REG_PIOC_PER |= PIO_PER_P0; //enable PIO controller
  40063a:	4da7      	ldr	r5, [pc, #668]	; (4008d8 <Encoder_init+0x2b4>)
  40063c:	682b      	ldr	r3, [r5, #0]
  40063e:	f043 0301 	orr.w	r3, r3, #1
  400642:	602b      	str	r3, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P0; //disable output
  400644:	4ca5      	ldr	r4, [pc, #660]	; (4008dc <Encoder_init+0x2b8>)
  400646:	6823      	ldr	r3, [r4, #0]
  400648:	f043 0301 	orr.w	r3, r3, #1
  40064c:	6023      	str	r3, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P0; //disable pull-down resistor
  40064e:	48a4      	ldr	r0, [pc, #656]	; (4008e0 <Encoder_init+0x2bc>)
  400650:	6803      	ldr	r3, [r0, #0]
  400652:	f043 0301 	orr.w	r3, r3, #1
  400656:	6003      	str	r3, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P0;	//enable pull-up resistor
  400658:	49a2      	ldr	r1, [pc, #648]	; (4008e4 <Encoder_init+0x2c0>)
  40065a:	680b      	ldr	r3, [r1, #0]
  40065c:	f043 0301 	orr.w	r3, r3, #1
  400660:	600b      	str	r3, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P0; //turn on slow clock debounce
  400662:	f602 6274 	addw	r2, r2, #3700	; 0xe74
  400666:	6813      	ldr	r3, [r2, #0]
  400668:	f043 0301 	orr.w	r3, r3, #1
  40066c:	6013      	str	r3, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P0;	//start debounce filter
  40066e:	4b9e      	ldr	r3, [pc, #632]	; (4008e8 <Encoder_init+0x2c4>)
  400670:	681e      	ldr	r6, [r3, #0]
  400672:	f046 0601 	orr.w	r6, r6, #1
  400676:	601e      	str	r6, [r3, #0]

	//Set up PC1 as ENCODER 1 INPUT B
	REG_PIOC_PER |= PIO_PER_P1; //enable PIO controller
  400678:	682e      	ldr	r6, [r5, #0]
  40067a:	f046 0602 	orr.w	r6, r6, #2
  40067e:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P1; //disable output
  400680:	6826      	ldr	r6, [r4, #0]
  400682:	f046 0602 	orr.w	r6, r6, #2
  400686:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P1; //disable pull-down resistor
  400688:	6806      	ldr	r6, [r0, #0]
  40068a:	f046 0602 	orr.w	r6, r6, #2
  40068e:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P1;	//enable pull-up resistor
  400690:	680e      	ldr	r6, [r1, #0]
  400692:	f046 0602 	orr.w	r6, r6, #2
  400696:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P1; //turn on slow clock debounce
  400698:	6816      	ldr	r6, [r2, #0]
  40069a:	f046 0602 	orr.w	r6, r6, #2
  40069e:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P1;	//start debounce filter
  4006a0:	681e      	ldr	r6, [r3, #0]
  4006a2:	f046 0602 	orr.w	r6, r6, #2
  4006a6:	601e      	str	r6, [r3, #0]


	
	//Set up PC2 as ENCODER 2 INPUT A
	REG_PIOC_PER |= PIO_PER_P2; //enable PIO controller
  4006a8:	682e      	ldr	r6, [r5, #0]
  4006aa:	f046 0604 	orr.w	r6, r6, #4
  4006ae:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P2; //disable output
  4006b0:	6826      	ldr	r6, [r4, #0]
  4006b2:	f046 0604 	orr.w	r6, r6, #4
  4006b6:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P2; //disable pull-down resistor
  4006b8:	6806      	ldr	r6, [r0, #0]
  4006ba:	f046 0604 	orr.w	r6, r6, #4
  4006be:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P2;	//enable pull-up resistor
  4006c0:	680e      	ldr	r6, [r1, #0]
  4006c2:	f046 0604 	orr.w	r6, r6, #4
  4006c6:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P2; //turn on slow clock debounce
  4006c8:	6816      	ldr	r6, [r2, #0]
  4006ca:	f046 0604 	orr.w	r6, r6, #4
  4006ce:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P2;	//start debounce filter
  4006d0:	681e      	ldr	r6, [r3, #0]
  4006d2:	f046 0604 	orr.w	r6, r6, #4
  4006d6:	601e      	str	r6, [r3, #0]

	//Set up PC3 as ENCODER 2 INPUT B
	REG_PIOC_PER |= PIO_PER_P3; //enable PIO controller
  4006d8:	682e      	ldr	r6, [r5, #0]
  4006da:	f046 0608 	orr.w	r6, r6, #8
  4006de:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P3; //disable output
  4006e0:	6826      	ldr	r6, [r4, #0]
  4006e2:	f046 0608 	orr.w	r6, r6, #8
  4006e6:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P3; //disable pull-down resistor
  4006e8:	6806      	ldr	r6, [r0, #0]
  4006ea:	f046 0608 	orr.w	r6, r6, #8
  4006ee:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P3;	//enable pull-up resistor
  4006f0:	680e      	ldr	r6, [r1, #0]
  4006f2:	f046 0608 	orr.w	r6, r6, #8
  4006f6:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P3; //turn on slow clock debounce
  4006f8:	6816      	ldr	r6, [r2, #0]
  4006fa:	f046 0608 	orr.w	r6, r6, #8
  4006fe:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P3;	//start debounce filter
  400700:	681e      	ldr	r6, [r3, #0]
  400702:	f046 0608 	orr.w	r6, r6, #8
  400706:	601e      	str	r6, [r3, #0]



	//Set up PC4 as ENCODER 3 INPUT A
	REG_PIOC_PER |= PIO_PER_P4; //enable PIO controller
  400708:	682e      	ldr	r6, [r5, #0]
  40070a:	f046 0610 	orr.w	r6, r6, #16
  40070e:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P4; //disable output
  400710:	6826      	ldr	r6, [r4, #0]
  400712:	f046 0610 	orr.w	r6, r6, #16
  400716:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P4; //disable pull-down resistor
  400718:	6806      	ldr	r6, [r0, #0]
  40071a:	f046 0610 	orr.w	r6, r6, #16
  40071e:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P4;	//enable pull-up resistor
  400720:	680e      	ldr	r6, [r1, #0]
  400722:	f046 0610 	orr.w	r6, r6, #16
  400726:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P4; //turn on slow clock debounce
  400728:	6816      	ldr	r6, [r2, #0]
  40072a:	f046 0610 	orr.w	r6, r6, #16
  40072e:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P4;	//start debounce filter
  400730:	681e      	ldr	r6, [r3, #0]
  400732:	f046 0610 	orr.w	r6, r6, #16
  400736:	601e      	str	r6, [r3, #0]

	//Set up PC5 as ENCODER 3 INPUT B
	REG_PIOC_PER |= PIO_PER_P5; //enable PIO controller
  400738:	682e      	ldr	r6, [r5, #0]
  40073a:	f046 0620 	orr.w	r6, r6, #32
  40073e:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P5; //disable output
  400740:	6826      	ldr	r6, [r4, #0]
  400742:	f046 0620 	orr.w	r6, r6, #32
  400746:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P5; //disable pull-down resistor
  400748:	6806      	ldr	r6, [r0, #0]
  40074a:	f046 0620 	orr.w	r6, r6, #32
  40074e:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P5;	//enable pull-up resistor
  400750:	680e      	ldr	r6, [r1, #0]
  400752:	f046 0620 	orr.w	r6, r6, #32
  400756:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P5; //turn on slow clock debounce
  400758:	6816      	ldr	r6, [r2, #0]
  40075a:	f046 0620 	orr.w	r6, r6, #32
  40075e:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P5;	//start debounce filter
  400760:	681e      	ldr	r6, [r3, #0]
  400762:	f046 0620 	orr.w	r6, r6, #32
  400766:	601e      	str	r6, [r3, #0]



	//Set up PC6 as ENCODER 4 INPUT A
	REG_PIOC_PER |= PIO_PER_P6; //enable PIO controller
  400768:	682e      	ldr	r6, [r5, #0]
  40076a:	f046 0640 	orr.w	r6, r6, #64	; 0x40
  40076e:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P6; //disable output
  400770:	6826      	ldr	r6, [r4, #0]
  400772:	f046 0640 	orr.w	r6, r6, #64	; 0x40
  400776:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P6; //disable pull-down resistor
  400778:	6806      	ldr	r6, [r0, #0]
  40077a:	f046 0640 	orr.w	r6, r6, #64	; 0x40
  40077e:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P6;	//enable pull-up resistor
  400780:	680e      	ldr	r6, [r1, #0]
  400782:	f046 0640 	orr.w	r6, r6, #64	; 0x40
  400786:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P6; //turn on slow clock debounce
  400788:	6816      	ldr	r6, [r2, #0]
  40078a:	f046 0640 	orr.w	r6, r6, #64	; 0x40
  40078e:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P6;	//start debounce filter
  400790:	681e      	ldr	r6, [r3, #0]
  400792:	f046 0640 	orr.w	r6, r6, #64	; 0x40
  400796:	601e      	str	r6, [r3, #0]

	//Set up PC7 as ENCODER 4 INPUT B
	REG_PIOC_PER |= PIO_PER_P7; //enable PIO controller
  400798:	682e      	ldr	r6, [r5, #0]
  40079a:	f046 0680 	orr.w	r6, r6, #128	; 0x80
  40079e:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P7; //disable output
  4007a0:	6826      	ldr	r6, [r4, #0]
  4007a2:	f046 0680 	orr.w	r6, r6, #128	; 0x80
  4007a6:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P7; //disable pull-down resistor
  4007a8:	6806      	ldr	r6, [r0, #0]
  4007aa:	f046 0680 	orr.w	r6, r6, #128	; 0x80
  4007ae:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P7;	//enable pull-up resistor
  4007b0:	680e      	ldr	r6, [r1, #0]
  4007b2:	f046 0680 	orr.w	r6, r6, #128	; 0x80
  4007b6:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P7; //turn on slow clock debounce
  4007b8:	6816      	ldr	r6, [r2, #0]
  4007ba:	f046 0680 	orr.w	r6, r6, #128	; 0x80
  4007be:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P7;	//start debounce filter
  4007c0:	681e      	ldr	r6, [r3, #0]
  4007c2:	f046 0680 	orr.w	r6, r6, #128	; 0x80
  4007c6:	601e      	str	r6, [r3, #0]



	//Set up PC8 as ENCODER 5 INPUT A
	REG_PIOC_PER |= PIO_PER_P8; //enable PIO controller
  4007c8:	682e      	ldr	r6, [r5, #0]
  4007ca:	f446 7680 	orr.w	r6, r6, #256	; 0x100
  4007ce:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P8; //disable output
  4007d0:	6826      	ldr	r6, [r4, #0]
  4007d2:	f446 7680 	orr.w	r6, r6, #256	; 0x100
  4007d6:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P8; //disable pull-down resistor
  4007d8:	6806      	ldr	r6, [r0, #0]
  4007da:	f446 7680 	orr.w	r6, r6, #256	; 0x100
  4007de:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P8;	//enable pull-up resistor
  4007e0:	680e      	ldr	r6, [r1, #0]
  4007e2:	f446 7680 	orr.w	r6, r6, #256	; 0x100
  4007e6:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P8; //turn on slow clock debounce
  4007e8:	6816      	ldr	r6, [r2, #0]
  4007ea:	f446 7680 	orr.w	r6, r6, #256	; 0x100
  4007ee:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P8;	//start debounce filter
  4007f0:	681e      	ldr	r6, [r3, #0]
  4007f2:	f446 7680 	orr.w	r6, r6, #256	; 0x100
  4007f6:	601e      	str	r6, [r3, #0]

	//Set up PC9 as ENCODER 5 INPUT B
	REG_PIOC_PER |= PIO_PER_P9; //enable PIO controller
  4007f8:	682e      	ldr	r6, [r5, #0]
  4007fa:	f446 7600 	orr.w	r6, r6, #512	; 0x200
  4007fe:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P9; //disable output
  400800:	6826      	ldr	r6, [r4, #0]
  400802:	f446 7600 	orr.w	r6, r6, #512	; 0x200
  400806:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P9; //disable pull-down resistor
  400808:	6806      	ldr	r6, [r0, #0]
  40080a:	f446 7600 	orr.w	r6, r6, #512	; 0x200
  40080e:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P9;	//enable pull-up resistor
  400810:	680e      	ldr	r6, [r1, #0]
  400812:	f446 7600 	orr.w	r6, r6, #512	; 0x200
  400816:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P9; //turn on slow clock debounce
  400818:	6816      	ldr	r6, [r2, #0]
  40081a:	f446 7600 	orr.w	r6, r6, #512	; 0x200
  40081e:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P9;	//start debounce filter
  400820:	681e      	ldr	r6, [r3, #0]
  400822:	f446 7600 	orr.w	r6, r6, #512	; 0x200
  400826:	601e      	str	r6, [r3, #0]



	//Set up PC10 as ENCODER 6 INPUT A
	REG_PIOC_PER |= PIO_PER_P10; //enable PIO controller
  400828:	682e      	ldr	r6, [r5, #0]
  40082a:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
  40082e:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P10; //disable output
  400830:	6826      	ldr	r6, [r4, #0]
  400832:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
  400836:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P10; //disable pull-down resistor
  400838:	6806      	ldr	r6, [r0, #0]
  40083a:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
  40083e:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P10;	//enable pull-up resistor
  400840:	680e      	ldr	r6, [r1, #0]
  400842:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
  400846:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P10; //turn on slow clock debounce
  400848:	6816      	ldr	r6, [r2, #0]
  40084a:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
  40084e:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P10;	//start debounce filter
  400850:	681e      	ldr	r6, [r3, #0]
  400852:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
  400856:	601e      	str	r6, [r3, #0]

	//Set up PC11 as ENCODER 6 INPUT B
	REG_PIOC_PER |= PIO_PER_P11; //enable PIO controller
  400858:	682e      	ldr	r6, [r5, #0]
  40085a:	f446 6600 	orr.w	r6, r6, #2048	; 0x800
  40085e:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P11; //disable output
  400860:	6826      	ldr	r6, [r4, #0]
  400862:	f446 6600 	orr.w	r6, r6, #2048	; 0x800
  400866:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P11; //disable pull-down resistor
  400868:	6806      	ldr	r6, [r0, #0]
  40086a:	f446 6600 	orr.w	r6, r6, #2048	; 0x800
  40086e:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P11;	//enable pull-up resistor
  400870:	680e      	ldr	r6, [r1, #0]
  400872:	f446 6600 	orr.w	r6, r6, #2048	; 0x800
  400876:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P11; //turn on slow clock debounce
  400878:	6816      	ldr	r6, [r2, #0]
  40087a:	f446 6600 	orr.w	r6, r6, #2048	; 0x800
  40087e:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P11;	//start debounce filter
  400880:	681e      	ldr	r6, [r3, #0]
  400882:	f446 6600 	orr.w	r6, r6, #2048	; 0x800
  400886:	601e      	str	r6, [r3, #0]



	//Set up PC12 as ENCODER 7 INPUT A
	REG_PIOC_PER |= PIO_PER_P3; //enable PIO controller
  400888:	682e      	ldr	r6, [r5, #0]
  40088a:	f046 0608 	orr.w	r6, r6, #8
  40088e:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P3; //disable output
  400890:	6826      	ldr	r6, [r4, #0]
  400892:	f046 0608 	orr.w	r6, r6, #8
  400896:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P3; //disable pull-down resistor
  400898:	6806      	ldr	r6, [r0, #0]
  40089a:	f046 0608 	orr.w	r6, r6, #8
  40089e:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P3;	//enable pull-up resistor
  4008a0:	680e      	ldr	r6, [r1, #0]
  4008a2:	f046 0608 	orr.w	r6, r6, #8
  4008a6:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P3; //turn on slow clock debounce
  4008a8:	6816      	ldr	r6, [r2, #0]
  4008aa:	f046 0608 	orr.w	r6, r6, #8
  4008ae:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P3;	//start debounce filter
  4008b0:	681e      	ldr	r6, [r3, #0]
  4008b2:	f046 0608 	orr.w	r6, r6, #8
  4008b6:	601e      	str	r6, [r3, #0]

	//Set up PC13 as ENCODER 7 INPUT B
	REG_PIOC_PER |= PIO_PER_P13; //enable PIO controller
  4008b8:	682e      	ldr	r6, [r5, #0]
  4008ba:	f446 5600 	orr.w	r6, r6, #8192	; 0x2000
  4008be:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P13; //disable output
  4008c0:	6826      	ldr	r6, [r4, #0]
  4008c2:	f446 5600 	orr.w	r6, r6, #8192	; 0x2000
  4008c6:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P13; //disable pull-down resistor
  4008c8:	6806      	ldr	r6, [r0, #0]
  4008ca:	e00f      	b.n	4008ec <Encoder_init+0x2c8>
  4008cc:	200086f5 	.word	0x200086f5
  4008d0:	200086f6 	.word	0x200086f6
  4008d4:	400e0410 	.word	0x400e0410
  4008d8:	400e1200 	.word	0x400e1200
  4008dc:	400e1214 	.word	0x400e1214
  4008e0:	400e1290 	.word	0x400e1290
  4008e4:	400e1264 	.word	0x400e1264
  4008e8:	400e1220 	.word	0x400e1220
  4008ec:	f446 5600 	orr.w	r6, r6, #8192	; 0x2000
  4008f0:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P13;	//enable pull-up resistor
  4008f2:	680e      	ldr	r6, [r1, #0]
  4008f4:	f446 5600 	orr.w	r6, r6, #8192	; 0x2000
  4008f8:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P13; //turn on slow clock debounce
  4008fa:	6816      	ldr	r6, [r2, #0]
  4008fc:	f446 5600 	orr.w	r6, r6, #8192	; 0x2000
  400900:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P13;	//start debounce filter
  400902:	681e      	ldr	r6, [r3, #0]
  400904:	f446 5600 	orr.w	r6, r6, #8192	; 0x2000
  400908:	601e      	str	r6, [r3, #0]



	//Set up PC14 as ENCODER 8 INPUT A
	REG_PIOC_PER |= PIO_PER_P14; //enable PIO controller
  40090a:	682e      	ldr	r6, [r5, #0]
  40090c:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
  400910:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P14; //disable output
  400912:	6826      	ldr	r6, [r4, #0]
  400914:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
  400918:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P14; //disable pull-down resistor
  40091a:	6806      	ldr	r6, [r0, #0]
  40091c:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
  400920:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P14;	//enable pull-up resistor
  400922:	680e      	ldr	r6, [r1, #0]
  400924:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
  400928:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P14; //turn on slow clock debounce
  40092a:	6816      	ldr	r6, [r2, #0]
  40092c:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
  400930:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P14;	//start debounce filter
  400932:	681e      	ldr	r6, [r3, #0]
  400934:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
  400938:	601e      	str	r6, [r3, #0]

	//Set up PC15 as ENCODER 8 INPUT B
	REG_PIOC_PER |= PIO_PER_P15; //enable PIO controller
  40093a:	682e      	ldr	r6, [r5, #0]
  40093c:	f446 4600 	orr.w	r6, r6, #32768	; 0x8000
  400940:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P15; //disable output
  400942:	6826      	ldr	r6, [r4, #0]
  400944:	f446 4600 	orr.w	r6, r6, #32768	; 0x8000
  400948:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P15; //disable pull-down resistor
  40094a:	6806      	ldr	r6, [r0, #0]
  40094c:	f446 4600 	orr.w	r6, r6, #32768	; 0x8000
  400950:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P15;	//enable pull-up resistor
  400952:	680e      	ldr	r6, [r1, #0]
  400954:	f446 4600 	orr.w	r6, r6, #32768	; 0x8000
  400958:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P15; //turn on slow clock debounce
  40095a:	6816      	ldr	r6, [r2, #0]
  40095c:	f446 4600 	orr.w	r6, r6, #32768	; 0x8000
  400960:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P15;	//start debounce filter
  400962:	681e      	ldr	r6, [r3, #0]
  400964:	f446 4600 	orr.w	r6, r6, #32768	; 0x8000
  400968:	601e      	str	r6, [r3, #0]



	//Set up PC16 as ENCODER 9 INPUT A
	REG_PIOC_PER |= PIO_PER_P16; //enable PIO controller
  40096a:	682e      	ldr	r6, [r5, #0]
  40096c:	f446 3680 	orr.w	r6, r6, #65536	; 0x10000
  400970:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P16; //disable output
  400972:	6826      	ldr	r6, [r4, #0]
  400974:	f446 3680 	orr.w	r6, r6, #65536	; 0x10000
  400978:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P16; //disable pull-down resistor
  40097a:	6806      	ldr	r6, [r0, #0]
  40097c:	f446 3680 	orr.w	r6, r6, #65536	; 0x10000
  400980:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P16;	//enable pull-up resistor
  400982:	680e      	ldr	r6, [r1, #0]
  400984:	f446 3680 	orr.w	r6, r6, #65536	; 0x10000
  400988:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P16; //turn on slow clock debounce
  40098a:	6816      	ldr	r6, [r2, #0]
  40098c:	f446 3680 	orr.w	r6, r6, #65536	; 0x10000
  400990:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P16;	//start debounce filter
  400992:	681e      	ldr	r6, [r3, #0]
  400994:	f446 3680 	orr.w	r6, r6, #65536	; 0x10000
  400998:	601e      	str	r6, [r3, #0]

	//Set up PC17 as ENCODER 9 INPUT B
	REG_PIOC_PER |= PIO_PER_P17; //enable PIO controller
  40099a:	682e      	ldr	r6, [r5, #0]
  40099c:	f446 3600 	orr.w	r6, r6, #131072	; 0x20000
  4009a0:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P17; //disable output
  4009a2:	6826      	ldr	r6, [r4, #0]
  4009a4:	f446 3600 	orr.w	r6, r6, #131072	; 0x20000
  4009a8:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P17; //disable pull-down resistor
  4009aa:	6806      	ldr	r6, [r0, #0]
  4009ac:	f446 3600 	orr.w	r6, r6, #131072	; 0x20000
  4009b0:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P17;	//enable pull-up resistor
  4009b2:	680e      	ldr	r6, [r1, #0]
  4009b4:	f446 3600 	orr.w	r6, r6, #131072	; 0x20000
  4009b8:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P17; //turn on slow clock debounce
  4009ba:	6816      	ldr	r6, [r2, #0]
  4009bc:	f446 3600 	orr.w	r6, r6, #131072	; 0x20000
  4009c0:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P17;	//start debounce filter
  4009c2:	681e      	ldr	r6, [r3, #0]
  4009c4:	f446 3600 	orr.w	r6, r6, #131072	; 0x20000
  4009c8:	601e      	str	r6, [r3, #0]



	
	//Set up PC18 as ENCODER 10 INPUT A
	REG_PIOC_PER |= PIO_PER_P18; //enable PIO controller
  4009ca:	682e      	ldr	r6, [r5, #0]
  4009cc:	f446 2680 	orr.w	r6, r6, #262144	; 0x40000
  4009d0:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P18; //disable output
  4009d2:	6826      	ldr	r6, [r4, #0]
  4009d4:	f446 2680 	orr.w	r6, r6, #262144	; 0x40000
  4009d8:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P18; //disable pull-down resistor
  4009da:	6806      	ldr	r6, [r0, #0]
  4009dc:	f446 2680 	orr.w	r6, r6, #262144	; 0x40000
  4009e0:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P18;	//enable pull-up resistor
  4009e2:	680e      	ldr	r6, [r1, #0]
  4009e4:	f446 2680 	orr.w	r6, r6, #262144	; 0x40000
  4009e8:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P18; //turn on slow clock debounce
  4009ea:	6816      	ldr	r6, [r2, #0]
  4009ec:	f446 2680 	orr.w	r6, r6, #262144	; 0x40000
  4009f0:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P18;	//start debounce filter
  4009f2:	681e      	ldr	r6, [r3, #0]
  4009f4:	f446 2680 	orr.w	r6, r6, #262144	; 0x40000
  4009f8:	601e      	str	r6, [r3, #0]

	//Set up PC19 as ENCODER 10 INPUT B
	REG_PIOC_PER |= PIO_PER_P19; //enable PIO controller
  4009fa:	682e      	ldr	r6, [r5, #0]
  4009fc:	f446 2600 	orr.w	r6, r6, #524288	; 0x80000
  400a00:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P19; //disable output
  400a02:	6826      	ldr	r6, [r4, #0]
  400a04:	f446 2600 	orr.w	r6, r6, #524288	; 0x80000
  400a08:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P19; //disable pull-down resistor
  400a0a:	6806      	ldr	r6, [r0, #0]
  400a0c:	f446 2600 	orr.w	r6, r6, #524288	; 0x80000
  400a10:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P19;	//enable pull-up resistor
  400a12:	680e      	ldr	r6, [r1, #0]
  400a14:	f446 2600 	orr.w	r6, r6, #524288	; 0x80000
  400a18:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P19; //turn on slow clock debounce
  400a1a:	6816      	ldr	r6, [r2, #0]
  400a1c:	f446 2600 	orr.w	r6, r6, #524288	; 0x80000
  400a20:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P19;	//start debounce filter
  400a22:	681e      	ldr	r6, [r3, #0]
  400a24:	f446 2600 	orr.w	r6, r6, #524288	; 0x80000
  400a28:	601e      	str	r6, [r3, #0]



	//Set up PC20 as ENCODER 11 INPUT A
	REG_PIOC_PER |= PIO_PER_P20; //enable PIO controller
  400a2a:	682e      	ldr	r6, [r5, #0]
  400a2c:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
  400a30:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P20; //disable output
  400a32:	6826      	ldr	r6, [r4, #0]
  400a34:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
  400a38:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P20; //disable pull-down resistor
  400a3a:	6806      	ldr	r6, [r0, #0]
  400a3c:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
  400a40:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P20;	//enable pull-up resistor
  400a42:	680e      	ldr	r6, [r1, #0]
  400a44:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
  400a48:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P20; //turn on slow clock debounce
  400a4a:	6816      	ldr	r6, [r2, #0]
  400a4c:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
  400a50:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P20;	//start debounce filter
  400a52:	681e      	ldr	r6, [r3, #0]
  400a54:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
  400a58:	601e      	str	r6, [r3, #0]

	//Set up PC21 as ENCODER 11 INPUT B
	REG_PIOC_PER |= PIO_PER_P21; //enable PIO controller
  400a5a:	682e      	ldr	r6, [r5, #0]
  400a5c:	f446 1600 	orr.w	r6, r6, #2097152	; 0x200000
  400a60:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P21; //disable output
  400a62:	6826      	ldr	r6, [r4, #0]
  400a64:	f446 1600 	orr.w	r6, r6, #2097152	; 0x200000
  400a68:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P21; //disable pull-down resistor
  400a6a:	6806      	ldr	r6, [r0, #0]
  400a6c:	f446 1600 	orr.w	r6, r6, #2097152	; 0x200000
  400a70:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P21;	//enable pull-up resistor
  400a72:	680e      	ldr	r6, [r1, #0]
  400a74:	f446 1600 	orr.w	r6, r6, #2097152	; 0x200000
  400a78:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P21; //turn on slow clock debounce
  400a7a:	6816      	ldr	r6, [r2, #0]
  400a7c:	f446 1600 	orr.w	r6, r6, #2097152	; 0x200000
  400a80:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P21;	//start debounce filter
  400a82:	681e      	ldr	r6, [r3, #0]
  400a84:	f446 1600 	orr.w	r6, r6, #2097152	; 0x200000
  400a88:	601e      	str	r6, [r3, #0]



	//Set up PC22 as ENCODER 12 INPUT A
	REG_PIOC_PER |= PIO_PER_P22; //enable PIO controller
  400a8a:	682e      	ldr	r6, [r5, #0]
  400a8c:	f446 0680 	orr.w	r6, r6, #4194304	; 0x400000
  400a90:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P22; //disable output
  400a92:	6826      	ldr	r6, [r4, #0]
  400a94:	f446 0680 	orr.w	r6, r6, #4194304	; 0x400000
  400a98:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P22; //disable pull-down resistor
  400a9a:	6806      	ldr	r6, [r0, #0]
  400a9c:	f446 0680 	orr.w	r6, r6, #4194304	; 0x400000
  400aa0:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P22;	//enable pull-up resistor
  400aa2:	680e      	ldr	r6, [r1, #0]
  400aa4:	f446 0680 	orr.w	r6, r6, #4194304	; 0x400000
  400aa8:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P22; //turn on slow clock debounce
  400aaa:	6816      	ldr	r6, [r2, #0]
  400aac:	f446 0680 	orr.w	r6, r6, #4194304	; 0x400000
  400ab0:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P22;	//start debounce filter
  400ab2:	681e      	ldr	r6, [r3, #0]
  400ab4:	f446 0680 	orr.w	r6, r6, #4194304	; 0x400000
  400ab8:	601e      	str	r6, [r3, #0]

	//Set up PC23 as ENCODER 12 INPUT B
	REG_PIOC_PER |= PIO_PER_P23; //enable PIO controller
  400aba:	682e      	ldr	r6, [r5, #0]
  400abc:	f446 0600 	orr.w	r6, r6, #8388608	; 0x800000
  400ac0:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P23; //disable output
  400ac2:	6826      	ldr	r6, [r4, #0]
  400ac4:	f446 0600 	orr.w	r6, r6, #8388608	; 0x800000
  400ac8:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P23; //disable pull-down resistor
  400aca:	6806      	ldr	r6, [r0, #0]
  400acc:	f446 0600 	orr.w	r6, r6, #8388608	; 0x800000
  400ad0:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P23;	//enable pull-up resistor
  400ad2:	680e      	ldr	r6, [r1, #0]
  400ad4:	f446 0600 	orr.w	r6, r6, #8388608	; 0x800000
  400ad8:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P23; //turn on slow clock debounce
  400ada:	6816      	ldr	r6, [r2, #0]
  400adc:	f446 0600 	orr.w	r6, r6, #8388608	; 0x800000
  400ae0:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P23;	//start debounce filter
  400ae2:	681e      	ldr	r6, [r3, #0]
  400ae4:	f446 0600 	orr.w	r6, r6, #8388608	; 0x800000
  400ae8:	601e      	str	r6, [r3, #0]



	//Set up PC24 as ENCODER 13 INPUT A
	REG_PIOC_PER |= PIO_PER_P24; //enable PIO controller
  400aea:	682e      	ldr	r6, [r5, #0]
  400aec:	f046 7680 	orr.w	r6, r6, #16777216	; 0x1000000
  400af0:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P24; //disable output
  400af2:	6826      	ldr	r6, [r4, #0]
  400af4:	f046 7680 	orr.w	r6, r6, #16777216	; 0x1000000
  400af8:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P24; //disable pull-down resistor
  400afa:	6806      	ldr	r6, [r0, #0]
  400afc:	f046 7680 	orr.w	r6, r6, #16777216	; 0x1000000
  400b00:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P24;	//enable pull-up resistor
  400b02:	680e      	ldr	r6, [r1, #0]
  400b04:	f046 7680 	orr.w	r6, r6, #16777216	; 0x1000000
  400b08:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P24; //turn on slow clock debounce
  400b0a:	6816      	ldr	r6, [r2, #0]
  400b0c:	f046 7680 	orr.w	r6, r6, #16777216	; 0x1000000
  400b10:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P24;	//start debounce filter
  400b12:	681e      	ldr	r6, [r3, #0]
  400b14:	f046 7680 	orr.w	r6, r6, #16777216	; 0x1000000
  400b18:	601e      	str	r6, [r3, #0]

	//Set up PC25 as ENCODER 13 INPUT B
	REG_PIOC_PER |= PIO_PER_P25; //enable PIO controller
  400b1a:	682e      	ldr	r6, [r5, #0]
  400b1c:	f046 7600 	orr.w	r6, r6, #33554432	; 0x2000000
  400b20:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P25; //disable output
  400b22:	6826      	ldr	r6, [r4, #0]
  400b24:	f046 7600 	orr.w	r6, r6, #33554432	; 0x2000000
  400b28:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P25; //disable pull-down resistor
  400b2a:	6806      	ldr	r6, [r0, #0]
  400b2c:	f046 7600 	orr.w	r6, r6, #33554432	; 0x2000000
  400b30:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P25;	//enable pull-up resistor
  400b32:	680e      	ldr	r6, [r1, #0]
  400b34:	f046 7600 	orr.w	r6, r6, #33554432	; 0x2000000
  400b38:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P25; //turn on slow clock debounce
  400b3a:	6816      	ldr	r6, [r2, #0]
  400b3c:	f046 7600 	orr.w	r6, r6, #33554432	; 0x2000000
  400b40:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P25;	//start debounce filter
  400b42:	681e      	ldr	r6, [r3, #0]
  400b44:	f046 7600 	orr.w	r6, r6, #33554432	; 0x2000000
  400b48:	601e      	str	r6, [r3, #0]



	//Set up PC26 as ENCODER 14 INPUT A
	REG_PIOC_PER |= PIO_PER_P26; //enable PIO controller
  400b4a:	682e      	ldr	r6, [r5, #0]
  400b4c:	f046 6680 	orr.w	r6, r6, #67108864	; 0x4000000
  400b50:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P26; //disable output
  400b52:	6826      	ldr	r6, [r4, #0]
  400b54:	f046 6680 	orr.w	r6, r6, #67108864	; 0x4000000
  400b58:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P26; //disable pull-down resistor
  400b5a:	6806      	ldr	r6, [r0, #0]
  400b5c:	f046 6680 	orr.w	r6, r6, #67108864	; 0x4000000
  400b60:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P26;	//enable pull-up resistor
  400b62:	680e      	ldr	r6, [r1, #0]
  400b64:	f046 6680 	orr.w	r6, r6, #67108864	; 0x4000000
  400b68:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P26; //turn on slow clock debounce
  400b6a:	6816      	ldr	r6, [r2, #0]
  400b6c:	f046 6680 	orr.w	r6, r6, #67108864	; 0x4000000
  400b70:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P26;	//start debounce filter
  400b72:	681e      	ldr	r6, [r3, #0]
  400b74:	f046 6680 	orr.w	r6, r6, #67108864	; 0x4000000
  400b78:	601e      	str	r6, [r3, #0]

	//Set up PC27 as ENCODER 14 INPUT B
	REG_PIOC_PER |= PIO_PER_P27; //enable PIO controller
  400b7a:	682e      	ldr	r6, [r5, #0]
  400b7c:	f046 6600 	orr.w	r6, r6, #134217728	; 0x8000000
  400b80:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P27; //disable output
  400b82:	6826      	ldr	r6, [r4, #0]
  400b84:	f046 6600 	orr.w	r6, r6, #134217728	; 0x8000000
  400b88:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P27; //disable pull-down resistor
  400b8a:	6806      	ldr	r6, [r0, #0]
  400b8c:	f046 6600 	orr.w	r6, r6, #134217728	; 0x8000000
  400b90:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P27;	//enable pull-up resistor
  400b92:	680e      	ldr	r6, [r1, #0]
  400b94:	f046 6600 	orr.w	r6, r6, #134217728	; 0x8000000
  400b98:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P27; //turn on slow clock debounce
  400b9a:	6816      	ldr	r6, [r2, #0]
  400b9c:	f046 6600 	orr.w	r6, r6, #134217728	; 0x8000000
  400ba0:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P27;	//start debounce filter
  400ba2:	681e      	ldr	r6, [r3, #0]
  400ba4:	f046 6600 	orr.w	r6, r6, #134217728	; 0x8000000
  400ba8:	601e      	str	r6, [r3, #0]



	//Set up PC28 as ENCODER 15 INPUT A
	REG_PIOC_PER |= PIO_PER_P28; //enable PIO controller
  400baa:	682e      	ldr	r6, [r5, #0]
  400bac:	f046 5680 	orr.w	r6, r6, #268435456	; 0x10000000
  400bb0:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P28; //disable output
  400bb2:	6826      	ldr	r6, [r4, #0]
  400bb4:	f046 5680 	orr.w	r6, r6, #268435456	; 0x10000000
  400bb8:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P28; //disable pull-down resistor
  400bba:	6806      	ldr	r6, [r0, #0]
  400bbc:	f046 5680 	orr.w	r6, r6, #268435456	; 0x10000000
  400bc0:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P28;	//enable pull-up resistor
  400bc2:	680e      	ldr	r6, [r1, #0]
  400bc4:	f046 5680 	orr.w	r6, r6, #268435456	; 0x10000000
  400bc8:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P28; //turn on slow clock debounce
  400bca:	6816      	ldr	r6, [r2, #0]
  400bcc:	f046 5680 	orr.w	r6, r6, #268435456	; 0x10000000
  400bd0:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P28;	//start debounce filter
  400bd2:	681e      	ldr	r6, [r3, #0]
  400bd4:	f046 5680 	orr.w	r6, r6, #268435456	; 0x10000000
  400bd8:	601e      	str	r6, [r3, #0]

	//Set up PC29 as ENCODER 15 INPUT B
	REG_PIOC_PER |= PIO_PER_P29; //enable PIO controller
  400bda:	682e      	ldr	r6, [r5, #0]
  400bdc:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
  400be0:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P29; //disable output
  400be2:	6826      	ldr	r6, [r4, #0]
  400be4:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
  400be8:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P29; //disable pull-down resistor
  400bea:	6806      	ldr	r6, [r0, #0]
  400bec:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
  400bf0:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P29;	//enable pull-up resistor
  400bf2:	680e      	ldr	r6, [r1, #0]
  400bf4:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
  400bf8:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P29; //turn on slow clock debounce
  400bfa:	6816      	ldr	r6, [r2, #0]
  400bfc:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
  400c00:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P29;	//start debounce filter
  400c02:	681e      	ldr	r6, [r3, #0]
  400c04:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
  400c08:	601e      	str	r6, [r3, #0]



	//Set up PC30 as ENCODER 16 INPUT A
	REG_PIOC_PER |= PIO_PER_P30; //enable PIO controller
  400c0a:	682e      	ldr	r6, [r5, #0]
  400c0c:	f046 4680 	orr.w	r6, r6, #1073741824	; 0x40000000
  400c10:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P30; //disable output
  400c12:	6826      	ldr	r6, [r4, #0]
  400c14:	f046 4680 	orr.w	r6, r6, #1073741824	; 0x40000000
  400c18:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P30; //disable pull-down resistor
  400c1a:	6806      	ldr	r6, [r0, #0]
  400c1c:	f046 4680 	orr.w	r6, r6, #1073741824	; 0x40000000
  400c20:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P30;	//enable pull-up resistor
  400c22:	680e      	ldr	r6, [r1, #0]
  400c24:	f046 4680 	orr.w	r6, r6, #1073741824	; 0x40000000
  400c28:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P30; //turn on slow clock debounce
  400c2a:	6816      	ldr	r6, [r2, #0]
  400c2c:	f046 4680 	orr.w	r6, r6, #1073741824	; 0x40000000
  400c30:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P30;	//start debounce filter
  400c32:	681e      	ldr	r6, [r3, #0]
  400c34:	f046 4680 	orr.w	r6, r6, #1073741824	; 0x40000000
  400c38:	601e      	str	r6, [r3, #0]

	//Set up PC31 as ENCODER 16 INPUT B
	REG_PIOC_PER |= PIO_PER_P31; //enable PIO controller
  400c3a:	682e      	ldr	r6, [r5, #0]
  400c3c:	f046 4600 	orr.w	r6, r6, #2147483648	; 0x80000000
  400c40:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P31; //disable output
  400c42:	6825      	ldr	r5, [r4, #0]
  400c44:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
  400c48:	6025      	str	r5, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P31; //disable pull-down resistor
  400c4a:	6804      	ldr	r4, [r0, #0]
  400c4c:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
  400c50:	6004      	str	r4, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P31;	//enable pull-up resistor
  400c52:	6808      	ldr	r0, [r1, #0]
  400c54:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
  400c58:	6008      	str	r0, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P31; //turn on slow clock debounce
  400c5a:	6811      	ldr	r1, [r2, #0]
  400c5c:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
  400c60:	6011      	str	r1, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P31;	//start debounce filter
  400c62:	681a      	ldr	r2, [r3, #0]
  400c64:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
  400c68:	601a      	str	r2, [r3, #0]
	


	/**************			CONFIGURE ENCODER INTERRUPTS			**************/

	uint32_t flag_clear = REG_PIOC_ISR;	//clear left over interrupt flags
  400c6a:	332c      	adds	r3, #44	; 0x2c
  400c6c:	681b      	ldr	r3, [r3, #0]

	//Enable interrupts for Encoder 1
	REG_PIOC_IER |= PIO_IER_P0;			//enable input rising edge interrupt
  400c6e:	4b85      	ldr	r3, [pc, #532]	; (400e84 <Encoder_init+0x860>)
  400c70:	681a      	ldr	r2, [r3, #0]
  400c72:	f042 0201 	orr.w	r2, r2, #1
  400c76:	601a      	str	r2, [r3, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P0;
  400c78:	4a83      	ldr	r2, [pc, #524]	; (400e88 <Encoder_init+0x864>)
  400c7a:	6811      	ldr	r1, [r2, #0]
  400c7c:	f041 0101 	orr.w	r1, r1, #1
  400c80:	6011      	str	r1, [r2, #0]
	REG_PIOC_IER |= PIO_IER_P1;			//enable input rising edge interrupt
  400c82:	6819      	ldr	r1, [r3, #0]
  400c84:	f041 0102 	orr.w	r1, r1, #2
  400c88:	6019      	str	r1, [r3, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P1;
  400c8a:	6811      	ldr	r1, [r2, #0]
  400c8c:	f041 0102 	orr.w	r1, r1, #2
  400c90:	6011      	str	r1, [r2, #0]

	//Enable interrupts for Encoder 2
	REG_PIOC_IER |= PIO_IER_P2;			//enable input rising edge interrupt
  400c92:	6819      	ldr	r1, [r3, #0]
  400c94:	f041 0104 	orr.w	r1, r1, #4
  400c98:	6019      	str	r1, [r3, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P2;
  400c9a:	6812      	ldr	r2, [r2, #0]
  400c9c:	f042 0204 	orr.w	r2, r2, #4
  400ca0:	3394      	adds	r3, #148	; 0x94
  400ca2:	601a      	str	r2, [r3, #0]
	REG_PIOC_IER |= PIO_IER_P3;			//enable input rising edge interrupt
  400ca4:	4a77      	ldr	r2, [pc, #476]	; (400e84 <Encoder_init+0x860>)
  400ca6:	6811      	ldr	r1, [r2, #0]
  400ca8:	f041 0108 	orr.w	r1, r1, #8
  400cac:	6011      	str	r1, [r2, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P3;
  400cae:	6819      	ldr	r1, [r3, #0]
  400cb0:	f041 0108 	orr.w	r1, r1, #8
  400cb4:	6019      	str	r1, [r3, #0]

	//Enable interrupts for Encoder 3
	REG_PIOC_IER |= PIO_IER_P4;			//enable input rising edge interrupt
  400cb6:	6811      	ldr	r1, [r2, #0]
  400cb8:	f041 0110 	orr.w	r1, r1, #16
  400cbc:	6011      	str	r1, [r2, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P4;
  400cbe:	6819      	ldr	r1, [r3, #0]
  400cc0:	f041 0110 	orr.w	r1, r1, #16
  400cc4:	6019      	str	r1, [r3, #0]
	REG_PIOC_IER |= PIO_IER_P5;			//enable input rising edge interrupt
  400cc6:	6811      	ldr	r1, [r2, #0]
  400cc8:	f041 0120 	orr.w	r1, r1, #32
  400ccc:	6011      	str	r1, [r2, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P5;
  400cce:	6819      	ldr	r1, [r3, #0]
  400cd0:	f041 0120 	orr.w	r1, r1, #32
  400cd4:	6019      	str	r1, [r3, #0]

	//Enable interrupts for Encoder 4
	REG_PIOC_IER |= PIO_IER_P6;			//enable input rising edge interrupt
  400cd6:	6811      	ldr	r1, [r2, #0]
  400cd8:	f041 0140 	orr.w	r1, r1, #64	; 0x40
  400cdc:	6011      	str	r1, [r2, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P6;
  400cde:	6819      	ldr	r1, [r3, #0]
  400ce0:	f041 0140 	orr.w	r1, r1, #64	; 0x40
  400ce4:	6019      	str	r1, [r3, #0]
	REG_PIOC_IER |= PIO_IER_P7;			//enable input rising edge interrupt
  400ce6:	6811      	ldr	r1, [r2, #0]
  400ce8:	f041 0180 	orr.w	r1, r1, #128	; 0x80
  400cec:	6011      	str	r1, [r2, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P7;
  400cee:	6819      	ldr	r1, [r3, #0]
  400cf0:	f041 0180 	orr.w	r1, r1, #128	; 0x80
  400cf4:	6019      	str	r1, [r3, #0]

	//Enable interrupts for Encoder 5
	REG_PIOC_IER |= PIO_IER_P8;			//enable input rising edge interrupt
  400cf6:	6811      	ldr	r1, [r2, #0]
  400cf8:	f441 7180 	orr.w	r1, r1, #256	; 0x100
  400cfc:	6011      	str	r1, [r2, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P8;
  400cfe:	6819      	ldr	r1, [r3, #0]
  400d00:	f441 7180 	orr.w	r1, r1, #256	; 0x100
  400d04:	6019      	str	r1, [r3, #0]
	REG_PIOC_IER |= PIO_IER_P9;			//enable input rising edge interrupt
  400d06:	6811      	ldr	r1, [r2, #0]
  400d08:	f441 7100 	orr.w	r1, r1, #512	; 0x200
  400d0c:	6011      	str	r1, [r2, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P9;
  400d0e:	6819      	ldr	r1, [r3, #0]
  400d10:	f441 7100 	orr.w	r1, r1, #512	; 0x200
  400d14:	6019      	str	r1, [r3, #0]

	//Enable interrupts for Encoder 6
	REG_PIOC_IER |= PIO_IER_P10;			//enable input rising edge interrupt
  400d16:	6811      	ldr	r1, [r2, #0]
  400d18:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
  400d1c:	6011      	str	r1, [r2, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P10;
  400d1e:	6819      	ldr	r1, [r3, #0]
  400d20:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
  400d24:	6019      	str	r1, [r3, #0]
	REG_PIOC_IER |= PIO_IER_P11;			//enable input rising edge interrupt
  400d26:	6811      	ldr	r1, [r2, #0]
  400d28:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
  400d2c:	6011      	str	r1, [r2, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P11;
  400d2e:	6819      	ldr	r1, [r3, #0]
  400d30:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
  400d34:	6019      	str	r1, [r3, #0]

	//Enable interrupts for Encoder 7
	REG_PIOC_IER |= PIO_IER_P3;			//enable input rising edge interrupt
  400d36:	6811      	ldr	r1, [r2, #0]
  400d38:	f041 0108 	orr.w	r1, r1, #8
  400d3c:	6011      	str	r1, [r2, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P3;
  400d3e:	6819      	ldr	r1, [r3, #0]
  400d40:	f041 0108 	orr.w	r1, r1, #8
  400d44:	6019      	str	r1, [r3, #0]
	REG_PIOC_IER |= PIO_IER_P13;			//enable input rising edge interrupt
  400d46:	6811      	ldr	r1, [r2, #0]
  400d48:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
  400d4c:	6011      	str	r1, [r2, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P13;
  400d4e:	6819      	ldr	r1, [r3, #0]
  400d50:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
  400d54:	6019      	str	r1, [r3, #0]

	//Enable interrupts for Encoder 8
	REG_PIOC_IER |= PIO_IER_P14;			//enable input rising edge interrupt
  400d56:	6811      	ldr	r1, [r2, #0]
  400d58:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
  400d5c:	6011      	str	r1, [r2, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P14;
  400d5e:	6819      	ldr	r1, [r3, #0]
  400d60:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
  400d64:	6019      	str	r1, [r3, #0]
	REG_PIOC_IER |= PIO_IER_P15;			//enable input rising edge interrupt
  400d66:	6811      	ldr	r1, [r2, #0]
  400d68:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
  400d6c:	6011      	str	r1, [r2, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P15;
  400d6e:	6819      	ldr	r1, [r3, #0]
  400d70:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
  400d74:	6019      	str	r1, [r3, #0]

	//Enable interrupts for Encoder 9
	REG_PIOC_IER |= PIO_IER_P16;			//enable input rising edge interrupt
  400d76:	6811      	ldr	r1, [r2, #0]
  400d78:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
  400d7c:	6011      	str	r1, [r2, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P16;
  400d7e:	6819      	ldr	r1, [r3, #0]
  400d80:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
  400d84:	6019      	str	r1, [r3, #0]
	REG_PIOC_IER |= PIO_IER_P17;			//enable input rising edge interrupt
  400d86:	6811      	ldr	r1, [r2, #0]
  400d88:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
  400d8c:	6011      	str	r1, [r2, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P17;
  400d8e:	6819      	ldr	r1, [r3, #0]
  400d90:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
  400d94:	6019      	str	r1, [r3, #0]

	//Enable interrupts for Encoder 10
	REG_PIOC_IER |= PIO_IER_P18;			//enable input rising edge interrupt
  400d96:	6811      	ldr	r1, [r2, #0]
  400d98:	f441 2180 	orr.w	r1, r1, #262144	; 0x40000
  400d9c:	6011      	str	r1, [r2, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P18;
  400d9e:	6819      	ldr	r1, [r3, #0]
  400da0:	f441 2180 	orr.w	r1, r1, #262144	; 0x40000
  400da4:	6019      	str	r1, [r3, #0]
	REG_PIOC_IER |= PIO_IER_P19;			//enable input rising edge interrupt
  400da6:	6811      	ldr	r1, [r2, #0]
  400da8:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
  400dac:	6011      	str	r1, [r2, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P19;
  400dae:	6819      	ldr	r1, [r3, #0]
  400db0:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
  400db4:	6019      	str	r1, [r3, #0]

	//Enable interrupts for Encoder 11
	REG_PIOC_IER |= PIO_IER_P20;			//enable input rising edge interrupt
  400db6:	6811      	ldr	r1, [r2, #0]
  400db8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  400dbc:	6011      	str	r1, [r2, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P20;
  400dbe:	6819      	ldr	r1, [r3, #0]
  400dc0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  400dc4:	6019      	str	r1, [r3, #0]
	REG_PIOC_IER |= PIO_IER_P21;			//enable input rising edge interrupt
  400dc6:	6811      	ldr	r1, [r2, #0]
  400dc8:	f441 1100 	orr.w	r1, r1, #2097152	; 0x200000
  400dcc:	6011      	str	r1, [r2, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P21;
  400dce:	6819      	ldr	r1, [r3, #0]
  400dd0:	f441 1100 	orr.w	r1, r1, #2097152	; 0x200000
  400dd4:	6019      	str	r1, [r3, #0]

	//Enable interrupts for Encoder 12
	REG_PIOC_IER |= PIO_IER_P22;			//enable input rising edge interrupt
  400dd6:	6811      	ldr	r1, [r2, #0]
  400dd8:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
  400ddc:	6011      	str	r1, [r2, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P22;
  400dde:	6819      	ldr	r1, [r3, #0]
  400de0:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
  400de4:	6019      	str	r1, [r3, #0]
	REG_PIOC_IER |= PIO_IER_P23;			//enable input rising edge interrupt
  400de6:	6811      	ldr	r1, [r2, #0]
  400de8:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
  400dec:	6011      	str	r1, [r2, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P23;
  400dee:	6819      	ldr	r1, [r3, #0]
  400df0:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
  400df4:	6019      	str	r1, [r3, #0]

	//Enable interrupts for Encoder 13
	REG_PIOC_IER |= PIO_IER_P24;			//enable input rising edge interrupt
  400df6:	6811      	ldr	r1, [r2, #0]
  400df8:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
  400dfc:	6011      	str	r1, [r2, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P24;
  400dfe:	6819      	ldr	r1, [r3, #0]
  400e00:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
  400e04:	6019      	str	r1, [r3, #0]
	REG_PIOC_IER |= PIO_IER_P25;			//enable input rising edge interrupt
  400e06:	6811      	ldr	r1, [r2, #0]
  400e08:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
  400e0c:	6011      	str	r1, [r2, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P25;
  400e0e:	6819      	ldr	r1, [r3, #0]
  400e10:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
  400e14:	6019      	str	r1, [r3, #0]

	//Enable interrupts for Encoder 14
	REG_PIOC_IER |= PIO_IER_P26;			//enable input rising edge interrupt
  400e16:	6811      	ldr	r1, [r2, #0]
  400e18:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
  400e1c:	6011      	str	r1, [r2, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P26;
  400e1e:	6819      	ldr	r1, [r3, #0]
  400e20:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
  400e24:	6019      	str	r1, [r3, #0]
	REG_PIOC_IER |= PIO_IER_P27;			//enable input rising edge interrupt
  400e26:	6811      	ldr	r1, [r2, #0]
  400e28:	f041 6100 	orr.w	r1, r1, #134217728	; 0x8000000
  400e2c:	6011      	str	r1, [r2, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P27;
  400e2e:	6819      	ldr	r1, [r3, #0]
  400e30:	f041 6100 	orr.w	r1, r1, #134217728	; 0x8000000
  400e34:	6019      	str	r1, [r3, #0]

	//Enable interrupts for Encoder 15
	REG_PIOC_IER |= PIO_IER_P28;			//enable input rising edge interrupt
  400e36:	6811      	ldr	r1, [r2, #0]
  400e38:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
  400e3c:	6011      	str	r1, [r2, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P28;
  400e3e:	6819      	ldr	r1, [r3, #0]
  400e40:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
  400e44:	6019      	str	r1, [r3, #0]
	REG_PIOC_IER |= PIO_IER_P29;			//enable input rising edge interrupt
  400e46:	6811      	ldr	r1, [r2, #0]
  400e48:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
  400e4c:	6011      	str	r1, [r2, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P29;
  400e4e:	6819      	ldr	r1, [r3, #0]
  400e50:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
  400e54:	6019      	str	r1, [r3, #0]

	//Enable interrupts for Encoder 16
	REG_PIOC_IER |= PIO_IER_P30;			//enable input rising edge interrupt
  400e56:	6811      	ldr	r1, [r2, #0]
  400e58:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
  400e5c:	6011      	str	r1, [r2, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P30;
  400e5e:	6819      	ldr	r1, [r3, #0]
  400e60:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
  400e64:	6019      	str	r1, [r3, #0]
	REG_PIOC_IER |= PIO_IER_P31;			//enable input rising edge interrupt
  400e66:	6811      	ldr	r1, [r2, #0]
  400e68:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
  400e6c:	6011      	str	r1, [r2, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P31;
  400e6e:	681a      	ldr	r2, [r3, #0]
  400e70:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
  400e74:	601a      	str	r2, [r3, #0]
  400e76:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  400e7a:	4b04      	ldr	r3, [pc, #16]	; (400e8c <Encoder_init+0x868>)
  400e7c:	601a      	str	r2, [r3, #0]

	NVIC_EnableIRQ(PIOC_IRQn);			//enable PORT C interrupts


}
  400e7e:	bc70      	pop	{r4, r5, r6}
  400e80:	4770      	bx	lr
  400e82:	bf00      	nop
  400e84:	400e1240 	.word	0x400e1240
  400e88:	400e12d4 	.word	0x400e12d4
  400e8c:	e000e100 	.word	0xe000e100

00400e90 <PIOC_Handler>:



void PIOC_Handler(){
  400e90:	b508      	push	{r3, lr}

	uint32_t status = REG_PIOC_ISR;	//read PIOC interrupt status & clear interrupt flags
  400e92:	4b56      	ldr	r3, [pc, #344]	; (400fec <PIOC_Handler+0x15c>)
  400e94:	681b      	ldr	r3, [r3, #0]

	//check if Encoder 1 was rotated
	if ( (status & PIO_ISR_P0) || (status & PIO_ISR_P1) ){	
  400e96:	f013 0f03 	tst.w	r3, #3
  400e9a:	d005      	beq.n	400ea8 <PIOC_Handler+0x18>
		encoder_direction(PIO_ODSR_P0, PIO_ODSR_P1, 0);
  400e9c:	2200      	movs	r2, #0
  400e9e:	2102      	movs	r1, #2
  400ea0:	2001      	movs	r0, #1
  400ea2:	4b53      	ldr	r3, [pc, #332]	; (400ff0 <PIOC_Handler+0x160>)
  400ea4:	4798      	blx	r3
  400ea6:	bd08      	pop	{r3, pc}
	}

	//check if Encoder 2 was rotated
	else if ( (status & PIO_ISR_P2) || (status & PIO_ISR_P3) ){
  400ea8:	f013 0f0c 	tst.w	r3, #12
  400eac:	d005      	beq.n	400eba <PIOC_Handler+0x2a>
		encoder_direction(PIO_ODSR_P2, PIO_ODSR_P3, 1);
  400eae:	2201      	movs	r2, #1
  400eb0:	2108      	movs	r1, #8
  400eb2:	2004      	movs	r0, #4
  400eb4:	4b4e      	ldr	r3, [pc, #312]	; (400ff0 <PIOC_Handler+0x160>)
  400eb6:	4798      	blx	r3
  400eb8:	bd08      	pop	{r3, pc}
	}

	//check if Encoder 3 was rotated
	else if ( (status & PIO_ISR_P4) || (status & PIO_ISR_P5) ){
  400eba:	f013 0f30 	tst.w	r3, #48	; 0x30
  400ebe:	d005      	beq.n	400ecc <PIOC_Handler+0x3c>
		encoder_direction(PIO_ODSR_P4, PIO_ODSR_P5, 2);
  400ec0:	2202      	movs	r2, #2
  400ec2:	2120      	movs	r1, #32
  400ec4:	2010      	movs	r0, #16
  400ec6:	4b4a      	ldr	r3, [pc, #296]	; (400ff0 <PIOC_Handler+0x160>)
  400ec8:	4798      	blx	r3
  400eca:	bd08      	pop	{r3, pc}
	}

	//check if Encoder 4 was rotated
	else if ( (status & PIO_ISR_P6) || (status & PIO_ISR_P7) ){
  400ecc:	f013 0fc0 	tst.w	r3, #192	; 0xc0
  400ed0:	d005      	beq.n	400ede <PIOC_Handler+0x4e>
		encoder_direction(PIO_ODSR_P6, PIO_ODSR_P7, 3);
  400ed2:	2203      	movs	r2, #3
  400ed4:	2180      	movs	r1, #128	; 0x80
  400ed6:	2040      	movs	r0, #64	; 0x40
  400ed8:	4b45      	ldr	r3, [pc, #276]	; (400ff0 <PIOC_Handler+0x160>)
  400eda:	4798      	blx	r3
  400edc:	bd08      	pop	{r3, pc}
	}

	//check if Encoder 5 was rotated
	else if ( (status & PIO_ISR_P8) || (status & PIO_ISR_P9) ){
  400ede:	f413 7f40 	tst.w	r3, #768	; 0x300
  400ee2:	d007      	beq.n	400ef4 <PIOC_Handler+0x64>
		encoder_direction(PIO_ODSR_P8, PIO_ODSR_P9, 4);
  400ee4:	2204      	movs	r2, #4
  400ee6:	f44f 7100 	mov.w	r1, #512	; 0x200
  400eea:	f44f 7080 	mov.w	r0, #256	; 0x100
  400eee:	4b40      	ldr	r3, [pc, #256]	; (400ff0 <PIOC_Handler+0x160>)
  400ef0:	4798      	blx	r3
  400ef2:	bd08      	pop	{r3, pc}
	}

	//check if Encoder 6 was rotated
	else if ( (status & PIO_ISR_P10) || (status & PIO_ISR_P11) ){
  400ef4:	f413 6f40 	tst.w	r3, #3072	; 0xc00
  400ef8:	d007      	beq.n	400f0a <PIOC_Handler+0x7a>
		encoder_direction(PIO_ODSR_P10, PIO_ODSR_P11, 5);
  400efa:	2205      	movs	r2, #5
  400efc:	f44f 6100 	mov.w	r1, #2048	; 0x800
  400f00:	f44f 6080 	mov.w	r0, #1024	; 0x400
  400f04:	4b3a      	ldr	r3, [pc, #232]	; (400ff0 <PIOC_Handler+0x160>)
  400f06:	4798      	blx	r3
  400f08:	bd08      	pop	{r3, pc}
	}

	//check if Encoder 7 was rotated
	else if ( (status & PIO_ISR_P12) || (status & PIO_ISR_P13) ){
  400f0a:	f413 5f40 	tst.w	r3, #12288	; 0x3000
  400f0e:	d007      	beq.n	400f20 <PIOC_Handler+0x90>
		encoder_direction(PIO_ODSR_P12, PIO_ODSR_P13, 6);
  400f10:	2206      	movs	r2, #6
  400f12:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  400f16:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  400f1a:	4b35      	ldr	r3, [pc, #212]	; (400ff0 <PIOC_Handler+0x160>)
  400f1c:	4798      	blx	r3
  400f1e:	bd08      	pop	{r3, pc}
	}

	//check if Encoder 8 was rotated
	else if ( (status & PIO_ISR_P14) || (status & PIO_ISR_P15) ){
  400f20:	f413 4f40 	tst.w	r3, #49152	; 0xc000
  400f24:	d007      	beq.n	400f36 <PIOC_Handler+0xa6>
		encoder_direction(PIO_ODSR_P14, PIO_ODSR_P15, 7);
  400f26:	2207      	movs	r2, #7
  400f28:	f44f 4100 	mov.w	r1, #32768	; 0x8000
  400f2c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  400f30:	4b2f      	ldr	r3, [pc, #188]	; (400ff0 <PIOC_Handler+0x160>)
  400f32:	4798      	blx	r3
  400f34:	bd08      	pop	{r3, pc}
	}

	//check if Encoder 9 was rotated
	else if ( (status & PIO_ISR_P16) || (status & PIO_ISR_P17) ){
  400f36:	f413 3f40 	tst.w	r3, #196608	; 0x30000
  400f3a:	d007      	beq.n	400f4c <PIOC_Handler+0xbc>
		encoder_direction(PIO_ODSR_P16, PIO_ODSR_P17, 8);
  400f3c:	2208      	movs	r2, #8
  400f3e:	f44f 3100 	mov.w	r1, #131072	; 0x20000
  400f42:	f44f 3080 	mov.w	r0, #65536	; 0x10000
  400f46:	4b2a      	ldr	r3, [pc, #168]	; (400ff0 <PIOC_Handler+0x160>)
  400f48:	4798      	blx	r3
  400f4a:	bd08      	pop	{r3, pc}
	}

	//check if Encoder 10 was rotated
	else if ( (status & PIO_ISR_P18) || (status & PIO_ISR_P19) ){
  400f4c:	f413 2f40 	tst.w	r3, #786432	; 0xc0000
  400f50:	d007      	beq.n	400f62 <PIOC_Handler+0xd2>
		encoder_direction(PIO_ODSR_P18, PIO_ODSR_P19, 9);
  400f52:	2209      	movs	r2, #9
  400f54:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  400f58:	f44f 2080 	mov.w	r0, #262144	; 0x40000
  400f5c:	4b24      	ldr	r3, [pc, #144]	; (400ff0 <PIOC_Handler+0x160>)
  400f5e:	4798      	blx	r3
  400f60:	bd08      	pop	{r3, pc}
	}

	//check if Encoder 11 was rotated
	else if ( (status & PIO_ISR_P20) || (status & PIO_ISR_P21) ){
  400f62:	f413 1f40 	tst.w	r3, #3145728	; 0x300000
  400f66:	d007      	beq.n	400f78 <PIOC_Handler+0xe8>
		encoder_direction(PIO_ODSR_P20, PIO_ODSR_P21, 10);
  400f68:	220a      	movs	r2, #10
  400f6a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
  400f6e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  400f72:	4b1f      	ldr	r3, [pc, #124]	; (400ff0 <PIOC_Handler+0x160>)
  400f74:	4798      	blx	r3
  400f76:	bd08      	pop	{r3, pc}
	}

	//check if Encoder 12 was rotated
	else if ( (status & PIO_ISR_P22) || (status & PIO_ISR_P23) ){
  400f78:	f413 0f40 	tst.w	r3, #12582912	; 0xc00000
  400f7c:	d007      	beq.n	400f8e <PIOC_Handler+0xfe>
		encoder_direction(PIO_ODSR_P22, PIO_ODSR_P23, 11);
  400f7e:	220b      	movs	r2, #11
  400f80:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
  400f84:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
  400f88:	4b19      	ldr	r3, [pc, #100]	; (400ff0 <PIOC_Handler+0x160>)
  400f8a:	4798      	blx	r3
  400f8c:	bd08      	pop	{r3, pc}
	}

	//check if Encoder 13 was rotated
	else if ( (status & PIO_ISR_P24) || (status & PIO_ISR_P25) ){
  400f8e:	f013 7f40 	tst.w	r3, #50331648	; 0x3000000
  400f92:	d007      	beq.n	400fa4 <PIOC_Handler+0x114>
		encoder_direction(PIO_ODSR_P24, PIO_ODSR_P25, 12);
  400f94:	220c      	movs	r2, #12
  400f96:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
  400f9a:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
  400f9e:	4b14      	ldr	r3, [pc, #80]	; (400ff0 <PIOC_Handler+0x160>)
  400fa0:	4798      	blx	r3
  400fa2:	bd08      	pop	{r3, pc}
	}
	
	//check if Encoder 14 was rotated
	else if ( (status & PIO_ISR_P26) || (status & PIO_ISR_P27) ){
  400fa4:	f013 6f40 	tst.w	r3, #201326592	; 0xc000000
  400fa8:	d007      	beq.n	400fba <PIOC_Handler+0x12a>
		encoder_direction(PIO_ODSR_P26, PIO_ODSR_P27, 13);
  400faa:	220d      	movs	r2, #13
  400fac:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400fb0:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
  400fb4:	4b0e      	ldr	r3, [pc, #56]	; (400ff0 <PIOC_Handler+0x160>)
  400fb6:	4798      	blx	r3
  400fb8:	bd08      	pop	{r3, pc}
	}

	//check if Encoder 15 was rotated
	else if ( (status & PIO_ISR_P28) || (status & PIO_ISR_P29) ){
  400fba:	f013 5f40 	tst.w	r3, #805306368	; 0x30000000
  400fbe:	d007      	beq.n	400fd0 <PIOC_Handler+0x140>
		encoder_direction(PIO_ODSR_P28, PIO_ODSR_P29, 14);
  400fc0:	220e      	movs	r2, #14
  400fc2:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  400fc6:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
  400fca:	4b09      	ldr	r3, [pc, #36]	; (400ff0 <PIOC_Handler+0x160>)
  400fcc:	4798      	blx	r3
  400fce:	bd08      	pop	{r3, pc}
	}

	//check if Encoder 16 was rotated
	else if ( (status & PIO_ISR_P30) || (status & PIO_ISR_P31) ){
  400fd0:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
  400fd4:	d101      	bne.n	400fda <PIOC_Handler+0x14a>
  400fd6:	2b00      	cmp	r3, #0
  400fd8:	da06      	bge.n	400fe8 <PIOC_Handler+0x158>
		encoder_direction(PIO_ODSR_P30, PIO_ODSR_P31, 15);
  400fda:	220f      	movs	r2, #15
  400fdc:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  400fe0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  400fe4:	4b02      	ldr	r3, [pc, #8]	; (400ff0 <PIOC_Handler+0x160>)
  400fe6:	4798      	blx	r3
  400fe8:	bd08      	pop	{r3, pc}
  400fea:	bf00      	nop
  400fec:	400e124c 	.word	0x400e124c
  400ff0:	004005a1 	.word	0x004005a1

00400ff4 <leds_update_status>:
	SPI_led_init();
	leds_update_cursor(curr_step);
}

/* updates LED statuses for current page being displayed */
void leds_update_status(){
  400ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400ff6:	4d06      	ldr	r5, [pc, #24]	; (401010 <leds_update_status+0x1c>)

	/* match LED status to current display page status */
	for (int i = 0; i < 16; i++){
  400ff8:	2400      	movs	r4, #0
		leds_status[i] = notes_display_get(display_page, i);
  400ffa:	4f06      	ldr	r7, [pc, #24]	; (401014 <leds_update_status+0x20>)
  400ffc:	4e06      	ldr	r6, [pc, #24]	; (401018 <leds_update_status+0x24>)
  400ffe:	b2e1      	uxtb	r1, r4
  401000:	7838      	ldrb	r0, [r7, #0]
  401002:	47b0      	blx	r6
  401004:	f845 0f04 	str.w	r0, [r5, #4]!

/* updates LED statuses for current page being displayed */
void leds_update_status(){

	/* match LED status to current display page status */
	for (int i = 0; i < 16; i++){
  401008:	3401      	adds	r4, #1
  40100a:	2c10      	cmp	r4, #16
  40100c:	d1f7      	bne.n	400ffe <leds_update_status+0xa>
		leds_status[i] = notes_display_get(display_page, i);
	}

}
  40100e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401010:	20000638 	.word	0x20000638
  401014:	200086f1 	.word	0x200086f1
  401018:	00401f69 	.word	0x00401f69

0040101c <leds_update_display>:
void leds_update_note(uint8_t led_pos){

	leds_update_display();
}

 void leds_update_display(){
  40101c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  40101e:	b672      	cpsid	i
  401020:	f3bf 8f5f 	dmb	sy

	cpu_irq_disable();
  401024:	4f90      	ldr	r7, [pc, #576]	; (401268 <leds_update_display+0x24c>)
  401026:	2300      	movs	r3, #0
  401028:	703b      	strb	r3, [r7, #0]

	//Set Write Command, Function, and BC Bits
	SPI_byteSend(0x94);
  40102a:	2094      	movs	r0, #148	; 0x94
  40102c:	4c8f      	ldr	r4, [pc, #572]	; (40126c <leds_update_display+0x250>)
  40102e:	47a0      	blx	r4
	SPI_byteSend(0x5F);
  401030:	205f      	movs	r0, #95	; 0x5f
  401032:	47a0      	blx	r4
	SPI_byteSend(0xFF);
  401034:	20ff      	movs	r0, #255	; 0xff
  401036:	47a0      	blx	r4
	SPI_byteSend(0xFF);
  401038:	20ff      	movs	r0, #255	; 0xff
  40103a:	47a0      	blx	r4
// 	for (int i = 11; i > -1; i--){
// 		SPI_byteSend( (uint8_t) (leds_data_1[i] >> 8) );
// 		SPI_byteSend( (uint8_t) (leds_data_1[i]) );
// 	}

	SPI_byteSend( (uint8_t) (leds_data_1[2] >> 8) );
  40103c:	4d8c      	ldr	r5, [pc, #560]	; (401270 <leds_update_display+0x254>)
  40103e:	88a8      	ldrh	r0, [r5, #4]
  401040:	0a00      	lsrs	r0, r0, #8
  401042:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_1[2]) );
  401044:	7928      	ldrb	r0, [r5, #4]
  401046:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_1[1] >> 8) );
  401048:	8868      	ldrh	r0, [r5, #2]
  40104a:	0a00      	lsrs	r0, r0, #8
  40104c:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_1[1]) );
  40104e:	78a8      	ldrb	r0, [r5, #2]
  401050:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_1[0] >> 8) );
  401052:	8828      	ldrh	r0, [r5, #0]
  401054:	0a00      	lsrs	r0, r0, #8
  401056:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_1[0]) );
  401058:	7828      	ldrb	r0, [r5, #0]
  40105a:	47a0      	blx	r4

	SPI_byteSend( (uint8_t) (leds_data_3[2] >> 8) );
  40105c:	4e85      	ldr	r6, [pc, #532]	; (401274 <leds_update_display+0x258>)
  40105e:	88b0      	ldrh	r0, [r6, #4]
  401060:	0a00      	lsrs	r0, r0, #8
  401062:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_3[2]) );
  401064:	7930      	ldrb	r0, [r6, #4]
  401066:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_3[1] >> 8) );
  401068:	8870      	ldrh	r0, [r6, #2]
  40106a:	0a00      	lsrs	r0, r0, #8
  40106c:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_3[1]) );
  40106e:	78b0      	ldrb	r0, [r6, #2]
  401070:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_3[0] >> 8) );
  401072:	8830      	ldrh	r0, [r6, #0]
  401074:	0a00      	lsrs	r0, r0, #8
  401076:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_3[0]) );
  401078:	7830      	ldrb	r0, [r6, #0]
  40107a:	47a0      	blx	r4

	SPI_byteSend( (uint8_t) (leds_data_3[5] >> 8) );
  40107c:	8970      	ldrh	r0, [r6, #10]
  40107e:	0a00      	lsrs	r0, r0, #8
  401080:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_3[5]) );
  401082:	7ab0      	ldrb	r0, [r6, #10]
  401084:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_3[4] >> 8) );
  401086:	8930      	ldrh	r0, [r6, #8]
  401088:	0a00      	lsrs	r0, r0, #8
  40108a:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_3[4]) );
  40108c:	7a30      	ldrb	r0, [r6, #8]
  40108e:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_3[3] >> 8) );
  401090:	88f0      	ldrh	r0, [r6, #6]
  401092:	0a00      	lsrs	r0, r0, #8
  401094:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_3[3]) );
  401096:	79b0      	ldrb	r0, [r6, #6]
  401098:	47a0      	blx	r4

	SPI_byteSend( (uint8_t) (leds_data_1[5] >> 8) );
  40109a:	8968      	ldrh	r0, [r5, #10]
  40109c:	0a00      	lsrs	r0, r0, #8
  40109e:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_1[5]) );
  4010a0:	7aa8      	ldrb	r0, [r5, #10]
  4010a2:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_1[4] >> 8) );
  4010a4:	8928      	ldrh	r0, [r5, #8]
  4010a6:	0a00      	lsrs	r0, r0, #8
  4010a8:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_1[4]) );
  4010aa:	7a28      	ldrb	r0, [r5, #8]
  4010ac:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_1[3] >> 8) );
  4010ae:	88e8      	ldrh	r0, [r5, #6]
  4010b0:	0a00      	lsrs	r0, r0, #8
  4010b2:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_1[3]) );
  4010b4:	79a8      	ldrb	r0, [r5, #6]
  4010b6:	47a0      	blx	r4

	//Set Write Command, Function, and BC Bits
	SPI_byteSend(0x94);
  4010b8:	2094      	movs	r0, #148	; 0x94
  4010ba:	47a0      	blx	r4
	SPI_byteSend(0x5F);
  4010bc:	205f      	movs	r0, #95	; 0x5f
  4010be:	47a0      	blx	r4
	SPI_byteSend(0xFF);
  4010c0:	20ff      	movs	r0, #255	; 0xff
  4010c2:	47a0      	blx	r4
	SPI_byteSend(0xFF);
  4010c4:	20ff      	movs	r0, #255	; 0xff
  4010c6:	47a0      	blx	r4
// 	for (int i = 11; i > -1; i--){
// 		SPI_byteSend( (uint8_t) (leds_data_2[i] >> 8) );
// 		SPI_byteSend( (uint8_t) (leds_data_2[i]) );
// 	}

	SPI_byteSend( (uint8_t) (leds_data_1[8] >> 8) );
  4010c8:	8a28      	ldrh	r0, [r5, #16]
  4010ca:	0a00      	lsrs	r0, r0, #8
  4010cc:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_1[8]) );
  4010ce:	7c28      	ldrb	r0, [r5, #16]
  4010d0:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_1[7] >> 8) );
  4010d2:	89e8      	ldrh	r0, [r5, #14]
  4010d4:	0a00      	lsrs	r0, r0, #8
  4010d6:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_1[7]) );
  4010d8:	7ba8      	ldrb	r0, [r5, #14]
  4010da:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_1[6] >> 8) );
  4010dc:	89a8      	ldrh	r0, [r5, #12]
  4010de:	0a00      	lsrs	r0, r0, #8
  4010e0:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_1[6]) );
  4010e2:	7b28      	ldrb	r0, [r5, #12]
  4010e4:	47a0      	blx	r4

	SPI_byteSend( (uint8_t) (leds_data_3[8] >> 8) );
  4010e6:	8a30      	ldrh	r0, [r6, #16]
  4010e8:	0a00      	lsrs	r0, r0, #8
  4010ea:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_3[8]) );
  4010ec:	7c30      	ldrb	r0, [r6, #16]
  4010ee:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_3[7] >> 8) );
  4010f0:	89f0      	ldrh	r0, [r6, #14]
  4010f2:	0a00      	lsrs	r0, r0, #8
  4010f4:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_3[7]) );
  4010f6:	7bb0      	ldrb	r0, [r6, #14]
  4010f8:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_3[6] >> 8) );
  4010fa:	89b0      	ldrh	r0, [r6, #12]
  4010fc:	0a00      	lsrs	r0, r0, #8
  4010fe:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_3[6]) );
  401100:	7b30      	ldrb	r0, [r6, #12]
  401102:	47a0      	blx	r4

	SPI_byteSend( (uint8_t) (leds_data_3[11] >> 8) );
  401104:	8af0      	ldrh	r0, [r6, #22]
  401106:	0a00      	lsrs	r0, r0, #8
  401108:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_3[11]) );
  40110a:	7db0      	ldrb	r0, [r6, #22]
  40110c:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_3[10] >> 8) );
  40110e:	8ab0      	ldrh	r0, [r6, #20]
  401110:	0a00      	lsrs	r0, r0, #8
  401112:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_3[10]) );
  401114:	7d30      	ldrb	r0, [r6, #20]
  401116:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_3[9] >> 8) );
  401118:	8a70      	ldrh	r0, [r6, #18]
  40111a:	0a00      	lsrs	r0, r0, #8
  40111c:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_3[9]) );
  40111e:	7cb0      	ldrb	r0, [r6, #18]
  401120:	47a0      	blx	r4

	SPI_byteSend( (uint8_t) (leds_data_1[11] >> 8) );
  401122:	8ae8      	ldrh	r0, [r5, #22]
  401124:	0a00      	lsrs	r0, r0, #8
  401126:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_1[11]) );
  401128:	7da8      	ldrb	r0, [r5, #22]
  40112a:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_1[10] >> 8) );
  40112c:	8aa8      	ldrh	r0, [r5, #20]
  40112e:	0a00      	lsrs	r0, r0, #8
  401130:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_1[10]) );
  401132:	7d28      	ldrb	r0, [r5, #20]
  401134:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_1[9] >> 8) );
  401136:	8a68      	ldrh	r0, [r5, #18]
  401138:	0a00      	lsrs	r0, r0, #8
  40113a:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_1[9]) );
  40113c:	7ca8      	ldrb	r0, [r5, #18]
  40113e:	47a0      	blx	r4

	//Set Write Command, Function, and BC Bits
	SPI_byteSend(0x94);
  401140:	2094      	movs	r0, #148	; 0x94
  401142:	47a0      	blx	r4
	SPI_byteSend(0x5F);
  401144:	205f      	movs	r0, #95	; 0x5f
  401146:	47a0      	blx	r4
	SPI_byteSend(0xFF);
  401148:	20ff      	movs	r0, #255	; 0xff
  40114a:	47a0      	blx	r4
	SPI_byteSend(0xFF);
  40114c:	20ff      	movs	r0, #255	; 0xff
  40114e:	47a0      	blx	r4
// 	for (int i = 11; i > -1; i--){
// 		SPI_byteSend( (uint8_t) (leds_data_3[i] >> 8) );
// 		SPI_byteSend( (uint8_t) (leds_data_3[i]) );
// 	}

	SPI_byteSend( (uint8_t) (leds_data_2[2] >> 8) );
  401150:	4d49      	ldr	r5, [pc, #292]	; (401278 <leds_update_display+0x25c>)
  401152:	88a8      	ldrh	r0, [r5, #4]
  401154:	0a00      	lsrs	r0, r0, #8
  401156:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_2[2]) );
  401158:	7928      	ldrb	r0, [r5, #4]
  40115a:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_2[1] >> 8) );
  40115c:	8868      	ldrh	r0, [r5, #2]
  40115e:	0a00      	lsrs	r0, r0, #8
  401160:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_2[1]) );
  401162:	78a8      	ldrb	r0, [r5, #2]
  401164:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_2[0] >> 8) );
  401166:	8828      	ldrh	r0, [r5, #0]
  401168:	0a00      	lsrs	r0, r0, #8
  40116a:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_2[0]) );
  40116c:	7828      	ldrb	r0, [r5, #0]
  40116e:	47a0      	blx	r4

	SPI_byteSend( (uint8_t) (leds_data_4[2] >> 8) );
  401170:	4e42      	ldr	r6, [pc, #264]	; (40127c <leds_update_display+0x260>)
  401172:	88b0      	ldrh	r0, [r6, #4]
  401174:	0a00      	lsrs	r0, r0, #8
  401176:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_4[2]) );
  401178:	7930      	ldrb	r0, [r6, #4]
  40117a:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_4[1] >> 8) );
  40117c:	8870      	ldrh	r0, [r6, #2]
  40117e:	0a00      	lsrs	r0, r0, #8
  401180:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_4[1]) );
  401182:	78b0      	ldrb	r0, [r6, #2]
  401184:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_4[0] >> 8) );
  401186:	8830      	ldrh	r0, [r6, #0]
  401188:	0a00      	lsrs	r0, r0, #8
  40118a:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_4[0]) );
  40118c:	7830      	ldrb	r0, [r6, #0]
  40118e:	47a0      	blx	r4

	SPI_byteSend( (uint8_t) (leds_data_4[5] >> 8) );
  401190:	8970      	ldrh	r0, [r6, #10]
  401192:	0a00      	lsrs	r0, r0, #8
  401194:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_4[5]) );
  401196:	7ab0      	ldrb	r0, [r6, #10]
  401198:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_4[4] >> 8) );
  40119a:	8930      	ldrh	r0, [r6, #8]
  40119c:	0a00      	lsrs	r0, r0, #8
  40119e:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_4[4]) );
  4011a0:	7a30      	ldrb	r0, [r6, #8]
  4011a2:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_4[3] >> 8) );
  4011a4:	88f0      	ldrh	r0, [r6, #6]
  4011a6:	0a00      	lsrs	r0, r0, #8
  4011a8:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_4[3]) );
  4011aa:	79b0      	ldrb	r0, [r6, #6]
  4011ac:	47a0      	blx	r4

	SPI_byteSend( (uint8_t) (leds_data_2[5] >> 8) );
  4011ae:	8968      	ldrh	r0, [r5, #10]
  4011b0:	0a00      	lsrs	r0, r0, #8
  4011b2:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_2[5]) );
  4011b4:	7aa8      	ldrb	r0, [r5, #10]
  4011b6:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_2[4] >> 8) );
  4011b8:	8928      	ldrh	r0, [r5, #8]
  4011ba:	0a00      	lsrs	r0, r0, #8
  4011bc:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_2[4]) );
  4011be:	7a28      	ldrb	r0, [r5, #8]
  4011c0:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_2[3] >> 8) );
  4011c2:	88e8      	ldrh	r0, [r5, #6]
  4011c4:	0a00      	lsrs	r0, r0, #8
  4011c6:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_2[3]) );
  4011c8:	79a8      	ldrb	r0, [r5, #6]
  4011ca:	47a0      	blx	r4

	//Set Write Command, Function, and BC Bits
	SPI_byteSend(0x94);
  4011cc:	2094      	movs	r0, #148	; 0x94
  4011ce:	47a0      	blx	r4
	SPI_byteSend(0x5F);
  4011d0:	205f      	movs	r0, #95	; 0x5f
  4011d2:	47a0      	blx	r4
	SPI_byteSend(0xFF);
  4011d4:	20ff      	movs	r0, #255	; 0xff
  4011d6:	47a0      	blx	r4
	SPI_byteSend(0xFF);
  4011d8:	20ff      	movs	r0, #255	; 0xff
  4011da:	47a0      	blx	r4
// 	for (int i = 11; i > -1; i--){
// 		SPI_byteSend( (uint8_t) (leds_data_4[i] >> 8) );
// 		SPI_byteSend( (uint8_t) (leds_data_4[i]) );
// 	}

	SPI_byteSend( (uint8_t) (leds_data_2[8] >> 8) );
  4011dc:	8a28      	ldrh	r0, [r5, #16]
  4011de:	0a00      	lsrs	r0, r0, #8
  4011e0:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_2[8]) );
  4011e2:	7c28      	ldrb	r0, [r5, #16]
  4011e4:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_2[7] >> 8) );
  4011e6:	89e8      	ldrh	r0, [r5, #14]
  4011e8:	0a00      	lsrs	r0, r0, #8
  4011ea:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_2[7]) );
  4011ec:	7ba8      	ldrb	r0, [r5, #14]
  4011ee:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_2[6] >> 8) );
  4011f0:	89a8      	ldrh	r0, [r5, #12]
  4011f2:	0a00      	lsrs	r0, r0, #8
  4011f4:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_2[6]) );
  4011f6:	7b28      	ldrb	r0, [r5, #12]
  4011f8:	47a0      	blx	r4

	SPI_byteSend( (uint8_t) (leds_data_4[8] >> 8) );
  4011fa:	8a30      	ldrh	r0, [r6, #16]
  4011fc:	0a00      	lsrs	r0, r0, #8
  4011fe:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_4[8]) );
  401200:	7c30      	ldrb	r0, [r6, #16]
  401202:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_4[7] >> 8) );
  401204:	89f0      	ldrh	r0, [r6, #14]
  401206:	0a00      	lsrs	r0, r0, #8
  401208:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_4[7]) );
  40120a:	7bb0      	ldrb	r0, [r6, #14]
  40120c:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_4[6] >> 8) );
  40120e:	89b0      	ldrh	r0, [r6, #12]
  401210:	0a00      	lsrs	r0, r0, #8
  401212:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_4[6]) );
  401214:	7b30      	ldrb	r0, [r6, #12]
  401216:	47a0      	blx	r4

	SPI_byteSend( (uint8_t) (leds_data_4[11] >> 8) );
  401218:	8af0      	ldrh	r0, [r6, #22]
  40121a:	0a00      	lsrs	r0, r0, #8
  40121c:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_4[11]) );
  40121e:	7db0      	ldrb	r0, [r6, #22]
  401220:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_4[10] >> 8) );
  401222:	8ab0      	ldrh	r0, [r6, #20]
  401224:	0a00      	lsrs	r0, r0, #8
  401226:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_4[10]) );
  401228:	7d30      	ldrb	r0, [r6, #20]
  40122a:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_4[9] >> 8) );
  40122c:	8a70      	ldrh	r0, [r6, #18]
  40122e:	0a00      	lsrs	r0, r0, #8
  401230:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_4[9]) );
  401232:	7cb0      	ldrb	r0, [r6, #18]
  401234:	47a0      	blx	r4

	SPI_byteSend( (uint8_t) (leds_data_2[11] >> 8) );
  401236:	8ae8      	ldrh	r0, [r5, #22]
  401238:	0a00      	lsrs	r0, r0, #8
  40123a:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_2[11]) );
  40123c:	7da8      	ldrb	r0, [r5, #22]
  40123e:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_2[10] >> 8) );
  401240:	8aa8      	ldrh	r0, [r5, #20]
  401242:	0a00      	lsrs	r0, r0, #8
  401244:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_2[10]) );
  401246:	7d28      	ldrb	r0, [r5, #20]
  401248:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_2[9] >> 8) );
  40124a:	8a68      	ldrh	r0, [r5, #18]
  40124c:	0a00      	lsrs	r0, r0, #8
  40124e:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_2[9]) );
  401250:	7ca8      	ldrb	r0, [r5, #18]
  401252:	47a0      	blx	r4


	delay_ms(2.74);
  401254:	f243 70ce 	movw	r0, #14286	; 0x37ce
  401258:	4b09      	ldr	r3, [pc, #36]	; (401280 <leds_update_display+0x264>)
  40125a:	4798      	blx	r3
	cpu_irq_enable();
  40125c:	2301      	movs	r3, #1
  40125e:	703b      	strb	r3, [r7, #0]
  401260:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  401264:	b662      	cpsie	i
  401266:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401268:	200001f0 	.word	0x200001f0
  40126c:	00401ef5 	.word	0x00401ef5
  401270:	2000067c 	.word	0x2000067c
  401274:	200006ac 	.word	0x200006ac
  401278:	20000694 	.word	0x20000694
  40127c:	200006c4 	.word	0x200006c4
  401280:	20000001 	.word	0x20000001

00401284 <leds_update_cursor>:

	/* update note status if button was pressed on current page */
		notes_status_set(display_page, leds_status);
}

void leds_update_cursor(uint8_t curr_step){
  401284:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401288:	4607      	mov	r7, r0

	/* update LEDs status for current page being displayed */
	leds_update_status();
  40128a:	4b7f      	ldr	r3, [pc, #508]	; (401488 <leds_update_cursor+0x204>)
  40128c:	4798      	blx	r3
  40128e:	4c7f      	ldr	r4, [pc, #508]	; (40148c <leds_update_cursor+0x208>)
  401290:	1ca5      	adds	r5, r4, #2
  401292:	497f      	ldr	r1, [pc, #508]	; (401490 <leds_update_cursor+0x20c>)
  401294:	2200      	movs	r2, #0

/* Initialize the Notes that are Enabled as Blue */
	for (int i = 0; i < 16; i++){
  401296:	4613      	mov	r3, r2
					leds_data_3[toffset+1] = 0x0000;
					leds_data_3[toffset+2] = 0x0000;
				}
			}
			else {
				toffset = (i % 12)*3;
  401298:	f8df c224 	ldr.w	ip, [pc, #548]	; 4014c0 <leds_update_cursor+0x23c>
					leds_data_4[toffset] = 0x0000;
					leds_data_4[toffset+1] = 0x0000;
					leds_data_4[toffset+2] = 0xFFFF;
				}
				else{
					leds_data_4[toffset] = 0x0000;
  40129c:	f8df e218 	ldr.w	lr, [pc, #536]	; 4014b8 <leds_update_cursor+0x234>
  4012a0:	4610      	mov	r0, r2
			else {
				toffset = (i % 12)*3;
				if(leds_status[i] == 1){
					leds_data_4[toffset] = 0x0000;
					leds_data_4[toffset+1] = 0x0000;
					leds_data_4[toffset+2] = 0xFFFF;
  4012a2:	f64f 78ff 	movw	r8, #65535	; 0xffff
					leds_data_3[toffset] = 0x0000;
					leds_data_3[toffset+1] = 0x0000;
					leds_data_3[toffset+2] = 0xFFFF;
				}
				else{
					leds_data_3[toffset] = 0x0000;
  4012a6:	f8df a208 	ldr.w	sl, [pc, #520]	; 4014b0 <leds_update_cursor+0x22c>
					leds_data_2[toffset] = 0x0000;
					leds_data_2[toffset+1] = 0x0000;
					leds_data_2[toffset+2] = 0xFFFF;
				}
				else{
					leds_data_2[toffset] = 0x0000;
  4012aa:	f8df b200 	ldr.w	fp, [pc, #512]	; 4014ac <leds_update_cursor+0x228>
	/* update LEDs status for current page being displayed */
	leds_update_status();

/* Initialize the Notes that are Enabled as Blue */
	for (int i = 0; i < 16; i++){
			if ( (i >= 0) && (i < 4) ){
  4012ae:	2b03      	cmp	r3, #3
  4012b0:	d80a      	bhi.n	4012c8 <leds_update_cursor+0x44>
				toffset = (i)*3;
				if(leds_status[i] == 1){
  4012b2:	680e      	ldr	r6, [r1, #0]
  4012b4:	2e01      	cmp	r6, #1
					leds_data_1[toffset] = 0x0000;
  4012b6:	f825 0c02 	strh.w	r0, [r5, #-2]
					leds_data_1[toffset+1] = 0x0000;
  4012ba:	8060      	strh	r0, [r4, #2]
					leds_data_1[toffset+2] = 0xFFFF;
  4012bc:	bf0c      	ite	eq
  4012be:	f8a4 8004 	strheq.w	r8, [r4, #4]
				}
				else{
					leds_data_1[toffset] = 0x0000;
					leds_data_1[toffset+1] = 0x0000;
					leds_data_1[toffset+2] = 0x0000;
  4012c2:	80a0      	strhne	r0, [r4, #4]
	leds_update_status();

/* Initialize the Notes that are Enabled as Blue */
	for (int i = 0; i < 16; i++){
			if ( (i >= 0) && (i < 4) ){
				toffset = (i)*3;
  4012c4:	4691      	mov	r9, r2
  4012c6:	e060      	b.n	40138a <leds_update_cursor+0x106>
					leds_data_1[toffset] = 0x0000;
					leds_data_1[toffset+1] = 0x0000;
					leds_data_1[toffset+2] = 0x0000;
				}
			}
			else if ( (i >= 4) && (i < 8) ){
  4012c8:	f1a3 0904 	sub.w	r9, r3, #4
  4012cc:	f1b9 0f03 	cmp.w	r9, #3
  4012d0:	d81d      	bhi.n	40130e <leds_update_cursor+0x8a>
				toffset = (i % 4)*3;
  4012d2:	4e70      	ldr	r6, [pc, #448]	; (401494 <leds_update_cursor+0x210>)
  4012d4:	ea13 0906 	ands.w	r9, r3, r6
  4012d8:	d505      	bpl.n	4012e6 <leds_update_cursor+0x62>
  4012da:	f109 39ff 	add.w	r9, r9, #4294967295
  4012de:	f069 0903 	orn	r9, r9, #3
  4012e2:	f109 0901 	add.w	r9, r9, #1
  4012e6:	eb09 0949 	add.w	r9, r9, r9, lsl #1
  4012ea:	fa5f f989 	uxtb.w	r9, r9
				if(leds_status[i] == 1){
  4012ee:	680e      	ldr	r6, [r1, #0]
  4012f0:	2e01      	cmp	r6, #1
					leds_data_2[toffset] = 0x0000;
  4012f2:	f82b 0019 	strh.w	r0, [fp, r9, lsl #1]
					leds_data_2[toffset+1] = 0x0000;
  4012f6:	f109 0601 	add.w	r6, r9, #1
  4012fa:	f82b 0016 	strh.w	r0, [fp, r6, lsl #1]
					leds_data_2[toffset+2] = 0xFFFF;
  4012fe:	f109 0602 	add.w	r6, r9, #2
  401302:	bf0c      	ite	eq
  401304:	f82b 8016 	strheq.w	r8, [fp, r6, lsl #1]
				}
				else{
					leds_data_2[toffset] = 0x0000;
					leds_data_2[toffset+1] = 0x0000;
					leds_data_2[toffset+2] = 0x0000;
  401308:	f82b 0016 	strhne.w	r0, [fp, r6, lsl #1]
  40130c:	e03d      	b.n	40138a <leds_update_cursor+0x106>
				}
			}
			else if ( (i >= 8) && (i < 12) ){
  40130e:	f1a3 0608 	sub.w	r6, r3, #8
  401312:	2e03      	cmp	r6, #3
  401314:	d81d      	bhi.n	401352 <leds_update_cursor+0xce>
				toffset = (i % 8)*3;
  401316:	4e60      	ldr	r6, [pc, #384]	; (401498 <leds_update_cursor+0x214>)
  401318:	ea13 0906 	ands.w	r9, r3, r6
  40131c:	d505      	bpl.n	40132a <leds_update_cursor+0xa6>
  40131e:	f109 39ff 	add.w	r9, r9, #4294967295
  401322:	f069 0907 	orn	r9, r9, #7
  401326:	f109 0901 	add.w	r9, r9, #1
  40132a:	eb09 0949 	add.w	r9, r9, r9, lsl #1
  40132e:	fa5f f989 	uxtb.w	r9, r9
				if(leds_status[i] == 1){
  401332:	680e      	ldr	r6, [r1, #0]
  401334:	2e01      	cmp	r6, #1
					leds_data_3[toffset] = 0x0000;
  401336:	f82a 0019 	strh.w	r0, [sl, r9, lsl #1]
					leds_data_3[toffset+1] = 0x0000;
  40133a:	f109 0601 	add.w	r6, r9, #1
  40133e:	f82a 0016 	strh.w	r0, [sl, r6, lsl #1]
					leds_data_3[toffset+2] = 0xFFFF;
  401342:	f109 0602 	add.w	r6, r9, #2
  401346:	bf0c      	ite	eq
  401348:	f82a 8016 	strheq.w	r8, [sl, r6, lsl #1]
				}
				else{
					leds_data_3[toffset] = 0x0000;
					leds_data_3[toffset+1] = 0x0000;
					leds_data_3[toffset+2] = 0x0000;
  40134c:	f82a 0016 	strhne.w	r0, [sl, r6, lsl #1]
  401350:	e01b      	b.n	40138a <leds_update_cursor+0x106>
				}
			}
			else {
				toffset = (i % 12)*3;
  401352:	fb8c 6903 	smull	r6, r9, ip, r3
  401356:	17de      	asrs	r6, r3, #31
  401358:	ebc6 0969 	rsb	r9, r6, r9, asr #1
  40135c:	eb09 0949 	add.w	r9, r9, r9, lsl #1
  401360:	eba3 0989 	sub.w	r9, r3, r9, lsl #2
  401364:	eb09 0949 	add.w	r9, r9, r9, lsl #1
  401368:	fa5f f989 	uxtb.w	r9, r9
				if(leds_status[i] == 1){
  40136c:	680e      	ldr	r6, [r1, #0]
  40136e:	2e01      	cmp	r6, #1
					leds_data_4[toffset] = 0x0000;
  401370:	f82e 0019 	strh.w	r0, [lr, r9, lsl #1]
					leds_data_4[toffset+1] = 0x0000;
  401374:	f109 0601 	add.w	r6, r9, #1
  401378:	f82e 0016 	strh.w	r0, [lr, r6, lsl #1]
					leds_data_4[toffset+2] = 0xFFFF;
  40137c:	f109 0602 	add.w	r6, r9, #2
  401380:	bf0c      	ite	eq
  401382:	f82e 8016 	strheq.w	r8, [lr, r6, lsl #1]
				}
				else{
					leds_data_4[toffset] = 0x0000;
					leds_data_4[toffset+1] = 0x0000;
					leds_data_4[toffset+2] = 0x0000;
  401386:	f82e 0016 	strhne.w	r0, [lr, r6, lsl #1]

	/* update LEDs status for current page being displayed */
	leds_update_status();

/* Initialize the Notes that are Enabled as Blue */
	for (int i = 0; i < 16; i++){
  40138a:	3301      	adds	r3, #1
  40138c:	3203      	adds	r2, #3
  40138e:	b2d2      	uxtb	r2, r2
  401390:	3406      	adds	r4, #6
  401392:	3506      	adds	r5, #6
  401394:	3104      	adds	r1, #4
  401396:	2b10      	cmp	r3, #16
  401398:	d189      	bne.n	4012ae <leds_update_cursor+0x2a>
  40139a:	4b40      	ldr	r3, [pc, #256]	; (40149c <leds_update_cursor+0x218>)
  40139c:	f883 9000 	strb.w	r9, [r3]
				}
			}
	}

	/*check if page being displayed is the current page being output to synth before updating cursor*/
	if (curr_page == display_page){
  4013a0:	4b3f      	ldr	r3, [pc, #252]	; (4014a0 <leds_update_cursor+0x21c>)
  4013a2:	781a      	ldrb	r2, [r3, #0]
  4013a4:	4b3f      	ldr	r3, [pc, #252]	; (4014a4 <leds_update_cursor+0x220>)
  4013a6:	781b      	ldrb	r3, [r3, #0]
  4013a8:	429a      	cmp	r2, r3
  4013aa:	d168      	bne.n	40147e <leds_update_cursor+0x1fa>
		/* Update Cursor to correct position */
			if ( (curr_step >= 0) && (curr_step < 4) ){
  4013ac:	2f03      	cmp	r7, #3
  4013ae:	d813      	bhi.n	4013d8 <leds_update_cursor+0x154>
				offset = (curr_step)*3;
  4013b0:	eb07 0747 	add.w	r7, r7, r7, lsl #1
  4013b4:	b2fb      	uxtb	r3, r7
  4013b6:	4a3c      	ldr	r2, [pc, #240]	; (4014a8 <leds_update_cursor+0x224>)
  4013b8:	7013      	strb	r3, [r2, #0]
				leds_data_1[offset] = 0xFFFF;
  4013ba:	4a34      	ldr	r2, [pc, #208]	; (40148c <leds_update_cursor+0x208>)
  4013bc:	f64f 71ff 	movw	r1, #65535	; 0xffff
  4013c0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				leds_data_1[offset+1] = 0x0FFF;
  4013c4:	1c59      	adds	r1, r3, #1
  4013c6:	f640 70ff 	movw	r0, #4095	; 0xfff
  4013ca:	f822 0011 	strh.w	r0, [r2, r1, lsl #1]
				leds_data_1[offset+2] = 0x0000;
  4013ce:	3302      	adds	r3, #2
  4013d0:	2100      	movs	r1, #0
  4013d2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  4013d6:	e052      	b.n	40147e <leds_update_cursor+0x1fa>
			}
			else if ( (curr_step >= 4) && (curr_step < 8) ){
  4013d8:	1f3b      	subs	r3, r7, #4
  4013da:	b2db      	uxtb	r3, r3
  4013dc:	2b03      	cmp	r3, #3
  4013de:	d814      	bhi.n	40140a <leds_update_cursor+0x186>
				offset = (curr_step % 4)*3;
  4013e0:	f007 0703 	and.w	r7, r7, #3
  4013e4:	eb07 0747 	add.w	r7, r7, r7, lsl #1
  4013e8:	4b2f      	ldr	r3, [pc, #188]	; (4014a8 <leds_update_cursor+0x224>)
  4013ea:	701f      	strb	r7, [r3, #0]
				leds_data_2[offset] = 0xFFFF;
  4013ec:	4b2f      	ldr	r3, [pc, #188]	; (4014ac <leds_update_cursor+0x228>)
  4013ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
  4013f2:	f823 2017 	strh.w	r2, [r3, r7, lsl #1]
				leds_data_2[offset+1] = 0x0FFF;
  4013f6:	1c7a      	adds	r2, r7, #1
  4013f8:	f640 71ff 	movw	r1, #4095	; 0xfff
  4013fc:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				leds_data_2[offset+2] = 0x0000;
  401400:	3702      	adds	r7, #2
  401402:	2200      	movs	r2, #0
  401404:	f823 2017 	strh.w	r2, [r3, r7, lsl #1]
  401408:	e039      	b.n	40147e <leds_update_cursor+0x1fa>
			}
			else if ( (curr_step >= 8) && (curr_step < 12) ){
  40140a:	f1a7 0308 	sub.w	r3, r7, #8
  40140e:	b2db      	uxtb	r3, r3
  401410:	2b03      	cmp	r3, #3
  401412:	d814      	bhi.n	40143e <leds_update_cursor+0x1ba>
				offset = (curr_step % 8)*3;
  401414:	f007 0707 	and.w	r7, r7, #7
  401418:	eb07 0747 	add.w	r7, r7, r7, lsl #1
  40141c:	4b22      	ldr	r3, [pc, #136]	; (4014a8 <leds_update_cursor+0x224>)
  40141e:	701f      	strb	r7, [r3, #0]
				leds_data_3[offset] = 0xFFFF;
  401420:	4b23      	ldr	r3, [pc, #140]	; (4014b0 <leds_update_cursor+0x22c>)
  401422:	f64f 72ff 	movw	r2, #65535	; 0xffff
  401426:	f823 2017 	strh.w	r2, [r3, r7, lsl #1]
				leds_data_3[offset+1] = 0x0FFF;
  40142a:	1c7a      	adds	r2, r7, #1
  40142c:	f640 71ff 	movw	r1, #4095	; 0xfff
  401430:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				leds_data_3[offset+2] = 0x0000;
  401434:	3702      	adds	r7, #2
  401436:	2200      	movs	r2, #0
  401438:	f823 2017 	strh.w	r2, [r3, r7, lsl #1]
  40143c:	e01f      	b.n	40147e <leds_update_cursor+0x1fa>
			}
			else if ( (curr_step >= 12) && (curr_step < 16) ){
  40143e:	f1a7 030c 	sub.w	r3, r7, #12
  401442:	b2db      	uxtb	r3, r3
  401444:	2b03      	cmp	r3, #3
  401446:	d81a      	bhi.n	40147e <leds_update_cursor+0x1fa>
				offset = (curr_step % 12)*3;
  401448:	4b1a      	ldr	r3, [pc, #104]	; (4014b4 <leds_update_cursor+0x230>)
  40144a:	fba3 2307 	umull	r2, r3, r3, r7
  40144e:	08db      	lsrs	r3, r3, #3
  401450:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  401454:	eba7 0783 	sub.w	r7, r7, r3, lsl #2
  401458:	eb07 0747 	add.w	r7, r7, r7, lsl #1
  40145c:	b2fb      	uxtb	r3, r7
  40145e:	4a12      	ldr	r2, [pc, #72]	; (4014a8 <leds_update_cursor+0x224>)
  401460:	7013      	strb	r3, [r2, #0]
				leds_data_4[offset] = 0xFFFF;
  401462:	4a15      	ldr	r2, [pc, #84]	; (4014b8 <leds_update_cursor+0x234>)
  401464:	f64f 71ff 	movw	r1, #65535	; 0xffff
  401468:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				leds_data_4[offset+1] = 0x0FFF;
  40146c:	1c59      	adds	r1, r3, #1
  40146e:	f640 70ff 	movw	r0, #4095	; 0xfff
  401472:	f822 0011 	strh.w	r0, [r2, r1, lsl #1]
				leds_data_4[offset+2] = 0x0000;
  401476:	3302      	adds	r3, #2
  401478:	2100      	movs	r1, #0
  40147a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			}
	}

	leds_update_display();
  40147e:	4b0f      	ldr	r3, [pc, #60]	; (4014bc <leds_update_cursor+0x238>)
  401480:	4798      	blx	r3
  401482:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401486:	bf00      	nop
  401488:	00400ff5 	.word	0x00400ff5
  40148c:	2000067c 	.word	0x2000067c
  401490:	2000063c 	.word	0x2000063c
  401494:	80000003 	.word	0x80000003
  401498:	80000007 	.word	0x80000007
  40149c:	200086f7 	.word	0x200086f7
  4014a0:	200086f4 	.word	0x200086f4
  4014a4:	200086f1 	.word	0x200086f1
  4014a8:	200086f8 	.word	0x200086f8
  4014ac:	20000694 	.word	0x20000694
  4014b0:	200006ac 	.word	0x200006ac
  4014b4:	aaaaaaab 	.word	0xaaaaaaab
  4014b8:	200006c4 	.word	0x200006c4
  4014bc:	0040101d 	.word	0x0040101d
  4014c0:	2aaaaaab 	.word	0x2aaaaaab

004014c4 <led_toggle>:

int leds_status_get(uint8_t curr_step){
	return leds_status[curr_step];
}

void led_toggle(uint8_t top_row, uint8_t bottom_row){
  4014c4:	b508      	push	{r3, lr}

	switch(bottom_row) {
  4014c6:	29ef      	cmp	r1, #239	; 0xef
  4014c8:	d031      	beq.n	40152e <led_toggle+0x6a>
  4014ca:	d806      	bhi.n	4014da <led_toggle+0x16>
  4014cc:	29bf      	cmp	r1, #191	; 0xbf
  4014ce:	d03e      	beq.n	40154e <led_toggle+0x8a>
  4014d0:	29df      	cmp	r1, #223	; 0xdf
  4014d2:	d034      	beq.n	40153e <led_toggle+0x7a>
  4014d4:	297f      	cmp	r1, #127	; 0x7f
  4014d6:	d149      	bne.n	40156c <led_toggle+0xa8>
  4014d8:	e041      	b.n	40155e <led_toggle+0x9a>
  4014da:	29fb      	cmp	r1, #251	; 0xfb
  4014dc:	d017      	beq.n	40150e <led_toggle+0x4a>
  4014de:	d802      	bhi.n	4014e6 <led_toggle+0x22>
  4014e0:	29f7      	cmp	r1, #247	; 0xf7
  4014e2:	d01c      	beq.n	40151e <led_toggle+0x5a>
  4014e4:	e042      	b.n	40156c <led_toggle+0xa8>
  4014e6:	29fd      	cmp	r1, #253	; 0xfd
  4014e8:	d009      	beq.n	4014fe <led_toggle+0x3a>
  4014ea:	29fe      	cmp	r1, #254	; 0xfe
  4014ec:	d13e      	bne.n	40156c <led_toggle+0xa8>
		case 254 :
			leds_status[15] = abs(leds_status[15] - 1);
  4014ee:	4a4f      	ldr	r2, [pc, #316]	; (40162c <led_toggle+0x168>)
  4014f0:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
  4014f2:	3b01      	subs	r3, #1
  4014f4:	2b00      	cmp	r3, #0
  4014f6:	bfb8      	it	lt
  4014f8:	425b      	neglt	r3, r3
  4014fa:	63d3      	str	r3, [r2, #60]	; 0x3c
			break;
  4014fc:	e036      	b.n	40156c <led_toggle+0xa8>
		case 253 :
			leds_status[14] = abs(leds_status[14] - 1);
  4014fe:	4a4b      	ldr	r2, [pc, #300]	; (40162c <led_toggle+0x168>)
  401500:	6b93      	ldr	r3, [r2, #56]	; 0x38
  401502:	3b01      	subs	r3, #1
  401504:	2b00      	cmp	r3, #0
  401506:	bfb8      	it	lt
  401508:	425b      	neglt	r3, r3
  40150a:	6393      	str	r3, [r2, #56]	; 0x38
			break;
  40150c:	e02e      	b.n	40156c <led_toggle+0xa8>
		case 251 :
			leds_status[13] = abs(leds_status[13] - 1);
  40150e:	4a47      	ldr	r2, [pc, #284]	; (40162c <led_toggle+0x168>)
  401510:	6b53      	ldr	r3, [r2, #52]	; 0x34
  401512:	3b01      	subs	r3, #1
  401514:	2b00      	cmp	r3, #0
  401516:	bfb8      	it	lt
  401518:	425b      	neglt	r3, r3
  40151a:	6353      	str	r3, [r2, #52]	; 0x34
			break;
  40151c:	e026      	b.n	40156c <led_toggle+0xa8>
		case 247 :
			leds_status[12] = abs(leds_status[12] - 1);
  40151e:	4a43      	ldr	r2, [pc, #268]	; (40162c <led_toggle+0x168>)
  401520:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401522:	3b01      	subs	r3, #1
  401524:	2b00      	cmp	r3, #0
  401526:	bfb8      	it	lt
  401528:	425b      	neglt	r3, r3
  40152a:	6313      	str	r3, [r2, #48]	; 0x30
			break;
  40152c:	e01e      	b.n	40156c <led_toggle+0xa8>
		case 239 :
			leds_status[11] = abs(leds_status[11] - 1);
  40152e:	4a3f      	ldr	r2, [pc, #252]	; (40162c <led_toggle+0x168>)
  401530:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
  401532:	3b01      	subs	r3, #1
  401534:	2b00      	cmp	r3, #0
  401536:	bfb8      	it	lt
  401538:	425b      	neglt	r3, r3
  40153a:	62d3      	str	r3, [r2, #44]	; 0x2c
			break;
  40153c:	e016      	b.n	40156c <led_toggle+0xa8>
		case 223 :
			leds_status[10] = abs(leds_status[10] - 1);
  40153e:	4a3b      	ldr	r2, [pc, #236]	; (40162c <led_toggle+0x168>)
  401540:	6a93      	ldr	r3, [r2, #40]	; 0x28
  401542:	3b01      	subs	r3, #1
  401544:	2b00      	cmp	r3, #0
  401546:	bfb8      	it	lt
  401548:	425b      	neglt	r3, r3
  40154a:	6293      	str	r3, [r2, #40]	; 0x28
			break;
  40154c:	e00e      	b.n	40156c <led_toggle+0xa8>
		case 191 :
			leds_status[9] = abs(leds_status[9] - 1);
  40154e:	4a37      	ldr	r2, [pc, #220]	; (40162c <led_toggle+0x168>)
  401550:	6a53      	ldr	r3, [r2, #36]	; 0x24
  401552:	3b01      	subs	r3, #1
  401554:	2b00      	cmp	r3, #0
  401556:	bfb8      	it	lt
  401558:	425b      	neglt	r3, r3
  40155a:	6253      	str	r3, [r2, #36]	; 0x24
			break;
  40155c:	e006      	b.n	40156c <led_toggle+0xa8>
		case 127 :
			leds_status[8] = abs(leds_status[8] - 1);
  40155e:	4a33      	ldr	r2, [pc, #204]	; (40162c <led_toggle+0x168>)
  401560:	6a13      	ldr	r3, [r2, #32]
  401562:	3b01      	subs	r3, #1
  401564:	2b00      	cmp	r3, #0
  401566:	bfb8      	it	lt
  401568:	425b      	neglt	r3, r3
  40156a:	6213      	str	r3, [r2, #32]
			break;
		default :
			break;
	}

	switch(top_row) {
  40156c:	286f      	cmp	r0, #111	; 0x6f
  40156e:	d031      	beq.n	4015d4 <led_toggle+0x110>
  401570:	d806      	bhi.n	401580 <led_toggle+0xbc>
  401572:	283f      	cmp	r0, #63	; 0x3f
  401574:	d03e      	beq.n	4015f4 <led_toggle+0x130>
  401576:	285f      	cmp	r0, #95	; 0x5f
  401578:	d034      	beq.n	4015e4 <led_toggle+0x120>
  40157a:	2802      	cmp	r0, #2
  40157c:	d149      	bne.n	401612 <led_toggle+0x14e>
  40157e:	e041      	b.n	401604 <led_toggle+0x140>
  401580:	287b      	cmp	r0, #123	; 0x7b
  401582:	d017      	beq.n	4015b4 <led_toggle+0xf0>
  401584:	d802      	bhi.n	40158c <led_toggle+0xc8>
  401586:	2877      	cmp	r0, #119	; 0x77
  401588:	d01c      	beq.n	4015c4 <led_toggle+0x100>
  40158a:	e042      	b.n	401612 <led_toggle+0x14e>
  40158c:	287d      	cmp	r0, #125	; 0x7d
  40158e:	d009      	beq.n	4015a4 <led_toggle+0xe0>
  401590:	287e      	cmp	r0, #126	; 0x7e
  401592:	d13e      	bne.n	401612 <led_toggle+0x14e>
		case 126 :
			leds_status[7] = abs(leds_status[7] - 1);
  401594:	4a25      	ldr	r2, [pc, #148]	; (40162c <led_toggle+0x168>)
  401596:	69d3      	ldr	r3, [r2, #28]
  401598:	3b01      	subs	r3, #1
  40159a:	2b00      	cmp	r3, #0
  40159c:	bfb8      	it	lt
  40159e:	425b      	neglt	r3, r3
  4015a0:	61d3      	str	r3, [r2, #28]
			break;
  4015a2:	e036      	b.n	401612 <led_toggle+0x14e>
		case 125 :
			leds_status[6] = abs(leds_status[6] - 1);
  4015a4:	4a21      	ldr	r2, [pc, #132]	; (40162c <led_toggle+0x168>)
  4015a6:	6993      	ldr	r3, [r2, #24]
  4015a8:	3b01      	subs	r3, #1
  4015aa:	2b00      	cmp	r3, #0
  4015ac:	bfb8      	it	lt
  4015ae:	425b      	neglt	r3, r3
  4015b0:	6193      	str	r3, [r2, #24]
			break;
  4015b2:	e02e      	b.n	401612 <led_toggle+0x14e>
		case 123 :
			leds_status[5] = abs(leds_status[5] - 1);
  4015b4:	4a1d      	ldr	r2, [pc, #116]	; (40162c <led_toggle+0x168>)
  4015b6:	6953      	ldr	r3, [r2, #20]
  4015b8:	3b01      	subs	r3, #1
  4015ba:	2b00      	cmp	r3, #0
  4015bc:	bfb8      	it	lt
  4015be:	425b      	neglt	r3, r3
  4015c0:	6153      	str	r3, [r2, #20]
			break;
  4015c2:	e026      	b.n	401612 <led_toggle+0x14e>
		case 119 :
			leds_status[4] = abs(leds_status[4] - 1);
  4015c4:	4a19      	ldr	r2, [pc, #100]	; (40162c <led_toggle+0x168>)
  4015c6:	6913      	ldr	r3, [r2, #16]
  4015c8:	3b01      	subs	r3, #1
  4015ca:	2b00      	cmp	r3, #0
  4015cc:	bfb8      	it	lt
  4015ce:	425b      	neglt	r3, r3
  4015d0:	6113      	str	r3, [r2, #16]
			break;
  4015d2:	e01e      	b.n	401612 <led_toggle+0x14e>
		case 111 :
			leds_status[3] = abs(leds_status[3] - 1);
  4015d4:	4a15      	ldr	r2, [pc, #84]	; (40162c <led_toggle+0x168>)
  4015d6:	68d3      	ldr	r3, [r2, #12]
  4015d8:	3b01      	subs	r3, #1
  4015da:	2b00      	cmp	r3, #0
  4015dc:	bfb8      	it	lt
  4015de:	425b      	neglt	r3, r3
  4015e0:	60d3      	str	r3, [r2, #12]
			break;
  4015e2:	e016      	b.n	401612 <led_toggle+0x14e>
		case 95 :
			leds_status[2] = abs(leds_status[2] - 1);
  4015e4:	4a11      	ldr	r2, [pc, #68]	; (40162c <led_toggle+0x168>)
  4015e6:	6893      	ldr	r3, [r2, #8]
  4015e8:	3b01      	subs	r3, #1
  4015ea:	2b00      	cmp	r3, #0
  4015ec:	bfb8      	it	lt
  4015ee:	425b      	neglt	r3, r3
  4015f0:	6093      	str	r3, [r2, #8]
			break;
  4015f2:	e00e      	b.n	401612 <led_toggle+0x14e>
		case 63 :
			leds_status[1] = abs(leds_status[1] - 1);
  4015f4:	4a0d      	ldr	r2, [pc, #52]	; (40162c <led_toggle+0x168>)
  4015f6:	6853      	ldr	r3, [r2, #4]
  4015f8:	3b01      	subs	r3, #1
  4015fa:	2b00      	cmp	r3, #0
  4015fc:	bfb8      	it	lt
  4015fe:	425b      	neglt	r3, r3
  401600:	6053      	str	r3, [r2, #4]
			break;
  401602:	e006      	b.n	401612 <led_toggle+0x14e>
		case 2 :
			leds_status[0] = abs(leds_status[0] - 1);
  401604:	4a09      	ldr	r2, [pc, #36]	; (40162c <led_toggle+0x168>)
  401606:	6813      	ldr	r3, [r2, #0]
  401608:	3b01      	subs	r3, #1
  40160a:	2b00      	cmp	r3, #0
  40160c:	bfb8      	it	lt
  40160e:	425b      	neglt	r3, r3
  401610:	6013      	str	r3, [r2, #0]
		default : 
			break;
	}

	/* match note status to display status if changed*/
	notes_status_set(display_page, leds_status);
  401612:	4906      	ldr	r1, [pc, #24]	; (40162c <led_toggle+0x168>)
  401614:	4b06      	ldr	r3, [pc, #24]	; (401630 <led_toggle+0x16c>)
  401616:	7818      	ldrb	r0, [r3, #0]
  401618:	4b06      	ldr	r3, [pc, #24]	; (401634 <led_toggle+0x170>)
  40161a:	4798      	blx	r3
	
	SPI_led_init();
  40161c:	4b06      	ldr	r3, [pc, #24]	; (401638 <led_toggle+0x174>)
  40161e:	4798      	blx	r3
	leds_update_cursor(curr_step);
  401620:	4b06      	ldr	r3, [pc, #24]	; (40163c <led_toggle+0x178>)
  401622:	7818      	ldrb	r0, [r3, #0]
  401624:	4b06      	ldr	r3, [pc, #24]	; (401640 <led_toggle+0x17c>)
  401626:	4798      	blx	r3
  401628:	bd08      	pop	{r3, pc}
  40162a:	bf00      	nop
  40162c:	2000063c 	.word	0x2000063c
  401630:	200086f1 	.word	0x200086f1
  401634:	00401f89 	.word	0x00401f89
  401638:	00401dfd 	.word	0x00401dfd
  40163c:	200086f0 	.word	0x200086f0
  401640:	00401285 	.word	0x00401285

00401644 <bpm_inc>:


}

 void bpm_inc(){
	if (bpm < 999){
  401644:	4b04      	ldr	r3, [pc, #16]	; (401658 <bpm_inc+0x14>)
  401646:	881b      	ldrh	r3, [r3, #0]
  401648:	f240 32e6 	movw	r2, #998	; 0x3e6
  40164c:	4293      	cmp	r3, r2
  40164e:	d802      	bhi.n	401656 <bpm_inc+0x12>
		bpm++;
  401650:	3301      	adds	r3, #1
  401652:	4a01      	ldr	r2, [pc, #4]	; (401658 <bpm_inc+0x14>)
  401654:	8013      	strh	r3, [r2, #0]
  401656:	4770      	bx	lr
  401658:	200086fc 	.word	0x200086fc

0040165c <bpm_dec>:
	}
}

 void bpm_dec(){
	if (bpm > 20){
  40165c:	4b03      	ldr	r3, [pc, #12]	; (40166c <bpm_dec+0x10>)
  40165e:	881b      	ldrh	r3, [r3, #0]
  401660:	2b14      	cmp	r3, #20
  401662:	d902      	bls.n	40166a <bpm_dec+0xe>
		bpm--;
  401664:	3b01      	subs	r3, #1
  401666:	4a01      	ldr	r2, [pc, #4]	; (40166c <bpm_dec+0x10>)
  401668:	8013      	strh	r3, [r2, #0]
  40166a:	4770      	bx	lr
  40166c:	200086fc 	.word	0x200086fc

00401670 <display_page_inc>:
	}
}

 void display_page_inc(){
	if (display_page < 15){
  401670:	4b03      	ldr	r3, [pc, #12]	; (401680 <display_page_inc+0x10>)
  401672:	781b      	ldrb	r3, [r3, #0]
  401674:	2b0e      	cmp	r3, #14
  401676:	d802      	bhi.n	40167e <display_page_inc+0xe>
		display_page++;
  401678:	3301      	adds	r3, #1
  40167a:	4a01      	ldr	r2, [pc, #4]	; (401680 <display_page_inc+0x10>)
  40167c:	7013      	strb	r3, [r2, #0]
  40167e:	4770      	bx	lr
  401680:	200086f1 	.word	0x200086f1

00401684 <display_page_dec>:
	}
}

 void display_page_dec(){
	if (display_page > 0){
  401684:	4b03      	ldr	r3, [pc, #12]	; (401694 <display_page_dec+0x10>)
  401686:	781b      	ldrb	r3, [r3, #0]
  401688:	b113      	cbz	r3, 401690 <display_page_dec+0xc>
		display_page--;
  40168a:	3b01      	subs	r3, #1
  40168c:	4a01      	ldr	r2, [pc, #4]	; (401694 <display_page_dec+0x10>)
  40168e:	7013      	strb	r3, [r2, #0]
  401690:	4770      	bx	lr
  401692:	bf00      	nop
  401694:	200086f1 	.word	0x200086f1

00401698 <pattern_inc>:
	}
}

 void pattern_inc(){
	  if (curr_pattern < 15){
  401698:	4b03      	ldr	r3, [pc, #12]	; (4016a8 <pattern_inc+0x10>)
  40169a:	781b      	ldrb	r3, [r3, #0]
  40169c:	2b0e      	cmp	r3, #14
  40169e:	d802      	bhi.n	4016a6 <pattern_inc+0xe>
		  curr_pattern++;
  4016a0:	3301      	adds	r3, #1
  4016a2:	4a01      	ldr	r2, [pc, #4]	; (4016a8 <pattern_inc+0x10>)
  4016a4:	7013      	strb	r3, [r2, #0]
  4016a6:	4770      	bx	lr
  4016a8:	200086e4 	.word	0x200086e4

004016ac <pattern_dec>:
	  }
 }

 void pattern_dec(){
	  if (curr_pattern > 0){
  4016ac:	4b03      	ldr	r3, [pc, #12]	; (4016bc <pattern_dec+0x10>)
  4016ae:	781b      	ldrb	r3, [r3, #0]
  4016b0:	b113      	cbz	r3, 4016b8 <pattern_dec+0xc>
		  curr_pattern--;
  4016b2:	3b01      	subs	r3, #1
  4016b4:	4a01      	ldr	r2, [pc, #4]	; (4016bc <pattern_dec+0x10>)
  4016b6:	7013      	strb	r3, [r2, #0]
  4016b8:	4770      	bx	lr
  4016ba:	bf00      	nop
  4016bc:	200086e4 	.word	0x200086e4

004016c0 <pattern_up>:
	  }
 }

void pattern_up(uint8_t channel){
	if (patterns_out[channel] < 15){
  4016c0:	4b03      	ldr	r3, [pc, #12]	; (4016d0 <pattern_up+0x10>)
  4016c2:	5c1b      	ldrb	r3, [r3, r0]
  4016c4:	2b0e      	cmp	r3, #14
  4016c6:	d802      	bhi.n	4016ce <pattern_up+0xe>
		patterns_out[channel]++;
  4016c8:	3301      	adds	r3, #1
  4016ca:	4a01      	ldr	r2, [pc, #4]	; (4016d0 <pattern_up+0x10>)
  4016cc:	5413      	strb	r3, [r2, r0]
  4016ce:	4770      	bx	lr
  4016d0:	20008700 	.word	0x20008700

004016d4 <pattern_down>:
	}
}

void pattern_down(uint8_t channel){
	  if (patterns_out[channel] > 0){
  4016d4:	4b03      	ldr	r3, [pc, #12]	; (4016e4 <pattern_down+0x10>)
  4016d6:	5c1b      	ldrb	r3, [r3, r0]
  4016d8:	b113      	cbz	r3, 4016e0 <pattern_down+0xc>
		  patterns_out[channel]--;
  4016da:	3b01      	subs	r3, #1
  4016dc:	4a01      	ldr	r2, [pc, #4]	; (4016e4 <pattern_down+0x10>)
  4016de:	5413      	strb	r3, [r2, r0]
  4016e0:	4770      	bx	lr
  4016e2:	bf00      	nop
  4016e4:	20008700 	.word	0x20008700

004016e8 <page_loop_inc>:
	  }
}

void page_loop_inc(){
	if (page_loop < 15){
  4016e8:	4b03      	ldr	r3, [pc, #12]	; (4016f8 <page_loop_inc+0x10>)
  4016ea:	781b      	ldrb	r3, [r3, #0]
  4016ec:	2b0e      	cmp	r3, #14
  4016ee:	d802      	bhi.n	4016f6 <page_loop_inc+0xe>
		page_loop++;
  4016f0:	3301      	adds	r3, #1
  4016f2:	4a01      	ldr	r2, [pc, #4]	; (4016f8 <page_loop_inc+0x10>)
  4016f4:	7013      	strb	r3, [r2, #0]
  4016f6:	4770      	bx	lr
  4016f8:	200086ec 	.word	0x200086ec

004016fc <page_loop_dec>:
	}
}

void page_loop_dec(){
	if (page_loop > 0){
  4016fc:	4b03      	ldr	r3, [pc, #12]	; (40170c <page_loop_dec+0x10>)
  4016fe:	781b      	ldrb	r3, [r3, #0]
  401700:	b113      	cbz	r3, 401708 <page_loop_dec+0xc>
		page_loop--;
  401702:	3b01      	subs	r3, #1
  401704:	4a01      	ldr	r2, [pc, #4]	; (40170c <page_loop_dec+0x10>)
  401706:	7013      	strb	r3, [r2, #0]
  401708:	4770      	bx	lr
  40170a:	bf00      	nop
  40170c:	200086ec 	.word	0x200086ec

00401710 <control_direction>:

 uint8_t A_seq;
 uint8_t B_seq;


 void control_direction(uint32_t A, uint32_t B, uint8_t aux_control){
  401710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	//read Encoder input A
	bool A_in = REG_PIOA_PDSR & A;
  401712:	4b40      	ldr	r3, [pc, #256]	; (401814 <control_direction+0x104>)
  401714:	681f      	ldr	r7, [r3, #0]
	//read Encoder input B
	bool B_in = REG_PIOA_PDSR & B;
  401716:	681d      	ldr	r5, [r3, #0]
	
	A_seq = A_seq << 1;
	A_seq |= A_in;
	
	B_seq = B_seq << 1;
  401718:	4c3f      	ldr	r4, [pc, #252]	; (401818 <control_direction+0x108>)
	B_seq |= B_in;
  40171a:	7823      	ldrb	r3, [r4, #0]
  40171c:	420d      	tst	r5, r1
  40171e:	bf14      	ite	ne
  401720:	2101      	movne	r1, #1
  401722:	2100      	moveq	r1, #0
  401724:	ea41 0143 	orr.w	r1, r1, r3, lsl #1
	//read Encoder input A
	bool A_in = REG_PIOA_PDSR & A;
	//read Encoder input B
	bool B_in = REG_PIOA_PDSR & B;
	
	A_seq = A_seq << 1;
  401728:	4d3c      	ldr	r5, [pc, #240]	; (40181c <control_direction+0x10c>)
	A_seq |= A_in;
	
	B_seq = B_seq << 1;
	B_seq |= B_in;
	
	A_seq &= 0b00001111;
  40172a:	782e      	ldrb	r6, [r5, #0]
  40172c:	4207      	tst	r7, r0
  40172e:	bf14      	ite	ne
  401730:	2301      	movne	r3, #1
  401732:	2300      	moveq	r3, #0
  401734:	ea43 0346 	orr.w	r3, r3, r6, lsl #1
  401738:	f003 030f 	and.w	r3, r3, #15
  40173c:	702b      	strb	r3, [r5, #0]
	B_seq &= 0b00001111;
  40173e:	f001 010f 	and.w	r1, r1, #15
  401742:	7021      	strb	r1, [r4, #0]


	//return true if turned right
	if ((A_seq == 0b00001001) && (B_seq == 0b00000011)){
  401744:	2b09      	cmp	r3, #9
  401746:	d131      	bne.n	4017ac <control_direction+0x9c>
  401748:	2903      	cmp	r1, #3
  40174a:	d162      	bne.n	401812 <control_direction+0x102>
		REG_PIOB_SODR |= PIO_PER_P3; //set output high on PB3
  40174c:	4934      	ldr	r1, [pc, #208]	; (401820 <control_direction+0x110>)
  40174e:	680b      	ldr	r3, [r1, #0]
  401750:	f043 0308 	orr.w	r3, r3, #8
  401754:	600b      	str	r3, [r1, #0]
		
		if (aux_control == 0){
  401756:	b912      	cbnz	r2, 40175e <control_direction+0x4e>
			bpm_inc();
  401758:	4b32      	ldr	r3, [pc, #200]	; (401824 <control_direction+0x114>)
  40175a:	4798      	blx	r3
  40175c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		}
		else if (aux_control == 1){
  40175e:	2a01      	cmp	r2, #1
  401760:	d102      	bne.n	401768 <control_direction+0x58>
			/* resolution UP */
			page_loop_inc();
  401762:	4b31      	ldr	r3, [pc, #196]	; (401828 <control_direction+0x118>)
  401764:	4798      	blx	r3
  401766:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		}
		else if (aux_control == 2){
  401768:	2a02      	cmp	r2, #2
  40176a:	d102      	bne.n	401772 <control_direction+0x62>
			display_page_inc();
  40176c:	4b2f      	ldr	r3, [pc, #188]	; (40182c <control_direction+0x11c>)
  40176e:	4798      	blx	r3
  401770:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		}
		else if (aux_control == 3){
  401772:	2a03      	cmp	r2, #3
  401774:	d102      	bne.n	40177c <control_direction+0x6c>
			pattern_inc();
  401776:	4b2e      	ldr	r3, [pc, #184]	; (401830 <control_direction+0x120>)
  401778:	4798      	blx	r3
  40177a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		}
		else if (aux_control == 4){
  40177c:	2a04      	cmp	r2, #4
  40177e:	d103      	bne.n	401788 <control_direction+0x78>
			pattern_up(CHANNEL_1);
  401780:	2000      	movs	r0, #0
  401782:	4b2c      	ldr	r3, [pc, #176]	; (401834 <control_direction+0x124>)
  401784:	4798      	blx	r3
  401786:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		}
		else if (aux_control == 5){
  401788:	2a05      	cmp	r2, #5
  40178a:	d103      	bne.n	401794 <control_direction+0x84>
			pattern_up(CHANNEL_2);
  40178c:	2001      	movs	r0, #1
  40178e:	4b29      	ldr	r3, [pc, #164]	; (401834 <control_direction+0x124>)
  401790:	4798      	blx	r3
  401792:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		}
		else if (aux_control == 6){
  401794:	2a06      	cmp	r2, #6
  401796:	d103      	bne.n	4017a0 <control_direction+0x90>
			pattern_up(CHANNEL_3);
  401798:	2002      	movs	r0, #2
  40179a:	4b26      	ldr	r3, [pc, #152]	; (401834 <control_direction+0x124>)
  40179c:	4798      	blx	r3
  40179e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		}
		else if (aux_control == 7){
  4017a0:	2a07      	cmp	r2, #7
  4017a2:	d136      	bne.n	401812 <control_direction+0x102>
			pattern_up(CHANNEL_4);
  4017a4:	2003      	movs	r0, #3
  4017a6:	4b23      	ldr	r3, [pc, #140]	; (401834 <control_direction+0x124>)
  4017a8:	4798      	blx	r3
  4017aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		}

	}

	else if ((A_seq == 0b00000011) && (B_seq == 0b00001001)){
  4017ac:	2b03      	cmp	r3, #3
  4017ae:	d130      	bne.n	401812 <control_direction+0x102>
  4017b0:	2909      	cmp	r1, #9
  4017b2:	d12e      	bne.n	401812 <control_direction+0x102>
		REG_PIOB_CODR |= PIO_PER_P3; //set output low on PB3
  4017b4:	4920      	ldr	r1, [pc, #128]	; (401838 <control_direction+0x128>)
  4017b6:	680b      	ldr	r3, [r1, #0]
  4017b8:	f043 0308 	orr.w	r3, r3, #8
  4017bc:	600b      	str	r3, [r1, #0]
		
		if (aux_control == 0){
  4017be:	b912      	cbnz	r2, 4017c6 <control_direction+0xb6>
			bpm_dec();
  4017c0:	4b1e      	ldr	r3, [pc, #120]	; (40183c <control_direction+0x12c>)
  4017c2:	4798      	blx	r3
  4017c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		}
		else if (aux_control == 1){
  4017c6:	2a01      	cmp	r2, #1
  4017c8:	d102      	bne.n	4017d0 <control_direction+0xc0>
			/* resolution DOWN */
			page_loop_dec();
  4017ca:	4b1d      	ldr	r3, [pc, #116]	; (401840 <control_direction+0x130>)
  4017cc:	4798      	blx	r3
  4017ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		}
		else if (aux_control == 2){
  4017d0:	2a02      	cmp	r2, #2
  4017d2:	d102      	bne.n	4017da <control_direction+0xca>
			display_page_dec();
  4017d4:	4b1b      	ldr	r3, [pc, #108]	; (401844 <control_direction+0x134>)
  4017d6:	4798      	blx	r3
  4017d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		}
		else if (aux_control == 3){
  4017da:	2a03      	cmp	r2, #3
  4017dc:	d102      	bne.n	4017e4 <control_direction+0xd4>
			pattern_dec();
  4017de:	4b1a      	ldr	r3, [pc, #104]	; (401848 <control_direction+0x138>)
  4017e0:	4798      	blx	r3
  4017e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		}
		else if (aux_control == 4){
  4017e4:	2a04      	cmp	r2, #4
  4017e6:	d103      	bne.n	4017f0 <control_direction+0xe0>
			pattern_down(CHANNEL_1);
  4017e8:	2000      	movs	r0, #0
  4017ea:	4b18      	ldr	r3, [pc, #96]	; (40184c <control_direction+0x13c>)
  4017ec:	4798      	blx	r3
  4017ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		}
		else if (aux_control == 5){
  4017f0:	2a05      	cmp	r2, #5
  4017f2:	d103      	bne.n	4017fc <control_direction+0xec>
			pattern_down(CHANNEL_2);
  4017f4:	2001      	movs	r0, #1
  4017f6:	4b15      	ldr	r3, [pc, #84]	; (40184c <control_direction+0x13c>)
  4017f8:	4798      	blx	r3
  4017fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		}
		else if (aux_control == 6){
  4017fc:	2a06      	cmp	r2, #6
  4017fe:	d103      	bne.n	401808 <control_direction+0xf8>
			pattern_down(CHANNEL_3);
  401800:	2002      	movs	r0, #2
  401802:	4b12      	ldr	r3, [pc, #72]	; (40184c <control_direction+0x13c>)
  401804:	4798      	blx	r3
  401806:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		}
		else if (aux_control == 7){
  401808:	2a07      	cmp	r2, #7
  40180a:	d102      	bne.n	401812 <control_direction+0x102>
			pattern_down(CHANNEL_4);
  40180c:	2003      	movs	r0, #3
  40180e:	4b0f      	ldr	r3, [pc, #60]	; (40184c <control_direction+0x13c>)
  401810:	4798      	blx	r3
  401812:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401814:	400e0e3c 	.word	0x400e0e3c
  401818:	200086f6 	.word	0x200086f6
  40181c:	200086f5 	.word	0x200086f5
  401820:	400e1030 	.word	0x400e1030
  401824:	00401645 	.word	0x00401645
  401828:	004016e9 	.word	0x004016e9
  40182c:	00401671 	.word	0x00401671
  401830:	00401699 	.word	0x00401699
  401834:	004016c1 	.word	0x004016c1
  401838:	400e1034 	.word	0x400e1034
  40183c:	0040165d 	.word	0x0040165d
  401840:	004016fd 	.word	0x004016fd
  401844:	00401685 	.word	0x00401685
  401848:	004016ad 	.word	0x004016ad
  40184c:	004016d5 	.word	0x004016d5

00401850 <init_sequencer_controls>:
		page_loop--;
	}
}


 void init_sequencer_controls(){
  401850:	b470      	push	{r4, r5, r6}

	bpm = 120;
  401852:	2278      	movs	r2, #120	; 0x78
  401854:	4ba8      	ldr	r3, [pc, #672]	; (401af8 <init_sequencer_controls+0x2a8>)
  401856:	801a      	strh	r2, [r3, #0]

	A_seq = 0;
  401858:	2300      	movs	r3, #0
  40185a:	4aa8      	ldr	r2, [pc, #672]	; (401afc <init_sequencer_controls+0x2ac>)
  40185c:	7013      	strb	r3, [r2, #0]
	B_seq = 0;
  40185e:	4aa8      	ldr	r2, [pc, #672]	; (401b00 <init_sequencer_controls+0x2b0>)
  401860:	7013      	strb	r3, [r2, #0]

	//enable clock for PIOA
	REG_PMC_PCER0 |= PMC_PCER0_PID11;
  401862:	4aa8      	ldr	r2, [pc, #672]	; (401b04 <init_sequencer_controls+0x2b4>)
  401864:	6813      	ldr	r3, [r2, #0]
  401866:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  40186a:	6013      	str	r3, [r2, #0]


	/**************			CONFIGURE 8 STEP AUX ENCODERS			**************/

	//Set up PA0 as AUX ENC 0 INPUT A
	REG_PIOA_PER |= PIO_PER_P0; //enable PIO controller
  40186c:	4da6      	ldr	r5, [pc, #664]	; (401b08 <init_sequencer_controls+0x2b8>)
  40186e:	682b      	ldr	r3, [r5, #0]
  401870:	f043 0301 	orr.w	r3, r3, #1
  401874:	602b      	str	r3, [r5, #0]
	REG_PIOA_ODR |= PIO_ODR_P0; //disable output
  401876:	4ca5      	ldr	r4, [pc, #660]	; (401b0c <init_sequencer_controls+0x2bc>)
  401878:	6823      	ldr	r3, [r4, #0]
  40187a:	f043 0301 	orr.w	r3, r3, #1
  40187e:	6023      	str	r3, [r4, #0]
	REG_PIOA_PPDDR |= PIO_PPDDR_P0; //disable pull-down resistor
  401880:	48a3      	ldr	r0, [pc, #652]	; (401b10 <init_sequencer_controls+0x2c0>)
  401882:	6803      	ldr	r3, [r0, #0]
  401884:	f043 0301 	orr.w	r3, r3, #1
  401888:	6003      	str	r3, [r0, #0]
	REG_PIOA_PUER |= PIO_PUER_P0;	//enable pull-up resistor
  40188a:	49a2      	ldr	r1, [pc, #648]	; (401b14 <init_sequencer_controls+0x2c4>)
  40188c:	680b      	ldr	r3, [r1, #0]
  40188e:	f043 0301 	orr.w	r3, r3, #1
  401892:	600b      	str	r3, [r1, #0]
	REG_PIOA_IFSCER |= PIO_IFSCER_P0; //turn on slow clock debounce
  401894:	f602 2274 	addw	r2, r2, #2676	; 0xa74
  401898:	6813      	ldr	r3, [r2, #0]
  40189a:	f043 0301 	orr.w	r3, r3, #1
  40189e:	6013      	str	r3, [r2, #0]
	REG_PIOA_IFER |= PIO_IFER_P0;	//start debounce filter
  4018a0:	4b9d      	ldr	r3, [pc, #628]	; (401b18 <init_sequencer_controls+0x2c8>)
  4018a2:	681e      	ldr	r6, [r3, #0]
  4018a4:	f046 0601 	orr.w	r6, r6, #1
  4018a8:	601e      	str	r6, [r3, #0]

	//Set up PA1 as AUX ENC 0 INPUT B
	REG_PIOA_PER |= PIO_PER_P1; //enable PIO controller
  4018aa:	682e      	ldr	r6, [r5, #0]
  4018ac:	f046 0602 	orr.w	r6, r6, #2
  4018b0:	602e      	str	r6, [r5, #0]
	REG_PIOA_ODR |= PIO_ODR_P1; //disable output
  4018b2:	6826      	ldr	r6, [r4, #0]
  4018b4:	f046 0602 	orr.w	r6, r6, #2
  4018b8:	6026      	str	r6, [r4, #0]
	REG_PIOA_PPDDR |= PIO_PPDDR_P1; //disable pull-down resistor
  4018ba:	6806      	ldr	r6, [r0, #0]
  4018bc:	f046 0602 	orr.w	r6, r6, #2
  4018c0:	6006      	str	r6, [r0, #0]
	REG_PIOA_PUER |= PIO_PUER_P1;	//enable pull-up resistor
  4018c2:	680e      	ldr	r6, [r1, #0]
  4018c4:	f046 0602 	orr.w	r6, r6, #2
  4018c8:	600e      	str	r6, [r1, #0]
	REG_PIOA_IFSCER |= PIO_IFSCER_P1; //turn on slow clock debounce
  4018ca:	6816      	ldr	r6, [r2, #0]
  4018cc:	f046 0602 	orr.w	r6, r6, #2
  4018d0:	6016      	str	r6, [r2, #0]
	REG_PIOA_IFER |= PIO_IFER_P1;	//start debounce filter
  4018d2:	681e      	ldr	r6, [r3, #0]
  4018d4:	f046 0602 	orr.w	r6, r6, #2
  4018d8:	601e      	str	r6, [r3, #0]



	//Set up PA6 as AUX ENC 1 INPUT A
	REG_PIOA_PER |= PIO_PER_P6; //enable PIO controller
  4018da:	682e      	ldr	r6, [r5, #0]
  4018dc:	f046 0640 	orr.w	r6, r6, #64	; 0x40
  4018e0:	602e      	str	r6, [r5, #0]
	REG_PIOA_ODR |= PIO_ODR_P6; //disable output
  4018e2:	6826      	ldr	r6, [r4, #0]
  4018e4:	f046 0640 	orr.w	r6, r6, #64	; 0x40
  4018e8:	6026      	str	r6, [r4, #0]
	REG_PIOA_PPDDR |= PIO_PPDDR_P6; //disable pull-down resistor
  4018ea:	6806      	ldr	r6, [r0, #0]
  4018ec:	f046 0640 	orr.w	r6, r6, #64	; 0x40
  4018f0:	6006      	str	r6, [r0, #0]
	REG_PIOA_PUER |= PIO_PUER_P6;	//enable pull-up resistor
  4018f2:	680e      	ldr	r6, [r1, #0]
  4018f4:	f046 0640 	orr.w	r6, r6, #64	; 0x40
  4018f8:	600e      	str	r6, [r1, #0]
	REG_PIOA_IFSCER |= PIO_IFSCER_P6; //turn on slow clock debounce
  4018fa:	6816      	ldr	r6, [r2, #0]
  4018fc:	f046 0640 	orr.w	r6, r6, #64	; 0x40
  401900:	6016      	str	r6, [r2, #0]
	REG_PIOA_IFER |= PIO_IFER_P6;	//start debounce filter
  401902:	681e      	ldr	r6, [r3, #0]
  401904:	f046 0640 	orr.w	r6, r6, #64	; 0x40
  401908:	601e      	str	r6, [r3, #0]

	//Set up PA7 as AUX ENC 1 INPUT B
	REG_PIOA_PER |= PIO_PER_P7; //enable PIO controller
  40190a:	682e      	ldr	r6, [r5, #0]
  40190c:	f046 0680 	orr.w	r6, r6, #128	; 0x80
  401910:	602e      	str	r6, [r5, #0]
	REG_PIOA_ODR |= PIO_ODR_P7; //disable output
  401912:	6826      	ldr	r6, [r4, #0]
  401914:	f046 0680 	orr.w	r6, r6, #128	; 0x80
  401918:	6026      	str	r6, [r4, #0]
	REG_PIOA_PPDDR |= PIO_PPDDR_P7; //disable pull-down resistor
  40191a:	6806      	ldr	r6, [r0, #0]
  40191c:	f046 0680 	orr.w	r6, r6, #128	; 0x80
  401920:	6006      	str	r6, [r0, #0]
	REG_PIOA_PUER |= PIO_PUER_P7;	//enable pull-up resistor
  401922:	680e      	ldr	r6, [r1, #0]
  401924:	f046 0680 	orr.w	r6, r6, #128	; 0x80
  401928:	600e      	str	r6, [r1, #0]
	REG_PIOA_IFSCER |= PIO_IFSCER_P7; //turn on slow clock debounce
  40192a:	6816      	ldr	r6, [r2, #0]
  40192c:	f046 0680 	orr.w	r6, r6, #128	; 0x80
  401930:	6016      	str	r6, [r2, #0]
	REG_PIOA_IFER |= PIO_IFER_P7;	//start debounce filter
  401932:	681e      	ldr	r6, [r3, #0]
  401934:	f046 0680 	orr.w	r6, r6, #128	; 0x80
  401938:	601e      	str	r6, [r3, #0]


	
	//Set up PA8 as AUX ENC 2 INPUT A
	REG_PIOA_PER |= PIO_PER_P8; //enable PIO controller
  40193a:	682e      	ldr	r6, [r5, #0]
  40193c:	f446 7680 	orr.w	r6, r6, #256	; 0x100
  401940:	602e      	str	r6, [r5, #0]
	REG_PIOA_ODR |= PIO_ODR_P8; //disable output
  401942:	6826      	ldr	r6, [r4, #0]
  401944:	f446 7680 	orr.w	r6, r6, #256	; 0x100
  401948:	6026      	str	r6, [r4, #0]
	REG_PIOA_PPDDR |= PIO_PPDDR_P8; //disable pull-down resistor
  40194a:	6806      	ldr	r6, [r0, #0]
  40194c:	f446 7680 	orr.w	r6, r6, #256	; 0x100
  401950:	6006      	str	r6, [r0, #0]
	REG_PIOA_PUER |= PIO_PUER_P8;	//enable pull-up resistor
  401952:	680e      	ldr	r6, [r1, #0]
  401954:	f446 7680 	orr.w	r6, r6, #256	; 0x100
  401958:	600e      	str	r6, [r1, #0]
	REG_PIOA_IFSCER |= PIO_IFSCER_P8; //turn on slow clock debounce
  40195a:	6816      	ldr	r6, [r2, #0]
  40195c:	f446 7680 	orr.w	r6, r6, #256	; 0x100
  401960:	6016      	str	r6, [r2, #0]
	REG_PIOA_IFER |= PIO_IFER_P8;	//start debounce filter
  401962:	681e      	ldr	r6, [r3, #0]
  401964:	f446 7680 	orr.w	r6, r6, #256	; 0x100
  401968:	601e      	str	r6, [r3, #0]

	//Set up PA9 as AUX ENC 2 INPUT B
	REG_PIOA_PER |= PIO_PER_P9; //enable PIO controller
  40196a:	682e      	ldr	r6, [r5, #0]
  40196c:	f446 7600 	orr.w	r6, r6, #512	; 0x200
  401970:	602e      	str	r6, [r5, #0]
	REG_PIOA_ODR |= PIO_ODR_P9; //disable output
  401972:	6826      	ldr	r6, [r4, #0]
  401974:	f446 7600 	orr.w	r6, r6, #512	; 0x200
  401978:	6026      	str	r6, [r4, #0]
	REG_PIOA_PPDDR |= PIO_PPDDR_P9; //disable pull-down resistor
  40197a:	6806      	ldr	r6, [r0, #0]
  40197c:	f446 7600 	orr.w	r6, r6, #512	; 0x200
  401980:	6006      	str	r6, [r0, #0]
	REG_PIOA_PUER |= PIO_PUER_P9;	//enable pull-up resistor
  401982:	680e      	ldr	r6, [r1, #0]
  401984:	f446 7600 	orr.w	r6, r6, #512	; 0x200
  401988:	600e      	str	r6, [r1, #0]
	REG_PIOA_IFSCER |= PIO_IFSCER_P9; //turn on slow clock debounce
  40198a:	6816      	ldr	r6, [r2, #0]
  40198c:	f446 7600 	orr.w	r6, r6, #512	; 0x200
  401990:	6016      	str	r6, [r2, #0]
	REG_PIOA_IFER |= PIO_IFER_P9;	//start debounce filter
  401992:	681e      	ldr	r6, [r3, #0]
  401994:	f446 7600 	orr.w	r6, r6, #512	; 0x200
  401998:	601e      	str	r6, [r3, #0]



	//Set up PA16 as AUX ENC 3 INPUT A
	REG_PIOA_PER |= PIO_PER_P16; //enable PIO controller
  40199a:	682e      	ldr	r6, [r5, #0]
  40199c:	f446 3680 	orr.w	r6, r6, #65536	; 0x10000
  4019a0:	602e      	str	r6, [r5, #0]
	REG_PIOA_ODR |= PIO_ODR_P16; //disable output
  4019a2:	6826      	ldr	r6, [r4, #0]
  4019a4:	f446 3680 	orr.w	r6, r6, #65536	; 0x10000
  4019a8:	6026      	str	r6, [r4, #0]
	REG_PIOA_PPDDR |= PIO_PPDDR_P16; //disable pull-down resistor
  4019aa:	6806      	ldr	r6, [r0, #0]
  4019ac:	f446 3680 	orr.w	r6, r6, #65536	; 0x10000
  4019b0:	6006      	str	r6, [r0, #0]
	REG_PIOA_PUER |= PIO_PUER_P16;	//enable pull-up resistor
  4019b2:	680e      	ldr	r6, [r1, #0]
  4019b4:	f446 3680 	orr.w	r6, r6, #65536	; 0x10000
  4019b8:	600e      	str	r6, [r1, #0]
	REG_PIOA_IFSCER |= PIO_IFSCER_P16; //turn on slow clock debounce
  4019ba:	6816      	ldr	r6, [r2, #0]
  4019bc:	f446 3680 	orr.w	r6, r6, #65536	; 0x10000
  4019c0:	6016      	str	r6, [r2, #0]
	REG_PIOA_IFER |= PIO_IFER_P16;	//start debounce filter
  4019c2:	681e      	ldr	r6, [r3, #0]
  4019c4:	f446 3680 	orr.w	r6, r6, #65536	; 0x10000
  4019c8:	601e      	str	r6, [r3, #0]

	//Set up PA17 as AUX ENC 3 INPUT B
	REG_PIOA_PER |= PIO_PER_P17; //enable PIO controller
  4019ca:	682e      	ldr	r6, [r5, #0]
  4019cc:	f446 3600 	orr.w	r6, r6, #131072	; 0x20000
  4019d0:	602e      	str	r6, [r5, #0]
	REG_PIOA_ODR |= PIO_ODR_P17; //disable output
  4019d2:	6826      	ldr	r6, [r4, #0]
  4019d4:	f446 3600 	orr.w	r6, r6, #131072	; 0x20000
  4019d8:	6026      	str	r6, [r4, #0]
	REG_PIOA_PPDDR |= PIO_PPDDR_P17; //disable pull-down resistor
  4019da:	6806      	ldr	r6, [r0, #0]
  4019dc:	f446 3600 	orr.w	r6, r6, #131072	; 0x20000
  4019e0:	6006      	str	r6, [r0, #0]
	REG_PIOA_PUER |= PIO_PUER_P17;	//enable pull-up resistor
  4019e2:	680e      	ldr	r6, [r1, #0]
  4019e4:	f446 3600 	orr.w	r6, r6, #131072	; 0x20000
  4019e8:	600e      	str	r6, [r1, #0]
	REG_PIOA_IFSCER |= PIO_IFSCER_P17; //turn on slow clock debounce
  4019ea:	6816      	ldr	r6, [r2, #0]
  4019ec:	f446 3600 	orr.w	r6, r6, #131072	; 0x20000
  4019f0:	6016      	str	r6, [r2, #0]
	REG_PIOA_IFER |= PIO_IFER_P17;	//start debounce filter
  4019f2:	681e      	ldr	r6, [r3, #0]
  4019f4:	f446 3600 	orr.w	r6, r6, #131072	; 0x20000
  4019f8:	601e      	str	r6, [r3, #0]



	//Set up PA20 as AUX ENC 4 INPUT A
	REG_PIOA_PER |= PIO_PER_P20; //enable PIO controller
  4019fa:	682e      	ldr	r6, [r5, #0]
  4019fc:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
  401a00:	602e      	str	r6, [r5, #0]
	REG_PIOA_ODR |= PIO_ODR_P20; //disable output
  401a02:	6826      	ldr	r6, [r4, #0]
  401a04:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
  401a08:	6026      	str	r6, [r4, #0]
	REG_PIOA_PPDDR |= PIO_PPDDR_P20; //disable pull-down resistor
  401a0a:	6806      	ldr	r6, [r0, #0]
  401a0c:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
  401a10:	6006      	str	r6, [r0, #0]
	REG_PIOA_PUER |= PIO_PUER_P20;	//enable pull-up resistor
  401a12:	680e      	ldr	r6, [r1, #0]
  401a14:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
  401a18:	600e      	str	r6, [r1, #0]
	REG_PIOA_IFSCER |= PIO_IFSCER_P20; //turn on slow clock debounce
  401a1a:	6816      	ldr	r6, [r2, #0]
  401a1c:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
  401a20:	6016      	str	r6, [r2, #0]
	REG_PIOA_IFER |= PIO_IFER_P20;	//start debounce filter
  401a22:	681e      	ldr	r6, [r3, #0]
  401a24:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
  401a28:	601e      	str	r6, [r3, #0]

	//Set up PA21 as AUX ENC 4 INPUT B
	REG_PIOA_PER |= PIO_PER_P21; //enable PIO controller
  401a2a:	682e      	ldr	r6, [r5, #0]
  401a2c:	f446 1600 	orr.w	r6, r6, #2097152	; 0x200000
  401a30:	602e      	str	r6, [r5, #0]
	REG_PIOA_ODR |= PIO_ODR_P21; //disable output
  401a32:	6826      	ldr	r6, [r4, #0]
  401a34:	f446 1600 	orr.w	r6, r6, #2097152	; 0x200000
  401a38:	6026      	str	r6, [r4, #0]
	REG_PIOA_PPDDR |= PIO_PPDDR_P21; //disable pull-down resistor
  401a3a:	6806      	ldr	r6, [r0, #0]
  401a3c:	f446 1600 	orr.w	r6, r6, #2097152	; 0x200000
  401a40:	6006      	str	r6, [r0, #0]
	REG_PIOA_PUER |= PIO_PUER_P21;	//enable pull-up resistor
  401a42:	680e      	ldr	r6, [r1, #0]
  401a44:	f446 1600 	orr.w	r6, r6, #2097152	; 0x200000
  401a48:	600e      	str	r6, [r1, #0]
	REG_PIOA_IFSCER |= PIO_IFSCER_P21; //turn on slow clock debounce
  401a4a:	6816      	ldr	r6, [r2, #0]
  401a4c:	f446 1600 	orr.w	r6, r6, #2097152	; 0x200000
  401a50:	6016      	str	r6, [r2, #0]
	REG_PIOA_IFER |= PIO_IFER_P21;	//start debounce filter
  401a52:	681e      	ldr	r6, [r3, #0]
  401a54:	f446 1600 	orr.w	r6, r6, #2097152	; 0x200000
  401a58:	601e      	str	r6, [r3, #0]



	//Set up PA22 as AUX ENC 5 INPUT A
	REG_PIOA_PER |= PIO_PER_P22; //enable PIO controller
  401a5a:	682e      	ldr	r6, [r5, #0]
  401a5c:	f446 0680 	orr.w	r6, r6, #4194304	; 0x400000
  401a60:	602e      	str	r6, [r5, #0]
	REG_PIOA_ODR |= PIO_ODR_P22; //disable output
  401a62:	6826      	ldr	r6, [r4, #0]
  401a64:	f446 0680 	orr.w	r6, r6, #4194304	; 0x400000
  401a68:	6026      	str	r6, [r4, #0]
	REG_PIOA_PPDDR |= PIO_PPDDR_P22; //disable pull-down resistor
  401a6a:	6806      	ldr	r6, [r0, #0]
  401a6c:	f446 0680 	orr.w	r6, r6, #4194304	; 0x400000
  401a70:	6006      	str	r6, [r0, #0]
	REG_PIOA_PUER |= PIO_PUER_P22;	//enable pull-up resistor
  401a72:	680e      	ldr	r6, [r1, #0]
  401a74:	f446 0680 	orr.w	r6, r6, #4194304	; 0x400000
  401a78:	600e      	str	r6, [r1, #0]
	REG_PIOA_IFSCER |= PIO_IFSCER_P22; //turn on slow clock debounce
  401a7a:	6816      	ldr	r6, [r2, #0]
  401a7c:	f446 0680 	orr.w	r6, r6, #4194304	; 0x400000
  401a80:	6016      	str	r6, [r2, #0]
	REG_PIOA_IFER |= PIO_IFER_P22;	//start debounce filter
  401a82:	681e      	ldr	r6, [r3, #0]
  401a84:	f446 0680 	orr.w	r6, r6, #4194304	; 0x400000
  401a88:	601e      	str	r6, [r3, #0]

	//Set up PA23 as AUX ENC 5 INPUT B
	REG_PIOA_PER |= PIO_PER_P23; //enable PIO controller
  401a8a:	682e      	ldr	r6, [r5, #0]
  401a8c:	f446 0600 	orr.w	r6, r6, #8388608	; 0x800000
  401a90:	602e      	str	r6, [r5, #0]
	REG_PIOA_ODR |= PIO_ODR_P23; //disable output
  401a92:	6826      	ldr	r6, [r4, #0]
  401a94:	f446 0600 	orr.w	r6, r6, #8388608	; 0x800000
  401a98:	6026      	str	r6, [r4, #0]
	REG_PIOA_PPDDR |= PIO_PPDDR_P23; //disable pull-down resistor
  401a9a:	6806      	ldr	r6, [r0, #0]
  401a9c:	f446 0600 	orr.w	r6, r6, #8388608	; 0x800000
  401aa0:	6006      	str	r6, [r0, #0]
	REG_PIOA_PUER |= PIO_PUER_P23;	//enable pull-up resistor
  401aa2:	680e      	ldr	r6, [r1, #0]
  401aa4:	f446 0600 	orr.w	r6, r6, #8388608	; 0x800000
  401aa8:	600e      	str	r6, [r1, #0]
	REG_PIOA_IFSCER |= PIO_IFSCER_P23; //turn on slow clock debounce
  401aaa:	6816      	ldr	r6, [r2, #0]
  401aac:	f446 0600 	orr.w	r6, r6, #8388608	; 0x800000
  401ab0:	6016      	str	r6, [r2, #0]
	REG_PIOA_IFER |= PIO_IFER_P23;	//start debounce filter
  401ab2:	681e      	ldr	r6, [r3, #0]
  401ab4:	f446 0600 	orr.w	r6, r6, #8388608	; 0x800000
  401ab8:	601e      	str	r6, [r3, #0]



	//Set up PA24 as AUX ENC 6 INPUT A
	REG_PIOA_PER |= PIO_PER_P24; //enable PIO controller
  401aba:	682e      	ldr	r6, [r5, #0]
  401abc:	f046 7680 	orr.w	r6, r6, #16777216	; 0x1000000
  401ac0:	602e      	str	r6, [r5, #0]
	REG_PIOA_ODR |= PIO_ODR_P24; //disable output
  401ac2:	6826      	ldr	r6, [r4, #0]
  401ac4:	f046 7680 	orr.w	r6, r6, #16777216	; 0x1000000
  401ac8:	6026      	str	r6, [r4, #0]
	REG_PIOA_PPDDR |= PIO_PPDDR_P24; //disable pull-down resistor
  401aca:	6806      	ldr	r6, [r0, #0]
  401acc:	f046 7680 	orr.w	r6, r6, #16777216	; 0x1000000
  401ad0:	6006      	str	r6, [r0, #0]
	REG_PIOA_PUER |= PIO_PUER_P24;	//enable pull-up resistor
  401ad2:	680e      	ldr	r6, [r1, #0]
  401ad4:	f046 7680 	orr.w	r6, r6, #16777216	; 0x1000000
  401ad8:	600e      	str	r6, [r1, #0]
	REG_PIOA_IFSCER |= PIO_IFSCER_P24; //turn on slow clock debounce
  401ada:	6816      	ldr	r6, [r2, #0]
  401adc:	f046 7680 	orr.w	r6, r6, #16777216	; 0x1000000
  401ae0:	6016      	str	r6, [r2, #0]
	REG_PIOA_IFER |= PIO_IFER_P24;	//start debounce filter
  401ae2:	681e      	ldr	r6, [r3, #0]
  401ae4:	f046 7680 	orr.w	r6, r6, #16777216	; 0x1000000
  401ae8:	601e      	str	r6, [r3, #0]

	//Set up PA25 as AUX ENC 6 INPUT B
	REG_PIOA_PER |= PIO_PER_P25; //enable PIO controller
  401aea:	682e      	ldr	r6, [r5, #0]
  401aec:	f046 7600 	orr.w	r6, r6, #33554432	; 0x2000000
  401af0:	602e      	str	r6, [r5, #0]
	REG_PIOA_ODR |= PIO_ODR_P25; //disable output
  401af2:	6826      	ldr	r6, [r4, #0]
  401af4:	e012      	b.n	401b1c <init_sequencer_controls+0x2cc>
  401af6:	bf00      	nop
  401af8:	200086fc 	.word	0x200086fc
  401afc:	200086f5 	.word	0x200086f5
  401b00:	200086f6 	.word	0x200086f6
  401b04:	400e0410 	.word	0x400e0410
  401b08:	400e0e00 	.word	0x400e0e00
  401b0c:	400e0e14 	.word	0x400e0e14
  401b10:	400e0e90 	.word	0x400e0e90
  401b14:	400e0e64 	.word	0x400e0e64
  401b18:	400e0e20 	.word	0x400e0e20
  401b1c:	f046 7600 	orr.w	r6, r6, #33554432	; 0x2000000
  401b20:	6026      	str	r6, [r4, #0]
	REG_PIOA_PPDDR |= PIO_PPDDR_P25; //disable pull-down resistor
  401b22:	6806      	ldr	r6, [r0, #0]
  401b24:	f046 7600 	orr.w	r6, r6, #33554432	; 0x2000000
  401b28:	6006      	str	r6, [r0, #0]
	REG_PIOA_PUER |= PIO_PUER_P25;	//enable pull-up resistor
  401b2a:	680e      	ldr	r6, [r1, #0]
  401b2c:	f046 7600 	orr.w	r6, r6, #33554432	; 0x2000000
  401b30:	600e      	str	r6, [r1, #0]
	REG_PIOA_IFSCER |= PIO_IFSCER_P25; //turn on slow clock debounce
  401b32:	6816      	ldr	r6, [r2, #0]
  401b34:	f046 7600 	orr.w	r6, r6, #33554432	; 0x2000000
  401b38:	6016      	str	r6, [r2, #0]
	REG_PIOA_IFER |= PIO_IFER_P25;	//start debounce filter
  401b3a:	681e      	ldr	r6, [r3, #0]
  401b3c:	f046 7600 	orr.w	r6, r6, #33554432	; 0x2000000
  401b40:	601e      	str	r6, [r3, #0]



	//Set up PA26 as AUX ENC 7 INPUT A
	REG_PIOA_PER |= PIO_PER_P26; //enable PIO controller
  401b42:	682e      	ldr	r6, [r5, #0]
  401b44:	f046 6680 	orr.w	r6, r6, #67108864	; 0x4000000
  401b48:	602e      	str	r6, [r5, #0]
	REG_PIOA_ODR |= PIO_ODR_P26; //disable output
  401b4a:	6826      	ldr	r6, [r4, #0]
  401b4c:	f046 6680 	orr.w	r6, r6, #67108864	; 0x4000000
  401b50:	6026      	str	r6, [r4, #0]
	REG_PIOA_PPDDR |= PIO_PPDDR_P26; //disable pull-down resistor
  401b52:	6806      	ldr	r6, [r0, #0]
  401b54:	f046 6680 	orr.w	r6, r6, #67108864	; 0x4000000
  401b58:	6006      	str	r6, [r0, #0]
	REG_PIOA_PUER |= PIO_PUER_P26;	//enable pull-up resistor
  401b5a:	680e      	ldr	r6, [r1, #0]
  401b5c:	f046 6680 	orr.w	r6, r6, #67108864	; 0x4000000
  401b60:	600e      	str	r6, [r1, #0]
	REG_PIOA_IFSCER |= PIO_IFSCER_P26; //turn on slow clock debounce
  401b62:	6816      	ldr	r6, [r2, #0]
  401b64:	f046 6680 	orr.w	r6, r6, #67108864	; 0x4000000
  401b68:	6016      	str	r6, [r2, #0]
	REG_PIOA_IFER |= PIO_IFER_P26;	//start debounce filter
  401b6a:	681e      	ldr	r6, [r3, #0]
  401b6c:	f046 6680 	orr.w	r6, r6, #67108864	; 0x4000000
  401b70:	601e      	str	r6, [r3, #0]

	//Set up PA27 as AUX ENC 7 INPUT B
	REG_PIOA_PER |= PIO_PER_P27; //enable PIO controller
  401b72:	682e      	ldr	r6, [r5, #0]
  401b74:	f046 6600 	orr.w	r6, r6, #134217728	; 0x8000000
  401b78:	602e      	str	r6, [r5, #0]
	REG_PIOA_ODR |= PIO_ODR_P27; //disable output
  401b7a:	6825      	ldr	r5, [r4, #0]
  401b7c:	f045 6500 	orr.w	r5, r5, #134217728	; 0x8000000
  401b80:	6025      	str	r5, [r4, #0]
	REG_PIOA_PPDDR |= PIO_PPDDR_P27; //disable pull-down resistor
  401b82:	6804      	ldr	r4, [r0, #0]
  401b84:	f044 6400 	orr.w	r4, r4, #134217728	; 0x8000000
  401b88:	6004      	str	r4, [r0, #0]
	REG_PIOA_PUER |= PIO_PUER_P27;	//enable pull-up resistor
  401b8a:	6808      	ldr	r0, [r1, #0]
  401b8c:	f040 6000 	orr.w	r0, r0, #134217728	; 0x8000000
  401b90:	6008      	str	r0, [r1, #0]
	REG_PIOA_IFSCER |= PIO_IFSCER_P27; //turn on slow clock debounce
  401b92:	6811      	ldr	r1, [r2, #0]
  401b94:	f041 6100 	orr.w	r1, r1, #134217728	; 0x8000000
  401b98:	6011      	str	r1, [r2, #0]
	REG_PIOA_IFER |= PIO_IFER_P27;	//start debounce filter
  401b9a:	681a      	ldr	r2, [r3, #0]
  401b9c:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
  401ba0:	601a      	str	r2, [r3, #0]


	/**************			CONFIGURE AUX ENCODER INTERRUPTS			**************/

	uint32_t flag_clear = REG_PIOA_ISR;	//clear left over interrupt flags
  401ba2:	332c      	adds	r3, #44	; 0x2c
  401ba4:	681b      	ldr	r3, [r3, #0]

	//Enable interrupts for Aux Encoder 0
	REG_PIOA_IER |= PIO_IER_P0;			//enable input rising edge interrupt
  401ba6:	4a44      	ldr	r2, [pc, #272]	; (401cb8 <init_sequencer_controls+0x468>)
  401ba8:	6813      	ldr	r3, [r2, #0]
  401baa:	f043 0301 	orr.w	r3, r3, #1
  401bae:	6013      	str	r3, [r2, #0]
	REG_PIOA_REHLSR |= PIO_REHLSR_P0;
  401bb0:	4b42      	ldr	r3, [pc, #264]	; (401cbc <init_sequencer_controls+0x46c>)
  401bb2:	6819      	ldr	r1, [r3, #0]
  401bb4:	f041 0101 	orr.w	r1, r1, #1
  401bb8:	6019      	str	r1, [r3, #0]
	REG_PIOA_IER |= PIO_IER_P1;			//enable input rising edge interrupt
  401bba:	6811      	ldr	r1, [r2, #0]
  401bbc:	f041 0102 	orr.w	r1, r1, #2
  401bc0:	6011      	str	r1, [r2, #0]
	REG_PIOA_REHLSR |= PIO_REHLSR_P1;
  401bc2:	6819      	ldr	r1, [r3, #0]
  401bc4:	f041 0102 	orr.w	r1, r1, #2
  401bc8:	6019      	str	r1, [r3, #0]

	//Enable interrupts for Aux Encoder 1
	REG_PIOA_IER |= PIO_IER_P6;			//enable input rising edge interrupt
  401bca:	6811      	ldr	r1, [r2, #0]
  401bcc:	f041 0140 	orr.w	r1, r1, #64	; 0x40
  401bd0:	6011      	str	r1, [r2, #0]
	REG_PIOA_REHLSR |= PIO_REHLSR_P6;
  401bd2:	6819      	ldr	r1, [r3, #0]
  401bd4:	f041 0140 	orr.w	r1, r1, #64	; 0x40
  401bd8:	6019      	str	r1, [r3, #0]
	REG_PIOA_IER |= PIO_IER_P7;			//enable input rising edge interrupt
  401bda:	6811      	ldr	r1, [r2, #0]
  401bdc:	f041 0180 	orr.w	r1, r1, #128	; 0x80
  401be0:	6011      	str	r1, [r2, #0]
	REG_PIOA_REHLSR |= PIO_REHLSR_P7;
  401be2:	6819      	ldr	r1, [r3, #0]
  401be4:	f041 0180 	orr.w	r1, r1, #128	; 0x80
  401be8:	6019      	str	r1, [r3, #0]

	//Enable interrupts for Aux Encoder 2
	REG_PIOA_IER |= PIO_IER_P8;			//enable input rising edge interrupt
  401bea:	6811      	ldr	r1, [r2, #0]
  401bec:	f441 7180 	orr.w	r1, r1, #256	; 0x100
  401bf0:	6011      	str	r1, [r2, #0]
	REG_PIOA_REHLSR |= PIO_REHLSR_P8;
  401bf2:	6819      	ldr	r1, [r3, #0]
  401bf4:	f441 7180 	orr.w	r1, r1, #256	; 0x100
  401bf8:	6019      	str	r1, [r3, #0]
	REG_PIOA_IER |= PIO_IER_P9;			//enable input rising edge interrupt
  401bfa:	6811      	ldr	r1, [r2, #0]
  401bfc:	f441 7100 	orr.w	r1, r1, #512	; 0x200
  401c00:	6011      	str	r1, [r2, #0]
	REG_PIOA_REHLSR |= PIO_REHLSR_P9;
  401c02:	6819      	ldr	r1, [r3, #0]
  401c04:	f441 7100 	orr.w	r1, r1, #512	; 0x200
  401c08:	6019      	str	r1, [r3, #0]

	//Enable interrupts for Aux Encoder 3
	REG_PIOA_IER |= PIO_IER_P16;			//enable input rising edge interrupt
  401c0a:	6811      	ldr	r1, [r2, #0]
  401c0c:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
  401c10:	6011      	str	r1, [r2, #0]
	REG_PIOA_REHLSR |= PIO_REHLSR_P16;
  401c12:	6819      	ldr	r1, [r3, #0]
  401c14:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
  401c18:	6019      	str	r1, [r3, #0]
	REG_PIOA_IER |= PIO_IER_P17;			//enable input rising edge interrupt
  401c1a:	6811      	ldr	r1, [r2, #0]
  401c1c:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
  401c20:	6011      	str	r1, [r2, #0]
	REG_PIOA_REHLSR |= PIO_REHLSR_P17;
  401c22:	6819      	ldr	r1, [r3, #0]
  401c24:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
  401c28:	6019      	str	r1, [r3, #0]

	//Enable interrupts for Aux Encoder 4
	REG_PIOA_IER |= PIO_IER_P20;			//enable input rising edge interrupt
  401c2a:	6811      	ldr	r1, [r2, #0]
  401c2c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  401c30:	6011      	str	r1, [r2, #0]
	REG_PIOA_REHLSR |= PIO_REHLSR_P20;
  401c32:	6819      	ldr	r1, [r3, #0]
  401c34:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  401c38:	6019      	str	r1, [r3, #0]
	REG_PIOA_IER |= PIO_IER_P21;			//enable input rising edge interrupt
  401c3a:	6811      	ldr	r1, [r2, #0]
  401c3c:	f441 1100 	orr.w	r1, r1, #2097152	; 0x200000
  401c40:	6011      	str	r1, [r2, #0]
	REG_PIOA_REHLSR |= PIO_REHLSR_P21;
  401c42:	6819      	ldr	r1, [r3, #0]
  401c44:	f441 1100 	orr.w	r1, r1, #2097152	; 0x200000
  401c48:	6019      	str	r1, [r3, #0]

	//Enable interrupts for Aux Encoder 5
	REG_PIOA_IER |= PIO_IER_P22;			//enable input rising edge interrupt
  401c4a:	6811      	ldr	r1, [r2, #0]
  401c4c:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
  401c50:	6011      	str	r1, [r2, #0]
	REG_PIOA_REHLSR |= PIO_REHLSR_P22;
  401c52:	6819      	ldr	r1, [r3, #0]
  401c54:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
  401c58:	6019      	str	r1, [r3, #0]
	REG_PIOA_IER |= PIO_IER_P23;			//enable input rising edge interrupt
  401c5a:	6811      	ldr	r1, [r2, #0]
  401c5c:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
  401c60:	6011      	str	r1, [r2, #0]
	REG_PIOA_REHLSR |= PIO_REHLSR_P23;
  401c62:	6819      	ldr	r1, [r3, #0]
  401c64:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
  401c68:	6019      	str	r1, [r3, #0]

	//Enable interrupts for Aux Encoder 6
	REG_PIOA_IER |= PIO_IER_P24;			//enable input rising edge interrupt
  401c6a:	6811      	ldr	r1, [r2, #0]
  401c6c:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
  401c70:	6011      	str	r1, [r2, #0]
	REG_PIOA_REHLSR |= PIO_REHLSR_P24;
  401c72:	6819      	ldr	r1, [r3, #0]
  401c74:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
  401c78:	6019      	str	r1, [r3, #0]
	REG_PIOA_IER |= PIO_IER_P25;			//enable input rising edge interrupt
  401c7a:	6811      	ldr	r1, [r2, #0]
  401c7c:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
  401c80:	6011      	str	r1, [r2, #0]
	REG_PIOA_REHLSR |= PIO_REHLSR_P25;
  401c82:	6819      	ldr	r1, [r3, #0]
  401c84:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
  401c88:	6019      	str	r1, [r3, #0]

	//Enable interrupts for Aux Encoder 7
	REG_PIOA_IER |= PIO_IER_P26;			//enable input rising edge interrupt
  401c8a:	6811      	ldr	r1, [r2, #0]
  401c8c:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
  401c90:	6011      	str	r1, [r2, #0]
	REG_PIOA_REHLSR |= PIO_REHLSR_P26;
  401c92:	6819      	ldr	r1, [r3, #0]
  401c94:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
  401c98:	6019      	str	r1, [r3, #0]
	REG_PIOA_IER |= PIO_IER_P27;			//enable input rising edge interrupt
  401c9a:	6811      	ldr	r1, [r2, #0]
  401c9c:	f041 6100 	orr.w	r1, r1, #134217728	; 0x8000000
  401ca0:	6011      	str	r1, [r2, #0]
	REG_PIOA_REHLSR |= PIO_REHLSR_P27;
  401ca2:	681a      	ldr	r2, [r3, #0]
  401ca4:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
  401ca8:	601a      	str	r2, [r3, #0]
  401caa:	f44f 6200 	mov.w	r2, #2048	; 0x800
  401cae:	4b04      	ldr	r3, [pc, #16]	; (401cc0 <init_sequencer_controls+0x470>)
  401cb0:	601a      	str	r2, [r3, #0]

	NVIC_EnableIRQ(PIOA_IRQn);			//enable PORT A interrupts


 }
  401cb2:	bc70      	pop	{r4, r5, r6}
  401cb4:	4770      	bx	lr
  401cb6:	bf00      	nop
  401cb8:	400e0e40 	.word	0x400e0e40
  401cbc:	400e0ed4 	.word	0x400e0ed4
  401cc0:	e000e100 	.word	0xe000e100

00401cc4 <PIOA_Handler>:


 void PIOA_Handler(){
  401cc4:	b508      	push	{r3, lr}

	 uint32_t status = REG_PIOA_ISR;	//read PIOC interrupt status & clear interrupt flags
  401cc6:	4b30      	ldr	r3, [pc, #192]	; (401d88 <PIOA_Handler+0xc4>)
  401cc8:	681b      	ldr	r3, [r3, #0]

	 //check if Aux Encoder 1 was rotated
	 if ( (status & PIO_ISR_P0) || (status & PIO_ISR_P1) ){
  401cca:	f013 0f03 	tst.w	r3, #3
  401cce:	d009      	beq.n	401ce4 <PIOA_Handler+0x20>
		 control_direction(PIO_ODSR_P0, PIO_ODSR_P1, 0);
  401cd0:	2200      	movs	r2, #0
  401cd2:	2102      	movs	r1, #2
  401cd4:	2001      	movs	r0, #1
  401cd6:	4b2d      	ldr	r3, [pc, #180]	; (401d8c <PIOA_Handler+0xc8>)
  401cd8:	4798      	blx	r3
		 update_timers(bpm);
  401cda:	4b2d      	ldr	r3, [pc, #180]	; (401d90 <PIOA_Handler+0xcc>)
  401cdc:	8818      	ldrh	r0, [r3, #0]
  401cde:	4b2d      	ldr	r3, [pc, #180]	; (401d94 <PIOA_Handler+0xd0>)
  401ce0:	4798      	blx	r3
  401ce2:	bd08      	pop	{r3, pc}
	 }

	 else if ( (status & PIO_ISR_P2) ){
  401ce4:	f013 0f04 	tst.w	r3, #4
  401ce8:	d14c      	bne.n	401d84 <PIOA_Handler+0xc0>
		/************** PLAY / PAUSE INT****************/
	 }

	 //check if Aux Encoder 2 was rotated
	 else if ( (status & PIO_ISR_P6) || (status & PIO_ISR_P7) ){
  401cea:	f013 0fc0 	tst.w	r3, #192	; 0xc0
  401cee:	d005      	beq.n	401cfc <PIOA_Handler+0x38>
		 control_direction(PIO_ODSR_P6, PIO_ODSR_P7, 1);
  401cf0:	2201      	movs	r2, #1
  401cf2:	2180      	movs	r1, #128	; 0x80
  401cf4:	2040      	movs	r0, #64	; 0x40
  401cf6:	4b25      	ldr	r3, [pc, #148]	; (401d8c <PIOA_Handler+0xc8>)
  401cf8:	4798      	blx	r3
  401cfa:	bd08      	pop	{r3, pc}
	 }

	 //check if Aux Encoder 3 was rotated
	 else if ( (status & PIO_ISR_P8) || (status & PIO_ISR_P9) ){
  401cfc:	f413 7f40 	tst.w	r3, #768	; 0x300
  401d00:	d007      	beq.n	401d12 <PIOA_Handler+0x4e>
		control_direction(PIO_ODSR_P8, PIO_ODSR_P9, 2);
  401d02:	2202      	movs	r2, #2
  401d04:	f44f 7100 	mov.w	r1, #512	; 0x200
  401d08:	f44f 7080 	mov.w	r0, #256	; 0x100
  401d0c:	4b1f      	ldr	r3, [pc, #124]	; (401d8c <PIOA_Handler+0xc8>)
  401d0e:	4798      	blx	r3
  401d10:	bd08      	pop	{r3, pc}
	 }

	 else if ( (status & PIO_ISR_P10) ){
  401d12:	f413 6f80 	tst.w	r3, #1024	; 0x400
  401d16:	d135      	bne.n	401d84 <PIOA_Handler+0xc0>
		/***************CLOCK IN INT***************/
	 }

	 //check if Aux Encoder 4 was rotated
	 else if ( (status & PIO_ISR_P16) || (status & PIO_ISR_P17) ){
  401d18:	f413 3f40 	tst.w	r3, #196608	; 0x30000
  401d1c:	d007      	beq.n	401d2e <PIOA_Handler+0x6a>
		control_direction(PIO_ODSR_P16, PIO_ODSR_P17, 3);
  401d1e:	2203      	movs	r2, #3
  401d20:	f44f 3100 	mov.w	r1, #131072	; 0x20000
  401d24:	f44f 3080 	mov.w	r0, #65536	; 0x10000
  401d28:	4b18      	ldr	r3, [pc, #96]	; (401d8c <PIOA_Handler+0xc8>)
  401d2a:	4798      	blx	r3
  401d2c:	bd08      	pop	{r3, pc}
	 }

	 //check if Aux Encoder 5 was rotated
	 else if ( (status & PIO_ISR_P20) || (status & PIO_ISR_P21) ){
  401d2e:	f413 1f40 	tst.w	r3, #3145728	; 0x300000
  401d32:	d007      	beq.n	401d44 <PIOA_Handler+0x80>
		control_direction(PIO_ODSR_P20, PIO_ODSR_P21, 4);
  401d34:	2204      	movs	r2, #4
  401d36:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
  401d3a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  401d3e:	4b13      	ldr	r3, [pc, #76]	; (401d8c <PIOA_Handler+0xc8>)
  401d40:	4798      	blx	r3
  401d42:	bd08      	pop	{r3, pc}
	 }

	 //check if Aux Encoder 6 was rotated
	 else if ( (status & PIO_ISR_P22) || (status & PIO_ISR_P23) ){
  401d44:	f413 0f40 	tst.w	r3, #12582912	; 0xc00000
  401d48:	d007      	beq.n	401d5a <PIOA_Handler+0x96>
		control_direction(PIO_ODSR_P22, PIO_ODSR_P23, 5);
  401d4a:	2205      	movs	r2, #5
  401d4c:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
  401d50:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
  401d54:	4b0d      	ldr	r3, [pc, #52]	; (401d8c <PIOA_Handler+0xc8>)
  401d56:	4798      	blx	r3
  401d58:	bd08      	pop	{r3, pc}
	 }

	 //check if Aux Encoder 7 was rotated
	 else if ( (status & PIO_ISR_P24) || (status & PIO_ISR_P25) ){
  401d5a:	f013 7f40 	tst.w	r3, #50331648	; 0x3000000
  401d5e:	d007      	beq.n	401d70 <PIOA_Handler+0xac>
		 control_direction(PIO_ODSR_P24, PIO_ODSR_P25, 6);
  401d60:	2206      	movs	r2, #6
  401d62:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
  401d66:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
  401d6a:	4b08      	ldr	r3, [pc, #32]	; (401d8c <PIOA_Handler+0xc8>)
  401d6c:	4798      	blx	r3
  401d6e:	bd08      	pop	{r3, pc}
	 }
	 
	 //check if Aux Encoder 8 was rotated
	 else if ( (status & PIO_ISR_P26) || (status & PIO_ISR_P27) ){
  401d70:	f013 6f40 	tst.w	r3, #201326592	; 0xc000000
  401d74:	d006      	beq.n	401d84 <PIOA_Handler+0xc0>
		 control_direction(PIO_ODSR_P26, PIO_ODSR_P27, 7);
  401d76:	2207      	movs	r2, #7
  401d78:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401d7c:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
  401d80:	4b02      	ldr	r3, [pc, #8]	; (401d8c <PIOA_Handler+0xc8>)
  401d82:	4798      	blx	r3
  401d84:	bd08      	pop	{r3, pc}
  401d86:	bf00      	nop
  401d88:	400e0e4c 	.word	0x400e0e4c
  401d8c:	00401711 	.word	0x00401711
  401d90:	200086fc 	.word	0x200086fc
  401d94:	004020b9 	.word	0x004020b9

00401d98 <SPI_modeSelect>:
    Mode0		0		1
    Mode1		0		0
    Mode2		1		1
    Mode3		1		0
    */
    if (mode == 0){
  401d98:	b948      	cbnz	r0, 401dae <SPI_modeSelect+0x16>
        REG_SPI_CSR &= ~SPI_CSR_CPOL;
  401d9a:	4b17      	ldr	r3, [pc, #92]	; (401df8 <SPI_modeSelect+0x60>)
  401d9c:	681a      	ldr	r2, [r3, #0]
  401d9e:	f022 0201 	bic.w	r2, r2, #1
  401da2:	601a      	str	r2, [r3, #0]
        REG_SPI_CSR |= SPI_CSR_NCPHA;
  401da4:	681a      	ldr	r2, [r3, #0]
  401da6:	f042 0202 	orr.w	r2, r2, #2
  401daa:	601a      	str	r2, [r3, #0]
  401dac:	4770      	bx	lr
    }
    else if (mode == 1){
  401dae:	2801      	cmp	r0, #1
  401db0:	d109      	bne.n	401dc6 <SPI_modeSelect+0x2e>
        REG_SPI_CSR &= ~SPI_CSR_CPOL;
  401db2:	4b11      	ldr	r3, [pc, #68]	; (401df8 <SPI_modeSelect+0x60>)
  401db4:	681a      	ldr	r2, [r3, #0]
  401db6:	f022 0201 	bic.w	r2, r2, #1
  401dba:	601a      	str	r2, [r3, #0]
        REG_SPI_CSR &= ~SPI_CSR_NCPHA;
  401dbc:	681a      	ldr	r2, [r3, #0]
  401dbe:	f022 0202 	bic.w	r2, r2, #2
  401dc2:	601a      	str	r2, [r3, #0]
  401dc4:	4770      	bx	lr
    }
    else if (mode == 2){
  401dc6:	2802      	cmp	r0, #2
  401dc8:	d109      	bne.n	401dde <SPI_modeSelect+0x46>
        REG_SPI_CSR |= SPI_CSR_CPOL;
  401dca:	4b0b      	ldr	r3, [pc, #44]	; (401df8 <SPI_modeSelect+0x60>)
  401dcc:	681a      	ldr	r2, [r3, #0]
  401dce:	f042 0201 	orr.w	r2, r2, #1
  401dd2:	601a      	str	r2, [r3, #0]
        REG_SPI_CSR |= SPI_CSR_NCPHA;
  401dd4:	681a      	ldr	r2, [r3, #0]
  401dd6:	f042 0202 	orr.w	r2, r2, #2
  401dda:	601a      	str	r2, [r3, #0]
  401ddc:	4770      	bx	lr
    }
    else if (mode == 3){
  401dde:	2803      	cmp	r0, #3
  401de0:	d108      	bne.n	401df4 <SPI_modeSelect+0x5c>
        REG_SPI_CSR |= SPI_CSR_CPOL;
  401de2:	4b05      	ldr	r3, [pc, #20]	; (401df8 <SPI_modeSelect+0x60>)
  401de4:	681a      	ldr	r2, [r3, #0]
  401de6:	f042 0201 	orr.w	r2, r2, #1
  401dea:	601a      	str	r2, [r3, #0]
        REG_SPI_CSR &= ~SPI_CSR_NCPHA;
  401dec:	681a      	ldr	r2, [r3, #0]
  401dee:	f022 0202 	bic.w	r2, r2, #2
  401df2:	601a      	str	r2, [r3, #0]
  401df4:	4770      	bx	lr
  401df6:	bf00      	nop
  401df8:	40008030 	.word	0x40008030

00401dfc <SPI_led_init>:
    }
}

void SPI_led_init(){
  401dfc:	b508      	push	{r3, lr}

	//enable peripheral clock
	REG_PMC_PCER0 |= PMC_PCER0_PID21;
  401dfe:	4a14      	ldr	r2, [pc, #80]	; (401e50 <SPI_led_init+0x54>)
  401e00:	6813      	ldr	r3, [r2, #0]
  401e02:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
  401e06:	6013      	str	r3, [r2, #0]

	//set spi master mode
	REG_SPI_MR |= SPI_MR_MSTR;
  401e08:	4b12      	ldr	r3, [pc, #72]	; (401e54 <SPI_led_init+0x58>)
  401e0a:	681a      	ldr	r2, [r3, #0]
  401e0c:	f042 0201 	orr.w	r2, r2, #1
  401e10:	601a      	str	r2, [r3, #0]

	//set fixed peripheral select(peripheral chosen in SP_MR.PCS instead of SPI_THR.PCS)
	REG_SPI_MR &= ~SPI_MR_PS;
  401e12:	681a      	ldr	r2, [r3, #0]
  401e14:	f022 0202 	bic.w	r2, r2, #2
  401e18:	601a      	str	r2, [r3, #0]
	//REG_SPI_MR |= SPI_MR_PCS(0b1110);

	//set polarity and clock phase to rising edge sample, falling edge shift
	SPI_modeSelect(0);
  401e1a:	2000      	movs	r0, #0
  401e1c:	4b0e      	ldr	r3, [pc, #56]	; (401e58 <SPI_led_init+0x5c>)
  401e1e:	4798      	blx	r3

	//set clock generator (1 = peripheral clock rate), otherwise a divisor
	//SCBR = fperipheral clock / SPCK Bit Rate
	REG_SPI_CSR |= SPI_CSR_SCBR(5);
  401e20:	4a0e      	ldr	r2, [pc, #56]	; (401e5c <SPI_led_init+0x60>)
  401e22:	6813      	ldr	r3, [r2, #0]
  401e24:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
  401e28:	6013      	str	r3, [r2, #0]

	//chip select remains low after transfer
	//REG_SPI_CSR |= SPI_CSR_CSNAAT;

	//give peripheral control of pins 
	REG_PIOA_PDR |= PIO_PDR_P11; //NPCS0
  401e2a:	4b0d      	ldr	r3, [pc, #52]	; (401e60 <SPI_led_init+0x64>)
  401e2c:	681a      	ldr	r2, [r3, #0]
  401e2e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
  401e32:	601a      	str	r2, [r3, #0]
	REG_PIOA_PDR |= PIO_PDR_P13; //MOSI
  401e34:	681a      	ldr	r2, [r3, #0]
  401e36:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  401e3a:	601a      	str	r2, [r3, #0]
	REG_PIOA_PDR |= PIO_PDR_P14; //SSCK
  401e3c:	681a      	ldr	r2, [r3, #0]
  401e3e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
  401e42:	601a      	str	r2, [r3, #0]

	//enable SPI
	REG_SPI_CR |= SPI_CR_SPIEN;
  401e44:	4a07      	ldr	r2, [pc, #28]	; (401e64 <SPI_led_init+0x68>)
  401e46:	6813      	ldr	r3, [r2, #0]
  401e48:	f043 0301 	orr.w	r3, r3, #1
  401e4c:	6013      	str	r3, [r2, #0]
  401e4e:	bd08      	pop	{r3, pc}
  401e50:	400e0410 	.word	0x400e0410
  401e54:	40008004 	.word	0x40008004
  401e58:	00401d99 	.word	0x00401d99
  401e5c:	40008030 	.word	0x40008030
  401e60:	400e0e04 	.word	0x400e0e04
  401e64:	40008000 	.word	0x40008000

00401e68 <SPI_dac_init>:


}

void SPI_dac_init(){
  401e68:	b508      	push	{r3, lr}

	REG_PIOB_PER |= PIO_PER_P13; //enable PIO controller on PB14
  401e6a:	4a1c      	ldr	r2, [pc, #112]	; (401edc <SPI_dac_init+0x74>)
  401e6c:	6813      	ldr	r3, [r2, #0]
  401e6e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  401e72:	6013      	str	r3, [r2, #0]
	REG_PIOB_OER |= PIO_PER_P13; //enable output on pin PB14
  401e74:	3210      	adds	r2, #16
  401e76:	6813      	ldr	r3, [r2, #0]
  401e78:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  401e7c:	6013      	str	r3, [r2, #0]
	REG_PIOB_SODR |=  PIO_PER_P13;
  401e7e:	3220      	adds	r2, #32
  401e80:	6813      	ldr	r3, [r2, #0]
  401e82:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  401e86:	6013      	str	r3, [r2, #0]

	//enable peripheral clock
	REG_PMC_PCER0 |= PMC_PCER0_PID21;
  401e88:	f5a2 6242 	sub.w	r2, r2, #3104	; 0xc20
  401e8c:	6813      	ldr	r3, [r2, #0]
  401e8e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
  401e92:	6013      	str	r3, [r2, #0]

	//set spi master mode
	REG_SPI_MR |= SPI_MR_MSTR;
  401e94:	4b12      	ldr	r3, [pc, #72]	; (401ee0 <SPI_dac_init+0x78>)
  401e96:	681a      	ldr	r2, [r3, #0]
  401e98:	f042 0201 	orr.w	r2, r2, #1
  401e9c:	601a      	str	r2, [r3, #0]

	//set fixed peripheral select(peripheral chosen in SP_MR.PCS instead of SPI_THR.PCS)
	REG_SPI_MR &= ~SPI_MR_PS;
  401e9e:	681a      	ldr	r2, [r3, #0]
  401ea0:	f022 0202 	bic.w	r2, r2, #2
  401ea4:	601a      	str	r2, [r3, #0]
	//REG_SPI_MR |= SPI_MR_PCS(0b1101);

	//set polarity and clock phase to rising edge sample, falling edge shift
	SPI_modeSelect(0);
  401ea6:	2000      	movs	r0, #0
  401ea8:	4b0e      	ldr	r3, [pc, #56]	; (401ee4 <SPI_dac_init+0x7c>)
  401eaa:	4798      	blx	r3

	//set clock generator (1 = peripheral clock rate), otherwise a divisor
	//SCBR = fperipheral clock / SPCK Bit Rate
	REG_SPI_CSR |= SPI_CSR_SCBR(20);
  401eac:	4a0e      	ldr	r2, [pc, #56]	; (401ee8 <SPI_dac_init+0x80>)
  401eae:	6813      	ldr	r3, [r2, #0]
  401eb0:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
  401eb4:	6013      	str	r3, [r2, #0]

	//chip select remains low after transfer
	//REG_SPI_CSR |= SPI_CSR_CSNAAT;

	//give peripheral control of pins
	REG_PIOA_PDR |= PIO_PDR_P11; //NPCS1
  401eb6:	4b0d      	ldr	r3, [pc, #52]	; (401eec <SPI_dac_init+0x84>)
  401eb8:	681a      	ldr	r2, [r3, #0]
  401eba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
  401ebe:	601a      	str	r2, [r3, #0]
	REG_PIOA_PDR |= PIO_PDR_P13; //MOSI
  401ec0:	681a      	ldr	r2, [r3, #0]
  401ec2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  401ec6:	601a      	str	r2, [r3, #0]
	REG_PIOA_PDR |= PIO_PDR_P14; //SSCK
  401ec8:	681a      	ldr	r2, [r3, #0]
  401eca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
  401ece:	601a      	str	r2, [r3, #0]

	//enable SPI
	REG_SPI_CR |= SPI_CR_SPIEN;
  401ed0:	4a07      	ldr	r2, [pc, #28]	; (401ef0 <SPI_dac_init+0x88>)
  401ed2:	6813      	ldr	r3, [r2, #0]
  401ed4:	f043 0301 	orr.w	r3, r3, #1
  401ed8:	6013      	str	r3, [r2, #0]
  401eda:	bd08      	pop	{r3, pc}
  401edc:	400e1000 	.word	0x400e1000
  401ee0:	40008004 	.word	0x40008004
  401ee4:	00401d99 	.word	0x00401d99
  401ee8:	40008030 	.word	0x40008030
  401eec:	400e0e04 	.word	0x400e0e04
  401ef0:	40008000 	.word	0x40008000

00401ef4 <SPI_byteSend>:

}

void SPI_byteSend(uint8_t data){
	//wait for transmit register to be empty
	while (!(REG_SPI_SR & SPI_SR_TDRE));
  401ef4:	4a04      	ldr	r2, [pc, #16]	; (401f08 <SPI_byteSend+0x14>)
  401ef6:	6813      	ldr	r3, [r2, #0]
  401ef8:	f013 0f02 	tst.w	r3, #2
  401efc:	d0fb      	beq.n	401ef6 <SPI_byteSend+0x2>
	//send data to transmit register
	REG_SPI_TDR |= (data);
  401efe:	4a03      	ldr	r2, [pc, #12]	; (401f0c <SPI_byteSend+0x18>)
  401f00:	6813      	ldr	r3, [r2, #0]
  401f02:	4318      	orrs	r0, r3
  401f04:	6010      	str	r0, [r2, #0]
  401f06:	4770      	bx	lr
  401f08:	40008010 	.word	0x40008010
  401f0c:	4000800c 	.word	0x4000800c

00401f10 <notes_get>:
int patterns[16][16][16][2] = {};



float notes_get(uint8_t curr_step){
	int lookup_index = patterns[curr_pattern][curr_page][curr_step][0];
  401f10:	4b07      	ldr	r3, [pc, #28]	; (401f30 <notes_get+0x20>)
  401f12:	781a      	ldrb	r2, [r3, #0]
  401f14:	4b07      	ldr	r3, [pc, #28]	; (401f34 <notes_get+0x24>)
  401f16:	781b      	ldrb	r3, [r3, #0]
  401f18:	eb03 1302 	add.w	r3, r3, r2, lsl #4
  401f1c:	eb00 1003 	add.w	r0, r0, r3, lsl #4
	return notes_lookup[lookup_index];
  401f20:	4b05      	ldr	r3, [pc, #20]	; (401f38 <notes_get+0x28>)
  401f22:	f853 2030 	ldr.w	r2, [r3, r0, lsl #3]
}
  401f26:	4b05      	ldr	r3, [pc, #20]	; (401f3c <notes_get+0x2c>)
  401f28:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
  401f2c:	4770      	bx	lr
  401f2e:	bf00      	nop
  401f30:	200086e4 	.word	0x200086e4
  401f34:	200086f4 	.word	0x200086f4
  401f38:	200006dc 	.word	0x200006dc
  401f3c:	2000000c 	.word	0x2000000c

00401f40 <notes_status_get>:

int notes_status_get(uint8_t curr_step){
	return patterns[curr_pattern][curr_page][curr_step][1];
  401f40:	4b06      	ldr	r3, [pc, #24]	; (401f5c <notes_status_get+0x1c>)
  401f42:	781a      	ldrb	r2, [r3, #0]
  401f44:	4b06      	ldr	r3, [pc, #24]	; (401f60 <notes_status_get+0x20>)
  401f46:	781b      	ldrb	r3, [r3, #0]
  401f48:	eb03 1302 	add.w	r3, r3, r2, lsl #4
  401f4c:	eb00 1003 	add.w	r0, r0, r3, lsl #4
  401f50:	4b04      	ldr	r3, [pc, #16]	; (401f64 <notes_status_get+0x24>)
  401f52:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
}
  401f56:	6840      	ldr	r0, [r0, #4]
  401f58:	4770      	bx	lr
  401f5a:	bf00      	nop
  401f5c:	200086e4 	.word	0x200086e4
  401f60:	200086f4 	.word	0x200086f4
  401f64:	200006dc 	.word	0x200006dc

00401f68 <notes_display_get>:

int notes_display_get(uint8_t display_page, uint8_t step){
	return patterns[curr_pattern][display_page][step][1];
  401f68:	4b05      	ldr	r3, [pc, #20]	; (401f80 <notes_display_get+0x18>)
  401f6a:	781b      	ldrb	r3, [r3, #0]
  401f6c:	eb00 1003 	add.w	r0, r0, r3, lsl #4
  401f70:	eb01 1000 	add.w	r0, r1, r0, lsl #4
  401f74:	4903      	ldr	r1, [pc, #12]	; (401f84 <notes_display_get+0x1c>)
  401f76:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
}
  401f7a:	6840      	ldr	r0, [r0, #4]
  401f7c:	4770      	bx	lr
  401f7e:	bf00      	nop
  401f80:	200086e4 	.word	0x200086e4
  401f84:	200006dc 	.word	0x200006dc

00401f88 <notes_status_set>:

void notes_status_set(uint8_t display_page, int leds_status[]){

	/* match notes status to current display page status */
	for (int i = 0; i < 16; i++){
		patterns[curr_pattern][display_page][i][1] = leds_status[i];
  401f88:	4b07      	ldr	r3, [pc, #28]	; (401fa8 <notes_status_set+0x20>)
  401f8a:	781b      	ldrb	r3, [r3, #0]
  401f8c:	1f0a      	subs	r2, r1, #4
  401f8e:	eb00 1003 	add.w	r0, r0, r3, lsl #4
  401f92:	4b06      	ldr	r3, [pc, #24]	; (401fac <notes_status_set+0x24>)
  401f94:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
  401f98:	313c      	adds	r1, #60	; 0x3c
  401f9a:	f852 3f04 	ldr.w	r3, [r2, #4]!
  401f9e:	6043      	str	r3, [r0, #4]
  401fa0:	3008      	adds	r0, #8
}

void notes_status_set(uint8_t display_page, int leds_status[]){

	/* match notes status to current display page status */
	for (int i = 0; i < 16; i++){
  401fa2:	428a      	cmp	r2, r1
  401fa4:	d1f9      	bne.n	401f9a <notes_status_set+0x12>
		patterns[curr_pattern][display_page][i][1] = leds_status[i];
	}

}
  401fa6:	4770      	bx	lr
  401fa8:	200086e4 	.word	0x200086e4
  401fac:	200006dc 	.word	0x200006dc

00401fb0 <notes_inc>:


void notes_inc(uint8_t step){
  401fb0:	b410      	push	{r4}
	if (patterns[curr_pattern][display_page][step][0] < 120){
  401fb2:	4b0b      	ldr	r3, [pc, #44]	; (401fe0 <notes_inc+0x30>)
  401fb4:	7819      	ldrb	r1, [r3, #0]
  401fb6:	4b0b      	ldr	r3, [pc, #44]	; (401fe4 <notes_inc+0x34>)
  401fb8:	781a      	ldrb	r2, [r3, #0]
  401fba:	eb02 1301 	add.w	r3, r2, r1, lsl #4
  401fbe:	eb00 1303 	add.w	r3, r0, r3, lsl #4
  401fc2:	4c09      	ldr	r4, [pc, #36]	; (401fe8 <notes_inc+0x38>)
  401fc4:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
  401fc8:	2b77      	cmp	r3, #119	; 0x77
  401fca:	dc06      	bgt.n	401fda <notes_inc+0x2a>
		patterns[curr_pattern][display_page][step][0]++;
  401fcc:	eb02 1201 	add.w	r2, r2, r1, lsl #4
  401fd0:	eb00 1002 	add.w	r0, r0, r2, lsl #4
  401fd4:	3301      	adds	r3, #1
  401fd6:	f844 3030 	str.w	r3, [r4, r0, lsl #3]
	}
}
  401fda:	bc10      	pop	{r4}
  401fdc:	4770      	bx	lr
  401fde:	bf00      	nop
  401fe0:	200086e4 	.word	0x200086e4
  401fe4:	200086f1 	.word	0x200086f1
  401fe8:	200006dc 	.word	0x200006dc

00401fec <notes_dec>:

void notes_dec(uint8_t step){
  401fec:	b410      	push	{r4}
	if (patterns[curr_pattern][display_page][step][0] > 0){
  401fee:	4b0b      	ldr	r3, [pc, #44]	; (40201c <notes_dec+0x30>)
  401ff0:	7819      	ldrb	r1, [r3, #0]
  401ff2:	4b0b      	ldr	r3, [pc, #44]	; (402020 <notes_dec+0x34>)
  401ff4:	781a      	ldrb	r2, [r3, #0]
  401ff6:	eb02 1301 	add.w	r3, r2, r1, lsl #4
  401ffa:	eb00 1303 	add.w	r3, r0, r3, lsl #4
  401ffe:	4c09      	ldr	r4, [pc, #36]	; (402024 <notes_dec+0x38>)
  402000:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
  402004:	2b00      	cmp	r3, #0
  402006:	dd06      	ble.n	402016 <notes_dec+0x2a>
		patterns[curr_pattern][display_page][step][0]--;
  402008:	eb02 1201 	add.w	r2, r2, r1, lsl #4
  40200c:	eb00 1002 	add.w	r0, r0, r2, lsl #4
  402010:	3b01      	subs	r3, #1
  402012:	f844 3030 	str.w	r3, [r4, r0, lsl #3]
	}
}
  402016:	bc10      	pop	{r4}
  402018:	4770      	bx	lr
  40201a:	bf00      	nop
  40201c:	200086e4 	.word	0x200086e4
  402020:	200086f1 	.word	0x200086f1
  402024:	200006dc 	.word	0x200006dc

00402028 <timers_init>:
 #include "sequencer.h"
 #include "adc.h"

 void timers_init(void) {

	overflow_count = 0;
  402028:	2300      	movs	r3, #0
  40202a:	4a18      	ldr	r2, [pc, #96]	; (40208c <timers_init+0x64>)
  40202c:	8013      	strh	r3, [r2, #0]
	curr_step = 0;
  40202e:	4a18      	ldr	r2, [pc, #96]	; (402090 <timers_init+0x68>)
  402030:	7013      	strb	r3, [r2, #0]
	curr_page = 0;
  402032:	4a18      	ldr	r2, [pc, #96]	; (402094 <timers_init+0x6c>)
  402034:	7013      	strb	r3, [r2, #0]
	curr_pattern = 0;
  402036:	4a18      	ldr	r2, [pc, #96]	; (402098 <timers_init+0x70>)
  402038:	7013      	strb	r3, [r2, #0]

	display_page = 0;
  40203a:	4a18      	ldr	r2, [pc, #96]	; (40209c <timers_init+0x74>)
  40203c:	7013      	strb	r3, [r2, #0]
	page_loop = 0;
  40203e:	4a18      	ldr	r2, [pc, #96]	; (4020a0 <timers_init+0x78>)
  402040:	7013      	strb	r3, [r2, #0]
	resolution = 2;
  402042:	2202      	movs	r2, #2
  402044:	4b17      	ldr	r3, [pc, #92]	; (4020a4 <timers_init+0x7c>)
  402046:	601a      	str	r2, [r3, #0]
  402048:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  40204c:	4b16      	ldr	r3, [pc, #88]	; (4020a8 <timers_init+0x80>)
  40204e:	601a      	str	r2, [r3, #0]

	NVIC_EnableIRQ(TC0_IRQn);

	// Enable peripheral clock for TC0
	// Peripheral ID (PID) for TC0 is 23
	REG_PMC_PCER0 |= PMC_PCER0_PID23;
  402050:	4a16      	ldr	r2, [pc, #88]	; (4020ac <timers_init+0x84>)
  402052:	6813      	ldr	r3, [r2, #0]
  402054:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
  402058:	6013      	str	r3, [r2, #0]
	// TIMER_CLOCK1 = MCK/2
	// TIMER_CLOCK2 = MCK/8
	// TIMER_CLOCK3 = MCK/32
	// TIMER_CLOCK4 = MCK/128
	// TIMER_CLOCK5 = SCLK
	REG_TC0_CMR0 |= TC_CMR_TCCLKS_TIMER_CLOCK2 | TC_CMR_CPCTRG;
  40205a:	f5a2 2250 	sub.w	r2, r2, #851968	; 0xd0000
  40205e:	f2a2 420c 	subw	r2, r2, #1036	; 0x40c
  402062:	6813      	ldr	r3, [r2, #0]
  402064:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  402068:	f043 0301 	orr.w	r3, r3, #1
  40206c:	6013      	str	r3, [r2, #0]
	// Set interrupt on compare to RC value
	REG_TC0_IER0 |= TC_IER_CPCS;
  40206e:	3220      	adds	r2, #32
  402070:	6813      	ldr	r3, [r2, #0]
  402072:	f043 0310 	orr.w	r3, r3, #16
  402076:	6013      	str	r3, [r2, #0]
// 	// 60 BPM = 1 Hz. SCK = 32 KHz. 16,000 counts per half second, 2 interrupts per cycle
// 	REG_TC0_RC0 = 16000;

	// 60 BPM = 1 Hz. MCK/8 = 12.5 MHz. 6.25 mil counts per half second, 2 interrupts per cycle
	// Anticipating 5000 overflows (5000*1250 is 6.25 mil)
	REG_TC0_RC0 = 1250;
  402078:	f240 42e2 	movw	r2, #1250	; 0x4e2
  40207c:	4b0c      	ldr	r3, [pc, #48]	; (4020b0 <timers_init+0x88>)
  40207e:	601a      	str	r2, [r3, #0]
// 	REG_PIOA_PER |= PIO_PER_P20; //enable PIO controller on PA11
// 	REG_PIOA_OER |= PIO_PER_P20; //enable output on pin PA11
	/*REG_PMC_PCER0 |= PMC_PCER0_PID11; //Enable PMC control for PA11*/

	// TC0 control register enables timer and triggers it to start
	REG_TC0_CCR0 |= TC_CCR_CLKEN | TC_CCR_SWTRG;
  402080:	4a0c      	ldr	r2, [pc, #48]	; (4020b4 <timers_init+0x8c>)
  402082:	6813      	ldr	r3, [r2, #0]
  402084:	f043 0305 	orr.w	r3, r3, #5
  402088:	6013      	str	r3, [r2, #0]
  40208a:	4770      	bx	lr
  40208c:	200086ee 	.word	0x200086ee
  402090:	200086f0 	.word	0x200086f0
  402094:	200086f4 	.word	0x200086f4
  402098:	200086e4 	.word	0x200086e4
  40209c:	200086f1 	.word	0x200086f1
  4020a0:	200086ec 	.word	0x200086ec
  4020a4:	200086e8 	.word	0x200086e8
  4020a8:	e000e100 	.word	0xe000e100
  4020ac:	400e0410 	.word	0x400e0410
  4020b0:	4001001c 	.word	0x4001001c
  4020b4:	40010000 	.word	0x40010000

004020b8 <update_timers>:

 void update_timers(int bpm) {
// 	// (SCK/2) / (bpm/60); SCK*60/2 = 960000
// 	// Offset is needed, possible not with the crystals working
// 	REG_TC0_RC0 = (uint16_t)(960000/bpm - 420);
	if(bpm > 1) {
  4020b8:	2801      	cmp	r0, #1
  4020ba:	dd05      	ble.n	4020c8 <update_timers+0x10>
		REG_TC0_RC0 = (uint16_t)(75000/bpm);
  4020bc:	4b03      	ldr	r3, [pc, #12]	; (4020cc <update_timers+0x14>)
  4020be:	fb93 f0f0 	sdiv	r0, r3, r0
  4020c2:	b280      	uxth	r0, r0
  4020c4:	4b02      	ldr	r3, [pc, #8]	; (4020d0 <update_timers+0x18>)
  4020c6:	6018      	str	r0, [r3, #0]
  4020c8:	4770      	bx	lr
  4020ca:	bf00      	nop
  4020cc:	000124f8 	.word	0x000124f8
  4020d0:	4001001c 	.word	0x4001001c

004020d4 <TC0_Handler>:
	}
 }

 void TC0_Handler() {
  4020d4:	b510      	push	{r4, lr}
	 // Handling timer = RC

	 // Test code, normally trigger next step, output clock
	 if((REG_TC0_SR0 & TC_SR_CPCS) >= 0) {
  4020d6:	4b23      	ldr	r3, [pc, #140]	; (402164 <TC0_Handler+0x90>)
  4020d8:	681b      	ldr	r3, [r3, #0]

		overflow_count += 1;
  4020da:	4a23      	ldr	r2, [pc, #140]	; (402168 <TC0_Handler+0x94>)
  4020dc:	8813      	ldrh	r3, [r2, #0]
  4020de:	3301      	adds	r3, #1
  4020e0:	b29b      	uxth	r3, r3
  4020e2:	8013      	strh	r3, [r2, #0]

		//base this off a ADC pot results
		if (overflow_count == note_length){
  4020e4:	4a21      	ldr	r2, [pc, #132]	; (40216c <TC0_Handler+0x98>)
  4020e6:	8812      	ldrh	r2, [r2, #0]
  4020e8:	429a      	cmp	r2, r3
  4020ea:	d101      	bne.n	4020f0 <TC0_Handler+0x1c>
			DAC_write_gate_off();
  4020ec:	4b20      	ldr	r3, [pc, #128]	; (402170 <TC0_Handler+0x9c>)
  4020ee:	4798      	blx	r3
		}
 }

	 if(overflow_count >= 10000) {
  4020f0:	4b1d      	ldr	r3, [pc, #116]	; (402168 <TC0_Handler+0x94>)
  4020f2:	881a      	ldrh	r2, [r3, #0]
  4020f4:	f242 730f 	movw	r3, #9999	; 0x270f
  4020f8:	429a      	cmp	r2, r3
  4020fa:	d931      	bls.n	402160 <TC0_Handler+0x8c>

		 if (curr_step == 15){
  4020fc:	4b1d      	ldr	r3, [pc, #116]	; (402174 <TC0_Handler+0xa0>)
  4020fe:	781b      	ldrb	r3, [r3, #0]
  402100:	2b0f      	cmp	r3, #15
  402102:	d110      	bne.n	402126 <TC0_Handler+0x52>
			 //increment to next page or go back to first page
			 if (curr_page < page_loop){
  402104:	4b1c      	ldr	r3, [pc, #112]	; (402178 <TC0_Handler+0xa4>)
  402106:	781b      	ldrb	r3, [r3, #0]
  402108:	4a1c      	ldr	r2, [pc, #112]	; (40217c <TC0_Handler+0xa8>)
  40210a:	7812      	ldrb	r2, [r2, #0]
  40210c:	429a      	cmp	r2, r3
  40210e:	d903      	bls.n	402118 <TC0_Handler+0x44>
				 curr_page++;
  402110:	3301      	adds	r3, #1
  402112:	4a19      	ldr	r2, [pc, #100]	; (402178 <TC0_Handler+0xa4>)
  402114:	7013      	strb	r3, [r2, #0]
  402116:	e002      	b.n	40211e <TC0_Handler+0x4a>
			 }
			 else{
				 curr_page = 0;
  402118:	2200      	movs	r2, #0
  40211a:	4b17      	ldr	r3, [pc, #92]	; (402178 <TC0_Handler+0xa4>)
  40211c:	701a      	strb	r2, [r3, #0]
			 }

			 //return to first step on next page
			 curr_step = 0;
  40211e:	2200      	movs	r2, #0
  402120:	4b14      	ldr	r3, [pc, #80]	; (402174 <TC0_Handler+0xa0>)
  402122:	701a      	strb	r2, [r3, #0]
  402124:	e002      	b.n	40212c <TC0_Handler+0x58>
		 }
		 else{
			 curr_step++;
  402126:	3301      	adds	r3, #1
  402128:	4a12      	ldr	r2, [pc, #72]	; (402174 <TC0_Handler+0xa0>)
  40212a:	7013      	strb	r3, [r2, #0]
		 }

		 SPI_led_init();
  40212c:	4b14      	ldr	r3, [pc, #80]	; (402180 <TC0_Handler+0xac>)
  40212e:	4798      	blx	r3
		 leds_update_cursor(curr_step);
  402130:	4c10      	ldr	r4, [pc, #64]	; (402174 <TC0_Handler+0xa0>)
  402132:	7820      	ldrb	r0, [r4, #0]
  402134:	4b13      	ldr	r3, [pc, #76]	; (402184 <TC0_Handler+0xb0>)
  402136:	4798      	blx	r3

		 DAC_write_cv(notes_get(curr_step));
  402138:	7820      	ldrb	r0, [r4, #0]
  40213a:	4b13      	ldr	r3, [pc, #76]	; (402188 <TC0_Handler+0xb4>)
  40213c:	4798      	blx	r3
  40213e:	4b13      	ldr	r3, [pc, #76]	; (40218c <TC0_Handler+0xb8>)
  402140:	4798      	blx	r3
		 if (notes_status_get(curr_step) == 1){
  402142:	7820      	ldrb	r0, [r4, #0]
  402144:	4b12      	ldr	r3, [pc, #72]	; (402190 <TC0_Handler+0xbc>)
  402146:	4798      	blx	r3
  402148:	2801      	cmp	r0, #1
  40214a:	d101      	bne.n	402150 <TC0_Handler+0x7c>
			 DAC_write_gate_on();
  40214c:	4b11      	ldr	r3, [pc, #68]	; (402194 <TC0_Handler+0xc0>)
  40214e:	4798      	blx	r3
		 }

		 REG_ADC_CR |= ADC_CR_START;
  402150:	4a11      	ldr	r2, [pc, #68]	; (402198 <TC0_Handler+0xc4>)
  402152:	6813      	ldr	r3, [r2, #0]
  402154:	f043 0302 	orr.w	r3, r3, #2
  402158:	6013      	str	r3, [r2, #0]

		 overflow_count =0;
  40215a:	2200      	movs	r2, #0
  40215c:	4b02      	ldr	r3, [pc, #8]	; (402168 <TC0_Handler+0x94>)
  40215e:	801a      	strh	r2, [r3, #0]
  402160:	bd10      	pop	{r4, pc}
  402162:	bf00      	nop
  402164:	40010020 	.word	0x40010020
  402168:	200086ee 	.word	0x200086ee
  40216c:	200086f2 	.word	0x200086f2
  402170:	00400401 	.word	0x00400401
  402174:	200086f0 	.word	0x200086f0
  402178:	200086f4 	.word	0x200086f4
  40217c:	200086ec 	.word	0x200086ec
  402180:	00401dfd 	.word	0x00401dfd
  402184:	00401285 	.word	0x00401285
  402188:	00401f11 	.word	0x00401f11
  40218c:	00400329 	.word	0x00400329
  402190:	00401f41 	.word	0x00401f41
  402194:	004003a5 	.word	0x004003a5
  402198:	40038000 	.word	0x40038000

0040219c <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
  40219c:	4770      	bx	lr
  40219e:	bf00      	nop

004021a0 <sysclk_init>:

	SystemCoreClockUpdate();
}

void sysclk_init(void)
{
  4021a0:	b510      	push	{r4, lr}
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  4021a2:	480e      	ldr	r0, [pc, #56]	; (4021dc <sysclk_init+0x3c>)
  4021a4:	4b0e      	ldr	r3, [pc, #56]	; (4021e0 <sysclk_init+0x40>)
  4021a6:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
		break;

	case OSC_MAINCK_8M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
  4021a8:	2010      	movs	r0, #16
  4021aa:	4b0e      	ldr	r3, [pc, #56]	; (4021e4 <sysclk_init+0x44>)
  4021ac:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  4021ae:	4c0e      	ldr	r4, [pc, #56]	; (4021e8 <sysclk_init+0x48>)
  4021b0:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  4021b2:	2800      	cmp	r0, #0
  4021b4:	d0fc      	beq.n	4021b0 <sysclk_init+0x10>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  4021b6:	4b0d      	ldr	r3, [pc, #52]	; (4021ec <sysclk_init+0x4c>)
  4021b8:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  4021ba:	4a0d      	ldr	r2, [pc, #52]	; (4021f0 <sysclk_init+0x50>)
  4021bc:	4b0d      	ldr	r3, [pc, #52]	; (4021f4 <sysclk_init+0x54>)
  4021be:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
  4021c0:	4c0d      	ldr	r4, [pc, #52]	; (4021f8 <sysclk_init+0x58>)
  4021c2:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  4021c4:	2800      	cmp	r0, #0
  4021c6:	d0fc      	beq.n	4021c2 <sysclk_init+0x22>

		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  4021c8:	2010      	movs	r0, #16
  4021ca:	4b0c      	ldr	r3, [pc, #48]	; (4021fc <sysclk_init+0x5c>)
  4021cc:	4798      	blx	r3
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  4021ce:	4b0c      	ldr	r3, [pc, #48]	; (402200 <sysclk_init+0x60>)
  4021d0:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  4021d2:	4802      	ldr	r0, [pc, #8]	; (4021dc <sysclk_init+0x3c>)
  4021d4:	4b02      	ldr	r3, [pc, #8]	; (4021e0 <sysclk_init+0x40>)
  4021d6:	4798      	blx	r3
  4021d8:	bd10      	pop	{r4, pc}
  4021da:	bf00      	nop
  4021dc:	05f5e100 	.word	0x05f5e100
  4021e0:	00402495 	.word	0x00402495
  4021e4:	0040226d 	.word	0x0040226d
  4021e8:	004022b9 	.word	0x004022b9
  4021ec:	004022c9 	.word	0x004022c9
  4021f0:	20183f01 	.word	0x20183f01
  4021f4:	400e0400 	.word	0x400e0400
  4021f8:	004022d9 	.word	0x004022d9
  4021fc:	00402205 	.word	0x00402205
  402200:	00402385 	.word	0x00402385

00402204 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  402204:	4a18      	ldr	r2, [pc, #96]	; (402268 <pmc_switch_mck_to_pllack+0x64>)
  402206:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402208:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  40220c:	4318      	orrs	r0, r3
  40220e:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  402210:	6e93      	ldr	r3, [r2, #104]	; 0x68
  402212:	f013 0f08 	tst.w	r3, #8
  402216:	d003      	beq.n	402220 <pmc_switch_mck_to_pllack+0x1c>
  402218:	e009      	b.n	40222e <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  40221a:	3b01      	subs	r3, #1
  40221c:	d103      	bne.n	402226 <pmc_switch_mck_to_pllack+0x22>
  40221e:	e01e      	b.n	40225e <pmc_switch_mck_to_pllack+0x5a>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  402220:	f44f 6300 	mov.w	r3, #2048	; 0x800
  402224:	4910      	ldr	r1, [pc, #64]	; (402268 <pmc_switch_mck_to_pllack+0x64>)
  402226:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  402228:	f012 0f08 	tst.w	r2, #8
  40222c:	d0f5      	beq.n	40221a <pmc_switch_mck_to_pllack+0x16>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  40222e:	4a0e      	ldr	r2, [pc, #56]	; (402268 <pmc_switch_mck_to_pllack+0x64>)
  402230:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402232:	f023 0303 	bic.w	r3, r3, #3
  402236:	f043 0302 	orr.w	r3, r3, #2
  40223a:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40223c:	6e90      	ldr	r0, [r2, #104]	; 0x68
  40223e:	f010 0008 	ands.w	r0, r0, #8
  402242:	d004      	beq.n	40224e <pmc_switch_mck_to_pllack+0x4a>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
  402244:	2000      	movs	r0, #0
  402246:	4770      	bx	lr
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
  402248:	3b01      	subs	r3, #1
  40224a:	d103      	bne.n	402254 <pmc_switch_mck_to_pllack+0x50>
  40224c:	e009      	b.n	402262 <pmc_switch_mck_to_pllack+0x5e>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40224e:	f44f 6300 	mov.w	r3, #2048	; 0x800
  402252:	4905      	ldr	r1, [pc, #20]	; (402268 <pmc_switch_mck_to_pllack+0x64>)
  402254:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  402256:	f012 0f08 	tst.w	r2, #8
  40225a:	d0f5      	beq.n	402248 <pmc_switch_mck_to_pllack+0x44>
  40225c:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  40225e:	2001      	movs	r0, #1
  402260:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  402262:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  402264:	4770      	bx	lr
  402266:	bf00      	nop
  402268:	400e0400 	.word	0x400e0400

0040226c <pmc_switch_mainck_to_fastrc>:
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
  40226c:	4b11      	ldr	r3, [pc, #68]	; (4022b4 <pmc_switch_mainck_to_fastrc+0x48>)
  40226e:	6a1a      	ldr	r2, [r3, #32]
  402270:	f442 125c 	orr.w	r2, r2, #3604480	; 0x370000
  402274:	f042 0208 	orr.w	r2, r2, #8
  402278:	621a      	str	r2, [r3, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  40227a:	461a      	mov	r2, r3
  40227c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40227e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
  402282:	d0fb      	beq.n	40227c <pmc_switch_mainck_to_fastrc+0x10>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  402284:	4a0b      	ldr	r2, [pc, #44]	; (4022b4 <pmc_switch_mainck_to_fastrc+0x48>)
  402286:	6a13      	ldr	r3, [r2, #32]
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
  402288:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  40228c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  402290:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  402294:	4303      	orrs	r3, r0

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  402296:	6213      	str	r3, [r2, #32]
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  402298:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40229a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
  40229e:	d0fb      	beq.n	402298 <pmc_switch_mainck_to_fastrc+0x2c>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  4022a0:	4a04      	ldr	r2, [pc, #16]	; (4022b4 <pmc_switch_mainck_to_fastrc+0x48>)
  4022a2:	6a13      	ldr	r3, [r2, #32]
  4022a4:	f023 739b 	bic.w	r3, r3, #20316160	; 0x1360000
  4022a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  4022ac:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  4022b0:	6213      	str	r3, [r2, #32]
  4022b2:	4770      	bx	lr
  4022b4:	400e0400 	.word	0x400e0400

004022b8 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  4022b8:	4b02      	ldr	r3, [pc, #8]	; (4022c4 <pmc_osc_is_ready_mainck+0xc>)
  4022ba:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4022bc:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  4022c0:	4770      	bx	lr
  4022c2:	bf00      	nop
  4022c4:	400e0400 	.word	0x400e0400

004022c8 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  4022c8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  4022cc:	4b01      	ldr	r3, [pc, #4]	; (4022d4 <pmc_disable_pllack+0xc>)
  4022ce:	629a      	str	r2, [r3, #40]	; 0x28
  4022d0:	4770      	bx	lr
  4022d2:	bf00      	nop
  4022d4:	400e0400 	.word	0x400e0400

004022d8 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  4022d8:	4b02      	ldr	r3, [pc, #8]	; (4022e4 <pmc_is_locked_pllack+0xc>)
  4022da:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4022dc:	f000 0002 	and.w	r0, r0, #2
  4022e0:	4770      	bx	lr
  4022e2:	bf00      	nop
  4022e4:	400e0400 	.word	0x400e0400

004022e8 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  4022e8:	e7fe      	b.n	4022e8 <Dummy_Handler>
  4022ea:	bf00      	nop

004022ec <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  4022ec:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
  4022ee:	4b19      	ldr	r3, [pc, #100]	; (402354 <Reset_Handler+0x68>)
  4022f0:	4a19      	ldr	r2, [pc, #100]	; (402358 <Reset_Handler+0x6c>)
  4022f2:	429a      	cmp	r2, r3
  4022f4:	d003      	beq.n	4022fe <Reset_Handler+0x12>
		for (; pDest < &_erelocate;) {
  4022f6:	4b19      	ldr	r3, [pc, #100]	; (40235c <Reset_Handler+0x70>)
  4022f8:	4a16      	ldr	r2, [pc, #88]	; (402354 <Reset_Handler+0x68>)
  4022fa:	429a      	cmp	r2, r3
  4022fc:	d304      	bcc.n	402308 <Reset_Handler+0x1c>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  4022fe:	4b18      	ldr	r3, [pc, #96]	; (402360 <Reset_Handler+0x74>)
  402300:	4a18      	ldr	r2, [pc, #96]	; (402364 <Reset_Handler+0x78>)
  402302:	429a      	cmp	r2, r3
  402304:	d30f      	bcc.n	402326 <Reset_Handler+0x3a>
  402306:	e01a      	b.n	40233e <Reset_Handler+0x52>
  402308:	4912      	ldr	r1, [pc, #72]	; (402354 <Reset_Handler+0x68>)
  40230a:	4b17      	ldr	r3, [pc, #92]	; (402368 <Reset_Handler+0x7c>)
  40230c:	1a5b      	subs	r3, r3, r1
  40230e:	f023 0303 	bic.w	r3, r3, #3
  402312:	3304      	adds	r3, #4
  402314:	4a10      	ldr	r2, [pc, #64]	; (402358 <Reset_Handler+0x6c>)
  402316:	4413      	add	r3, r2
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
			*pDest++ = *pSrc++;
  402318:	f852 0b04 	ldr.w	r0, [r2], #4
  40231c:	f841 0b04 	str.w	r0, [r1], #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
  402320:	429a      	cmp	r2, r3
  402322:	d1f9      	bne.n	402318 <Reset_Handler+0x2c>
  402324:	e7eb      	b.n	4022fe <Reset_Handler+0x12>
  402326:	4b11      	ldr	r3, [pc, #68]	; (40236c <Reset_Handler+0x80>)
  402328:	4a11      	ldr	r2, [pc, #68]	; (402370 <Reset_Handler+0x84>)
  40232a:	1ad2      	subs	r2, r2, r3
  40232c:	f022 0203 	bic.w	r2, r2, #3
  402330:	441a      	add	r2, r3
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  402332:	3b04      	subs	r3, #4
		*pDest++ = 0;
  402334:	2100      	movs	r1, #0
  402336:	f843 1b04 	str.w	r1, [r3], #4
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  40233a:	4293      	cmp	r3, r2
  40233c:	d1fb      	bne.n	402336 <Reset_Handler+0x4a>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  40233e:	4a0d      	ldr	r2, [pc, #52]	; (402374 <Reset_Handler+0x88>)
  402340:	4b0d      	ldr	r3, [pc, #52]	; (402378 <Reset_Handler+0x8c>)
  402342:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  402346:	6093      	str	r3, [r2, #8]

	/* Initialize the C library */
	__libc_init_array();
  402348:	4b0c      	ldr	r3, [pc, #48]	; (40237c <Reset_Handler+0x90>)
  40234a:	4798      	blx	r3

	/* Branch to main function */
	main();
  40234c:	4b0c      	ldr	r3, [pc, #48]	; (402380 <Reset_Handler+0x94>)
  40234e:	4798      	blx	r3
  402350:	e7fe      	b.n	402350 <Reset_Handler+0x64>
  402352:	bf00      	nop
  402354:	20000000 	.word	0x20000000
  402358:	00402df0 	.word	0x00402df0
  40235c:	20000620 	.word	0x20000620
  402360:	20008704 	.word	0x20008704
  402364:	20000620 	.word	0x20000620
  402368:	2000061f 	.word	0x2000061f
  40236c:	20000624 	.word	0x20000624
  402370:	20008707 	.word	0x20008707
  402374:	e000ed00 	.word	0xe000ed00
  402378:	00400000 	.word	0x00400000
  40237c:	00402c81 	.word	0x00402c81
  402380:	00402675 	.word	0x00402675

00402384 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) {
  402384:	4b3c      	ldr	r3, [pc, #240]	; (402478 <SystemCoreClockUpdate+0xf4>)
  402386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402388:	f003 0303 	and.w	r3, r3, #3
  40238c:	2b01      	cmp	r3, #1
  40238e:	d00f      	beq.n	4023b0 <SystemCoreClockUpdate+0x2c>
  402390:	b113      	cbz	r3, 402398 <SystemCoreClockUpdate+0x14>
  402392:	2b02      	cmp	r3, #2
  402394:	d029      	beq.n	4023ea <SystemCoreClockUpdate+0x66>
  402396:	e057      	b.n	402448 <SystemCoreClockUpdate+0xc4>
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
  402398:	4b38      	ldr	r3, [pc, #224]	; (40247c <SystemCoreClockUpdate+0xf8>)
  40239a:	695b      	ldr	r3, [r3, #20]
  40239c:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
  4023a0:	bf14      	ite	ne
  4023a2:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
  4023a6:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  4023aa:	4b35      	ldr	r3, [pc, #212]	; (402480 <SystemCoreClockUpdate+0xfc>)
  4023ac:	601a      	str	r2, [r3, #0]
  4023ae:	e04b      	b.n	402448 <SystemCoreClockUpdate+0xc4>
		}
		break;

	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
  4023b0:	4b31      	ldr	r3, [pc, #196]	; (402478 <SystemCoreClockUpdate+0xf4>)
  4023b2:	6a1b      	ldr	r3, [r3, #32]
  4023b4:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4023b8:	d003      	beq.n	4023c2 <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
  4023ba:	4a32      	ldr	r2, [pc, #200]	; (402484 <SystemCoreClockUpdate+0x100>)
  4023bc:	4b30      	ldr	r3, [pc, #192]	; (402480 <SystemCoreClockUpdate+0xfc>)
  4023be:	601a      	str	r2, [r3, #0]
  4023c0:	e042      	b.n	402448 <SystemCoreClockUpdate+0xc4>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4023c2:	4a31      	ldr	r2, [pc, #196]	; (402488 <SystemCoreClockUpdate+0x104>)
  4023c4:	4b2e      	ldr	r3, [pc, #184]	; (402480 <SystemCoreClockUpdate+0xfc>)
  4023c6:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
  4023c8:	4b2b      	ldr	r3, [pc, #172]	; (402478 <SystemCoreClockUpdate+0xf4>)
  4023ca:	6a1b      	ldr	r3, [r3, #32]
  4023cc:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4023d0:	2b10      	cmp	r3, #16
  4023d2:	d002      	beq.n	4023da <SystemCoreClockUpdate+0x56>
  4023d4:	2b20      	cmp	r3, #32
  4023d6:	d004      	beq.n	4023e2 <SystemCoreClockUpdate+0x5e>
  4023d8:	e036      	b.n	402448 <SystemCoreClockUpdate+0xc4>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;

			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
  4023da:	4a2c      	ldr	r2, [pc, #176]	; (40248c <SystemCoreClockUpdate+0x108>)
  4023dc:	4b28      	ldr	r3, [pc, #160]	; (402480 <SystemCoreClockUpdate+0xfc>)
  4023de:	601a      	str	r2, [r3, #0]
				break;
  4023e0:	e032      	b.n	402448 <SystemCoreClockUpdate+0xc4>

			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
  4023e2:	4a28      	ldr	r2, [pc, #160]	; (402484 <SystemCoreClockUpdate+0x100>)
  4023e4:	4b26      	ldr	r3, [pc, #152]	; (402480 <SystemCoreClockUpdate+0xfc>)
  4023e6:	601a      	str	r2, [r3, #0]
				break;
  4023e8:	e02e      	b.n	402448 <SystemCoreClockUpdate+0xc4>
			}
		}
		break;

	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
  4023ea:	4b23      	ldr	r3, [pc, #140]	; (402478 <SystemCoreClockUpdate+0xf4>)
  4023ec:	6a1b      	ldr	r3, [r3, #32]
  4023ee:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4023f2:	d003      	beq.n	4023fc <SystemCoreClockUpdate+0x78>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
  4023f4:	4a23      	ldr	r2, [pc, #140]	; (402484 <SystemCoreClockUpdate+0x100>)
  4023f6:	4b22      	ldr	r3, [pc, #136]	; (402480 <SystemCoreClockUpdate+0xfc>)
  4023f8:	601a      	str	r2, [r3, #0]
  4023fa:	e012      	b.n	402422 <SystemCoreClockUpdate+0x9e>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4023fc:	4a22      	ldr	r2, [pc, #136]	; (402488 <SystemCoreClockUpdate+0x104>)
  4023fe:	4b20      	ldr	r3, [pc, #128]	; (402480 <SystemCoreClockUpdate+0xfc>)
  402400:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
  402402:	4b1d      	ldr	r3, [pc, #116]	; (402478 <SystemCoreClockUpdate+0xf4>)
  402404:	6a1b      	ldr	r3, [r3, #32]
  402406:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40240a:	2b10      	cmp	r3, #16
  40240c:	d002      	beq.n	402414 <SystemCoreClockUpdate+0x90>
  40240e:	2b20      	cmp	r3, #32
  402410:	d004      	beq.n	40241c <SystemCoreClockUpdate+0x98>
  402412:	e006      	b.n	402422 <SystemCoreClockUpdate+0x9e>
				/* So the 4MHz RC selection is forbidden */
				Assert(false);
				break;

			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
  402414:	4a1d      	ldr	r2, [pc, #116]	; (40248c <SystemCoreClockUpdate+0x108>)
  402416:	4b1a      	ldr	r3, [pc, #104]	; (402480 <SystemCoreClockUpdate+0xfc>)
  402418:	601a      	str	r2, [r3, #0]
				break;
  40241a:	e002      	b.n	402422 <SystemCoreClockUpdate+0x9e>

			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
  40241c:	4a19      	ldr	r2, [pc, #100]	; (402484 <SystemCoreClockUpdate+0x100>)
  40241e:	4b18      	ldr	r3, [pc, #96]	; (402480 <SystemCoreClockUpdate+0xfc>)
  402420:	601a      	str	r2, [r3, #0]
			default:
				break;
			}
		}

		if ((uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
  402422:	4b15      	ldr	r3, [pc, #84]	; (402478 <SystemCoreClockUpdate+0xf4>)
  402424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402426:	f003 0303 	and.w	r3, r3, #3
  40242a:	2b02      	cmp	r3, #2
  40242c:	d10c      	bne.n	402448 <SystemCoreClockUpdate+0xc4>
				PMC_MCKR_CSS_PLLA_CLK) {
			SystemCoreClock *=
					((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  40242e:	4a12      	ldr	r2, [pc, #72]	; (402478 <SystemCoreClockUpdate+0xf4>)
  402430:	6a93      	ldr	r3, [r2, #40]	; 0x28
					>> CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  402432:	6a92      	ldr	r2, [r2, #40]	; 0x28
  402434:	4812      	ldr	r0, [pc, #72]	; (402480 <SystemCoreClockUpdate+0xfc>)
  402436:	f3c3 410a 	ubfx	r1, r3, #16, #11
  40243a:	6803      	ldr	r3, [r0, #0]
  40243c:	fb01 3303 	mla	r3, r1, r3, r3
  402440:	b2d2      	uxtb	r2, r2
  402442:	fbb3 f3f2 	udiv	r3, r3, r2
  402446:	6003      	str	r3, [r0, #0]

	default:
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
  402448:	4b0b      	ldr	r3, [pc, #44]	; (402478 <SystemCoreClockUpdate+0xf4>)
  40244a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40244c:	f003 0370 	and.w	r3, r3, #112	; 0x70
  402450:	2b70      	cmp	r3, #112	; 0x70
  402452:	d107      	bne.n	402464 <SystemCoreClockUpdate+0xe0>
		SystemCoreClock /= 3U;
  402454:	4a0a      	ldr	r2, [pc, #40]	; (402480 <SystemCoreClockUpdate+0xfc>)
  402456:	6813      	ldr	r3, [r2, #0]
  402458:	490d      	ldr	r1, [pc, #52]	; (402490 <SystemCoreClockUpdate+0x10c>)
  40245a:	fba1 1303 	umull	r1, r3, r1, r3
  40245e:	085b      	lsrs	r3, r3, #1
  402460:	6013      	str	r3, [r2, #0]
  402462:	4770      	bx	lr
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >>
  402464:	4b04      	ldr	r3, [pc, #16]	; (402478 <SystemCoreClockUpdate+0xf4>)
  402466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402468:	4905      	ldr	r1, [pc, #20]	; (402480 <SystemCoreClockUpdate+0xfc>)
  40246a:	f3c3 1202 	ubfx	r2, r3, #4, #3
  40246e:	680b      	ldr	r3, [r1, #0]
  402470:	40d3      	lsrs	r3, r2
  402472:	600b      	str	r3, [r1, #0]
  402474:	4770      	bx	lr
  402476:	bf00      	nop
  402478:	400e0400 	.word	0x400e0400
  40247c:	400e1410 	.word	0x400e1410
  402480:	200001f4 	.word	0x200001f4
  402484:	00b71b00 	.word	0x00b71b00
  402488:	003d0900 	.word	0x003d0900
  40248c:	007a1200 	.word	0x007a1200
  402490:	aaaaaaab 	.word	0xaaaaaaab

00402494 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
  402494:	4b0f      	ldr	r3, [pc, #60]	; (4024d4 <system_init_flash+0x40>)
  402496:	4298      	cmp	r0, r3
  402498:	d804      	bhi.n	4024a4 <system_init_flash+0x10>
		EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  40249a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  40249e:	4b0e      	ldr	r3, [pc, #56]	; (4024d8 <system_init_flash+0x44>)
  4024a0:	601a      	str	r2, [r3, #0]
  4024a2:	4770      	bx	lr
	} else {
		if (ul_clk < CHIP_FREQ_FWS_1) {
  4024a4:	4b0d      	ldr	r3, [pc, #52]	; (4024dc <system_init_flash+0x48>)
  4024a6:	4298      	cmp	r0, r3
  4024a8:	d803      	bhi.n	4024b2 <system_init_flash+0x1e>
			EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  4024aa:	4a0d      	ldr	r2, [pc, #52]	; (4024e0 <system_init_flash+0x4c>)
  4024ac:	4b0a      	ldr	r3, [pc, #40]	; (4024d8 <system_init_flash+0x44>)
  4024ae:	601a      	str	r2, [r3, #0]
  4024b0:	4770      	bx	lr
		} else {
			if (ul_clk < CHIP_FREQ_FWS_2) {
  4024b2:	4b0c      	ldr	r3, [pc, #48]	; (4024e4 <system_init_flash+0x50>)
  4024b4:	4298      	cmp	r0, r3
  4024b6:	d803      	bhi.n	4024c0 <system_init_flash+0x2c>
				EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  4024b8:	4a0b      	ldr	r2, [pc, #44]	; (4024e8 <system_init_flash+0x54>)
  4024ba:	4b07      	ldr	r3, [pc, #28]	; (4024d8 <system_init_flash+0x44>)
  4024bc:	601a      	str	r2, [r3, #0]
  4024be:	4770      	bx	lr
			} else {
				if (ul_clk < CHIP_FREQ_FWS_3) {
  4024c0:	4b0a      	ldr	r3, [pc, #40]	; (4024ec <system_init_flash+0x58>)
  4024c2:	4298      	cmp	r0, r3
					EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  4024c4:	bf94      	ite	ls
  4024c6:	4a0a      	ldrls	r2, [pc, #40]	; (4024f0 <system_init_flash+0x5c>)
				} else {
					EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  4024c8:	f04f 2204 	movhi.w	r2, #67109888	; 0x4000400
  4024cc:	4b02      	ldr	r3, [pc, #8]	; (4024d8 <system_init_flash+0x44>)
  4024ce:	601a      	str	r2, [r3, #0]
  4024d0:	4770      	bx	lr
  4024d2:	bf00      	nop
  4024d4:	01312cff 	.word	0x01312cff
  4024d8:	400e0a00 	.word	0x400e0a00
  4024dc:	026259ff 	.word	0x026259ff
  4024e0:	04000100 	.word	0x04000100
  4024e4:	039386ff 	.word	0x039386ff
  4024e8:	04000200 	.word	0x04000200
  4024ec:	04c4b3ff 	.word	0x04c4b3ff
  4024f0:	04000300 	.word	0x04000300

004024f4 <init_IO_int>:
 #define MAX7314_slaveAddress (uint8_t) 0b0100000 //7bit address when AD0 = GND

 void init_IO_int(){

	//enable clock for PIOB
	REG_PMC_PCER0 |= PMC_PCER0_PID12;
  4024f4:	4a1a      	ldr	r2, [pc, #104]	; (402560 <init_IO_int+0x6c>)
  4024f6:	6813      	ldr	r3, [r2, #0]
  4024f8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  4024fc:	6013      	str	r3, [r2, #0]

	//Set up PB10 as Button IO Expander Input
	REG_PIOB_PER |= PIO_PER_P10; //enable PIO controller
  4024fe:	f502 623f 	add.w	r2, r2, #3056	; 0xbf0
  402502:	6813      	ldr	r3, [r2, #0]
  402504:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
  402508:	6013      	str	r3, [r2, #0]
	REG_PIOB_ODR |= PIO_ODR_P10; //disable output
  40250a:	3214      	adds	r2, #20
  40250c:	6813      	ldr	r3, [r2, #0]
  40250e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
  402512:	6013      	str	r3, [r2, #0]
	REG_PIOB_PPDDR |= PIO_PPDDR_P10; //disable pull-down resistor
  402514:	327c      	adds	r2, #124	; 0x7c
  402516:	6813      	ldr	r3, [r2, #0]
  402518:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
  40251c:	6013      	str	r3, [r2, #0]
	REG_PIOB_PUER |= PIO_PUER_P10;	//enable pull-up resistor
  40251e:	3a2c      	subs	r2, #44	; 0x2c
  402520:	6813      	ldr	r3, [r2, #0]
  402522:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
  402526:	6013      	str	r3, [r2, #0]
	REG_PIOB_IFSCER |= PIO_IFSCER_P10; //turn on slow clock debounce
  402528:	3220      	adds	r2, #32
  40252a:	6813      	ldr	r3, [r2, #0]
  40252c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
  402530:	6013      	str	r3, [r2, #0]
	REG_PIOB_IFER |= PIO_IFER_P10;	//start debounce filter
  402532:	3a64      	subs	r2, #100	; 0x64
  402534:	6813      	ldr	r3, [r2, #0]
  402536:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
  40253a:	6013      	str	r3, [r2, #0]

	uint32_t flag_clear = REG_PIOB_ISR;	//clear left over interrupt flags
  40253c:	4b09      	ldr	r3, [pc, #36]	; (402564 <init_IO_int+0x70>)
  40253e:	681b      	ldr	r3, [r3, #0]

	//Enable interrupts for PB10
	REG_PIOB_IER |= PIO_IER_P10;			//enable falling edge change interrupt
  402540:	3220      	adds	r2, #32
  402542:	6813      	ldr	r3, [r2, #0]
  402544:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
  402548:	6013      	str	r3, [r2, #0]
	REG_PIOB_FELLSR |= PIO_FELLSR_P10;
  40254a:	3290      	adds	r2, #144	; 0x90
  40254c:	6813      	ldr	r3, [r2, #0]
  40254e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
  402552:	6013      	str	r3, [r2, #0]
  402554:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  402558:	4b03      	ldr	r3, [pc, #12]	; (402568 <init_IO_int+0x74>)
  40255a:	601a      	str	r2, [r3, #0]
  40255c:	4770      	bx	lr
  40255e:	bf00      	nop
  402560:	400e0410 	.word	0x400e0410
  402564:	400e104c 	.word	0x400e104c
  402568:	e000e100 	.word	0xe000e100

0040256c <i2c_init>:

 }

 void i2c_init(){

	REG_TWI0_CR = TWI_CR_SWRST;
  40256c:	4b12      	ldr	r3, [pc, #72]	; (4025b8 <i2c_init+0x4c>)
  40256e:	2280      	movs	r2, #128	; 0x80
  402570:	601a      	str	r2, [r3, #0]

	//enable peripheral clock for i2c using TWI0
	REG_PMC_PCER0 |= PMC_PCER0_PID19;
  402572:	4912      	ldr	r1, [pc, #72]	; (4025bc <i2c_init+0x50>)
  402574:	680a      	ldr	r2, [r1, #0]
  402576:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
  40257a:	600a      	str	r2, [r1, #0]

	//disable GPIO control of i2c pins
	REG_PIOA_PDR |= PIO_PDR_P3;
  40257c:	4a10      	ldr	r2, [pc, #64]	; (4025c0 <i2c_init+0x54>)
  40257e:	6811      	ldr	r1, [r2, #0]
  402580:	f041 0108 	orr.w	r1, r1, #8
  402584:	6011      	str	r1, [r2, #0]
	REG_PIOA_PDR |= PIO_PDR_P4;
  402586:	6811      	ldr	r1, [r2, #0]
  402588:	f041 0110 	orr.w	r1, r1, #16
  40258c:	6011      	str	r1, [r2, #0]

	// tlow = ((CLDIV * 2^CKDIV) + 4) * Tper
	// thigh = ((CHDIV * 2^CKDIV) + 4) * Tper
	// thigh = tlow => 400kHz (supposedly...)
	//set TWI0 clock to 400kHz (supported by IO expander)
	REG_TWI0_CWGR |= TWI_CWGR_CLDIV(121);
  40258e:	f5a2 2248 	sub.w	r2, r2, #819200	; 0xc8000
  402592:	f6a2 52f4 	subw	r2, r2, #3572	; 0xdf4
  402596:	6811      	ldr	r1, [r2, #0]
  402598:	f041 0179 	orr.w	r1, r1, #121	; 0x79
  40259c:	6011      	str	r1, [r2, #0]
	REG_TWI0_CWGR |= TWI_CWGR_CHDIV(121);
  40259e:	6811      	ldr	r1, [r2, #0]
  4025a0:	f441 41f2 	orr.w	r1, r1, #30976	; 0x7900
  4025a4:	6011      	str	r1, [r2, #0]

	//disable slave mode & enable master mode
	REG_TWI0_CR |= TWI_CR_SVDIS;
  4025a6:	681a      	ldr	r2, [r3, #0]
  4025a8:	f042 0220 	orr.w	r2, r2, #32
  4025ac:	601a      	str	r2, [r3, #0]
	REG_TWI0_CR |= TWI_CR_MSEN;
  4025ae:	681a      	ldr	r2, [r3, #0]
  4025b0:	f042 0204 	orr.w	r2, r2, #4
  4025b4:	601a      	str	r2, [r3, #0]
  4025b6:	4770      	bx	lr
  4025b8:	40018000 	.word	0x40018000
  4025bc:	400e0410 	.word	0x400e0410
  4025c0:	400e0e04 	.word	0x400e0e04

004025c4 <config_MAX7314>:
		
	 }

 }

 void config_MAX7314(){
  4025c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4025c8:	b088      	sub	sp, #32
	twi_packet_t packet_tx;
	uint8_t config_data[] = {MAX7314_configRegister, 0x08};
  4025ca:	4c14      	ldr	r4, [pc, #80]	; (40261c <config_MAX7314+0x58>)
  4025cc:	8823      	ldrh	r3, [r4, #0]
  4025ce:	f8ad 3008 	strh.w	r3, [sp, #8]

	/* Configure the Chip Config Register */
	packet_tx.chip        = 0b0100000;
  4025d2:	f04f 0820 	mov.w	r8, #32
  4025d6:	f88d 801c 	strb.w	r8, [sp, #28]
	packet_tx.addr_length = 0;
  4025da:	2700      	movs	r7, #0
  4025dc:	9704      	str	r7, [sp, #16]
	packet_tx.buffer      = (uint8_t *) config_data;
  4025de:	ab02      	add	r3, sp, #8
  4025e0:	9305      	str	r3, [sp, #20]
	packet_tx.length      = 2;
  4025e2:	2302      	movs	r3, #2
  4025e4:	9306      	str	r3, [sp, #24]
	twi_master_write(BOARD_BASE_TWI, &packet_tx);
  4025e6:	4e0e      	ldr	r6, [pc, #56]	; (402620 <config_MAX7314+0x5c>)
  4025e8:	a903      	add	r1, sp, #12
  4025ea:	4630      	mov	r0, r6
  4025ec:	4d0d      	ldr	r5, [pc, #52]	; (402624 <config_MAX7314+0x60>)
  4025ee:	47a8      	blx	r5


	uint8_t port_data_write[] = {MAX7314_portConfigRegisterLow, 0xFF, 0xFF};
  4025f0:	aa01      	add	r2, sp, #4
  4025f2:	4623      	mov	r3, r4
  4025f4:	f833 1f04 	ldrh.w	r1, [r3, #4]!
  4025f8:	789b      	ldrb	r3, [r3, #2]
  4025fa:	f8ad 1004 	strh.w	r1, [sp, #4]
  4025fe:	f88d 3006 	strb.w	r3, [sp, #6]

	/* Configure the Chip Ports as Inputs */
	packet_tx.chip        = 0b0100000;
  402602:	f88d 801c 	strb.w	r8, [sp, #28]
	packet_tx.addr_length = 0;
  402606:	9704      	str	r7, [sp, #16]
	packet_tx.buffer      = (uint8_t *) port_data_write;
  402608:	9205      	str	r2, [sp, #20]
	packet_tx.length      = 3;
  40260a:	2303      	movs	r3, #3
  40260c:	9306      	str	r3, [sp, #24]
	twi_master_write(BOARD_BASE_TWI, &packet_tx);
  40260e:	a903      	add	r1, sp, #12
  402610:	4630      	mov	r0, r6
  402612:	47a8      	blx	r5
 }
  402614:	b008      	add	sp, #32
  402616:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40261a:	bf00      	nop
  40261c:	00402dbc 	.word	0x00402dbc
  402620:	40018000 	.word	0x40018000
  402624:	004002c1 	.word	0x004002c1

00402628 <read_MAX7314>:

 void read_MAX7314(uint8_t *data){
  402628:	b5f0      	push	{r4, r5, r6, r7, lr}
  40262a:	b08d      	sub	sp, #52	; 0x34
  40262c:	4607      	mov	r7, r0
	/* Data Packets for tx/rx */
	twi_packet_t packet_rx, packet_tx;
	uint8_t port_addr[] = {MAX7314_inputPortLow};
  40262e:	2400      	movs	r4, #0
  402630:	f88d 4004 	strb.w	r4, [sp, #4]

	
	/* Write the command byte address to be the Low byte of the Input Port */
	packet_tx.chip        = 0b0100000;
  402634:	2620      	movs	r6, #32
  402636:	f88d 6018 	strb.w	r6, [sp, #24]
	packet_tx.addr_length = 0;
  40263a:	9403      	str	r4, [sp, #12]
	packet_tx.buffer      = (uint8_t *) port_addr;
  40263c:	ab01      	add	r3, sp, #4
  40263e:	9304      	str	r3, [sp, #16]
	packet_tx.length      = 1;
  402640:	2301      	movs	r3, #1
  402642:	9305      	str	r3, [sp, #20]
	twi_master_write(BOARD_BASE_TWI, &packet_tx);
  402644:	4d08      	ldr	r5, [pc, #32]	; (402668 <read_MAX7314+0x40>)
  402646:	a902      	add	r1, sp, #8
  402648:	4628      	mov	r0, r5
  40264a:	4b08      	ldr	r3, [pc, #32]	; (40266c <read_MAX7314+0x44>)
  40264c:	4798      	blx	r3


	/* Read Data from the Low and High Input Ports */
	packet_rx.chip        = 0b0100000;
  40264e:	f88d 602c 	strb.w	r6, [sp, #44]	; 0x2c
	packet_rx.addr_length = 0;
  402652:	9408      	str	r4, [sp, #32]
	packet_rx.buffer      = data;
  402654:	9709      	str	r7, [sp, #36]	; 0x24
	packet_rx.length      = 2;
  402656:	2302      	movs	r3, #2
  402658:	930a      	str	r3, [sp, #40]	; 0x28
	twi_master_read(BOARD_BASE_TWI, &packet_rx);
  40265a:	a907      	add	r1, sp, #28
  40265c:	4628      	mov	r0, r5
  40265e:	4b04      	ldr	r3, [pc, #16]	; (402670 <read_MAX7314+0x48>)
  402660:	4798      	blx	r3


 }
  402662:	b00d      	add	sp, #52	; 0x34
  402664:	bdf0      	pop	{r4, r5, r6, r7, pc}
  402666:	bf00      	nop
  402668:	40018000 	.word	0x40018000
  40266c:	004002c1 	.word	0x004002c1
  402670:	004001e1 	.word	0x004001e1

00402674 <main>:

void config_MAX7314(void);
void read_MAX7314(uint8_t *port_data);

int main (void)
{
  402674:	b508      	push	{r3, lr}
	sysclk_init();				//initialize system clock
  402676:	4b19      	ldr	r3, [pc, #100]	; (4026dc <main+0x68>)
  402678:	4798      	blx	r3
	WDT->WDT_MR = WDT_MR_WDDIS; //disable watchdog timer
  40267a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  40267e:	4b18      	ldr	r3, [pc, #96]	; (4026e0 <main+0x6c>)
  402680:	605a      	str	r2, [r3, #4]

	board_init();				//board init (currently empty)
  402682:	4b18      	ldr	r3, [pc, #96]	; (4026e4 <main+0x70>)
  402684:	4798      	blx	r3
	init_sequencer_controls();
  402686:	4b18      	ldr	r3, [pc, #96]	; (4026e8 <main+0x74>)
  402688:	4798      	blx	r3

	SPI_led_init();
  40268a:	4b18      	ldr	r3, [pc, #96]	; (4026ec <main+0x78>)
  40268c:	4798      	blx	r3
	leds_update_display();
  40268e:	4b18      	ldr	r3, [pc, #96]	; (4026f0 <main+0x7c>)
  402690:	4798      	blx	r3
	
	timers_init();				//initiate timer for Flashing LED on PA20
  402692:	4b18      	ldr	r3, [pc, #96]	; (4026f4 <main+0x80>)
  402694:	4798      	blx	r3
	update_timers(bpm);
  402696:	4b18      	ldr	r3, [pc, #96]	; (4026f8 <main+0x84>)
  402698:	8818      	ldrh	r0, [r3, #0]
  40269a:	4b18      	ldr	r3, [pc, #96]	; (4026fc <main+0x88>)
  40269c:	4798      	blx	r3
	
	ADC_init();
  40269e:	4b18      	ldr	r3, [pc, #96]	; (402700 <main+0x8c>)
  4026a0:	4798      	blx	r3

	REG_PIOB_PER |= PIO_PER_P3; //enable PIO controller on PB3
  4026a2:	4a18      	ldr	r2, [pc, #96]	; (402704 <main+0x90>)
  4026a4:	6813      	ldr	r3, [r2, #0]
  4026a6:	f043 0308 	orr.w	r3, r3, #8
  4026aa:	6013      	str	r3, [r2, #0]
	REG_PIOB_OER |= PIO_PER_P3; //enable output on pin PB3
  4026ac:	3210      	adds	r2, #16
  4026ae:	6813      	ldr	r3, [r2, #0]
  4026b0:	f043 0308 	orr.w	r3, r3, #8
  4026b4:	6013      	str	r3, [r2, #0]
	REG_PIOB_SODR |= PIO_PER_P3; //set output high on PB3 as default
  4026b6:	3220      	adds	r2, #32
  4026b8:	6813      	ldr	r3, [r2, #0]
  4026ba:	f043 0308 	orr.w	r3, r3, #8
  4026be:	6013      	str	r3, [r2, #0]
	Encoder_init();				//initialize encoders
  4026c0:	4b11      	ldr	r3, [pc, #68]	; (402708 <main+0x94>)
  4026c2:	4798      	blx	r3

	i2c_init();
  4026c4:	4b11      	ldr	r3, [pc, #68]	; (40270c <main+0x98>)
  4026c6:	4798      	blx	r3
	display_init();
  4026c8:	4b11      	ldr	r3, [pc, #68]	; (402710 <main+0x9c>)
  4026ca:	4798      	blx	r3

	init_IO_int();
  4026cc:	4b11      	ldr	r3, [pc, #68]	; (402714 <main+0xa0>)
  4026ce:	4798      	blx	r3
	config_MAX7314();
  4026d0:	4b11      	ldr	r3, [pc, #68]	; (402718 <main+0xa4>)
  4026d2:	4798      	blx	r3
	read_MAX7314(port_data);
  4026d4:	4811      	ldr	r0, [pc, #68]	; (40271c <main+0xa8>)
  4026d6:	4b12      	ldr	r3, [pc, #72]	; (402720 <main+0xac>)
  4026d8:	4798      	blx	r3
  4026da:	e7fe      	b.n	4026da <main+0x66>
  4026dc:	004021a1 	.word	0x004021a1
  4026e0:	400e1450 	.word	0x400e1450
  4026e4:	0040219d 	.word	0x0040219d
  4026e8:	00401851 	.word	0x00401851
  4026ec:	00401dfd 	.word	0x00401dfd
  4026f0:	0040101d 	.word	0x0040101d
  4026f4:	00402029 	.word	0x00402029
  4026f8:	200086fc 	.word	0x200086fc
  4026fc:	004020b9 	.word	0x004020b9
  402700:	0040011d 	.word	0x0040011d
  402704:	400e1000 	.word	0x400e1000
  402708:	00400625 	.word	0x00400625
  40270c:	0040256d 	.word	0x0040256d
  402710:	0040051d 	.word	0x0040051d
  402714:	004024f5 	.word	0x004024f5
  402718:	004025c5 	.word	0x004025c5
  40271c:	200086e0 	.word	0x200086e0
  402720:	00402629 	.word	0x00402629

00402724 <PIOB_Handler>:
	}
}

 void PIOB_Handler(){

	 uint32_t status = REG_PIOB_ISR;	//read PIOB interrupt status & clear interrupt flags
  402724:	4b11      	ldr	r3, [pc, #68]	; (40276c <PIOB_Handler+0x48>)
  402726:	681b      	ldr	r3, [r3, #0]
 
	 //check if Io expander interrupt was driven
	 if (status & PIO_ISR_P10){
  402728:	f413 6f80 	tst.w	r3, #1024	; 0x400
  40272c:	d01c      	beq.n	402768 <PIOB_Handler+0x44>
	while (1)
	{
	}
}

 void PIOB_Handler(){
  40272e:	b510      	push	{r4, lr}

	 uint32_t status = REG_PIOB_ISR;	//read PIOB interrupt status & clear interrupt flags
 
	 //check if Io expander interrupt was driven
	 if (status & PIO_ISR_P10){
		read_MAX7314(temp_data);
  402730:	4c0f      	ldr	r4, [pc, #60]	; (402770 <PIOB_Handler+0x4c>)
  402732:	4620      	mov	r0, r4
  402734:	4b0f      	ldr	r3, [pc, #60]	; (402774 <PIOB_Handler+0x50>)
  402736:	4798      	blx	r3

		if  ( !((temp_data[0] == 127) && (temp_data[1] == 255)) ){
  402738:	7820      	ldrb	r0, [r4, #0]
  40273a:	287f      	cmp	r0, #127	; 0x7f
  40273c:	d102      	bne.n	402744 <PIOB_Handler+0x20>
  40273e:	7863      	ldrb	r3, [r4, #1]
  402740:	2bff      	cmp	r3, #255	; 0xff
  402742:	d010      	beq.n	402766 <PIOB_Handler+0x42>
			port_data[0] = temp_data[0];
  402744:	4b0c      	ldr	r3, [pc, #48]	; (402778 <PIOB_Handler+0x54>)
  402746:	7018      	strb	r0, [r3, #0]
			port_data[1] = temp_data[1];
  402748:	4a09      	ldr	r2, [pc, #36]	; (402770 <PIOB_Handler+0x4c>)
  40274a:	7851      	ldrb	r1, [r2, #1]
  40274c:	7059      	strb	r1, [r3, #1]

			count++;
  40274e:	4a0b      	ldr	r2, [pc, #44]	; (40277c <PIOB_Handler+0x58>)
  402750:	7813      	ldrb	r3, [r2, #0]
  402752:	3301      	adds	r3, #1
  402754:	b2db      	uxtb	r3, r3
  402756:	7013      	strb	r3, [r2, #0]
			if (count >= 2){
  402758:	2b01      	cmp	r3, #1
  40275a:	d904      	bls.n	402766 <PIOB_Handler+0x42>
				led_toggle(port_data[0], port_data[1]);
  40275c:	4b08      	ldr	r3, [pc, #32]	; (402780 <PIOB_Handler+0x5c>)
  40275e:	4798      	blx	r3
				count = 0;
  402760:	2200      	movs	r2, #0
  402762:	4b06      	ldr	r3, [pc, #24]	; (40277c <PIOB_Handler+0x58>)
  402764:	701a      	strb	r2, [r3, #0]
  402766:	bd10      	pop	{r4, pc}
  402768:	4770      	bx	lr
  40276a:	bf00      	nop
  40276c:	400e104c 	.word	0x400e104c
  402770:	200086dc 	.word	0x200086dc
  402774:	00402629 	.word	0x00402629
  402778:	200086e0 	.word	0x200086e0
  40277c:	200086de 	.word	0x200086de
  402780:	004014c5 	.word	0x004014c5

00402784 <__aeabi_frsub>:
  402784:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
  402788:	e002      	b.n	402790 <__addsf3>
  40278a:	bf00      	nop

0040278c <__aeabi_fsub>:
  40278c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00402790 <__addsf3>:
  402790:	0042      	lsls	r2, r0, #1
  402792:	bf1f      	itttt	ne
  402794:	ea5f 0341 	movsne.w	r3, r1, lsl #1
  402798:	ea92 0f03 	teqne	r2, r3
  40279c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
  4027a0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
  4027a4:	d06a      	beq.n	40287c <__addsf3+0xec>
  4027a6:	ea4f 6212 	mov.w	r2, r2, lsr #24
  4027aa:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
  4027ae:	bfc1      	itttt	gt
  4027b0:	18d2      	addgt	r2, r2, r3
  4027b2:	4041      	eorgt	r1, r0
  4027b4:	4048      	eorgt	r0, r1
  4027b6:	4041      	eorgt	r1, r0
  4027b8:	bfb8      	it	lt
  4027ba:	425b      	neglt	r3, r3
  4027bc:	2b19      	cmp	r3, #25
  4027be:	bf88      	it	hi
  4027c0:	4770      	bxhi	lr
  4027c2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
  4027c6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  4027ca:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
  4027ce:	bf18      	it	ne
  4027d0:	4240      	negne	r0, r0
  4027d2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  4027d6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
  4027da:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
  4027de:	bf18      	it	ne
  4027e0:	4249      	negne	r1, r1
  4027e2:	ea92 0f03 	teq	r2, r3
  4027e6:	d03f      	beq.n	402868 <__addsf3+0xd8>
  4027e8:	f1a2 0201 	sub.w	r2, r2, #1
  4027ec:	fa41 fc03 	asr.w	ip, r1, r3
  4027f0:	eb10 000c 	adds.w	r0, r0, ip
  4027f4:	f1c3 0320 	rsb	r3, r3, #32
  4027f8:	fa01 f103 	lsl.w	r1, r1, r3
  4027fc:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
  402800:	d502      	bpl.n	402808 <__addsf3+0x78>
  402802:	4249      	negs	r1, r1
  402804:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
  402808:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
  40280c:	d313      	bcc.n	402836 <__addsf3+0xa6>
  40280e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
  402812:	d306      	bcc.n	402822 <__addsf3+0x92>
  402814:	0840      	lsrs	r0, r0, #1
  402816:	ea4f 0131 	mov.w	r1, r1, rrx
  40281a:	f102 0201 	add.w	r2, r2, #1
  40281e:	2afe      	cmp	r2, #254	; 0xfe
  402820:	d251      	bcs.n	4028c6 <__addsf3+0x136>
  402822:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
  402826:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
  40282a:	bf08      	it	eq
  40282c:	f020 0001 	biceq.w	r0, r0, #1
  402830:	ea40 0003 	orr.w	r0, r0, r3
  402834:	4770      	bx	lr
  402836:	0049      	lsls	r1, r1, #1
  402838:	eb40 0000 	adc.w	r0, r0, r0
  40283c:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
  402840:	f1a2 0201 	sub.w	r2, r2, #1
  402844:	d1ed      	bne.n	402822 <__addsf3+0x92>
  402846:	fab0 fc80 	clz	ip, r0
  40284a:	f1ac 0c08 	sub.w	ip, ip, #8
  40284e:	ebb2 020c 	subs.w	r2, r2, ip
  402852:	fa00 f00c 	lsl.w	r0, r0, ip
  402856:	bfaa      	itet	ge
  402858:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
  40285c:	4252      	neglt	r2, r2
  40285e:	4318      	orrge	r0, r3
  402860:	bfbc      	itt	lt
  402862:	40d0      	lsrlt	r0, r2
  402864:	4318      	orrlt	r0, r3
  402866:	4770      	bx	lr
  402868:	f092 0f00 	teq	r2, #0
  40286c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
  402870:	bf06      	itte	eq
  402872:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
  402876:	3201      	addeq	r2, #1
  402878:	3b01      	subne	r3, #1
  40287a:	e7b5      	b.n	4027e8 <__addsf3+0x58>
  40287c:	ea4f 0341 	mov.w	r3, r1, lsl #1
  402880:	ea7f 6c22 	mvns.w	ip, r2, asr #24
  402884:	bf18      	it	ne
  402886:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
  40288a:	d021      	beq.n	4028d0 <__addsf3+0x140>
  40288c:	ea92 0f03 	teq	r2, r3
  402890:	d004      	beq.n	40289c <__addsf3+0x10c>
  402892:	f092 0f00 	teq	r2, #0
  402896:	bf08      	it	eq
  402898:	4608      	moveq	r0, r1
  40289a:	4770      	bx	lr
  40289c:	ea90 0f01 	teq	r0, r1
  4028a0:	bf1c      	itt	ne
  4028a2:	2000      	movne	r0, #0
  4028a4:	4770      	bxne	lr
  4028a6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
  4028aa:	d104      	bne.n	4028b6 <__addsf3+0x126>
  4028ac:	0040      	lsls	r0, r0, #1
  4028ae:	bf28      	it	cs
  4028b0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
  4028b4:	4770      	bx	lr
  4028b6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
  4028ba:	bf3c      	itt	cc
  4028bc:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
  4028c0:	4770      	bxcc	lr
  4028c2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
  4028c6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
  4028ca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  4028ce:	4770      	bx	lr
  4028d0:	ea7f 6222 	mvns.w	r2, r2, asr #24
  4028d4:	bf16      	itet	ne
  4028d6:	4608      	movne	r0, r1
  4028d8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
  4028dc:	4601      	movne	r1, r0
  4028de:	0242      	lsls	r2, r0, #9
  4028e0:	bf06      	itte	eq
  4028e2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
  4028e6:	ea90 0f01 	teqeq	r0, r1
  4028ea:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
  4028ee:	4770      	bx	lr

004028f0 <__aeabi_ui2f>:
  4028f0:	f04f 0300 	mov.w	r3, #0
  4028f4:	e004      	b.n	402900 <__aeabi_i2f+0x8>
  4028f6:	bf00      	nop

004028f8 <__aeabi_i2f>:
  4028f8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
  4028fc:	bf48      	it	mi
  4028fe:	4240      	negmi	r0, r0
  402900:	ea5f 0c00 	movs.w	ip, r0
  402904:	bf08      	it	eq
  402906:	4770      	bxeq	lr
  402908:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
  40290c:	4601      	mov	r1, r0
  40290e:	f04f 0000 	mov.w	r0, #0
  402912:	e01c      	b.n	40294e <__aeabi_l2f+0x2a>

00402914 <__aeabi_ul2f>:
  402914:	ea50 0201 	orrs.w	r2, r0, r1
  402918:	bf08      	it	eq
  40291a:	4770      	bxeq	lr
  40291c:	f04f 0300 	mov.w	r3, #0
  402920:	e00a      	b.n	402938 <__aeabi_l2f+0x14>
  402922:	bf00      	nop

00402924 <__aeabi_l2f>:
  402924:	ea50 0201 	orrs.w	r2, r0, r1
  402928:	bf08      	it	eq
  40292a:	4770      	bxeq	lr
  40292c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
  402930:	d502      	bpl.n	402938 <__aeabi_l2f+0x14>
  402932:	4240      	negs	r0, r0
  402934:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  402938:	ea5f 0c01 	movs.w	ip, r1
  40293c:	bf02      	ittt	eq
  40293e:	4684      	moveq	ip, r0
  402940:	4601      	moveq	r1, r0
  402942:	2000      	moveq	r0, #0
  402944:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
  402948:	bf08      	it	eq
  40294a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
  40294e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
  402952:	fabc f28c 	clz	r2, ip
  402956:	3a08      	subs	r2, #8
  402958:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
  40295c:	db10      	blt.n	402980 <__aeabi_l2f+0x5c>
  40295e:	fa01 fc02 	lsl.w	ip, r1, r2
  402962:	4463      	add	r3, ip
  402964:	fa00 fc02 	lsl.w	ip, r0, r2
  402968:	f1c2 0220 	rsb	r2, r2, #32
  40296c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  402970:	fa20 f202 	lsr.w	r2, r0, r2
  402974:	eb43 0002 	adc.w	r0, r3, r2
  402978:	bf08      	it	eq
  40297a:	f020 0001 	biceq.w	r0, r0, #1
  40297e:	4770      	bx	lr
  402980:	f102 0220 	add.w	r2, r2, #32
  402984:	fa01 fc02 	lsl.w	ip, r1, r2
  402988:	f1c2 0220 	rsb	r2, r2, #32
  40298c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
  402990:	fa21 f202 	lsr.w	r2, r1, r2
  402994:	eb43 0002 	adc.w	r0, r3, r2
  402998:	bf08      	it	eq
  40299a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
  40299e:	4770      	bx	lr

004029a0 <__aeabi_fmul>:
  4029a0:	f04f 0cff 	mov.w	ip, #255	; 0xff
  4029a4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
  4029a8:	bf1e      	ittt	ne
  4029aa:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
  4029ae:	ea92 0f0c 	teqne	r2, ip
  4029b2:	ea93 0f0c 	teqne	r3, ip
  4029b6:	d06f      	beq.n	402a98 <__aeabi_fmul+0xf8>
  4029b8:	441a      	add	r2, r3
  4029ba:	ea80 0c01 	eor.w	ip, r0, r1
  4029be:	0240      	lsls	r0, r0, #9
  4029c0:	bf18      	it	ne
  4029c2:	ea5f 2141 	movsne.w	r1, r1, lsl #9
  4029c6:	d01e      	beq.n	402a06 <__aeabi_fmul+0x66>
  4029c8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
  4029cc:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
  4029d0:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
  4029d4:	fba0 3101 	umull	r3, r1, r0, r1
  4029d8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
  4029dc:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
  4029e0:	bf3e      	ittt	cc
  4029e2:	0049      	lslcc	r1, r1, #1
  4029e4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
  4029e8:	005b      	lslcc	r3, r3, #1
  4029ea:	ea40 0001 	orr.w	r0, r0, r1
  4029ee:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
  4029f2:	2afd      	cmp	r2, #253	; 0xfd
  4029f4:	d81d      	bhi.n	402a32 <__aeabi_fmul+0x92>
  4029f6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
  4029fa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
  4029fe:	bf08      	it	eq
  402a00:	f020 0001 	biceq.w	r0, r0, #1
  402a04:	4770      	bx	lr
  402a06:	f090 0f00 	teq	r0, #0
  402a0a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
  402a0e:	bf08      	it	eq
  402a10:	0249      	lsleq	r1, r1, #9
  402a12:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
  402a16:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
  402a1a:	3a7f      	subs	r2, #127	; 0x7f
  402a1c:	bfc2      	ittt	gt
  402a1e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
  402a22:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
  402a26:	4770      	bxgt	lr
  402a28:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  402a2c:	f04f 0300 	mov.w	r3, #0
  402a30:	3a01      	subs	r2, #1
  402a32:	dc5d      	bgt.n	402af0 <__aeabi_fmul+0x150>
  402a34:	f112 0f19 	cmn.w	r2, #25
  402a38:	bfdc      	itt	le
  402a3a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
  402a3e:	4770      	bxle	lr
  402a40:	f1c2 0200 	rsb	r2, r2, #0
  402a44:	0041      	lsls	r1, r0, #1
  402a46:	fa21 f102 	lsr.w	r1, r1, r2
  402a4a:	f1c2 0220 	rsb	r2, r2, #32
  402a4e:	fa00 fc02 	lsl.w	ip, r0, r2
  402a52:	ea5f 0031 	movs.w	r0, r1, rrx
  402a56:	f140 0000 	adc.w	r0, r0, #0
  402a5a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
  402a5e:	bf08      	it	eq
  402a60:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
  402a64:	4770      	bx	lr
  402a66:	f092 0f00 	teq	r2, #0
  402a6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
  402a6e:	bf02      	ittt	eq
  402a70:	0040      	lsleq	r0, r0, #1
  402a72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
  402a76:	3a01      	subeq	r2, #1
  402a78:	d0f9      	beq.n	402a6e <__aeabi_fmul+0xce>
  402a7a:	ea40 000c 	orr.w	r0, r0, ip
  402a7e:	f093 0f00 	teq	r3, #0
  402a82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  402a86:	bf02      	ittt	eq
  402a88:	0049      	lsleq	r1, r1, #1
  402a8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
  402a8e:	3b01      	subeq	r3, #1
  402a90:	d0f9      	beq.n	402a86 <__aeabi_fmul+0xe6>
  402a92:	ea41 010c 	orr.w	r1, r1, ip
  402a96:	e78f      	b.n	4029b8 <__aeabi_fmul+0x18>
  402a98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
  402a9c:	ea92 0f0c 	teq	r2, ip
  402aa0:	bf18      	it	ne
  402aa2:	ea93 0f0c 	teqne	r3, ip
  402aa6:	d00a      	beq.n	402abe <__aeabi_fmul+0x11e>
  402aa8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
  402aac:	bf18      	it	ne
  402aae:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
  402ab2:	d1d8      	bne.n	402a66 <__aeabi_fmul+0xc6>
  402ab4:	ea80 0001 	eor.w	r0, r0, r1
  402ab8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
  402abc:	4770      	bx	lr
  402abe:	f090 0f00 	teq	r0, #0
  402ac2:	bf17      	itett	ne
  402ac4:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
  402ac8:	4608      	moveq	r0, r1
  402aca:	f091 0f00 	teqne	r1, #0
  402ace:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
  402ad2:	d014      	beq.n	402afe <__aeabi_fmul+0x15e>
  402ad4:	ea92 0f0c 	teq	r2, ip
  402ad8:	d101      	bne.n	402ade <__aeabi_fmul+0x13e>
  402ada:	0242      	lsls	r2, r0, #9
  402adc:	d10f      	bne.n	402afe <__aeabi_fmul+0x15e>
  402ade:	ea93 0f0c 	teq	r3, ip
  402ae2:	d103      	bne.n	402aec <__aeabi_fmul+0x14c>
  402ae4:	024b      	lsls	r3, r1, #9
  402ae6:	bf18      	it	ne
  402ae8:	4608      	movne	r0, r1
  402aea:	d108      	bne.n	402afe <__aeabi_fmul+0x15e>
  402aec:	ea80 0001 	eor.w	r0, r0, r1
  402af0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
  402af4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  402af8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  402afc:	4770      	bx	lr
  402afe:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  402b02:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
  402b06:	4770      	bx	lr

00402b08 <__aeabi_fdiv>:
  402b08:	f04f 0cff 	mov.w	ip, #255	; 0xff
  402b0c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
  402b10:	bf1e      	ittt	ne
  402b12:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
  402b16:	ea92 0f0c 	teqne	r2, ip
  402b1a:	ea93 0f0c 	teqne	r3, ip
  402b1e:	d069      	beq.n	402bf4 <__aeabi_fdiv+0xec>
  402b20:	eba2 0203 	sub.w	r2, r2, r3
  402b24:	ea80 0c01 	eor.w	ip, r0, r1
  402b28:	0249      	lsls	r1, r1, #9
  402b2a:	ea4f 2040 	mov.w	r0, r0, lsl #9
  402b2e:	d037      	beq.n	402ba0 <__aeabi_fdiv+0x98>
  402b30:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  402b34:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
  402b38:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
  402b3c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
  402b40:	428b      	cmp	r3, r1
  402b42:	bf38      	it	cc
  402b44:	005b      	lslcc	r3, r3, #1
  402b46:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
  402b4a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
  402b4e:	428b      	cmp	r3, r1
  402b50:	bf24      	itt	cs
  402b52:	1a5b      	subcs	r3, r3, r1
  402b54:	ea40 000c 	orrcs.w	r0, r0, ip
  402b58:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
  402b5c:	bf24      	itt	cs
  402b5e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
  402b62:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  402b66:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
  402b6a:	bf24      	itt	cs
  402b6c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
  402b70:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  402b74:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
  402b78:	bf24      	itt	cs
  402b7a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
  402b7e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  402b82:	011b      	lsls	r3, r3, #4
  402b84:	bf18      	it	ne
  402b86:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
  402b8a:	d1e0      	bne.n	402b4e <__aeabi_fdiv+0x46>
  402b8c:	2afd      	cmp	r2, #253	; 0xfd
  402b8e:	f63f af50 	bhi.w	402a32 <__aeabi_fmul+0x92>
  402b92:	428b      	cmp	r3, r1
  402b94:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
  402b98:	bf08      	it	eq
  402b9a:	f020 0001 	biceq.w	r0, r0, #1
  402b9e:	4770      	bx	lr
  402ba0:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
  402ba4:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
  402ba8:	327f      	adds	r2, #127	; 0x7f
  402baa:	bfc2      	ittt	gt
  402bac:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
  402bb0:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
  402bb4:	4770      	bxgt	lr
  402bb6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  402bba:	f04f 0300 	mov.w	r3, #0
  402bbe:	3a01      	subs	r2, #1
  402bc0:	e737      	b.n	402a32 <__aeabi_fmul+0x92>
  402bc2:	f092 0f00 	teq	r2, #0
  402bc6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
  402bca:	bf02      	ittt	eq
  402bcc:	0040      	lsleq	r0, r0, #1
  402bce:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
  402bd2:	3a01      	subeq	r2, #1
  402bd4:	d0f9      	beq.n	402bca <__aeabi_fdiv+0xc2>
  402bd6:	ea40 000c 	orr.w	r0, r0, ip
  402bda:	f093 0f00 	teq	r3, #0
  402bde:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  402be2:	bf02      	ittt	eq
  402be4:	0049      	lsleq	r1, r1, #1
  402be6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
  402bea:	3b01      	subeq	r3, #1
  402bec:	d0f9      	beq.n	402be2 <__aeabi_fdiv+0xda>
  402bee:	ea41 010c 	orr.w	r1, r1, ip
  402bf2:	e795      	b.n	402b20 <__aeabi_fdiv+0x18>
  402bf4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
  402bf8:	ea92 0f0c 	teq	r2, ip
  402bfc:	d108      	bne.n	402c10 <__aeabi_fdiv+0x108>
  402bfe:	0242      	lsls	r2, r0, #9
  402c00:	f47f af7d 	bne.w	402afe <__aeabi_fmul+0x15e>
  402c04:	ea93 0f0c 	teq	r3, ip
  402c08:	f47f af70 	bne.w	402aec <__aeabi_fmul+0x14c>
  402c0c:	4608      	mov	r0, r1
  402c0e:	e776      	b.n	402afe <__aeabi_fmul+0x15e>
  402c10:	ea93 0f0c 	teq	r3, ip
  402c14:	d104      	bne.n	402c20 <__aeabi_fdiv+0x118>
  402c16:	024b      	lsls	r3, r1, #9
  402c18:	f43f af4c 	beq.w	402ab4 <__aeabi_fmul+0x114>
  402c1c:	4608      	mov	r0, r1
  402c1e:	e76e      	b.n	402afe <__aeabi_fmul+0x15e>
  402c20:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
  402c24:	bf18      	it	ne
  402c26:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
  402c2a:	d1ca      	bne.n	402bc2 <__aeabi_fdiv+0xba>
  402c2c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
  402c30:	f47f af5c 	bne.w	402aec <__aeabi_fmul+0x14c>
  402c34:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
  402c38:	f47f af3c 	bne.w	402ab4 <__aeabi_fmul+0x114>
  402c3c:	e75f      	b.n	402afe <__aeabi_fmul+0x15e>
  402c3e:	bf00      	nop

00402c40 <__aeabi_f2uiz>:
  402c40:	0042      	lsls	r2, r0, #1
  402c42:	d20e      	bcs.n	402c62 <__aeabi_f2uiz+0x22>
  402c44:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
  402c48:	d30b      	bcc.n	402c62 <__aeabi_f2uiz+0x22>
  402c4a:	f04f 039e 	mov.w	r3, #158	; 0x9e
  402c4e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
  402c52:	d409      	bmi.n	402c68 <__aeabi_f2uiz+0x28>
  402c54:	ea4f 2300 	mov.w	r3, r0, lsl #8
  402c58:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  402c5c:	fa23 f002 	lsr.w	r0, r3, r2
  402c60:	4770      	bx	lr
  402c62:	f04f 0000 	mov.w	r0, #0
  402c66:	4770      	bx	lr
  402c68:	f112 0f61 	cmn.w	r2, #97	; 0x61
  402c6c:	d101      	bne.n	402c72 <__aeabi_f2uiz+0x32>
  402c6e:	0242      	lsls	r2, r0, #9
  402c70:	d102      	bne.n	402c78 <__aeabi_f2uiz+0x38>
  402c72:	f04f 30ff 	mov.w	r0, #4294967295
  402c76:	4770      	bx	lr
  402c78:	f04f 0000 	mov.w	r0, #0
  402c7c:	4770      	bx	lr
  402c7e:	bf00      	nop

00402c80 <__libc_init_array>:
  402c80:	b570      	push	{r4, r5, r6, lr}
  402c82:	4e0f      	ldr	r6, [pc, #60]	; (402cc0 <__libc_init_array+0x40>)
  402c84:	4d0f      	ldr	r5, [pc, #60]	; (402cc4 <__libc_init_array+0x44>)
  402c86:	1b76      	subs	r6, r6, r5
  402c88:	10b6      	asrs	r6, r6, #2
  402c8a:	bf18      	it	ne
  402c8c:	2400      	movne	r4, #0
  402c8e:	d005      	beq.n	402c9c <__libc_init_array+0x1c>
  402c90:	3401      	adds	r4, #1
  402c92:	f855 3b04 	ldr.w	r3, [r5], #4
  402c96:	4798      	blx	r3
  402c98:	42a6      	cmp	r6, r4
  402c9a:	d1f9      	bne.n	402c90 <__libc_init_array+0x10>
  402c9c:	4e0a      	ldr	r6, [pc, #40]	; (402cc8 <__libc_init_array+0x48>)
  402c9e:	4d0b      	ldr	r5, [pc, #44]	; (402ccc <__libc_init_array+0x4c>)
  402ca0:	1b76      	subs	r6, r6, r5
  402ca2:	f000 f893 	bl	402dcc <_init>
  402ca6:	10b6      	asrs	r6, r6, #2
  402ca8:	bf18      	it	ne
  402caa:	2400      	movne	r4, #0
  402cac:	d006      	beq.n	402cbc <__libc_init_array+0x3c>
  402cae:	3401      	adds	r4, #1
  402cb0:	f855 3b04 	ldr.w	r3, [r5], #4
  402cb4:	4798      	blx	r3
  402cb6:	42a6      	cmp	r6, r4
  402cb8:	d1f9      	bne.n	402cae <__libc_init_array+0x2e>
  402cba:	bd70      	pop	{r4, r5, r6, pc}
  402cbc:	bd70      	pop	{r4, r5, r6, pc}
  402cbe:	bf00      	nop
  402cc0:	00402dd8 	.word	0x00402dd8
  402cc4:	00402dd8 	.word	0x00402dd8
  402cc8:	00402de0 	.word	0x00402de0
  402ccc:	00402dd8 	.word	0x00402dd8

00402cd0 <register_fini>:
  402cd0:	4b02      	ldr	r3, [pc, #8]	; (402cdc <register_fini+0xc>)
  402cd2:	b113      	cbz	r3, 402cda <register_fini+0xa>
  402cd4:	4802      	ldr	r0, [pc, #8]	; (402ce0 <register_fini+0x10>)
  402cd6:	f000 b805 	b.w	402ce4 <atexit>
  402cda:	4770      	bx	lr
  402cdc:	00000000 	.word	0x00000000
  402ce0:	00402cf1 	.word	0x00402cf1

00402ce4 <atexit>:
  402ce4:	2300      	movs	r3, #0
  402ce6:	4601      	mov	r1, r0
  402ce8:	461a      	mov	r2, r3
  402cea:	4618      	mov	r0, r3
  402cec:	f000 b814 	b.w	402d18 <__register_exitproc>

00402cf0 <__libc_fini_array>:
  402cf0:	b538      	push	{r3, r4, r5, lr}
  402cf2:	4d07      	ldr	r5, [pc, #28]	; (402d10 <__libc_fini_array+0x20>)
  402cf4:	4c07      	ldr	r4, [pc, #28]	; (402d14 <__libc_fini_array+0x24>)
  402cf6:	1b2c      	subs	r4, r5, r4
  402cf8:	10a4      	asrs	r4, r4, #2
  402cfa:	d005      	beq.n	402d08 <__libc_fini_array+0x18>
  402cfc:	3c01      	subs	r4, #1
  402cfe:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  402d02:	4798      	blx	r3
  402d04:	2c00      	cmp	r4, #0
  402d06:	d1f9      	bne.n	402cfc <__libc_fini_array+0xc>
  402d08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  402d0c:	f000 b868 	b.w	402de0 <_fini>
  402d10:	00402df0 	.word	0x00402df0
  402d14:	00402dec 	.word	0x00402dec

00402d18 <__register_exitproc>:
  402d18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402d1c:	4c25      	ldr	r4, [pc, #148]	; (402db4 <__register_exitproc+0x9c>)
  402d1e:	6825      	ldr	r5, [r4, #0]
  402d20:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
  402d24:	4606      	mov	r6, r0
  402d26:	4688      	mov	r8, r1
  402d28:	4692      	mov	sl, r2
  402d2a:	4699      	mov	r9, r3
  402d2c:	b3c4      	cbz	r4, 402da0 <__register_exitproc+0x88>
  402d2e:	6860      	ldr	r0, [r4, #4]
  402d30:	281f      	cmp	r0, #31
  402d32:	dc17      	bgt.n	402d64 <__register_exitproc+0x4c>
  402d34:	1c43      	adds	r3, r0, #1
  402d36:	b176      	cbz	r6, 402d56 <__register_exitproc+0x3e>
  402d38:	eb04 0580 	add.w	r5, r4, r0, lsl #2
  402d3c:	2201      	movs	r2, #1
  402d3e:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
  402d42:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
  402d46:	4082      	lsls	r2, r0
  402d48:	4311      	orrs	r1, r2
  402d4a:	2e02      	cmp	r6, #2
  402d4c:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
  402d50:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
  402d54:	d01e      	beq.n	402d94 <__register_exitproc+0x7c>
  402d56:	3002      	adds	r0, #2
  402d58:	6063      	str	r3, [r4, #4]
  402d5a:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
  402d5e:	2000      	movs	r0, #0
  402d60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402d64:	4b14      	ldr	r3, [pc, #80]	; (402db8 <__register_exitproc+0xa0>)
  402d66:	b303      	cbz	r3, 402daa <__register_exitproc+0x92>
  402d68:	f44f 70c8 	mov.w	r0, #400	; 0x190
  402d6c:	f3af 8000 	nop.w
  402d70:	4604      	mov	r4, r0
  402d72:	b1d0      	cbz	r0, 402daa <__register_exitproc+0x92>
  402d74:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
  402d78:	2700      	movs	r7, #0
  402d7a:	e880 0088 	stmia.w	r0, {r3, r7}
  402d7e:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  402d82:	4638      	mov	r0, r7
  402d84:	2301      	movs	r3, #1
  402d86:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  402d8a:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
  402d8e:	2e00      	cmp	r6, #0
  402d90:	d0e1      	beq.n	402d56 <__register_exitproc+0x3e>
  402d92:	e7d1      	b.n	402d38 <__register_exitproc+0x20>
  402d94:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
  402d98:	430a      	orrs	r2, r1
  402d9a:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  402d9e:	e7da      	b.n	402d56 <__register_exitproc+0x3e>
  402da0:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
  402da4:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  402da8:	e7c1      	b.n	402d2e <__register_exitproc+0x16>
  402daa:	f04f 30ff 	mov.w	r0, #4294967295
  402dae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402db2:	bf00      	nop
  402db4:	00402dc8 	.word	0x00402dc8
  402db8:	00000000 	.word	0x00000000
  402dbc:	0000080f 	.word	0x0000080f
  402dc0:	00ffff06 	.word	0x00ffff06
  402dc4:	00000043 	.word	0x00000043

00402dc8 <_global_impure_ptr>:
  402dc8:	200001f8                                ... 

00402dcc <_init>:
  402dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402dce:	bf00      	nop
  402dd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
  402dd2:	bc08      	pop	{r3}
  402dd4:	469e      	mov	lr, r3
  402dd6:	4770      	bx	lr

00402dd8 <__init_array_start>:
  402dd8:	00402cd1 	.word	0x00402cd1

00402ddc <__frame_dummy_init_array_entry>:
  402ddc:	004000e5                                ..@.

00402de0 <_fini>:
  402de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402de2:	bf00      	nop
  402de4:	bcf8      	pop	{r3, r4, r5, r6, r7}
  402de6:	bc08      	pop	{r3}
  402de8:	469e      	mov	lr, r3
  402dea:	4770      	bx	lr

00402dec <__fini_array_start>:
  402dec:	004000c1 	.word	0x004000c1

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	d1fb      	bne.n	20000000 <portable_delay_cycles>
20000008:	4770      	bx	lr
2000000a:	bf00      	nop

2000000c <notes_lookup>:
2000000c:	0000 0000 9931 3daa 9931 3e2a e5c9 3e7f     ....1..=1.*>...>
2000001c:	9931 3eaa 3f7d 3ed5 e5c9 3eff 460b 3f15     1..>}?.>...>.F.?
2000002c:	9931 3f2a ec57 3f3f 3f7d 3f55 92a3 3f6a     1.*?W.??}?U?..j?
2000003c:	0000 3f80 a993 3f8a 5326 3f95 fcb9 3f9f     ...?...?&S.?...?
2000004c:	a64c 3faa 4fdf 3fb5 f972 3fbf a305 3fca     L..?.O.?r..?...?
2000005c:	4c98 3fd5 f62b 3fdf 9fbe 3fea 4952 3ff5     .L.?+..?...?RI.?
2000006c:	0000 4000 54ca 4005 a993 400a fe5d 400f     ...@.T.@...@]..@
2000007c:	5326 4015 a7f0 401a fcb9 401f 5183 4025     &S.@...@...@.Q%@
2000008c:	a64c 402a fb16 402f 4fdf 4035 a4a9 403a     L.*@../@.O5@..:@
2000009c:	0000 4040 54ca 4045 a993 404a fe5d 404f     ..@@.TE@..J@].O@
200000ac:	5326 4055 a7f0 405a fcb9 405f 5183 4065     &SU@..Z@.._@.Qe@
200000bc:	a64c 406a fb16 406f 4fdf 4075 a4a9 407a     L.j@..o@.Ou@..z@
200000cc:	0000 4080 aa65 4082 54ca 4085 ff2e 4087     ...@e..@.T.@...@
200000dc:	a993 408a 53f8 408d fe5d 408f a8c1 4092     ...@.S.@]..@...@
200000ec:	5326 4095 fd8b 4097 a7f0 409a 5254 409d     &S.@...@...@TR.@
200000fc:	0000 40a0 aa65 40a2 54ca 40a5 ff2e 40a7     ...@e..@.T.@...@
2000010c:	a993 40aa 53f8 40ad fe5d 40af a8c1 40b2     ...@.S.@]..@...@
2000011c:	5326 40b5 fd8b 40b7 a7f0 40ba 5254 40bd     &S.@...@...@TR.@
2000012c:	0000 40c0 aa65 40c2 54ca 40c5 ff2e 40c7     ...@e..@.T.@...@
2000013c:	a993 40ca 53f8 40cd fe5d 40cf a8c1 40d2     ...@.S.@]..@...@
2000014c:	5326 40d5 fd8b 40d7 a7f0 40da 5254 40dd     &S.@...@...@TR.@
2000015c:	0000 40e0 aa65 40e2 54ca 40e5 ff2e 40e7     ...@e..@.T.@...@
2000016c:	a993 40ea 53f8 40ed fe5d 40ef a8c1 40f2     ...@.S.@]..@...@
2000017c:	5326 40f5 fd8b 40f7 a7f0 40fa 5254 40fd     &S.@...@...@TR.@
2000018c:	0000 4100 5532 4101 aa65 4102 ff97 4103     ...A2U.Ae..A...A
2000019c:	54ca 4105 a9fc 4106 ff2e 4107 5461 4109     .T.A...A...AaT.A
200001ac:	a993 410a fec5 410b 53f8 410d a92a 410e     ...A...A.S.A*..A
200001bc:	0000 4110 5532 4111 aa65 4112 ff97 4113     ...A2U.Ae..A...A
200001cc:	54ca 4115 a9fc 4116 ff2e 4117 5461 4119     .T.A...A...AaT.A
200001dc:	a993 411a fec5 411b 53f8 411d a92a 411e     ...A...A.S.A*..A
200001ec:	0000 4120                                   .. A

200001f0 <g_interrupt_enabled>:
200001f0:	0001 0000                                   ....

200001f4 <SystemCoreClock>:
200001f4:	0900 003d                                   ..=.

200001f8 <impure_data>:
200001f8:	0000 0000 04e4 2000 054c 2000 05b4 2000     ....... L.. ... 
	...
2000022c:	2dc4 0040 0000 0000 0000 0000 0000 0000     .-@.............
	...
200002a0:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
200002b0:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...
