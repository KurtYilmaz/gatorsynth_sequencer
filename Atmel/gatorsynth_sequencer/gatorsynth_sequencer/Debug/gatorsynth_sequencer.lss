
gatorsynth_sequencer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006518  00400000  00400000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000680  20000000  00406518  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  2 .bss          0000833c  20000680  00406b98  00020680  2**2
                  ALLOC
  3 .stack        00003004  200089bc  0040eed4  00020680  2**0
                  ALLOC
  4 .ARM.attributes 0000002a  00000000  00000000  00020680  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  000206aa  2**0
                  CONTENTS, READONLY
  6 .debug_info   0000d242  00000000  00000000  00020703  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000028b1  00000000  00000000  0002d945  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00006073  00000000  00000000  000301f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000948  00000000  00000000  00036269  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000888  00000000  00000000  00036bb1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00013bf4  00000000  00000000  00037439  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00012a02  00000000  00000000  0004b02d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0003ee8e  00000000  00000000  0005da2f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001634  00000000  00000000  0009c8c0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <_sfixed>:
  400000:	2000b9c0 	.word	0x2000b9c0
  400004:	00404421 	.word	0x00404421
  400008:	0040441d 	.word	0x0040441d
  40000c:	0040441d 	.word	0x0040441d
  400010:	0040441d 	.word	0x0040441d
  400014:	0040441d 	.word	0x0040441d
  400018:	0040441d 	.word	0x0040441d
	...
  40002c:	0040441d 	.word	0x0040441d
  400030:	0040441d 	.word	0x0040441d
  400034:	00000000 	.word	0x00000000
  400038:	0040441d 	.word	0x0040441d
  40003c:	0040441d 	.word	0x0040441d
  400040:	0040441d 	.word	0x0040441d
  400044:	0040441d 	.word	0x0040441d
  400048:	0040441d 	.word	0x0040441d
  40004c:	0040441d 	.word	0x0040441d
  400050:	0040441d 	.word	0x0040441d
  400054:	0040441d 	.word	0x0040441d
  400058:	0040441d 	.word	0x0040441d
  40005c:	00000000 	.word	0x00000000
  400060:	0040441d 	.word	0x0040441d
  400064:	0040441d 	.word	0x0040441d
  400068:	0040441d 	.word	0x0040441d
  40006c:	004039f1 	.word	0x004039f1
  400070:	00404991 	.word	0x00404991
  400074:	0040233d 	.word	0x0040233d
  400078:	0040441d 	.word	0x0040441d
  40007c:	0040441d 	.word	0x0040441d
  400080:	0040441d 	.word	0x0040441d
  400084:	0040441d 	.word	0x0040441d
  400088:	00000000 	.word	0x00000000
  40008c:	0040441d 	.word	0x0040441d
  400090:	0040441d 	.word	0x0040441d
  400094:	0040441d 	.word	0x0040441d
  400098:	0040441d 	.word	0x0040441d
  40009c:	0040407d 	.word	0x0040407d
  4000a0:	0040441d 	.word	0x0040441d
  4000a4:	0040441d 	.word	0x0040441d
  4000a8:	0040441d 	.word	0x0040441d
  4000ac:	0040441d 	.word	0x0040441d
  4000b0:	0040441d 	.word	0x0040441d
  4000b4:	0040019d 	.word	0x0040019d
  4000b8:	0040441d 	.word	0x0040441d
  4000bc:	0040441d 	.word	0x0040441d

004000c0 <__do_global_dtors_aux>:
  4000c0:	b510      	push	{r4, lr}
  4000c2:	4c05      	ldr	r4, [pc, #20]	; (4000d8 <__do_global_dtors_aux+0x18>)
  4000c4:	7823      	ldrb	r3, [r4, #0]
  4000c6:	b933      	cbnz	r3, 4000d6 <__do_global_dtors_aux+0x16>
  4000c8:	4b04      	ldr	r3, [pc, #16]	; (4000dc <__do_global_dtors_aux+0x1c>)
  4000ca:	b113      	cbz	r3, 4000d2 <__do_global_dtors_aux+0x12>
  4000cc:	4804      	ldr	r0, [pc, #16]	; (4000e0 <__do_global_dtors_aux+0x20>)
  4000ce:	f3af 8000 	nop.w
  4000d2:	2301      	movs	r3, #1
  4000d4:	7023      	strb	r3, [r4, #0]
  4000d6:	bd10      	pop	{r4, pc}
  4000d8:	20000680 	.word	0x20000680
  4000dc:	00000000 	.word	0x00000000
  4000e0:	00406518 	.word	0x00406518

004000e4 <frame_dummy>:
  4000e4:	4b08      	ldr	r3, [pc, #32]	; (400108 <frame_dummy+0x24>)
  4000e6:	b510      	push	{r4, lr}
  4000e8:	b11b      	cbz	r3, 4000f2 <frame_dummy+0xe>
  4000ea:	4908      	ldr	r1, [pc, #32]	; (40010c <frame_dummy+0x28>)
  4000ec:	4808      	ldr	r0, [pc, #32]	; (400110 <frame_dummy+0x2c>)
  4000ee:	f3af 8000 	nop.w
  4000f2:	4808      	ldr	r0, [pc, #32]	; (400114 <frame_dummy+0x30>)
  4000f4:	6803      	ldr	r3, [r0, #0]
  4000f6:	b903      	cbnz	r3, 4000fa <frame_dummy+0x16>
  4000f8:	bd10      	pop	{r4, pc}
  4000fa:	4b07      	ldr	r3, [pc, #28]	; (400118 <frame_dummy+0x34>)
  4000fc:	2b00      	cmp	r3, #0
  4000fe:	d0fb      	beq.n	4000f8 <frame_dummy+0x14>
  400100:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400104:	4718      	bx	r3
  400106:	bf00      	nop
  400108:	00000000 	.word	0x00000000
  40010c:	20000684 	.word	0x20000684
  400110:	00406518 	.word	0x00406518
  400114:	00406518 	.word	0x00406518
  400118:	00000000 	.word	0x00000000

0040011c <ADC_init>:
 //define register to read CH2 conversion from
#define REG_ADC_CDR2     (*(__I  uint32_t*)0x40038058U) /**< \brief (ADC) Channel Data Register */ 

 void ADC_init(){

	note_length = 20000;
  40011c:	f644 6220 	movw	r2, #20000	; 0x4e20
  400120:	4b0f      	ldr	r3, [pc, #60]	; (400160 <ADC_init+0x44>)
  400122:	801a      	strh	r2, [r3, #0]

	//enable peripheral clock for ADC
	REG_PMC_PCER0 |= PMC_PCER0_PID29;
  400124:	4a0f      	ldr	r2, [pc, #60]	; (400164 <ADC_init+0x48>)
  400126:	6813      	ldr	r3, [r2, #0]
  400128:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  40012c:	6013      	str	r3, [r2, #0]
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  40012e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400132:	4b0d      	ldr	r3, [pc, #52]	; (400168 <ADC_init+0x4c>)
  400134:	601a      	str	r2, [r3, #0]

	//enable interrupts for ADC
	NVIC_EnableIRQ(ADC_IRQn);

	//enable Channel 2 of ADC (PORTA 19)
	REG_ADC_CHER |= ADC_CHER_CH2;
  400136:	4a0d      	ldr	r2, [pc, #52]	; (40016c <ADC_init+0x50>)
  400138:	6813      	ldr	r3, [r2, #0]
  40013a:	f043 0304 	orr.w	r3, r3, #4
  40013e:	6013      	str	r3, [r2, #0]

	//configure ADC clock to 5MHz
	REG_ADC_MR |= ADC_MR_PRESCAL(9);
  400140:	3a0c      	subs	r2, #12
  400142:	6813      	ldr	r3, [r2, #0]
  400144:	f443 6310 	orr.w	r3, r3, #2304	; 0x900
  400148:	6013      	str	r3, [r2, #0]

	//enable interrupt for end of ADC conversion on CH2
	REG_ADC_IER |= ADC_IER_EOC2;
  40014a:	3220      	adds	r2, #32
  40014c:	6813      	ldr	r3, [r2, #0]
  40014e:	f043 0304 	orr.w	r3, r3, #4
  400152:	6013      	str	r3, [r2, #0]

	//start initial conversion
	REG_ADC_CR |= ADC_CR_START;
  400154:	3a24      	subs	r2, #36	; 0x24
  400156:	6813      	ldr	r3, [r2, #0]
  400158:	f043 0302 	orr.w	r3, r3, #2
  40015c:	6013      	str	r3, [r2, #0]
  40015e:	4770      	bx	lr
  400160:	2000098e 	.word	0x2000098e
  400164:	400e0410 	.word	0x400e0410
  400168:	e000e100 	.word	0xe000e100
  40016c:	40038010 	.word	0x40038010

00400170 <convert_NoteLength>:

 }

  void convert_NoteLength(uint32_t DAC_data){
  400170:	b508      	push	{r3, lr}

	  //get note length as a proportion of the overflow count of the timer
	  float note_float = 40000*(((float)DAC_data)/1023);
	  note_length = (uint16_t) note_float;
  400172:	4b05      	ldr	r3, [pc, #20]	; (400188 <convert_NoteLength+0x18>)
  400174:	4798      	blx	r3
  400176:	4905      	ldr	r1, [pc, #20]	; (40018c <convert_NoteLength+0x1c>)
  400178:	4b05      	ldr	r3, [pc, #20]	; (400190 <convert_NoteLength+0x20>)
  40017a:	4798      	blx	r3
  40017c:	4b05      	ldr	r3, [pc, #20]	; (400194 <convert_NoteLength+0x24>)
  40017e:	4798      	blx	r3
  400180:	4b05      	ldr	r3, [pc, #20]	; (400198 <convert_NoteLength+0x28>)
  400182:	8018      	strh	r0, [r3, #0]
  400184:	bd08      	pop	{r3, pc}
  400186:	bf00      	nop
  400188:	00404ba9 	.word	0x00404ba9
  40018c:	421c671a 	.word	0x421c671a
  400190:	00404c59 	.word	0x00404c59
  400194:	00404ef9 	.word	0x00404ef9
  400198:	2000098e 	.word	0x2000098e

0040019c <ADC_Handler>:
// 		note_length = 1000;
// 	  }

  }

 void ADC_Handler(){
  40019c:	b508      	push	{r3, lr}

	//read the interrupt flag and clear it
	uint32_t status = REG_ADC_ISR;
  40019e:	4b05      	ldr	r3, [pc, #20]	; (4001b4 <ADC_Handler+0x18>)
  4001a0:	681b      	ldr	r3, [r3, #0]

	//store the data
	uint32_t data;

	//check for CH2 interrupt
	if ((status & ADC_IMR_EOC2) > 0){
  4001a2:	f013 0f04 	tst.w	r3, #4
		data = REG_ADC_CDR2;	//read ADC data off CH2
  4001a6:	bf1c      	itt	ne
  4001a8:	4b03      	ldrne	r3, [pc, #12]	; (4001b8 <ADC_Handler+0x1c>)
  4001aa:	6818      	ldrne	r0, [r3, #0]
	}

	convert_NoteLength(data);
  4001ac:	4b03      	ldr	r3, [pc, #12]	; (4001bc <ADC_Handler+0x20>)
  4001ae:	4798      	blx	r3
  4001b0:	bd08      	pop	{r3, pc}
  4001b2:	bf00      	nop
  4001b4:	40038030 	.word	0x40038030
  4001b8:	40038058 	.word	0x40038058
  4001bc:	00400171 	.word	0x00400171

004001c0 <efc_init>:
 * \param ul_fws The number of wait states in cycle (no shift).
 *
 * \return 0 if successful.
 */
uint32_t efc_init(Efc *p_efc, uint32_t ul_access_mode, uint32_t ul_fws)
{
  4001c0:	b508      	push	{r3, lr}
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || \
	 SAMV71 || SAMV70 || SAMS70 || SAME70)
	efc_write_fmr(p_efc, ul_access_mode | EEFC_FMR_FWS(ul_fws) | EEFC_FMR_CLOE);
  4001c2:	0212      	lsls	r2, r2, #8
  4001c4:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
  4001c8:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
  4001cc:	4311      	orrs	r1, r2
  4001ce:	4b02      	ldr	r3, [pc, #8]	; (4001d8 <efc_init+0x18>)
  4001d0:	4798      	blx	r3
#else
	efc_write_fmr(p_efc, ul_access_mode | EEFC_FMR_FWS(ul_fws));
#endif
	return EFC_RC_OK;
}
  4001d2:	2000      	movs	r0, #0
  4001d4:	bd08      	pop	{r3, pc}
  4001d6:	bf00      	nop
  4001d8:	20000069 	.word	0x20000069

004001dc <efc_perform_command>:
 *
 * \return 0 if successful, otherwise returns an error code.
 */
uint32_t efc_perform_command(Efc *p_efc, uint32_t ul_command,
		uint32_t ul_argument)
{
  4001dc:	b538      	push	{r3, r4, r5, lr}
	uint32_t result;
	irqflags_t flags;

	/* Unique ID commands are not supported. */
	if (ul_command == EFC_FCMD_STUI || ul_command == EFC_FCMD_SPUI) {
  4001de:	f1a1 030e 	sub.w	r3, r1, #14
  4001e2:	2b01      	cmp	r3, #1
  4001e4:	d91a      	bls.n	40021c <efc_perform_command+0x40>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4001e6:	f3ef 8410 	mrs	r4, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  4001ea:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  4001ec:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
  4001f0:	2500      	movs	r5, #0
  4001f2:	4b0c      	ldr	r3, [pc, #48]	; (400224 <efc_perform_command+0x48>)
  4001f4:	701d      	strb	r5, [r3, #0]
		return EFC_RC_NOT_SUPPORT;
	}

	flags = cpu_irq_save();
	/* Use RAM Function. */
	result = efc_perform_fcr(p_efc,
  4001f6:	0212      	lsls	r2, r2, #8
  4001f8:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
  4001fc:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
  400200:	f042 42b4 	orr.w	r2, r2, #1509949440	; 0x5a000000
  400204:	b2c9      	uxtb	r1, r1
  400206:	4311      	orrs	r1, r2
  400208:	4b07      	ldr	r3, [pc, #28]	; (400228 <efc_perform_command+0x4c>)
  40020a:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  40020c:	b944      	cbnz	r4, 400220 <efc_perform_command+0x44>
		cpu_irq_enable();
  40020e:	2201      	movs	r2, #1
  400210:	4b04      	ldr	r3, [pc, #16]	; (400224 <efc_perform_command+0x48>)
  400212:	701a      	strb	r2, [r3, #0]
  400214:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  400218:	b662      	cpsie	i
  40021a:	bd38      	pop	{r3, r4, r5, pc}
	uint32_t result;
	irqflags_t flags;

	/* Unique ID commands are not supported. */
	if (ul_command == EFC_FCMD_STUI || ul_command == EFC_FCMD_SPUI) {
		return EFC_RC_NOT_SUPPORT;
  40021c:	f04f 30ff 	mov.w	r0, #4294967295
	result = efc_perform_fcr(p_efc,
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(ul_argument) |
			EEFC_FCR_FCMD(ul_command));
	cpu_irq_restore(flags);
	return result;
}
  400220:	bd38      	pop	{r3, r4, r5, pc}
  400222:	bf00      	nop
  400224:	2000024c 	.word	0x2000024c
  400228:	2000006d 	.word	0x2000006d

0040022c <twi_master_read>:
 * \param p_packet Packet information and data (see \ref twi_packet_t).
 *
 * \return TWI_SUCCESS if all bytes were read, error code otherwise.
 */
uint32_t twi_master_read(Twi *p_twi, twi_packet_t *p_packet)
{
  40022c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  400230:	b672      	cpsid	i
  400232:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  400236:	2200      	movs	r2, #0
  400238:	4b3a      	ldr	r3, [pc, #232]	; (400324 <twi_master_read+0xf8>)
  40023a:	701a      	strb	r2, [r3, #0]
	
	uint32_t status;
	uint32_t cnt = p_packet->length;
  40023c:	68cb      	ldr	r3, [r1, #12]
	uint8_t *buffer = p_packet->buffer;
	uint8_t stop_sent = 0;
	uint32_t timeout = TWI_TIMEOUT;;
	
	/* Check argument */
	if (cnt == 0) {
  40023e:	2b00      	cmp	r3, #0
  400240:	d04f      	beq.n	4002e2 <twi_master_read+0xb6>
{
	cpu_irq_disable();
	
	uint32_t status;
	uint32_t cnt = p_packet->length;
	uint8_t *buffer = p_packet->buffer;
  400242:	688c      	ldr	r4, [r1, #8]
	if (cnt == 0) {
		return TWI_INVALID_ARGUMENT;
	}

	/* Set read mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
  400244:	4616      	mov	r6, r2
  400246:	6042      	str	r2, [r0, #4]
	p_twi->TWI_MMR = TWI_MMR_MREAD | TWI_MMR_DADR(p_packet->chip) |
  400248:	684a      	ldr	r2, [r1, #4]
  40024a:	0212      	lsls	r2, r2, #8
  40024c:	f402 7240 	and.w	r2, r2, #768	; 0x300
  400250:	f442 5580 	orr.w	r5, r2, #4096	; 0x1000
  400254:	7c0a      	ldrb	r2, [r1, #16]
  400256:	0412      	lsls	r2, r2, #16
  400258:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
  40025c:	432a      	orrs	r2, r5
  40025e:	6042      	str	r2, [r0, #4]
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
  400260:	60c6      	str	r6, [r0, #12]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
  400262:	684d      	ldr	r5, [r1, #4]
 */
static uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
	uint32_t val;

	if (len == 0)
  400264:	b15d      	cbz	r5, 40027e <twi_master_read+0x52>
		return 0;

	val = addr[0];
  400266:	780a      	ldrb	r2, [r1, #0]
	if (len > 1) {
  400268:	2d01      	cmp	r5, #1
		val <<= 8;
		val |= addr[1];
  40026a:	bfc4      	itt	gt
  40026c:	784e      	ldrbgt	r6, [r1, #1]
  40026e:	ea46 2202 	orrgt.w	r2, r6, r2, lsl #8
	}
	if (len > 2) {
  400272:	2d02      	cmp	r5, #2
  400274:	dd04      	ble.n	400280 <twi_master_read+0x54>
		val <<= 8;
		val |= addr[2];
  400276:	7889      	ldrb	r1, [r1, #2]
  400278:	ea41 2202 	orr.w	r2, r1, r2, lsl #8
  40027c:	e000      	b.n	400280 <twi_master_read+0x54>
static uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
	uint32_t val;

	if (len == 0)
		return 0;
  40027e:	2200      	movs	r2, #0
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
  400280:	60c2      	str	r2, [r0, #12]

	/* Send a START condition */
	if (cnt == 1) {
  400282:	2b01      	cmp	r3, #1
  400284:	d103      	bne.n	40028e <twi_master_read+0x62>
		p_twi->TWI_CR = TWI_CR_START | TWI_CR_STOP;
  400286:	2203      	movs	r2, #3
  400288:	6002      	str	r2, [r0, #0]
		stop_sent = 1;
  40028a:	2701      	movs	r7, #1
  40028c:	e035      	b.n	4002fa <twi_master_read+0xce>
	} else {
		p_twi->TWI_CR = TWI_CR_START;
  40028e:	2201      	movs	r2, #1
  400290:	6002      	str	r2, [r0, #0]
		stop_sent = 0;
  400292:	2700      	movs	r7, #0
  400294:	e031      	b.n	4002fa <twi_master_read+0xce>
		if (cnt == 1  && !stop_sent) {
			p_twi->TWI_CR = TWI_CR_STOP;
			stop_sent = 1;
		}

		if (!(status & TWI_SR_RXRDY)) {
  400296:	4629      	mov	r1, r5
		p_twi->TWI_CR = TWI_CR_START;
		stop_sent = 0;
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
  400298:	6a02      	ldr	r2, [r0, #32]
		if (status & TWI_SR_NACK) {
  40029a:	f412 7f80 	tst.w	r2, #256	; 0x100
  40029e:	d123      	bne.n	4002e8 <twi_master_read+0xbc>
			return TWI_RECEIVE_NACK;
		}

		if (!timeout--) {
  4002a0:	1e4d      	subs	r5, r1, #1
  4002a2:	b321      	cbz	r1, 4002ee <twi_master_read+0xc2>
			return TWI_ERROR_TIMEOUT;
		}
				
		/* Last byte ? */
		if (cnt == 1  && !stop_sent) {
  4002a4:	2b01      	cmp	r3, #1
  4002a6:	d104      	bne.n	4002b2 <twi_master_read+0x86>
  4002a8:	bba7      	cbnz	r7, 400314 <twi_master_read+0xe8>
			p_twi->TWI_CR = TWI_CR_STOP;
  4002aa:	f8c0 8000 	str.w	r8, [r0]
			stop_sent = 1;
  4002ae:	4667      	mov	r7, ip
  4002b0:	e030      	b.n	400314 <twi_master_read+0xe8>
		}

		if (!(status & TWI_SR_RXRDY)) {
  4002b2:	f012 0f02 	tst.w	r2, #2
  4002b6:	d005      	beq.n	4002c4 <twi_master_read+0x98>
			continue;
		}
		*buffer++ = p_twi->TWI_RHR;
  4002b8:	6b02      	ldr	r2, [r0, #48]	; 0x30
  4002ba:	7022      	strb	r2, [r4, #0]

		cnt--;
  4002bc:	3b01      	subs	r3, #1
		}

		if (!(status & TWI_SR_RXRDY)) {
			continue;
		}
		*buffer++ = p_twi->TWI_RHR;
  4002be:	3401      	adds	r4, #1

		cnt--;
		timeout = TWI_TIMEOUT;
  4002c0:	4631      	mov	r1, r6
  4002c2:	e000      	b.n	4002c6 <twi_master_read+0x9a>
  4002c4:	4629      	mov	r1, r5
	} else {
		p_twi->TWI_CR = TWI_CR_START;
		stop_sent = 0;
	}

	while (cnt > 0) {
  4002c6:	2b00      	cmp	r3, #0
  4002c8:	d1e6      	bne.n	400298 <twi_master_read+0x6c>

		cnt--;
		timeout = TWI_TIMEOUT;
	}

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
  4002ca:	6a03      	ldr	r3, [r0, #32]
  4002cc:	f013 0f01 	tst.w	r3, #1
  4002d0:	d0fb      	beq.n	4002ca <twi_master_read+0x9e>
	}

	p_twi->TWI_SR;
  4002d2:	6a03      	ldr	r3, [r0, #32]

	cpu_irq_enable();
  4002d4:	2201      	movs	r2, #1
  4002d6:	4b13      	ldr	r3, [pc, #76]	; (400324 <twi_master_read+0xf8>)
  4002d8:	701a      	strb	r2, [r3, #0]
  4002da:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  4002de:	b662      	cpsie	i

	return TWI_SUCCESS;
  4002e0:	e01c      	b.n	40031c <twi_master_read+0xf0>
	uint8_t stop_sent = 0;
	uint32_t timeout = TWI_TIMEOUT;;
	
	/* Check argument */
	if (cnt == 0) {
		return TWI_INVALID_ARGUMENT;
  4002e2:	f04f 0e01 	mov.w	lr, #1
  4002e6:	e019      	b.n	40031c <twi_master_read+0xf0>
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
  4002e8:	f04f 0e05 	mov.w	lr, #5
  4002ec:	e016      	b.n	40031c <twi_master_read+0xf0>
		}

		if (!timeout--) {
			return TWI_ERROR_TIMEOUT;
  4002ee:	f04f 0e09 	mov.w	lr, #9
  4002f2:	e013      	b.n	40031c <twi_master_read+0xf0>
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
  4002f4:	f04f 0e05 	mov.w	lr, #5
  4002f8:	e010      	b.n	40031c <twi_master_read+0xf0>
		p_twi->TWI_CR = TWI_CR_START;
		stop_sent = 0;
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
  4002fa:	6a02      	ldr	r2, [r0, #32]
		if (status & TWI_SR_NACK) {
  4002fc:	f412 7e80 	ands.w	lr, r2, #256	; 0x100
  400300:	d1f8      	bne.n	4002f4 <twi_master_read+0xc8>
  400302:	f643 2597 	movw	r5, #14999	; 0x3a97
			continue;
		}
		*buffer++ = p_twi->TWI_RHR;

		cnt--;
		timeout = TWI_TIMEOUT;
  400306:	f643 2698 	movw	r6, #15000	; 0x3a98
			return TWI_ERROR_TIMEOUT;
		}
				
		/* Last byte ? */
		if (cnt == 1  && !stop_sent) {
			p_twi->TWI_CR = TWI_CR_STOP;
  40030a:	f04f 0802 	mov.w	r8, #2
			stop_sent = 1;
  40030e:	f04f 0c01 	mov.w	ip, #1
  400312:	e7c7      	b.n	4002a4 <twi_master_read+0x78>
		}

		if (!(status & TWI_SR_RXRDY)) {
  400314:	f012 0f02 	tst.w	r2, #2
  400318:	d0bd      	beq.n	400296 <twi_master_read+0x6a>
  40031a:	e7cd      	b.n	4002b8 <twi_master_read+0x8c>
	p_twi->TWI_SR;

	cpu_irq_enable();

	return TWI_SUCCESS;
}
  40031c:	4670      	mov	r0, lr
  40031e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400322:	bf00      	nop
  400324:	2000024c 	.word	0x2000024c

00400328 <twi_master_write>:
 * \param p_packet Packet information and data (see \ref twi_packet_t).
 *
 * \return TWI_SUCCESS if all bytes were written, error code otherwise.
 */
uint32_t twi_master_write(Twi *p_twi, twi_packet_t *p_packet)
{
  400328:	4602      	mov	r2, r0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  40032a:	b672      	cpsid	i
  40032c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  400330:	2000      	movs	r0, #0
  400332:	4b1d      	ldr	r3, [pc, #116]	; (4003a8 <twi_master_write+0x80>)
  400334:	7018      	strb	r0, [r3, #0]

	uint32_t status;
	uint32_t cnt = p_packet->length;
  400336:	68c8      	ldr	r0, [r1, #12]
	uint8_t *buffer = p_packet->buffer;

	/* Check argument */
	if (cnt == 0) {
  400338:	b360      	cbz	r0, 400394 <twi_master_write+0x6c>
 * \param p_packet Packet information and data (see \ref twi_packet_t).
 *
 * \return TWI_SUCCESS if all bytes were written, error code otherwise.
 */
uint32_t twi_master_write(Twi *p_twi, twi_packet_t *p_packet)
{
  40033a:	b410      	push	{r4}
	cpu_irq_disable();

	uint32_t status;
	uint32_t cnt = p_packet->length;
	uint8_t *buffer = p_packet->buffer;
  40033c:	688c      	ldr	r4, [r1, #8]
		return TWI_INVALID_ARGUMENT;
	}

	/* Set write mode, slave address and 3 internal address byte lengths */
	//p_twi->TWI_MMR = 0;
	p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip);
  40033e:	7c0b      	ldrb	r3, [r1, #16]
  400340:	041b      	lsls	r3, r3, #16
  400342:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
  400346:	6053      	str	r3, [r2, #4]
	//p_twi->TWI_IADR = 0;
	//p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);

	/* Send all bytes */
	while (cnt > 0) {
		status = p_twi->TWI_SR;
  400348:	6a13      	ldr	r3, [r2, #32]
		if (status & TWI_SR_NACK) {
  40034a:	f413 7f80 	tst.w	r3, #256	; 0x100
  40034e:	d004      	beq.n	40035a <twi_master_write+0x32>
  400350:	e022      	b.n	400398 <twi_master_write+0x70>
	//p_twi->TWI_IADR = 0;
	//p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);

	/* Send all bytes */
	while (cnt > 0) {
		status = p_twi->TWI_SR;
  400352:	6a13      	ldr	r3, [r2, #32]
		if (status & TWI_SR_NACK) {
  400354:	f413 7f80 	tst.w	r3, #256	; 0x100
  400358:	d120      	bne.n	40039c <twi_master_write+0x74>
 			return TWI_RECEIVE_NACK;
 		}

		if (!(status & TWI_SR_TXRDY)) {
  40035a:	f013 0f04 	tst.w	r3, #4
  40035e:	d003      	beq.n	400368 <twi_master_write+0x40>
 			continue;
 		}
		p_twi->TWI_THR = *buffer++;
  400360:	7823      	ldrb	r3, [r4, #0]
  400362:	6353      	str	r3, [r2, #52]	; 0x34

		cnt--;
  400364:	3801      	subs	r0, #1
 		}

		if (!(status & TWI_SR_TXRDY)) {
 			continue;
 		}
		p_twi->TWI_THR = *buffer++;
  400366:	3401      	adds	r4, #1
	/* Set internal address for remote chip */
	//p_twi->TWI_IADR = 0;
	//p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);

	/* Send all bytes */
	while (cnt > 0) {
  400368:	2800      	cmp	r0, #0
  40036a:	d1f2      	bne.n	400352 <twi_master_write+0x2a>

		cnt--;
	}

	while (1) {
		status = p_twi->TWI_SR;
  40036c:	6a13      	ldr	r3, [r2, #32]
		if (status & TWI_SR_NACK) {
  40036e:	f413 7080 	ands.w	r0, r3, #256	; 0x100
  400372:	d115      	bne.n	4003a0 <twi_master_write+0x78>
			return TWI_RECEIVE_NACK;
		}

		if (status & TWI_SR_TXRDY) {
  400374:	f013 0f04 	tst.w	r3, #4
  400378:	d0f8      	beq.n	40036c <twi_master_write+0x44>
			break;
		}

	}

	p_twi->TWI_CR = TWI_CR_STOP;
  40037a:	2302      	movs	r3, #2
  40037c:	6013      	str	r3, [r2, #0]

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
  40037e:	6a13      	ldr	r3, [r2, #32]
  400380:	f013 0f01 	tst.w	r3, #1
  400384:	d0fb      	beq.n	40037e <twi_master_write+0x56>
	}

	cpu_irq_enable();
  400386:	2201      	movs	r2, #1
  400388:	4b07      	ldr	r3, [pc, #28]	; (4003a8 <twi_master_write+0x80>)
  40038a:	701a      	strb	r2, [r3, #0]
  40038c:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  400390:	b662      	cpsie	i

	return TWI_SUCCESS;
  400392:	e006      	b.n	4003a2 <twi_master_write+0x7a>
	uint32_t cnt = p_packet->length;
	uint8_t *buffer = p_packet->buffer;

	/* Check argument */
	if (cnt == 0) {
		return TWI_INVALID_ARGUMENT;
  400394:	2001      	movs	r0, #1
	}

	cpu_irq_enable();

	return TWI_SUCCESS;
}
  400396:	4770      	bx	lr

	/* Send all bytes */
	while (cnt > 0) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
 			return TWI_RECEIVE_NACK;
  400398:	2005      	movs	r0, #5
  40039a:	e002      	b.n	4003a2 <twi_master_write+0x7a>
  40039c:	2005      	movs	r0, #5
  40039e:	e000      	b.n	4003a2 <twi_master_write+0x7a>
	}

	while (1) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
  4003a0:	2005      	movs	r0, #5
	}

	cpu_irq_enable();

	return TWI_SUCCESS;
}
  4003a2:	bc10      	pop	{r4}
  4003a4:	4770      	bx	lr
  4003a6:	bf00      	nop
  4003a8:	2000024c 	.word	0x2000024c

004003ac <flash_init>:
 * \param ul_fws The number of wait states in cycle (no shift).
 *
 * \return 0 if successful; otherwise returns an error code.
 */
uint32_t flash_init(uint32_t ul_mode, uint32_t ul_fws)
{
  4003ac:	b508      	push	{r3, lr}
	efc_init(EFC, ul_mode, ul_fws);
  4003ae:	460a      	mov	r2, r1
  4003b0:	4601      	mov	r1, r0
  4003b2:	4802      	ldr	r0, [pc, #8]	; (4003bc <flash_init+0x10>)
  4003b4:	4b02      	ldr	r3, [pc, #8]	; (4003c0 <flash_init+0x14>)
  4003b6:	4798      	blx	r3
#ifdef EFC1
	efc_init(EFC1, ul_mode, ul_fws);
#endif

	return FLASH_RC_OK;
}
  4003b8:	2000      	movs	r0, #0
  4003ba:	bd08      	pop	{r3, pc}
  4003bc:	400e0a00 	.word	0x400e0a00
  4003c0:	004001c1 	.word	0x004001c1

004003c4 <flash_erase_sector>:
 * \param ul_address Flash sector start address.
 *
 * \return 0 if successful; otherwise returns an error code.
 */
uint32_t flash_erase_sector(uint32_t ul_address)
{
  4003c4:	b508      	push	{r3, lr}
	Efc *p_efc;
	uint16_t us_page;

	translate_address(&p_efc, ul_address, &us_page, NULL);

	if (EFC_RC_OK != efc_perform_command(p_efc, EFC_FCMD_ES, us_page)) {
  4003c6:	f5a0 0280 	sub.w	r2, r0, #4194304	; 0x400000
  4003ca:	f3c2 224f 	ubfx	r2, r2, #9, #16
  4003ce:	2111      	movs	r1, #17
  4003d0:	4803      	ldr	r0, [pc, #12]	; (4003e0 <flash_erase_sector+0x1c>)
  4003d2:	4b04      	ldr	r3, [pc, #16]	; (4003e4 <flash_erase_sector+0x20>)
  4003d4:	4798      	blx	r3
  4003d6:	2800      	cmp	r0, #0
		return FLASH_RC_ERROR;
	}

	return FLASH_RC_OK;
}
  4003d8:	bf18      	it	ne
  4003da:	2010      	movne	r0, #16
  4003dc:	bd08      	pop	{r3, pc}
  4003de:	bf00      	nop
  4003e0:	400e0a00 	.word	0x400e0a00
  4003e4:	004001dd 	.word	0x004001dd

004003e8 <flash_write>:
 *
 * \return 0 if successful, otherwise returns an error code.
 */
uint32_t flash_write(uint32_t ul_address, const void *p_buffer,
		uint32_t ul_size, uint32_t ul_erase_flag)
{
  4003e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4003ec:	b085      	sub	sp, #20
  4003ee:	9100      	str	r1, [sp, #0]
  4003f0:	9303      	str	r3, [sp, #12]
#else
	Assert(ul_addr >= IFLASH_ADDR);
	Assert(ul_addr <= (IFLASH_ADDR + IFLASH_SIZE));

	p_efc = EFC;
	us_page = (ul_addr - IFLASH_ADDR) / IFLASH_PAGE_SIZE;
  4003f2:	f5a0 0380 	sub.w	r3, r0, #4194304	; 0x400000
  4003f6:	f3c3 2b4f 	ubfx	fp, r3, #9, #16
	us_offset = (ul_addr - IFLASH_ADDR) % IFLASH_PAGE_SIZE;
  4003fa:	f3c0 0708 	ubfx	r7, r0, #0, #9
#else
	UNUSED(ul_fws_temp);
#endif

	/* Write all pages */
	while (ul_size > 0) {
  4003fe:	2a00      	cmp	r2, #0
  400400:	d049      	beq.n	400496 <flash_write+0xae>
  400402:	4692      	mov	sl, r2
				ul_size);
		compute_address(p_efc, us_page, 0, &ul_page_addr);
		us_padding = IFLASH_PAGE_SIZE - us_offset - writeSize;

		/* Pre-buffer data */
		memcpy(puc_page_buffer, (void *)ul_page_addr, us_offset);
  400404:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 4004ac <flash_write+0xc4>
  400408:	f509 75fe 	add.w	r5, r9, #508	; 0x1fc
#endif

	/* Write all pages */
	while (ul_size > 0) {
		/* Copy data in temporary buffer to avoid alignment problems. */
		writeSize = Min((uint32_t) IFLASH_PAGE_SIZE - us_offset,
  40040c:	f5c7 7300 	rsb	r3, r7, #512	; 0x200
  400410:	9302      	str	r3, [sp, #8]
  400412:	461c      	mov	r4, r3
  400414:	4553      	cmp	r3, sl
  400416:	bf28      	it	cs
  400418:	4654      	movcs	r4, sl
/* One bank flash */
#else
	/* avoid Cppcheck Warning */
	UNUSED(p_efc);
	/* Compute address */
	ul_addr = IFLASH_ADDR + us_page * IFLASH_PAGE_SIZE + us_offset;
  40041a:	f8cd b004 	str.w	fp, [sp, #4]
  40041e:	f50b 5300 	add.w	r3, fp, #8192	; 0x2000
  400422:	ea4f 2843 	mov.w	r8, r3, lsl #9
				ul_size);
		compute_address(p_efc, us_page, 0, &ul_page_addr);
		us_padding = IFLASH_PAGE_SIZE - us_offset - writeSize;

		/* Pre-buffer data */
		memcpy(puc_page_buffer, (void *)ul_page_addr, us_offset);
  400426:	463a      	mov	r2, r7
  400428:	4641      	mov	r1, r8
  40042a:	4648      	mov	r0, r9
  40042c:	4e1c      	ldr	r6, [pc, #112]	; (4004a0 <flash_write+0xb8>)
  40042e:	47b0      	blx	r6

		/* Buffer data */
		memcpy(puc_page_buffer + us_offset, p_buffer, writeSize);
  400430:	4622      	mov	r2, r4
  400432:	9900      	ldr	r1, [sp, #0]
  400434:	eb09 0007 	add.w	r0, r9, r7
  400438:	47b0      	blx	r6

		/* Post-buffer data */
		memcpy(puc_page_buffer + us_offset + writeSize,
  40043a:	1938      	adds	r0, r7, r4
  40043c:	9a02      	ldr	r2, [sp, #8]
  40043e:	1b12      	subs	r2, r2, r4
  400440:	eb04 0108 	add.w	r1, r4, r8
  400444:	b292      	uxth	r2, r2
  400446:	4439      	add	r1, r7
  400448:	4448      	add	r0, r9
  40044a:	47b0      	blx	r6
  40044c:	f1a9 0304 	sub.w	r3, r9, #4
  400450:	f1a8 0204 	sub.w	r2, r8, #4
		 * unpredictable data corruption.
		 */
		p_aligned_dest = (uint32_t *) ul_page_addr;
		for (ul_idx = 0; ul_idx < (IFLASH_PAGE_SIZE / sizeof(uint32_t));
				++ul_idx) {
			*p_aligned_dest++ = gs_ul_page_buffer[ul_idx];
  400454:	f853 1f04 	ldr.w	r1, [r3, #4]!
  400458:	f842 1f04 	str.w	r1, [r2, #4]!
		/* Write page.
		 * Writing 8-bit and 16-bit data is not allowed and may lead to
		 * unpredictable data corruption.
		 */
		p_aligned_dest = (uint32_t *) ul_page_addr;
		for (ul_idx = 0; ul_idx < (IFLASH_PAGE_SIZE / sizeof(uint32_t));
  40045c:	42ab      	cmp	r3, r5
  40045e:	d1f9      	bne.n	400454 <flash_write+0x6c>
				++ul_idx) {
			*p_aligned_dest++ = gs_ul_page_buffer[ul_idx];
		}

		if (ul_erase_flag) {
  400460:	9b03      	ldr	r3, [sp, #12]
  400462:	b12b      	cbz	r3, 400470 <flash_write+0x88>
			ul_error = efc_perform_command(p_efc, EFC_FCMD_EWP,
  400464:	9a01      	ldr	r2, [sp, #4]
  400466:	2103      	movs	r1, #3
  400468:	480e      	ldr	r0, [pc, #56]	; (4004a4 <flash_write+0xbc>)
  40046a:	4b0f      	ldr	r3, [pc, #60]	; (4004a8 <flash_write+0xc0>)
  40046c:	4798      	blx	r3
  40046e:	e004      	b.n	40047a <flash_write+0x92>
					us_page);
		} else {
			ul_error = efc_perform_command(p_efc, EFC_FCMD_WP,
  400470:	9a01      	ldr	r2, [sp, #4]
  400472:	2101      	movs	r1, #1
  400474:	480b      	ldr	r0, [pc, #44]	; (4004a4 <flash_write+0xbc>)
  400476:	4b0c      	ldr	r3, [pc, #48]	; (4004a8 <flash_write+0xc0>)
  400478:	4798      	blx	r3
					us_page);
		}

		if (ul_error) {
  40047a:	b968      	cbnz	r0, 400498 <flash_write+0xb0>
			return ul_error;
		}

		/* Progression */
		p_buffer = (void *)((uint32_t) p_buffer + writeSize);
  40047c:	9b00      	ldr	r3, [sp, #0]
  40047e:	4423      	add	r3, r4
  400480:	9300      	str	r3, [sp, #0]
		ul_size -= writeSize;
		us_page++;
  400482:	f10b 0b01 	add.w	fp, fp, #1
  400486:	fa1f fb8b 	uxth.w	fp, fp
		us_offset = 0;
  40048a:	2700      	movs	r7, #0
#else
	UNUSED(ul_fws_temp);
#endif

	/* Write all pages */
	while (ul_size > 0) {
  40048c:	ebba 0a04 	subs.w	sl, sl, r4
  400490:	d1bc      	bne.n	40040c <flash_write+0x24>
#if SAM3S || SAM3N || SAM3XA || SAM3U
	/* According to the errata, restore the wait state value. */
	efc_set_wait_state(p_efc, ul_fws_temp);
#endif

	return FLASH_RC_OK;
  400492:	4638      	mov	r0, r7
  400494:	e000      	b.n	400498 <flash_write+0xb0>
  400496:	2000      	movs	r0, #0
}
  400498:	b005      	add	sp, #20
  40049a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40049e:	bf00      	nop
  4004a0:	00404f89 	.word	0x00404f89
  4004a4:	400e0a00 	.word	0x400e0a00
  4004a8:	004001dd 	.word	0x004001dd
  4004ac:	2000069c 	.word	0x2000069c

004004b0 <flash_lock>:
 *
 * \return 0 if successful, otherwise returns an error code.
 */
uint32_t flash_lock(uint32_t ul_start, uint32_t ul_end,
		uint32_t *pul_actual_start, uint32_t *pul_actual_end)
{
  4004b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
static void compute_lock_range(uint32_t ul_start, uint32_t ul_end,
		uint32_t *pul_actual_start, uint32_t *pul_actual_end)
{
	uint32_t ul_actual_start, ul_actual_end;

	ul_actual_start = ul_start - (ul_start % IFLASH_LOCK_REGION_SIZE);
  4004b4:	f420 50ff 	bic.w	r0, r0, #8160	; 0x1fe0
  4004b8:	f020 001f 	bic.w	r0, r0, #31
	ul_actual_end = ul_end - (ul_end % IFLASH_LOCK_REGION_SIZE) +
  4004bc:	f421 51ff 	bic.w	r1, r1, #8160	; 0x1fe0
  4004c0:	f021 011f 	bic.w	r1, r1, #31
  4004c4:	f501 54ff 	add.w	r4, r1, #8160	; 0x1fe0
  4004c8:	341f      	adds	r4, #31
			IFLASH_LOCK_REGION_SIZE / IFLASH_PAGE_SIZE;

	/* Compute actual lock range and store it */
	compute_lock_range(ul_start, ul_end, &ul_actual_start, &ul_actual_end);

	if (pul_actual_start != NULL) {
  4004ca:	b102      	cbz	r2, 4004ce <flash_lock+0x1e>
		*pul_actual_start = ul_actual_start;
  4004cc:	6010      	str	r0, [r2, #0]
	}

	if (pul_actual_end != NULL) {
  4004ce:	b103      	cbz	r3, 4004d2 <flash_lock+0x22>
		*pul_actual_end = ul_actual_end;
  4004d0:	601c      	str	r4, [r3, #0]
#else
	Assert(ul_addr >= IFLASH_ADDR);
	Assert(ul_addr <= (IFLASH_ADDR + IFLASH_SIZE));

	p_efc = EFC;
	us_page = (ul_addr - IFLASH_ADDR) / IFLASH_PAGE_SIZE;
  4004d2:	f5a0 0480 	sub.w	r4, r0, #4194304	; 0x400000
  4004d6:	0a64      	lsrs	r4, r4, #9
  4004d8:	b2a4      	uxth	r4, r4
  4004da:	4d0d      	ldr	r5, [pc, #52]	; (400510 <flash_lock+0x60>)
  4004dc:	440d      	add	r5, r1
  4004de:	f3c5 254f 	ubfx	r5, r5, #9, #16
	/* Compute page numbers */
	translate_address(&p_efc, ul_actual_start, &us_start_page, 0);
	translate_address(0, ul_actual_end, &us_end_page, 0);

	/* Lock all pages */
	while (us_start_page < us_end_page) {
  4004e2:	42a5      	cmp	r5, r4
  4004e4:	d90e      	bls.n	400504 <flash_lock+0x54>
		ul_error = efc_perform_command(p_efc, EFC_FCMD_SLB, us_start_page);
  4004e6:	f8df 8030 	ldr.w	r8, [pc, #48]	; 400518 <flash_lock+0x68>
  4004ea:	2708      	movs	r7, #8
  4004ec:	4e09      	ldr	r6, [pc, #36]	; (400514 <flash_lock+0x64>)
  4004ee:	4622      	mov	r2, r4
  4004f0:	4639      	mov	r1, r7
  4004f2:	4640      	mov	r0, r8
  4004f4:	47b0      	blx	r6

		if (ul_error) {
  4004f6:	b940      	cbnz	r0, 40050a <flash_lock+0x5a>
			return ul_error;
		}
		us_start_page += us_num_pages_in_region;
  4004f8:	3410      	adds	r4, #16
  4004fa:	b2a4      	uxth	r4, r4
	/* Compute page numbers */
	translate_address(&p_efc, ul_actual_start, &us_start_page, 0);
	translate_address(0, ul_actual_end, &us_end_page, 0);

	/* Lock all pages */
	while (us_start_page < us_end_page) {
  4004fc:	42ac      	cmp	r4, r5
  4004fe:	d3f6      	bcc.n	4004ee <flash_lock+0x3e>
  400500:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return ul_error;
		}
		us_start_page += us_num_pages_in_region;
	}

	return FLASH_RC_OK;
  400504:	2000      	movs	r0, #0
  400506:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
}
  40050a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40050e:	bf00      	nop
  400510:	ffc01fff 	.word	0xffc01fff
  400514:	004001dd 	.word	0x004001dd
  400518:	400e0a00 	.word	0x400e0a00

0040051c <flash_unlock>:
 *
 * \return 0 if successful, otherwise returns an error code.
 */
uint32_t flash_unlock(uint32_t ul_start, uint32_t ul_end,
		uint32_t *pul_actual_start, uint32_t *pul_actual_end)
{
  40051c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
static void compute_lock_range(uint32_t ul_start, uint32_t ul_end,
		uint32_t *pul_actual_start, uint32_t *pul_actual_end)
{
	uint32_t ul_actual_start, ul_actual_end;

	ul_actual_start = ul_start - (ul_start % IFLASH_LOCK_REGION_SIZE);
  400520:	f420 50ff 	bic.w	r0, r0, #8160	; 0x1fe0
  400524:	f020 001f 	bic.w	r0, r0, #31
	ul_actual_end = ul_end - (ul_end % IFLASH_LOCK_REGION_SIZE) +
  400528:	f421 51ff 	bic.w	r1, r1, #8160	; 0x1fe0
  40052c:	f021 011f 	bic.w	r1, r1, #31
  400530:	f501 54ff 	add.w	r4, r1, #8160	; 0x1fe0
  400534:	341f      	adds	r4, #31
	uint16_t us_num_pages_in_region =
			IFLASH_LOCK_REGION_SIZE / IFLASH_PAGE_SIZE;

	/* Compute actual unlock range and store it */
	compute_lock_range(ul_start, ul_end, &ul_actual_start, &ul_actual_end);
	if (pul_actual_start != NULL) {
  400536:	b102      	cbz	r2, 40053a <flash_unlock+0x1e>
		*pul_actual_start = ul_actual_start;
  400538:	6010      	str	r0, [r2, #0]
	}
	if (pul_actual_end != NULL) {
  40053a:	b103      	cbz	r3, 40053e <flash_unlock+0x22>
		*pul_actual_end = ul_actual_end;
  40053c:	601c      	str	r4, [r3, #0]
#else
	Assert(ul_addr >= IFLASH_ADDR);
	Assert(ul_addr <= (IFLASH_ADDR + IFLASH_SIZE));

	p_efc = EFC;
	us_page = (ul_addr - IFLASH_ADDR) / IFLASH_PAGE_SIZE;
  40053e:	f5a0 0480 	sub.w	r4, r0, #4194304	; 0x400000
  400542:	0a64      	lsrs	r4, r4, #9
  400544:	b2a4      	uxth	r4, r4
  400546:	4d0d      	ldr	r5, [pc, #52]	; (40057c <flash_unlock+0x60>)
  400548:	440d      	add	r5, r1
  40054a:	f3c5 254f 	ubfx	r5, r5, #9, #16
	/* Compute page numbers */
	translate_address(&p_efc, ul_actual_start, &us_start_page, 0);
	translate_address(0, ul_actual_end, &us_end_page, 0);

	/* Unlock all pages */
	while (us_start_page < us_end_page) {
  40054e:	42a5      	cmp	r5, r4
  400550:	d90e      	bls.n	400570 <flash_unlock+0x54>
		ul_error = efc_perform_command(p_efc, EFC_FCMD_CLB,
  400552:	f8df 8030 	ldr.w	r8, [pc, #48]	; 400584 <flash_unlock+0x68>
  400556:	2709      	movs	r7, #9
  400558:	4e09      	ldr	r6, [pc, #36]	; (400580 <flash_unlock+0x64>)
  40055a:	4622      	mov	r2, r4
  40055c:	4639      	mov	r1, r7
  40055e:	4640      	mov	r0, r8
  400560:	47b0      	blx	r6
				us_start_page);
		if (ul_error) {
  400562:	b940      	cbnz	r0, 400576 <flash_unlock+0x5a>
			return ul_error;
		}
		us_start_page += us_num_pages_in_region;
  400564:	3410      	adds	r4, #16
  400566:	b2a4      	uxth	r4, r4
	/* Compute page numbers */
	translate_address(&p_efc, ul_actual_start, &us_start_page, 0);
	translate_address(0, ul_actual_end, &us_end_page, 0);

	/* Unlock all pages */
	while (us_start_page < us_end_page) {
  400568:	42ac      	cmp	r4, r5
  40056a:	d3f6      	bcc.n	40055a <flash_unlock+0x3e>
  40056c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return ul_error;
		}
		us_start_page += us_num_pages_in_region;
	}

	return FLASH_RC_OK;
  400570:	2000      	movs	r0, #0
  400572:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
}
  400576:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40057a:	bf00      	nop
  40057c:	ffc01fff 	.word	0xffc01fff
  400580:	004001dd 	.word	0x004001dd
  400584:	400e0a00 	.word	0x400e0a00

00400588 <DAC_write_cv>:


#define VREF 10
#define max 1023

void DAC_write_cv(float voltage, uint8_t channel){
  400588:	b538      	push	{r3, r4, r5, lr}
  40058a:	460d      	mov	r5, r1
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  40058c:	b672      	cpsid	i
  40058e:	f3bf 8f5f 	dmb	sy

	cpu_irq_disable();
  400592:	2200      	movs	r2, #0
  400594:	4b2e      	ldr	r3, [pc, #184]	; (400650 <DAC_write_cv+0xc8>)
  400596:	701a      	strb	r2, [r3, #0]

	float float_voltage = (max*(voltage))/VREF;
	uint16_t dac_voltage = (uint16_t) float_voltage;
  400598:	492e      	ldr	r1, [pc, #184]	; (400654 <DAC_write_cv+0xcc>)
  40059a:	4b2f      	ldr	r3, [pc, #188]	; (400658 <DAC_write_cv+0xd0>)
  40059c:	4798      	blx	r3
  40059e:	4b2f      	ldr	r3, [pc, #188]	; (40065c <DAC_write_cv+0xd4>)
  4005a0:	4798      	blx	r3
  4005a2:	b284      	uxth	r4, r0

	uint8_t low_byte;
	uint8_t high_byte;

	if (channel == CHANNEL_1){
  4005a4:	b9bd      	cbnz	r5, 4005d6 <DAC_write_cv+0x4e>
		low_byte = (uint8_t) (dac_voltage << 2);
		high_byte = ((uint8_t) (dac_voltage >> 6)) | (0x90);
		REG_PIOB_CODR |=  PIO_PER_P13;
  4005a6:	4a2e      	ldr	r2, [pc, #184]	; (400660 <DAC_write_cv+0xd8>)
  4005a8:	6813      	ldr	r3, [r2, #0]
  4005aa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  4005ae:	6013      	str	r3, [r2, #0]
		low_byte = (uint8_t) (dac_voltage << 2);
		high_byte = ((uint8_t) (dac_voltage >> 6)) | (0xA0);
		REG_PIOB_CODR |=  PIO_PER_P14;
	}
	
	SPI_byteSend(high_byte);
  4005b0:	09a0      	lsrs	r0, r4, #6
  4005b2:	f060 006f 	orn	r0, r0, #111	; 0x6f
  4005b6:	b2c0      	uxtb	r0, r0
  4005b8:	4d2a      	ldr	r5, [pc, #168]	; (400664 <DAC_write_cv+0xdc>)
  4005ba:	47a8      	blx	r5
	SPI_byteSend(low_byte);
  4005bc:	00a0      	lsls	r0, r4, #2
  4005be:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
  4005c2:	47a8      	blx	r5
	delay_us(3);
  4005c4:	2016      	movs	r0, #22
  4005c6:	4b28      	ldr	r3, [pc, #160]	; (400668 <DAC_write_cv+0xe0>)
  4005c8:	4798      	blx	r3

	if (channel == CHANNEL_1){
		REG_PIOB_SODR |=  PIO_PER_P13;
  4005ca:	4a28      	ldr	r2, [pc, #160]	; (40066c <DAC_write_cv+0xe4>)
  4005cc:	6813      	ldr	r3, [r2, #0]
  4005ce:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  4005d2:	6013      	str	r3, [r2, #0]
  4005d4:	e035      	b.n	400642 <DAC_write_cv+0xba>
	if (channel == CHANNEL_1){
		low_byte = (uint8_t) (dac_voltage << 2);
		high_byte = ((uint8_t) (dac_voltage >> 6)) | (0x90);
		REG_PIOB_CODR |=  PIO_PER_P13;
	}
	else if (channel == CHANNEL_2){
  4005d6:	2d01      	cmp	r5, #1
  4005d8:	d117      	bne.n	40060a <DAC_write_cv+0x82>
		low_byte = (uint8_t) (dac_voltage << 2);
		high_byte = ((uint8_t) (dac_voltage >> 6)) | (0xA0);
		REG_PIOB_CODR |=  PIO_PER_P13;
  4005da:	4a21      	ldr	r2, [pc, #132]	; (400660 <DAC_write_cv+0xd8>)
  4005dc:	6813      	ldr	r3, [r2, #0]
  4005de:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  4005e2:	6013      	str	r3, [r2, #0]
		low_byte = (uint8_t) (dac_voltage << 2);
		high_byte = ((uint8_t) (dac_voltage >> 6)) | (0xA0);
		REG_PIOB_CODR |=  PIO_PER_P14;
	}
	
	SPI_byteSend(high_byte);
  4005e4:	09a0      	lsrs	r0, r4, #6
  4005e6:	f060 005f 	orn	r0, r0, #95	; 0x5f
  4005ea:	b2c0      	uxtb	r0, r0
  4005ec:	4d1d      	ldr	r5, [pc, #116]	; (400664 <DAC_write_cv+0xdc>)
  4005ee:	47a8      	blx	r5
	SPI_byteSend(low_byte);
  4005f0:	00a0      	lsls	r0, r4, #2
  4005f2:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
  4005f6:	47a8      	blx	r5
	delay_us(3);
  4005f8:	2016      	movs	r0, #22
  4005fa:	4b1b      	ldr	r3, [pc, #108]	; (400668 <DAC_write_cv+0xe0>)
  4005fc:	4798      	blx	r3

	if (channel == CHANNEL_1){
		REG_PIOB_SODR |=  PIO_PER_P13;
	}
	else if (channel == CHANNEL_2){
		REG_PIOB_SODR |=  PIO_PER_P13;
  4005fe:	4a1b      	ldr	r2, [pc, #108]	; (40066c <DAC_write_cv+0xe4>)
  400600:	6813      	ldr	r3, [r2, #0]
  400602:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  400606:	6013      	str	r3, [r2, #0]
  400608:	e01b      	b.n	400642 <DAC_write_cv+0xba>
	else if (channel == CHANNEL_2){
		low_byte = (uint8_t) (dac_voltage << 2);
		high_byte = ((uint8_t) (dac_voltage >> 6)) | (0xA0);
		REG_PIOB_CODR |=  PIO_PER_P13;
	}
	else if (channel == CHANNEL_3){
  40060a:	2d02      	cmp	r5, #2
		low_byte = (uint8_t) (dac_voltage << 2);
		high_byte = ((uint8_t) (dac_voltage >> 6)) | (0x90);
		REG_PIOB_CODR |=  PIO_PER_P14;
  40060c:	4a14      	ldr	r2, [pc, #80]	; (400660 <DAC_write_cv+0xd8>)
  40060e:	6813      	ldr	r3, [r2, #0]
  400610:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  400614:	6013      	str	r3, [r2, #0]
		low_byte = (uint8_t) (dac_voltage << 2);
		high_byte = ((uint8_t) (dac_voltage >> 6)) | (0xA0);
		REG_PIOB_CODR |=  PIO_PER_P14;
	}
	
	SPI_byteSend(high_byte);
  400616:	ea4f 1094 	mov.w	r0, r4, lsr #6
  40061a:	bf0c      	ite	eq
  40061c:	f060 006f 	orneq	r0, r0, #111	; 0x6f
  400620:	f060 005f 	ornne	r0, r0, #95	; 0x5f
  400624:	b2c0      	uxtb	r0, r0
  400626:	4d0f      	ldr	r5, [pc, #60]	; (400664 <DAC_write_cv+0xdc>)
  400628:	47a8      	blx	r5
	SPI_byteSend(low_byte);
  40062a:	00a0      	lsls	r0, r4, #2
  40062c:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
  400630:	47a8      	blx	r5
	delay_us(3);
  400632:	2016      	movs	r0, #22
  400634:	4b0c      	ldr	r3, [pc, #48]	; (400668 <DAC_write_cv+0xe0>)
  400636:	4798      	blx	r3
	}
	else if (channel == CHANNEL_3){
		REG_PIOB_SODR |=  PIO_PER_P14;
	}
	else{
		REG_PIOB_SODR |=  PIO_PER_P14;
  400638:	4a0c      	ldr	r2, [pc, #48]	; (40066c <DAC_write_cv+0xe4>)
  40063a:	6813      	ldr	r3, [r2, #0]
  40063c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  400640:	6013      	str	r3, [r2, #0]
	}

	cpu_irq_enable();
  400642:	2201      	movs	r2, #1
  400644:	4b02      	ldr	r3, [pc, #8]	; (400650 <DAC_write_cv+0xc8>)
  400646:	701a      	strb	r2, [r3, #0]
  400648:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  40064c:	b662      	cpsie	i
  40064e:	bd38      	pop	{r3, r4, r5, pc}
  400650:	2000024c 	.word	0x2000024c
  400654:	42cc999a 	.word	0x42cc999a
  400658:	00404c59 	.word	0x00404c59
  40065c:	00404ef9 	.word	0x00404ef9
  400660:	400e1034 	.word	0x400e1034
  400664:	00403d1d 	.word	0x00403d1d
  400668:	20000089 	.word	0x20000089
  40066c:	400e1030 	.word	0x400e1030

00400670 <DAC_write_gate_on>:

}

void DAC_write_gate_on(uint8_t channel){

	if (channel == CHANNEL_1){
  400670:	b928      	cbnz	r0, 40067e <DAC_write_gate_on+0xe>
		REG_PIOB_CODR |=  PIO_PER_P0;
  400672:	4a0c      	ldr	r2, [pc, #48]	; (4006a4 <DAC_write_gate_on+0x34>)
  400674:	6813      	ldr	r3, [r2, #0]
  400676:	f043 0301 	orr.w	r3, r3, #1
  40067a:	6013      	str	r3, [r2, #0]
  40067c:	4770      	bx	lr
	}
	else if (channel == CHANNEL_2){
  40067e:	2801      	cmp	r0, #1
  400680:	d105      	bne.n	40068e <DAC_write_gate_on+0x1e>
		REG_PIOB_CODR |=  PIO_PER_P1;
  400682:	4a08      	ldr	r2, [pc, #32]	; (4006a4 <DAC_write_gate_on+0x34>)
  400684:	6813      	ldr	r3, [r2, #0]
  400686:	f043 0302 	orr.w	r3, r3, #2
  40068a:	6013      	str	r3, [r2, #0]
  40068c:	4770      	bx	lr
	}
	else if (channel == CHANNEL_3){
  40068e:	2802      	cmp	r0, #2
		REG_PIOB_CODR |=  PIO_PER_P2;
  400690:	4a04      	ldr	r2, [pc, #16]	; (4006a4 <DAC_write_gate_on+0x34>)
  400692:	6813      	ldr	r3, [r2, #0]
  400694:	bf0c      	ite	eq
  400696:	f043 0304 	orreq.w	r3, r3, #4
	}
	else{
		REG_PIOB_CODR |=  PIO_PER_P3;
  40069a:	f043 0308 	orrne.w	r3, r3, #8
  40069e:	6013      	str	r3, [r2, #0]
  4006a0:	4770      	bx	lr
  4006a2:	bf00      	nop
  4006a4:	400e1034 	.word	0x400e1034

004006a8 <DAC_write_gate_off>:
// 	cpu_irq_enable();
}

void DAC_write_gate_off(uint8_t channel){

	if (channel == CHANNEL_1){
  4006a8:	b928      	cbnz	r0, 4006b6 <DAC_write_gate_off+0xe>
		REG_PIOB_SODR |=  PIO_PER_P0;
  4006aa:	4a0c      	ldr	r2, [pc, #48]	; (4006dc <DAC_write_gate_off+0x34>)
  4006ac:	6813      	ldr	r3, [r2, #0]
  4006ae:	f043 0301 	orr.w	r3, r3, #1
  4006b2:	6013      	str	r3, [r2, #0]
  4006b4:	4770      	bx	lr
	}
	else if (channel == CHANNEL_2){
  4006b6:	2801      	cmp	r0, #1
  4006b8:	d105      	bne.n	4006c6 <DAC_write_gate_off+0x1e>
		REG_PIOB_SODR |=  PIO_PER_P1;
  4006ba:	4a08      	ldr	r2, [pc, #32]	; (4006dc <DAC_write_gate_off+0x34>)
  4006bc:	6813      	ldr	r3, [r2, #0]
  4006be:	f043 0302 	orr.w	r3, r3, #2
  4006c2:	6013      	str	r3, [r2, #0]
  4006c4:	4770      	bx	lr
	}
	else if (channel == CHANNEL_3){
  4006c6:	2802      	cmp	r0, #2
		REG_PIOB_SODR |=  PIO_PER_P2;
  4006c8:	4a04      	ldr	r2, [pc, #16]	; (4006dc <DAC_write_gate_off+0x34>)
  4006ca:	6813      	ldr	r3, [r2, #0]
  4006cc:	bf0c      	ite	eq
  4006ce:	f043 0304 	orreq.w	r3, r3, #4
	}
	else{
		REG_PIOB_SODR |=  PIO_PER_P3;
  4006d2:	f043 0308 	orrne.w	r3, r3, #8
  4006d6:	6013      	str	r3, [r2, #0]
  4006d8:	4770      	bx	lr
  4006da:	bf00      	nop
  4006dc:	400e1030 	.word	0x400e1030

004006e0 <display_select>:
bool inverted[7] = {0,0,0,0,0,0,0};
uint16_t disp_ptr_location[7] = {0,0,0,0,0,0,0};
uint8_t curr_display = 7;

 void display_select(uint8_t d_id) {
	if(curr_display != d_id) {
  4006e0:	4b4d      	ldr	r3, [pc, #308]	; (400818 <display_select+0x138>)
  4006e2:	781b      	ldrb	r3, [r3, #0]
  4006e4:	4283      	cmp	r3, r0
  4006e6:	f000 8096 	beq.w	400816 <display_select+0x136>
		switch (d_id) {
  4006ea:	2806      	cmp	r0, #6
  4006ec:	f200 8083 	bhi.w	4007f6 <display_select+0x116>
  4006f0:	e8df f000 	tbb	[pc, r0]
  4006f4:	39271504 	.word	0x39271504
  4006f8:	5d4b      	.short	0x5d4b
  4006fa:	6f          	.byte	0x6f
  4006fb:	00          	.byte	0x00
			case 0:
				REG_PIOA_CODR |= disp_sel_0;
  4006fc:	4b47      	ldr	r3, [pc, #284]	; (40081c <display_select+0x13c>)
  4006fe:	681a      	ldr	r2, [r3, #0]
  400700:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
  400704:	601a      	str	r2, [r3, #0]
				REG_PIOA_CODR |= disp_sel_1;
  400706:	681a      	ldr	r2, [r3, #0]
  400708:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
  40070c:	601a      	str	r2, [r3, #0]
				REG_PIOA_CODR |= disp_sel_2;
  40070e:	681a      	ldr	r2, [r3, #0]
  400710:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
  400714:	601a      	str	r2, [r3, #0]
				curr_display = 0;
  400716:	2200      	movs	r2, #0
  400718:	4b3f      	ldr	r3, [pc, #252]	; (400818 <display_select+0x138>)
  40071a:	701a      	strb	r2, [r3, #0]
				break;
  40071c:	4770      	bx	lr
			case 1:
				REG_PIOA_SODR |= disp_sel_0;
  40071e:	4a40      	ldr	r2, [pc, #256]	; (400820 <display_select+0x140>)
  400720:	6813      	ldr	r3, [r2, #0]
  400722:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
  400726:	6013      	str	r3, [r2, #0]
				REG_PIOA_CODR |= disp_sel_1;
  400728:	4b3c      	ldr	r3, [pc, #240]	; (40081c <display_select+0x13c>)
  40072a:	681a      	ldr	r2, [r3, #0]
  40072c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
  400730:	601a      	str	r2, [r3, #0]
				REG_PIOA_CODR |= disp_sel_2;
  400732:	681a      	ldr	r2, [r3, #0]
  400734:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
  400738:	601a      	str	r2, [r3, #0]
				curr_display = 1;
  40073a:	2201      	movs	r2, #1
  40073c:	4b36      	ldr	r3, [pc, #216]	; (400818 <display_select+0x138>)
  40073e:	701a      	strb	r2, [r3, #0]
				break;
  400740:	4770      	bx	lr
			case 2:
				REG_PIOA_CODR |= disp_sel_0;
  400742:	4b36      	ldr	r3, [pc, #216]	; (40081c <display_select+0x13c>)
  400744:	681a      	ldr	r2, [r3, #0]
  400746:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
  40074a:	601a      	str	r2, [r3, #0]
				REG_PIOA_SODR |= disp_sel_1;
  40074c:	4934      	ldr	r1, [pc, #208]	; (400820 <display_select+0x140>)
  40074e:	680a      	ldr	r2, [r1, #0]
  400750:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
  400754:	600a      	str	r2, [r1, #0]
				REG_PIOA_CODR |= disp_sel_2;
  400756:	681a      	ldr	r2, [r3, #0]
  400758:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
  40075c:	601a      	str	r2, [r3, #0]
				curr_display = 2;
  40075e:	2202      	movs	r2, #2
  400760:	4b2d      	ldr	r3, [pc, #180]	; (400818 <display_select+0x138>)
  400762:	701a      	strb	r2, [r3, #0]
				break;
  400764:	4770      	bx	lr
			case 3:
				REG_PIOA_SODR |= disp_sel_0;
  400766:	4b2e      	ldr	r3, [pc, #184]	; (400820 <display_select+0x140>)
  400768:	681a      	ldr	r2, [r3, #0]
  40076a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
  40076e:	601a      	str	r2, [r3, #0]
				REG_PIOA_SODR |= disp_sel_1;
  400770:	681a      	ldr	r2, [r3, #0]
  400772:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
  400776:	601a      	str	r2, [r3, #0]
				REG_PIOA_CODR |= disp_sel_2;
  400778:	4a28      	ldr	r2, [pc, #160]	; (40081c <display_select+0x13c>)
  40077a:	6813      	ldr	r3, [r2, #0]
  40077c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
  400780:	6013      	str	r3, [r2, #0]
				curr_display = 3;
  400782:	2203      	movs	r2, #3
  400784:	4b24      	ldr	r3, [pc, #144]	; (400818 <display_select+0x138>)
  400786:	701a      	strb	r2, [r3, #0]
				break;
  400788:	4770      	bx	lr
			case 4:
				REG_PIOA_CODR |= disp_sel_0;
  40078a:	4b24      	ldr	r3, [pc, #144]	; (40081c <display_select+0x13c>)
  40078c:	681a      	ldr	r2, [r3, #0]
  40078e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
  400792:	601a      	str	r2, [r3, #0]
				REG_PIOA_CODR |= disp_sel_1;
  400794:	681a      	ldr	r2, [r3, #0]
  400796:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
  40079a:	601a      	str	r2, [r3, #0]
				REG_PIOA_SODR |= disp_sel_2;
  40079c:	4a20      	ldr	r2, [pc, #128]	; (400820 <display_select+0x140>)
  40079e:	6813      	ldr	r3, [r2, #0]
  4007a0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
  4007a4:	6013      	str	r3, [r2, #0]
				curr_display = 4;
  4007a6:	2204      	movs	r2, #4
  4007a8:	4b1b      	ldr	r3, [pc, #108]	; (400818 <display_select+0x138>)
  4007aa:	701a      	strb	r2, [r3, #0]
				break;
  4007ac:	4770      	bx	lr
			case 5:
				REG_PIOA_SODR |= disp_sel_0;
  4007ae:	4b1c      	ldr	r3, [pc, #112]	; (400820 <display_select+0x140>)
  4007b0:	681a      	ldr	r2, [r3, #0]
  4007b2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
  4007b6:	601a      	str	r2, [r3, #0]
				REG_PIOA_CODR |= disp_sel_1;
  4007b8:	4918      	ldr	r1, [pc, #96]	; (40081c <display_select+0x13c>)
  4007ba:	680a      	ldr	r2, [r1, #0]
  4007bc:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
  4007c0:	600a      	str	r2, [r1, #0]
				REG_PIOA_SODR |= disp_sel_2;
  4007c2:	681a      	ldr	r2, [r3, #0]
  4007c4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
  4007c8:	601a      	str	r2, [r3, #0]
				curr_display = 5;
  4007ca:	2205      	movs	r2, #5
  4007cc:	4b12      	ldr	r3, [pc, #72]	; (400818 <display_select+0x138>)
  4007ce:	701a      	strb	r2, [r3, #0]
				break;
  4007d0:	4770      	bx	lr
			case 6:
				REG_PIOA_CODR |= disp_sel_0;
  4007d2:	4a12      	ldr	r2, [pc, #72]	; (40081c <display_select+0x13c>)
  4007d4:	6813      	ldr	r3, [r2, #0]
  4007d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
  4007da:	6013      	str	r3, [r2, #0]
				REG_PIOA_SODR |= disp_sel_1;
  4007dc:	4b10      	ldr	r3, [pc, #64]	; (400820 <display_select+0x140>)
  4007de:	681a      	ldr	r2, [r3, #0]
  4007e0:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
  4007e4:	601a      	str	r2, [r3, #0]
				REG_PIOA_SODR |= disp_sel_2;
  4007e6:	681a      	ldr	r2, [r3, #0]
  4007e8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
  4007ec:	601a      	str	r2, [r3, #0]
				curr_display = 6;
  4007ee:	2206      	movs	r2, #6
  4007f0:	4b09      	ldr	r3, [pc, #36]	; (400818 <display_select+0x138>)
  4007f2:	701a      	strb	r2, [r3, #0]
				break;
  4007f4:	4770      	bx	lr
			default:
				REG_PIOA_SODR |= disp_sel_0;
  4007f6:	4b0a      	ldr	r3, [pc, #40]	; (400820 <display_select+0x140>)
  4007f8:	681a      	ldr	r2, [r3, #0]
  4007fa:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
  4007fe:	601a      	str	r2, [r3, #0]
				REG_PIOA_SODR |= disp_sel_1;
  400800:	681a      	ldr	r2, [r3, #0]
  400802:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
  400806:	601a      	str	r2, [r3, #0]
				REG_PIOA_SODR |= disp_sel_2;
  400808:	681a      	ldr	r2, [r3, #0]
  40080a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
  40080e:	601a      	str	r2, [r3, #0]
				curr_display = 7;
  400810:	2207      	movs	r2, #7
  400812:	4b01      	ldr	r3, [pc, #4]	; (400818 <display_select+0x138>)
  400814:	701a      	strb	r2, [r3, #0]
  400816:	4770      	bx	lr
  400818:	20000094 	.word	0x20000094
  40081c:	400e0e34 	.word	0x400e0e34
  400820:	400e0e30 	.word	0x400e0e30

00400824 <display_command>:
		}
	}
 }

 //Used to send command to the display during operation
 void display_command(uint8_t data, uint8_t d_id){
  400824:	b510      	push	{r4, lr}
  400826:	b086      	sub	sp, #24
  400828:	4604      	mov	r4, r0
	 display_select(d_id);
  40082a:	4608      	mov	r0, r1
  40082c:	4b0a      	ldr	r3, [pc, #40]	; (400858 <display_command+0x34>)
  40082e:	4798      	blx	r3

	 twi_packet_t packet_tx;
	 uint8_t command_buffer[] = {control_command, data};
  400830:	2300      	movs	r3, #0
  400832:	f88d 3000 	strb.w	r3, [sp]
  400836:	f88d 4001 	strb.w	r4, [sp, #1]

	 packet_tx.chip        = 0x3C;		// 0x3C is slave address for display
  40083a:	223c      	movs	r2, #60	; 0x3c
  40083c:	f88d 2014 	strb.w	r2, [sp, #20]
	 packet_tx.addr_length = 0;
  400840:	9302      	str	r3, [sp, #8]
	 packet_tx.buffer      = (uint8_t *) command_buffer;
  400842:	f8cd d00c 	str.w	sp, [sp, #12]
	 packet_tx.length      = 2;
  400846:	2302      	movs	r3, #2
  400848:	9304      	str	r3, [sp, #16]
	 twi_master_write(BOARD_BASE_TWI, &packet_tx);
  40084a:	a901      	add	r1, sp, #4
  40084c:	4803      	ldr	r0, [pc, #12]	; (40085c <display_command+0x38>)
  40084e:	4b04      	ldr	r3, [pc, #16]	; (400860 <display_command+0x3c>)
  400850:	4798      	blx	r3

 }
  400852:	b006      	add	sp, #24
  400854:	bd10      	pop	{r4, pc}
  400856:	bf00      	nop
  400858:	004006e1 	.word	0x004006e1
  40085c:	40018000 	.word	0x40018000
  400860:	00400329 	.word	0x00400329

00400864 <display_data>:

 //used to send data to the display during operation
 void display_data(uint8_t data, uint8_t d_id){
  400864:	b530      	push	{r4, r5, lr}
  400866:	b087      	sub	sp, #28
  400868:	4605      	mov	r5, r0
  40086a:	460c      	mov	r4, r1
	display_select(d_id);
  40086c:	4608      	mov	r0, r1
  40086e:	4b13      	ldr	r3, [pc, #76]	; (4008bc <display_data+0x58>)
  400870:	4798      	blx	r3
	
	twi_packet_t packet_tx;
	uint8_t data_buffer[] = {control_data, data};
  400872:	2340      	movs	r3, #64	; 0x40
  400874:	f88d 3000 	strb.w	r3, [sp]
  400878:	f88d 5001 	strb.w	r5, [sp, #1]
	packet_tx.chip        = 0x3C;		// 0x3C is slave address for display
  40087c:	233c      	movs	r3, #60	; 0x3c
  40087e:	f88d 3014 	strb.w	r3, [sp, #20]
	packet_tx.addr_length = 0;
  400882:	2300      	movs	r3, #0
  400884:	9302      	str	r3, [sp, #8]
	packet_tx.buffer      = (uint8_t *) data_buffer;
  400886:	f8cd d00c 	str.w	sp, [sp, #12]
	packet_tx.length      = 2;
  40088a:	2302      	movs	r3, #2
  40088c:	9304      	str	r3, [sp, #16]
	twi_master_write(BOARD_BASE_TWI, &packet_tx);
  40088e:	a901      	add	r1, sp, #4
  400890:	480b      	ldr	r0, [pc, #44]	; (4008c0 <display_data+0x5c>)
  400892:	4b0c      	ldr	r3, [pc, #48]	; (4008c4 <display_data+0x60>)
  400894:	4798      	blx	r3
	disp_ptr_location[d_id] += 8;
  400896:	4b0c      	ldr	r3, [pc, #48]	; (4008c8 <display_data+0x64>)
  400898:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
  40089c:	3308      	adds	r3, #8
  40089e:	b29b      	uxth	r3, r3
	if(disp_ptr_location[d_id] >= 4096) {
  4008a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
  4008a4:	d203      	bcs.n	4008ae <display_data+0x4a>
	packet_tx.chip        = 0x3C;		// 0x3C is slave address for display
	packet_tx.addr_length = 0;
	packet_tx.buffer      = (uint8_t *) data_buffer;
	packet_tx.length      = 2;
	twi_master_write(BOARD_BASE_TWI, &packet_tx);
	disp_ptr_location[d_id] += 8;
  4008a6:	4a08      	ldr	r2, [pc, #32]	; (4008c8 <display_data+0x64>)
  4008a8:	f822 3014 	strh.w	r3, [r2, r4, lsl #1]
  4008ac:	e003      	b.n	4008b6 <display_data+0x52>
	if(disp_ptr_location[d_id] >= 4096) {
		disp_ptr_location[d_id] = 0;
  4008ae:	2200      	movs	r2, #0
  4008b0:	4b05      	ldr	r3, [pc, #20]	; (4008c8 <display_data+0x64>)
  4008b2:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
	}
 }
  4008b6:	b007      	add	sp, #28
  4008b8:	bd30      	pop	{r4, r5, pc}
  4008ba:	bf00      	nop
  4008bc:	004006e1 	.word	0x004006e1
  4008c0:	40018000 	.word	0x40018000
  4008c4:	00400329 	.word	0x00400329
  4008c8:	2000089c 	.word	0x2000089c

004008cc <display_reset>:

 void display_reset() {
  4008cc:	b538      	push	{r3, r4, r5, lr}
	REG_PIOA_SODR |= disp_reset; //set high
  4008ce:	4c0a      	ldr	r4, [pc, #40]	; (4008f8 <display_reset+0x2c>)
  4008d0:	6823      	ldr	r3, [r4, #0]
  4008d2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  4008d6:	6023      	str	r3, [r4, #0]
	delay_ms(1);
  4008d8:	f641 30e7 	movw	r0, #7143	; 0x1be7
  4008dc:	4d07      	ldr	r5, [pc, #28]	; (4008fc <display_reset+0x30>)
  4008de:	47a8      	blx	r5
	REG_PIOA_CODR |= disp_reset; //set low
  4008e0:	4a07      	ldr	r2, [pc, #28]	; (400900 <display_reset+0x34>)
  4008e2:	6813      	ldr	r3, [r2, #0]
  4008e4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  4008e8:	6013      	str	r3, [r2, #0]
	delay_ms(10);
  4008ea:	4806      	ldr	r0, [pc, #24]	; (400904 <display_reset+0x38>)
  4008ec:	47a8      	blx	r5
	REG_PIOA_SODR |= disp_reset; //set high and hold for normal operation
  4008ee:	6823      	ldr	r3, [r4, #0]
  4008f0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  4008f4:	6023      	str	r3, [r4, #0]
  4008f6:	bd38      	pop	{r3, r4, r5, pc}
  4008f8:	400e0e30 	.word	0x400e0e30
  4008fc:	20000089 	.word	0x20000089
  400900:	400e0e34 	.word	0x400e0e34
  400904:	00011705 	.word	0x00011705

00400908 <display_init>:
 }

 void display_init(uint8_t d_id) {
  400908:	b538      	push	{r3, r4, r5, lr}
  40090a:	4605      	mov	r5, r0

	// Init settings for OLED
	display_command(SSD1306_DISPLAYOFF, d_id);
  40090c:	4601      	mov	r1, r0
  40090e:	20ae      	movs	r0, #174	; 0xae
  400910:	4c26      	ldr	r4, [pc, #152]	; (4009ac <display_init+0xa4>)
  400912:	47a0      	blx	r4

	display_command(SSD1306_SETDISPLAYCLOCKDIV, d_id);
  400914:	4629      	mov	r1, r5
  400916:	20d5      	movs	r0, #213	; 0xd5
  400918:	47a0      	blx	r4
	display_command(0x80, d_id);
  40091a:	4629      	mov	r1, r5
  40091c:	2080      	movs	r0, #128	; 0x80
  40091e:	47a0      	blx	r4

	// Set no display offset
	display_command(SSD1306_SETDISPLAYOFFSET, d_id);
  400920:	4629      	mov	r1, r5
  400922:	20d3      	movs	r0, #211	; 0xd3
  400924:	47a0      	blx	r4
	display_command(0x00, d_id);
  400926:	4629      	mov	r1, r5
  400928:	2000      	movs	r0, #0
  40092a:	47a0      	blx	r4

	// Start at line 0
	display_command(SSD1306_SETSTARTLINE, d_id);
  40092c:	4629      	mov	r1, r5
  40092e:	2040      	movs	r0, #64	; 0x40
  400930:	47a0      	blx	r4

	display_command(SSD1306_CHARGEPUMP, d_id);
  400932:	4629      	mov	r1, r5
  400934:	208d      	movs	r0, #141	; 0x8d
  400936:	47a0      	blx	r4
	display_command(0x14, d_id);	//internal VCC from charge pump
  400938:	4629      	mov	r1, r5
  40093a:	2014      	movs	r0, #20
  40093c:	47a0      	blx	r4

	// Set segment remap
	display_command(0xA0, d_id);
  40093e:	4629      	mov	r1, r5
  400940:	20a0      	movs	r0, #160	; 0xa0
  400942:	47a0      	blx	r4

	display_command(SSD1306_SETCOMPINS, d_id);
  400944:	4629      	mov	r1, r5
  400946:	20da      	movs	r0, #218	; 0xda
  400948:	47a0      	blx	r4
	display_command(0x02, d_id);
  40094a:	4629      	mov	r1, r5
  40094c:	2002      	movs	r0, #2
  40094e:	47a0      	blx	r4

	display_command(SSD1306_SETCONTRAST, d_id);
  400950:	4629      	mov	r1, r5
  400952:	2081      	movs	r0, #129	; 0x81
  400954:	47a0      	blx	r4
	display_command(0xCF, d_id);
  400956:	4629      	mov	r1, r5
  400958:	20cf      	movs	r0, #207	; 0xcf
  40095a:	47a0      	blx	r4

	display_command(SSD1306_SETPRECHARGE, d_id);
  40095c:	4629      	mov	r1, r5
  40095e:	20d9      	movs	r0, #217	; 0xd9
  400960:	47a0      	blx	r4
	display_command(0xF1, d_id);
  400962:	4629      	mov	r1, r5
  400964:	20f1      	movs	r0, #241	; 0xf1
  400966:	47a0      	blx	r4

	display_command(SSD1306_SETVCOMDETECT, d_id);
  400968:	4629      	mov	r1, r5
  40096a:	20db      	movs	r0, #219	; 0xdb
  40096c:	47a0      	blx	r4
	display_command(0x40, d_id);
  40096e:	4629      	mov	r1, r5
  400970:	2040      	movs	r0, #64	; 0x40
  400972:	47a0      	blx	r4

	display_command(SSD1306_NORMALDISPLAY, d_id);
  400974:	4629      	mov	r1, r5
  400976:	20a6      	movs	r0, #166	; 0xa6
  400978:	47a0      	blx	r4
	display_command(SSD1306_DISPLAYON, d_id);
  40097a:	4629      	mov	r1, r5
  40097c:	20af      	movs	r0, #175	; 0xaf
  40097e:	47a0      	blx	r4
	display_command(SSD1306_MEMORYMODE, d_id);
  400980:	4629      	mov	r1, r5
  400982:	2020      	movs	r0, #32
  400984:	47a0      	blx	r4
	display_command(SSD1306_VERTADDR, d_id);
  400986:	4629      	mov	r1, r5
  400988:	2001      	movs	r0, #1
  40098a:	47a0      	blx	r4

	// Adjusting for 32 height display
	display_command(SSD1306_EDITPAGEADDR, d_id);
  40098c:	4629      	mov	r1, r5
  40098e:	2022      	movs	r0, #34	; 0x22
  400990:	47a0      	blx	r4
	display_command(0, d_id);
  400992:	4629      	mov	r1, r5
  400994:	2000      	movs	r0, #0
  400996:	47a0      	blx	r4
	display_command(3, d_id);
  400998:	4629      	mov	r1, r5
  40099a:	2003      	movs	r0, #3
  40099c:	47a0      	blx	r4

	display_command(SSD1306_SETMULTIPLEX, d_id);
  40099e:	4629      	mov	r1, r5
  4009a0:	20a8      	movs	r0, #168	; 0xa8
  4009a2:	47a0      	blx	r4
	display_command(31, d_id);
  4009a4:	4629      	mov	r1, r5
  4009a6:	201f      	movs	r0, #31
  4009a8:	47a0      	blx	r4
  4009aa:	bd38      	pop	{r3, r4, r5, pc}
  4009ac:	00400825 	.word	0x00400825

004009b0 <all_displays_init>:
 }

 void all_displays_init(void) {
  4009b0:	b510      	push	{r4, lr}

	

	// Configure registers used for display mux lines
	REG_PIOA_PER |= disp_sel_0; //enable PIO controller on PA28
  4009b2:	4a1a      	ldr	r2, [pc, #104]	; (400a1c <all_displays_init+0x6c>)
  4009b4:	6813      	ldr	r3, [r2, #0]
  4009b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
  4009ba:	6013      	str	r3, [r2, #0]
	REG_PIOA_OER |= disp_sel_0; //enable output on pin PA28
  4009bc:	4b18      	ldr	r3, [pc, #96]	; (400a20 <all_displays_init+0x70>)
  4009be:	6819      	ldr	r1, [r3, #0]
  4009c0:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
  4009c4:	6019      	str	r1, [r3, #0]
	REG_PIOA_PER |= disp_sel_1; //enable PIO controller on PA29
  4009c6:	6811      	ldr	r1, [r2, #0]
  4009c8:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
  4009cc:	6011      	str	r1, [r2, #0]
	REG_PIOA_OER |= disp_sel_1; //enable output on pin PA29
  4009ce:	6819      	ldr	r1, [r3, #0]
  4009d0:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
  4009d4:	6019      	str	r1, [r3, #0]
	REG_PIOA_PER |= disp_sel_2; //enable PIO controller on PA30
  4009d6:	6811      	ldr	r1, [r2, #0]
  4009d8:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
  4009dc:	6011      	str	r1, [r2, #0]
	REG_PIOA_OER |= disp_sel_2; //enable output on pin PA30
  4009de:	6819      	ldr	r1, [r3, #0]
  4009e0:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
  4009e4:	6019      	str	r1, [r3, #0]

	// Configure register used for display reset
	REG_PIOA_PER |= disp_reset; //enable PIO controller on PA31
  4009e6:	6811      	ldr	r1, [r2, #0]
  4009e8:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
  4009ec:	6011      	str	r1, [r2, #0]
	REG_PIOA_OER |= disp_reset; //enable output on pin PA31
  4009ee:	681a      	ldr	r2, [r3, #0]
  4009f0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
  4009f4:	601a      	str	r2, [r3, #0]

	display_reset();
  4009f6:	4b0b      	ldr	r3, [pc, #44]	; (400a24 <all_displays_init+0x74>)
  4009f8:	4798      	blx	r3

 	display_init(0);
  4009fa:	2000      	movs	r0, #0
  4009fc:	4c0a      	ldr	r4, [pc, #40]	; (400a28 <all_displays_init+0x78>)
  4009fe:	47a0      	blx	r4
    display_init(1);
  400a00:	2001      	movs	r0, #1
  400a02:	47a0      	blx	r4
    display_init(2);
  400a04:	2002      	movs	r0, #2
  400a06:	47a0      	blx	r4
  	display_init(3);
  400a08:	2003      	movs	r0, #3
  400a0a:	47a0      	blx	r4
  	display_init(4);
  400a0c:	2004      	movs	r0, #4
  400a0e:	47a0      	blx	r4
  	display_init(5);
  400a10:	2005      	movs	r0, #5
  400a12:	47a0      	blx	r4
  	display_init(6);
  400a14:	2006      	movs	r0, #6
  400a16:	47a0      	blx	r4
  400a18:	bd10      	pop	{r4, pc}
  400a1a:	bf00      	nop
  400a1c:	400e0e00 	.word	0x400e0e00
  400a20:	400e0e10 	.word	0x400e0e10
  400a24:	004008cd 	.word	0x004008cd
  400a28:	00400909 	.word	0x00400909

00400a2c <finish_display>:
		inverted[d_id] = 0;
	}
 }

 void finish_display(uint8_t d_id) {
	while(disp_ptr_location[d_id] > 0 && disp_ptr_location[d_id] <= 4096) {
  400a2c:	4b0e      	ldr	r3, [pc, #56]	; (400a68 <finish_display+0x3c>)
  400a2e:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
  400a32:	3b01      	subs	r3, #1
  400a34:	b29b      	uxth	r3, r3
  400a36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
  400a3a:	d213      	bcs.n	400a64 <finish_display+0x38>
		display_command(SSD1306_NORMALDISPLAY, d_id);
		inverted[d_id] = 0;
	}
 }

 void finish_display(uint8_t d_id) {
  400a3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400a40:	4605      	mov	r5, r0
  400a42:	4604      	mov	r4, r0
	while(disp_ptr_location[d_id] > 0 && disp_ptr_location[d_id] <= 4096) {
		display_data(0, d_id);
  400a44:	f04f 0800 	mov.w	r8, #0
  400a48:	4f08      	ldr	r7, [pc, #32]	; (400a6c <finish_display+0x40>)
		inverted[d_id] = 0;
	}
 }

 void finish_display(uint8_t d_id) {
	while(disp_ptr_location[d_id] > 0 && disp_ptr_location[d_id] <= 4096) {
  400a4a:	4e07      	ldr	r6, [pc, #28]	; (400a68 <finish_display+0x3c>)
		display_data(0, d_id);
  400a4c:	4621      	mov	r1, r4
  400a4e:	4640      	mov	r0, r8
  400a50:	47b8      	blx	r7
		inverted[d_id] = 0;
	}
 }

 void finish_display(uint8_t d_id) {
	while(disp_ptr_location[d_id] > 0 && disp_ptr_location[d_id] <= 4096) {
  400a52:	f836 3015 	ldrh.w	r3, [r6, r5, lsl #1]
  400a56:	3b01      	subs	r3, #1
  400a58:	b29b      	uxth	r3, r3
  400a5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
  400a5e:	d3f5      	bcc.n	400a4c <finish_display+0x20>
  400a60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400a64:	4770      	bx	lr
  400a66:	bf00      	nop
  400a68:	2000089c 	.word	0x2000089c
  400a6c:	00400865 	.word	0x00400865

00400a70 <display_char>:
	finish_display(d_id);
	finish_display(d_id);
 }

  // Displays 1 byte of space and 3 bytes of character at a time
 void display_char(char input, uint8_t font_size, uint8_t d_id) {
  400a70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400a74:	b085      	sub	sp, #20
  400a76:	9201      	str	r2, [sp, #4]
	  // Lets us customize our space width, input parameter can be added if needed
	if(input == ' ') {
  400a78:	2820      	cmp	r0, #32
  400a7a:	d108      	bne.n	400a8e <display_char+0x1e>
  400a7c:	2408      	movs	r4, #8
		int i;
		for(i = 8; i > 0; i--) {
			display_data(0, d_id);
  400a7e:	2600      	movs	r6, #0
  400a80:	4da6      	ldr	r5, [pc, #664]	; (400d1c <display_char+0x2ac>)
  400a82:	9901      	ldr	r1, [sp, #4]
  400a84:	4630      	mov	r0, r6
  400a86:	47a8      	blx	r5
  // Displays 1 byte of space and 3 bytes of character at a time
 void display_char(char input, uint8_t font_size, uint8_t d_id) {
	  // Lets us customize our space width, input parameter can be added if needed
	if(input == ' ') {
		int i;
		for(i = 8; i > 0; i--) {
  400a88:	3c01      	subs	r4, #1
  400a8a:	d1fa      	bne.n	400a82 <display_char+0x12>
  400a8c:	e142      	b.n	400d14 <display_char+0x2a4>
  400a8e:	4682      	mov	sl, r0
	else {
		uint16_t font_index = 0;
		uint8_t byte_1;
		uint8_t byte_2;
		uint8_t byte_3;
		if(font_size == 28) {
  400a90:	291c      	cmp	r1, #28
  400a92:	d141      	bne.n	400b18 <display_char+0xa8>
			uint16_t width = getWidth_28();
  400a94:	4ba2      	ldr	r3, [pc, #648]	; (400d20 <display_char+0x2b0>)
  400a96:	4798      	blx	r3
  400a98:	fa1f fb80 	uxth.w	fp, r0
			while (font_index < width) {
  400a9c:	f1bb 0f00 	cmp.w	fp, #0
  400aa0:	f000 8138 	beq.w	400d14 <display_char+0x2a4>
				if(input != '#' && input != 'b') {
					display_data(0, d_id);
				}
				byte_1 = getByte_28(input, font_index);
				byte_2 = getByte_28(input, font_index + width);
				byte_3 = getByte_28(input, font_index + 2*width);
  400aa4:	ea4f 034b 	mov.w	r3, fp, lsl #1
  400aa8:	fa1f f983 	uxth.w	r9, r3
  400aac:	465c      	mov	r4, fp
  400aae:	2600      	movs	r6, #0
			while (font_index < width) {
				//Sharps and flats are elevated, rest of characters are not
				if(input != '#' && input != 'b') {
					display_data(0, d_id);
				}
				byte_1 = getByte_28(input, font_index);
  400ab0:	f8df 827c 	ldr.w	r8, [pc, #636]	; 400d30 <display_char+0x2c0>
				byte_2 = getByte_28(input, font_index + width);
				byte_3 = getByte_28(input, font_index + 2*width);
				display_data(byte_1, d_id);
  400ab4:	4f99      	ldr	r7, [pc, #612]	; (400d1c <display_char+0x2ac>)
  400ab6:	464b      	mov	r3, r9
  400ab8:	46d9      	mov	r9, fp
  400aba:	469b      	mov	fp, r3
  400abc:	b2b5      	uxth	r5, r6
		uint8_t byte_3;
		if(font_size == 28) {
			uint16_t width = getWidth_28();
			while (font_index < width) {
				//Sharps and flats are elevated, rest of characters are not
				if(input != '#' && input != 'b') {
  400abe:	f1ba 0f23 	cmp.w	sl, #35	; 0x23
  400ac2:	f000 80bb 	beq.w	400c3c <display_char+0x1cc>
  400ac6:	f1ba 0f62 	cmp.w	sl, #98	; 0x62
  400aca:	f000 809f 	beq.w	400c0c <display_char+0x19c>
					display_data(0, d_id);
  400ace:	9901      	ldr	r1, [sp, #4]
  400ad0:	2000      	movs	r0, #0
  400ad2:	47b8      	blx	r7
				}
				byte_1 = getByte_28(input, font_index);
  400ad4:	4629      	mov	r1, r5
  400ad6:	4650      	mov	r0, sl
  400ad8:	47c0      	blx	r8
  400ada:	9002      	str	r0, [sp, #8]
				byte_2 = getByte_28(input, font_index + width);
  400adc:	4621      	mov	r1, r4
  400ade:	4650      	mov	r0, sl
  400ae0:	47c0      	blx	r8
  400ae2:	9003      	str	r0, [sp, #12]
				byte_3 = getByte_28(input, font_index + 2*width);
  400ae4:	eb05 010b 	add.w	r1, r5, fp
  400ae8:	b289      	uxth	r1, r1
  400aea:	4650      	mov	r0, sl
  400aec:	47c0      	blx	r8
  400aee:	4605      	mov	r5, r0
				display_data(byte_1, d_id);
  400af0:	9901      	ldr	r1, [sp, #4]
  400af2:	9802      	ldr	r0, [sp, #8]
  400af4:	47b8      	blx	r7
				display_data(byte_2, d_id);
  400af6:	9901      	ldr	r1, [sp, #4]
  400af8:	9803      	ldr	r0, [sp, #12]
  400afa:	47b8      	blx	r7
				display_data(byte_3, d_id);
  400afc:	9901      	ldr	r1, [sp, #4]
  400afe:	4628      	mov	r0, r5
  400b00:	47b8      	blx	r7
  400b02:	e002      	b.n	400b0a <display_char+0x9a>
				//Sharps and flats are elevated, rest of characters are not
				if(input == '#' || input == 'b') {
					display_data(0, d_id);
  400b04:	9901      	ldr	r1, [sp, #4]
  400b06:	2000      	movs	r0, #0
  400b08:	47b8      	blx	r7
  400b0a:	3601      	adds	r6, #1
  400b0c:	3401      	adds	r4, #1
  400b0e:	b2a4      	uxth	r4, r4
		uint8_t byte_1;
		uint8_t byte_2;
		uint8_t byte_3;
		if(font_size == 28) {
			uint16_t width = getWidth_28();
			while (font_index < width) {
  400b10:	b2b3      	uxth	r3, r6
  400b12:	454b      	cmp	r3, r9
  400b14:	d3d2      	bcc.n	400abc <display_char+0x4c>
  400b16:	e0fd      	b.n	400d14 <display_char+0x2a4>
				}
				font_index++;
			}
		}

		else if(font_size == 22) {
  400b18:	2916      	cmp	r1, #22
  400b1a:	d141      	bne.n	400ba0 <display_char+0x130>
			uint16_t width = getWidth_22();
  400b1c:	4b81      	ldr	r3, [pc, #516]	; (400d24 <display_char+0x2b4>)
  400b1e:	4798      	blx	r3
  400b20:	fa1f fb80 	uxth.w	fp, r0
			while (font_index < width) {
  400b24:	f1bb 0f00 	cmp.w	fp, #0
  400b28:	f000 80f4 	beq.w	400d14 <display_char+0x2a4>
				if(input != '#' && input != 'b') {
					display_data(0, d_id);
				}
				byte_1 = getByte_22(input, font_index);
				byte_2 = getByte_22(input, font_index + width);
				byte_3 = getByte_22(input, font_index + 2*width);
  400b2c:	ea4f 034b 	mov.w	r3, fp, lsl #1
  400b30:	fa1f f983 	uxth.w	r9, r3
  400b34:	465c      	mov	r4, fp
  400b36:	2600      	movs	r6, #0
			while (font_index < width) {
				//Sharps and flats are elevated, rest of characters are not
				if(input != '#' && input != 'b') {
					display_data(0, d_id);
				}
				byte_1 = getByte_22(input, font_index);
  400b38:	f8df 81f8 	ldr.w	r8, [pc, #504]	; 400d34 <display_char+0x2c4>
				byte_2 = getByte_22(input, font_index + width);
				byte_3 = getByte_22(input, font_index + 2*width);
				display_data(byte_1, d_id);
  400b3c:	4f77      	ldr	r7, [pc, #476]	; (400d1c <display_char+0x2ac>)
  400b3e:	464b      	mov	r3, r9
  400b40:	46d9      	mov	r9, fp
  400b42:	469b      	mov	fp, r3
  400b44:	b2b5      	uxth	r5, r6

		else if(font_size == 22) {
			uint16_t width = getWidth_22();
			while (font_index < width) {
				//Sharps and flats are elevated, rest of characters are not
				if(input != '#' && input != 'b') {
  400b46:	f1ba 0f23 	cmp.w	sl, #35	; 0x23
  400b4a:	f000 808f 	beq.w	400c6c <display_char+0x1fc>
  400b4e:	f1ba 0f62 	cmp.w	sl, #98	; 0x62
  400b52:	f000 80a3 	beq.w	400c9c <display_char+0x22c>
					display_data(0, d_id);
  400b56:	9901      	ldr	r1, [sp, #4]
  400b58:	2000      	movs	r0, #0
  400b5a:	47b8      	blx	r7
				}
				byte_1 = getByte_22(input, font_index);
  400b5c:	4629      	mov	r1, r5
  400b5e:	4650      	mov	r0, sl
  400b60:	47c0      	blx	r8
  400b62:	9002      	str	r0, [sp, #8]
				byte_2 = getByte_22(input, font_index + width);
  400b64:	4621      	mov	r1, r4
  400b66:	4650      	mov	r0, sl
  400b68:	47c0      	blx	r8
  400b6a:	9003      	str	r0, [sp, #12]
				byte_3 = getByte_22(input, font_index + 2*width);
  400b6c:	eb05 010b 	add.w	r1, r5, fp
  400b70:	b289      	uxth	r1, r1
  400b72:	4650      	mov	r0, sl
  400b74:	47c0      	blx	r8
  400b76:	4605      	mov	r5, r0
				display_data(byte_1, d_id);
  400b78:	9901      	ldr	r1, [sp, #4]
  400b7a:	9802      	ldr	r0, [sp, #8]
  400b7c:	47b8      	blx	r7
				display_data(byte_2, d_id);
  400b7e:	9901      	ldr	r1, [sp, #4]
  400b80:	9803      	ldr	r0, [sp, #12]
  400b82:	47b8      	blx	r7
				display_data(byte_3, d_id);
  400b84:	9901      	ldr	r1, [sp, #4]
  400b86:	4628      	mov	r0, r5
  400b88:	47b8      	blx	r7
  400b8a:	e002      	b.n	400b92 <display_char+0x122>
				//Sharps and flats are elevated, rest of characters are not
				if(input == '#' || input == 'b') {
					display_data(0, d_id);
  400b8c:	9901      	ldr	r1, [sp, #4]
  400b8e:	2000      	movs	r0, #0
  400b90:	47b8      	blx	r7
  400b92:	3601      	adds	r6, #1
  400b94:	3401      	adds	r4, #1
  400b96:	b2a4      	uxth	r4, r4
			}
		}

		else if(font_size == 22) {
			uint16_t width = getWidth_22();
			while (font_index < width) {
  400b98:	b2b3      	uxth	r3, r6
  400b9a:	4599      	cmp	r9, r3
  400b9c:	d8d2      	bhi.n	400b44 <display_char+0xd4>
  400b9e:	e0b9      	b.n	400d14 <display_char+0x2a4>
			}
		}

		// Defaults to 18 to reduce errors.
		else {
			uint16_t width = getWidth_18();
  400ba0:	4b61      	ldr	r3, [pc, #388]	; (400d28 <display_char+0x2b8>)
  400ba2:	4798      	blx	r3
  400ba4:	fa1f f980 	uxth.w	r9, r0
			while (font_index < width) {
  400ba8:	f1b9 0f00 	cmp.w	r9, #0
  400bac:	f000 80b2 	beq.w	400d14 <display_char+0x2a4>
  400bb0:	464d      	mov	r5, r9
  400bb2:	2400      	movs	r4, #0
				//Sharps and flats are elevated, rest of characters are not
				if(input != '#' && input != 'b') {
					display_data(0, d_id);
				}
				display_data(0, d_id);
  400bb4:	46a0      	mov	r8, r4
  400bb6:	4e59      	ldr	r6, [pc, #356]	; (400d1c <display_char+0x2ac>)
				byte_1 = getByte_18(input, font_index);
  400bb8:	4f5c      	ldr	r7, [pc, #368]	; (400d2c <display_char+0x2bc>)
  400bba:	f8dd b004 	ldr.w	fp, [sp, #4]
		// Defaults to 18 to reduce errors.
		else {
			uint16_t width = getWidth_18();
			while (font_index < width) {
				//Sharps and flats are elevated, rest of characters are not
				if(input != '#' && input != 'b') {
  400bbe:	f1ba 0f23 	cmp.w	sl, #35	; 0x23
  400bc2:	f000 8083 	beq.w	400ccc <display_char+0x25c>
  400bc6:	f1ba 0f62 	cmp.w	sl, #98	; 0x62
  400bca:	f000 8091 	beq.w	400cf0 <display_char+0x280>
					display_data(0, d_id);
  400bce:	4659      	mov	r1, fp
  400bd0:	4640      	mov	r0, r8
  400bd2:	47b0      	blx	r6
				}
				display_data(0, d_id);
  400bd4:	4659      	mov	r1, fp
  400bd6:	4640      	mov	r0, r8
  400bd8:	47b0      	blx	r6
				byte_1 = getByte_18(input, font_index);
  400bda:	4621      	mov	r1, r4
  400bdc:	4650      	mov	r0, sl
  400bde:	47b8      	blx	r7
  400be0:	9001      	str	r0, [sp, #4]
				byte_2 = getByte_18(input, font_index + width);
  400be2:	4629      	mov	r1, r5
  400be4:	4650      	mov	r0, sl
  400be6:	47b8      	blx	r7
  400be8:	9002      	str	r0, [sp, #8]
				display_data(byte_1, d_id);
  400bea:	4659      	mov	r1, fp
  400bec:	9801      	ldr	r0, [sp, #4]
  400bee:	47b0      	blx	r6
				display_data(byte_2, d_id);
  400bf0:	4659      	mov	r1, fp
  400bf2:	9802      	ldr	r0, [sp, #8]
  400bf4:	47b0      	blx	r6
  400bf6:	e002      	b.n	400bfe <display_char+0x18e>
				//Sharps and flats are elevated, rest of characters are not
				if(input == '#' || input == 'b') {
					display_data(0, d_id);
  400bf8:	4659      	mov	r1, fp
  400bfa:	4640      	mov	r0, r8
  400bfc:	47b0      	blx	r6
				}
				font_index++;
  400bfe:	3401      	adds	r4, #1
  400c00:	b2a4      	uxth	r4, r4
  400c02:	3501      	adds	r5, #1
  400c04:	b2ad      	uxth	r5, r5
		}

		// Defaults to 18 to reduce errors.
		else {
			uint16_t width = getWidth_18();
			while (font_index < width) {
  400c06:	45a1      	cmp	r9, r4
  400c08:	d1d9      	bne.n	400bbe <display_char+0x14e>
  400c0a:	e083      	b.n	400d14 <display_char+0x2a4>
			while (font_index < width) {
				//Sharps and flats are elevated, rest of characters are not
				if(input != '#' && input != 'b') {
					display_data(0, d_id);
				}
				byte_1 = getByte_28(input, font_index);
  400c0c:	4629      	mov	r1, r5
  400c0e:	2062      	movs	r0, #98	; 0x62
  400c10:	47c0      	blx	r8
  400c12:	9002      	str	r0, [sp, #8]
				byte_2 = getByte_28(input, font_index + width);
  400c14:	4621      	mov	r1, r4
  400c16:	2062      	movs	r0, #98	; 0x62
  400c18:	47c0      	blx	r8
  400c1a:	9003      	str	r0, [sp, #12]
				byte_3 = getByte_28(input, font_index + 2*width);
  400c1c:	eb05 010b 	add.w	r1, r5, fp
  400c20:	b289      	uxth	r1, r1
  400c22:	2062      	movs	r0, #98	; 0x62
  400c24:	47c0      	blx	r8
  400c26:	4605      	mov	r5, r0
				display_data(byte_1, d_id);
  400c28:	9901      	ldr	r1, [sp, #4]
  400c2a:	9802      	ldr	r0, [sp, #8]
  400c2c:	47b8      	blx	r7
				display_data(byte_2, d_id);
  400c2e:	9901      	ldr	r1, [sp, #4]
  400c30:	9803      	ldr	r0, [sp, #12]
  400c32:	47b8      	blx	r7
				display_data(byte_3, d_id);
  400c34:	9901      	ldr	r1, [sp, #4]
  400c36:	4628      	mov	r0, r5
  400c38:	47b8      	blx	r7
  400c3a:	e763      	b.n	400b04 <display_char+0x94>
			while (font_index < width) {
				//Sharps and flats are elevated, rest of characters are not
				if(input != '#' && input != 'b') {
					display_data(0, d_id);
				}
				byte_1 = getByte_28(input, font_index);
  400c3c:	4629      	mov	r1, r5
  400c3e:	2023      	movs	r0, #35	; 0x23
  400c40:	47c0      	blx	r8
  400c42:	9002      	str	r0, [sp, #8]
				byte_2 = getByte_28(input, font_index + width);
  400c44:	4621      	mov	r1, r4
  400c46:	2023      	movs	r0, #35	; 0x23
  400c48:	47c0      	blx	r8
  400c4a:	9003      	str	r0, [sp, #12]
				byte_3 = getByte_28(input, font_index + 2*width);
  400c4c:	eb05 010b 	add.w	r1, r5, fp
  400c50:	b289      	uxth	r1, r1
  400c52:	2023      	movs	r0, #35	; 0x23
  400c54:	47c0      	blx	r8
  400c56:	4605      	mov	r5, r0
				display_data(byte_1, d_id);
  400c58:	9901      	ldr	r1, [sp, #4]
  400c5a:	9802      	ldr	r0, [sp, #8]
  400c5c:	47b8      	blx	r7
				display_data(byte_2, d_id);
  400c5e:	9901      	ldr	r1, [sp, #4]
  400c60:	9803      	ldr	r0, [sp, #12]
  400c62:	47b8      	blx	r7
				display_data(byte_3, d_id);
  400c64:	9901      	ldr	r1, [sp, #4]
  400c66:	4628      	mov	r0, r5
  400c68:	47b8      	blx	r7
  400c6a:	e74b      	b.n	400b04 <display_char+0x94>
			while (font_index < width) {
				//Sharps and flats are elevated, rest of characters are not
				if(input != '#' && input != 'b') {
					display_data(0, d_id);
				}
				byte_1 = getByte_22(input, font_index);
  400c6c:	4629      	mov	r1, r5
  400c6e:	2023      	movs	r0, #35	; 0x23
  400c70:	47c0      	blx	r8
  400c72:	9002      	str	r0, [sp, #8]
				byte_2 = getByte_22(input, font_index + width);
  400c74:	4621      	mov	r1, r4
  400c76:	2023      	movs	r0, #35	; 0x23
  400c78:	47c0      	blx	r8
  400c7a:	9003      	str	r0, [sp, #12]
				byte_3 = getByte_22(input, font_index + 2*width);
  400c7c:	eb05 010b 	add.w	r1, r5, fp
  400c80:	b289      	uxth	r1, r1
  400c82:	2023      	movs	r0, #35	; 0x23
  400c84:	47c0      	blx	r8
  400c86:	4605      	mov	r5, r0
				display_data(byte_1, d_id);
  400c88:	9901      	ldr	r1, [sp, #4]
  400c8a:	9802      	ldr	r0, [sp, #8]
  400c8c:	47b8      	blx	r7
				display_data(byte_2, d_id);
  400c8e:	9901      	ldr	r1, [sp, #4]
  400c90:	9803      	ldr	r0, [sp, #12]
  400c92:	47b8      	blx	r7
				display_data(byte_3, d_id);
  400c94:	9901      	ldr	r1, [sp, #4]
  400c96:	4628      	mov	r0, r5
  400c98:	47b8      	blx	r7
  400c9a:	e777      	b.n	400b8c <display_char+0x11c>
			while (font_index < width) {
				//Sharps and flats are elevated, rest of characters are not
				if(input != '#' && input != 'b') {
					display_data(0, d_id);
				}
				byte_1 = getByte_22(input, font_index);
  400c9c:	4629      	mov	r1, r5
  400c9e:	2062      	movs	r0, #98	; 0x62
  400ca0:	47c0      	blx	r8
  400ca2:	9002      	str	r0, [sp, #8]
				byte_2 = getByte_22(input, font_index + width);
  400ca4:	4621      	mov	r1, r4
  400ca6:	2062      	movs	r0, #98	; 0x62
  400ca8:	47c0      	blx	r8
  400caa:	9003      	str	r0, [sp, #12]
				byte_3 = getByte_22(input, font_index + 2*width);
  400cac:	eb05 010b 	add.w	r1, r5, fp
  400cb0:	b289      	uxth	r1, r1
  400cb2:	2062      	movs	r0, #98	; 0x62
  400cb4:	47c0      	blx	r8
  400cb6:	4605      	mov	r5, r0
				display_data(byte_1, d_id);
  400cb8:	9901      	ldr	r1, [sp, #4]
  400cba:	9802      	ldr	r0, [sp, #8]
  400cbc:	47b8      	blx	r7
				display_data(byte_2, d_id);
  400cbe:	9901      	ldr	r1, [sp, #4]
  400cc0:	9803      	ldr	r0, [sp, #12]
  400cc2:	47b8      	blx	r7
				display_data(byte_3, d_id);
  400cc4:	9901      	ldr	r1, [sp, #4]
  400cc6:	4628      	mov	r0, r5
  400cc8:	47b8      	blx	r7
  400cca:	e75f      	b.n	400b8c <display_char+0x11c>
			while (font_index < width) {
				//Sharps and flats are elevated, rest of characters are not
				if(input != '#' && input != 'b') {
					display_data(0, d_id);
				}
				display_data(0, d_id);
  400ccc:	4659      	mov	r1, fp
  400cce:	4640      	mov	r0, r8
  400cd0:	47b0      	blx	r6
				byte_1 = getByte_18(input, font_index);
  400cd2:	4621      	mov	r1, r4
  400cd4:	2023      	movs	r0, #35	; 0x23
  400cd6:	47b8      	blx	r7
  400cd8:	9001      	str	r0, [sp, #4]
				byte_2 = getByte_18(input, font_index + width);
  400cda:	4629      	mov	r1, r5
  400cdc:	2023      	movs	r0, #35	; 0x23
  400cde:	47b8      	blx	r7
  400ce0:	9002      	str	r0, [sp, #8]
				display_data(byte_1, d_id);
  400ce2:	4659      	mov	r1, fp
  400ce4:	9801      	ldr	r0, [sp, #4]
  400ce6:	47b0      	blx	r6
				display_data(byte_2, d_id);
  400ce8:	4659      	mov	r1, fp
  400cea:	9802      	ldr	r0, [sp, #8]
  400cec:	47b0      	blx	r6
  400cee:	e783      	b.n	400bf8 <display_char+0x188>
			while (font_index < width) {
				//Sharps and flats are elevated, rest of characters are not
				if(input != '#' && input != 'b') {
					display_data(0, d_id);
				}
				display_data(0, d_id);
  400cf0:	4659      	mov	r1, fp
  400cf2:	4640      	mov	r0, r8
  400cf4:	47b0      	blx	r6
				byte_1 = getByte_18(input, font_index);
  400cf6:	4621      	mov	r1, r4
  400cf8:	2062      	movs	r0, #98	; 0x62
  400cfa:	47b8      	blx	r7
  400cfc:	9001      	str	r0, [sp, #4]
				byte_2 = getByte_18(input, font_index + width);
  400cfe:	4629      	mov	r1, r5
  400d00:	2062      	movs	r0, #98	; 0x62
  400d02:	47b8      	blx	r7
  400d04:	9002      	str	r0, [sp, #8]
				display_data(byte_1, d_id);
  400d06:	4659      	mov	r1, fp
  400d08:	9801      	ldr	r0, [sp, #4]
  400d0a:	47b0      	blx	r6
				display_data(byte_2, d_id);
  400d0c:	4659      	mov	r1, fp
  400d0e:	9802      	ldr	r0, [sp, #8]
  400d10:	47b0      	blx	r6
  400d12:	e771      	b.n	400bf8 <display_char+0x188>
				}
				font_index++;
			}
		}
	}
 }
  400d14:	b005      	add	sp, #20
  400d16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  400d1a:	bf00      	nop
  400d1c:	00400865 	.word	0x00400865
  400d20:	004025a1 	.word	0x004025a1
  400d24:	004025a5 	.word	0x004025a5
  400d28:	004025a9 	.word	0x004025a9
  400d2c:	004025fd 	.word	0x004025fd
  400d30:	004025ad 	.word	0x004025ad
  400d34:	004025c9 	.word	0x004025c9

00400d38 <display_char_inverted>:

 // Inverted version of display_char
 void display_char_inverted(char input, uint8_t font_size, uint8_t d_id) {
  400d38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400d3c:	b085      	sub	sp, #20
  400d3e:	9201      	str	r2, [sp, #4]
	 // Lets us customize our space width, input parameter can be added if needed
	 if(input == ' ') {
  400d40:	2820      	cmp	r0, #32
  400d42:	d108      	bne.n	400d56 <display_char_inverted+0x1e>
  400d44:	2408      	movs	r4, #8
		 int i;
		 for(i = 8; i > 0; i--) {
			 display_data(0xFF, d_id);
  400d46:	26ff      	movs	r6, #255	; 0xff
  400d48:	4db5      	ldr	r5, [pc, #724]	; (401020 <display_char_inverted+0x2e8>)
  400d4a:	9901      	ldr	r1, [sp, #4]
  400d4c:	4630      	mov	r0, r6
  400d4e:	47a8      	blx	r5
 // Inverted version of display_char
 void display_char_inverted(char input, uint8_t font_size, uint8_t d_id) {
	 // Lets us customize our space width, input parameter can be added if needed
	 if(input == ' ') {
		 int i;
		 for(i = 8; i > 0; i--) {
  400d50:	3c01      	subs	r4, #1
  400d52:	d1fa      	bne.n	400d4a <display_char_inverted+0x12>
  400d54:	e18a      	b.n	40106c <display_char_inverted+0x334>
  400d56:	4606      	mov	r6, r0
	 else {
		 uint16_t font_index = 0;
		 uint8_t byte_1;
		 uint8_t byte_2;
		 uint8_t byte_3;
		 if(font_size == 28) {
  400d58:	291c      	cmp	r1, #28
  400d5a:	d147      	bne.n	400dec <display_char_inverted+0xb4>
			 uint16_t width = getWidth_28();
  400d5c:	4bb1      	ldr	r3, [pc, #708]	; (401024 <display_char_inverted+0x2ec>)
  400d5e:	4798      	blx	r3
  400d60:	fa1f fa80 	uxth.w	sl, r0
			 while (font_index < width) {
  400d64:	f1ba 0f00 	cmp.w	sl, #0
  400d68:	f000 8180 	beq.w	40106c <display_char_inverted+0x334>
				 if(input != '#' && input != 'b') {
					 display_data(0xFF, d_id);
				 }
				 byte_1 = ~(getByte_28(input, font_index));
				 byte_2 = ~(getByte_28(input, font_index + width));
				 byte_3 = ~(getByte_28(input, font_index + 2*width));
  400d6c:	ea4f 034a 	mov.w	r3, sl, lsl #1
  400d70:	b29b      	uxth	r3, r3
  400d72:	9302      	str	r3, [sp, #8]
  400d74:	4654      	mov	r4, sl
  400d76:	2700      	movs	r7, #0
			 while (font_index < width) {
				 //Sharps and flats are elevated, rest of characters are not
				 if(input != '#' && input != 'b') {
					 display_data(0xFF, d_id);
				 }
				 byte_1 = ~(getByte_28(input, font_index));
  400d78:	f8df 92b4 	ldr.w	r9, [pc, #692]	; 401030 <display_char_inverted+0x2f8>
				 byte_2 = ~(getByte_28(input, font_index + width));
				 byte_3 = ~(getByte_28(input, font_index + 2*width));
				 display_data(byte_1, d_id);
  400d7c:	f8df 82a0 	ldr.w	r8, [pc, #672]	; 401020 <display_char_inverted+0x2e8>
  400d80:	f8cd a00c 	str.w	sl, [sp, #12]
  400d84:	b2bd      	uxth	r5, r7
		 uint8_t byte_3;
		 if(font_size == 28) {
			 uint16_t width = getWidth_28();
			 while (font_index < width) {
				 //Sharps and flats are elevated, rest of characters are not
				 if(input != '#' && input != 'b') {
  400d86:	2e23      	cmp	r6, #35	; 0x23
  400d88:	f000 80d5 	beq.w	400f36 <display_char_inverted+0x1fe>
  400d8c:	2e62      	cmp	r6, #98	; 0x62
  400d8e:	f000 80b3 	beq.w	400ef8 <display_char_inverted+0x1c0>
					 display_data(0xFF, d_id);
  400d92:	9901      	ldr	r1, [sp, #4]
  400d94:	20ff      	movs	r0, #255	; 0xff
  400d96:	47c0      	blx	r8
				 }
				 byte_1 = ~(getByte_28(input, font_index));
  400d98:	4629      	mov	r1, r5
  400d9a:	4630      	mov	r0, r6
  400d9c:	47c8      	blx	r9
  400d9e:	4683      	mov	fp, r0
				 byte_2 = ~(getByte_28(input, font_index + width));
  400da0:	4621      	mov	r1, r4
  400da2:	4630      	mov	r0, r6
  400da4:	47c8      	blx	r9
  400da6:	4682      	mov	sl, r0
				 byte_3 = ~(getByte_28(input, font_index + 2*width));
  400da8:	9b02      	ldr	r3, [sp, #8]
  400daa:	18e9      	adds	r1, r5, r3
  400dac:	b289      	uxth	r1, r1
  400dae:	4630      	mov	r0, r6
  400db0:	47c8      	blx	r9
  400db2:	4605      	mov	r5, r0
				 display_data(byte_1, d_id);
  400db4:	ea6f 000b 	mvn.w	r0, fp
  400db8:	f8dd b004 	ldr.w	fp, [sp, #4]
  400dbc:	4659      	mov	r1, fp
  400dbe:	b2c0      	uxtb	r0, r0
  400dc0:	47c0      	blx	r8
				 display_data(byte_2, d_id);
  400dc2:	ea6f 000a 	mvn.w	r0, sl
  400dc6:	4659      	mov	r1, fp
  400dc8:	b2c0      	uxtb	r0, r0
  400dca:	47c0      	blx	r8
				 display_data(byte_3, d_id);
  400dcc:	43e8      	mvns	r0, r5
  400dce:	4659      	mov	r1, fp
  400dd0:	b2c0      	uxtb	r0, r0
  400dd2:	47c0      	blx	r8
  400dd4:	e002      	b.n	400ddc <display_char_inverted+0xa4>
				 //Sharps and flats are elevated, rest of characters are not
				 if(input == '#' || input == 'b') {
					 display_data(0xFF, d_id);
  400dd6:	9901      	ldr	r1, [sp, #4]
  400dd8:	20ff      	movs	r0, #255	; 0xff
  400dda:	47c0      	blx	r8
  400ddc:	3701      	adds	r7, #1
  400dde:	3401      	adds	r4, #1
  400de0:	b2a4      	uxth	r4, r4
		 uint8_t byte_1;
		 uint8_t byte_2;
		 uint8_t byte_3;
		 if(font_size == 28) {
			 uint16_t width = getWidth_28();
			 while (font_index < width) {
  400de2:	b2bb      	uxth	r3, r7
  400de4:	9a03      	ldr	r2, [sp, #12]
  400de6:	4293      	cmp	r3, r2
  400de8:	d3cc      	bcc.n	400d84 <display_char_inverted+0x4c>
  400dea:	e13f      	b.n	40106c <display_char_inverted+0x334>
				 }
				 font_index++;
			 }
		 }

		 else if(font_size == 22) {
  400dec:	2916      	cmp	r1, #22
  400dee:	d147      	bne.n	400e80 <display_char_inverted+0x148>
			 uint16_t width = getWidth_22();
  400df0:	4b8d      	ldr	r3, [pc, #564]	; (401028 <display_char_inverted+0x2f0>)
  400df2:	4798      	blx	r3
  400df4:	fa1f fa80 	uxth.w	sl, r0
			 while (font_index < width) {
  400df8:	f1ba 0f00 	cmp.w	sl, #0
  400dfc:	f000 8136 	beq.w	40106c <display_char_inverted+0x334>
				 if(input != '#' && input != 'b') {
					 display_data(0xFF, d_id);
				 }
				 byte_1 = ~(getByte_22(input, font_index));
				 byte_2 = ~(getByte_22(input, font_index + width));
				 byte_3 = ~(getByte_22(input, font_index + 2*width));
  400e00:	ea4f 034a 	mov.w	r3, sl, lsl #1
  400e04:	b29b      	uxth	r3, r3
  400e06:	9302      	str	r3, [sp, #8]
  400e08:	4654      	mov	r4, sl
  400e0a:	2700      	movs	r7, #0
			 while (font_index < width) {
				 //Sharps and flats are elevated, rest of characters are not
				 if(input != '#' && input != 'b') {
					 display_data(0xFF, d_id);
				 }
				 byte_1 = ~(getByte_22(input, font_index));
  400e0c:	f8df 9224 	ldr.w	r9, [pc, #548]	; 401034 <display_char_inverted+0x2fc>
				 byte_2 = ~(getByte_22(input, font_index + width));
				 byte_3 = ~(getByte_22(input, font_index + 2*width));
				 display_data(byte_1, d_id);
  400e10:	f8df 820c 	ldr.w	r8, [pc, #524]	; 401020 <display_char_inverted+0x2e8>
  400e14:	f8cd a00c 	str.w	sl, [sp, #12]
  400e18:	b2bd      	uxth	r5, r7

		 else if(font_size == 22) {
			 uint16_t width = getWidth_22();
			 while (font_index < width) {
				 //Sharps and flats are elevated, rest of characters are not
				 if(input != '#' && input != 'b') {
  400e1a:	2e23      	cmp	r6, #35	; 0x23
  400e1c:	f000 80aa 	beq.w	400f74 <display_char_inverted+0x23c>
  400e20:	2e62      	cmp	r6, #98	; 0x62
  400e22:	f000 80c6 	beq.w	400fb2 <display_char_inverted+0x27a>
					 display_data(0xFF, d_id);
  400e26:	9901      	ldr	r1, [sp, #4]
  400e28:	20ff      	movs	r0, #255	; 0xff
  400e2a:	47c0      	blx	r8
				 }
				 byte_1 = ~(getByte_22(input, font_index));
  400e2c:	4629      	mov	r1, r5
  400e2e:	4630      	mov	r0, r6
  400e30:	47c8      	blx	r9
  400e32:	4683      	mov	fp, r0
				 byte_2 = ~(getByte_22(input, font_index + width));
  400e34:	4621      	mov	r1, r4
  400e36:	4630      	mov	r0, r6
  400e38:	47c8      	blx	r9
  400e3a:	4682      	mov	sl, r0
				 byte_3 = ~(getByte_22(input, font_index + 2*width));
  400e3c:	9b02      	ldr	r3, [sp, #8]
  400e3e:	18e9      	adds	r1, r5, r3
  400e40:	b289      	uxth	r1, r1
  400e42:	4630      	mov	r0, r6
  400e44:	47c8      	blx	r9
  400e46:	4605      	mov	r5, r0
				 display_data(byte_1, d_id);
  400e48:	ea6f 000b 	mvn.w	r0, fp
  400e4c:	f8dd b004 	ldr.w	fp, [sp, #4]
  400e50:	4659      	mov	r1, fp
  400e52:	b2c0      	uxtb	r0, r0
  400e54:	47c0      	blx	r8
				 display_data(byte_2, d_id);
  400e56:	ea6f 000a 	mvn.w	r0, sl
  400e5a:	4659      	mov	r1, fp
  400e5c:	b2c0      	uxtb	r0, r0
  400e5e:	47c0      	blx	r8
				 display_data(byte_3, d_id);
  400e60:	43e8      	mvns	r0, r5
  400e62:	4659      	mov	r1, fp
  400e64:	b2c0      	uxtb	r0, r0
  400e66:	47c0      	blx	r8
  400e68:	e002      	b.n	400e70 <display_char_inverted+0x138>
				 //Sharps and flats are elevated, rest of characters are not
				 if(input == '#' || input == 'b') {
					 display_data(0xFF, d_id);
  400e6a:	9901      	ldr	r1, [sp, #4]
  400e6c:	20ff      	movs	r0, #255	; 0xff
  400e6e:	47c0      	blx	r8
  400e70:	3701      	adds	r7, #1
  400e72:	3401      	adds	r4, #1
  400e74:	b2a4      	uxth	r4, r4
			 }
		 }

		 else if(font_size == 22) {
			 uint16_t width = getWidth_22();
			 while (font_index < width) {
  400e76:	b2bb      	uxth	r3, r7
  400e78:	9a03      	ldr	r2, [sp, #12]
  400e7a:	429a      	cmp	r2, r3
  400e7c:	d8cc      	bhi.n	400e18 <display_char_inverted+0xe0>
  400e7e:	e0f5      	b.n	40106c <display_char_inverted+0x334>
			 }
		 }

		 // Defaults to 18 to reduce errors.
		 else {
			 uint16_t width = getWidth_18();
  400e80:	4b6a      	ldr	r3, [pc, #424]	; (40102c <display_char_inverted+0x2f4>)
  400e82:	4798      	blx	r3
  400e84:	fa1f fb80 	uxth.w	fp, r0
			 while (font_index < width) {
  400e88:	f1bb 0f00 	cmp.w	fp, #0
  400e8c:	f000 80ee 	beq.w	40106c <display_char_inverted+0x334>
  400e90:	465d      	mov	r5, fp
  400e92:	2400      	movs	r4, #0
				 //Sharps and flats are elevated, rest of characters are not
				 if(input != '#' && input != 'b') {
					 display_data(0xFF, d_id);
				 }
				 display_data(0, d_id);
  400e94:	4f62      	ldr	r7, [pc, #392]	; (401020 <display_char_inverted+0x2e8>)
				 byte_1 = ~(getByte_18(input, font_index));
  400e96:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 401038 <display_char_inverted+0x300>
		 // Defaults to 18 to reduce errors.
		 else {
			 uint16_t width = getWidth_18();
			 while (font_index < width) {
				 //Sharps and flats are elevated, rest of characters are not
				 if(input != '#' && input != 'b') {
  400e9a:	2e23      	cmp	r6, #35	; 0x23
  400e9c:	f000 80a8 	beq.w	400ff0 <display_char_inverted+0x2b8>
  400ea0:	2e62      	cmp	r6, #98	; 0x62
  400ea2:	f000 80cb 	beq.w	40103c <display_char_inverted+0x304>
					 display_data(0xFF, d_id);
  400ea6:	f8dd a004 	ldr.w	sl, [sp, #4]
  400eaa:	4651      	mov	r1, sl
  400eac:	20ff      	movs	r0, #255	; 0xff
  400eae:	47b8      	blx	r7
				 }
				 display_data(0, d_id);
  400eb0:	f8cd a004 	str.w	sl, [sp, #4]
  400eb4:	4651      	mov	r1, sl
  400eb6:	2000      	movs	r0, #0
  400eb8:	47b8      	blx	r7
				 byte_1 = ~(getByte_18(input, font_index));
  400eba:	4621      	mov	r1, r4
  400ebc:	4630      	mov	r0, r6
  400ebe:	47c0      	blx	r8
  400ec0:	4682      	mov	sl, r0
				 byte_2 = ~(getByte_18(input, font_index + width));
  400ec2:	4629      	mov	r1, r5
  400ec4:	4630      	mov	r0, r6
  400ec6:	47c0      	blx	r8
  400ec8:	4681      	mov	r9, r0
				 display_data(byte_1, d_id);
  400eca:	ea6f 000a 	mvn.w	r0, sl
  400ece:	f8dd a004 	ldr.w	sl, [sp, #4]
  400ed2:	4651      	mov	r1, sl
  400ed4:	b2c0      	uxtb	r0, r0
  400ed6:	47b8      	blx	r7
				 display_data(byte_2, d_id);
  400ed8:	ea6f 0009 	mvn.w	r0, r9
  400edc:	4651      	mov	r1, sl
  400ede:	b2c0      	uxtb	r0, r0
  400ee0:	47b8      	blx	r7
  400ee2:	e002      	b.n	400eea <display_char_inverted+0x1b2>
				 //Sharps and flats are elevated, rest of characters are not
				 if(input == '#' || input == 'b') {
					 display_data(0xFF, d_id);
  400ee4:	9901      	ldr	r1, [sp, #4]
  400ee6:	20ff      	movs	r0, #255	; 0xff
  400ee8:	47b8      	blx	r7
				 }
				 font_index++;
  400eea:	3401      	adds	r4, #1
  400eec:	b2a4      	uxth	r4, r4
  400eee:	3501      	adds	r5, #1
  400ef0:	b2ad      	uxth	r5, r5
		 }

		 // Defaults to 18 to reduce errors.
		 else {
			 uint16_t width = getWidth_18();
			 while (font_index < width) {
  400ef2:	45a3      	cmp	fp, r4
  400ef4:	d1d1      	bne.n	400e9a <display_char_inverted+0x162>
  400ef6:	e0b9      	b.n	40106c <display_char_inverted+0x334>
			 while (font_index < width) {
				 //Sharps and flats are elevated, rest of characters are not
				 if(input != '#' && input != 'b') {
					 display_data(0xFF, d_id);
				 }
				 byte_1 = ~(getByte_28(input, font_index));
  400ef8:	4629      	mov	r1, r5
  400efa:	2062      	movs	r0, #98	; 0x62
  400efc:	47c8      	blx	r9
  400efe:	4683      	mov	fp, r0
				 byte_2 = ~(getByte_28(input, font_index + width));
  400f00:	4621      	mov	r1, r4
  400f02:	2062      	movs	r0, #98	; 0x62
  400f04:	47c8      	blx	r9
  400f06:	4682      	mov	sl, r0
				 byte_3 = ~(getByte_28(input, font_index + 2*width));
  400f08:	9b02      	ldr	r3, [sp, #8]
  400f0a:	18e9      	adds	r1, r5, r3
  400f0c:	b289      	uxth	r1, r1
  400f0e:	2062      	movs	r0, #98	; 0x62
  400f10:	47c8      	blx	r9
  400f12:	4605      	mov	r5, r0
				 display_data(byte_1, d_id);
  400f14:	ea6f 000b 	mvn.w	r0, fp
  400f18:	f8dd b004 	ldr.w	fp, [sp, #4]
  400f1c:	4659      	mov	r1, fp
  400f1e:	b2c0      	uxtb	r0, r0
  400f20:	47c0      	blx	r8
				 display_data(byte_2, d_id);
  400f22:	ea6f 000a 	mvn.w	r0, sl
  400f26:	4659      	mov	r1, fp
  400f28:	b2c0      	uxtb	r0, r0
  400f2a:	47c0      	blx	r8
				 display_data(byte_3, d_id);
  400f2c:	43e8      	mvns	r0, r5
  400f2e:	4659      	mov	r1, fp
  400f30:	b2c0      	uxtb	r0, r0
  400f32:	47c0      	blx	r8
  400f34:	e74f      	b.n	400dd6 <display_char_inverted+0x9e>
			 while (font_index < width) {
				 //Sharps and flats are elevated, rest of characters are not
				 if(input != '#' && input != 'b') {
					 display_data(0xFF, d_id);
				 }
				 byte_1 = ~(getByte_28(input, font_index));
  400f36:	4629      	mov	r1, r5
  400f38:	2023      	movs	r0, #35	; 0x23
  400f3a:	47c8      	blx	r9
  400f3c:	4683      	mov	fp, r0
				 byte_2 = ~(getByte_28(input, font_index + width));
  400f3e:	4621      	mov	r1, r4
  400f40:	2023      	movs	r0, #35	; 0x23
  400f42:	47c8      	blx	r9
  400f44:	4682      	mov	sl, r0
				 byte_3 = ~(getByte_28(input, font_index + 2*width));
  400f46:	9b02      	ldr	r3, [sp, #8]
  400f48:	18e9      	adds	r1, r5, r3
  400f4a:	b289      	uxth	r1, r1
  400f4c:	2023      	movs	r0, #35	; 0x23
  400f4e:	47c8      	blx	r9
  400f50:	4605      	mov	r5, r0
				 display_data(byte_1, d_id);
  400f52:	ea6f 000b 	mvn.w	r0, fp
  400f56:	f8dd b004 	ldr.w	fp, [sp, #4]
  400f5a:	4659      	mov	r1, fp
  400f5c:	b2c0      	uxtb	r0, r0
  400f5e:	47c0      	blx	r8
				 display_data(byte_2, d_id);
  400f60:	ea6f 000a 	mvn.w	r0, sl
  400f64:	4659      	mov	r1, fp
  400f66:	b2c0      	uxtb	r0, r0
  400f68:	47c0      	blx	r8
				 display_data(byte_3, d_id);
  400f6a:	43e8      	mvns	r0, r5
  400f6c:	4659      	mov	r1, fp
  400f6e:	b2c0      	uxtb	r0, r0
  400f70:	47c0      	blx	r8
  400f72:	e730      	b.n	400dd6 <display_char_inverted+0x9e>
			 while (font_index < width) {
				 //Sharps and flats are elevated, rest of characters are not
				 if(input != '#' && input != 'b') {
					 display_data(0xFF, d_id);
				 }
				 byte_1 = ~(getByte_22(input, font_index));
  400f74:	4629      	mov	r1, r5
  400f76:	2023      	movs	r0, #35	; 0x23
  400f78:	47c8      	blx	r9
  400f7a:	4683      	mov	fp, r0
				 byte_2 = ~(getByte_22(input, font_index + width));
  400f7c:	4621      	mov	r1, r4
  400f7e:	2023      	movs	r0, #35	; 0x23
  400f80:	47c8      	blx	r9
  400f82:	4682      	mov	sl, r0
				 byte_3 = ~(getByte_22(input, font_index + 2*width));
  400f84:	9b02      	ldr	r3, [sp, #8]
  400f86:	18e9      	adds	r1, r5, r3
  400f88:	b289      	uxth	r1, r1
  400f8a:	2023      	movs	r0, #35	; 0x23
  400f8c:	47c8      	blx	r9
  400f8e:	4605      	mov	r5, r0
				 display_data(byte_1, d_id);
  400f90:	ea6f 000b 	mvn.w	r0, fp
  400f94:	f8dd b004 	ldr.w	fp, [sp, #4]
  400f98:	4659      	mov	r1, fp
  400f9a:	b2c0      	uxtb	r0, r0
  400f9c:	47c0      	blx	r8
				 display_data(byte_2, d_id);
  400f9e:	ea6f 000a 	mvn.w	r0, sl
  400fa2:	4659      	mov	r1, fp
  400fa4:	b2c0      	uxtb	r0, r0
  400fa6:	47c0      	blx	r8
				 display_data(byte_3, d_id);
  400fa8:	43e8      	mvns	r0, r5
  400faa:	4659      	mov	r1, fp
  400fac:	b2c0      	uxtb	r0, r0
  400fae:	47c0      	blx	r8
  400fb0:	e75b      	b.n	400e6a <display_char_inverted+0x132>
			 while (font_index < width) {
				 //Sharps and flats are elevated, rest of characters are not
				 if(input != '#' && input != 'b') {
					 display_data(0xFF, d_id);
				 }
				 byte_1 = ~(getByte_22(input, font_index));
  400fb2:	4629      	mov	r1, r5
  400fb4:	2062      	movs	r0, #98	; 0x62
  400fb6:	47c8      	blx	r9
  400fb8:	4683      	mov	fp, r0
				 byte_2 = ~(getByte_22(input, font_index + width));
  400fba:	4621      	mov	r1, r4
  400fbc:	2062      	movs	r0, #98	; 0x62
  400fbe:	47c8      	blx	r9
  400fc0:	4682      	mov	sl, r0
				 byte_3 = ~(getByte_22(input, font_index + 2*width));
  400fc2:	9b02      	ldr	r3, [sp, #8]
  400fc4:	18e9      	adds	r1, r5, r3
  400fc6:	b289      	uxth	r1, r1
  400fc8:	2062      	movs	r0, #98	; 0x62
  400fca:	47c8      	blx	r9
  400fcc:	4605      	mov	r5, r0
				 display_data(byte_1, d_id);
  400fce:	ea6f 000b 	mvn.w	r0, fp
  400fd2:	f8dd b004 	ldr.w	fp, [sp, #4]
  400fd6:	4659      	mov	r1, fp
  400fd8:	b2c0      	uxtb	r0, r0
  400fda:	47c0      	blx	r8
				 display_data(byte_2, d_id);
  400fdc:	ea6f 000a 	mvn.w	r0, sl
  400fe0:	4659      	mov	r1, fp
  400fe2:	b2c0      	uxtb	r0, r0
  400fe4:	47c0      	blx	r8
				 display_data(byte_3, d_id);
  400fe6:	43e8      	mvns	r0, r5
  400fe8:	4659      	mov	r1, fp
  400fea:	b2c0      	uxtb	r0, r0
  400fec:	47c0      	blx	r8
  400fee:	e73c      	b.n	400e6a <display_char_inverted+0x132>
			 while (font_index < width) {
				 //Sharps and flats are elevated, rest of characters are not
				 if(input != '#' && input != 'b') {
					 display_data(0xFF, d_id);
				 }
				 display_data(0, d_id);
  400ff0:	9901      	ldr	r1, [sp, #4]
  400ff2:	2000      	movs	r0, #0
  400ff4:	47b8      	blx	r7
				 byte_1 = ~(getByte_18(input, font_index));
  400ff6:	4621      	mov	r1, r4
  400ff8:	2023      	movs	r0, #35	; 0x23
  400ffa:	47c0      	blx	r8
  400ffc:	4682      	mov	sl, r0
				 byte_2 = ~(getByte_18(input, font_index + width));
  400ffe:	4629      	mov	r1, r5
  401000:	2023      	movs	r0, #35	; 0x23
  401002:	47c0      	blx	r8
  401004:	4681      	mov	r9, r0
				 display_data(byte_1, d_id);
  401006:	ea6f 000a 	mvn.w	r0, sl
  40100a:	f8dd a004 	ldr.w	sl, [sp, #4]
  40100e:	4651      	mov	r1, sl
  401010:	b2c0      	uxtb	r0, r0
  401012:	47b8      	blx	r7
				 display_data(byte_2, d_id);
  401014:	ea6f 0009 	mvn.w	r0, r9
  401018:	4651      	mov	r1, sl
  40101a:	b2c0      	uxtb	r0, r0
  40101c:	47b8      	blx	r7
  40101e:	e761      	b.n	400ee4 <display_char_inverted+0x1ac>
  401020:	00400865 	.word	0x00400865
  401024:	004025a1 	.word	0x004025a1
  401028:	004025a5 	.word	0x004025a5
  40102c:	004025a9 	.word	0x004025a9
  401030:	004025ad 	.word	0x004025ad
  401034:	004025c9 	.word	0x004025c9
  401038:	004025fd 	.word	0x004025fd
			 while (font_index < width) {
				 //Sharps and flats are elevated, rest of characters are not
				 if(input != '#' && input != 'b') {
					 display_data(0xFF, d_id);
				 }
				 display_data(0, d_id);
  40103c:	9901      	ldr	r1, [sp, #4]
  40103e:	2000      	movs	r0, #0
  401040:	47b8      	blx	r7
				 byte_1 = ~(getByte_18(input, font_index));
  401042:	4621      	mov	r1, r4
  401044:	2062      	movs	r0, #98	; 0x62
  401046:	47c0      	blx	r8
  401048:	4682      	mov	sl, r0
				 byte_2 = ~(getByte_18(input, font_index + width));
  40104a:	4629      	mov	r1, r5
  40104c:	2062      	movs	r0, #98	; 0x62
  40104e:	47c0      	blx	r8
  401050:	4681      	mov	r9, r0
				 display_data(byte_1, d_id);
  401052:	ea6f 000a 	mvn.w	r0, sl
  401056:	f8dd a004 	ldr.w	sl, [sp, #4]
  40105a:	4651      	mov	r1, sl
  40105c:	b2c0      	uxtb	r0, r0
  40105e:	47b8      	blx	r7
				 display_data(byte_2, d_id);
  401060:	ea6f 0009 	mvn.w	r0, r9
  401064:	4651      	mov	r1, sl
  401066:	b2c0      	uxtb	r0, r0
  401068:	47b8      	blx	r7
  40106a:	e73b      	b.n	400ee4 <display_char_inverted+0x1ac>
				 }
				 font_index++;
			 }
		 }
	 }
 }
  40106c:	b005      	add	sp, #20
  40106e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401072:	bf00      	nop

00401074 <display_number>:

 
void display_number(uint16_t input, uint8_t font_size, uint8_t d_id) {
  401074:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  401078:	b083      	sub	sp, #12
  40107a:	460c      	mov	r4, r1
  40107c:	4615      	mov	r5, r2
	 int buffersize = 0;
	 char buffer[8];

	 if(input==0) {
  40107e:	b938      	cbnz	r0, 401090 <display_number+0x1c>
		 display_char('0', font_size, d_id);
  401080:	2030      	movs	r0, #48	; 0x30
  401082:	4e28      	ldr	r6, [pc, #160]	; (401124 <display_number+0xb0>)
  401084:	47b0      	blx	r6
		 display_char(' ', font_size, d_id);
  401086:	462a      	mov	r2, r5
  401088:	4621      	mov	r1, r4
  40108a:	2020      	movs	r0, #32
  40108c:	47b0      	blx	r6
  40108e:	e045      	b.n	40111c <display_number+0xa8>
  401090:	4603      	mov	r3, r0
		 buffersize = 7;
	 }
	 else if (input > 99999) {
		 buffersize = 6;
	 }
	 else if (input > 9999) {
  401092:	f242 720f 	movw	r2, #9999	; 0x270f
  401096:	4290      	cmp	r0, r2
  401098:	d830      	bhi.n	4010fc <display_number+0x88>
		 buffersize = 5;
	 }
	 else if (input > 999) {
  40109a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
  40109e:	d230      	bcs.n	401102 <display_number+0x8e>
		 buffersize = 4;
	 }
	 else if(input > 99) {
  4010a0:	2863      	cmp	r0, #99	; 0x63
  4010a2:	d831      	bhi.n	401108 <display_number+0x94>
	 }
	 else if(input > 9) {
		 buffersize = 2;
	 }
	 else {
		 buffersize = 1;
  4010a4:	2809      	cmp	r0, #9
  4010a6:	bf8c      	ite	hi
  4010a8:	f04f 0c02 	movhi.w	ip, #2
  4010ac:	f04f 0c01 	movls.w	ip, #1
  4010b0:	e02c      	b.n	40110c <display_number+0x98>
	 // Does this to reverse the order it's output in
	 int i = buffersize - 1;
	 uint32_t temp;
	 while(input > 0) {
		 temp = input;
		 buffer[i] = (char)(input%10 + '0');
  4010b2:	fbae 7203 	umull	r7, r2, lr, r3
  4010b6:	08d2      	lsrs	r2, r2, #3
  4010b8:	eb02 0782 	add.w	r7, r2, r2, lsl #2
  4010bc:	eba3 0347 	sub.w	r3, r3, r7, lsl #1
  4010c0:	3330      	adds	r3, #48	; 0x30
  4010c2:	f800 3d01 	strb.w	r3, [r0, #-1]!
		 input = temp;
		 input = input/10;
  4010c6:	b293      	uxth	r3, r2
		 i--;
  4010c8:	3901      	subs	r1, #1

	 // Grabs each digit at a time from integer and stores in array
	 // Does this to reverse the order it's output in
	 int i = buffersize - 1;
	 uint32_t temp;
	 while(input > 0) {
  4010ca:	2b00      	cmp	r3, #0
  4010cc:	d1f1      	bne.n	4010b2 <display_number+0x3e>
		 buffer[i] = (char)(input%10 + '0');
		 input = temp;
		 input = input/10;
		 i--;
	 }
	 while(i > 0) {
  4010ce:	2900      	cmp	r1, #0
  4010d0:	dd00      	ble.n	4010d4 <display_number+0x60>
  4010d2:	e7fe      	b.n	4010d2 <display_number+0x5e>
		 buffer[i] = '1';
	 }

	 i = 0;
	 while(i < buffersize) {
  4010d4:	f1bc 0f00 	cmp.w	ip, #0
  4010d8:	d020      	beq.n	40111c <display_number+0xa8>
  4010da:	466f      	mov	r7, sp
		 display_char(buffer[i], font_size, d_id);
  4010dc:	f8df 8044 	ldr.w	r8, [pc, #68]	; 401124 <display_number+0xb0>
		 display_char(' ', font_size, d_id);
  4010e0:	f04f 0920 	mov.w	r9, #32
		 buffer[i] = '1';
	 }

	 i = 0;
	 while(i < buffersize) {
		 display_char(buffer[i], font_size, d_id);
  4010e4:	462a      	mov	r2, r5
  4010e6:	4621      	mov	r1, r4
  4010e8:	f817 0b01 	ldrb.w	r0, [r7], #1
  4010ec:	47c0      	blx	r8
		 display_char(' ', font_size, d_id);
  4010ee:	462a      	mov	r2, r5
  4010f0:	4621      	mov	r1, r4
  4010f2:	4648      	mov	r0, r9
  4010f4:	47c0      	blx	r8
	 while(i > 0) {
		 buffer[i] = '1';
	 }

	 i = 0;
	 while(i < buffersize) {
  4010f6:	42be      	cmp	r6, r7
  4010f8:	d1f4      	bne.n	4010e4 <display_number+0x70>
  4010fa:	e00f      	b.n	40111c <display_number+0xa8>
	 }
	 else if (input > 99999) {
		 buffersize = 6;
	 }
	 else if (input > 9999) {
		 buffersize = 5;
  4010fc:	f04f 0c05 	mov.w	ip, #5
  401100:	e004      	b.n	40110c <display_number+0x98>
	 }
	 else if (input > 999) {
		 buffersize = 4;
  401102:	f04f 0c04 	mov.w	ip, #4
  401106:	e001      	b.n	40110c <display_number+0x98>
	 }
	 else if(input > 99) {
		 buffersize = 3;
  401108:	f04f 0c03 	mov.w	ip, #3
		 buffersize = 1;
	 }

	 // Grabs each digit at a time from integer and stores in array
	 // Does this to reverse the order it's output in
	 int i = buffersize - 1;
  40110c:	f10c 31ff 	add.w	r1, ip, #4294967295
  401110:	eb0d 060c 	add.w	r6, sp, ip
  401114:	4630      	mov	r0, r6
	 uint32_t temp;
	 while(input > 0) {
		 temp = input;
		 buffer[i] = (char)(input%10 + '0');
  401116:	f8df e010 	ldr.w	lr, [pc, #16]	; 401128 <display_number+0xb4>
  40111a:	e7ca      	b.n	4010b2 <display_number+0x3e>
	 while(i < buffersize) {
		 display_char(buffer[i], font_size, d_id);
		 display_char(' ', font_size, d_id);
		 i++;
	 }
 }
  40111c:	b003      	add	sp, #12
  40111e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  401122:	bf00      	nop
  401124:	00400a71 	.word	0x00400a71
  401128:	cccccccd 	.word	0xcccccccd

0040112c <note_display>:

// Display 0
void note_display(uint16_t note) {
  40112c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40112e:	4607      	mov	r7, r0
	 while(disp_ptr_location[0] < 640) {
  401130:	4bb1      	ldr	r3, [pc, #708]	; (4013f8 <note_display+0x2cc>)
  401132:	881b      	ldrh	r3, [r3, #0]
  401134:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
  401138:	d209      	bcs.n	40114e <note_display+0x22>
		 display_data(0, 0);
  40113a:	2600      	movs	r6, #0
  40113c:	4daf      	ldr	r5, [pc, #700]	; (4013fc <note_display+0x2d0>)
	 }
 }

// Display 0
void note_display(uint16_t note) {
	 while(disp_ptr_location[0] < 640) {
  40113e:	4cae      	ldr	r4, [pc, #696]	; (4013f8 <note_display+0x2cc>)
		 display_data(0, 0);
  401140:	4631      	mov	r1, r6
  401142:	4630      	mov	r0, r6
  401144:	47a8      	blx	r5
	 }
 }

// Display 0
void note_display(uint16_t note) {
	 while(disp_ptr_location[0] < 640) {
  401146:	8823      	ldrh	r3, [r4, #0]
  401148:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
  40114c:	d3f8      	bcc.n	401140 <note_display+0x14>
		 display_data(0, 0);
	 }

	 uint8_t octave = 0;

	  if(note < 12) {
  40114e:	2f0b      	cmp	r7, #11
  401150:	d914      	bls.n	40117c <note_display+0x50>
		 octave = 0;
	 }
	 else if(note < 24) {
  401152:	2f17      	cmp	r7, #23
  401154:	d914      	bls.n	401180 <note_display+0x54>
		 octave = 1;
	 }
	 else if(note < 36) {
  401156:	2f23      	cmp	r7, #35	; 0x23
  401158:	d914      	bls.n	401184 <note_display+0x58>
		 octave = 2;
	 }
	 else if(note < 48) {
  40115a:	2f2f      	cmp	r7, #47	; 0x2f
  40115c:	d914      	bls.n	401188 <note_display+0x5c>
		 octave = 3;
	 }
	 else if(note < 60) {
  40115e:	2f3b      	cmp	r7, #59	; 0x3b
  401160:	d914      	bls.n	40118c <note_display+0x60>
		octave = 4;
	 }
	 else if(note < 72) {
  401162:	2f47      	cmp	r7, #71	; 0x47
  401164:	d914      	bls.n	401190 <note_display+0x64>
		 octave = 5;
	 }
	 else if(note < 84) {
  401166:	2f53      	cmp	r7, #83	; 0x53
  401168:	d914      	bls.n	401194 <note_display+0x68>
		octave = 6;
	 }
	 else if(note < 96) {
  40116a:	2f5f      	cmp	r7, #95	; 0x5f
  40116c:	d914      	bls.n	401198 <note_display+0x6c>
		 octave = 7;
	 }
	 else if(note < 108) {
  40116e:	2f6b      	cmp	r7, #107	; 0x6b
  401170:	d914      	bls.n	40119c <note_display+0x70>
	 }
	 else if (note < 120){
		 octave = 9;
	}
	else{
		octave = 10;
  401172:	2f78      	cmp	r7, #120	; 0x78
  401174:	bf34      	ite	cc
  401176:	2409      	movcc	r4, #9
  401178:	240a      	movcs	r4, #10
  40117a:	e010      	b.n	40119e <note_display+0x72>
	 }

	 uint8_t octave = 0;

	  if(note < 12) {
		 octave = 0;
  40117c:	2400      	movs	r4, #0
  40117e:	e00e      	b.n	40119e <note_display+0x72>
	 }
	 else if(note < 24) {
		 octave = 1;
  401180:	2401      	movs	r4, #1
  401182:	e00c      	b.n	40119e <note_display+0x72>
	 }
	 else if(note < 36) {
		 octave = 2;
  401184:	2402      	movs	r4, #2
  401186:	e00a      	b.n	40119e <note_display+0x72>
	 }
	 else if(note < 48) {
		 octave = 3;
  401188:	2403      	movs	r4, #3
  40118a:	e008      	b.n	40119e <note_display+0x72>
	 }
	 else if(note < 60) {
		octave = 4;
  40118c:	2404      	movs	r4, #4
  40118e:	e006      	b.n	40119e <note_display+0x72>
	 }
	 else if(note < 72) {
		 octave = 5;
  401190:	2405      	movs	r4, #5
  401192:	e004      	b.n	40119e <note_display+0x72>
	 }
	 else if(note < 84) {
		octave = 6;
  401194:	2406      	movs	r4, #6
  401196:	e002      	b.n	40119e <note_display+0x72>
	 }
	 else if(note < 96) {
		 octave = 7;
  401198:	2407      	movs	r4, #7
  40119a:	e000      	b.n	40119e <note_display+0x72>
	 }
	 else if(note < 108) {
		 octave = 8;
  40119c:	2408      	movs	r4, #8
	}
	else{
		octave = 10;
	}

	note = note - octave*12;
  40119e:	b2a4      	uxth	r4, r4
  4011a0:	eba4 0384 	sub.w	r3, r4, r4, lsl #2
  4011a4:	eb07 0383 	add.w	r3, r7, r3, lsl #2
  4011a8:	b29b      	uxth	r3, r3

	 if(note % 2 == 0) {
  4011aa:	f013 0f01 	tst.w	r3, #1
  4011ae:	f040 80d5 	bne.w	40135c <note_display+0x230>
		 if(note % 12 == 0) {
  4011b2:	4a93      	ldr	r2, [pc, #588]	; (401400 <note_display+0x2d4>)
  4011b4:	fba2 1203 	umull	r1, r2, r2, r3
  4011b8:	08d2      	lsrs	r2, r2, #3
  4011ba:	eb02 0242 	add.w	r2, r2, r2, lsl #1
  4011be:	eba3 0282 	sub.w	r2, r3, r2, lsl #2
  4011c2:	b292      	uxth	r2, r2
  4011c4:	b9e2      	cbnz	r2, 401200 <note_display+0xd4>
			 display_char(' ', 28, 0);
  4011c6:	211c      	movs	r1, #28
  4011c8:	2020      	movs	r0, #32
  4011ca:	4d8e      	ldr	r5, [pc, #568]	; (401404 <note_display+0x2d8>)
  4011cc:	47a8      	blx	r5
			 display_char(' ', 28, 0);
  4011ce:	2200      	movs	r2, #0
  4011d0:	211c      	movs	r1, #28
  4011d2:	2020      	movs	r0, #32
  4011d4:	47a8      	blx	r5
			 display_char(' ', 28, 0);
  4011d6:	2200      	movs	r2, #0
  4011d8:	211c      	movs	r1, #28
  4011da:	2020      	movs	r0, #32
  4011dc:	47a8      	blx	r5
			 display_char(' ', 28, 0);
  4011de:	2200      	movs	r2, #0
  4011e0:	211c      	movs	r1, #28
  4011e2:	2020      	movs	r0, #32
  4011e4:	47a8      	blx	r5
			 display_char(' ', 28, 0);
  4011e6:	2200      	movs	r2, #0
  4011e8:	211c      	movs	r1, #28
  4011ea:	2020      	movs	r0, #32
  4011ec:	47a8      	blx	r5
			 display_char(' ', 28, 0);
  4011ee:	2200      	movs	r2, #0
  4011f0:	211c      	movs	r1, #28
  4011f2:	2020      	movs	r0, #32
  4011f4:	47a8      	blx	r5
			 display_char('C', 28, 0);
  4011f6:	2200      	movs	r2, #0
  4011f8:	211c      	movs	r1, #28
  4011fa:	2043      	movs	r0, #67	; 0x43
  4011fc:	47a8      	blx	r5
  4011fe:	e19c      	b.n	40153a <note_display+0x40e>
		 }
		 else if(note % 10 == 0) {
  401200:	4a81      	ldr	r2, [pc, #516]	; (401408 <note_display+0x2dc>)
  401202:	fba2 1203 	umull	r1, r2, r2, r3
  401206:	08d2      	lsrs	r2, r2, #3
  401208:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  40120c:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
  401210:	b292      	uxth	r2, r2
  401212:	b9e2      	cbnz	r2, 40124e <note_display+0x122>
			 display_char('A', 28, 0);
  401214:	211c      	movs	r1, #28
  401216:	2041      	movs	r0, #65	; 0x41
  401218:	4d7a      	ldr	r5, [pc, #488]	; (401404 <note_display+0x2d8>)
  40121a:	47a8      	blx	r5
			 display_char(' ', 28, 0);
  40121c:	2200      	movs	r2, #0
  40121e:	211c      	movs	r1, #28
  401220:	2020      	movs	r0, #32
  401222:	47a8      	blx	r5
			 display_char('#', 18, 0);
  401224:	2200      	movs	r2, #0
  401226:	2112      	movs	r1, #18
  401228:	2023      	movs	r0, #35	; 0x23
  40122a:	47a8      	blx	r5
			 display_char('/', 28, 0);
  40122c:	2200      	movs	r2, #0
  40122e:	211c      	movs	r1, #28
  401230:	202f      	movs	r0, #47	; 0x2f
  401232:	47a8      	blx	r5
			 display_char('B', 28, 0);
  401234:	2200      	movs	r2, #0
  401236:	211c      	movs	r1, #28
  401238:	2042      	movs	r0, #66	; 0x42
  40123a:	47a8      	blx	r5
			 display_char(' ', 28, 0);
  40123c:	2200      	movs	r2, #0
  40123e:	211c      	movs	r1, #28
  401240:	2020      	movs	r0, #32
  401242:	47a8      	blx	r5
			 display_char('b', 18, 0);
  401244:	2200      	movs	r2, #0
  401246:	2112      	movs	r1, #18
  401248:	2062      	movs	r0, #98	; 0x62
  40124a:	47a8      	blx	r5
  40124c:	e175      	b.n	40153a <note_display+0x40e>
		 }
		 else if(note % 8 == 0) {
  40124e:	f013 0f07 	tst.w	r3, #7
  401252:	d11d      	bne.n	401290 <note_display+0x164>
			 display_char('G', 28, 0);
  401254:	2200      	movs	r2, #0
  401256:	211c      	movs	r1, #28
  401258:	2047      	movs	r0, #71	; 0x47
  40125a:	4d6a      	ldr	r5, [pc, #424]	; (401404 <note_display+0x2d8>)
  40125c:	47a8      	blx	r5
			 display_char(' ', 28, 0);
  40125e:	2200      	movs	r2, #0
  401260:	211c      	movs	r1, #28
  401262:	2020      	movs	r0, #32
  401264:	47a8      	blx	r5
			 display_char('#', 18, 0);
  401266:	2200      	movs	r2, #0
  401268:	2112      	movs	r1, #18
  40126a:	2023      	movs	r0, #35	; 0x23
  40126c:	47a8      	blx	r5
			 display_char('/', 28, 0);
  40126e:	2200      	movs	r2, #0
  401270:	211c      	movs	r1, #28
  401272:	202f      	movs	r0, #47	; 0x2f
  401274:	47a8      	blx	r5
			 display_char('A', 28, 0);
  401276:	2200      	movs	r2, #0
  401278:	211c      	movs	r1, #28
  40127a:	2041      	movs	r0, #65	; 0x41
  40127c:	47a8      	blx	r5
			 display_char(' ', 28, 0);
  40127e:	2200      	movs	r2, #0
  401280:	211c      	movs	r1, #28
  401282:	2020      	movs	r0, #32
  401284:	47a8      	blx	r5
			 display_char('b', 18, 0);
  401286:	2200      	movs	r2, #0
  401288:	2112      	movs	r1, #18
  40128a:	2062      	movs	r0, #98	; 0x62
  40128c:	47a8      	blx	r5
  40128e:	e154      	b.n	40153a <note_display+0x40e>
		 }
		 else if(note % 6 == 0) {
  401290:	4a5b      	ldr	r2, [pc, #364]	; (401400 <note_display+0x2d4>)
  401292:	fba2 1203 	umull	r1, r2, r2, r3
  401296:	0892      	lsrs	r2, r2, #2
  401298:	eb02 0242 	add.w	r2, r2, r2, lsl #1
  40129c:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
  4012a0:	b292      	uxth	r2, r2
  4012a2:	b9e2      	cbnz	r2, 4012de <note_display+0x1b2>
			 display_char('F', 28, 0);
  4012a4:	211c      	movs	r1, #28
  4012a6:	2046      	movs	r0, #70	; 0x46
  4012a8:	4d56      	ldr	r5, [pc, #344]	; (401404 <note_display+0x2d8>)
  4012aa:	47a8      	blx	r5
			 display_char(' ', 28, 0);
  4012ac:	2200      	movs	r2, #0
  4012ae:	211c      	movs	r1, #28
  4012b0:	2020      	movs	r0, #32
  4012b2:	47a8      	blx	r5
			 display_char('#', 18, 0);
  4012b4:	2200      	movs	r2, #0
  4012b6:	2112      	movs	r1, #18
  4012b8:	2023      	movs	r0, #35	; 0x23
  4012ba:	47a8      	blx	r5
			 display_char('/', 28, 0);
  4012bc:	2200      	movs	r2, #0
  4012be:	211c      	movs	r1, #28
  4012c0:	202f      	movs	r0, #47	; 0x2f
  4012c2:	47a8      	blx	r5
			 display_char('G', 28, 0);
  4012c4:	2200      	movs	r2, #0
  4012c6:	211c      	movs	r1, #28
  4012c8:	2047      	movs	r0, #71	; 0x47
  4012ca:	47a8      	blx	r5
			 display_char(' ', 28, 0);
  4012cc:	2200      	movs	r2, #0
  4012ce:	211c      	movs	r1, #28
  4012d0:	2020      	movs	r0, #32
  4012d2:	47a8      	blx	r5
			 display_char('b', 18, 0);
  4012d4:	2200      	movs	r2, #0
  4012d6:	2112      	movs	r1, #18
  4012d8:	2062      	movs	r0, #98	; 0x62
  4012da:	47a8      	blx	r5
  4012dc:	e12d      	b.n	40153a <note_display+0x40e>
		 }
		 else if(note % 4 == 0) {
  4012de:	f013 0f03 	tst.w	r3, #3
  4012e2:	d11d      	bne.n	401320 <note_display+0x1f4>
			 display_char(' ', 28, 0);
  4012e4:	2200      	movs	r2, #0
  4012e6:	211c      	movs	r1, #28
  4012e8:	2020      	movs	r0, #32
  4012ea:	4d46      	ldr	r5, [pc, #280]	; (401404 <note_display+0x2d8>)
  4012ec:	47a8      	blx	r5
			 display_char(' ', 28, 0);
  4012ee:	2200      	movs	r2, #0
  4012f0:	211c      	movs	r1, #28
  4012f2:	2020      	movs	r0, #32
  4012f4:	47a8      	blx	r5
			 display_char(' ', 28, 0);
  4012f6:	2200      	movs	r2, #0
  4012f8:	211c      	movs	r1, #28
  4012fa:	2020      	movs	r0, #32
  4012fc:	47a8      	blx	r5
			 display_char(' ', 28, 0);
  4012fe:	2200      	movs	r2, #0
  401300:	211c      	movs	r1, #28
  401302:	2020      	movs	r0, #32
  401304:	47a8      	blx	r5
			 display_char(' ', 28, 0);
  401306:	2200      	movs	r2, #0
  401308:	211c      	movs	r1, #28
  40130a:	2020      	movs	r0, #32
  40130c:	47a8      	blx	r5
			 display_char(' ', 28, 0);
  40130e:	2200      	movs	r2, #0
  401310:	211c      	movs	r1, #28
  401312:	2020      	movs	r0, #32
  401314:	47a8      	blx	r5
			 display_char('E', 28, 0);
  401316:	2200      	movs	r2, #0
  401318:	211c      	movs	r1, #28
  40131a:	2045      	movs	r0, #69	; 0x45
  40131c:	47a8      	blx	r5
  40131e:	e10c      	b.n	40153a <note_display+0x40e>
		 }
		 else {
			 display_char(' ', 28, 0);
  401320:	2200      	movs	r2, #0
  401322:	211c      	movs	r1, #28
  401324:	2020      	movs	r0, #32
  401326:	4d37      	ldr	r5, [pc, #220]	; (401404 <note_display+0x2d8>)
  401328:	47a8      	blx	r5
			 display_char(' ', 28, 0);
  40132a:	2200      	movs	r2, #0
  40132c:	211c      	movs	r1, #28
  40132e:	2020      	movs	r0, #32
  401330:	47a8      	blx	r5
			 display_char(' ', 28, 0);
  401332:	2200      	movs	r2, #0
  401334:	211c      	movs	r1, #28
  401336:	2020      	movs	r0, #32
  401338:	47a8      	blx	r5
			 display_char(' ', 28, 0);
  40133a:	2200      	movs	r2, #0
  40133c:	211c      	movs	r1, #28
  40133e:	2020      	movs	r0, #32
  401340:	47a8      	blx	r5
			 display_char(' ', 28, 0);
  401342:	2200      	movs	r2, #0
  401344:	211c      	movs	r1, #28
  401346:	2020      	movs	r0, #32
  401348:	47a8      	blx	r5
			 display_char(' ', 28, 0);
  40134a:	2200      	movs	r2, #0
  40134c:	211c      	movs	r1, #28
  40134e:	2020      	movs	r0, #32
  401350:	47a8      	blx	r5
			 display_char('D', 28, 0);
  401352:	2200      	movs	r2, #0
  401354:	211c      	movs	r1, #28
  401356:	2044      	movs	r0, #68	; 0x44
  401358:	47a8      	blx	r5
  40135a:	e0ee      	b.n	40153a <note_display+0x40e>
		 }

	 }

	 else {
		 if(note % 11 == 0) {
  40135c:	4a2b      	ldr	r2, [pc, #172]	; (40140c <note_display+0x2e0>)
  40135e:	fba2 1203 	umull	r1, r2, r2, r3
  401362:	08d2      	lsrs	r2, r2, #3
  401364:	eb02 0182 	add.w	r1, r2, r2, lsl #2
  401368:	eb02 0241 	add.w	r2, r2, r1, lsl #1
  40136c:	1a9a      	subs	r2, r3, r2
  40136e:	b292      	uxth	r2, r2
  401370:	b9e2      	cbnz	r2, 4013ac <note_display+0x280>
			 display_char(' ', 28, 0);
  401372:	211c      	movs	r1, #28
  401374:	2020      	movs	r0, #32
  401376:	4d23      	ldr	r5, [pc, #140]	; (401404 <note_display+0x2d8>)
  401378:	47a8      	blx	r5
			 display_char(' ', 28, 0);
  40137a:	2200      	movs	r2, #0
  40137c:	211c      	movs	r1, #28
  40137e:	2020      	movs	r0, #32
  401380:	47a8      	blx	r5
			 display_char(' ', 28, 0);
  401382:	2200      	movs	r2, #0
  401384:	211c      	movs	r1, #28
  401386:	2020      	movs	r0, #32
  401388:	47a8      	blx	r5
			 display_char(' ', 28, 0);
  40138a:	2200      	movs	r2, #0
  40138c:	211c      	movs	r1, #28
  40138e:	2020      	movs	r0, #32
  401390:	47a8      	blx	r5
			 display_char(' ', 28, 0);
  401392:	2200      	movs	r2, #0
  401394:	211c      	movs	r1, #28
  401396:	2020      	movs	r0, #32
  401398:	47a8      	blx	r5
			 display_char(' ', 28, 0);
  40139a:	2200      	movs	r2, #0
  40139c:	211c      	movs	r1, #28
  40139e:	2020      	movs	r0, #32
  4013a0:	47a8      	blx	r5
			 display_char('B', 28, 0);
  4013a2:	2200      	movs	r2, #0
  4013a4:	211c      	movs	r1, #28
  4013a6:	2042      	movs	r0, #66	; 0x42
  4013a8:	47a8      	blx	r5
  4013aa:	e0c6      	b.n	40153a <note_display+0x40e>
		 }
		 else if(note % 9 == 0) {
  4013ac:	4a18      	ldr	r2, [pc, #96]	; (401410 <note_display+0x2e4>)
  4013ae:	fba2 1203 	umull	r1, r2, r2, r3
  4013b2:	0852      	lsrs	r2, r2, #1
  4013b4:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
  4013b8:	1a9a      	subs	r2, r3, r2
  4013ba:	b292      	uxth	r2, r2
  4013bc:	bb52      	cbnz	r2, 401414 <note_display+0x2e8>
			 display_char(' ', 28, 0);
  4013be:	211c      	movs	r1, #28
  4013c0:	2020      	movs	r0, #32
  4013c2:	4d10      	ldr	r5, [pc, #64]	; (401404 <note_display+0x2d8>)
  4013c4:	47a8      	blx	r5
			 display_char(' ', 28, 0);
  4013c6:	2200      	movs	r2, #0
  4013c8:	211c      	movs	r1, #28
  4013ca:	2020      	movs	r0, #32
  4013cc:	47a8      	blx	r5
			 display_char(' ', 28, 0);
  4013ce:	2200      	movs	r2, #0
  4013d0:	211c      	movs	r1, #28
  4013d2:	2020      	movs	r0, #32
  4013d4:	47a8      	blx	r5
			 display_char(' ', 28, 0);
  4013d6:	2200      	movs	r2, #0
  4013d8:	211c      	movs	r1, #28
  4013da:	2020      	movs	r0, #32
  4013dc:	47a8      	blx	r5
			 display_char(' ', 28, 0);
  4013de:	2200      	movs	r2, #0
  4013e0:	211c      	movs	r1, #28
  4013e2:	2020      	movs	r0, #32
  4013e4:	47a8      	blx	r5
			 display_char(' ', 28, 0);
  4013e6:	2200      	movs	r2, #0
  4013e8:	211c      	movs	r1, #28
  4013ea:	2020      	movs	r0, #32
  4013ec:	47a8      	blx	r5
			 display_char('A', 28, 0);
  4013ee:	2200      	movs	r2, #0
  4013f0:	211c      	movs	r1, #28
  4013f2:	2041      	movs	r0, #65	; 0x41
  4013f4:	47a8      	blx	r5
  4013f6:	e0a0      	b.n	40153a <note_display+0x40e>
  4013f8:	2000089c 	.word	0x2000089c
  4013fc:	00400865 	.word	0x00400865
  401400:	aaaaaaab 	.word	0xaaaaaaab
  401404:	00400a71 	.word	0x00400a71
  401408:	cccccccd 	.word	0xcccccccd
  40140c:	ba2e8ba3 	.word	0xba2e8ba3
  401410:	38e38e39 	.word	0x38e38e39
		 }
		 else if(note % 7 == 0) {
  401414:	4852      	ldr	r0, [pc, #328]	; (401560 <note_display+0x434>)
  401416:	fba3 0100 	umull	r0, r1, r3, r0
  40141a:	1a5a      	subs	r2, r3, r1
  40141c:	eb01 0252 	add.w	r2, r1, r2, lsr #1
  401420:	0892      	lsrs	r2, r2, #2
  401422:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
  401426:	1a9a      	subs	r2, r3, r2
  401428:	b292      	uxth	r2, r2
  40142a:	b9e2      	cbnz	r2, 401466 <note_display+0x33a>
			 display_char(' ', 28, 0);
  40142c:	211c      	movs	r1, #28
  40142e:	2020      	movs	r0, #32
  401430:	4d4c      	ldr	r5, [pc, #304]	; (401564 <note_display+0x438>)
  401432:	47a8      	blx	r5
			 display_char(' ', 28, 0);
  401434:	2200      	movs	r2, #0
  401436:	211c      	movs	r1, #28
  401438:	2020      	movs	r0, #32
  40143a:	47a8      	blx	r5
			 display_char(' ', 28, 0);
  40143c:	2200      	movs	r2, #0
  40143e:	211c      	movs	r1, #28
  401440:	2020      	movs	r0, #32
  401442:	47a8      	blx	r5
			 display_char(' ', 28, 0);
  401444:	2200      	movs	r2, #0
  401446:	211c      	movs	r1, #28
  401448:	2020      	movs	r0, #32
  40144a:	47a8      	blx	r5
			 display_char(' ', 28, 0);
  40144c:	2200      	movs	r2, #0
  40144e:	211c      	movs	r1, #28
  401450:	2020      	movs	r0, #32
  401452:	47a8      	blx	r5
			 display_char(' ', 28, 0);
  401454:	2200      	movs	r2, #0
  401456:	211c      	movs	r1, #28
  401458:	2020      	movs	r0, #32
  40145a:	47a8      	blx	r5
			 display_char('G', 28, 0);
  40145c:	2200      	movs	r2, #0
  40145e:	211c      	movs	r1, #28
  401460:	2047      	movs	r0, #71	; 0x47
  401462:	47a8      	blx	r5
  401464:	e069      	b.n	40153a <note_display+0x40e>
		 }
		 else if(note % 5 == 0) {
  401466:	4a40      	ldr	r2, [pc, #256]	; (401568 <note_display+0x43c>)
  401468:	fba2 1203 	umull	r1, r2, r2, r3
  40146c:	0892      	lsrs	r2, r2, #2
  40146e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  401472:	1a9a      	subs	r2, r3, r2
  401474:	b292      	uxth	r2, r2
  401476:	b9e2      	cbnz	r2, 4014b2 <note_display+0x386>
			 display_char(' ', 28, 0);
  401478:	211c      	movs	r1, #28
  40147a:	2020      	movs	r0, #32
  40147c:	4d39      	ldr	r5, [pc, #228]	; (401564 <note_display+0x438>)
  40147e:	47a8      	blx	r5
			 display_char(' ', 28, 0);
  401480:	2200      	movs	r2, #0
  401482:	211c      	movs	r1, #28
  401484:	2020      	movs	r0, #32
  401486:	47a8      	blx	r5
			 display_char(' ', 28, 0);
  401488:	2200      	movs	r2, #0
  40148a:	211c      	movs	r1, #28
  40148c:	2020      	movs	r0, #32
  40148e:	47a8      	blx	r5
			 display_char(' ', 28, 0);
  401490:	2200      	movs	r2, #0
  401492:	211c      	movs	r1, #28
  401494:	2020      	movs	r0, #32
  401496:	47a8      	blx	r5
			 display_char(' ', 28, 0);
  401498:	2200      	movs	r2, #0
  40149a:	211c      	movs	r1, #28
  40149c:	2020      	movs	r0, #32
  40149e:	47a8      	blx	r5
			 display_char(' ', 28, 0);
  4014a0:	2200      	movs	r2, #0
  4014a2:	211c      	movs	r1, #28
  4014a4:	2020      	movs	r0, #32
  4014a6:	47a8      	blx	r5
			 display_char('F', 28, 0);
  4014a8:	2200      	movs	r2, #0
  4014aa:	211c      	movs	r1, #28
  4014ac:	2046      	movs	r0, #70	; 0x46
  4014ae:	47a8      	blx	r5
  4014b0:	e043      	b.n	40153a <note_display+0x40e>
		 }
		 else if(note % 3 == 0) {
  4014b2:	4a2e      	ldr	r2, [pc, #184]	; (40156c <note_display+0x440>)
  4014b4:	fba2 1203 	umull	r1, r2, r2, r3
  4014b8:	0852      	lsrs	r2, r2, #1
  4014ba:	eb02 0242 	add.w	r2, r2, r2, lsl #1
  4014be:	1a9b      	subs	r3, r3, r2
  4014c0:	b29b      	uxth	r3, r3
  4014c2:	b9eb      	cbnz	r3, 401500 <note_display+0x3d4>
			 display_char('D', 28, 0);
  4014c4:	2200      	movs	r2, #0
  4014c6:	211c      	movs	r1, #28
  4014c8:	2044      	movs	r0, #68	; 0x44
  4014ca:	4d26      	ldr	r5, [pc, #152]	; (401564 <note_display+0x438>)
  4014cc:	47a8      	blx	r5
			 display_char(' ', 28, 0);
  4014ce:	2200      	movs	r2, #0
  4014d0:	211c      	movs	r1, #28
  4014d2:	2020      	movs	r0, #32
  4014d4:	47a8      	blx	r5
			 display_char('#', 18, 0);
  4014d6:	2200      	movs	r2, #0
  4014d8:	2112      	movs	r1, #18
  4014da:	2023      	movs	r0, #35	; 0x23
  4014dc:	47a8      	blx	r5
			 display_char('/', 28, 0);
  4014de:	2200      	movs	r2, #0
  4014e0:	211c      	movs	r1, #28
  4014e2:	202f      	movs	r0, #47	; 0x2f
  4014e4:	47a8      	blx	r5
			 display_char('E', 28, 0);
  4014e6:	2200      	movs	r2, #0
  4014e8:	211c      	movs	r1, #28
  4014ea:	2045      	movs	r0, #69	; 0x45
  4014ec:	47a8      	blx	r5
			 display_char(' ', 28, 0);
  4014ee:	2200      	movs	r2, #0
  4014f0:	211c      	movs	r1, #28
  4014f2:	2020      	movs	r0, #32
  4014f4:	47a8      	blx	r5
			 display_char('b', 18, 0);
  4014f6:	2200      	movs	r2, #0
  4014f8:	2112      	movs	r1, #18
  4014fa:	2062      	movs	r0, #98	; 0x62
  4014fc:	47a8      	blx	r5
  4014fe:	e01c      	b.n	40153a <note_display+0x40e>
		 }
		 else {
			 display_char('C', 28, 0);
  401500:	2200      	movs	r2, #0
  401502:	211c      	movs	r1, #28
  401504:	2043      	movs	r0, #67	; 0x43
  401506:	4d17      	ldr	r5, [pc, #92]	; (401564 <note_display+0x438>)
  401508:	47a8      	blx	r5
			 display_char(' ', 28, 0);
  40150a:	2200      	movs	r2, #0
  40150c:	211c      	movs	r1, #28
  40150e:	2020      	movs	r0, #32
  401510:	47a8      	blx	r5
			 display_char('#', 18, 0);
  401512:	2200      	movs	r2, #0
  401514:	2112      	movs	r1, #18
  401516:	2023      	movs	r0, #35	; 0x23
  401518:	47a8      	blx	r5
			 display_char('/', 28, 0);
  40151a:	2200      	movs	r2, #0
  40151c:	211c      	movs	r1, #28
  40151e:	202f      	movs	r0, #47	; 0x2f
  401520:	47a8      	blx	r5
			 display_char('D', 28, 0);
  401522:	2200      	movs	r2, #0
  401524:	211c      	movs	r1, #28
  401526:	2044      	movs	r0, #68	; 0x44
  401528:	47a8      	blx	r5
			 display_char(' ', 28, 0);
  40152a:	2200      	movs	r2, #0
  40152c:	211c      	movs	r1, #28
  40152e:	2020      	movs	r0, #32
  401530:	47a8      	blx	r5
			 display_char('b', 18, 0);
  401532:	2200      	movs	r2, #0
  401534:	2112      	movs	r1, #18
  401536:	2062      	movs	r0, #98	; 0x62
  401538:	47a8      	blx	r5
		 }
	 }
	 display_char(' ', 28, 0);
  40153a:	2200      	movs	r2, #0
  40153c:	211c      	movs	r1, #28
  40153e:	2020      	movs	r0, #32
  401540:	4d08      	ldr	r5, [pc, #32]	; (401564 <note_display+0x438>)
  401542:	47a8      	blx	r5
	 display_char(' ', 28, 0);
  401544:	2200      	movs	r2, #0
  401546:	211c      	movs	r1, #28
  401548:	2020      	movs	r0, #32
  40154a:	47a8      	blx	r5

	 display_number(octave, 189, 0);
  40154c:	2200      	movs	r2, #0
  40154e:	21bd      	movs	r1, #189	; 0xbd
  401550:	4620      	mov	r0, r4
  401552:	4b07      	ldr	r3, [pc, #28]	; (401570 <note_display+0x444>)
  401554:	4798      	blx	r3

	finish_display(0);
  401556:	2000      	movs	r0, #0
  401558:	4b06      	ldr	r3, [pc, #24]	; (401574 <note_display+0x448>)
  40155a:	4798      	blx	r3
  40155c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40155e:	bf00      	nop
  401560:	24924925 	.word	0x24924925
  401564:	00400a71 	.word	0x00400a71
  401568:	cccccccd 	.word	0xcccccccd
  40156c:	aaaaaaab 	.word	0xaaaaaaab
  401570:	00401075 	.word	0x00401075
  401574:	00400a2d 	.word	0x00400a2d

00401578 <bpm_display>:
}

// Display 1
void bpm_display(uint16_t bpm) {
  401578:	b538      	push	{r3, r4, r5, lr}
  40157a:	4605      	mov	r5, r0
	display_char('B', 28, 1);
  40157c:	2201      	movs	r2, #1
  40157e:	211c      	movs	r1, #28
  401580:	2042      	movs	r0, #66	; 0x42
  401582:	4c13      	ldr	r4, [pc, #76]	; (4015d0 <bpm_display+0x58>)
  401584:	47a0      	blx	r4
	display_char(' ', 28, 1);
  401586:	2201      	movs	r2, #1
  401588:	211c      	movs	r1, #28
  40158a:	2020      	movs	r0, #32
  40158c:	47a0      	blx	r4
	display_char('P', 28, 1);
  40158e:	2201      	movs	r2, #1
  401590:	211c      	movs	r1, #28
  401592:	2050      	movs	r0, #80	; 0x50
  401594:	47a0      	blx	r4
	display_char(' ', 28, 1);
  401596:	2201      	movs	r2, #1
  401598:	211c      	movs	r1, #28
  40159a:	2020      	movs	r0, #32
  40159c:	47a0      	blx	r4
	display_char('M', 28, 1);
  40159e:	2201      	movs	r2, #1
  4015a0:	211c      	movs	r1, #28
  4015a2:	204d      	movs	r0, #77	; 0x4d
  4015a4:	47a0      	blx	r4
	display_char(' ', 28, 1);
  4015a6:	2201      	movs	r2, #1
  4015a8:	211c      	movs	r1, #28
  4015aa:	2020      	movs	r0, #32
  4015ac:	47a0      	blx	r4
	display_char(':', 28, 1);
  4015ae:	2201      	movs	r2, #1
  4015b0:	211c      	movs	r1, #28
  4015b2:	203a      	movs	r0, #58	; 0x3a
  4015b4:	47a0      	blx	r4
	display_char(' ', 28, 1);
  4015b6:	2201      	movs	r2, #1
  4015b8:	211c      	movs	r1, #28
  4015ba:	2020      	movs	r0, #32
  4015bc:	47a0      	blx	r4
	display_number(bpm, 28, 1);
  4015be:	2201      	movs	r2, #1
  4015c0:	211c      	movs	r1, #28
  4015c2:	4628      	mov	r0, r5
  4015c4:	4b03      	ldr	r3, [pc, #12]	; (4015d4 <bpm_display+0x5c>)
  4015c6:	4798      	blx	r3
	finish_display(1);
  4015c8:	2001      	movs	r0, #1
  4015ca:	4b03      	ldr	r3, [pc, #12]	; (4015d8 <bpm_display+0x60>)
  4015cc:	4798      	blx	r3
  4015ce:	bd38      	pop	{r3, r4, r5, pc}
  4015d0:	00400a71 	.word	0x00400a71
  4015d4:	00401075 	.word	0x00401075
  4015d8:	00400a2d 	.word	0x00400a2d

004015dc <res_display>:
}

// Display 2
void res_display(uint8_t res) {
  4015dc:	b538      	push	{r3, r4, r5, lr}
  4015de:	4605      	mov	r5, r0
	display_char('R', 22, 2);
  4015e0:	2202      	movs	r2, #2
  4015e2:	2116      	movs	r1, #22
  4015e4:	2052      	movs	r0, #82	; 0x52
  4015e6:	4c35      	ldr	r4, [pc, #212]	; (4016bc <res_display+0xe0>)
  4015e8:	47a0      	blx	r4
	display_char(' ', 28, 2);
  4015ea:	2202      	movs	r2, #2
  4015ec:	211c      	movs	r1, #28
  4015ee:	2020      	movs	r0, #32
  4015f0:	47a0      	blx	r4
	display_char('E', 22, 2);
  4015f2:	2202      	movs	r2, #2
  4015f4:	2116      	movs	r1, #22
  4015f6:	2045      	movs	r0, #69	; 0x45
  4015f8:	47a0      	blx	r4
	display_char(' ', 28, 2);
  4015fa:	2202      	movs	r2, #2
  4015fc:	211c      	movs	r1, #28
  4015fe:	2020      	movs	r0, #32
  401600:	47a0      	blx	r4
	display_char('S', 22, 2);
  401602:	2202      	movs	r2, #2
  401604:	2116      	movs	r1, #22
  401606:	2053      	movs	r0, #83	; 0x53
  401608:	47a0      	blx	r4
	display_char(' ', 28, 2);
  40160a:	2202      	movs	r2, #2
  40160c:	211c      	movs	r1, #28
  40160e:	2020      	movs	r0, #32
  401610:	47a0      	blx	r4
	display_char(':', 22, 2);
  401612:	2202      	movs	r2, #2
  401614:	2116      	movs	r1, #22
  401616:	203a      	movs	r0, #58	; 0x3a
  401618:	47a0      	blx	r4
	display_char(' ', 28, 2);
  40161a:	2202      	movs	r2, #2
  40161c:	211c      	movs	r1, #28
  40161e:	2020      	movs	r0, #32
  401620:	47a0      	blx	r4
	display_char('1', 22, 2);
  401622:	2202      	movs	r2, #2
  401624:	2116      	movs	r1, #22
  401626:	2031      	movs	r0, #49	; 0x31
  401628:	47a0      	blx	r4
	display_char(' ', 28, 2);
  40162a:	2202      	movs	r2, #2
  40162c:	211c      	movs	r1, #28
  40162e:	2020      	movs	r0, #32
  401630:	47a0      	blx	r4
	display_char('/', 22, 2); 
  401632:	2202      	movs	r2, #2
  401634:	2116      	movs	r1, #22
  401636:	202f      	movs	r0, #47	; 0x2f
  401638:	47a0      	blx	r4
	display_char(' ', 28, 2);
  40163a:	2202      	movs	r2, #2
  40163c:	211c      	movs	r1, #28
  40163e:	2020      	movs	r0, #32
  401640:	47a0      	blx	r4
	if(res == 6) {
  401642:	2d06      	cmp	r5, #6
  401644:	d109      	bne.n	40165a <res_display+0x7e>
		display_number(4, 22, 2);
  401646:	2202      	movs	r2, #2
  401648:	2116      	movs	r1, #22
  40164a:	2004      	movs	r0, #4
  40164c:	4b1c      	ldr	r3, [pc, #112]	; (4016c0 <res_display+0xe4>)
  40164e:	4798      	blx	r3
		display_char('t', 22, 2);
  401650:	2202      	movs	r2, #2
  401652:	2116      	movs	r1, #22
  401654:	2074      	movs	r0, #116	; 0x74
  401656:	47a0      	blx	r4
  401658:	e02b      	b.n	4016b2 <res_display+0xd6>
	}
	else if(res == 12) {
  40165a:	2d0c      	cmp	r5, #12
  40165c:	d10a      	bne.n	401674 <res_display+0x98>
		display_number(8, 22, 2);
  40165e:	2202      	movs	r2, #2
  401660:	2116      	movs	r1, #22
  401662:	2008      	movs	r0, #8
  401664:	4b16      	ldr	r3, [pc, #88]	; (4016c0 <res_display+0xe4>)
  401666:	4798      	blx	r3
		display_char('t', 22, 2);
  401668:	2202      	movs	r2, #2
  40166a:	2116      	movs	r1, #22
  40166c:	2074      	movs	r0, #116	; 0x74
  40166e:	4b13      	ldr	r3, [pc, #76]	; (4016bc <res_display+0xe0>)
  401670:	4798      	blx	r3
  401672:	e01e      	b.n	4016b2 <res_display+0xd6>
	}
	else if(res == 24) {
  401674:	2d18      	cmp	r5, #24
  401676:	d10a      	bne.n	40168e <res_display+0xb2>
		display_number(16, 22, 2);
  401678:	2202      	movs	r2, #2
  40167a:	2116      	movs	r1, #22
  40167c:	2010      	movs	r0, #16
  40167e:	4b10      	ldr	r3, [pc, #64]	; (4016c0 <res_display+0xe4>)
  401680:	4798      	blx	r3
		display_char('t', 22, 2);
  401682:	2202      	movs	r2, #2
  401684:	2116      	movs	r1, #22
  401686:	2074      	movs	r0, #116	; 0x74
  401688:	4b0c      	ldr	r3, [pc, #48]	; (4016bc <res_display+0xe0>)
  40168a:	4798      	blx	r3
  40168c:	e011      	b.n	4016b2 <res_display+0xd6>
	}
	else if(res == 48) {
  40168e:	2d30      	cmp	r5, #48	; 0x30
  401690:	d10a      	bne.n	4016a8 <res_display+0xcc>
		display_number(32, 22, 2);
  401692:	2202      	movs	r2, #2
  401694:	2116      	movs	r1, #22
  401696:	2020      	movs	r0, #32
  401698:	4b09      	ldr	r3, [pc, #36]	; (4016c0 <res_display+0xe4>)
  40169a:	4798      	blx	r3
		display_char('t', 22, 2);
  40169c:	2202      	movs	r2, #2
  40169e:	2116      	movs	r1, #22
  4016a0:	2074      	movs	r0, #116	; 0x74
  4016a2:	4b06      	ldr	r3, [pc, #24]	; (4016bc <res_display+0xe0>)
  4016a4:	4798      	blx	r3
  4016a6:	e004      	b.n	4016b2 <res_display+0xd6>
	}	
	else {
		display_number(res, 22, 2);
  4016a8:	2202      	movs	r2, #2
  4016aa:	2116      	movs	r1, #22
  4016ac:	4628      	mov	r0, r5
  4016ae:	4b04      	ldr	r3, [pc, #16]	; (4016c0 <res_display+0xe4>)
  4016b0:	4798      	blx	r3
	}
	finish_display(2);  
  4016b2:	2002      	movs	r0, #2
  4016b4:	4b03      	ldr	r3, [pc, #12]	; (4016c4 <res_display+0xe8>)
  4016b6:	4798      	blx	r3
  4016b8:	bd38      	pop	{r3, r4, r5, pc}
  4016ba:	bf00      	nop
  4016bc:	00400a71 	.word	0x00400a71
  4016c0:	00401075 	.word	0x00401075
  4016c4:	00400a2d 	.word	0x00400a2d

004016c8 <saving_display>:
}

void saving_display(uint8_t dot_number) {
  4016c8:	b510      	push	{r4, lr}
	/*if(dot_number == 0) {*/
		display_char('S', 28, 2);
  4016ca:	2202      	movs	r2, #2
  4016cc:	211c      	movs	r1, #28
  4016ce:	2053      	movs	r0, #83	; 0x53
  4016d0:	4c14      	ldr	r4, [pc, #80]	; (401724 <saving_display+0x5c>)
  4016d2:	47a0      	blx	r4
		display_char(' ', 28, 2);
  4016d4:	2202      	movs	r2, #2
  4016d6:	211c      	movs	r1, #28
  4016d8:	2020      	movs	r0, #32
  4016da:	47a0      	blx	r4
		display_char('A', 28, 2);
  4016dc:	2202      	movs	r2, #2
  4016de:	211c      	movs	r1, #28
  4016e0:	2041      	movs	r0, #65	; 0x41
  4016e2:	47a0      	blx	r4
		display_char(' ', 28, 2);
  4016e4:	2202      	movs	r2, #2
  4016e6:	211c      	movs	r1, #28
  4016e8:	2020      	movs	r0, #32
  4016ea:	47a0      	blx	r4
		display_char('V', 28, 2);
  4016ec:	2202      	movs	r2, #2
  4016ee:	211c      	movs	r1, #28
  4016f0:	2056      	movs	r0, #86	; 0x56
  4016f2:	47a0      	blx	r4
		display_char(' ', 28, 2);
  4016f4:	2202      	movs	r2, #2
  4016f6:	211c      	movs	r1, #28
  4016f8:	2020      	movs	r0, #32
  4016fa:	47a0      	blx	r4
		display_char('E', 28, 2);
  4016fc:	2202      	movs	r2, #2
  4016fe:	211c      	movs	r1, #28
  401700:	2045      	movs	r0, #69	; 0x45
  401702:	47a0      	blx	r4
		display_char(' ', 28, 2);
  401704:	2202      	movs	r2, #2
  401706:	211c      	movs	r1, #28
  401708:	2020      	movs	r0, #32
  40170a:	47a0      	blx	r4
		display_char('D', 28, 2);
  40170c:	2202      	movs	r2, #2
  40170e:	211c      	movs	r1, #28
  401710:	2044      	movs	r0, #68	; 0x44
  401712:	47a0      	blx	r4
		display_char(' ', 28, 2);
  401714:	2202      	movs	r2, #2
  401716:	211c      	movs	r1, #28
  401718:	2020      	movs	r0, #32
  40171a:	47a0      	blx	r4
		finish_display(2);
  40171c:	2002      	movs	r0, #2
  40171e:	4b02      	ldr	r3, [pc, #8]	; (401728 <saving_display+0x60>)
  401720:	4798      	blx	r3
  401722:	bd10      	pop	{r4, pc}
  401724:	00400a71 	.word	0x00400a71
  401728:	00400a2d 	.word	0x00400a2d

0040172c <page_display>:
// 		finish_display(2);
// 	}
}

// Display 3
void page_display(uint8_t page) {
  40172c:	b538      	push	{r3, r4, r5, lr}
  40172e:	4605      	mov	r5, r0
	display_char('P', 28, 3);
  401730:	2203      	movs	r2, #3
  401732:	211c      	movs	r1, #28
  401734:	2050      	movs	r0, #80	; 0x50
  401736:	4c0d      	ldr	r4, [pc, #52]	; (40176c <page_display+0x40>)
  401738:	47a0      	blx	r4
	display_char('A', 28, 3);
  40173a:	2203      	movs	r2, #3
  40173c:	211c      	movs	r1, #28
  40173e:	2041      	movs	r0, #65	; 0x41
  401740:	47a0      	blx	r4
	display_char('G', 28, 3);
  401742:	2203      	movs	r2, #3
  401744:	211c      	movs	r1, #28
  401746:	2047      	movs	r0, #71	; 0x47
  401748:	47a0      	blx	r4
	display_char('E', 28, 3);
  40174a:	2203      	movs	r2, #3
  40174c:	211c      	movs	r1, #28
  40174e:	2045      	movs	r0, #69	; 0x45
  401750:	47a0      	blx	r4
	display_char(':', 28, 3);
  401752:	2203      	movs	r2, #3
  401754:	211c      	movs	r1, #28
  401756:	203a      	movs	r0, #58	; 0x3a
  401758:	47a0      	blx	r4
	display_number(page, 28, 3);
  40175a:	2203      	movs	r2, #3
  40175c:	211c      	movs	r1, #28
  40175e:	4628      	mov	r0, r5
  401760:	4b03      	ldr	r3, [pc, #12]	; (401770 <page_display+0x44>)
  401762:	4798      	blx	r3
	finish_display(3);
  401764:	2003      	movs	r0, #3
  401766:	4b03      	ldr	r3, [pc, #12]	; (401774 <page_display+0x48>)
  401768:	4798      	blx	r3
  40176a:	bd38      	pop	{r3, r4, r5, pc}
  40176c:	00400a71 	.word	0x00400a71
  401770:	00401075 	.word	0x00401075
  401774:	00400a2d 	.word	0x00400a2d

00401778 <loop_display>:
}

void loop_display(uint8_t page_loop) {
  401778:	b538      	push	{r3, r4, r5, lr}
  40177a:	4605      	mov	r5, r0
	display_char('L', 28, 3);
  40177c:	2203      	movs	r2, #3
  40177e:	211c      	movs	r1, #28
  401780:	204c      	movs	r0, #76	; 0x4c
  401782:	4c0d      	ldr	r4, [pc, #52]	; (4017b8 <loop_display+0x40>)
  401784:	47a0      	blx	r4
	display_char('O', 28, 3);
  401786:	2203      	movs	r2, #3
  401788:	211c      	movs	r1, #28
  40178a:	204f      	movs	r0, #79	; 0x4f
  40178c:	47a0      	blx	r4
	display_char('O', 28, 3);
  40178e:	2203      	movs	r2, #3
  401790:	211c      	movs	r1, #28
  401792:	204f      	movs	r0, #79	; 0x4f
  401794:	47a0      	blx	r4
	display_char('P', 28, 3);
  401796:	2203      	movs	r2, #3
  401798:	211c      	movs	r1, #28
  40179a:	2050      	movs	r0, #80	; 0x50
  40179c:	47a0      	blx	r4
	display_char(':', 28, 3);
  40179e:	2203      	movs	r2, #3
  4017a0:	211c      	movs	r1, #28
  4017a2:	203a      	movs	r0, #58	; 0x3a
  4017a4:	47a0      	blx	r4
	display_number(page_loop, 28, 3);
  4017a6:	2203      	movs	r2, #3
  4017a8:	211c      	movs	r1, #28
  4017aa:	4628      	mov	r0, r5
  4017ac:	4b03      	ldr	r3, [pc, #12]	; (4017bc <loop_display+0x44>)
  4017ae:	4798      	blx	r3
	finish_display(3);
  4017b0:	2003      	movs	r0, #3
  4017b2:	4b03      	ldr	r3, [pc, #12]	; (4017c0 <loop_display+0x48>)
  4017b4:	4798      	blx	r3
  4017b6:	bd38      	pop	{r3, r4, r5, pc}
  4017b8:	00400a71 	.word	0x00400a71
  4017bc:	00401075 	.word	0x00401075
  4017c0:	00400a2d 	.word	0x00400a2d

004017c4 <pattern_display>:
}

// Display 4
void pattern_display(uint8_t pattern) {
  4017c4:	b538      	push	{r3, r4, r5, lr}
  4017c6:	4605      	mov	r5, r0
	display_char('P', 28, 4);
  4017c8:	2204      	movs	r2, #4
  4017ca:	211c      	movs	r1, #28
  4017cc:	2050      	movs	r0, #80	; 0x50
  4017ce:	4c0d      	ldr	r4, [pc, #52]	; (401804 <pattern_display+0x40>)
  4017d0:	47a0      	blx	r4
	display_char('T', 28, 4);
  4017d2:	2204      	movs	r2, #4
  4017d4:	211c      	movs	r1, #28
  4017d6:	2054      	movs	r0, #84	; 0x54
  4017d8:	47a0      	blx	r4
	display_char('R', 28, 4);
  4017da:	2204      	movs	r2, #4
  4017dc:	211c      	movs	r1, #28
  4017de:	2052      	movs	r0, #82	; 0x52
  4017e0:	47a0      	blx	r4
	display_char('N', 28, 4);
  4017e2:	2204      	movs	r2, #4
  4017e4:	211c      	movs	r1, #28
  4017e6:	204e      	movs	r0, #78	; 0x4e
  4017e8:	47a0      	blx	r4
	display_char(':', 28, 4);
  4017ea:	2204      	movs	r2, #4
  4017ec:	211c      	movs	r1, #28
  4017ee:	203a      	movs	r0, #58	; 0x3a
  4017f0:	47a0      	blx	r4
	display_number(pattern, 28, 4);
  4017f2:	2204      	movs	r2, #4
  4017f4:	211c      	movs	r1, #28
  4017f6:	4628      	mov	r0, r5
  4017f8:	4b03      	ldr	r3, [pc, #12]	; (401808 <pattern_display+0x44>)
  4017fa:	4798      	blx	r3
	finish_display(4);
  4017fc:	2004      	movs	r0, #4
  4017fe:	4b03      	ldr	r3, [pc, #12]	; (40180c <pattern_display+0x48>)
  401800:	4798      	blx	r3
  401802:	bd38      	pop	{r3, r4, r5, pc}
  401804:	00400a71 	.word	0x00400a71
  401808:	00401075 	.word	0x00401075
  40180c:	00400a2d 	.word	0x00400a2d

00401810 <clr_pattern_display>:
}

void clr_pattern_display(uint8_t pattern, bool yes) {
  401810:	b570      	push	{r4, r5, r6, lr}
  401812:	4606      	mov	r6, r0
  401814:	460d      	mov	r5, r1
	display_char('C', 22, 4);
  401816:	2204      	movs	r2, #4
  401818:	2116      	movs	r1, #22
  40181a:	2043      	movs	r0, #67	; 0x43
  40181c:	4c30      	ldr	r4, [pc, #192]	; (4018e0 <clr_pattern_display+0xd0>)
  40181e:	47a0      	blx	r4
	display_char(' ', 22, 4);
  401820:	2204      	movs	r2, #4
  401822:	2116      	movs	r1, #22
  401824:	2020      	movs	r0, #32
  401826:	47a0      	blx	r4
	display_char('L', 22, 4);
  401828:	2204      	movs	r2, #4
  40182a:	2116      	movs	r1, #22
  40182c:	204c      	movs	r0, #76	; 0x4c
  40182e:	47a0      	blx	r4
	display_char(' ', 22, 4);
  401830:	2204      	movs	r2, #4
  401832:	2116      	movs	r1, #22
  401834:	2020      	movs	r0, #32
  401836:	47a0      	blx	r4
	display_char('R', 22, 4);
  401838:	2204      	movs	r2, #4
  40183a:	2116      	movs	r1, #22
  40183c:	2052      	movs	r0, #82	; 0x52
  40183e:	47a0      	blx	r4
	display_char(':', 22, 4);
  401840:	2204      	movs	r2, #4
  401842:	2116      	movs	r1, #22
  401844:	203a      	movs	r0, #58	; 0x3a
  401846:	47a0      	blx	r4
	display_number(pattern, 22, 4);
  401848:	2204      	movs	r2, #4
  40184a:	2116      	movs	r1, #22
  40184c:	4630      	mov	r0, r6
  40184e:	4b25      	ldr	r3, [pc, #148]	; (4018e4 <clr_pattern_display+0xd4>)
  401850:	4798      	blx	r3
	display_char(' ', 22, 4);
  401852:	2204      	movs	r2, #4
  401854:	2116      	movs	r1, #22
  401856:	2020      	movs	r0, #32
  401858:	47a0      	blx	r4
	display_char(' ', 22, 4);
  40185a:	2204      	movs	r2, #4
  40185c:	2116      	movs	r1, #22
  40185e:	2020      	movs	r0, #32
  401860:	47a0      	blx	r4
	if(yes) {
  401862:	b1d5      	cbz	r5, 40189a <clr_pattern_display+0x8a>
		display_char_inverted(' ', 22, 4);
  401864:	2204      	movs	r2, #4
  401866:	2116      	movs	r1, #22
  401868:	2020      	movs	r0, #32
  40186a:	4c1f      	ldr	r4, [pc, #124]	; (4018e8 <clr_pattern_display+0xd8>)
  40186c:	47a0      	blx	r4
		display_char_inverted('Y', 22, 4);
  40186e:	2204      	movs	r2, #4
  401870:	2116      	movs	r1, #22
  401872:	2059      	movs	r0, #89	; 0x59
  401874:	47a0      	blx	r4
		display_char_inverted(' ', 22, 4);
  401876:	2204      	movs	r2, #4
  401878:	2116      	movs	r1, #22
  40187a:	2020      	movs	r0, #32
  40187c:	47a0      	blx	r4
		display_char('/', 22, 4);
  40187e:	2204      	movs	r2, #4
  401880:	2116      	movs	r1, #22
  401882:	202f      	movs	r0, #47	; 0x2f
  401884:	4c16      	ldr	r4, [pc, #88]	; (4018e0 <clr_pattern_display+0xd0>)
  401886:	47a0      	blx	r4
		display_char(' ', 22, 4);
  401888:	2204      	movs	r2, #4
  40188a:	2116      	movs	r1, #22
  40188c:	2020      	movs	r0, #32
  40188e:	47a0      	blx	r4
		display_char('N', 22, 4);
  401890:	2204      	movs	r2, #4
  401892:	2116      	movs	r1, #22
  401894:	204e      	movs	r0, #78	; 0x4e
  401896:	47a0      	blx	r4
  401898:	e01d      	b.n	4018d6 <clr_pattern_display+0xc6>
	}
	else {
		display_char(' ', 22, 4);
  40189a:	2204      	movs	r2, #4
  40189c:	2116      	movs	r1, #22
  40189e:	2020      	movs	r0, #32
  4018a0:	4c0f      	ldr	r4, [pc, #60]	; (4018e0 <clr_pattern_display+0xd0>)
  4018a2:	47a0      	blx	r4
		display_char('Y', 22, 4);
  4018a4:	2204      	movs	r2, #4
  4018a6:	2116      	movs	r1, #22
  4018a8:	2059      	movs	r0, #89	; 0x59
  4018aa:	47a0      	blx	r4
		display_char(' ', 22, 4);
  4018ac:	2204      	movs	r2, #4
  4018ae:	2116      	movs	r1, #22
  4018b0:	2020      	movs	r0, #32
  4018b2:	47a0      	blx	r4
		display_char('/', 22, 4);
  4018b4:	2204      	movs	r2, #4
  4018b6:	2116      	movs	r1, #22
  4018b8:	202f      	movs	r0, #47	; 0x2f
  4018ba:	47a0      	blx	r4
		display_char_inverted(' ', 22, 4);
  4018bc:	2204      	movs	r2, #4
  4018be:	2116      	movs	r1, #22
  4018c0:	2020      	movs	r0, #32
  4018c2:	4c09      	ldr	r4, [pc, #36]	; (4018e8 <clr_pattern_display+0xd8>)
  4018c4:	47a0      	blx	r4
		display_char_inverted('N', 22, 4);
  4018c6:	2204      	movs	r2, #4
  4018c8:	2116      	movs	r1, #22
  4018ca:	204e      	movs	r0, #78	; 0x4e
  4018cc:	47a0      	blx	r4
		display_char_inverted(' ', 22, 4);
  4018ce:	2204      	movs	r2, #4
  4018d0:	2116      	movs	r1, #22
  4018d2:	2020      	movs	r0, #32
  4018d4:	47a0      	blx	r4
	}

	finish_display(4);
  4018d6:	2004      	movs	r0, #4
  4018d8:	4b04      	ldr	r3, [pc, #16]	; (4018ec <clr_pattern_display+0xdc>)
  4018da:	4798      	blx	r3
  4018dc:	bd70      	pop	{r4, r5, r6, pc}
  4018de:	bf00      	nop
  4018e0:	00400a71 	.word	0x00400a71
  4018e4:	00401075 	.word	0x00401075
  4018e8:	00400d39 	.word	0x00400d39
  4018ec:	00400a2d 	.word	0x00400a2d

004018f0 <output_display_1>:
}

// Display 5
void output_display_1(uint8_t out1, uint8_t out2) {
  4018f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4018f2:	4605      	mov	r5, r0
  4018f4:	460f      	mov	r7, r1
	display_char('0', 22, 5);
  4018f6:	2205      	movs	r2, #5
  4018f8:	2116      	movs	r1, #22
  4018fa:	2030      	movs	r0, #48	; 0x30
  4018fc:	4c1d      	ldr	r4, [pc, #116]	; (401974 <output_display_1+0x84>)
  4018fe:	47a0      	blx	r4
	display_char(' ', 22, 5);
  401900:	2205      	movs	r2, #5
  401902:	2116      	movs	r1, #22
  401904:	2020      	movs	r0, #32
  401906:	47a0      	blx	r4
	display_char('1', 18, 5);
  401908:	2205      	movs	r2, #5
  40190a:	2112      	movs	r1, #18
  40190c:	2031      	movs	r0, #49	; 0x31
  40190e:	47a0      	blx	r4
	display_char(':', 18, 5);
  401910:	2205      	movs	r2, #5
  401912:	2112      	movs	r1, #18
  401914:	203a      	movs	r0, #58	; 0x3a
  401916:	47a0      	blx	r4
	display_number(out1, 18, 5);
  401918:	2205      	movs	r2, #5
  40191a:	2112      	movs	r1, #18
  40191c:	4628      	mov	r0, r5
  40191e:	4b16      	ldr	r3, [pc, #88]	; (401978 <output_display_1+0x88>)
  401920:	4798      	blx	r3

	while(disp_ptr_location[5] < 1920) {
  401922:	4b16      	ldr	r3, [pc, #88]	; (40197c <output_display_1+0x8c>)
  401924:	895b      	ldrh	r3, [r3, #10]
  401926:	f5b3 6ff0 	cmp.w	r3, #1920	; 0x780
  40192a:	d209      	bcs.n	401940 <output_display_1+0x50>
		display_data(0, 5);
  40192c:	2605      	movs	r6, #5
  40192e:	4d14      	ldr	r5, [pc, #80]	; (401980 <output_display_1+0x90>)
	display_char(' ', 22, 5);
	display_char('1', 18, 5);
	display_char(':', 18, 5);
	display_number(out1, 18, 5);

	while(disp_ptr_location[5] < 1920) {
  401930:	4c12      	ldr	r4, [pc, #72]	; (40197c <output_display_1+0x8c>)
		display_data(0, 5);
  401932:	4631      	mov	r1, r6
  401934:	2000      	movs	r0, #0
  401936:	47a8      	blx	r5
	display_char(' ', 22, 5);
	display_char('1', 18, 5);
	display_char(':', 18, 5);
	display_number(out1, 18, 5);

	while(disp_ptr_location[5] < 1920) {
  401938:	8963      	ldrh	r3, [r4, #10]
  40193a:	f5b3 6ff0 	cmp.w	r3, #1920	; 0x780
  40193e:	d3f8      	bcc.n	401932 <output_display_1+0x42>
		display_data(0, 5);
	}

	display_char('0', 22, 5);
  401940:	2205      	movs	r2, #5
  401942:	2116      	movs	r1, #22
  401944:	2030      	movs	r0, #48	; 0x30
  401946:	4c0b      	ldr	r4, [pc, #44]	; (401974 <output_display_1+0x84>)
  401948:	47a0      	blx	r4
	display_char(' ', 22, 5);
  40194a:	2205      	movs	r2, #5
  40194c:	2116      	movs	r1, #22
  40194e:	2020      	movs	r0, #32
  401950:	47a0      	blx	r4
	display_char('2', 18, 5);
  401952:	2205      	movs	r2, #5
  401954:	2112      	movs	r1, #18
  401956:	2032      	movs	r0, #50	; 0x32
  401958:	47a0      	blx	r4
	display_char(':', 18, 5);
  40195a:	2205      	movs	r2, #5
  40195c:	2112      	movs	r1, #18
  40195e:	203a      	movs	r0, #58	; 0x3a
  401960:	47a0      	blx	r4
	display_number(out2, 18, 5);
  401962:	2205      	movs	r2, #5
  401964:	2112      	movs	r1, #18
  401966:	4638      	mov	r0, r7
  401968:	4b03      	ldr	r3, [pc, #12]	; (401978 <output_display_1+0x88>)
  40196a:	4798      	blx	r3
	
	finish_display(5);
  40196c:	2005      	movs	r0, #5
  40196e:	4b05      	ldr	r3, [pc, #20]	; (401984 <output_display_1+0x94>)
  401970:	4798      	blx	r3
  401972:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401974:	00400a71 	.word	0x00400a71
  401978:	00401075 	.word	0x00401075
  40197c:	2000089c 	.word	0x2000089c
  401980:	00400865 	.word	0x00400865
  401984:	00400a2d 	.word	0x00400a2d

00401988 <output_display_2>:
}

// Display 6
void output_display_2(uint8_t out3, uint8_t out4) {
  401988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40198a:	4605      	mov	r5, r0
  40198c:	460f      	mov	r7, r1
	display_char('0', 22, 6);
  40198e:	2206      	movs	r2, #6
  401990:	2116      	movs	r1, #22
  401992:	2030      	movs	r0, #48	; 0x30
  401994:	4c1d      	ldr	r4, [pc, #116]	; (401a0c <output_display_2+0x84>)
  401996:	47a0      	blx	r4
	display_char(' ', 22, 6);
  401998:	2206      	movs	r2, #6
  40199a:	2116      	movs	r1, #22
  40199c:	2020      	movs	r0, #32
  40199e:	47a0      	blx	r4
	display_char('3', 18, 6);
  4019a0:	2206      	movs	r2, #6
  4019a2:	2112      	movs	r1, #18
  4019a4:	2033      	movs	r0, #51	; 0x33
  4019a6:	47a0      	blx	r4
	display_char(':', 18, 6);
  4019a8:	2206      	movs	r2, #6
  4019aa:	2112      	movs	r1, #18
  4019ac:	203a      	movs	r0, #58	; 0x3a
  4019ae:	47a0      	blx	r4
	display_number(out3, 18, 6);
  4019b0:	2206      	movs	r2, #6
  4019b2:	2112      	movs	r1, #18
  4019b4:	4628      	mov	r0, r5
  4019b6:	4b16      	ldr	r3, [pc, #88]	; (401a10 <output_display_2+0x88>)
  4019b8:	4798      	blx	r3

	while(disp_ptr_location[6] < 1920) {
  4019ba:	4b16      	ldr	r3, [pc, #88]	; (401a14 <output_display_2+0x8c>)
  4019bc:	899b      	ldrh	r3, [r3, #12]
  4019be:	f5b3 6ff0 	cmp.w	r3, #1920	; 0x780
  4019c2:	d209      	bcs.n	4019d8 <output_display_2+0x50>
		display_data(0, 6);
  4019c4:	2606      	movs	r6, #6
  4019c6:	4d14      	ldr	r5, [pc, #80]	; (401a18 <output_display_2+0x90>)
	display_char(' ', 22, 6);
	display_char('3', 18, 6);
	display_char(':', 18, 6);
	display_number(out3, 18, 6);

	while(disp_ptr_location[6] < 1920) {
  4019c8:	4c12      	ldr	r4, [pc, #72]	; (401a14 <output_display_2+0x8c>)
		display_data(0, 6);
  4019ca:	4631      	mov	r1, r6
  4019cc:	2000      	movs	r0, #0
  4019ce:	47a8      	blx	r5
	display_char(' ', 22, 6);
	display_char('3', 18, 6);
	display_char(':', 18, 6);
	display_number(out3, 18, 6);

	while(disp_ptr_location[6] < 1920) {
  4019d0:	89a3      	ldrh	r3, [r4, #12]
  4019d2:	f5b3 6ff0 	cmp.w	r3, #1920	; 0x780
  4019d6:	d3f8      	bcc.n	4019ca <output_display_2+0x42>
		display_data(0, 6);
	}

	display_char('0', 22, 6);
  4019d8:	2206      	movs	r2, #6
  4019da:	2116      	movs	r1, #22
  4019dc:	2030      	movs	r0, #48	; 0x30
  4019de:	4c0b      	ldr	r4, [pc, #44]	; (401a0c <output_display_2+0x84>)
  4019e0:	47a0      	blx	r4
	display_char(' ', 22, 6);
  4019e2:	2206      	movs	r2, #6
  4019e4:	2116      	movs	r1, #22
  4019e6:	2020      	movs	r0, #32
  4019e8:	47a0      	blx	r4
	display_char('4', 18, 6);
  4019ea:	2206      	movs	r2, #6
  4019ec:	2112      	movs	r1, #18
  4019ee:	2034      	movs	r0, #52	; 0x34
  4019f0:	47a0      	blx	r4
	display_char(':', 18, 6);
  4019f2:	2206      	movs	r2, #6
  4019f4:	2112      	movs	r1, #18
  4019f6:	203a      	movs	r0, #58	; 0x3a
  4019f8:	47a0      	blx	r4
	display_number(out4, 18, 6);
  4019fa:	2206      	movs	r2, #6
  4019fc:	2112      	movs	r1, #18
  4019fe:	4638      	mov	r0, r7
  401a00:	4b03      	ldr	r3, [pc, #12]	; (401a10 <output_display_2+0x88>)
  401a02:	4798      	blx	r3
	
	finish_display(6);
  401a04:	2006      	movs	r0, #6
  401a06:	4b05      	ldr	r3, [pc, #20]	; (401a1c <output_display_2+0x94>)
  401a08:	4798      	blx	r3
  401a0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401a0c:	00400a71 	.word	0x00400a71
  401a10:	00401075 	.word	0x00401075
  401a14:	2000089c 	.word	0x2000089c
  401a18:	00400865 	.word	0x00400865
  401a1c:	00400a2d 	.word	0x00400a2d

00401a20 <encoder_direction>:
#include "displays.h"

// uint8_t A_seq;
// uint8_t B_seq;

 void encoder_direction(uint32_t A, uint32_t B, uint8_t step){
  401a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  401a22:	4615      	mov	r5, r2

	//read Encoder input A
	bool A_in = REG_PIOC_PDSR & A;
  401a24:	4b21      	ldr	r3, [pc, #132]	; (401aac <encoder_direction+0x8c>)
  401a26:	681f      	ldr	r7, [r3, #0]
	//read Encoder input B
	bool B_in = REG_PIOC_PDSR & B;
  401a28:	681b      	ldr	r3, [r3, #0]
	
	A_seq = A_seq << 1;
	A_seq |= A_in;
	
	B_seq = B_seq << 1;
  401a2a:	4c21      	ldr	r4, [pc, #132]	; (401ab0 <encoder_direction+0x90>)
	B_seq |= B_in;
  401a2c:	7822      	ldrb	r2, [r4, #0]
  401a2e:	420b      	tst	r3, r1
  401a30:	bf14      	ite	ne
  401a32:	2301      	movne	r3, #1
  401a34:	2300      	moveq	r3, #0
  401a36:	ea43 0242 	orr.w	r2, r3, r2, lsl #1
	//read Encoder input A
	bool A_in = REG_PIOC_PDSR & A;
	//read Encoder input B
	bool B_in = REG_PIOC_PDSR & B;
	
	A_seq = A_seq << 1;
  401a3a:	491e      	ldr	r1, [pc, #120]	; (401ab4 <encoder_direction+0x94>)
	A_seq |= A_in;
	
	B_seq = B_seq << 1;
	B_seq |= B_in;
	
	A_seq &= 0b00001111;
  401a3c:	780e      	ldrb	r6, [r1, #0]
  401a3e:	4207      	tst	r7, r0
  401a40:	bf14      	ite	ne
  401a42:	2301      	movne	r3, #1
  401a44:	2300      	moveq	r3, #0
  401a46:	ea43 0346 	orr.w	r3, r3, r6, lsl #1
  401a4a:	f003 030f 	and.w	r3, r3, #15
  401a4e:	700b      	strb	r3, [r1, #0]
	B_seq &= 0b00001111;
  401a50:	f002 020f 	and.w	r2, r2, #15
  401a54:	7022      	strb	r2, [r4, #0]


	//return true if turned right
	if ((A_seq == 0b00001001) && (B_seq == 0b00000011)){
  401a56:	2b09      	cmp	r3, #9
  401a58:	d112      	bne.n	401a80 <encoder_direction+0x60>
  401a5a:	2a03      	cmp	r2, #3
  401a5c:	d124      	bne.n	401aa8 <encoder_direction+0x88>
		notes_inc(step);
  401a5e:	4628      	mov	r0, r5
  401a60:	4b15      	ldr	r3, [pc, #84]	; (401ab8 <encoder_direction+0x98>)
  401a62:	4798      	blx	r3
		note_display(patterns[curr_pattern][display_page][step][0]);
  401a64:	4b15      	ldr	r3, [pc, #84]	; (401abc <encoder_direction+0x9c>)
  401a66:	781a      	ldrb	r2, [r3, #0]
  401a68:	4b15      	ldr	r3, [pc, #84]	; (401ac0 <encoder_direction+0xa0>)
  401a6a:	781b      	ldrb	r3, [r3, #0]
  401a6c:	eb03 1302 	add.w	r3, r3, r2, lsl #4
  401a70:	eb05 1503 	add.w	r5, r5, r3, lsl #4
  401a74:	4b13      	ldr	r3, [pc, #76]	; (401ac4 <encoder_direction+0xa4>)
  401a76:	f833 0035 	ldrh.w	r0, [r3, r5, lsl #3]
  401a7a:	4b13      	ldr	r3, [pc, #76]	; (401ac8 <encoder_direction+0xa8>)
  401a7c:	4798      	blx	r3
  401a7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}

	else if ((A_seq == 0b00000011) && (B_seq == 0b00001001)){
  401a80:	2b03      	cmp	r3, #3
  401a82:	d111      	bne.n	401aa8 <encoder_direction+0x88>
  401a84:	2a09      	cmp	r2, #9
  401a86:	d10f      	bne.n	401aa8 <encoder_direction+0x88>
		notes_dec(step);
  401a88:	4628      	mov	r0, r5
  401a8a:	4b10      	ldr	r3, [pc, #64]	; (401acc <encoder_direction+0xac>)
  401a8c:	4798      	blx	r3
		note_display(patterns[curr_pattern][display_page][step][0]);
  401a8e:	4b0b      	ldr	r3, [pc, #44]	; (401abc <encoder_direction+0x9c>)
  401a90:	781a      	ldrb	r2, [r3, #0]
  401a92:	4b0b      	ldr	r3, [pc, #44]	; (401ac0 <encoder_direction+0xa0>)
  401a94:	781b      	ldrb	r3, [r3, #0]
  401a96:	eb03 1302 	add.w	r3, r3, r2, lsl #4
  401a9a:	eb05 1503 	add.w	r5, r5, r3, lsl #4
  401a9e:	4b09      	ldr	r3, [pc, #36]	; (401ac4 <encoder_direction+0xa4>)
  401aa0:	f833 0035 	ldrh.w	r0, [r3, r5, lsl #3]
  401aa4:	4b08      	ldr	r3, [pc, #32]	; (401ac8 <encoder_direction+0xa8>)
  401aa6:	4798      	blx	r3
  401aa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401aaa:	bf00      	nop
  401aac:	400e123c 	.word	0x400e123c
  401ab0:	200009a6 	.word	0x200009a6
  401ab4:	20000997 	.word	0x20000997
  401ab8:	00403ed5 	.word	0x00403ed5
  401abc:	20000958 	.word	0x20000958
  401ac0:	20000984 	.word	0x20000984
  401ac4:	200009b8 	.word	0x200009b8
  401ac8:	0040112d 	.word	0x0040112d
  401acc:	00403f11 	.word	0x00403f11

00401ad0 <Encoder_init>:

	}
}


void Encoder_init(){
  401ad0:	b470      	push	{r4, r5, r6}
	A_seq = 0;
  401ad2:	2300      	movs	r3, #0
  401ad4:	4aa8      	ldr	r2, [pc, #672]	; (401d78 <Encoder_init+0x2a8>)
  401ad6:	7013      	strb	r3, [r2, #0]
	B_seq = 0;
  401ad8:	4aa8      	ldr	r2, [pc, #672]	; (401d7c <Encoder_init+0x2ac>)
  401ada:	7013      	strb	r3, [r2, #0]

	//enable clock for PIOC
	REG_PMC_PCER0 |= PMC_PCER0_PID13;
  401adc:	4aa8      	ldr	r2, [pc, #672]	; (401d80 <Encoder_init+0x2b0>)
  401ade:	6813      	ldr	r3, [r2, #0]
  401ae0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  401ae4:	6013      	str	r3, [r2, #0]


	/**************			CONFIGURE 16 STEP ENCODERS			**************/

	//Set up PC0 as ENCODER 1 INPUT A
	REG_PIOC_PER |= PIO_PER_P0; //enable PIO controller
  401ae6:	4da7      	ldr	r5, [pc, #668]	; (401d84 <Encoder_init+0x2b4>)
  401ae8:	682b      	ldr	r3, [r5, #0]
  401aea:	f043 0301 	orr.w	r3, r3, #1
  401aee:	602b      	str	r3, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P0; //disable output
  401af0:	4ca5      	ldr	r4, [pc, #660]	; (401d88 <Encoder_init+0x2b8>)
  401af2:	6823      	ldr	r3, [r4, #0]
  401af4:	f043 0301 	orr.w	r3, r3, #1
  401af8:	6023      	str	r3, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P0; //disable pull-down resistor
  401afa:	48a4      	ldr	r0, [pc, #656]	; (401d8c <Encoder_init+0x2bc>)
  401afc:	6803      	ldr	r3, [r0, #0]
  401afe:	f043 0301 	orr.w	r3, r3, #1
  401b02:	6003      	str	r3, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P0;	//enable pull-up resistor
  401b04:	49a2      	ldr	r1, [pc, #648]	; (401d90 <Encoder_init+0x2c0>)
  401b06:	680b      	ldr	r3, [r1, #0]
  401b08:	f043 0301 	orr.w	r3, r3, #1
  401b0c:	600b      	str	r3, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P0; //turn on slow clock debounce
  401b0e:	f602 6274 	addw	r2, r2, #3700	; 0xe74
  401b12:	6813      	ldr	r3, [r2, #0]
  401b14:	f043 0301 	orr.w	r3, r3, #1
  401b18:	6013      	str	r3, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P0;	//start debounce filter
  401b1a:	4b9e      	ldr	r3, [pc, #632]	; (401d94 <Encoder_init+0x2c4>)
  401b1c:	681e      	ldr	r6, [r3, #0]
  401b1e:	f046 0601 	orr.w	r6, r6, #1
  401b22:	601e      	str	r6, [r3, #0]

	//Set up PC1 as ENCODER 1 INPUT B
	REG_PIOC_PER |= PIO_PER_P1; //enable PIO controller
  401b24:	682e      	ldr	r6, [r5, #0]
  401b26:	f046 0602 	orr.w	r6, r6, #2
  401b2a:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P1; //disable output
  401b2c:	6826      	ldr	r6, [r4, #0]
  401b2e:	f046 0602 	orr.w	r6, r6, #2
  401b32:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P1; //disable pull-down resistor
  401b34:	6806      	ldr	r6, [r0, #0]
  401b36:	f046 0602 	orr.w	r6, r6, #2
  401b3a:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P1;	//enable pull-up resistor
  401b3c:	680e      	ldr	r6, [r1, #0]
  401b3e:	f046 0602 	orr.w	r6, r6, #2
  401b42:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P1; //turn on slow clock debounce
  401b44:	6816      	ldr	r6, [r2, #0]
  401b46:	f046 0602 	orr.w	r6, r6, #2
  401b4a:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P1;	//start debounce filter
  401b4c:	681e      	ldr	r6, [r3, #0]
  401b4e:	f046 0602 	orr.w	r6, r6, #2
  401b52:	601e      	str	r6, [r3, #0]


	
	//Set up PC2 as ENCODER 2 INPUT A
	REG_PIOC_PER |= PIO_PER_P2; //enable PIO controller
  401b54:	682e      	ldr	r6, [r5, #0]
  401b56:	f046 0604 	orr.w	r6, r6, #4
  401b5a:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P2; //disable output
  401b5c:	6826      	ldr	r6, [r4, #0]
  401b5e:	f046 0604 	orr.w	r6, r6, #4
  401b62:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P2; //disable pull-down resistor
  401b64:	6806      	ldr	r6, [r0, #0]
  401b66:	f046 0604 	orr.w	r6, r6, #4
  401b6a:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P2;	//enable pull-up resistor
  401b6c:	680e      	ldr	r6, [r1, #0]
  401b6e:	f046 0604 	orr.w	r6, r6, #4
  401b72:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P2; //turn on slow clock debounce
  401b74:	6816      	ldr	r6, [r2, #0]
  401b76:	f046 0604 	orr.w	r6, r6, #4
  401b7a:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P2;	//start debounce filter
  401b7c:	681e      	ldr	r6, [r3, #0]
  401b7e:	f046 0604 	orr.w	r6, r6, #4
  401b82:	601e      	str	r6, [r3, #0]

	//Set up PC3 as ENCODER 2 INPUT B
	REG_PIOC_PER |= PIO_PER_P3; //enable PIO controller
  401b84:	682e      	ldr	r6, [r5, #0]
  401b86:	f046 0608 	orr.w	r6, r6, #8
  401b8a:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P3; //disable output
  401b8c:	6826      	ldr	r6, [r4, #0]
  401b8e:	f046 0608 	orr.w	r6, r6, #8
  401b92:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P3; //disable pull-down resistor
  401b94:	6806      	ldr	r6, [r0, #0]
  401b96:	f046 0608 	orr.w	r6, r6, #8
  401b9a:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P3;	//enable pull-up resistor
  401b9c:	680e      	ldr	r6, [r1, #0]
  401b9e:	f046 0608 	orr.w	r6, r6, #8
  401ba2:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P3; //turn on slow clock debounce
  401ba4:	6816      	ldr	r6, [r2, #0]
  401ba6:	f046 0608 	orr.w	r6, r6, #8
  401baa:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P3;	//start debounce filter
  401bac:	681e      	ldr	r6, [r3, #0]
  401bae:	f046 0608 	orr.w	r6, r6, #8
  401bb2:	601e      	str	r6, [r3, #0]



	//Set up PC4 as ENCODER 3 INPUT A
	REG_PIOC_PER |= PIO_PER_P4; //enable PIO controller
  401bb4:	682e      	ldr	r6, [r5, #0]
  401bb6:	f046 0610 	orr.w	r6, r6, #16
  401bba:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P4; //disable output
  401bbc:	6826      	ldr	r6, [r4, #0]
  401bbe:	f046 0610 	orr.w	r6, r6, #16
  401bc2:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P4; //disable pull-down resistor
  401bc4:	6806      	ldr	r6, [r0, #0]
  401bc6:	f046 0610 	orr.w	r6, r6, #16
  401bca:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P4;	//enable pull-up resistor
  401bcc:	680e      	ldr	r6, [r1, #0]
  401bce:	f046 0610 	orr.w	r6, r6, #16
  401bd2:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P4; //turn on slow clock debounce
  401bd4:	6816      	ldr	r6, [r2, #0]
  401bd6:	f046 0610 	orr.w	r6, r6, #16
  401bda:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P4;	//start debounce filter
  401bdc:	681e      	ldr	r6, [r3, #0]
  401bde:	f046 0610 	orr.w	r6, r6, #16
  401be2:	601e      	str	r6, [r3, #0]

	//Set up PC5 as ENCODER 3 INPUT B
	REG_PIOC_PER |= PIO_PER_P5; //enable PIO controller
  401be4:	682e      	ldr	r6, [r5, #0]
  401be6:	f046 0620 	orr.w	r6, r6, #32
  401bea:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P5; //disable output
  401bec:	6826      	ldr	r6, [r4, #0]
  401bee:	f046 0620 	orr.w	r6, r6, #32
  401bf2:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P5; //disable pull-down resistor
  401bf4:	6806      	ldr	r6, [r0, #0]
  401bf6:	f046 0620 	orr.w	r6, r6, #32
  401bfa:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P5;	//enable pull-up resistor
  401bfc:	680e      	ldr	r6, [r1, #0]
  401bfe:	f046 0620 	orr.w	r6, r6, #32
  401c02:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P5; //turn on slow clock debounce
  401c04:	6816      	ldr	r6, [r2, #0]
  401c06:	f046 0620 	orr.w	r6, r6, #32
  401c0a:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P5;	//start debounce filter
  401c0c:	681e      	ldr	r6, [r3, #0]
  401c0e:	f046 0620 	orr.w	r6, r6, #32
  401c12:	601e      	str	r6, [r3, #0]



	//Set up PC6 as ENCODER 4 INPUT A
	REG_PIOC_PER |= PIO_PER_P6; //enable PIO controller
  401c14:	682e      	ldr	r6, [r5, #0]
  401c16:	f046 0640 	orr.w	r6, r6, #64	; 0x40
  401c1a:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P6; //disable output
  401c1c:	6826      	ldr	r6, [r4, #0]
  401c1e:	f046 0640 	orr.w	r6, r6, #64	; 0x40
  401c22:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P6; //disable pull-down resistor
  401c24:	6806      	ldr	r6, [r0, #0]
  401c26:	f046 0640 	orr.w	r6, r6, #64	; 0x40
  401c2a:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P6;	//enable pull-up resistor
  401c2c:	680e      	ldr	r6, [r1, #0]
  401c2e:	f046 0640 	orr.w	r6, r6, #64	; 0x40
  401c32:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P6; //turn on slow clock debounce
  401c34:	6816      	ldr	r6, [r2, #0]
  401c36:	f046 0640 	orr.w	r6, r6, #64	; 0x40
  401c3a:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P6;	//start debounce filter
  401c3c:	681e      	ldr	r6, [r3, #0]
  401c3e:	f046 0640 	orr.w	r6, r6, #64	; 0x40
  401c42:	601e      	str	r6, [r3, #0]

	//Set up PC7 as ENCODER 4 INPUT B
	REG_PIOC_PER |= PIO_PER_P7; //enable PIO controller
  401c44:	682e      	ldr	r6, [r5, #0]
  401c46:	f046 0680 	orr.w	r6, r6, #128	; 0x80
  401c4a:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P7; //disable output
  401c4c:	6826      	ldr	r6, [r4, #0]
  401c4e:	f046 0680 	orr.w	r6, r6, #128	; 0x80
  401c52:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P7; //disable pull-down resistor
  401c54:	6806      	ldr	r6, [r0, #0]
  401c56:	f046 0680 	orr.w	r6, r6, #128	; 0x80
  401c5a:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P7;	//enable pull-up resistor
  401c5c:	680e      	ldr	r6, [r1, #0]
  401c5e:	f046 0680 	orr.w	r6, r6, #128	; 0x80
  401c62:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P7; //turn on slow clock debounce
  401c64:	6816      	ldr	r6, [r2, #0]
  401c66:	f046 0680 	orr.w	r6, r6, #128	; 0x80
  401c6a:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P7;	//start debounce filter
  401c6c:	681e      	ldr	r6, [r3, #0]
  401c6e:	f046 0680 	orr.w	r6, r6, #128	; 0x80
  401c72:	601e      	str	r6, [r3, #0]



	//Set up PC8 as ENCODER 5 INPUT A
	REG_PIOC_PER |= PIO_PER_P8; //enable PIO controller
  401c74:	682e      	ldr	r6, [r5, #0]
  401c76:	f446 7680 	orr.w	r6, r6, #256	; 0x100
  401c7a:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P8; //disable output
  401c7c:	6826      	ldr	r6, [r4, #0]
  401c7e:	f446 7680 	orr.w	r6, r6, #256	; 0x100
  401c82:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P8; //disable pull-down resistor
  401c84:	6806      	ldr	r6, [r0, #0]
  401c86:	f446 7680 	orr.w	r6, r6, #256	; 0x100
  401c8a:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P8;	//enable pull-up resistor
  401c8c:	680e      	ldr	r6, [r1, #0]
  401c8e:	f446 7680 	orr.w	r6, r6, #256	; 0x100
  401c92:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P8; //turn on slow clock debounce
  401c94:	6816      	ldr	r6, [r2, #0]
  401c96:	f446 7680 	orr.w	r6, r6, #256	; 0x100
  401c9a:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P8;	//start debounce filter
  401c9c:	681e      	ldr	r6, [r3, #0]
  401c9e:	f446 7680 	orr.w	r6, r6, #256	; 0x100
  401ca2:	601e      	str	r6, [r3, #0]

	//Set up PC9 as ENCODER 5 INPUT B
	REG_PIOC_PER |= PIO_PER_P9; //enable PIO controller
  401ca4:	682e      	ldr	r6, [r5, #0]
  401ca6:	f446 7600 	orr.w	r6, r6, #512	; 0x200
  401caa:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P9; //disable output
  401cac:	6826      	ldr	r6, [r4, #0]
  401cae:	f446 7600 	orr.w	r6, r6, #512	; 0x200
  401cb2:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P9; //disable pull-down resistor
  401cb4:	6806      	ldr	r6, [r0, #0]
  401cb6:	f446 7600 	orr.w	r6, r6, #512	; 0x200
  401cba:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P9;	//enable pull-up resistor
  401cbc:	680e      	ldr	r6, [r1, #0]
  401cbe:	f446 7600 	orr.w	r6, r6, #512	; 0x200
  401cc2:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P9; //turn on slow clock debounce
  401cc4:	6816      	ldr	r6, [r2, #0]
  401cc6:	f446 7600 	orr.w	r6, r6, #512	; 0x200
  401cca:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P9;	//start debounce filter
  401ccc:	681e      	ldr	r6, [r3, #0]
  401cce:	f446 7600 	orr.w	r6, r6, #512	; 0x200
  401cd2:	601e      	str	r6, [r3, #0]



	//Set up PC10 as ENCODER 6 INPUT A
	REG_PIOC_PER |= PIO_PER_P10; //enable PIO controller
  401cd4:	682e      	ldr	r6, [r5, #0]
  401cd6:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
  401cda:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P10; //disable output
  401cdc:	6826      	ldr	r6, [r4, #0]
  401cde:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
  401ce2:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P10; //disable pull-down resistor
  401ce4:	6806      	ldr	r6, [r0, #0]
  401ce6:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
  401cea:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P10;	//enable pull-up resistor
  401cec:	680e      	ldr	r6, [r1, #0]
  401cee:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
  401cf2:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P10; //turn on slow clock debounce
  401cf4:	6816      	ldr	r6, [r2, #0]
  401cf6:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
  401cfa:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P10;	//start debounce filter
  401cfc:	681e      	ldr	r6, [r3, #0]
  401cfe:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
  401d02:	601e      	str	r6, [r3, #0]

	//Set up PC11 as ENCODER 6 INPUT B
	REG_PIOC_PER |= PIO_PER_P11; //enable PIO controller
  401d04:	682e      	ldr	r6, [r5, #0]
  401d06:	f446 6600 	orr.w	r6, r6, #2048	; 0x800
  401d0a:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P11; //disable output
  401d0c:	6826      	ldr	r6, [r4, #0]
  401d0e:	f446 6600 	orr.w	r6, r6, #2048	; 0x800
  401d12:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P11; //disable pull-down resistor
  401d14:	6806      	ldr	r6, [r0, #0]
  401d16:	f446 6600 	orr.w	r6, r6, #2048	; 0x800
  401d1a:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P11;	//enable pull-up resistor
  401d1c:	680e      	ldr	r6, [r1, #0]
  401d1e:	f446 6600 	orr.w	r6, r6, #2048	; 0x800
  401d22:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P11; //turn on slow clock debounce
  401d24:	6816      	ldr	r6, [r2, #0]
  401d26:	f446 6600 	orr.w	r6, r6, #2048	; 0x800
  401d2a:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P11;	//start debounce filter
  401d2c:	681e      	ldr	r6, [r3, #0]
  401d2e:	f446 6600 	orr.w	r6, r6, #2048	; 0x800
  401d32:	601e      	str	r6, [r3, #0]



	//Set up PC12 as ENCODER 7 INPUT A
	REG_PIOC_PER |= PIO_PER_P12; //enable PIO controller
  401d34:	682e      	ldr	r6, [r5, #0]
  401d36:	f446 5680 	orr.w	r6, r6, #4096	; 0x1000
  401d3a:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P12; //disable output
  401d3c:	6826      	ldr	r6, [r4, #0]
  401d3e:	f446 5680 	orr.w	r6, r6, #4096	; 0x1000
  401d42:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P12; //disable pull-down resistor
  401d44:	6806      	ldr	r6, [r0, #0]
  401d46:	f446 5680 	orr.w	r6, r6, #4096	; 0x1000
  401d4a:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P12;	//enable pull-up resistor
  401d4c:	680e      	ldr	r6, [r1, #0]
  401d4e:	f446 5680 	orr.w	r6, r6, #4096	; 0x1000
  401d52:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P12; //turn on slow clock debounce
  401d54:	6816      	ldr	r6, [r2, #0]
  401d56:	f446 5680 	orr.w	r6, r6, #4096	; 0x1000
  401d5a:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P12;	//start debounce filter
  401d5c:	681e      	ldr	r6, [r3, #0]
  401d5e:	f446 5680 	orr.w	r6, r6, #4096	; 0x1000
  401d62:	601e      	str	r6, [r3, #0]

	//Set up PC13 as ENCODER 7 INPUT B
	REG_PIOC_PER |= PIO_PER_P13; //enable PIO controller
  401d64:	682e      	ldr	r6, [r5, #0]
  401d66:	f446 5600 	orr.w	r6, r6, #8192	; 0x2000
  401d6a:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P13; //disable output
  401d6c:	6826      	ldr	r6, [r4, #0]
  401d6e:	f446 5600 	orr.w	r6, r6, #8192	; 0x2000
  401d72:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P13; //disable pull-down resistor
  401d74:	6806      	ldr	r6, [r0, #0]
  401d76:	e00f      	b.n	401d98 <Encoder_init+0x2c8>
  401d78:	20000997 	.word	0x20000997
  401d7c:	200009a6 	.word	0x200009a6
  401d80:	400e0410 	.word	0x400e0410
  401d84:	400e1200 	.word	0x400e1200
  401d88:	400e1214 	.word	0x400e1214
  401d8c:	400e1290 	.word	0x400e1290
  401d90:	400e1264 	.word	0x400e1264
  401d94:	400e1220 	.word	0x400e1220
  401d98:	f446 5600 	orr.w	r6, r6, #8192	; 0x2000
  401d9c:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P13;	//enable pull-up resistor
  401d9e:	680e      	ldr	r6, [r1, #0]
  401da0:	f446 5600 	orr.w	r6, r6, #8192	; 0x2000
  401da4:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P13; //turn on slow clock debounce
  401da6:	6816      	ldr	r6, [r2, #0]
  401da8:	f446 5600 	orr.w	r6, r6, #8192	; 0x2000
  401dac:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P13;	//start debounce filter
  401dae:	681e      	ldr	r6, [r3, #0]
  401db0:	f446 5600 	orr.w	r6, r6, #8192	; 0x2000
  401db4:	601e      	str	r6, [r3, #0]



	//Set up PC14 as ENCODER 8 INPUT A
	REG_PIOC_PER |= PIO_PER_P14; //enable PIO controller
  401db6:	682e      	ldr	r6, [r5, #0]
  401db8:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
  401dbc:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P14; //disable output
  401dbe:	6826      	ldr	r6, [r4, #0]
  401dc0:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
  401dc4:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P14; //disable pull-down resistor
  401dc6:	6806      	ldr	r6, [r0, #0]
  401dc8:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
  401dcc:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P14;	//enable pull-up resistor
  401dce:	680e      	ldr	r6, [r1, #0]
  401dd0:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
  401dd4:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P14; //turn on slow clock debounce
  401dd6:	6816      	ldr	r6, [r2, #0]
  401dd8:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
  401ddc:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P14;	//start debounce filter
  401dde:	681e      	ldr	r6, [r3, #0]
  401de0:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
  401de4:	601e      	str	r6, [r3, #0]

	//Set up PC15 as ENCODER 8 INPUT B
	REG_PIOC_PER |= PIO_PER_P15; //enable PIO controller
  401de6:	682e      	ldr	r6, [r5, #0]
  401de8:	f446 4600 	orr.w	r6, r6, #32768	; 0x8000
  401dec:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P15; //disable output
  401dee:	6826      	ldr	r6, [r4, #0]
  401df0:	f446 4600 	orr.w	r6, r6, #32768	; 0x8000
  401df4:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P15; //disable pull-down resistor
  401df6:	6806      	ldr	r6, [r0, #0]
  401df8:	f446 4600 	orr.w	r6, r6, #32768	; 0x8000
  401dfc:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P15;	//enable pull-up resistor
  401dfe:	680e      	ldr	r6, [r1, #0]
  401e00:	f446 4600 	orr.w	r6, r6, #32768	; 0x8000
  401e04:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P15; //turn on slow clock debounce
  401e06:	6816      	ldr	r6, [r2, #0]
  401e08:	f446 4600 	orr.w	r6, r6, #32768	; 0x8000
  401e0c:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P15;	//start debounce filter
  401e0e:	681e      	ldr	r6, [r3, #0]
  401e10:	f446 4600 	orr.w	r6, r6, #32768	; 0x8000
  401e14:	601e      	str	r6, [r3, #0]



	//Set up PC16 as ENCODER 9 INPUT A
	REG_PIOC_PER |= PIO_PER_P16; //enable PIO controller
  401e16:	682e      	ldr	r6, [r5, #0]
  401e18:	f446 3680 	orr.w	r6, r6, #65536	; 0x10000
  401e1c:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P16; //disable output
  401e1e:	6826      	ldr	r6, [r4, #0]
  401e20:	f446 3680 	orr.w	r6, r6, #65536	; 0x10000
  401e24:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P16; //disable pull-down resistor
  401e26:	6806      	ldr	r6, [r0, #0]
  401e28:	f446 3680 	orr.w	r6, r6, #65536	; 0x10000
  401e2c:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P16;	//enable pull-up resistor
  401e2e:	680e      	ldr	r6, [r1, #0]
  401e30:	f446 3680 	orr.w	r6, r6, #65536	; 0x10000
  401e34:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P16; //turn on slow clock debounce
  401e36:	6816      	ldr	r6, [r2, #0]
  401e38:	f446 3680 	orr.w	r6, r6, #65536	; 0x10000
  401e3c:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P16;	//start debounce filter
  401e3e:	681e      	ldr	r6, [r3, #0]
  401e40:	f446 3680 	orr.w	r6, r6, #65536	; 0x10000
  401e44:	601e      	str	r6, [r3, #0]

	//Set up PC17 as ENCODER 9 INPUT B
	REG_PIOC_PER |= PIO_PER_P17; //enable PIO controller
  401e46:	682e      	ldr	r6, [r5, #0]
  401e48:	f446 3600 	orr.w	r6, r6, #131072	; 0x20000
  401e4c:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P17; //disable output
  401e4e:	6826      	ldr	r6, [r4, #0]
  401e50:	f446 3600 	orr.w	r6, r6, #131072	; 0x20000
  401e54:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P17; //disable pull-down resistor
  401e56:	6806      	ldr	r6, [r0, #0]
  401e58:	f446 3600 	orr.w	r6, r6, #131072	; 0x20000
  401e5c:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P17;	//enable pull-up resistor
  401e5e:	680e      	ldr	r6, [r1, #0]
  401e60:	f446 3600 	orr.w	r6, r6, #131072	; 0x20000
  401e64:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P17; //turn on slow clock debounce
  401e66:	6816      	ldr	r6, [r2, #0]
  401e68:	f446 3600 	orr.w	r6, r6, #131072	; 0x20000
  401e6c:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P17;	//start debounce filter
  401e6e:	681e      	ldr	r6, [r3, #0]
  401e70:	f446 3600 	orr.w	r6, r6, #131072	; 0x20000
  401e74:	601e      	str	r6, [r3, #0]



	
	//Set up PC18 as ENCODER 10 INPUT A
	REG_PIOC_PER |= PIO_PER_P18; //enable PIO controller
  401e76:	682e      	ldr	r6, [r5, #0]
  401e78:	f446 2680 	orr.w	r6, r6, #262144	; 0x40000
  401e7c:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P18; //disable output
  401e7e:	6826      	ldr	r6, [r4, #0]
  401e80:	f446 2680 	orr.w	r6, r6, #262144	; 0x40000
  401e84:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P18; //disable pull-down resistor
  401e86:	6806      	ldr	r6, [r0, #0]
  401e88:	f446 2680 	orr.w	r6, r6, #262144	; 0x40000
  401e8c:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P18;	//enable pull-up resistor
  401e8e:	680e      	ldr	r6, [r1, #0]
  401e90:	f446 2680 	orr.w	r6, r6, #262144	; 0x40000
  401e94:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P18; //turn on slow clock debounce
  401e96:	6816      	ldr	r6, [r2, #0]
  401e98:	f446 2680 	orr.w	r6, r6, #262144	; 0x40000
  401e9c:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P18;	//start debounce filter
  401e9e:	681e      	ldr	r6, [r3, #0]
  401ea0:	f446 2680 	orr.w	r6, r6, #262144	; 0x40000
  401ea4:	601e      	str	r6, [r3, #0]

	//Set up PC19 as ENCODER 10 INPUT B
	REG_PIOC_PER |= PIO_PER_P19; //enable PIO controller
  401ea6:	682e      	ldr	r6, [r5, #0]
  401ea8:	f446 2600 	orr.w	r6, r6, #524288	; 0x80000
  401eac:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P19; //disable output
  401eae:	6826      	ldr	r6, [r4, #0]
  401eb0:	f446 2600 	orr.w	r6, r6, #524288	; 0x80000
  401eb4:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P19; //disable pull-down resistor
  401eb6:	6806      	ldr	r6, [r0, #0]
  401eb8:	f446 2600 	orr.w	r6, r6, #524288	; 0x80000
  401ebc:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P19;	//enable pull-up resistor
  401ebe:	680e      	ldr	r6, [r1, #0]
  401ec0:	f446 2600 	orr.w	r6, r6, #524288	; 0x80000
  401ec4:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P19; //turn on slow clock debounce
  401ec6:	6816      	ldr	r6, [r2, #0]
  401ec8:	f446 2600 	orr.w	r6, r6, #524288	; 0x80000
  401ecc:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P19;	//start debounce filter
  401ece:	681e      	ldr	r6, [r3, #0]
  401ed0:	f446 2600 	orr.w	r6, r6, #524288	; 0x80000
  401ed4:	601e      	str	r6, [r3, #0]



	//Set up PC20 as ENCODER 11 INPUT A
	REG_PIOC_PER |= PIO_PER_P20; //enable PIO controller
  401ed6:	682e      	ldr	r6, [r5, #0]
  401ed8:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
  401edc:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P20; //disable output
  401ede:	6826      	ldr	r6, [r4, #0]
  401ee0:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
  401ee4:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P20; //disable pull-down resistor
  401ee6:	6806      	ldr	r6, [r0, #0]
  401ee8:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
  401eec:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P20;	//enable pull-up resistor
  401eee:	680e      	ldr	r6, [r1, #0]
  401ef0:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
  401ef4:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P20; //turn on slow clock debounce
  401ef6:	6816      	ldr	r6, [r2, #0]
  401ef8:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
  401efc:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P20;	//start debounce filter
  401efe:	681e      	ldr	r6, [r3, #0]
  401f00:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
  401f04:	601e      	str	r6, [r3, #0]

	//Set up PC21 as ENCODER 11 INPUT B
	REG_PIOC_PER |= PIO_PER_P21; //enable PIO controller
  401f06:	682e      	ldr	r6, [r5, #0]
  401f08:	f446 1600 	orr.w	r6, r6, #2097152	; 0x200000
  401f0c:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P21; //disable output
  401f0e:	6826      	ldr	r6, [r4, #0]
  401f10:	f446 1600 	orr.w	r6, r6, #2097152	; 0x200000
  401f14:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P21; //disable pull-down resistor
  401f16:	6806      	ldr	r6, [r0, #0]
  401f18:	f446 1600 	orr.w	r6, r6, #2097152	; 0x200000
  401f1c:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P21;	//enable pull-up resistor
  401f1e:	680e      	ldr	r6, [r1, #0]
  401f20:	f446 1600 	orr.w	r6, r6, #2097152	; 0x200000
  401f24:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P21; //turn on slow clock debounce
  401f26:	6816      	ldr	r6, [r2, #0]
  401f28:	f446 1600 	orr.w	r6, r6, #2097152	; 0x200000
  401f2c:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P21;	//start debounce filter
  401f2e:	681e      	ldr	r6, [r3, #0]
  401f30:	f446 1600 	orr.w	r6, r6, #2097152	; 0x200000
  401f34:	601e      	str	r6, [r3, #0]



	//Set up PC22 as ENCODER 12 INPUT A
	REG_PIOC_PER |= PIO_PER_P22; //enable PIO controller
  401f36:	682e      	ldr	r6, [r5, #0]
  401f38:	f446 0680 	orr.w	r6, r6, #4194304	; 0x400000
  401f3c:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P22; //disable output
  401f3e:	6826      	ldr	r6, [r4, #0]
  401f40:	f446 0680 	orr.w	r6, r6, #4194304	; 0x400000
  401f44:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P22; //disable pull-down resistor
  401f46:	6806      	ldr	r6, [r0, #0]
  401f48:	f446 0680 	orr.w	r6, r6, #4194304	; 0x400000
  401f4c:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P22;	//enable pull-up resistor
  401f4e:	680e      	ldr	r6, [r1, #0]
  401f50:	f446 0680 	orr.w	r6, r6, #4194304	; 0x400000
  401f54:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P22; //turn on slow clock debounce
  401f56:	6816      	ldr	r6, [r2, #0]
  401f58:	f446 0680 	orr.w	r6, r6, #4194304	; 0x400000
  401f5c:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P22;	//start debounce filter
  401f5e:	681e      	ldr	r6, [r3, #0]
  401f60:	f446 0680 	orr.w	r6, r6, #4194304	; 0x400000
  401f64:	601e      	str	r6, [r3, #0]

	//Set up PC23 as ENCODER 12 INPUT B
	REG_PIOC_PER |= PIO_PER_P23; //enable PIO controller
  401f66:	682e      	ldr	r6, [r5, #0]
  401f68:	f446 0600 	orr.w	r6, r6, #8388608	; 0x800000
  401f6c:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P23; //disable output
  401f6e:	6826      	ldr	r6, [r4, #0]
  401f70:	f446 0600 	orr.w	r6, r6, #8388608	; 0x800000
  401f74:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P23; //disable pull-down resistor
  401f76:	6806      	ldr	r6, [r0, #0]
  401f78:	f446 0600 	orr.w	r6, r6, #8388608	; 0x800000
  401f7c:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P23;	//enable pull-up resistor
  401f7e:	680e      	ldr	r6, [r1, #0]
  401f80:	f446 0600 	orr.w	r6, r6, #8388608	; 0x800000
  401f84:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P23; //turn on slow clock debounce
  401f86:	6816      	ldr	r6, [r2, #0]
  401f88:	f446 0600 	orr.w	r6, r6, #8388608	; 0x800000
  401f8c:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P23;	//start debounce filter
  401f8e:	681e      	ldr	r6, [r3, #0]
  401f90:	f446 0600 	orr.w	r6, r6, #8388608	; 0x800000
  401f94:	601e      	str	r6, [r3, #0]



	//Set up PC24 as ENCODER 13 INPUT A
	REG_PIOC_PER |= PIO_PER_P24; //enable PIO controller
  401f96:	682e      	ldr	r6, [r5, #0]
  401f98:	f046 7680 	orr.w	r6, r6, #16777216	; 0x1000000
  401f9c:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P24; //disable output
  401f9e:	6826      	ldr	r6, [r4, #0]
  401fa0:	f046 7680 	orr.w	r6, r6, #16777216	; 0x1000000
  401fa4:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P24; //disable pull-down resistor
  401fa6:	6806      	ldr	r6, [r0, #0]
  401fa8:	f046 7680 	orr.w	r6, r6, #16777216	; 0x1000000
  401fac:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P24;	//enable pull-up resistor
  401fae:	680e      	ldr	r6, [r1, #0]
  401fb0:	f046 7680 	orr.w	r6, r6, #16777216	; 0x1000000
  401fb4:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P24; //turn on slow clock debounce
  401fb6:	6816      	ldr	r6, [r2, #0]
  401fb8:	f046 7680 	orr.w	r6, r6, #16777216	; 0x1000000
  401fbc:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P24;	//start debounce filter
  401fbe:	681e      	ldr	r6, [r3, #0]
  401fc0:	f046 7680 	orr.w	r6, r6, #16777216	; 0x1000000
  401fc4:	601e      	str	r6, [r3, #0]

	//Set up PC25 as ENCODER 13 INPUT B
	REG_PIOC_PER |= PIO_PER_P25; //enable PIO controller
  401fc6:	682e      	ldr	r6, [r5, #0]
  401fc8:	f046 7600 	orr.w	r6, r6, #33554432	; 0x2000000
  401fcc:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P25; //disable output
  401fce:	6826      	ldr	r6, [r4, #0]
  401fd0:	f046 7600 	orr.w	r6, r6, #33554432	; 0x2000000
  401fd4:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P25; //disable pull-down resistor
  401fd6:	6806      	ldr	r6, [r0, #0]
  401fd8:	f046 7600 	orr.w	r6, r6, #33554432	; 0x2000000
  401fdc:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P25;	//enable pull-up resistor
  401fde:	680e      	ldr	r6, [r1, #0]
  401fe0:	f046 7600 	orr.w	r6, r6, #33554432	; 0x2000000
  401fe4:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P25; //turn on slow clock debounce
  401fe6:	6816      	ldr	r6, [r2, #0]
  401fe8:	f046 7600 	orr.w	r6, r6, #33554432	; 0x2000000
  401fec:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P25;	//start debounce filter
  401fee:	681e      	ldr	r6, [r3, #0]
  401ff0:	f046 7600 	orr.w	r6, r6, #33554432	; 0x2000000
  401ff4:	601e      	str	r6, [r3, #0]



	//Set up PC26 as ENCODER 14 INPUT A
	REG_PIOC_PER |= PIO_PER_P26; //enable PIO controller
  401ff6:	682e      	ldr	r6, [r5, #0]
  401ff8:	f046 6680 	orr.w	r6, r6, #67108864	; 0x4000000
  401ffc:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P26; //disable output
  401ffe:	6826      	ldr	r6, [r4, #0]
  402000:	f046 6680 	orr.w	r6, r6, #67108864	; 0x4000000
  402004:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P26; //disable pull-down resistor
  402006:	6806      	ldr	r6, [r0, #0]
  402008:	f046 6680 	orr.w	r6, r6, #67108864	; 0x4000000
  40200c:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P26;	//enable pull-up resistor
  40200e:	680e      	ldr	r6, [r1, #0]
  402010:	f046 6680 	orr.w	r6, r6, #67108864	; 0x4000000
  402014:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P26; //turn on slow clock debounce
  402016:	6816      	ldr	r6, [r2, #0]
  402018:	f046 6680 	orr.w	r6, r6, #67108864	; 0x4000000
  40201c:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P26;	//start debounce filter
  40201e:	681e      	ldr	r6, [r3, #0]
  402020:	f046 6680 	orr.w	r6, r6, #67108864	; 0x4000000
  402024:	601e      	str	r6, [r3, #0]

	//Set up PC27 as ENCODER 14 INPUT B
	REG_PIOC_PER |= PIO_PER_P27; //enable PIO controller
  402026:	682e      	ldr	r6, [r5, #0]
  402028:	f046 6600 	orr.w	r6, r6, #134217728	; 0x8000000
  40202c:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P27; //disable output
  40202e:	6826      	ldr	r6, [r4, #0]
  402030:	f046 6600 	orr.w	r6, r6, #134217728	; 0x8000000
  402034:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P27; //disable pull-down resistor
  402036:	6806      	ldr	r6, [r0, #0]
  402038:	f046 6600 	orr.w	r6, r6, #134217728	; 0x8000000
  40203c:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P27;	//enable pull-up resistor
  40203e:	680e      	ldr	r6, [r1, #0]
  402040:	f046 6600 	orr.w	r6, r6, #134217728	; 0x8000000
  402044:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P27; //turn on slow clock debounce
  402046:	6816      	ldr	r6, [r2, #0]
  402048:	f046 6600 	orr.w	r6, r6, #134217728	; 0x8000000
  40204c:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P27;	//start debounce filter
  40204e:	681e      	ldr	r6, [r3, #0]
  402050:	f046 6600 	orr.w	r6, r6, #134217728	; 0x8000000
  402054:	601e      	str	r6, [r3, #0]



	//Set up PC28 as ENCODER 15 INPUT A
	REG_PIOC_PER |= PIO_PER_P28; //enable PIO controller
  402056:	682e      	ldr	r6, [r5, #0]
  402058:	f046 5680 	orr.w	r6, r6, #268435456	; 0x10000000
  40205c:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P28; //disable output
  40205e:	6826      	ldr	r6, [r4, #0]
  402060:	f046 5680 	orr.w	r6, r6, #268435456	; 0x10000000
  402064:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P28; //disable pull-down resistor
  402066:	6806      	ldr	r6, [r0, #0]
  402068:	f046 5680 	orr.w	r6, r6, #268435456	; 0x10000000
  40206c:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P28;	//enable pull-up resistor
  40206e:	680e      	ldr	r6, [r1, #0]
  402070:	f046 5680 	orr.w	r6, r6, #268435456	; 0x10000000
  402074:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P28; //turn on slow clock debounce
  402076:	6816      	ldr	r6, [r2, #0]
  402078:	f046 5680 	orr.w	r6, r6, #268435456	; 0x10000000
  40207c:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P28;	//start debounce filter
  40207e:	681e      	ldr	r6, [r3, #0]
  402080:	f046 5680 	orr.w	r6, r6, #268435456	; 0x10000000
  402084:	601e      	str	r6, [r3, #0]

	//Set up PC29 as ENCODER 15 INPUT B
	REG_PIOC_PER |= PIO_PER_P29; //enable PIO controller
  402086:	682e      	ldr	r6, [r5, #0]
  402088:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
  40208c:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P29; //disable output
  40208e:	6826      	ldr	r6, [r4, #0]
  402090:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
  402094:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P29; //disable pull-down resistor
  402096:	6806      	ldr	r6, [r0, #0]
  402098:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
  40209c:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P29;	//enable pull-up resistor
  40209e:	680e      	ldr	r6, [r1, #0]
  4020a0:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
  4020a4:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P29; //turn on slow clock debounce
  4020a6:	6816      	ldr	r6, [r2, #0]
  4020a8:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
  4020ac:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P29;	//start debounce filter
  4020ae:	681e      	ldr	r6, [r3, #0]
  4020b0:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
  4020b4:	601e      	str	r6, [r3, #0]



	//Set up PC30 as ENCODER 16 INPUT A
	REG_PIOC_PER |= PIO_PER_P30; //enable PIO controller
  4020b6:	682e      	ldr	r6, [r5, #0]
  4020b8:	f046 4680 	orr.w	r6, r6, #1073741824	; 0x40000000
  4020bc:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P30; //disable output
  4020be:	6826      	ldr	r6, [r4, #0]
  4020c0:	f046 4680 	orr.w	r6, r6, #1073741824	; 0x40000000
  4020c4:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P30; //disable pull-down resistor
  4020c6:	6806      	ldr	r6, [r0, #0]
  4020c8:	f046 4680 	orr.w	r6, r6, #1073741824	; 0x40000000
  4020cc:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P30;	//enable pull-up resistor
  4020ce:	680e      	ldr	r6, [r1, #0]
  4020d0:	f046 4680 	orr.w	r6, r6, #1073741824	; 0x40000000
  4020d4:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P30; //turn on slow clock debounce
  4020d6:	6816      	ldr	r6, [r2, #0]
  4020d8:	f046 4680 	orr.w	r6, r6, #1073741824	; 0x40000000
  4020dc:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P30;	//start debounce filter
  4020de:	681e      	ldr	r6, [r3, #0]
  4020e0:	f046 4680 	orr.w	r6, r6, #1073741824	; 0x40000000
  4020e4:	601e      	str	r6, [r3, #0]

	//Set up PC31 as ENCODER 16 INPUT B
	REG_PIOC_PER |= PIO_PER_P31; //enable PIO controller
  4020e6:	682e      	ldr	r6, [r5, #0]
  4020e8:	f046 4600 	orr.w	r6, r6, #2147483648	; 0x80000000
  4020ec:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P31; //disable output
  4020ee:	6825      	ldr	r5, [r4, #0]
  4020f0:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
  4020f4:	6025      	str	r5, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P31; //disable pull-down resistor
  4020f6:	6804      	ldr	r4, [r0, #0]
  4020f8:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
  4020fc:	6004      	str	r4, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P31;	//enable pull-up resistor
  4020fe:	6808      	ldr	r0, [r1, #0]
  402100:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
  402104:	6008      	str	r0, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P31; //turn on slow clock debounce
  402106:	6811      	ldr	r1, [r2, #0]
  402108:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
  40210c:	6011      	str	r1, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P31;	//start debounce filter
  40210e:	681a      	ldr	r2, [r3, #0]
  402110:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
  402114:	601a      	str	r2, [r3, #0]
	


	/**************			CONFIGURE ENCODER INTERRUPTS			**************/

	uint32_t flag_clear = REG_PIOC_ISR;	//clear left over interrupt flags
  402116:	332c      	adds	r3, #44	; 0x2c
  402118:	681b      	ldr	r3, [r3, #0]

	//Enable interrupts for Encoder 1
	REG_PIOC_IER |= PIO_IER_P0;			//enable input rising edge interrupt
  40211a:	4b85      	ldr	r3, [pc, #532]	; (402330 <Encoder_init+0x860>)
  40211c:	681a      	ldr	r2, [r3, #0]
  40211e:	f042 0201 	orr.w	r2, r2, #1
  402122:	601a      	str	r2, [r3, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P0;
  402124:	4a83      	ldr	r2, [pc, #524]	; (402334 <Encoder_init+0x864>)
  402126:	6811      	ldr	r1, [r2, #0]
  402128:	f041 0101 	orr.w	r1, r1, #1
  40212c:	6011      	str	r1, [r2, #0]
	REG_PIOC_IER |= PIO_IER_P1;			//enable input rising edge interrupt
  40212e:	6819      	ldr	r1, [r3, #0]
  402130:	f041 0102 	orr.w	r1, r1, #2
  402134:	6019      	str	r1, [r3, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P1;
  402136:	6811      	ldr	r1, [r2, #0]
  402138:	f041 0102 	orr.w	r1, r1, #2
  40213c:	6011      	str	r1, [r2, #0]

	//Enable interrupts for Encoder 2
	REG_PIOC_IER |= PIO_IER_P2;			//enable input rising edge interrupt
  40213e:	6819      	ldr	r1, [r3, #0]
  402140:	f041 0104 	orr.w	r1, r1, #4
  402144:	6019      	str	r1, [r3, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P2;
  402146:	6812      	ldr	r2, [r2, #0]
  402148:	f042 0204 	orr.w	r2, r2, #4
  40214c:	3394      	adds	r3, #148	; 0x94
  40214e:	601a      	str	r2, [r3, #0]
	REG_PIOC_IER |= PIO_IER_P3;			//enable input rising edge interrupt
  402150:	4a77      	ldr	r2, [pc, #476]	; (402330 <Encoder_init+0x860>)
  402152:	6811      	ldr	r1, [r2, #0]
  402154:	f041 0108 	orr.w	r1, r1, #8
  402158:	6011      	str	r1, [r2, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P3;
  40215a:	6819      	ldr	r1, [r3, #0]
  40215c:	f041 0108 	orr.w	r1, r1, #8
  402160:	6019      	str	r1, [r3, #0]

	//Enable interrupts for Encoder 3
	REG_PIOC_IER |= PIO_IER_P4;			//enable input rising edge interrupt
  402162:	6811      	ldr	r1, [r2, #0]
  402164:	f041 0110 	orr.w	r1, r1, #16
  402168:	6011      	str	r1, [r2, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P4;
  40216a:	6819      	ldr	r1, [r3, #0]
  40216c:	f041 0110 	orr.w	r1, r1, #16
  402170:	6019      	str	r1, [r3, #0]
	REG_PIOC_IER |= PIO_IER_P5;			//enable input rising edge interrupt
  402172:	6811      	ldr	r1, [r2, #0]
  402174:	f041 0120 	orr.w	r1, r1, #32
  402178:	6011      	str	r1, [r2, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P5;
  40217a:	6819      	ldr	r1, [r3, #0]
  40217c:	f041 0120 	orr.w	r1, r1, #32
  402180:	6019      	str	r1, [r3, #0]

	//Enable interrupts for Encoder 4
	REG_PIOC_IER |= PIO_IER_P6;			//enable input rising edge interrupt
  402182:	6811      	ldr	r1, [r2, #0]
  402184:	f041 0140 	orr.w	r1, r1, #64	; 0x40
  402188:	6011      	str	r1, [r2, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P6;
  40218a:	6819      	ldr	r1, [r3, #0]
  40218c:	f041 0140 	orr.w	r1, r1, #64	; 0x40
  402190:	6019      	str	r1, [r3, #0]
	REG_PIOC_IER |= PIO_IER_P7;			//enable input rising edge interrupt
  402192:	6811      	ldr	r1, [r2, #0]
  402194:	f041 0180 	orr.w	r1, r1, #128	; 0x80
  402198:	6011      	str	r1, [r2, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P7;
  40219a:	6819      	ldr	r1, [r3, #0]
  40219c:	f041 0180 	orr.w	r1, r1, #128	; 0x80
  4021a0:	6019      	str	r1, [r3, #0]

	//Enable interrupts for Encoder 5
	REG_PIOC_IER |= PIO_IER_P8;			//enable input rising edge interrupt
  4021a2:	6811      	ldr	r1, [r2, #0]
  4021a4:	f441 7180 	orr.w	r1, r1, #256	; 0x100
  4021a8:	6011      	str	r1, [r2, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P8;
  4021aa:	6819      	ldr	r1, [r3, #0]
  4021ac:	f441 7180 	orr.w	r1, r1, #256	; 0x100
  4021b0:	6019      	str	r1, [r3, #0]
	REG_PIOC_IER |= PIO_IER_P9;			//enable input rising edge interrupt
  4021b2:	6811      	ldr	r1, [r2, #0]
  4021b4:	f441 7100 	orr.w	r1, r1, #512	; 0x200
  4021b8:	6011      	str	r1, [r2, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P9;
  4021ba:	6819      	ldr	r1, [r3, #0]
  4021bc:	f441 7100 	orr.w	r1, r1, #512	; 0x200
  4021c0:	6019      	str	r1, [r3, #0]

	//Enable interrupts for Encoder 6
	REG_PIOC_IER |= PIO_IER_P10;			//enable input rising edge interrupt
  4021c2:	6811      	ldr	r1, [r2, #0]
  4021c4:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
  4021c8:	6011      	str	r1, [r2, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P10;
  4021ca:	6819      	ldr	r1, [r3, #0]
  4021cc:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
  4021d0:	6019      	str	r1, [r3, #0]
	REG_PIOC_IER |= PIO_IER_P11;			//enable input rising edge interrupt
  4021d2:	6811      	ldr	r1, [r2, #0]
  4021d4:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
  4021d8:	6011      	str	r1, [r2, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P11;
  4021da:	6819      	ldr	r1, [r3, #0]
  4021dc:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
  4021e0:	6019      	str	r1, [r3, #0]

	//Enable interrupts for Encoder 7
	REG_PIOC_IER |= PIO_IER_P12;			//enable input rising edge interrupt
  4021e2:	6811      	ldr	r1, [r2, #0]
  4021e4:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
  4021e8:	6011      	str	r1, [r2, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P12;
  4021ea:	6819      	ldr	r1, [r3, #0]
  4021ec:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
  4021f0:	6019      	str	r1, [r3, #0]
	REG_PIOC_IER |= PIO_IER_P13;			//enable input rising edge interrupt
  4021f2:	6811      	ldr	r1, [r2, #0]
  4021f4:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
  4021f8:	6011      	str	r1, [r2, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P13;
  4021fa:	6819      	ldr	r1, [r3, #0]
  4021fc:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
  402200:	6019      	str	r1, [r3, #0]

	//Enable interrupts for Encoder 8
	REG_PIOC_IER |= PIO_IER_P14;			//enable input rising edge interrupt
  402202:	6811      	ldr	r1, [r2, #0]
  402204:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
  402208:	6011      	str	r1, [r2, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P14;
  40220a:	6819      	ldr	r1, [r3, #0]
  40220c:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
  402210:	6019      	str	r1, [r3, #0]
	REG_PIOC_IER |= PIO_IER_P15;			//enable input rising edge interrupt
  402212:	6811      	ldr	r1, [r2, #0]
  402214:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
  402218:	6011      	str	r1, [r2, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P15;
  40221a:	6819      	ldr	r1, [r3, #0]
  40221c:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
  402220:	6019      	str	r1, [r3, #0]

	//Enable interrupts for Encoder 9
	REG_PIOC_IER |= PIO_IER_P16;			//enable input rising edge interrupt
  402222:	6811      	ldr	r1, [r2, #0]
  402224:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
  402228:	6011      	str	r1, [r2, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P16;
  40222a:	6819      	ldr	r1, [r3, #0]
  40222c:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
  402230:	6019      	str	r1, [r3, #0]
	REG_PIOC_IER |= PIO_IER_P17;			//enable input rising edge interrupt
  402232:	6811      	ldr	r1, [r2, #0]
  402234:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
  402238:	6011      	str	r1, [r2, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P17;
  40223a:	6819      	ldr	r1, [r3, #0]
  40223c:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
  402240:	6019      	str	r1, [r3, #0]

	//Enable interrupts for Encoder 10
	REG_PIOC_IER |= PIO_IER_P18;			//enable input rising edge interrupt
  402242:	6811      	ldr	r1, [r2, #0]
  402244:	f441 2180 	orr.w	r1, r1, #262144	; 0x40000
  402248:	6011      	str	r1, [r2, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P18;
  40224a:	6819      	ldr	r1, [r3, #0]
  40224c:	f441 2180 	orr.w	r1, r1, #262144	; 0x40000
  402250:	6019      	str	r1, [r3, #0]
	REG_PIOC_IER |= PIO_IER_P19;			//enable input rising edge interrupt
  402252:	6811      	ldr	r1, [r2, #0]
  402254:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
  402258:	6011      	str	r1, [r2, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P19;
  40225a:	6819      	ldr	r1, [r3, #0]
  40225c:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
  402260:	6019      	str	r1, [r3, #0]

	//Enable interrupts for Encoder 11
	REG_PIOC_IER |= PIO_IER_P20;			//enable input rising edge interrupt
  402262:	6811      	ldr	r1, [r2, #0]
  402264:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  402268:	6011      	str	r1, [r2, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P20;
  40226a:	6819      	ldr	r1, [r3, #0]
  40226c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  402270:	6019      	str	r1, [r3, #0]
	REG_PIOC_IER |= PIO_IER_P21;			//enable input rising edge interrupt
  402272:	6811      	ldr	r1, [r2, #0]
  402274:	f441 1100 	orr.w	r1, r1, #2097152	; 0x200000
  402278:	6011      	str	r1, [r2, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P21;
  40227a:	6819      	ldr	r1, [r3, #0]
  40227c:	f441 1100 	orr.w	r1, r1, #2097152	; 0x200000
  402280:	6019      	str	r1, [r3, #0]

	//Enable interrupts for Encoder 12
	REG_PIOC_IER |= PIO_IER_P22;			//enable input rising edge interrupt
  402282:	6811      	ldr	r1, [r2, #0]
  402284:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
  402288:	6011      	str	r1, [r2, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P22;
  40228a:	6819      	ldr	r1, [r3, #0]
  40228c:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
  402290:	6019      	str	r1, [r3, #0]
	REG_PIOC_IER |= PIO_IER_P23;			//enable input rising edge interrupt
  402292:	6811      	ldr	r1, [r2, #0]
  402294:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
  402298:	6011      	str	r1, [r2, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P23;
  40229a:	6819      	ldr	r1, [r3, #0]
  40229c:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
  4022a0:	6019      	str	r1, [r3, #0]

	//Enable interrupts for Encoder 13
	REG_PIOC_IER |= PIO_IER_P24;			//enable input rising edge interrupt
  4022a2:	6811      	ldr	r1, [r2, #0]
  4022a4:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
  4022a8:	6011      	str	r1, [r2, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P24;
  4022aa:	6819      	ldr	r1, [r3, #0]
  4022ac:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
  4022b0:	6019      	str	r1, [r3, #0]
	REG_PIOC_IER |= PIO_IER_P25;			//enable input rising edge interrupt
  4022b2:	6811      	ldr	r1, [r2, #0]
  4022b4:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
  4022b8:	6011      	str	r1, [r2, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P25;
  4022ba:	6819      	ldr	r1, [r3, #0]
  4022bc:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
  4022c0:	6019      	str	r1, [r3, #0]

	//Enable interrupts for Encoder 14
	REG_PIOC_IER |= PIO_IER_P26;			//enable input rising edge interrupt
  4022c2:	6811      	ldr	r1, [r2, #0]
  4022c4:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
  4022c8:	6011      	str	r1, [r2, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P26;
  4022ca:	6819      	ldr	r1, [r3, #0]
  4022cc:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
  4022d0:	6019      	str	r1, [r3, #0]
	REG_PIOC_IER |= PIO_IER_P27;			//enable input rising edge interrupt
  4022d2:	6811      	ldr	r1, [r2, #0]
  4022d4:	f041 6100 	orr.w	r1, r1, #134217728	; 0x8000000
  4022d8:	6011      	str	r1, [r2, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P27;
  4022da:	6819      	ldr	r1, [r3, #0]
  4022dc:	f041 6100 	orr.w	r1, r1, #134217728	; 0x8000000
  4022e0:	6019      	str	r1, [r3, #0]

	//Enable interrupts for Encoder 15
	REG_PIOC_IER |= PIO_IER_P28;			//enable input rising edge interrupt
  4022e2:	6811      	ldr	r1, [r2, #0]
  4022e4:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
  4022e8:	6011      	str	r1, [r2, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P28;
  4022ea:	6819      	ldr	r1, [r3, #0]
  4022ec:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
  4022f0:	6019      	str	r1, [r3, #0]
	REG_PIOC_IER |= PIO_IER_P29;			//enable input rising edge interrupt
  4022f2:	6811      	ldr	r1, [r2, #0]
  4022f4:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
  4022f8:	6011      	str	r1, [r2, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P29;
  4022fa:	6819      	ldr	r1, [r3, #0]
  4022fc:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
  402300:	6019      	str	r1, [r3, #0]

	//Enable interrupts for Encoder 16
	REG_PIOC_IER |= PIO_IER_P30;			//enable input rising edge interrupt
  402302:	6811      	ldr	r1, [r2, #0]
  402304:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
  402308:	6011      	str	r1, [r2, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P30;
  40230a:	6819      	ldr	r1, [r3, #0]
  40230c:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
  402310:	6019      	str	r1, [r3, #0]
	REG_PIOC_IER |= PIO_IER_P31;			//enable input rising edge interrupt
  402312:	6811      	ldr	r1, [r2, #0]
  402314:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
  402318:	6011      	str	r1, [r2, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P31;
  40231a:	681a      	ldr	r2, [r3, #0]
  40231c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
  402320:	601a      	str	r2, [r3, #0]
  402322:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  402326:	4b04      	ldr	r3, [pc, #16]	; (402338 <Encoder_init+0x868>)
  402328:	601a      	str	r2, [r3, #0]

	NVIC_EnableIRQ(PIOC_IRQn);			//enable PORT C interrupts


}
  40232a:	bc70      	pop	{r4, r5, r6}
  40232c:	4770      	bx	lr
  40232e:	bf00      	nop
  402330:	400e1240 	.word	0x400e1240
  402334:	400e12d4 	.word	0x400e12d4
  402338:	e000e100 	.word	0xe000e100

0040233c <PIOC_Handler>:



void PIOC_Handler(){
  40233c:	b508      	push	{r3, lr}

	uint32_t status = REG_PIOC_ISR;	//read PIOC interrupt status & clear interrupt flags
  40233e:	4b56      	ldr	r3, [pc, #344]	; (402498 <PIOC_Handler+0x15c>)
  402340:	681b      	ldr	r3, [r3, #0]

	//check if Encoder 1 was rotated
	if ( (status & PIO_ISR_P0) || (status & PIO_ISR_P1) ){	
  402342:	f013 0f03 	tst.w	r3, #3
  402346:	d005      	beq.n	402354 <PIOC_Handler+0x18>
		encoder_direction(PIO_ODSR_P0, PIO_ODSR_P1, 0);
  402348:	2200      	movs	r2, #0
  40234a:	2102      	movs	r1, #2
  40234c:	2001      	movs	r0, #1
  40234e:	4b53      	ldr	r3, [pc, #332]	; (40249c <PIOC_Handler+0x160>)
  402350:	4798      	blx	r3
  402352:	bd08      	pop	{r3, pc}
	}

	//check if Encoder 2 was rotated
	else if ( (status & PIO_ISR_P2) || (status & PIO_ISR_P3) ){
  402354:	f013 0f0c 	tst.w	r3, #12
  402358:	d005      	beq.n	402366 <PIOC_Handler+0x2a>
		encoder_direction(PIO_ODSR_P2, PIO_ODSR_P3, 1);
  40235a:	2201      	movs	r2, #1
  40235c:	2108      	movs	r1, #8
  40235e:	2004      	movs	r0, #4
  402360:	4b4e      	ldr	r3, [pc, #312]	; (40249c <PIOC_Handler+0x160>)
  402362:	4798      	blx	r3
  402364:	bd08      	pop	{r3, pc}
	}

	//check if Encoder 3 was rotated
	else if ( (status & PIO_ISR_P4) || (status & PIO_ISR_P5) ){
  402366:	f013 0f30 	tst.w	r3, #48	; 0x30
  40236a:	d005      	beq.n	402378 <PIOC_Handler+0x3c>
		encoder_direction(PIO_ODSR_P4, PIO_ODSR_P5, 2);
  40236c:	2202      	movs	r2, #2
  40236e:	2120      	movs	r1, #32
  402370:	2010      	movs	r0, #16
  402372:	4b4a      	ldr	r3, [pc, #296]	; (40249c <PIOC_Handler+0x160>)
  402374:	4798      	blx	r3
  402376:	bd08      	pop	{r3, pc}
	}

	//check if Encoder 4 was rotated
	else if ( (status & PIO_ISR_P6) || (status & PIO_ISR_P7) ){
  402378:	f013 0fc0 	tst.w	r3, #192	; 0xc0
  40237c:	d005      	beq.n	40238a <PIOC_Handler+0x4e>
		encoder_direction(PIO_ODSR_P6, PIO_ODSR_P7, 3);
  40237e:	2203      	movs	r2, #3
  402380:	2180      	movs	r1, #128	; 0x80
  402382:	2040      	movs	r0, #64	; 0x40
  402384:	4b45      	ldr	r3, [pc, #276]	; (40249c <PIOC_Handler+0x160>)
  402386:	4798      	blx	r3
  402388:	bd08      	pop	{r3, pc}
	}

	//check if Encoder 5 was rotated
	else if ( (status & PIO_ISR_P8) || (status & PIO_ISR_P9) ){
  40238a:	f413 7f40 	tst.w	r3, #768	; 0x300
  40238e:	d007      	beq.n	4023a0 <PIOC_Handler+0x64>
		encoder_direction(PIO_ODSR_P8, PIO_ODSR_P9, 4);
  402390:	2204      	movs	r2, #4
  402392:	f44f 7100 	mov.w	r1, #512	; 0x200
  402396:	f44f 7080 	mov.w	r0, #256	; 0x100
  40239a:	4b40      	ldr	r3, [pc, #256]	; (40249c <PIOC_Handler+0x160>)
  40239c:	4798      	blx	r3
  40239e:	bd08      	pop	{r3, pc}
	}

	//check if Encoder 6 was rotated
	else if ( (status & PIO_ISR_P10) || (status & PIO_ISR_P11) ){
  4023a0:	f413 6f40 	tst.w	r3, #3072	; 0xc00
  4023a4:	d007      	beq.n	4023b6 <PIOC_Handler+0x7a>
		encoder_direction(PIO_ODSR_P10, PIO_ODSR_P11, 5);
  4023a6:	2205      	movs	r2, #5
  4023a8:	f44f 6100 	mov.w	r1, #2048	; 0x800
  4023ac:	f44f 6080 	mov.w	r0, #1024	; 0x400
  4023b0:	4b3a      	ldr	r3, [pc, #232]	; (40249c <PIOC_Handler+0x160>)
  4023b2:	4798      	blx	r3
  4023b4:	bd08      	pop	{r3, pc}
	}

	//check if Encoder 7 was rotated
	else if ( (status & PIO_ISR_P12) || (status & PIO_ISR_P13) ){
  4023b6:	f413 5f40 	tst.w	r3, #12288	; 0x3000
  4023ba:	d007      	beq.n	4023cc <PIOC_Handler+0x90>
		encoder_direction(PIO_ODSR_P12, PIO_ODSR_P13, 6);
  4023bc:	2206      	movs	r2, #6
  4023be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  4023c2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  4023c6:	4b35      	ldr	r3, [pc, #212]	; (40249c <PIOC_Handler+0x160>)
  4023c8:	4798      	blx	r3
  4023ca:	bd08      	pop	{r3, pc}
	}

	//check if Encoder 8 was rotated
	else if ( (status & PIO_ISR_P14) || (status & PIO_ISR_P15) ){
  4023cc:	f413 4f40 	tst.w	r3, #49152	; 0xc000
  4023d0:	d007      	beq.n	4023e2 <PIOC_Handler+0xa6>
		encoder_direction(PIO_ODSR_P14, PIO_ODSR_P15, 7);
  4023d2:	2207      	movs	r2, #7
  4023d4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
  4023d8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  4023dc:	4b2f      	ldr	r3, [pc, #188]	; (40249c <PIOC_Handler+0x160>)
  4023de:	4798      	blx	r3
  4023e0:	bd08      	pop	{r3, pc}
	}

	//check if Encoder 9 was rotated
	else if ( (status & PIO_ISR_P16) || (status & PIO_ISR_P17) ){
  4023e2:	f413 3f40 	tst.w	r3, #196608	; 0x30000
  4023e6:	d007      	beq.n	4023f8 <PIOC_Handler+0xbc>
		encoder_direction(PIO_ODSR_P16, PIO_ODSR_P17, 8);
  4023e8:	2208      	movs	r2, #8
  4023ea:	f44f 3100 	mov.w	r1, #131072	; 0x20000
  4023ee:	f44f 3080 	mov.w	r0, #65536	; 0x10000
  4023f2:	4b2a      	ldr	r3, [pc, #168]	; (40249c <PIOC_Handler+0x160>)
  4023f4:	4798      	blx	r3
  4023f6:	bd08      	pop	{r3, pc}
	}

	//check if Encoder 10 was rotated
	else if ( (status & PIO_ISR_P18) || (status & PIO_ISR_P19) ){
  4023f8:	f413 2f40 	tst.w	r3, #786432	; 0xc0000
  4023fc:	d007      	beq.n	40240e <PIOC_Handler+0xd2>
		encoder_direction(PIO_ODSR_P18, PIO_ODSR_P19, 9);
  4023fe:	2209      	movs	r2, #9
  402400:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  402404:	f44f 2080 	mov.w	r0, #262144	; 0x40000
  402408:	4b24      	ldr	r3, [pc, #144]	; (40249c <PIOC_Handler+0x160>)
  40240a:	4798      	blx	r3
  40240c:	bd08      	pop	{r3, pc}
	}

	//check if Encoder 11 was rotated
	else if ( (status & PIO_ISR_P20) || (status & PIO_ISR_P21) ){
  40240e:	f413 1f40 	tst.w	r3, #3145728	; 0x300000
  402412:	d007      	beq.n	402424 <PIOC_Handler+0xe8>
		encoder_direction(PIO_ODSR_P20, PIO_ODSR_P21, 10);
  402414:	220a      	movs	r2, #10
  402416:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
  40241a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  40241e:	4b1f      	ldr	r3, [pc, #124]	; (40249c <PIOC_Handler+0x160>)
  402420:	4798      	blx	r3
  402422:	bd08      	pop	{r3, pc}
	}

	//check if Encoder 12 was rotated
	else if ( (status & PIO_ISR_P22) || (status & PIO_ISR_P23) ){
  402424:	f413 0f40 	tst.w	r3, #12582912	; 0xc00000
  402428:	d007      	beq.n	40243a <PIOC_Handler+0xfe>
		encoder_direction(PIO_ODSR_P22, PIO_ODSR_P23, 11);
  40242a:	220b      	movs	r2, #11
  40242c:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
  402430:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
  402434:	4b19      	ldr	r3, [pc, #100]	; (40249c <PIOC_Handler+0x160>)
  402436:	4798      	blx	r3
  402438:	bd08      	pop	{r3, pc}
	}

	//check if Encoder 13 was rotated
	else if ( (status & PIO_ISR_P24) || (status & PIO_ISR_P25) ){
  40243a:	f013 7f40 	tst.w	r3, #50331648	; 0x3000000
  40243e:	d007      	beq.n	402450 <PIOC_Handler+0x114>
		encoder_direction(PIO_ODSR_P24, PIO_ODSR_P25, 12);
  402440:	220c      	movs	r2, #12
  402442:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
  402446:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
  40244a:	4b14      	ldr	r3, [pc, #80]	; (40249c <PIOC_Handler+0x160>)
  40244c:	4798      	blx	r3
  40244e:	bd08      	pop	{r3, pc}
	}
	
	//check if Encoder 14 was rotated
	else if ( (status & PIO_ISR_P26) || (status & PIO_ISR_P27) ){
  402450:	f013 6f40 	tst.w	r3, #201326592	; 0xc000000
  402454:	d007      	beq.n	402466 <PIOC_Handler+0x12a>
		encoder_direction(PIO_ODSR_P26, PIO_ODSR_P27, 13);
  402456:	220d      	movs	r2, #13
  402458:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40245c:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
  402460:	4b0e      	ldr	r3, [pc, #56]	; (40249c <PIOC_Handler+0x160>)
  402462:	4798      	blx	r3
  402464:	bd08      	pop	{r3, pc}
	}

	//check if Encoder 15 was rotated
	else if ( (status & PIO_ISR_P28) || (status & PIO_ISR_P29) ){
  402466:	f013 5f40 	tst.w	r3, #805306368	; 0x30000000
  40246a:	d007      	beq.n	40247c <PIOC_Handler+0x140>
		encoder_direction(PIO_ODSR_P28, PIO_ODSR_P29, 14);
  40246c:	220e      	movs	r2, #14
  40246e:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  402472:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
  402476:	4b09      	ldr	r3, [pc, #36]	; (40249c <PIOC_Handler+0x160>)
  402478:	4798      	blx	r3
  40247a:	bd08      	pop	{r3, pc}
	}

	//check if Encoder 16 was rotated
	else if ( (status & PIO_ISR_P30) || (status & PIO_ISR_P31) ){
  40247c:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
  402480:	d101      	bne.n	402486 <PIOC_Handler+0x14a>
  402482:	2b00      	cmp	r3, #0
  402484:	da06      	bge.n	402494 <PIOC_Handler+0x158>
		encoder_direction(PIO_ODSR_P30, PIO_ODSR_P31, 15);
  402486:	220f      	movs	r2, #15
  402488:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  40248c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  402490:	4b02      	ldr	r3, [pc, #8]	; (40249c <PIOC_Handler+0x160>)
  402492:	4798      	blx	r3
  402494:	bd08      	pop	{r3, pc}
  402496:	bf00      	nop
  402498:	400e124c 	.word	0x400e124c
  40249c:	00401a21 	.word	0x00401a21

004024a0 <flash_write_mem>:
/*#define TEST_PAGE_ADDRESS 0x004FF800;*/

/**
 * Perform initialization and tests on flash.
 */
void flash_write_mem(uint32_t TEST_PAGE_ADDRESS){
  4024a0:	b5f0      	push	{r4, r5, r6, r7, lr}
  4024a2:	f5ad 4d00 	sub.w	sp, sp, #32768	; 0x8000
  4024a6:	b081      	sub	sp, #4
  4024a8:	4605      	mov	r5, r0
	uint32_t ul_idx;
	uint8_t uc_key;
	uint32_t ul_page_buffer[64*IFLASH_PAGE_SIZE / sizeof(uint32_t)];

	/* Initialize flash: 6 wait states for flash writing. */
	ul_rc = flash_init(FLASH_ACCESS_MODE_128, 6);
  4024aa:	2106      	movs	r1, #6
  4024ac:	2000      	movs	r0, #0
  4024ae:	4b22      	ldr	r3, [pc, #136]	; (402538 <flash_write_mem+0x98>)
  4024b0:	4798      	blx	r3
	if (ul_rc != FLASH_RC_OK) {
  4024b2:	2800      	cmp	r0, #0
  4024b4:	d13b      	bne.n	40252e <flash_write_mem+0x8e>
		return 0;
	}

	/* Unlock page */
	//printf("-I- Unlocking test page: 0x%08x\r\n", ul_test_page_addr);
	ul_rc = flash_unlock(ul_test_page_addr,
  4024b6:	f505 46ff 	add.w	r6, r5, #32640	; 0x7f80
  4024ba:	367f      	adds	r6, #127	; 0x7f
  4024bc:	2300      	movs	r3, #0
  4024be:	461a      	mov	r2, r3
  4024c0:	4631      	mov	r1, r6
  4024c2:	4628      	mov	r0, r5
  4024c4:	4c1d      	ldr	r4, [pc, #116]	; (40253c <flash_write_mem+0x9c>)
  4024c6:	47a0      	blx	r4
			ul_test_page_addr + 64*IFLASH_PAGE_SIZE - 1, 0, 0);
	if (ul_rc != FLASH_RC_OK) {
  4024c8:	bb88      	cbnz	r0, 40252e <flash_write_mem+0x8e>
  4024ca:	4f1d      	ldr	r7, [pc, #116]	; (402540 <flash_write_mem+0xa0>)
  4024cc:	46ee      	mov	lr, sp
  4024ce:	f507 4c00 	add.w	ip, r7, #32768	; 0x8000
  4024d2:	e016      	b.n	402502 <flash_write_mem+0x62>

	for (int i = 0; i < 16; i++){
		for (int j = 0; j < 16; j++){
			for (int k = 0; k < 16; k++){
				for (int m = 0; m < 2; m++){
					ul_page_buffer[ul_idx] = (uint32_t) patterns[i][j][k][m];
  4024d4:	f852 1c04 	ldr.w	r1, [r2, #-4]
  4024d8:	6019      	str	r1, [r3, #0]
  4024da:	f852 1b08 	ldr.w	r1, [r2], #8
  4024de:	6059      	str	r1, [r3, #4]
  4024e0:	3308      	adds	r3, #8
// 		ul_page_buffer[ul_idx] = test++;
// 	}

	for (int i = 0; i < 16; i++){
		for (int j = 0; j < 16; j++){
			for (int k = 0; k < 16; k++){
  4024e2:	4283      	cmp	r3, r0
  4024e4:	d1f6      	bne.n	4024d4 <flash_write_mem+0x34>
  4024e6:	3480      	adds	r4, #128	; 0x80
  4024e8:	4603      	mov	r3, r0
// 	for (ul_idx = 0; ul_idx < (64*IFLASH_PAGE_SIZE / 4); ul_idx++) {
// 		ul_page_buffer[ul_idx] = test++;
// 	}

	for (int i = 0; i < 16; i++){
		for (int j = 0; j < 16; j++){
  4024ea:	42bc      	cmp	r4, r7
  4024ec:	d003      	beq.n	4024f6 <flash_write_mem+0x56>
  4024ee:	f103 0080 	add.w	r0, r3, #128	; 0x80
/*#define TEST_PAGE_ADDRESS 0x004FF800;*/

/**
 * Perform initialization and tests on flash.
 */
void flash_write_mem(uint32_t TEST_PAGE_ADDRESS){
  4024f2:	4622      	mov	r2, r4
  4024f4:	e7ee      	b.n	4024d4 <flash_write_mem+0x34>
  4024f6:	f507 6700 	add.w	r7, r7, #2048	; 0x800
  4024fa:	f50e 6e00 	add.w	lr, lr, #2048	; 0x800
	//printf("-I- Writing test page with walking bit pattern\n\r");
// 	for (ul_idx = 0; ul_idx < (64*IFLASH_PAGE_SIZE / 4); ul_idx++) {
// 		ul_page_buffer[ul_idx] = test++;
// 	}

	for (int i = 0; i < 16; i++){
  4024fe:	45bc      	cmp	ip, r7
  402500:	d003      	beq.n	40250a <flash_write_mem+0x6a>
  402502:	f5a7 6400 	sub.w	r4, r7, #2048	; 0x800
/*#define TEST_PAGE_ADDRESS 0x004FF800;*/

/**
 * Perform initialization and tests on flash.
 */
void flash_write_mem(uint32_t TEST_PAGE_ADDRESS){
  402506:	4673      	mov	r3, lr
  402508:	e7f1      	b.n	4024ee <flash_write_mem+0x4e>
	 SAMV71 || SAMV70 || SAMS70 || SAME70)
	/* The EWP command is not supported for non-8KByte sectors in all devices
	 *  SAM4 series, so an erase command is requried before the write operation.
	 */
	
	ul_rc = flash_erase_sector(ul_test_page_addr);
  40250a:	4628      	mov	r0, r5
  40250c:	4b0d      	ldr	r3, [pc, #52]	; (402544 <flash_write_mem+0xa4>)
  40250e:	4798      	blx	r3

	if (ul_rc != FLASH_RC_OK) {
  402510:	b968      	cbnz	r0, 40252e <flash_write_mem+0x8e>
		//printf("-F- Flash programming error %lu\n\r", (UL)ul_rc);
		return 0;
	}


	ul_rc = flash_write(ul_test_page_addr, ul_page_buffer,
  402512:	2300      	movs	r3, #0
  402514:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  402518:	4669      	mov	r1, sp
  40251a:	4628      	mov	r0, r5
  40251c:	4c0a      	ldr	r4, [pc, #40]	; (402548 <flash_write_mem+0xa8>)
  40251e:	47a0      	blx	r4
			64*IFLASH_PAGE_SIZE, 0);

#else
	
#endif
	if (ul_rc != FLASH_RC_OK) {
  402520:	b928      	cbnz	r0, 40252e <flash_write_mem+0x8e>
// 				test_array[i][1] = *(pul_test_page);
// 				pul_test_page++;
// 	}
	/* Lock page */
	//printf("-I- Locking test page\n\r");
	ul_rc = flash_lock(ul_test_page_addr,
  402522:	2300      	movs	r3, #0
  402524:	461a      	mov	r2, r3
  402526:	4631      	mov	r1, r6
  402528:	4628      	mov	r0, r5
  40252a:	4c08      	ldr	r4, [pc, #32]	; (40254c <flash_write_mem+0xac>)
  40252c:	47a0      	blx	r4
// 				//(UL)ul_rc);
// 	}

	return 1;

}
  40252e:	f50d 4d00 	add.w	sp, sp, #32768	; 0x8000
  402532:	b001      	add	sp, #4
  402534:	bdf0      	pop	{r4, r5, r6, r7, pc}
  402536:	bf00      	nop
  402538:	004003ad 	.word	0x004003ad
  40253c:	0040051d 	.word	0x0040051d
  402540:	200011bc 	.word	0x200011bc
  402544:	004003c5 	.word	0x004003c5
  402548:	004003e9 	.word	0x004003e9
  40254c:	004004b1 	.word	0x004004b1

00402550 <pattern_mem_read>:

void pattern_mem_read(uint32_t TEST_PAGE_ADDRESS){
  402550:	b4f0      	push	{r4, r5, r6, r7}
  402552:	f600 0508 	addw	r5, r0, #2056	; 0x808
  402556:	4f11      	ldr	r7, [pc, #68]	; (40259c <pattern_mem_read+0x4c>)
  402558:	f500 4608 	add.w	r6, r0, #34816	; 0x8800
  40255c:	3608      	adds	r6, #8
  40255e:	e017      	b.n	402590 <pattern_mem_read+0x40>
	
	for (int i = 0; i < 16; i++){
		for (int j = 0; j < 16; j++){
			for (int k = 0; k < 16; k++){
				for (int m = 0; m < 2; m++){
					patterns[i][j][k][m] = *pul_test_page;
  402560:	f853 1c08 	ldr.w	r1, [r3, #-8]
  402564:	6011      	str	r1, [r2, #0]
  402566:	f853 1c04 	ldr.w	r1, [r3, #-4]
  40256a:	6051      	str	r1, [r2, #4]
  40256c:	3308      	adds	r3, #8
  40256e:	3208      	adds	r2, #8
	uint32_t ul_idx;

	
	for (int i = 0; i < 16; i++){
		for (int j = 0; j < 16; j++){
			for (int k = 0; k < 16; k++){
  402570:	4283      	cmp	r3, r0
  402572:	d1f5      	bne.n	402560 <pattern_mem_read+0x10>
  402574:	3480      	adds	r4, #128	; 0x80
  402576:	4603      	mov	r3, r0
	uint32_t *pul_test_page = (uint32_t *) ul_test_page_addr;
	uint32_t ul_idx;

	
	for (int i = 0; i < 16; i++){
		for (int j = 0; j < 16; j++){
  402578:	4285      	cmp	r5, r0
  40257a:	d003      	beq.n	402584 <pattern_mem_read+0x34>
  40257c:	f103 0080 	add.w	r0, r3, #128	; 0x80

	return 1;

}

void pattern_mem_read(uint32_t TEST_PAGE_ADDRESS){
  402580:	4622      	mov	r2, r4
  402582:	e7ed      	b.n	402560 <pattern_mem_read+0x10>
  402584:	f505 6500 	add.w	r5, r5, #2048	; 0x800
  402588:	f507 6700 	add.w	r7, r7, #2048	; 0x800
	uint32_t ul_test_page_addr = TEST_PAGE_ADDRESS;
	uint32_t *pul_test_page = (uint32_t *) ul_test_page_addr;
	uint32_t ul_idx;

	
	for (int i = 0; i < 16; i++){
  40258c:	42b5      	cmp	r5, r6
  40258e:	d003      	beq.n	402598 <pattern_mem_read+0x48>
  402590:	f5a5 6300 	sub.w	r3, r5, #2048	; 0x800

	return 1;

}

void pattern_mem_read(uint32_t TEST_PAGE_ADDRESS){
  402594:	463c      	mov	r4, r7
  402596:	e7f1      	b.n	40257c <pattern_mem_read+0x2c>
			}
		}
	}


}	
  402598:	bcf0      	pop	{r4, r5, r6, r7}
  40259a:	4770      	bx	lr
  40259c:	200009b8 	.word	0x200009b8

004025a0 <getWidth_28>:

//______________________________________________________________________________________________________

uint8_t getWidth_28() {
	return 16;
}
  4025a0:	2010      	movs	r0, #16
  4025a2:	4770      	bx	lr

004025a4 <getWidth_22>:

uint8_t getWidth_22() {
	return 12;
}
  4025a4:	200c      	movs	r0, #12
  4025a6:	4770      	bx	lr

004025a8 <getWidth_18>:

uint8_t getWidth_18() {
	return 11;
}
  4025a8:	200b      	movs	r0, #11
  4025aa:	4770      	bx	lr

004025ac <getByte_28>:

uint8_t getByte_28(char input, uint16_t byte_offset) {
	// Finds which descriptor to use
	uint16_t index_value = input - oCRAExtended_28ptFontInfo.StartCharacter;
	// Finds the start of the character in the main array using the descriptor
	uint16_t lookup = oCRAExtended_28ptDescriptors[index_value].Offset;
  4025ac:	3823      	subs	r0, #35	; 0x23
  4025ae:	b280      	uxth	r0, r0
  4025b0:	4b03      	ldr	r3, [pc, #12]	; (4025c0 <getByte_28+0x14>)
  4025b2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
	// Accesses the intended byte in the character
	return oCRAExtended_28ptBitmaps[lookup + byte_offset];
  4025b6:	8842      	ldrh	r2, [r0, #2]
  4025b8:	4b02      	ldr	r3, [pc, #8]	; (4025c4 <getByte_28+0x18>)
  4025ba:	4419      	add	r1, r3
}
  4025bc:	5c88      	ldrb	r0, [r1, r2]
  4025be:	4770      	bx	lr
  4025c0:	00406254 	.word	0x00406254
  4025c4:	00405b34 	.word	0x00405b34

004025c8 <getByte_22>:

uint8_t getByte_22(char input, uint16_t byte_offset) {
  4025c8:	b082      	sub	sp, #8
	// Finds which descriptor to use
	volatile uint16_t index_value = input - oCRAExtended_22ptFontInfo.StartCharacter;
  4025ca:	3823      	subs	r0, #35	; 0x23
  4025cc:	b280      	uxth	r0, r0
  4025ce:	f8ad 0006 	strh.w	r0, [sp, #6]
	// Finds the start of the character in the main array using the descriptor
	volatile uint16_t lookup = oCRAExtended_22ptDescriptors[index_value].Offset;
  4025d2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  4025d6:	b29a      	uxth	r2, r3
  4025d8:	4b06      	ldr	r3, [pc, #24]	; (4025f4 <getByte_22+0x2c>)
  4025da:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  4025de:	885b      	ldrh	r3, [r3, #2]
  4025e0:	f8ad 3004 	strh.w	r3, [sp, #4]
	// Accesses the intended byte in the character
	return oCRAExtended_22ptBitmaps[lookup + byte_offset];
  4025e4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
  4025e8:	4a03      	ldr	r2, [pc, #12]	; (4025f8 <getByte_22+0x30>)
  4025ea:	fa12 f383 	uxtah	r3, r2, r3
}
  4025ee:	5c58      	ldrb	r0, [r3, r1]
  4025f0:	b002      	add	sp, #8
  4025f2:	4770      	bx	lr
  4025f4:	00405700 	.word	0x00405700
  4025f8:	004051a8 	.word	0x004051a8

004025fc <getByte_18>:

uint8_t getByte_18(char input, uint16_t byte_offset) {
  4025fc:	b082      	sub	sp, #8
	// Finds which descriptor to use
	volatile uint16_t index_value = input - oCRAExtended_18ptFontInfo.StartCharacter;
  4025fe:	3823      	subs	r0, #35	; 0x23
  402600:	b280      	uxth	r0, r0
  402602:	f8ad 0006 	strh.w	r0, [sp, #6]
	// Finds the start of the character in the main array using the descriptor
	volatile uint16_t lookup = oCRAExtended_18ptDescriptors[index_value].Offset;
  402606:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  40260a:	b29a      	uxth	r2, r3
  40260c:	4b06      	ldr	r3, [pc, #24]	; (402628 <getByte_18+0x2c>)
  40260e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  402612:	885b      	ldrh	r3, [r3, #2]
  402614:	f8ad 3004 	strh.w	r3, [sp, #4]
	// Accesses the intended byte in the character
	return oCRAExtended_18ptBitmaps[lookup + byte_offset];
  402618:	f8bd 3004 	ldrh.w	r3, [sp, #4]
  40261c:	4a03      	ldr	r2, [pc, #12]	; (40262c <getByte_18+0x30>)
  40261e:	fa12 f383 	uxtah	r3, r2, r3
  402622:	5c58      	ldrb	r0, [r3, r1]
  402624:	b002      	add	sp, #8
  402626:	4770      	bx	lr
  402628:	0040639c 	.word	0x0040639c
  40262c:	00405848 	.word	0x00405848

00402630 <led_init_colors>:
int leds_status_get(uint8_t curr_step);


void led_init_colors(){

	cursor_led_data1 = 0xAFFF;
  402630:	f64a 72ff 	movw	r2, #45055	; 0xafff
  402634:	4b0a      	ldr	r3, [pc, #40]	; (402660 <led_init_colors+0x30>)
  402636:	801a      	strh	r2, [r3, #0]
	cursor_led_data2 = 0x1FFF;
  402638:	f641 72ff 	movw	r2, #8191	; 0x1fff
  40263c:	4b09      	ldr	r3, [pc, #36]	; (402664 <led_init_colors+0x34>)
  40263e:	801a      	strh	r2, [r3, #0]
	cursor_led_data3 = 0x0000;
  402640:	2300      	movs	r3, #0
  402642:	4a09      	ldr	r2, [pc, #36]	; (402668 <led_init_colors+0x38>)
  402644:	8013      	strh	r3, [r2, #0]

	note_led_data1 = 0x0000;
  402646:	4a09      	ldr	r2, [pc, #36]	; (40266c <led_init_colors+0x3c>)
  402648:	8013      	strh	r3, [r2, #0]
	note_led_data2 = 0x0000;
  40264a:	4a09      	ldr	r2, [pc, #36]	; (402670 <led_init_colors+0x40>)
  40264c:	8013      	strh	r3, [r2, #0]
	note_led_data3 = 0xF7FF;
  40264e:	f24f 71ff 	movw	r1, #63487	; 0xf7ff
  402652:	4a08      	ldr	r2, [pc, #32]	; (402674 <led_init_colors+0x44>)
  402654:	8011      	strh	r1, [r2, #0]

	cursor_led_color = 0;
  402656:	4a08      	ldr	r2, [pc, #32]	; (402678 <led_init_colors+0x48>)
  402658:	7013      	strb	r3, [r2, #0]
	note_led_color = 0;
  40265a:	4a08      	ldr	r2, [pc, #32]	; (40267c <led_init_colors+0x4c>)
  40265c:	7013      	strb	r3, [r2, #0]
  40265e:	4770      	bx	lr
  402660:	2000095a 	.word	0x2000095a
  402664:	20000978 	.word	0x20000978
  402668:	20000990 	.word	0x20000990
  40266c:	2000095c 	.word	0x2000095c
  402670:	2000097a 	.word	0x2000097a
  402674:	2000098c 	.word	0x2000098c
  402678:	2000097d 	.word	0x2000097d
  40267c:	20000985 	.word	0x20000985

00402680 <led_toggle_cursor>:
	
}

void led_toggle_cursor(){

	if (cursor_led_color == 0){
  402680:	4b17      	ldr	r3, [pc, #92]	; (4026e0 <led_toggle_cursor+0x60>)
  402682:	781b      	ldrb	r3, [r3, #0]
  402684:	b963      	cbnz	r3, 4026a0 <led_toggle_cursor+0x20>
		cursor_led_data1 = 0x8000;
  402686:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40268a:	4a16      	ldr	r2, [pc, #88]	; (4026e4 <led_toggle_cursor+0x64>)
  40268c:	8013      	strh	r3, [r2, #0]
		cursor_led_data2 = 0x8000;
  40268e:	4a16      	ldr	r2, [pc, #88]	; (4026e8 <led_toggle_cursor+0x68>)
  402690:	8013      	strh	r3, [r2, #0]
		cursor_led_data3 = 0x0000;
  402692:	2200      	movs	r2, #0
  402694:	4b15      	ldr	r3, [pc, #84]	; (4026ec <led_toggle_cursor+0x6c>)
  402696:	801a      	strh	r2, [r3, #0]
		cursor_led_color = 1;
  402698:	2201      	movs	r2, #1
  40269a:	4b11      	ldr	r3, [pc, #68]	; (4026e0 <led_toggle_cursor+0x60>)
  40269c:	701a      	strb	r2, [r3, #0]
  40269e:	4770      	bx	lr
	}
	else if (cursor_led_color == 1){
  4026a0:	2b01      	cmp	r3, #1
  4026a2:	d10c      	bne.n	4026be <led_toggle_cursor+0x3e>
		cursor_led_data1 = 0x7FFF;
  4026a4:	f647 72ff 	movw	r2, #32767	; 0x7fff
  4026a8:	4b0e      	ldr	r3, [pc, #56]	; (4026e4 <led_toggle_cursor+0x64>)
  4026aa:	801a      	strh	r2, [r3, #0]
		cursor_led_data2 = 0x0000;
  4026ac:	2300      	movs	r3, #0
  4026ae:	4a0e      	ldr	r2, [pc, #56]	; (4026e8 <led_toggle_cursor+0x68>)
  4026b0:	8013      	strh	r3, [r2, #0]
		cursor_led_data3 = 0x0000;
  4026b2:	4a0e      	ldr	r2, [pc, #56]	; (4026ec <led_toggle_cursor+0x6c>)
  4026b4:	8013      	strh	r3, [r2, #0]
		cursor_led_color = 2;
  4026b6:	2202      	movs	r2, #2
  4026b8:	4b09      	ldr	r3, [pc, #36]	; (4026e0 <led_toggle_cursor+0x60>)
  4026ba:	701a      	strb	r2, [r3, #0]
  4026bc:	4770      	bx	lr
	}
	else if (cursor_led_color == 2){
  4026be:	2b02      	cmp	r3, #2
  4026c0:	d10c      	bne.n	4026dc <led_toggle_cursor+0x5c>
		cursor_led_data1 = 0xAFFF;
  4026c2:	f64a 72ff 	movw	r2, #45055	; 0xafff
  4026c6:	4b07      	ldr	r3, [pc, #28]	; (4026e4 <led_toggle_cursor+0x64>)
  4026c8:	801a      	strh	r2, [r3, #0]
		cursor_led_data2 = 0x1FFF;
  4026ca:	f641 72ff 	movw	r2, #8191	; 0x1fff
  4026ce:	4b06      	ldr	r3, [pc, #24]	; (4026e8 <led_toggle_cursor+0x68>)
  4026d0:	801a      	strh	r2, [r3, #0]
		cursor_led_data3 = 0x0000;
  4026d2:	2300      	movs	r3, #0
  4026d4:	4a05      	ldr	r2, [pc, #20]	; (4026ec <led_toggle_cursor+0x6c>)
  4026d6:	8013      	strh	r3, [r2, #0]
		cursor_led_color = 0;
  4026d8:	4a01      	ldr	r2, [pc, #4]	; (4026e0 <led_toggle_cursor+0x60>)
  4026da:	7013      	strb	r3, [r2, #0]
  4026dc:	4770      	bx	lr
  4026de:	bf00      	nop
  4026e0:	2000097d 	.word	0x2000097d
  4026e4:	2000095a 	.word	0x2000095a
  4026e8:	20000978 	.word	0x20000978
  4026ec:	20000990 	.word	0x20000990

004026f0 <led_toggle_note>:
	}
}

void led_toggle_note(){

	if (note_led_color == 0){
  4026f0:	4b18      	ldr	r3, [pc, #96]	; (402754 <led_toggle_note+0x64>)
  4026f2:	781b      	ldrb	r3, [r3, #0]
  4026f4:	b973      	cbnz	r3, 402714 <led_toggle_note+0x24>
		note_led_data1 = 0x0000;
  4026f6:	2200      	movs	r2, #0
  4026f8:	4b17      	ldr	r3, [pc, #92]	; (402758 <led_toggle_note+0x68>)
  4026fa:	801a      	strh	r2, [r3, #0]
		note_led_data2 = 0x6000;
  4026fc:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
  402700:	4b16      	ldr	r3, [pc, #88]	; (40275c <led_toggle_note+0x6c>)
  402702:	801a      	strh	r2, [r3, #0]
		note_led_data3 = 0x1000;
  402704:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  402708:	4b15      	ldr	r3, [pc, #84]	; (402760 <led_toggle_note+0x70>)
  40270a:	801a      	strh	r2, [r3, #0]
		note_led_color = 1;
  40270c:	2201      	movs	r2, #1
  40270e:	4b11      	ldr	r3, [pc, #68]	; (402754 <led_toggle_note+0x64>)
  402710:	701a      	strb	r2, [r3, #0]
  402712:	4770      	bx	lr
	}
	else if (note_led_color == 1){
  402714:	2b01      	cmp	r3, #1
  402716:	d10e      	bne.n	402736 <led_toggle_note+0x46>
		note_led_data1 = 0x2000;
  402718:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  40271c:	4b0e      	ldr	r3, [pc, #56]	; (402758 <led_toggle_note+0x68>)
  40271e:	801a      	strh	r2, [r3, #0]
		note_led_data2 = 0x0000;
  402720:	2200      	movs	r2, #0
  402722:	4b0e      	ldr	r3, [pc, #56]	; (40275c <led_toggle_note+0x6c>)
  402724:	801a      	strh	r2, [r3, #0]
		note_led_data3 = 0x5000;
  402726:	f44f 42a0 	mov.w	r2, #20480	; 0x5000
  40272a:	4b0d      	ldr	r3, [pc, #52]	; (402760 <led_toggle_note+0x70>)
  40272c:	801a      	strh	r2, [r3, #0]
		note_led_color = 2;
  40272e:	2202      	movs	r2, #2
  402730:	4b08      	ldr	r3, [pc, #32]	; (402754 <led_toggle_note+0x64>)
  402732:	701a      	strb	r2, [r3, #0]
  402734:	4770      	bx	lr
	}
	else if (note_led_color == 2){
  402736:	2b02      	cmp	r3, #2
  402738:	d10a      	bne.n	402750 <led_toggle_note+0x60>
		note_led_data1 = 0x0000;
  40273a:	2300      	movs	r3, #0
  40273c:	4a06      	ldr	r2, [pc, #24]	; (402758 <led_toggle_note+0x68>)
  40273e:	8013      	strh	r3, [r2, #0]
		note_led_data2 = 0x0000;
  402740:	4a06      	ldr	r2, [pc, #24]	; (40275c <led_toggle_note+0x6c>)
  402742:	8013      	strh	r3, [r2, #0]
		note_led_data3 = 0xF7FF;
  402744:	f24f 71ff 	movw	r1, #63487	; 0xf7ff
  402748:	4a05      	ldr	r2, [pc, #20]	; (402760 <led_toggle_note+0x70>)
  40274a:	8011      	strh	r1, [r2, #0]
		note_led_color = 0;
  40274c:	4a01      	ldr	r2, [pc, #4]	; (402754 <led_toggle_note+0x64>)
  40274e:	7013      	strb	r3, [r2, #0]
  402750:	4770      	bx	lr
  402752:	bf00      	nop
  402754:	20000985 	.word	0x20000985
  402758:	2000095c 	.word	0x2000095c
  40275c:	2000097a 	.word	0x2000097a
  402760:	2000098c 	.word	0x2000098c

00402764 <leds_update_status>:
	SPI_led_init();
	leds_update_cursor(curr_step);
}

/* updates LED statuses for current page being displayed */
void leds_update_status(){
  402764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402766:	4d06      	ldr	r5, [pc, #24]	; (402780 <leds_update_status+0x1c>)

	/* match LED status to current display page status */
	for (int i = 0; i < 16; i++){
  402768:	2400      	movs	r4, #0
		leds_status[i] = notes_display_get(display_page, i);
  40276a:	4f06      	ldr	r7, [pc, #24]	; (402784 <leds_update_status+0x20>)
  40276c:	4e06      	ldr	r6, [pc, #24]	; (402788 <leds_update_status+0x24>)
  40276e:	b2e1      	uxtb	r1, r4
  402770:	7838      	ldrb	r0, [r7, #0]
  402772:	47b0      	blx	r6
  402774:	f845 0f04 	str.w	r0, [r5, #4]!

/* updates LED statuses for current page being displayed */
void leds_update_status(){

	/* match LED status to current display page status */
	for (int i = 0; i < 16; i++){
  402778:	3401      	adds	r4, #1
  40277a:	2c10      	cmp	r4, #16
  40277c:	d1f7      	bne.n	40276e <leds_update_status+0xa>
		leds_status[i] = notes_display_get(display_page, i);
	}

}
  40277e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402780:	200008a8 	.word	0x200008a8
  402784:	20000984 	.word	0x20000984
  402788:	00403e59 	.word	0x00403e59

0040278c <leds_update_display>:
void leds_update_note(uint8_t led_pos){

	leds_update_display();
}

 void leds_update_display(){
  40278c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  40278e:	b672      	cpsid	i
  402790:	f3bf 8f5f 	dmb	sy

	cpu_irq_disable();
  402794:	4f90      	ldr	r7, [pc, #576]	; (4029d8 <leds_update_display+0x24c>)
  402796:	2300      	movs	r3, #0
  402798:	703b      	strb	r3, [r7, #0]

	//Set Write Command, Function, and BC Bits
	SPI_byteSend(0x94);
  40279a:	2094      	movs	r0, #148	; 0x94
  40279c:	4c8f      	ldr	r4, [pc, #572]	; (4029dc <leds_update_display+0x250>)
  40279e:	47a0      	blx	r4
	SPI_byteSend(0x5F);
  4027a0:	205f      	movs	r0, #95	; 0x5f
  4027a2:	47a0      	blx	r4
	SPI_byteSend(0xFF);
  4027a4:	20ff      	movs	r0, #255	; 0xff
  4027a6:	47a0      	blx	r4
	SPI_byteSend(0xFF);
  4027a8:	20ff      	movs	r0, #255	; 0xff
  4027aa:	47a0      	blx	r4
// 	for (int i = 11; i > -1; i--){
// 		SPI_byteSend( (uint8_t) (leds_data_1[i] >> 8) );
// 		SPI_byteSend( (uint8_t) (leds_data_1[i]) );
// 	}

	SPI_byteSend( (uint8_t) (leds_data_1[2] >> 8) );
  4027ac:	4d8c      	ldr	r5, [pc, #560]	; (4029e0 <leds_update_display+0x254>)
  4027ae:	88a8      	ldrh	r0, [r5, #4]
  4027b0:	0a00      	lsrs	r0, r0, #8
  4027b2:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_1[2]) );
  4027b4:	7928      	ldrb	r0, [r5, #4]
  4027b6:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_1[1] >> 8) );
  4027b8:	8868      	ldrh	r0, [r5, #2]
  4027ba:	0a00      	lsrs	r0, r0, #8
  4027bc:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_1[1]) );
  4027be:	78a8      	ldrb	r0, [r5, #2]
  4027c0:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_1[0] >> 8) );
  4027c2:	8828      	ldrh	r0, [r5, #0]
  4027c4:	0a00      	lsrs	r0, r0, #8
  4027c6:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_1[0]) );
  4027c8:	7828      	ldrb	r0, [r5, #0]
  4027ca:	47a0      	blx	r4

	SPI_byteSend( (uint8_t) (leds_data_3[2] >> 8) );
  4027cc:	4e85      	ldr	r6, [pc, #532]	; (4029e4 <leds_update_display+0x258>)
  4027ce:	88b0      	ldrh	r0, [r6, #4]
  4027d0:	0a00      	lsrs	r0, r0, #8
  4027d2:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_3[2]) );
  4027d4:	7930      	ldrb	r0, [r6, #4]
  4027d6:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_3[1] >> 8) );
  4027d8:	8870      	ldrh	r0, [r6, #2]
  4027da:	0a00      	lsrs	r0, r0, #8
  4027dc:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_3[1]) );
  4027de:	78b0      	ldrb	r0, [r6, #2]
  4027e0:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_3[0] >> 8) );
  4027e2:	8830      	ldrh	r0, [r6, #0]
  4027e4:	0a00      	lsrs	r0, r0, #8
  4027e6:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_3[0]) );
  4027e8:	7830      	ldrb	r0, [r6, #0]
  4027ea:	47a0      	blx	r4

	SPI_byteSend( (uint8_t) (leds_data_3[5] >> 8) );
  4027ec:	8970      	ldrh	r0, [r6, #10]
  4027ee:	0a00      	lsrs	r0, r0, #8
  4027f0:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_3[5]) );
  4027f2:	7ab0      	ldrb	r0, [r6, #10]
  4027f4:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_3[4] >> 8) );
  4027f6:	8930      	ldrh	r0, [r6, #8]
  4027f8:	0a00      	lsrs	r0, r0, #8
  4027fa:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_3[4]) );
  4027fc:	7a30      	ldrb	r0, [r6, #8]
  4027fe:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_3[3] >> 8) );
  402800:	88f0      	ldrh	r0, [r6, #6]
  402802:	0a00      	lsrs	r0, r0, #8
  402804:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_3[3]) );
  402806:	79b0      	ldrb	r0, [r6, #6]
  402808:	47a0      	blx	r4

	SPI_byteSend( (uint8_t) (leds_data_1[5] >> 8) );
  40280a:	8968      	ldrh	r0, [r5, #10]
  40280c:	0a00      	lsrs	r0, r0, #8
  40280e:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_1[5]) );
  402810:	7aa8      	ldrb	r0, [r5, #10]
  402812:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_1[4] >> 8) );
  402814:	8928      	ldrh	r0, [r5, #8]
  402816:	0a00      	lsrs	r0, r0, #8
  402818:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_1[4]) );
  40281a:	7a28      	ldrb	r0, [r5, #8]
  40281c:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_1[3] >> 8) );
  40281e:	88e8      	ldrh	r0, [r5, #6]
  402820:	0a00      	lsrs	r0, r0, #8
  402822:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_1[3]) );
  402824:	79a8      	ldrb	r0, [r5, #6]
  402826:	47a0      	blx	r4

	//Set Write Command, Function, and BC Bits
	SPI_byteSend(0x94);
  402828:	2094      	movs	r0, #148	; 0x94
  40282a:	47a0      	blx	r4
	SPI_byteSend(0x5F);
  40282c:	205f      	movs	r0, #95	; 0x5f
  40282e:	47a0      	blx	r4
	SPI_byteSend(0xFF);
  402830:	20ff      	movs	r0, #255	; 0xff
  402832:	47a0      	blx	r4
	SPI_byteSend(0xFF);
  402834:	20ff      	movs	r0, #255	; 0xff
  402836:	47a0      	blx	r4
// 	for (int i = 11; i > -1; i--){
// 		SPI_byteSend( (uint8_t) (leds_data_2[i] >> 8) );
// 		SPI_byteSend( (uint8_t) (leds_data_2[i]) );
// 	}

	SPI_byteSend( (uint8_t) (leds_data_1[8] >> 8) );
  402838:	8a28      	ldrh	r0, [r5, #16]
  40283a:	0a00      	lsrs	r0, r0, #8
  40283c:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_1[8]) );
  40283e:	7c28      	ldrb	r0, [r5, #16]
  402840:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_1[7] >> 8) );
  402842:	89e8      	ldrh	r0, [r5, #14]
  402844:	0a00      	lsrs	r0, r0, #8
  402846:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_1[7]) );
  402848:	7ba8      	ldrb	r0, [r5, #14]
  40284a:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_1[6] >> 8) );
  40284c:	89a8      	ldrh	r0, [r5, #12]
  40284e:	0a00      	lsrs	r0, r0, #8
  402850:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_1[6]) );
  402852:	7b28      	ldrb	r0, [r5, #12]
  402854:	47a0      	blx	r4

	SPI_byteSend( (uint8_t) (leds_data_3[8] >> 8) );
  402856:	8a30      	ldrh	r0, [r6, #16]
  402858:	0a00      	lsrs	r0, r0, #8
  40285a:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_3[8]) );
  40285c:	7c30      	ldrb	r0, [r6, #16]
  40285e:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_3[7] >> 8) );
  402860:	89f0      	ldrh	r0, [r6, #14]
  402862:	0a00      	lsrs	r0, r0, #8
  402864:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_3[7]) );
  402866:	7bb0      	ldrb	r0, [r6, #14]
  402868:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_3[6] >> 8) );
  40286a:	89b0      	ldrh	r0, [r6, #12]
  40286c:	0a00      	lsrs	r0, r0, #8
  40286e:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_3[6]) );
  402870:	7b30      	ldrb	r0, [r6, #12]
  402872:	47a0      	blx	r4

	SPI_byteSend( (uint8_t) (leds_data_3[11] >> 8) );
  402874:	8af0      	ldrh	r0, [r6, #22]
  402876:	0a00      	lsrs	r0, r0, #8
  402878:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_3[11]) );
  40287a:	7db0      	ldrb	r0, [r6, #22]
  40287c:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_3[10] >> 8) );
  40287e:	8ab0      	ldrh	r0, [r6, #20]
  402880:	0a00      	lsrs	r0, r0, #8
  402882:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_3[10]) );
  402884:	7d30      	ldrb	r0, [r6, #20]
  402886:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_3[9] >> 8) );
  402888:	8a70      	ldrh	r0, [r6, #18]
  40288a:	0a00      	lsrs	r0, r0, #8
  40288c:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_3[9]) );
  40288e:	7cb0      	ldrb	r0, [r6, #18]
  402890:	47a0      	blx	r4

	SPI_byteSend( (uint8_t) (leds_data_1[11] >> 8) );
  402892:	8ae8      	ldrh	r0, [r5, #22]
  402894:	0a00      	lsrs	r0, r0, #8
  402896:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_1[11]) );
  402898:	7da8      	ldrb	r0, [r5, #22]
  40289a:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_1[10] >> 8) );
  40289c:	8aa8      	ldrh	r0, [r5, #20]
  40289e:	0a00      	lsrs	r0, r0, #8
  4028a0:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_1[10]) );
  4028a2:	7d28      	ldrb	r0, [r5, #20]
  4028a4:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_1[9] >> 8) );
  4028a6:	8a68      	ldrh	r0, [r5, #18]
  4028a8:	0a00      	lsrs	r0, r0, #8
  4028aa:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_1[9]) );
  4028ac:	7ca8      	ldrb	r0, [r5, #18]
  4028ae:	47a0      	blx	r4

	//Set Write Command, Function, and BC Bits
	SPI_byteSend(0x94);
  4028b0:	2094      	movs	r0, #148	; 0x94
  4028b2:	47a0      	blx	r4
	SPI_byteSend(0x5F);
  4028b4:	205f      	movs	r0, #95	; 0x5f
  4028b6:	47a0      	blx	r4
	SPI_byteSend(0xFF);
  4028b8:	20ff      	movs	r0, #255	; 0xff
  4028ba:	47a0      	blx	r4
	SPI_byteSend(0xFF);
  4028bc:	20ff      	movs	r0, #255	; 0xff
  4028be:	47a0      	blx	r4
// 	for (int i = 11; i > -1; i--){
// 		SPI_byteSend( (uint8_t) (leds_data_3[i] >> 8) );
// 		SPI_byteSend( (uint8_t) (leds_data_3[i]) );
// 	}

	SPI_byteSend( (uint8_t) (leds_data_2[2] >> 8) );
  4028c0:	4d49      	ldr	r5, [pc, #292]	; (4029e8 <leds_update_display+0x25c>)
  4028c2:	88a8      	ldrh	r0, [r5, #4]
  4028c4:	0a00      	lsrs	r0, r0, #8
  4028c6:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_2[2]) );
  4028c8:	7928      	ldrb	r0, [r5, #4]
  4028ca:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_2[1] >> 8) );
  4028cc:	8868      	ldrh	r0, [r5, #2]
  4028ce:	0a00      	lsrs	r0, r0, #8
  4028d0:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_2[1]) );
  4028d2:	78a8      	ldrb	r0, [r5, #2]
  4028d4:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_2[0] >> 8) );
  4028d6:	8828      	ldrh	r0, [r5, #0]
  4028d8:	0a00      	lsrs	r0, r0, #8
  4028da:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_2[0]) );
  4028dc:	7828      	ldrb	r0, [r5, #0]
  4028de:	47a0      	blx	r4

	SPI_byteSend( (uint8_t) (leds_data_4[2] >> 8) );
  4028e0:	4e42      	ldr	r6, [pc, #264]	; (4029ec <leds_update_display+0x260>)
  4028e2:	88b0      	ldrh	r0, [r6, #4]
  4028e4:	0a00      	lsrs	r0, r0, #8
  4028e6:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_4[2]) );
  4028e8:	7930      	ldrb	r0, [r6, #4]
  4028ea:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_4[1] >> 8) );
  4028ec:	8870      	ldrh	r0, [r6, #2]
  4028ee:	0a00      	lsrs	r0, r0, #8
  4028f0:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_4[1]) );
  4028f2:	78b0      	ldrb	r0, [r6, #2]
  4028f4:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_4[0] >> 8) );
  4028f6:	8830      	ldrh	r0, [r6, #0]
  4028f8:	0a00      	lsrs	r0, r0, #8
  4028fa:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_4[0]) );
  4028fc:	7830      	ldrb	r0, [r6, #0]
  4028fe:	47a0      	blx	r4

	SPI_byteSend( (uint8_t) (leds_data_4[5] >> 8) );
  402900:	8970      	ldrh	r0, [r6, #10]
  402902:	0a00      	lsrs	r0, r0, #8
  402904:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_4[5]) );
  402906:	7ab0      	ldrb	r0, [r6, #10]
  402908:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_4[4] >> 8) );
  40290a:	8930      	ldrh	r0, [r6, #8]
  40290c:	0a00      	lsrs	r0, r0, #8
  40290e:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_4[4]) );
  402910:	7a30      	ldrb	r0, [r6, #8]
  402912:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_4[3] >> 8) );
  402914:	88f0      	ldrh	r0, [r6, #6]
  402916:	0a00      	lsrs	r0, r0, #8
  402918:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_4[3]) );
  40291a:	79b0      	ldrb	r0, [r6, #6]
  40291c:	47a0      	blx	r4

	SPI_byteSend( (uint8_t) (leds_data_2[5] >> 8) );
  40291e:	8968      	ldrh	r0, [r5, #10]
  402920:	0a00      	lsrs	r0, r0, #8
  402922:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_2[5]) );
  402924:	7aa8      	ldrb	r0, [r5, #10]
  402926:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_2[4] >> 8) );
  402928:	8928      	ldrh	r0, [r5, #8]
  40292a:	0a00      	lsrs	r0, r0, #8
  40292c:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_2[4]) );
  40292e:	7a28      	ldrb	r0, [r5, #8]
  402930:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_2[3] >> 8) );
  402932:	88e8      	ldrh	r0, [r5, #6]
  402934:	0a00      	lsrs	r0, r0, #8
  402936:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_2[3]) );
  402938:	79a8      	ldrb	r0, [r5, #6]
  40293a:	47a0      	blx	r4

	//Set Write Command, Function, and BC Bits
	SPI_byteSend(0x94);
  40293c:	2094      	movs	r0, #148	; 0x94
  40293e:	47a0      	blx	r4
	SPI_byteSend(0x5F);
  402940:	205f      	movs	r0, #95	; 0x5f
  402942:	47a0      	blx	r4
	SPI_byteSend(0xFF);
  402944:	20ff      	movs	r0, #255	; 0xff
  402946:	47a0      	blx	r4
	SPI_byteSend(0xFF);
  402948:	20ff      	movs	r0, #255	; 0xff
  40294a:	47a0      	blx	r4
// 	for (int i = 11; i > -1; i--){
// 		SPI_byteSend( (uint8_t) (leds_data_4[i] >> 8) );
// 		SPI_byteSend( (uint8_t) (leds_data_4[i]) );
// 	}

	SPI_byteSend( (uint8_t) (leds_data_2[8] >> 8) );
  40294c:	8a28      	ldrh	r0, [r5, #16]
  40294e:	0a00      	lsrs	r0, r0, #8
  402950:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_2[8]) );
  402952:	7c28      	ldrb	r0, [r5, #16]
  402954:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_2[7] >> 8) );
  402956:	89e8      	ldrh	r0, [r5, #14]
  402958:	0a00      	lsrs	r0, r0, #8
  40295a:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_2[7]) );
  40295c:	7ba8      	ldrb	r0, [r5, #14]
  40295e:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_2[6] >> 8) );
  402960:	89a8      	ldrh	r0, [r5, #12]
  402962:	0a00      	lsrs	r0, r0, #8
  402964:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_2[6]) );
  402966:	7b28      	ldrb	r0, [r5, #12]
  402968:	47a0      	blx	r4

	SPI_byteSend( (uint8_t) (leds_data_4[8] >> 8) );
  40296a:	8a30      	ldrh	r0, [r6, #16]
  40296c:	0a00      	lsrs	r0, r0, #8
  40296e:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_4[8]) );
  402970:	7c30      	ldrb	r0, [r6, #16]
  402972:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_4[7] >> 8) );
  402974:	89f0      	ldrh	r0, [r6, #14]
  402976:	0a00      	lsrs	r0, r0, #8
  402978:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_4[7]) );
  40297a:	7bb0      	ldrb	r0, [r6, #14]
  40297c:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_4[6] >> 8) );
  40297e:	89b0      	ldrh	r0, [r6, #12]
  402980:	0a00      	lsrs	r0, r0, #8
  402982:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_4[6]) );
  402984:	7b30      	ldrb	r0, [r6, #12]
  402986:	47a0      	blx	r4

	SPI_byteSend( (uint8_t) (leds_data_4[11] >> 8) );
  402988:	8af0      	ldrh	r0, [r6, #22]
  40298a:	0a00      	lsrs	r0, r0, #8
  40298c:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_4[11]) );
  40298e:	7db0      	ldrb	r0, [r6, #22]
  402990:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_4[10] >> 8) );
  402992:	8ab0      	ldrh	r0, [r6, #20]
  402994:	0a00      	lsrs	r0, r0, #8
  402996:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_4[10]) );
  402998:	7d30      	ldrb	r0, [r6, #20]
  40299a:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_4[9] >> 8) );
  40299c:	8a70      	ldrh	r0, [r6, #18]
  40299e:	0a00      	lsrs	r0, r0, #8
  4029a0:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_4[9]) );
  4029a2:	7cb0      	ldrb	r0, [r6, #18]
  4029a4:	47a0      	blx	r4

	SPI_byteSend( (uint8_t) (leds_data_2[11] >> 8) );
  4029a6:	8ae8      	ldrh	r0, [r5, #22]
  4029a8:	0a00      	lsrs	r0, r0, #8
  4029aa:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_2[11]) );
  4029ac:	7da8      	ldrb	r0, [r5, #22]
  4029ae:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_2[10] >> 8) );
  4029b0:	8aa8      	ldrh	r0, [r5, #20]
  4029b2:	0a00      	lsrs	r0, r0, #8
  4029b4:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_2[10]) );
  4029b6:	7d28      	ldrb	r0, [r5, #20]
  4029b8:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_2[9] >> 8) );
  4029ba:	8a68      	ldrh	r0, [r5, #18]
  4029bc:	0a00      	lsrs	r0, r0, #8
  4029be:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_2[9]) );
  4029c0:	7ca8      	ldrb	r0, [r5, #18]
  4029c2:	47a0      	blx	r4


	delay_ms(2.74);
  4029c4:	f243 70ce 	movw	r0, #14286	; 0x37ce
  4029c8:	4b09      	ldr	r3, [pc, #36]	; (4029f0 <leds_update_display+0x264>)
  4029ca:	4798      	blx	r3
	cpu_irq_enable();
  4029cc:	2301      	movs	r3, #1
  4029ce:	703b      	strb	r3, [r7, #0]
  4029d0:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  4029d4:	b662      	cpsie	i
  4029d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4029d8:	2000024c 	.word	0x2000024c
  4029dc:	00403d1d 	.word	0x00403d1d
  4029e0:	200008ec 	.word	0x200008ec
  4029e4:	2000091c 	.word	0x2000091c
  4029e8:	20000904 	.word	0x20000904
  4029ec:	20000934 	.word	0x20000934
  4029f0:	20000089 	.word	0x20000089

004029f4 <leds_update_cursor>:

	/* update note status if button was pressed on current page */
		notes_status_set(display_page, leds_status);
}

void leds_update_cursor(uint8_t curr_step){
  4029f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4029f8:	b083      	sub	sp, #12
  4029fa:	4606      	mov	r6, r0

	/* update LEDs status for current page being displayed */
	leds_update_status();
  4029fc:	4b8a      	ldr	r3, [pc, #552]	; (402c28 <leds_update_cursor+0x234>)
  4029fe:	4798      	blx	r3
/* Initialize the Notes that are Enabled as Blue */
	for (int i = 0; i < 16; i++){
			if ( (i >= 0) && (i < 4) ){
				toffset = (i)*3;
				if(leds_status[i] == 1){
					leds_data_1[toffset] = note_led_data1;
  402a00:	4b8a      	ldr	r3, [pc, #552]	; (402c2c <leds_update_cursor+0x238>)
  402a02:	f8b3 9000 	ldrh.w	r9, [r3]
					leds_data_1[toffset+1] = note_led_data2;
  402a06:	4b8a      	ldr	r3, [pc, #552]	; (402c30 <leds_update_cursor+0x23c>)
  402a08:	f8b3 8000 	ldrh.w	r8, [r3]
					leds_data_1[toffset+2] = note_led_data3;
  402a0c:	4b89      	ldr	r3, [pc, #548]	; (402c34 <leds_update_cursor+0x240>)
  402a0e:	f8b3 c000 	ldrh.w	ip, [r3]
  402a12:	4989      	ldr	r1, [pc, #548]	; (402c38 <leds_update_cursor+0x244>)

	/* update LEDs status for current page being displayed */
	leds_update_status();

/* Initialize the Notes that are Enabled as Blue */
	for (int i = 0; i < 16; i++){
  402a14:	2200      	movs	r2, #0
					leds_data_3[toffset+1] = off_led_data;
					leds_data_3[toffset+2] = off_led_data;
				}
			}
			else {
				toffset = (i % 12)*3;
  402a16:	f8df e260 	ldr.w	lr, [pc, #608]	; 402c78 <leds_update_cursor+0x284>
				if(leds_status[i] == 1){
  402a1a:	4d88      	ldr	r5, [pc, #544]	; (402c3c <leds_update_cursor+0x248>)
					leds_data_4[toffset] = note_led_data1;
					leds_data_4[toffset+1] = note_led_data2;
					leds_data_4[toffset+2] = note_led_data3;
				}
				else{
					leds_data_4[toffset] = off_led_data;
  402a1c:	4888      	ldr	r0, [pc, #544]	; (402c40 <leds_update_cursor+0x24c>)
  402a1e:	4614      	mov	r4, r2
					leds_data_3[toffset] = note_led_data1;
					leds_data_3[toffset+1] = note_led_data2;
					leds_data_3[toffset+2] = note_led_data3;
				}
				else{
					leds_data_3[toffset] = off_led_data;
  402a20:	f8df a248 	ldr.w	sl, [pc, #584]	; 402c6c <leds_update_cursor+0x278>
					leds_data_2[toffset] = note_led_data1;
					leds_data_2[toffset+1] = note_led_data2;
					leds_data_2[toffset+2] = note_led_data3;
				}
				else{
					leds_data_2[toffset] = off_led_data;
  402a24:	9601      	str	r6, [sp, #4]
  402a26:	4617      	mov	r7, r2
	/* update LEDs status for current page being displayed */
	leds_update_status();

/* Initialize the Notes that are Enabled as Blue */
	for (int i = 0; i < 16; i++){
			if ( (i >= 0) && (i < 4) ){
  402a28:	2a03      	cmp	r2, #3
  402a2a:	d811      	bhi.n	402a50 <leds_update_cursor+0x5c>
  402a2c:	eb02 0342 	add.w	r3, r2, r2, lsl #1
  402a30:	b2db      	uxtb	r3, r3
				toffset = (i)*3;
				if(leds_status[i] == 1){
  402a32:	f855 7022 	ldr.w	r7, [r5, r2, lsl #2]
  402a36:	2f01      	cmp	r7, #1
  402a38:	d106      	bne.n	402a48 <leds_update_cursor+0x54>
					leds_data_1[toffset] = note_led_data1;
  402a3a:	f8a1 9000 	strh.w	r9, [r1]
					leds_data_1[toffset+1] = note_led_data2;
  402a3e:	f8a1 8002 	strh.w	r8, [r1, #2]
					leds_data_1[toffset+2] = note_led_data3;
  402a42:	f8a1 c004 	strh.w	ip, [r1, #4]
  402a46:	e06f      	b.n	402b28 <leds_update_cursor+0x134>
				}
				else{
					leds_data_1[toffset] = off_led_data;
  402a48:	800c      	strh	r4, [r1, #0]
					leds_data_1[toffset+1] = off_led_data;
  402a4a:	804c      	strh	r4, [r1, #2]
					leds_data_1[toffset+2] = off_led_data;
  402a4c:	808c      	strh	r4, [r1, #4]
  402a4e:	e06b      	b.n	402b28 <leds_update_cursor+0x134>
				}
			}
			else if ( (i >= 4) && (i < 8) ){
  402a50:	1f13      	subs	r3, r2, #4
  402a52:	2b03      	cmp	r3, #3
  402a54:	d822      	bhi.n	402a9c <leds_update_cursor+0xa8>
				toffset = (i % 4)*3;
  402a56:	4b7b      	ldr	r3, [pc, #492]	; (402c44 <leds_update_cursor+0x250>)
  402a58:	4013      	ands	r3, r2
  402a5a:	d503      	bpl.n	402a64 <leds_update_cursor+0x70>
  402a5c:	3b01      	subs	r3, #1
  402a5e:	f063 0303 	orn	r3, r3, #3
  402a62:	3301      	adds	r3, #1
  402a64:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  402a68:	b2db      	uxtb	r3, r3
				if(leds_status[i] == 1){
  402a6a:	f855 7027 	ldr.w	r7, [r5, r7, lsl #2]
  402a6e:	2f01      	cmp	r7, #1
  402a70:	d10a      	bne.n	402a88 <leds_update_cursor+0x94>
					leds_data_2[toffset] = note_led_data1;
  402a72:	4f75      	ldr	r7, [pc, #468]	; (402c48 <leds_update_cursor+0x254>)
  402a74:	f827 9013 	strh.w	r9, [r7, r3, lsl #1]
					leds_data_2[toffset+1] = note_led_data2;
  402a78:	1c5f      	adds	r7, r3, #1
  402a7a:	4e73      	ldr	r6, [pc, #460]	; (402c48 <leds_update_cursor+0x254>)
  402a7c:	f826 8017 	strh.w	r8, [r6, r7, lsl #1]
					leds_data_2[toffset+2] = note_led_data3;
  402a80:	1c9f      	adds	r7, r3, #2
  402a82:	f826 c017 	strh.w	ip, [r6, r7, lsl #1]
  402a86:	e04f      	b.n	402b28 <leds_update_cursor+0x134>
				}
				else{
					leds_data_2[toffset] = off_led_data;
  402a88:	4e6f      	ldr	r6, [pc, #444]	; (402c48 <leds_update_cursor+0x254>)
  402a8a:	f826 4013 	strh.w	r4, [r6, r3, lsl #1]
					leds_data_2[toffset+1] = off_led_data;
  402a8e:	1c5f      	adds	r7, r3, #1
  402a90:	f826 4017 	strh.w	r4, [r6, r7, lsl #1]
					leds_data_2[toffset+2] = off_led_data;
  402a94:	1c9f      	adds	r7, r3, #2
  402a96:	f826 4017 	strh.w	r4, [r6, r7, lsl #1]
  402a9a:	e045      	b.n	402b28 <leds_update_cursor+0x134>
				}
			}
			else if ( (i >= 8) && (i < 12) ){
  402a9c:	f1a2 0308 	sub.w	r3, r2, #8
  402aa0:	2b03      	cmp	r3, #3
  402aa2:	d81f      	bhi.n	402ae4 <leds_update_cursor+0xf0>
				toffset = (i % 8)*3;
  402aa4:	4b69      	ldr	r3, [pc, #420]	; (402c4c <leds_update_cursor+0x258>)
  402aa6:	4013      	ands	r3, r2
  402aa8:	d503      	bpl.n	402ab2 <leds_update_cursor+0xbe>
  402aaa:	3b01      	subs	r3, #1
  402aac:	f063 0307 	orn	r3, r3, #7
  402ab0:	3301      	adds	r3, #1
  402ab2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  402ab6:	b2db      	uxtb	r3, r3
				if(leds_status[i] == 1){
  402ab8:	f855 7027 	ldr.w	r7, [r5, r7, lsl #2]
  402abc:	2f01      	cmp	r7, #1
  402abe:	d108      	bne.n	402ad2 <leds_update_cursor+0xde>
					leds_data_3[toffset] = note_led_data1;
  402ac0:	f82a 9013 	strh.w	r9, [sl, r3, lsl #1]
					leds_data_3[toffset+1] = note_led_data2;
  402ac4:	1c5f      	adds	r7, r3, #1
  402ac6:	f82a 8017 	strh.w	r8, [sl, r7, lsl #1]
					leds_data_3[toffset+2] = note_led_data3;
  402aca:	1c9f      	adds	r7, r3, #2
  402acc:	f82a c017 	strh.w	ip, [sl, r7, lsl #1]
  402ad0:	e02a      	b.n	402b28 <leds_update_cursor+0x134>
				}
				else{
					leds_data_3[toffset] = off_led_data;
  402ad2:	f82a 4013 	strh.w	r4, [sl, r3, lsl #1]
					leds_data_3[toffset+1] = off_led_data;
  402ad6:	1c5f      	adds	r7, r3, #1
  402ad8:	f82a 4017 	strh.w	r4, [sl, r7, lsl #1]
					leds_data_3[toffset+2] = off_led_data;
  402adc:	1c9f      	adds	r7, r3, #2
  402ade:	f82a 4017 	strh.w	r4, [sl, r7, lsl #1]
  402ae2:	e021      	b.n	402b28 <leds_update_cursor+0x134>
				}
			}
			else {
				toffset = (i % 12)*3;
  402ae4:	fb8e 6302 	smull	r6, r3, lr, r2
  402ae8:	ea4f 7be2 	mov.w	fp, r2, asr #31
  402aec:	ebcb 0363 	rsb	r3, fp, r3, asr #1
  402af0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  402af4:	eba2 0383 	sub.w	r3, r2, r3, lsl #2
  402af8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  402afc:	b2db      	uxtb	r3, r3
				if(leds_status[i] == 1){
  402afe:	f855 7022 	ldr.w	r7, [r5, r2, lsl #2]
  402b02:	2f01      	cmp	r7, #1
  402b04:	d108      	bne.n	402b18 <leds_update_cursor+0x124>
					leds_data_4[toffset] = note_led_data1;
  402b06:	f820 9013 	strh.w	r9, [r0, r3, lsl #1]
					leds_data_4[toffset+1] = note_led_data2;
  402b0a:	1c5f      	adds	r7, r3, #1
  402b0c:	f820 8017 	strh.w	r8, [r0, r7, lsl #1]
					leds_data_4[toffset+2] = note_led_data3;
  402b10:	1c9f      	adds	r7, r3, #2
  402b12:	f820 c017 	strh.w	ip, [r0, r7, lsl #1]
  402b16:	e007      	b.n	402b28 <leds_update_cursor+0x134>
				}
				else{
					leds_data_4[toffset] = off_led_data;
  402b18:	f820 4013 	strh.w	r4, [r0, r3, lsl #1]
					leds_data_4[toffset+1] = off_led_data;
  402b1c:	1c5f      	adds	r7, r3, #1
  402b1e:	f820 4017 	strh.w	r4, [r0, r7, lsl #1]
					leds_data_4[toffset+2] = off_led_data;
  402b22:	1c9f      	adds	r7, r3, #2
  402b24:	f820 4017 	strh.w	r4, [r0, r7, lsl #1]

	/* update LEDs status for current page being displayed */
	leds_update_status();

/* Initialize the Notes that are Enabled as Blue */
	for (int i = 0; i < 16; i++){
  402b28:	3201      	adds	r2, #1
  402b2a:	3106      	adds	r1, #6
  402b2c:	2a10      	cmp	r2, #16
  402b2e:	f47f af7a 	bne.w	402a26 <leds_update_cursor+0x32>
  402b32:	9e01      	ldr	r6, [sp, #4]
  402b34:	4a46      	ldr	r2, [pc, #280]	; (402c50 <leds_update_cursor+0x25c>)
  402b36:	7013      	strb	r3, [r2, #0]
				}
			}
	}

/*check if page being displayed is the current page being output to synth before updating cursor*/
	if (curr_page == display_page){
  402b38:	4b46      	ldr	r3, [pc, #280]	; (402c54 <leds_update_cursor+0x260>)
  402b3a:	781a      	ldrb	r2, [r3, #0]
  402b3c:	4b46      	ldr	r3, [pc, #280]	; (402c58 <leds_update_cursor+0x264>)
  402b3e:	781b      	ldrb	r3, [r3, #0]
  402b40:	429a      	cmp	r2, r3
  402b42:	d16c      	bne.n	402c1e <leds_update_cursor+0x22a>
		/* Update Cursor to correct position */
			if ( (curr_step >= 0) && (curr_step < 4) ){
  402b44:	2e03      	cmp	r6, #3
  402b46:	d814      	bhi.n	402b72 <leds_update_cursor+0x17e>
				offset = (curr_step)* 3;
  402b48:	eb06 0646 	add.w	r6, r6, r6, lsl #1
  402b4c:	b2f3      	uxtb	r3, r6
  402b4e:	4a43      	ldr	r2, [pc, #268]	; (402c5c <leds_update_cursor+0x268>)
  402b50:	7013      	strb	r3, [r2, #0]
// 					leds_data_4[9] = 0xFFFF;
// 					leds_data_4[10] = 0x0FFF;
// 					leds_data_4[11] = 0x0000;
// 				}
// 				else{
					leds_data_1[offset] = cursor_led_data1;
  402b52:	4a39      	ldr	r2, [pc, #228]	; (402c38 <leds_update_cursor+0x244>)
  402b54:	4942      	ldr	r1, [pc, #264]	; (402c60 <leds_update_cursor+0x26c>)
  402b56:	8809      	ldrh	r1, [r1, #0]
  402b58:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					leds_data_1[offset+1] = cursor_led_data2;
  402b5c:	1c59      	adds	r1, r3, #1
  402b5e:	4841      	ldr	r0, [pc, #260]	; (402c64 <leds_update_cursor+0x270>)
  402b60:	8800      	ldrh	r0, [r0, #0]
  402b62:	f822 0011 	strh.w	r0, [r2, r1, lsl #1]
					leds_data_1[offset+2] = cursor_led_data3;
  402b66:	3302      	adds	r3, #2
  402b68:	493f      	ldr	r1, [pc, #252]	; (402c68 <leds_update_cursor+0x274>)
  402b6a:	8809      	ldrh	r1, [r1, #0]
  402b6c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  402b70:	e055      	b.n	402c1e <leds_update_cursor+0x22a>
/*				}*/
			}
			else if ( (curr_step >= 4) && (curr_step < 8) ){
  402b72:	1f33      	subs	r3, r6, #4
  402b74:	b2db      	uxtb	r3, r3
  402b76:	2b03      	cmp	r3, #3
  402b78:	d815      	bhi.n	402ba6 <leds_update_cursor+0x1b2>
				offset = (curr_step % 4)*3;
  402b7a:	f006 0603 	and.w	r6, r6, #3
  402b7e:	eb06 0646 	add.w	r6, r6, r6, lsl #1
  402b82:	4b36      	ldr	r3, [pc, #216]	; (402c5c <leds_update_cursor+0x268>)
  402b84:	701e      	strb	r6, [r3, #0]
// 					leds_data_1[9] = 0xFFFF;
// 					leds_data_1[10] = 0x0FFF;
// 					leds_data_1[11] = 0x0000;
// 				}
// 				else{
					leds_data_2[offset] = cursor_led_data1;
  402b86:	4b30      	ldr	r3, [pc, #192]	; (402c48 <leds_update_cursor+0x254>)
  402b88:	4a35      	ldr	r2, [pc, #212]	; (402c60 <leds_update_cursor+0x26c>)
  402b8a:	8812      	ldrh	r2, [r2, #0]
  402b8c:	f823 2016 	strh.w	r2, [r3, r6, lsl #1]
					leds_data_2[offset+1] = cursor_led_data2;
  402b90:	1c72      	adds	r2, r6, #1
  402b92:	4934      	ldr	r1, [pc, #208]	; (402c64 <leds_update_cursor+0x270>)
  402b94:	8809      	ldrh	r1, [r1, #0]
  402b96:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
					leds_data_2[offset+2] = cursor_led_data3;
  402b9a:	3602      	adds	r6, #2
  402b9c:	4a32      	ldr	r2, [pc, #200]	; (402c68 <leds_update_cursor+0x274>)
  402b9e:	8812      	ldrh	r2, [r2, #0]
  402ba0:	f823 2016 	strh.w	r2, [r3, r6, lsl #1]
  402ba4:	e03b      	b.n	402c1e <leds_update_cursor+0x22a>
/*				}*/
			}
			else if ( (curr_step >= 8) && (curr_step < 12) ){
  402ba6:	f1a6 0308 	sub.w	r3, r6, #8
  402baa:	b2db      	uxtb	r3, r3
  402bac:	2b03      	cmp	r3, #3
  402bae:	d815      	bhi.n	402bdc <leds_update_cursor+0x1e8>
				offset = (curr_step % 8)*3;
  402bb0:	f006 0607 	and.w	r6, r6, #7
  402bb4:	eb06 0646 	add.w	r6, r6, r6, lsl #1
  402bb8:	4b28      	ldr	r3, [pc, #160]	; (402c5c <leds_update_cursor+0x268>)
  402bba:	701e      	strb	r6, [r3, #0]
// 					leds_data_2[9] = 0xFFFF;
// 					leds_data_2[10] = 0x0FFF;
// 					leds_data_2[11] = 0x0000;
// 				}
//				else{
					leds_data_3[offset] = cursor_led_data1;
  402bbc:	4b2b      	ldr	r3, [pc, #172]	; (402c6c <leds_update_cursor+0x278>)
  402bbe:	4a28      	ldr	r2, [pc, #160]	; (402c60 <leds_update_cursor+0x26c>)
  402bc0:	8812      	ldrh	r2, [r2, #0]
  402bc2:	f823 2016 	strh.w	r2, [r3, r6, lsl #1]
					leds_data_3[offset+1] = cursor_led_data2;
  402bc6:	1c72      	adds	r2, r6, #1
  402bc8:	4926      	ldr	r1, [pc, #152]	; (402c64 <leds_update_cursor+0x270>)
  402bca:	8809      	ldrh	r1, [r1, #0]
  402bcc:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
					leds_data_3[offset+2] = cursor_led_data3;
  402bd0:	3602      	adds	r6, #2
  402bd2:	4a25      	ldr	r2, [pc, #148]	; (402c68 <leds_update_cursor+0x274>)
  402bd4:	8812      	ldrh	r2, [r2, #0]
  402bd6:	f823 2016 	strh.w	r2, [r3, r6, lsl #1]
  402bda:	e020      	b.n	402c1e <leds_update_cursor+0x22a>
/*				}*/
			}
			else if ( (curr_step >= 12) && (curr_step < 16) ){
  402bdc:	f1a6 030c 	sub.w	r3, r6, #12
  402be0:	b2db      	uxtb	r3, r3
  402be2:	2b03      	cmp	r3, #3
  402be4:	d81b      	bhi.n	402c1e <leds_update_cursor+0x22a>
				offset = (curr_step % 12)*3;
  402be6:	4b22      	ldr	r3, [pc, #136]	; (402c70 <leds_update_cursor+0x27c>)
  402be8:	fba3 2306 	umull	r2, r3, r3, r6
  402bec:	08db      	lsrs	r3, r3, #3
  402bee:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  402bf2:	eba6 0683 	sub.w	r6, r6, r3, lsl #2
  402bf6:	eb06 0646 	add.w	r6, r6, r6, lsl #1
  402bfa:	b2f3      	uxtb	r3, r6
  402bfc:	4a17      	ldr	r2, [pc, #92]	; (402c5c <leds_update_cursor+0x268>)
  402bfe:	7013      	strb	r3, [r2, #0]
// 					leds_data_3[9] = 0xFFFF;
// 					leds_data_3[10] = 0x0FFF;
// 					leds_data_3[11] = 0x0000;
// 				}
/*				else{*/
					leds_data_4[offset] = cursor_led_data1;
  402c00:	4a0f      	ldr	r2, [pc, #60]	; (402c40 <leds_update_cursor+0x24c>)
  402c02:	4917      	ldr	r1, [pc, #92]	; (402c60 <leds_update_cursor+0x26c>)
  402c04:	8809      	ldrh	r1, [r1, #0]
  402c06:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					leds_data_4[offset+1] = cursor_led_data2;
  402c0a:	1c59      	adds	r1, r3, #1
  402c0c:	4815      	ldr	r0, [pc, #84]	; (402c64 <leds_update_cursor+0x270>)
  402c0e:	8800      	ldrh	r0, [r0, #0]
  402c10:	f822 0011 	strh.w	r0, [r2, r1, lsl #1]
					leds_data_4[offset+2] = cursor_led_data3;
  402c14:	3302      	adds	r3, #2
  402c16:	4914      	ldr	r1, [pc, #80]	; (402c68 <leds_update_cursor+0x274>)
  402c18:	8809      	ldrh	r1, [r1, #0]
  402c1a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
/*				}*/
			}
	}

	leds_update_display();
  402c1e:	4b15      	ldr	r3, [pc, #84]	; (402c74 <leds_update_cursor+0x280>)
  402c20:	4798      	blx	r3
}
  402c22:	b003      	add	sp, #12
  402c24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402c28:	00402765 	.word	0x00402765
  402c2c:	2000095c 	.word	0x2000095c
  402c30:	2000097a 	.word	0x2000097a
  402c34:	2000098c 	.word	0x2000098c
  402c38:	200008ec 	.word	0x200008ec
  402c3c:	200008ac 	.word	0x200008ac
  402c40:	20000934 	.word	0x20000934
  402c44:	80000003 	.word	0x80000003
  402c48:	20000904 	.word	0x20000904
  402c4c:	80000007 	.word	0x80000007
  402c50:	200089b8 	.word	0x200089b8
  402c54:	20000992 	.word	0x20000992
  402c58:	20000984 	.word	0x20000984
  402c5c:	200089b9 	.word	0x200089b9
  402c60:	2000095a 	.word	0x2000095a
  402c64:	20000978 	.word	0x20000978
  402c68:	20000990 	.word	0x20000990
  402c6c:	2000091c 	.word	0x2000091c
  402c70:	aaaaaaab 	.word	0xaaaaaaab
  402c74:	0040278d 	.word	0x0040278d
  402c78:	2aaaaaab 	.word	0x2aaaaaab

00402c7c <led_toggle>:

int leds_status_get(uint8_t curr_step){
	return leds_status[curr_step];
}

void led_toggle(uint8_t top_row, uint8_t bottom_row){
  402c7c:	b508      	push	{r3, lr}

	switch(bottom_row) {
  402c7e:	29ef      	cmp	r1, #239	; 0xef
  402c80:	d031      	beq.n	402ce6 <led_toggle+0x6a>
  402c82:	d806      	bhi.n	402c92 <led_toggle+0x16>
  402c84:	29bf      	cmp	r1, #191	; 0xbf
  402c86:	d03e      	beq.n	402d06 <led_toggle+0x8a>
  402c88:	29df      	cmp	r1, #223	; 0xdf
  402c8a:	d034      	beq.n	402cf6 <led_toggle+0x7a>
  402c8c:	297f      	cmp	r1, #127	; 0x7f
  402c8e:	d149      	bne.n	402d24 <led_toggle+0xa8>
  402c90:	e041      	b.n	402d16 <led_toggle+0x9a>
  402c92:	29fb      	cmp	r1, #251	; 0xfb
  402c94:	d017      	beq.n	402cc6 <led_toggle+0x4a>
  402c96:	d802      	bhi.n	402c9e <led_toggle+0x22>
  402c98:	29f7      	cmp	r1, #247	; 0xf7
  402c9a:	d01c      	beq.n	402cd6 <led_toggle+0x5a>
  402c9c:	e042      	b.n	402d24 <led_toggle+0xa8>
  402c9e:	29fd      	cmp	r1, #253	; 0xfd
  402ca0:	d009      	beq.n	402cb6 <led_toggle+0x3a>
  402ca2:	29fe      	cmp	r1, #254	; 0xfe
  402ca4:	d13e      	bne.n	402d24 <led_toggle+0xa8>
		case 254 :
			leds_status[15] = abs(leds_status[15] - 1);
  402ca6:	4a4f      	ldr	r2, [pc, #316]	; (402de4 <led_toggle+0x168>)
  402ca8:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
  402caa:	3b01      	subs	r3, #1
  402cac:	2b00      	cmp	r3, #0
  402cae:	bfb8      	it	lt
  402cb0:	425b      	neglt	r3, r3
  402cb2:	63d3      	str	r3, [r2, #60]	; 0x3c
			break;
  402cb4:	e036      	b.n	402d24 <led_toggle+0xa8>
		case 253 :
			leds_status[14] = abs(leds_status[14] - 1);
  402cb6:	4a4b      	ldr	r2, [pc, #300]	; (402de4 <led_toggle+0x168>)
  402cb8:	6b93      	ldr	r3, [r2, #56]	; 0x38
  402cba:	3b01      	subs	r3, #1
  402cbc:	2b00      	cmp	r3, #0
  402cbe:	bfb8      	it	lt
  402cc0:	425b      	neglt	r3, r3
  402cc2:	6393      	str	r3, [r2, #56]	; 0x38
			break;
  402cc4:	e02e      	b.n	402d24 <led_toggle+0xa8>
		case 251 :
			leds_status[13] = abs(leds_status[13] - 1);
  402cc6:	4a47      	ldr	r2, [pc, #284]	; (402de4 <led_toggle+0x168>)
  402cc8:	6b53      	ldr	r3, [r2, #52]	; 0x34
  402cca:	3b01      	subs	r3, #1
  402ccc:	2b00      	cmp	r3, #0
  402cce:	bfb8      	it	lt
  402cd0:	425b      	neglt	r3, r3
  402cd2:	6353      	str	r3, [r2, #52]	; 0x34
			break;
  402cd4:	e026      	b.n	402d24 <led_toggle+0xa8>
		case 247 :
			leds_status[12] = abs(leds_status[12] - 1);
  402cd6:	4a43      	ldr	r2, [pc, #268]	; (402de4 <led_toggle+0x168>)
  402cd8:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402cda:	3b01      	subs	r3, #1
  402cdc:	2b00      	cmp	r3, #0
  402cde:	bfb8      	it	lt
  402ce0:	425b      	neglt	r3, r3
  402ce2:	6313      	str	r3, [r2, #48]	; 0x30
			break;
  402ce4:	e01e      	b.n	402d24 <led_toggle+0xa8>
		case 239 :
			leds_status[11] = abs(leds_status[11] - 1);
  402ce6:	4a3f      	ldr	r2, [pc, #252]	; (402de4 <led_toggle+0x168>)
  402ce8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
  402cea:	3b01      	subs	r3, #1
  402cec:	2b00      	cmp	r3, #0
  402cee:	bfb8      	it	lt
  402cf0:	425b      	neglt	r3, r3
  402cf2:	62d3      	str	r3, [r2, #44]	; 0x2c
			break;
  402cf4:	e016      	b.n	402d24 <led_toggle+0xa8>
		case 223 :
			leds_status[10] = abs(leds_status[10] - 1);
  402cf6:	4a3b      	ldr	r2, [pc, #236]	; (402de4 <led_toggle+0x168>)
  402cf8:	6a93      	ldr	r3, [r2, #40]	; 0x28
  402cfa:	3b01      	subs	r3, #1
  402cfc:	2b00      	cmp	r3, #0
  402cfe:	bfb8      	it	lt
  402d00:	425b      	neglt	r3, r3
  402d02:	6293      	str	r3, [r2, #40]	; 0x28
			break;
  402d04:	e00e      	b.n	402d24 <led_toggle+0xa8>
		case 191 :
			leds_status[9] = abs(leds_status[9] - 1);
  402d06:	4a37      	ldr	r2, [pc, #220]	; (402de4 <led_toggle+0x168>)
  402d08:	6a53      	ldr	r3, [r2, #36]	; 0x24
  402d0a:	3b01      	subs	r3, #1
  402d0c:	2b00      	cmp	r3, #0
  402d0e:	bfb8      	it	lt
  402d10:	425b      	neglt	r3, r3
  402d12:	6253      	str	r3, [r2, #36]	; 0x24
			break;
  402d14:	e006      	b.n	402d24 <led_toggle+0xa8>
		case 127 :
			leds_status[8] = abs(leds_status[8] - 1);
  402d16:	4a33      	ldr	r2, [pc, #204]	; (402de4 <led_toggle+0x168>)
  402d18:	6a13      	ldr	r3, [r2, #32]
  402d1a:	3b01      	subs	r3, #1
  402d1c:	2b00      	cmp	r3, #0
  402d1e:	bfb8      	it	lt
  402d20:	425b      	neglt	r3, r3
  402d22:	6213      	str	r3, [r2, #32]
			break;
		default :
			break;
	}

	switch(top_row) {
  402d24:	28ef      	cmp	r0, #239	; 0xef
  402d26:	d031      	beq.n	402d8c <led_toggle+0x110>
  402d28:	d806      	bhi.n	402d38 <led_toggle+0xbc>
  402d2a:	28bf      	cmp	r0, #191	; 0xbf
  402d2c:	d03e      	beq.n	402dac <led_toggle+0x130>
  402d2e:	28df      	cmp	r0, #223	; 0xdf
  402d30:	d034      	beq.n	402d9c <led_toggle+0x120>
  402d32:	287f      	cmp	r0, #127	; 0x7f
  402d34:	d149      	bne.n	402dca <led_toggle+0x14e>
  402d36:	e041      	b.n	402dbc <led_toggle+0x140>
  402d38:	28fb      	cmp	r0, #251	; 0xfb
  402d3a:	d017      	beq.n	402d6c <led_toggle+0xf0>
  402d3c:	d802      	bhi.n	402d44 <led_toggle+0xc8>
  402d3e:	28f7      	cmp	r0, #247	; 0xf7
  402d40:	d01c      	beq.n	402d7c <led_toggle+0x100>
  402d42:	e042      	b.n	402dca <led_toggle+0x14e>
  402d44:	28fd      	cmp	r0, #253	; 0xfd
  402d46:	d009      	beq.n	402d5c <led_toggle+0xe0>
  402d48:	28fe      	cmp	r0, #254	; 0xfe
  402d4a:	d13e      	bne.n	402dca <led_toggle+0x14e>
		case 254 :
			leds_status[7] = abs(leds_status[7] - 1);
  402d4c:	4a25      	ldr	r2, [pc, #148]	; (402de4 <led_toggle+0x168>)
  402d4e:	69d3      	ldr	r3, [r2, #28]
  402d50:	3b01      	subs	r3, #1
  402d52:	2b00      	cmp	r3, #0
  402d54:	bfb8      	it	lt
  402d56:	425b      	neglt	r3, r3
  402d58:	61d3      	str	r3, [r2, #28]
			break;
  402d5a:	e036      	b.n	402dca <led_toggle+0x14e>
		case 253 :
			leds_status[6] = abs(leds_status[6] - 1);
  402d5c:	4a21      	ldr	r2, [pc, #132]	; (402de4 <led_toggle+0x168>)
  402d5e:	6993      	ldr	r3, [r2, #24]
  402d60:	3b01      	subs	r3, #1
  402d62:	2b00      	cmp	r3, #0
  402d64:	bfb8      	it	lt
  402d66:	425b      	neglt	r3, r3
  402d68:	6193      	str	r3, [r2, #24]
			break;
  402d6a:	e02e      	b.n	402dca <led_toggle+0x14e>
		case 251 :
			leds_status[5] = abs(leds_status[5] - 1);
  402d6c:	4a1d      	ldr	r2, [pc, #116]	; (402de4 <led_toggle+0x168>)
  402d6e:	6953      	ldr	r3, [r2, #20]
  402d70:	3b01      	subs	r3, #1
  402d72:	2b00      	cmp	r3, #0
  402d74:	bfb8      	it	lt
  402d76:	425b      	neglt	r3, r3
  402d78:	6153      	str	r3, [r2, #20]
			break;
  402d7a:	e026      	b.n	402dca <led_toggle+0x14e>
		case 247 :
			leds_status[4] = abs(leds_status[4] - 1);
  402d7c:	4a19      	ldr	r2, [pc, #100]	; (402de4 <led_toggle+0x168>)
  402d7e:	6913      	ldr	r3, [r2, #16]
  402d80:	3b01      	subs	r3, #1
  402d82:	2b00      	cmp	r3, #0
  402d84:	bfb8      	it	lt
  402d86:	425b      	neglt	r3, r3
  402d88:	6113      	str	r3, [r2, #16]
			break;
  402d8a:	e01e      	b.n	402dca <led_toggle+0x14e>
		case 239 :
			leds_status[3] = abs(leds_status[3] - 1);
  402d8c:	4a15      	ldr	r2, [pc, #84]	; (402de4 <led_toggle+0x168>)
  402d8e:	68d3      	ldr	r3, [r2, #12]
  402d90:	3b01      	subs	r3, #1
  402d92:	2b00      	cmp	r3, #0
  402d94:	bfb8      	it	lt
  402d96:	425b      	neglt	r3, r3
  402d98:	60d3      	str	r3, [r2, #12]
			break;
  402d9a:	e016      	b.n	402dca <led_toggle+0x14e>
		case 223 :
			leds_status[2] = abs(leds_status[2] - 1);
  402d9c:	4a11      	ldr	r2, [pc, #68]	; (402de4 <led_toggle+0x168>)
  402d9e:	6893      	ldr	r3, [r2, #8]
  402da0:	3b01      	subs	r3, #1
  402da2:	2b00      	cmp	r3, #0
  402da4:	bfb8      	it	lt
  402da6:	425b      	neglt	r3, r3
  402da8:	6093      	str	r3, [r2, #8]
			break;
  402daa:	e00e      	b.n	402dca <led_toggle+0x14e>
		case 191 :
			leds_status[1] = abs(leds_status[1] - 1);
  402dac:	4a0d      	ldr	r2, [pc, #52]	; (402de4 <led_toggle+0x168>)
  402dae:	6853      	ldr	r3, [r2, #4]
  402db0:	3b01      	subs	r3, #1
  402db2:	2b00      	cmp	r3, #0
  402db4:	bfb8      	it	lt
  402db6:	425b      	neglt	r3, r3
  402db8:	6053      	str	r3, [r2, #4]
			break;
  402dba:	e006      	b.n	402dca <led_toggle+0x14e>
		case 127 :
			leds_status[0] = abs(leds_status[0] - 1);
  402dbc:	4a09      	ldr	r2, [pc, #36]	; (402de4 <led_toggle+0x168>)
  402dbe:	6813      	ldr	r3, [r2, #0]
  402dc0:	3b01      	subs	r3, #1
  402dc2:	2b00      	cmp	r3, #0
  402dc4:	bfb8      	it	lt
  402dc6:	425b      	neglt	r3, r3
  402dc8:	6013      	str	r3, [r2, #0]
		default : 
			break;
	}

	/* match note status to display status if changed*/
	notes_status_set(display_page, leds_status);
  402dca:	4906      	ldr	r1, [pc, #24]	; (402de4 <led_toggle+0x168>)
  402dcc:	4b06      	ldr	r3, [pc, #24]	; (402de8 <led_toggle+0x16c>)
  402dce:	7818      	ldrb	r0, [r3, #0]
  402dd0:	4b06      	ldr	r3, [pc, #24]	; (402dec <led_toggle+0x170>)
  402dd2:	4798      	blx	r3
	
	SPI_led_init();
  402dd4:	4b06      	ldr	r3, [pc, #24]	; (402df0 <led_toggle+0x174>)
  402dd6:	4798      	blx	r3
	leds_update_cursor(curr_step);
  402dd8:	4b06      	ldr	r3, [pc, #24]	; (402df4 <led_toggle+0x178>)
  402dda:	7818      	ldrb	r0, [r3, #0]
  402ddc:	4b06      	ldr	r3, [pc, #24]	; (402df8 <led_toggle+0x17c>)
  402dde:	4798      	blx	r3
  402de0:	bd08      	pop	{r3, pc}
  402de2:	bf00      	nop
  402de4:	200008ac 	.word	0x200008ac
  402de8:	20000984 	.word	0x20000984
  402dec:	00403e79 	.word	0x00403e79
  402df0:	00403ba1 	.word	0x00403ba1
  402df4:	2000097c 	.word	0x2000097c
  402df8:	004029f5 	.word	0x004029f5

00402dfc <res_to_int>:


}

uint8_t res_to_int(uint8_t res){
	if (res == 0){
  402dfc:	b1b0      	cbz	r0, 402e2c <res_to_int+0x30>
		return 1;
	}
	else if (res == 1){
  402dfe:	2801      	cmp	r0, #1
  402e00:	d016      	beq.n	402e30 <res_to_int+0x34>
		return 2;
	}
	else if (res == 2){
  402e02:	2802      	cmp	r0, #2
  402e04:	d016      	beq.n	402e34 <res_to_int+0x38>
		return 4;
	}
	else if (res == 3){
  402e06:	2803      	cmp	r0, #3
  402e08:	d016      	beq.n	402e38 <res_to_int+0x3c>
		return 6;
	}
	else if (res == 4){
  402e0a:	2804      	cmp	r0, #4
  402e0c:	d016      	beq.n	402e3c <res_to_int+0x40>
		return 8;
	}
	else if (res == 5){
  402e0e:	2805      	cmp	r0, #5
  402e10:	d016      	beq.n	402e40 <res_to_int+0x44>
		return 12;
	}
	else if (res == 6){
  402e12:	2806      	cmp	r0, #6
  402e14:	d016      	beq.n	402e44 <res_to_int+0x48>
		return 16;
	}
	else if (res == 7){
  402e16:	2807      	cmp	r0, #7
  402e18:	d016      	beq.n	402e48 <res_to_int+0x4c>
		return 24;
	}
	else if (res == 8){
  402e1a:	2808      	cmp	r0, #8
  402e1c:	d016      	beq.n	402e4c <res_to_int+0x50>
		return 32;
	}
	else if(res == 9) {
  402e1e:	2809      	cmp	r0, #9
  402e20:	d016      	beq.n	402e50 <res_to_int+0x54>
	else if(res == 10) {
		return 64;
	}

	//default
	return 1;
  402e22:	280a      	cmp	r0, #10
  402e24:	bf0c      	ite	eq
  402e26:	2040      	moveq	r0, #64	; 0x40
  402e28:	2001      	movne	r0, #1
  402e2a:	4770      	bx	lr

}

uint8_t res_to_int(uint8_t res){
	if (res == 0){
		return 1;
  402e2c:	2001      	movs	r0, #1
  402e2e:	4770      	bx	lr
	}
	else if (res == 1){
		return 2;
  402e30:	2002      	movs	r0, #2
  402e32:	4770      	bx	lr
	}
	else if (res == 2){
		return 4;
  402e34:	2004      	movs	r0, #4
  402e36:	4770      	bx	lr
	}
	else if (res == 3){
		return 6;
  402e38:	2006      	movs	r0, #6
  402e3a:	4770      	bx	lr
	}
	else if (res == 4){
		return 8;
  402e3c:	2008      	movs	r0, #8
  402e3e:	4770      	bx	lr
	}
	else if (res == 5){
		return 12;
  402e40:	200c      	movs	r0, #12
  402e42:	4770      	bx	lr
	}
	else if (res == 6){
		return 16;
  402e44:	2010      	movs	r0, #16
  402e46:	4770      	bx	lr
	}
	else if (res == 7){
		return 24;
  402e48:	2018      	movs	r0, #24
  402e4a:	4770      	bx	lr
	}
	else if (res == 8){
		return 32;
  402e4c:	2020      	movs	r0, #32
  402e4e:	4770      	bx	lr
	}
	else if(res == 9) {
		return 48;
  402e50:	2030      	movs	r0, #48	; 0x30
		return 64;
	}

	//default
	return 1;
}
  402e52:	4770      	bx	lr

00402e54 <res_inc>:

void res_inc(){
	if (resolution < 10){
  402e54:	4b03      	ldr	r3, [pc, #12]	; (402e64 <res_inc+0x10>)
  402e56:	681b      	ldr	r3, [r3, #0]
  402e58:	2b09      	cmp	r3, #9
  402e5a:	dc02      	bgt.n	402e62 <res_inc+0xe>
		resolution++;
  402e5c:	3301      	adds	r3, #1
  402e5e:	4a01      	ldr	r2, [pc, #4]	; (402e64 <res_inc+0x10>)
  402e60:	6013      	str	r3, [r2, #0]
  402e62:	4770      	bx	lr
  402e64:	20000964 	.word	0x20000964

00402e68 <res_dec>:
	}
}

void res_dec(){
	if (resolution > 0){
  402e68:	4b03      	ldr	r3, [pc, #12]	; (402e78 <res_dec+0x10>)
  402e6a:	681b      	ldr	r3, [r3, #0]
  402e6c:	2b00      	cmp	r3, #0
  402e6e:	dd02      	ble.n	402e76 <res_dec+0xe>
		resolution--;
  402e70:	3b01      	subs	r3, #1
  402e72:	4a01      	ldr	r2, [pc, #4]	; (402e78 <res_dec+0x10>)
  402e74:	6013      	str	r3, [r2, #0]
  402e76:	4770      	bx	lr
  402e78:	20000964 	.word	0x20000964

00402e7c <bpm_inc>:
	}
}

 void bpm_inc(){
	if ( (bpm + bpm_adjust) <= 999){
  402e7c:	4b05      	ldr	r3, [pc, #20]	; (402e94 <bpm_inc+0x18>)
  402e7e:	881a      	ldrh	r2, [r3, #0]
  402e80:	4b05      	ldr	r3, [pc, #20]	; (402e98 <bpm_inc+0x1c>)
  402e82:	781b      	ldrb	r3, [r3, #0]
  402e84:	18d1      	adds	r1, r2, r3
  402e86:	f5b1 7f7a 	cmp.w	r1, #1000	; 0x3e8
  402e8a:	da01      	bge.n	402e90 <bpm_inc+0x14>
		bpm = bpm + bpm_adjust;
  402e8c:	4a01      	ldr	r2, [pc, #4]	; (402e94 <bpm_inc+0x18>)
  402e8e:	8011      	strh	r1, [r2, #0]
  402e90:	4770      	bx	lr
  402e92:	bf00      	nop
  402e94:	2000099a 	.word	0x2000099a
  402e98:	20000996 	.word	0x20000996

00402e9c <bpm_dec>:
	}
}

 void bpm_dec(){
	if ( (bpm - bpm_adjust) >= 20){
  402e9c:	4b04      	ldr	r3, [pc, #16]	; (402eb0 <bpm_dec+0x14>)
  402e9e:	881b      	ldrh	r3, [r3, #0]
  402ea0:	4a04      	ldr	r2, [pc, #16]	; (402eb4 <bpm_dec+0x18>)
  402ea2:	7812      	ldrb	r2, [r2, #0]
  402ea4:	1a99      	subs	r1, r3, r2
  402ea6:	2913      	cmp	r1, #19
  402ea8:	dd01      	ble.n	402eae <bpm_dec+0x12>
		bpm = bpm - bpm_adjust;
  402eaa:	4a01      	ldr	r2, [pc, #4]	; (402eb0 <bpm_dec+0x14>)
  402eac:	8011      	strh	r1, [r2, #0]
  402eae:	4770      	bx	lr
  402eb0:	2000099a 	.word	0x2000099a
  402eb4:	20000996 	.word	0x20000996

00402eb8 <bpm_toggle>:
	}
}

void bpm_toggle(){
	if (bpm_adjust == 1){
  402eb8:	4b0c      	ldr	r3, [pc, #48]	; (402eec <bpm_toggle+0x34>)
  402eba:	781b      	ldrb	r3, [r3, #0]
  402ebc:	2b01      	cmp	r3, #1
  402ebe:	d103      	bne.n	402ec8 <bpm_toggle+0x10>
		bpm_adjust = 5;
  402ec0:	2205      	movs	r2, #5
  402ec2:	4b0a      	ldr	r3, [pc, #40]	; (402eec <bpm_toggle+0x34>)
  402ec4:	701a      	strb	r2, [r3, #0]
  402ec6:	4770      	bx	lr
	}
	else if (bpm_adjust == 5){
  402ec8:	2b05      	cmp	r3, #5
  402eca:	d103      	bne.n	402ed4 <bpm_toggle+0x1c>
		bpm_adjust = 10;
  402ecc:	220a      	movs	r2, #10
  402ece:	4b07      	ldr	r3, [pc, #28]	; (402eec <bpm_toggle+0x34>)
  402ed0:	701a      	strb	r2, [r3, #0]
  402ed2:	4770      	bx	lr
	}
	else if (bpm_adjust == 10){
  402ed4:	2b0a      	cmp	r3, #10
  402ed6:	d103      	bne.n	402ee0 <bpm_toggle+0x28>
		bpm_adjust = 20;
  402ed8:	2214      	movs	r2, #20
  402eda:	4b04      	ldr	r3, [pc, #16]	; (402eec <bpm_toggle+0x34>)
  402edc:	701a      	strb	r2, [r3, #0]
  402ede:	4770      	bx	lr
	}
	else if (bpm_adjust == 20){
  402ee0:	2b14      	cmp	r3, #20
  402ee2:	d102      	bne.n	402eea <bpm_toggle+0x32>
		bpm_adjust = 1;
  402ee4:	2201      	movs	r2, #1
  402ee6:	4b01      	ldr	r3, [pc, #4]	; (402eec <bpm_toggle+0x34>)
  402ee8:	701a      	strb	r2, [r3, #0]
  402eea:	4770      	bx	lr
  402eec:	20000996 	.word	0x20000996

00402ef0 <display_page_inc>:
	}
}

 void display_page_inc(){
	if (display_page < 15){
  402ef0:	4b03      	ldr	r3, [pc, #12]	; (402f00 <display_page_inc+0x10>)
  402ef2:	781b      	ldrb	r3, [r3, #0]
  402ef4:	2b0e      	cmp	r3, #14
  402ef6:	d802      	bhi.n	402efe <display_page_inc+0xe>
		display_page++;
  402ef8:	3301      	adds	r3, #1
  402efa:	4a01      	ldr	r2, [pc, #4]	; (402f00 <display_page_inc+0x10>)
  402efc:	7013      	strb	r3, [r2, #0]
  402efe:	4770      	bx	lr
  402f00:	20000984 	.word	0x20000984

00402f04 <display_page_dec>:
	}
}

 void display_page_dec(){
	if (display_page > 0){
  402f04:	4b03      	ldr	r3, [pc, #12]	; (402f14 <display_page_dec+0x10>)
  402f06:	781b      	ldrb	r3, [r3, #0]
  402f08:	b113      	cbz	r3, 402f10 <display_page_dec+0xc>
		display_page--;
  402f0a:	3b01      	subs	r3, #1
  402f0c:	4a01      	ldr	r2, [pc, #4]	; (402f14 <display_page_dec+0x10>)
  402f0e:	7013      	strb	r3, [r2, #0]
  402f10:	4770      	bx	lr
  402f12:	bf00      	nop
  402f14:	20000984 	.word	0x20000984

00402f18 <pattern_inc>:
	}
}

 void pattern_inc(){
	  if (curr_pattern < 15){
  402f18:	4b03      	ldr	r3, [pc, #12]	; (402f28 <pattern_inc+0x10>)
  402f1a:	781b      	ldrb	r3, [r3, #0]
  402f1c:	2b0e      	cmp	r3, #14
  402f1e:	d802      	bhi.n	402f26 <pattern_inc+0xe>
		  curr_pattern++;
  402f20:	3301      	adds	r3, #1
  402f22:	4a01      	ldr	r2, [pc, #4]	; (402f28 <pattern_inc+0x10>)
  402f24:	7013      	strb	r3, [r2, #0]
  402f26:	4770      	bx	lr
  402f28:	20000958 	.word	0x20000958

00402f2c <pattern_dec>:
	  }
 }

 void pattern_dec(){
	  if (curr_pattern > 0){
  402f2c:	4b03      	ldr	r3, [pc, #12]	; (402f3c <pattern_dec+0x10>)
  402f2e:	781b      	ldrb	r3, [r3, #0]
  402f30:	b113      	cbz	r3, 402f38 <pattern_dec+0xc>
		  curr_pattern--;
  402f32:	3b01      	subs	r3, #1
  402f34:	4a01      	ldr	r2, [pc, #4]	; (402f3c <pattern_dec+0x10>)
  402f36:	7013      	strb	r3, [r2, #0]
  402f38:	4770      	bx	lr
  402f3a:	bf00      	nop
  402f3c:	20000958 	.word	0x20000958

00402f40 <pattern_up>:
	  }
 }

void pattern_up(uint8_t channel){
	if (curr_pattern_ch[channel] < 15){
  402f40:	4b03      	ldr	r3, [pc, #12]	; (402f50 <pattern_up+0x10>)
  402f42:	5c1b      	ldrb	r3, [r3, r0]
  402f44:	2b0e      	cmp	r3, #14
  402f46:	d802      	bhi.n	402f4e <pattern_up+0xe>
		curr_pattern_ch[channel]++;
  402f48:	3301      	adds	r3, #1
  402f4a:	4a01      	ldr	r2, [pc, #4]	; (402f50 <pattern_up+0x10>)
  402f4c:	5413      	strb	r3, [r2, r0]
  402f4e:	4770      	bx	lr
  402f50:	20000974 	.word	0x20000974

00402f54 <pattern_down>:
	}
}

void pattern_down(uint8_t channel){
	  if (curr_pattern_ch[channel] > 0){
  402f54:	4b03      	ldr	r3, [pc, #12]	; (402f64 <pattern_down+0x10>)
  402f56:	5c1b      	ldrb	r3, [r3, r0]
  402f58:	b113      	cbz	r3, 402f60 <pattern_down+0xc>
		  curr_pattern_ch[channel]--;
  402f5a:	3b01      	subs	r3, #1
  402f5c:	4a01      	ldr	r2, [pc, #4]	; (402f64 <pattern_down+0x10>)
  402f5e:	5413      	strb	r3, [r2, r0]
  402f60:	4770      	bx	lr
  402f62:	bf00      	nop
  402f64:	20000974 	.word	0x20000974

00402f68 <page_loop_inc>:
	  }
}

void page_loop_inc(){
	if (patterns_loop[curr_pattern] < 15){
  402f68:	4b04      	ldr	r3, [pc, #16]	; (402f7c <page_loop_inc+0x14>)
  402f6a:	781a      	ldrb	r2, [r3, #0]
  402f6c:	4b04      	ldr	r3, [pc, #16]	; (402f80 <page_loop_inc+0x18>)
  402f6e:	5c9b      	ldrb	r3, [r3, r2]
  402f70:	2b0e      	cmp	r3, #14
  402f72:	d802      	bhi.n	402f7a <page_loop_inc+0x12>
		patterns_loop[curr_pattern]++;
  402f74:	3301      	adds	r3, #1
  402f76:	4902      	ldr	r1, [pc, #8]	; (402f80 <page_loop_inc+0x18>)
  402f78:	548b      	strb	r3, [r1, r2]
  402f7a:	4770      	bx	lr
  402f7c:	20000958 	.word	0x20000958
  402f80:	200009a8 	.word	0x200009a8

00402f84 <page_loop_dec>:
	}
}

void page_loop_dec(){
	if (patterns_loop[curr_pattern] > 0){
  402f84:	4b04      	ldr	r3, [pc, #16]	; (402f98 <page_loop_dec+0x14>)
  402f86:	781a      	ldrb	r2, [r3, #0]
  402f88:	4b04      	ldr	r3, [pc, #16]	; (402f9c <page_loop_dec+0x18>)
  402f8a:	5c9b      	ldrb	r3, [r3, r2]
  402f8c:	b113      	cbz	r3, 402f94 <page_loop_dec+0x10>
		patterns_loop[curr_pattern]--;
  402f8e:	3b01      	subs	r3, #1
  402f90:	4902      	ldr	r1, [pc, #8]	; (402f9c <page_loop_dec+0x18>)
  402f92:	548b      	strb	r3, [r1, r2]
  402f94:	4770      	bx	lr
  402f96:	bf00      	nop
  402f98:	20000958 	.word	0x20000958
  402f9c:	200009a8 	.word	0x200009a8

00402fa0 <control_direction>:
 #include "dac.h"
 #include "flash_mem.h"
 #include "leds.h"


 void control_direction(uint32_t A, uint32_t B, uint8_t aux_control){
  402fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	//read Encoder input A
	bool A_in = REG_PIOA_PDSR & A;
  402fa2:	4b8b      	ldr	r3, [pc, #556]	; (4031d0 <control_direction+0x230>)
  402fa4:	681f      	ldr	r7, [r3, #0]
	//read Encoder input B
	bool B_in = REG_PIOA_PDSR & B;
  402fa6:	681d      	ldr	r5, [r3, #0]
	
	A_seq = A_seq << 1;
	A_seq |= A_in;
	
	B_seq = B_seq << 1;
  402fa8:	4c8a      	ldr	r4, [pc, #552]	; (4031d4 <control_direction+0x234>)
	B_seq |= B_in;
  402faa:	7823      	ldrb	r3, [r4, #0]
  402fac:	420d      	tst	r5, r1
  402fae:	bf14      	ite	ne
  402fb0:	2101      	movne	r1, #1
  402fb2:	2100      	moveq	r1, #0
  402fb4:	ea41 0143 	orr.w	r1, r1, r3, lsl #1
	//read Encoder input A
	bool A_in = REG_PIOA_PDSR & A;
	//read Encoder input B
	bool B_in = REG_PIOA_PDSR & B;
	
	A_seq = A_seq << 1;
  402fb8:	4d87      	ldr	r5, [pc, #540]	; (4031d8 <control_direction+0x238>)
	A_seq |= A_in;
	
	B_seq = B_seq << 1;
	B_seq |= B_in;
	
	A_seq &= 0b00001111;
  402fba:	782e      	ldrb	r6, [r5, #0]
  402fbc:	4207      	tst	r7, r0
  402fbe:	bf14      	ite	ne
  402fc0:	2301      	movne	r3, #1
  402fc2:	2300      	moveq	r3, #0
  402fc4:	ea43 0346 	orr.w	r3, r3, r6, lsl #1
  402fc8:	f003 030f 	and.w	r3, r3, #15
  402fcc:	702b      	strb	r3, [r5, #0]
	B_seq &= 0b00001111;
  402fce:	f001 010f 	and.w	r1, r1, #15
  402fd2:	7021      	strb	r1, [r4, #0]


	//return true if turned right
	if ((A_seq == 0b00001001) && (B_seq == 0b00000011)){
  402fd4:	2b09      	cmp	r3, #9
  402fd6:	f040 808d 	bne.w	4030f4 <control_direction+0x154>
  402fda:	2903      	cmp	r1, #3
  402fdc:	f040 8162 	bne.w	4032a4 <control_direction+0x304>
		if (aux_control == 0){
  402fe0:	b94a      	cbnz	r2, 402ff6 <control_direction+0x56>
			bpm_inc();
  402fe2:	4b7e      	ldr	r3, [pc, #504]	; (4031dc <control_direction+0x23c>)
  402fe4:	4798      	blx	r3
			update_timers(bpm);
  402fe6:	4c7e      	ldr	r4, [pc, #504]	; (4031e0 <control_direction+0x240>)
  402fe8:	8820      	ldrh	r0, [r4, #0]
  402fea:	4b7e      	ldr	r3, [pc, #504]	; (4031e4 <control_direction+0x244>)
  402fec:	4798      	blx	r3
			bpm_display(bpm);
  402fee:	8820      	ldrh	r0, [r4, #0]
  402ff0:	4b7d      	ldr	r3, [pc, #500]	; (4031e8 <control_direction+0x248>)
  402ff2:	4798      	blx	r3
  402ff4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		}
		else if (aux_control == 1){
  402ff6:	2a01      	cmp	r2, #1
  402ff8:	d10c      	bne.n	403014 <control_direction+0x74>
			res_inc();
  402ffa:	4b7c      	ldr	r3, [pc, #496]	; (4031ec <control_direction+0x24c>)
  402ffc:	4798      	blx	r3
			update_timers(bpm);
  402ffe:	4b78      	ldr	r3, [pc, #480]	; (4031e0 <control_direction+0x240>)
  403000:	8818      	ldrh	r0, [r3, #0]
  403002:	4b78      	ldr	r3, [pc, #480]	; (4031e4 <control_direction+0x244>)
  403004:	4798      	blx	r3
			res_display(res_to_int(resolution));
  403006:	4b7a      	ldr	r3, [pc, #488]	; (4031f0 <control_direction+0x250>)
  403008:	7818      	ldrb	r0, [r3, #0]
  40300a:	4b7a      	ldr	r3, [pc, #488]	; (4031f4 <control_direction+0x254>)
  40300c:	4798      	blx	r3
  40300e:	4b7a      	ldr	r3, [pc, #488]	; (4031f8 <control_direction+0x258>)
  403010:	4798      	blx	r3
  403012:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		}
		else if (aux_control == 2){
  403014:	2a02      	cmp	r2, #2
  403016:	d11c      	bne.n	403052 <control_direction+0xb2>
			if (page_or_loop == 0){
  403018:	4b78      	ldr	r3, [pc, #480]	; (4031fc <control_direction+0x25c>)
  40301a:	781b      	ldrb	r3, [r3, #0]
  40301c:	b96b      	cbnz	r3, 40303a <control_direction+0x9a>
				cursor_follow = 0;
  40301e:	2200      	movs	r2, #0
  403020:	4b77      	ldr	r3, [pc, #476]	; (403200 <control_direction+0x260>)
  403022:	701a      	strb	r2, [r3, #0]
				display_page_inc();
  403024:	4b77      	ldr	r3, [pc, #476]	; (403204 <control_direction+0x264>)
  403026:	4798      	blx	r3
				leds_update_cursor(curr_step);
  403028:	4b77      	ldr	r3, [pc, #476]	; (403208 <control_direction+0x268>)
  40302a:	7818      	ldrb	r0, [r3, #0]
  40302c:	4b77      	ldr	r3, [pc, #476]	; (40320c <control_direction+0x26c>)
  40302e:	4798      	blx	r3
				page_display(display_page);
  403030:	4b77      	ldr	r3, [pc, #476]	; (403210 <control_direction+0x270>)
  403032:	7818      	ldrb	r0, [r3, #0]
  403034:	4b77      	ldr	r3, [pc, #476]	; (403214 <control_direction+0x274>)
  403036:	4798      	blx	r3
  403038:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			}
			else if (page_or_loop == 1){
  40303a:	2b01      	cmp	r3, #1
  40303c:	f040 8132 	bne.w	4032a4 <control_direction+0x304>
				page_loop_inc();
  403040:	4b75      	ldr	r3, [pc, #468]	; (403218 <control_direction+0x278>)
  403042:	4798      	blx	r3
				loop_display(patterns_loop[curr_pattern]);
  403044:	4b75      	ldr	r3, [pc, #468]	; (40321c <control_direction+0x27c>)
  403046:	781b      	ldrb	r3, [r3, #0]
  403048:	4a75      	ldr	r2, [pc, #468]	; (403220 <control_direction+0x280>)
  40304a:	5cd0      	ldrb	r0, [r2, r3]
  40304c:	4b75      	ldr	r3, [pc, #468]	; (403224 <control_direction+0x284>)
  40304e:	4798      	blx	r3
  403050:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			}
		}
		else if (aux_control == 3){
  403052:	2a03      	cmp	r2, #3
  403054:	d121      	bne.n	40309a <control_direction+0xfa>
			if(pattern_clr == 1) {
  403056:	4b74      	ldr	r3, [pc, #464]	; (403228 <control_direction+0x288>)
  403058:	781b      	ldrb	r3, [r3, #0]
  40305a:	2b01      	cmp	r3, #1
  40305c:	d107      	bne.n	40306e <control_direction+0xce>
				clr_yes = 0;
  40305e:	2100      	movs	r1, #0
  403060:	4b72      	ldr	r3, [pc, #456]	; (40322c <control_direction+0x28c>)
  403062:	7019      	strb	r1, [r3, #0]
				if(clr_yes) {
					clr_pattern_display(curr_pattern, 1);
				}
				else {
					clr_pattern_display(curr_pattern, 0);
  403064:	4b6d      	ldr	r3, [pc, #436]	; (40321c <control_direction+0x27c>)
  403066:	7818      	ldrb	r0, [r3, #0]
  403068:	4b71      	ldr	r3, [pc, #452]	; (403230 <control_direction+0x290>)
  40306a:	4798      	blx	r3
  40306c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				}
			}
			else {
				pattern_inc();
  40306e:	4b71      	ldr	r3, [pc, #452]	; (403234 <control_direction+0x294>)
  403070:	4798      	blx	r3
				leds_update_cursor(curr_step);
  403072:	4b65      	ldr	r3, [pc, #404]	; (403208 <control_direction+0x268>)
  403074:	7818      	ldrb	r0, [r3, #0]
  403076:	4b65      	ldr	r3, [pc, #404]	; (40320c <control_direction+0x26c>)
  403078:	4798      	blx	r3
				pattern_display(curr_pattern);
  40307a:	4b68      	ldr	r3, [pc, #416]	; (40321c <control_direction+0x27c>)
  40307c:	7818      	ldrb	r0, [r3, #0]
  40307e:	4b6e      	ldr	r3, [pc, #440]	; (403238 <control_direction+0x298>)
  403080:	4798      	blx	r3
				if(page_or_loop == 1) {
  403082:	4b5e      	ldr	r3, [pc, #376]	; (4031fc <control_direction+0x25c>)
  403084:	781b      	ldrb	r3, [r3, #0]
  403086:	2b01      	cmp	r3, #1
  403088:	f040 810c 	bne.w	4032a4 <control_direction+0x304>
					loop_display(patterns_loop[curr_pattern]);
  40308c:	4b63      	ldr	r3, [pc, #396]	; (40321c <control_direction+0x27c>)
  40308e:	781b      	ldrb	r3, [r3, #0]
  403090:	4a63      	ldr	r2, [pc, #396]	; (403220 <control_direction+0x280>)
  403092:	5cd0      	ldrb	r0, [r2, r3]
  403094:	4b63      	ldr	r3, [pc, #396]	; (403224 <control_direction+0x284>)
  403096:	4798      	blx	r3
  403098:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				}
			}
		}
		else if (aux_control == 4){
  40309a:	2a04      	cmp	r2, #4
  40309c:	d108      	bne.n	4030b0 <control_direction+0x110>
			pattern_up(CHANNEL_1);
  40309e:	2000      	movs	r0, #0
  4030a0:	4b66      	ldr	r3, [pc, #408]	; (40323c <control_direction+0x29c>)
  4030a2:	4798      	blx	r3
			output_display_1(curr_pattern_ch[0], curr_pattern_ch[1]);
  4030a4:	4b66      	ldr	r3, [pc, #408]	; (403240 <control_direction+0x2a0>)
  4030a6:	7859      	ldrb	r1, [r3, #1]
  4030a8:	7818      	ldrb	r0, [r3, #0]
  4030aa:	4b66      	ldr	r3, [pc, #408]	; (403244 <control_direction+0x2a4>)
  4030ac:	4798      	blx	r3
  4030ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		}
		else if (aux_control == 5){
  4030b0:	2a05      	cmp	r2, #5
  4030b2:	d108      	bne.n	4030c6 <control_direction+0x126>
			pattern_up(CHANNEL_2);
  4030b4:	2001      	movs	r0, #1
  4030b6:	4b61      	ldr	r3, [pc, #388]	; (40323c <control_direction+0x29c>)
  4030b8:	4798      	blx	r3
			output_display_1(curr_pattern_ch[0], curr_pattern_ch[1]);
  4030ba:	4b61      	ldr	r3, [pc, #388]	; (403240 <control_direction+0x2a0>)
  4030bc:	7859      	ldrb	r1, [r3, #1]
  4030be:	7818      	ldrb	r0, [r3, #0]
  4030c0:	4b60      	ldr	r3, [pc, #384]	; (403244 <control_direction+0x2a4>)
  4030c2:	4798      	blx	r3
  4030c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		}
		else if (aux_control == 6){
  4030c6:	2a06      	cmp	r2, #6
  4030c8:	d108      	bne.n	4030dc <control_direction+0x13c>
			pattern_up(CHANNEL_3);
  4030ca:	2002      	movs	r0, #2
  4030cc:	4b5b      	ldr	r3, [pc, #364]	; (40323c <control_direction+0x29c>)
  4030ce:	4798      	blx	r3
			output_display_2(curr_pattern_ch[2], curr_pattern_ch[3]);
  4030d0:	4b5b      	ldr	r3, [pc, #364]	; (403240 <control_direction+0x2a0>)
  4030d2:	78d9      	ldrb	r1, [r3, #3]
  4030d4:	7898      	ldrb	r0, [r3, #2]
  4030d6:	4b5c      	ldr	r3, [pc, #368]	; (403248 <control_direction+0x2a8>)
  4030d8:	4798      	blx	r3
  4030da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		}
		else if (aux_control == 7){
  4030dc:	2a07      	cmp	r2, #7
  4030de:	f040 80e1 	bne.w	4032a4 <control_direction+0x304>
			pattern_up(CHANNEL_4);
  4030e2:	2003      	movs	r0, #3
  4030e4:	4b55      	ldr	r3, [pc, #340]	; (40323c <control_direction+0x29c>)
  4030e6:	4798      	blx	r3
			output_display_2(curr_pattern_ch[2], curr_pattern_ch[3]);
  4030e8:	4b55      	ldr	r3, [pc, #340]	; (403240 <control_direction+0x2a0>)
  4030ea:	78d9      	ldrb	r1, [r3, #3]
  4030ec:	7898      	ldrb	r0, [r3, #2]
  4030ee:	4b56      	ldr	r3, [pc, #344]	; (403248 <control_direction+0x2a8>)
  4030f0:	4798      	blx	r3
  4030f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		}

	}

	else if ((A_seq == 0b00000011) && (B_seq == 0b00001001)){
  4030f4:	2b03      	cmp	r3, #3
  4030f6:	f040 80d5 	bne.w	4032a4 <control_direction+0x304>
  4030fa:	2909      	cmp	r1, #9
  4030fc:	f040 80d2 	bne.w	4032a4 <control_direction+0x304>

		if (aux_control == 0){
  403100:	b94a      	cbnz	r2, 403116 <control_direction+0x176>
			bpm_dec();
  403102:	4b52      	ldr	r3, [pc, #328]	; (40324c <control_direction+0x2ac>)
  403104:	4798      	blx	r3
			update_timers(bpm);
  403106:	4c36      	ldr	r4, [pc, #216]	; (4031e0 <control_direction+0x240>)
  403108:	8820      	ldrh	r0, [r4, #0]
  40310a:	4b36      	ldr	r3, [pc, #216]	; (4031e4 <control_direction+0x244>)
  40310c:	4798      	blx	r3
			bpm_display(bpm);
  40310e:	8820      	ldrh	r0, [r4, #0]
  403110:	4b35      	ldr	r3, [pc, #212]	; (4031e8 <control_direction+0x248>)
  403112:	4798      	blx	r3
  403114:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		}
		else if (aux_control == 1){
  403116:	2a01      	cmp	r2, #1
  403118:	d10c      	bne.n	403134 <control_direction+0x194>
			res_dec();
  40311a:	4b4d      	ldr	r3, [pc, #308]	; (403250 <control_direction+0x2b0>)
  40311c:	4798      	blx	r3
			update_timers(bpm);
  40311e:	4b30      	ldr	r3, [pc, #192]	; (4031e0 <control_direction+0x240>)
  403120:	8818      	ldrh	r0, [r3, #0]
  403122:	4b30      	ldr	r3, [pc, #192]	; (4031e4 <control_direction+0x244>)
  403124:	4798      	blx	r3
			res_display(res_to_int(resolution));
  403126:	4b32      	ldr	r3, [pc, #200]	; (4031f0 <control_direction+0x250>)
  403128:	7818      	ldrb	r0, [r3, #0]
  40312a:	4b32      	ldr	r3, [pc, #200]	; (4031f4 <control_direction+0x254>)
  40312c:	4798      	blx	r3
  40312e:	4b32      	ldr	r3, [pc, #200]	; (4031f8 <control_direction+0x258>)
  403130:	4798      	blx	r3
  403132:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		}
		else if (aux_control == 2){
  403134:	2a02      	cmp	r2, #2
  403136:	d11c      	bne.n	403172 <control_direction+0x1d2>
			if (page_or_loop == 0){
  403138:	4b30      	ldr	r3, [pc, #192]	; (4031fc <control_direction+0x25c>)
  40313a:	781b      	ldrb	r3, [r3, #0]
  40313c:	b96b      	cbnz	r3, 40315a <control_direction+0x1ba>
				cursor_follow = 0;
  40313e:	2200      	movs	r2, #0
  403140:	4b2f      	ldr	r3, [pc, #188]	; (403200 <control_direction+0x260>)
  403142:	701a      	strb	r2, [r3, #0]
				display_page_dec();
  403144:	4b43      	ldr	r3, [pc, #268]	; (403254 <control_direction+0x2b4>)
  403146:	4798      	blx	r3
				leds_update_cursor(curr_step);
  403148:	4b2f      	ldr	r3, [pc, #188]	; (403208 <control_direction+0x268>)
  40314a:	7818      	ldrb	r0, [r3, #0]
  40314c:	4b2f      	ldr	r3, [pc, #188]	; (40320c <control_direction+0x26c>)
  40314e:	4798      	blx	r3
				page_display(display_page);
  403150:	4b2f      	ldr	r3, [pc, #188]	; (403210 <control_direction+0x270>)
  403152:	7818      	ldrb	r0, [r3, #0]
  403154:	4b2f      	ldr	r3, [pc, #188]	; (403214 <control_direction+0x274>)
  403156:	4798      	blx	r3
  403158:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			}
			else if (page_or_loop == 1){
  40315a:	2b01      	cmp	r3, #1
  40315c:	f040 80a2 	bne.w	4032a4 <control_direction+0x304>
				page_loop_dec();
  403160:	4b3d      	ldr	r3, [pc, #244]	; (403258 <control_direction+0x2b8>)
  403162:	4798      	blx	r3
				loop_display(patterns_loop[curr_pattern]);
  403164:	4b2d      	ldr	r3, [pc, #180]	; (40321c <control_direction+0x27c>)
  403166:	781b      	ldrb	r3, [r3, #0]
  403168:	4a2d      	ldr	r2, [pc, #180]	; (403220 <control_direction+0x280>)
  40316a:	5cd0      	ldrb	r0, [r2, r3]
  40316c:	4b2d      	ldr	r3, [pc, #180]	; (403224 <control_direction+0x284>)
  40316e:	4798      	blx	r3
  403170:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			}
		}
		else if (aux_control == 3){
  403172:	2a03      	cmp	r2, #3
  403174:	d120      	bne.n	4031b8 <control_direction+0x218>
			if(pattern_clr == 1) {
  403176:	4b2c      	ldr	r3, [pc, #176]	; (403228 <control_direction+0x288>)
  403178:	781b      	ldrb	r3, [r3, #0]
  40317a:	2b01      	cmp	r3, #1
  40317c:	d107      	bne.n	40318e <control_direction+0x1ee>
				clr_yes = 1;
  40317e:	2101      	movs	r1, #1
  403180:	4b2a      	ldr	r3, [pc, #168]	; (40322c <control_direction+0x28c>)
  403182:	7019      	strb	r1, [r3, #0]
				if(clr_yes) {
					clr_pattern_display(curr_pattern, 1);
  403184:	4b25      	ldr	r3, [pc, #148]	; (40321c <control_direction+0x27c>)
  403186:	7818      	ldrb	r0, [r3, #0]
  403188:	4b29      	ldr	r3, [pc, #164]	; (403230 <control_direction+0x290>)
  40318a:	4798      	blx	r3
  40318c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				else {
					clr_pattern_display(curr_pattern, 0);
				}
			}
			else {
				pattern_dec();
  40318e:	4b33      	ldr	r3, [pc, #204]	; (40325c <control_direction+0x2bc>)
  403190:	4798      	blx	r3
				leds_update_cursor(curr_step);
  403192:	4b1d      	ldr	r3, [pc, #116]	; (403208 <control_direction+0x268>)
  403194:	7818      	ldrb	r0, [r3, #0]
  403196:	4b1d      	ldr	r3, [pc, #116]	; (40320c <control_direction+0x26c>)
  403198:	4798      	blx	r3
				pattern_display(curr_pattern);
  40319a:	4b20      	ldr	r3, [pc, #128]	; (40321c <control_direction+0x27c>)
  40319c:	7818      	ldrb	r0, [r3, #0]
  40319e:	4b26      	ldr	r3, [pc, #152]	; (403238 <control_direction+0x298>)
  4031a0:	4798      	blx	r3
				if(page_or_loop == 1) {
  4031a2:	4b16      	ldr	r3, [pc, #88]	; (4031fc <control_direction+0x25c>)
  4031a4:	781b      	ldrb	r3, [r3, #0]
  4031a6:	2b01      	cmp	r3, #1
  4031a8:	d17c      	bne.n	4032a4 <control_direction+0x304>
					loop_display(patterns_loop[curr_pattern]);
  4031aa:	4b1c      	ldr	r3, [pc, #112]	; (40321c <control_direction+0x27c>)
  4031ac:	781b      	ldrb	r3, [r3, #0]
  4031ae:	4a1c      	ldr	r2, [pc, #112]	; (403220 <control_direction+0x280>)
  4031b0:	5cd0      	ldrb	r0, [r2, r3]
  4031b2:	4b1c      	ldr	r3, [pc, #112]	; (403224 <control_direction+0x284>)
  4031b4:	4798      	blx	r3
  4031b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				}
			}
		}
		else if (aux_control == 4){
  4031b8:	2a04      	cmp	r2, #4
  4031ba:	d153      	bne.n	403264 <control_direction+0x2c4>
			pattern_down(CHANNEL_1);
  4031bc:	2000      	movs	r0, #0
  4031be:	4b28      	ldr	r3, [pc, #160]	; (403260 <control_direction+0x2c0>)
  4031c0:	4798      	blx	r3
			output_display_1(curr_pattern_ch[0], curr_pattern_ch[1]);
  4031c2:	4b1f      	ldr	r3, [pc, #124]	; (403240 <control_direction+0x2a0>)
  4031c4:	7859      	ldrb	r1, [r3, #1]
  4031c6:	7818      	ldrb	r0, [r3, #0]
  4031c8:	4b1e      	ldr	r3, [pc, #120]	; (403244 <control_direction+0x2a4>)
  4031ca:	4798      	blx	r3
  4031cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4031ce:	bf00      	nop
  4031d0:	400e0e3c 	.word	0x400e0e3c
  4031d4:	200009a6 	.word	0x200009a6
  4031d8:	20000997 	.word	0x20000997
  4031dc:	00402e7d 	.word	0x00402e7d
  4031e0:	2000099a 	.word	0x2000099a
  4031e4:	00404049 	.word	0x00404049
  4031e8:	00401579 	.word	0x00401579
  4031ec:	00402e55 	.word	0x00402e55
  4031f0:	20000964 	.word	0x20000964
  4031f4:	00402dfd 	.word	0x00402dfd
  4031f8:	004015dd 	.word	0x004015dd
  4031fc:	200009a5 	.word	0x200009a5
  403200:	2000099c 	.word	0x2000099c
  403204:	00402ef1 	.word	0x00402ef1
  403208:	2000097c 	.word	0x2000097c
  40320c:	004029f5 	.word	0x004029f5
  403210:	20000984 	.word	0x20000984
  403214:	0040172d 	.word	0x0040172d
  403218:	00402f69 	.word	0x00402f69
  40321c:	20000958 	.word	0x20000958
  403220:	200009a8 	.word	0x200009a8
  403224:	00401779 	.word	0x00401779
  403228:	20000995 	.word	0x20000995
  40322c:	200009a4 	.word	0x200009a4
  403230:	00401811 	.word	0x00401811
  403234:	00402f19 	.word	0x00402f19
  403238:	004017c5 	.word	0x004017c5
  40323c:	00402f41 	.word	0x00402f41
  403240:	20000974 	.word	0x20000974
  403244:	004018f1 	.word	0x004018f1
  403248:	00401989 	.word	0x00401989
  40324c:	00402e9d 	.word	0x00402e9d
  403250:	00402e69 	.word	0x00402e69
  403254:	00402f05 	.word	0x00402f05
  403258:	00402f85 	.word	0x00402f85
  40325c:	00402f2d 	.word	0x00402f2d
  403260:	00402f55 	.word	0x00402f55
		}
		else if (aux_control == 5){
  403264:	2a05      	cmp	r2, #5
  403266:	d108      	bne.n	40327a <control_direction+0x2da>
			pattern_down(CHANNEL_2);
  403268:	2001      	movs	r0, #1
  40326a:	4b0f      	ldr	r3, [pc, #60]	; (4032a8 <control_direction+0x308>)
  40326c:	4798      	blx	r3
			output_display_1(curr_pattern_ch[0], curr_pattern_ch[1]);
  40326e:	4b0f      	ldr	r3, [pc, #60]	; (4032ac <control_direction+0x30c>)
  403270:	7859      	ldrb	r1, [r3, #1]
  403272:	7818      	ldrb	r0, [r3, #0]
  403274:	4b0e      	ldr	r3, [pc, #56]	; (4032b0 <control_direction+0x310>)
  403276:	4798      	blx	r3
  403278:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		}
		else if (aux_control == 6){
  40327a:	2a06      	cmp	r2, #6
  40327c:	d108      	bne.n	403290 <control_direction+0x2f0>
			pattern_down(CHANNEL_3);
  40327e:	2002      	movs	r0, #2
  403280:	4b09      	ldr	r3, [pc, #36]	; (4032a8 <control_direction+0x308>)
  403282:	4798      	blx	r3
			output_display_2(curr_pattern_ch[2], curr_pattern_ch[3]);
  403284:	4b09      	ldr	r3, [pc, #36]	; (4032ac <control_direction+0x30c>)
  403286:	78d9      	ldrb	r1, [r3, #3]
  403288:	7898      	ldrb	r0, [r3, #2]
  40328a:	4b0a      	ldr	r3, [pc, #40]	; (4032b4 <control_direction+0x314>)
  40328c:	4798      	blx	r3
  40328e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		}
		else if (aux_control == 7){
  403290:	2a07      	cmp	r2, #7
  403292:	d107      	bne.n	4032a4 <control_direction+0x304>
			pattern_down(CHANNEL_4);
  403294:	2003      	movs	r0, #3
  403296:	4b04      	ldr	r3, [pc, #16]	; (4032a8 <control_direction+0x308>)
  403298:	4798      	blx	r3
			output_display_2(curr_pattern_ch[2], curr_pattern_ch[3]);
  40329a:	4b04      	ldr	r3, [pc, #16]	; (4032ac <control_direction+0x30c>)
  40329c:	78d9      	ldrb	r1, [r3, #3]
  40329e:	7898      	ldrb	r0, [r3, #2]
  4032a0:	4b04      	ldr	r3, [pc, #16]	; (4032b4 <control_direction+0x314>)
  4032a2:	4798      	blx	r3
  4032a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4032a6:	bf00      	nop
  4032a8:	00402f55 	.word	0x00402f55
  4032ac:	20000974 	.word	0x20000974
  4032b0:	004018f1 	.word	0x004018f1
  4032b4:	00401989 	.word	0x00401989

004032b8 <cursor_follow_toggle>:
		patterns_loop[curr_pattern]--;
	}
}

void cursor_follow_toggle(){
	cursor_follow = !cursor_follow;
  4032b8:	4a02      	ldr	r2, [pc, #8]	; (4032c4 <cursor_follow_toggle+0xc>)
  4032ba:	7813      	ldrb	r3, [r2, #0]
  4032bc:	f083 0301 	eor.w	r3, r3, #1
  4032c0:	7013      	strb	r3, [r2, #0]
  4032c2:	4770      	bx	lr
  4032c4:	2000099c 	.word	0x2000099c

004032c8 <pattern_octave_up>:
}

void pattern_octave_up(){
  4032c8:	b410      	push	{r4}
	for (int i = 0; i < 16; i++){
		for (int j = 0; j < 16; j++){
			uint32_t temp = patterns[curr_pattern][i][j][0] + 12; //increase pattern notes by 1 octave
  4032ca:	4b0d      	ldr	r3, [pc, #52]	; (403300 <pattern_octave_up+0x38>)
  4032cc:	781a      	ldrb	r2, [r3, #0]
  4032ce:	4b0d      	ldr	r3, [pc, #52]	; (403304 <pattern_octave_up+0x3c>)
  4032d0:	eb03 21c2 	add.w	r1, r3, r2, lsl #11
  4032d4:	3201      	adds	r2, #1
  4032d6:	eb03 24c2 	add.w	r4, r3, r2, lsl #11
  4032da:	e00c      	b.n	4032f6 <pattern_octave_up+0x2e>
  4032dc:	f851 2033 	ldr.w	r2, [r1, r3, lsl #3]
  4032e0:	320c      	adds	r2, #12

			if (temp <= 108){
  4032e2:	2a6c      	cmp	r2, #108	; 0x6c
				patterns[curr_pattern][i][j][0] += 12;
  4032e4:	bf98      	it	ls
  4032e6:	f840 2033 	strls.w	r2, [r0, r3, lsl #3]
	cursor_follow = !cursor_follow;
}

void pattern_octave_up(){
	for (int i = 0; i < 16; i++){
		for (int j = 0; j < 16; j++){
  4032ea:	3301      	adds	r3, #1
  4032ec:	2b10      	cmp	r3, #16
  4032ee:	d1f5      	bne.n	4032dc <pattern_octave_up+0x14>
  4032f0:	3180      	adds	r1, #128	; 0x80
void cursor_follow_toggle(){
	cursor_follow = !cursor_follow;
}

void pattern_octave_up(){
	for (int i = 0; i < 16; i++){
  4032f2:	42a1      	cmp	r1, r4
  4032f4:	d002      	beq.n	4032fc <pattern_octave_up+0x34>

void cursor_follow_toggle(){
	cursor_follow = !cursor_follow;
}

void pattern_octave_up(){
  4032f6:	2300      	movs	r3, #0
  4032f8:	4608      	mov	r0, r1
  4032fa:	e7ef      	b.n	4032dc <pattern_octave_up+0x14>
			if (temp <= 108){
				patterns[curr_pattern][i][j][0] += 12;
			}
		}
	}
}
  4032fc:	bc10      	pop	{r4}
  4032fe:	4770      	bx	lr
  403300:	20000958 	.word	0x20000958
  403304:	200009b8 	.word	0x200009b8

00403308 <pattern_octave_down>:

void pattern_octave_down(){
  403308:	b410      	push	{r4}
	for (int i = 0; i < 16; i++){
		for (int j = 0; j < 16; j++){
			uint32_t temp = patterns[curr_pattern][i][j][0] - 12; //increase pattern notes by 1 octave
  40330a:	4b0d      	ldr	r3, [pc, #52]	; (403340 <pattern_octave_down+0x38>)
  40330c:	781a      	ldrb	r2, [r3, #0]
  40330e:	4b0d      	ldr	r3, [pc, #52]	; (403344 <pattern_octave_down+0x3c>)
  403310:	eb03 21c2 	add.w	r1, r3, r2, lsl #11
  403314:	3201      	adds	r2, #1
  403316:	eb03 24c2 	add.w	r4, r3, r2, lsl #11
  40331a:	e00c      	b.n	403336 <pattern_octave_down+0x2e>
  40331c:	f851 2033 	ldr.w	r2, [r1, r3, lsl #3]
  403320:	3a0c      	subs	r2, #12

			if ( !(temp > 108) ){
  403322:	2a6c      	cmp	r2, #108	; 0x6c
				patterns[curr_pattern][i][j][0] -= 12;
  403324:	bf98      	it	ls
  403326:	f840 2033 	strls.w	r2, [r0, r3, lsl #3]
	}
}

void pattern_octave_down(){
	for (int i = 0; i < 16; i++){
		for (int j = 0; j < 16; j++){
  40332a:	3301      	adds	r3, #1
  40332c:	2b10      	cmp	r3, #16
  40332e:	d1f5      	bne.n	40331c <pattern_octave_down+0x14>
  403330:	3180      	adds	r1, #128	; 0x80
		}
	}
}

void pattern_octave_down(){
	for (int i = 0; i < 16; i++){
  403332:	42a1      	cmp	r1, r4
  403334:	d002      	beq.n	40333c <pattern_octave_down+0x34>
			}
		}
	}
}

void pattern_octave_down(){
  403336:	2300      	movs	r3, #0
  403338:	4608      	mov	r0, r1
  40333a:	e7ef      	b.n	40331c <pattern_octave_down+0x14>
			}
		}
	}


}
  40333c:	bc10      	pop	{r4}
  40333e:	4770      	bx	lr
  403340:	20000958 	.word	0x20000958
  403344:	200009b8 	.word	0x200009b8

00403348 <aux_toggle>:

void aux_toggle(uint8_t button_row, uint8_t aux_encoders){
  403348:	b510      	push	{r4, lr}
  40334a:	4604      	mov	r4, r0

	switch(aux_encoders) {
  40334c:	29ef      	cmp	r1, #239	; 0xef
  40334e:	d057      	beq.n	403400 <aux_toggle+0xb8>
  403350:	d806      	bhi.n	403360 <aux_toggle+0x18>
  403352:	29bf      	cmp	r1, #191	; 0xbf
  403354:	d06a      	beq.n	40342c <aux_toggle+0xe4>
  403356:	29df      	cmp	r1, #223	; 0xdf
  403358:	d05d      	beq.n	403416 <aux_toggle+0xce>
  40335a:	297f      	cmp	r1, #127	; 0x7f
  40335c:	d17b      	bne.n	403456 <aux_toggle+0x10e>
  40335e:	e070      	b.n	403442 <aux_toggle+0xfa>
  403360:	29fb      	cmp	r1, #251	; 0xfb
  403362:	d017      	beq.n	403394 <aux_toggle+0x4c>
  403364:	d802      	bhi.n	40336c <aux_toggle+0x24>
  403366:	29f7      	cmp	r1, #247	; 0xf7
  403368:	d02b      	beq.n	4033c2 <aux_toggle+0x7a>
  40336a:	e074      	b.n	403456 <aux_toggle+0x10e>
  40336c:	29fd      	cmp	r1, #253	; 0xfd
  40336e:	d004      	beq.n	40337a <aux_toggle+0x32>
  403370:	29fe      	cmp	r1, #254	; 0xfe
  403372:	d170      	bne.n	403456 <aux_toggle+0x10e>
		case 254 :
			//change bpm inc/dec scale
			bpm_toggle();
  403374:	4b45      	ldr	r3, [pc, #276]	; (40348c <aux_toggle+0x144>)
  403376:	4798      	blx	r3
			break;
  403378:	e06d      	b.n	403456 <aux_toggle+0x10e>
		case 253 :
			//save patterns
			flash_write_mem(0x00490000);
  40337a:	f44f 0092 	mov.w	r0, #4784128	; 0x490000
  40337e:	4b44      	ldr	r3, [pc, #272]	; (403490 <aux_toggle+0x148>)
  403380:	4798      	blx	r3
			saving_display(0);
  403382:	2000      	movs	r0, #0
  403384:	4b43      	ldr	r3, [pc, #268]	; (403494 <aux_toggle+0x14c>)
  403386:	4798      	blx	r3
			REG_TC0_CCR1 |= TC_CCR_CLKEN | TC_CCR_SWTRG;		//start 2 sec timer
  403388:	4a43      	ldr	r2, [pc, #268]	; (403498 <aux_toggle+0x150>)
  40338a:	6813      	ldr	r3, [r2, #0]
  40338c:	f043 0305 	orr.w	r3, r3, #5
  403390:	6013      	str	r3, [r2, #0]
			break;
  403392:	e060      	b.n	403456 <aux_toggle+0x10e>
		case 251 :
			//toggle between page & loop variables
			page_or_loop = abs(page_or_loop - 1);
  403394:	4a41      	ldr	r2, [pc, #260]	; (40349c <aux_toggle+0x154>)
  403396:	7813      	ldrb	r3, [r2, #0]
  403398:	3b01      	subs	r3, #1
  40339a:	2b00      	cmp	r3, #0
  40339c:	bfb8      	it	lt
  40339e:	425b      	neglt	r3, r3
  4033a0:	b2db      	uxtb	r3, r3
  4033a2:	7013      	strb	r3, [r2, #0]
			if (page_or_loop == 0){
  4033a4:	b923      	cbnz	r3, 4033b0 <aux_toggle+0x68>
				page_display(display_page);
  4033a6:	4b3e      	ldr	r3, [pc, #248]	; (4034a0 <aux_toggle+0x158>)
  4033a8:	7818      	ldrb	r0, [r3, #0]
  4033aa:	4b3e      	ldr	r3, [pc, #248]	; (4034a4 <aux_toggle+0x15c>)
  4033ac:	4798      	blx	r3
  4033ae:	e052      	b.n	403456 <aux_toggle+0x10e>
			}
			else if (page_or_loop == 1){
  4033b0:	2b01      	cmp	r3, #1
  4033b2:	d150      	bne.n	403456 <aux_toggle+0x10e>
				loop_display(patterns_loop[curr_pattern]);
  4033b4:	4b3c      	ldr	r3, [pc, #240]	; (4034a8 <aux_toggle+0x160>)
  4033b6:	781b      	ldrb	r3, [r3, #0]
  4033b8:	4a3c      	ldr	r2, [pc, #240]	; (4034ac <aux_toggle+0x164>)
  4033ba:	5cd0      	ldrb	r0, [r2, r3]
  4033bc:	4b3c      	ldr	r3, [pc, #240]	; (4034b0 <aux_toggle+0x168>)
  4033be:	4798      	blx	r3
  4033c0:	e049      	b.n	403456 <aux_toggle+0x10e>
// 				pattern_clr = 0;					//reset clear variable
// 				REG_TC0_CCR1 |= TC_CCR_CLKDIS;		//disable timer counter
// 				notes_clear(curr_pattern);			//clear the current pattern
// 				pattern_display(curr_pattern);		//return display to default
// 			}
			if (pattern_clr == 0){
  4033c2:	4b3c      	ldr	r3, [pc, #240]	; (4034b4 <aux_toggle+0x16c>)
  4033c4:	781b      	ldrb	r3, [r3, #0]
  4033c6:	b943      	cbnz	r3, 4033da <aux_toggle+0x92>
				clr_pattern_display(curr_pattern, 0);	//output clear message to display
  4033c8:	2100      	movs	r1, #0
  4033ca:	4b37      	ldr	r3, [pc, #220]	; (4034a8 <aux_toggle+0x160>)
  4033cc:	7818      	ldrb	r0, [r3, #0]
  4033ce:	4b3a      	ldr	r3, [pc, #232]	; (4034b8 <aux_toggle+0x170>)
  4033d0:	4798      	blx	r3
				pattern_clr = 1;
  4033d2:	2201      	movs	r2, #1
  4033d4:	4b37      	ldr	r3, [pc, #220]	; (4034b4 <aux_toggle+0x16c>)
  4033d6:	701a      	strb	r2, [r3, #0]
  4033d8:	e03d      	b.n	403456 <aux_toggle+0x10e>
			}
			else if (pattern_clr == 1){
  4033da:	2b01      	cmp	r3, #1
  4033dc:	d13b      	bne.n	403456 <aux_toggle+0x10e>
				if(clr_yes) {
  4033de:	4b37      	ldr	r3, [pc, #220]	; (4034bc <aux_toggle+0x174>)
  4033e0:	781b      	ldrb	r3, [r3, #0]
  4033e2:	b11b      	cbz	r3, 4033ec <aux_toggle+0xa4>
					notes_clear(curr_pattern);			//clear the current pattern
  4033e4:	4b30      	ldr	r3, [pc, #192]	; (4034a8 <aux_toggle+0x160>)
  4033e6:	7818      	ldrb	r0, [r3, #0]
  4033e8:	4b35      	ldr	r3, [pc, #212]	; (4034c0 <aux_toggle+0x178>)
  4033ea:	4798      	blx	r3
				}
				clr_yes = 0;
  4033ec:	2300      	movs	r3, #0
  4033ee:	4a33      	ldr	r2, [pc, #204]	; (4034bc <aux_toggle+0x174>)
  4033f0:	7013      	strb	r3, [r2, #0]
				pattern_clr = 0;
  4033f2:	4a30      	ldr	r2, [pc, #192]	; (4034b4 <aux_toggle+0x16c>)
  4033f4:	7013      	strb	r3, [r2, #0]
				pattern_display(curr_pattern);		//return display to default
  4033f6:	4b2c      	ldr	r3, [pc, #176]	; (4034a8 <aux_toggle+0x160>)
  4033f8:	7818      	ldrb	r0, [r3, #0]
  4033fa:	4b32      	ldr	r3, [pc, #200]	; (4034c4 <aux_toggle+0x17c>)
  4033fc:	4798      	blx	r3
  4033fe:	e02a      	b.n	403456 <aux_toggle+0x10e>
			}
			break;
		case 239 :
			channel_mute[CHANNEL_1] = abs(channel_mute[CHANNEL_1] - 1);
  403400:	4a31      	ldr	r2, [pc, #196]	; (4034c8 <aux_toggle+0x180>)
  403402:	7813      	ldrb	r3, [r2, #0]
  403404:	3b01      	subs	r3, #1
  403406:	2b00      	cmp	r3, #0
  403408:	bfb8      	it	lt
  40340a:	425b      	neglt	r3, r3
  40340c:	7013      	strb	r3, [r2, #0]
			DAC_write_gate_off(CHANNEL_1);
  40340e:	2000      	movs	r0, #0
  403410:	4b2e      	ldr	r3, [pc, #184]	; (4034cc <aux_toggle+0x184>)
  403412:	4798      	blx	r3
			break;
  403414:	e01f      	b.n	403456 <aux_toggle+0x10e>
		case 223 :
			channel_mute[CHANNEL_2] = abs(channel_mute[CHANNEL_2] - 1);
  403416:	4a2c      	ldr	r2, [pc, #176]	; (4034c8 <aux_toggle+0x180>)
  403418:	7853      	ldrb	r3, [r2, #1]
  40341a:	3b01      	subs	r3, #1
  40341c:	2b00      	cmp	r3, #0
  40341e:	bfb8      	it	lt
  403420:	425b      	neglt	r3, r3
  403422:	7053      	strb	r3, [r2, #1]
			DAC_write_gate_off(CHANNEL_2);
  403424:	2001      	movs	r0, #1
  403426:	4b29      	ldr	r3, [pc, #164]	; (4034cc <aux_toggle+0x184>)
  403428:	4798      	blx	r3
			break;
  40342a:	e014      	b.n	403456 <aux_toggle+0x10e>
		case 191 :
			channel_mute[CHANNEL_3] = abs(channel_mute[CHANNEL_3] - 1);
  40342c:	4a26      	ldr	r2, [pc, #152]	; (4034c8 <aux_toggle+0x180>)
  40342e:	7893      	ldrb	r3, [r2, #2]
  403430:	3b01      	subs	r3, #1
  403432:	2b00      	cmp	r3, #0
  403434:	bfb8      	it	lt
  403436:	425b      	neglt	r3, r3
  403438:	7093      	strb	r3, [r2, #2]
			DAC_write_gate_off(CHANNEL_3);
  40343a:	2002      	movs	r0, #2
  40343c:	4b23      	ldr	r3, [pc, #140]	; (4034cc <aux_toggle+0x184>)
  40343e:	4798      	blx	r3
			break;
  403440:	e009      	b.n	403456 <aux_toggle+0x10e>
		case 127 :
			channel_mute[CHANNEL_4] = abs(channel_mute[CHANNEL_4] - 1);
  403442:	4a21      	ldr	r2, [pc, #132]	; (4034c8 <aux_toggle+0x180>)
  403444:	78d3      	ldrb	r3, [r2, #3]
  403446:	3b01      	subs	r3, #1
  403448:	2b00      	cmp	r3, #0
  40344a:	bfb8      	it	lt
  40344c:	425b      	neglt	r3, r3
  40344e:	70d3      	strb	r3, [r2, #3]
			DAC_write_gate_off(CHANNEL_4);
  403450:	2003      	movs	r0, #3
  403452:	4b1e      	ldr	r3, [pc, #120]	; (4034cc <aux_toggle+0x184>)
  403454:	4798      	blx	r3
			break;
		default :
			break;
	}

	switch(button_row) {
  403456:	2cdf      	cmp	r4, #223	; 0xdf
  403458:	d00f      	beq.n	40347a <aux_toggle+0x132>
  40345a:	d804      	bhi.n	403466 <aux_toggle+0x11e>
  40345c:	2c7f      	cmp	r4, #127	; 0x7f
  40345e:	d012      	beq.n	403486 <aux_toggle+0x13e>
  403460:	2cbf      	cmp	r4, #191	; 0xbf
  403462:	d00d      	beq.n	403480 <aux_toggle+0x138>
  403464:	bd10      	pop	{r4, pc}
  403466:	2cfd      	cmp	r4, #253	; 0xfd
  403468:	d004      	beq.n	403474 <aux_toggle+0x12c>
  40346a:	2cfe      	cmp	r4, #254	; 0xfe
  40346c:	d10d      	bne.n	40348a <aux_toggle+0x142>
		case 254 :
			led_toggle_note();
  40346e:	4b18      	ldr	r3, [pc, #96]	; (4034d0 <aux_toggle+0x188>)
  403470:	4798      	blx	r3
			break;
  403472:	bd10      	pop	{r4, pc}
		case 253 :
			led_toggle_cursor();
  403474:	4b17      	ldr	r3, [pc, #92]	; (4034d4 <aux_toggle+0x18c>)
  403476:	4798      	blx	r3
			break;
  403478:	bd10      	pop	{r4, pc}
			break;
		case 239 :
			
			break;
		case 223 :
			cursor_follow_toggle();
  40347a:	4b17      	ldr	r3, [pc, #92]	; (4034d8 <aux_toggle+0x190>)
  40347c:	4798      	blx	r3
			break;
  40347e:	bd10      	pop	{r4, pc}
		case 191 :
			pattern_octave_down();
  403480:	4b16      	ldr	r3, [pc, #88]	; (4034dc <aux_toggle+0x194>)
  403482:	4798      	blx	r3
			break;
  403484:	bd10      	pop	{r4, pc}
		case 127 :
			pattern_octave_up();
  403486:	4b16      	ldr	r3, [pc, #88]	; (4034e0 <aux_toggle+0x198>)
  403488:	4798      	blx	r3
  40348a:	bd10      	pop	{r4, pc}
  40348c:	00402eb9 	.word	0x00402eb9
  403490:	004024a1 	.word	0x004024a1
  403494:	004016c9 	.word	0x004016c9
  403498:	40010040 	.word	0x40010040
  40349c:	200009a5 	.word	0x200009a5
  4034a0:	20000984 	.word	0x20000984
  4034a4:	0040172d 	.word	0x0040172d
  4034a8:	20000958 	.word	0x20000958
  4034ac:	200009a8 	.word	0x200009a8
  4034b0:	00401779 	.word	0x00401779
  4034b4:	20000995 	.word	0x20000995
  4034b8:	00401811 	.word	0x00401811
  4034bc:	200009a4 	.word	0x200009a4
  4034c0:	00403ea1 	.word	0x00403ea1
  4034c4:	004017c5 	.word	0x004017c5
  4034c8:	20000980 	.word	0x20000980
  4034cc:	004006a9 	.word	0x004006a9
  4034d0:	004026f1 	.word	0x004026f1
  4034d4:	00402681 	.word	0x00402681
  4034d8:	004032b9 	.word	0x004032b9
  4034dc:	00403309 	.word	0x00403309
  4034e0:	004032c9 	.word	0x004032c9

004034e4 <init_sequencer_controls>:

}
}


 void init_sequencer_controls(){
  4034e4:	b470      	push	{r4, r5, r6}

	bpm = 120;
  4034e6:	2278      	movs	r2, #120	; 0x78
  4034e8:	4ba8      	ldr	r3, [pc, #672]	; (40378c <init_sequencer_controls+0x2a8>)
  4034ea:	801a      	strh	r2, [r3, #0]
	bpm_adjust = 1;
  4034ec:	2201      	movs	r2, #1
  4034ee:	4ba8      	ldr	r3, [pc, #672]	; (403790 <init_sequencer_controls+0x2ac>)
  4034f0:	701a      	strb	r2, [r3, #0]

	page_or_loop = 0;
  4034f2:	2300      	movs	r3, #0
  4034f4:	4aa7      	ldr	r2, [pc, #668]	; (403794 <init_sequencer_controls+0x2b0>)
  4034f6:	7013      	strb	r3, [r2, #0]
	pattern_clr = 0;
  4034f8:	4aa7      	ldr	r2, [pc, #668]	; (403798 <init_sequencer_controls+0x2b4>)
  4034fa:	7013      	strb	r3, [r2, #0]
	clr_yes = 0;
  4034fc:	4aa7      	ldr	r2, [pc, #668]	; (40379c <init_sequencer_controls+0x2b8>)
  4034fe:	7013      	strb	r3, [r2, #0]
	cursor_follow = 0;
  403500:	4aa7      	ldr	r2, [pc, #668]	; (4037a0 <init_sequencer_controls+0x2bc>)
  403502:	7013      	strb	r3, [r2, #0]
	pause = 0;
  403504:	4aa7      	ldr	r2, [pc, #668]	; (4037a4 <init_sequencer_controls+0x2c0>)
  403506:	7013      	strb	r3, [r2, #0]
	pause_count = 0;
  403508:	4aa7      	ldr	r2, [pc, #668]	; (4037a8 <init_sequencer_controls+0x2c4>)
  40350a:	7013      	strb	r3, [r2, #0]

	A_seq = 0;
  40350c:	4aa7      	ldr	r2, [pc, #668]	; (4037ac <init_sequencer_controls+0x2c8>)
  40350e:	7013      	strb	r3, [r2, #0]
	B_seq = 0;
  403510:	4aa7      	ldr	r2, [pc, #668]	; (4037b0 <init_sequencer_controls+0x2cc>)
  403512:	7013      	strb	r3, [r2, #0]

	//enable clock for PIOA
	REG_PMC_PCER0 |= PMC_PCER0_PID11;
  403514:	4aa7      	ldr	r2, [pc, #668]	; (4037b4 <init_sequencer_controls+0x2d0>)
  403516:	6813      	ldr	r3, [r2, #0]
  403518:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  40351c:	6013      	str	r3, [r2, #0]

	/**************			CONFIGURE PAUSE/PLAY BUTTON				**************/
	//set up PA2 as pause/play interrupt pin
	REG_PIOA_PER |= PIO_PER_P2; //enable PIO controller
  40351e:	4da6      	ldr	r5, [pc, #664]	; (4037b8 <init_sequencer_controls+0x2d4>)
  403520:	682b      	ldr	r3, [r5, #0]
  403522:	f043 0304 	orr.w	r3, r3, #4
  403526:	602b      	str	r3, [r5, #0]
	REG_PIOA_ODR |= PIO_ODR_P2; //disable output
  403528:	4ca4      	ldr	r4, [pc, #656]	; (4037bc <init_sequencer_controls+0x2d8>)
  40352a:	6823      	ldr	r3, [r4, #0]
  40352c:	f043 0304 	orr.w	r3, r3, #4
  403530:	6023      	str	r3, [r4, #0]
	REG_PIOA_PPDDR |= PIO_PPDDR_P2; //disable pull-down resistor
  403532:	48a3      	ldr	r0, [pc, #652]	; (4037c0 <init_sequencer_controls+0x2dc>)
  403534:	6803      	ldr	r3, [r0, #0]
  403536:	f043 0304 	orr.w	r3, r3, #4
  40353a:	6003      	str	r3, [r0, #0]
	REG_PIOA_PUER |= PIO_PUER_P2;	//enable pull-up resistor
  40353c:	4ba1      	ldr	r3, [pc, #644]	; (4037c4 <init_sequencer_controls+0x2e0>)
  40353e:	681a      	ldr	r2, [r3, #0]
  403540:	f042 0204 	orr.w	r2, r2, #4
  403544:	601a      	str	r2, [r3, #0]

	//set PA18 as pause/play LED output
	REG_PIOA_OER |= PIO_OER_P18;
  403546:	49a0      	ldr	r1, [pc, #640]	; (4037c8 <init_sequencer_controls+0x2e4>)
  403548:	680a      	ldr	r2, [r1, #0]
  40354a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
  40354e:	600a      	str	r2, [r1, #0]
	REG_PIOA_SODR |= PIO_SODR_P18; 
  403550:	3120      	adds	r1, #32
  403552:	680a      	ldr	r2, [r1, #0]
  403554:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
  403558:	600a      	str	r2, [r1, #0]

	/**************			CONFIGURE 8 STEP AUX ENCODERS			**************/

	//Set up PA0 as AUX ENC 0 INPUT A
	REG_PIOA_PER |= PIO_PER_P0; //enable PIO controller
  40355a:	682a      	ldr	r2, [r5, #0]
  40355c:	f042 0201 	orr.w	r2, r2, #1
  403560:	602a      	str	r2, [r5, #0]
	REG_PIOA_ODR |= PIO_ODR_P0; //disable output
  403562:	6822      	ldr	r2, [r4, #0]
  403564:	f042 0201 	orr.w	r2, r2, #1
  403568:	6022      	str	r2, [r4, #0]
	REG_PIOA_PPDDR |= PIO_PPDDR_P0; //disable pull-down resistor
  40356a:	6802      	ldr	r2, [r0, #0]
  40356c:	f042 0201 	orr.w	r2, r2, #1
  403570:	6002      	str	r2, [r0, #0]
	REG_PIOA_PUER |= PIO_PUER_P0;	//enable pull-up resistor
  403572:	681a      	ldr	r2, [r3, #0]
  403574:	f042 0201 	orr.w	r2, r2, #1
  403578:	601a      	str	r2, [r3, #0]
	REG_PIOA_IFSCER |= PIO_IFSCER_P0; //turn on slow clock debounce
  40357a:	3154      	adds	r1, #84	; 0x54
  40357c:	680a      	ldr	r2, [r1, #0]
  40357e:	f042 0201 	orr.w	r2, r2, #1
  403582:	600a      	str	r2, [r1, #0]
	REG_PIOA_IFER |= PIO_IFER_P0;	//start debounce filter
  403584:	4a91      	ldr	r2, [pc, #580]	; (4037cc <init_sequencer_controls+0x2e8>)
  403586:	6816      	ldr	r6, [r2, #0]
  403588:	f046 0601 	orr.w	r6, r6, #1
  40358c:	6016      	str	r6, [r2, #0]

	//Set up PA1 as AUX ENC 0 INPUT B
	REG_PIOA_PER |= PIO_PER_P1; //enable PIO controller
  40358e:	682e      	ldr	r6, [r5, #0]
  403590:	f046 0602 	orr.w	r6, r6, #2
  403594:	602e      	str	r6, [r5, #0]
	REG_PIOA_ODR |= PIO_ODR_P1; //disable output
  403596:	6826      	ldr	r6, [r4, #0]
  403598:	f046 0602 	orr.w	r6, r6, #2
  40359c:	6026      	str	r6, [r4, #0]
	REG_PIOA_PPDDR |= PIO_PPDDR_P1; //disable pull-down resistor
  40359e:	6806      	ldr	r6, [r0, #0]
  4035a0:	f046 0602 	orr.w	r6, r6, #2
  4035a4:	6006      	str	r6, [r0, #0]
	REG_PIOA_PUER |= PIO_PUER_P1;	//enable pull-up resistor
  4035a6:	681e      	ldr	r6, [r3, #0]
  4035a8:	f046 0602 	orr.w	r6, r6, #2
  4035ac:	601e      	str	r6, [r3, #0]
	REG_PIOA_IFSCER |= PIO_IFSCER_P1; //turn on slow clock debounce
  4035ae:	680e      	ldr	r6, [r1, #0]
  4035b0:	f046 0602 	orr.w	r6, r6, #2
  4035b4:	600e      	str	r6, [r1, #0]
	REG_PIOA_IFER |= PIO_IFER_P1;	//start debounce filter
  4035b6:	6816      	ldr	r6, [r2, #0]
  4035b8:	f046 0602 	orr.w	r6, r6, #2
  4035bc:	6016      	str	r6, [r2, #0]



	//Set up PA6 as AUX ENC 1 INPUT A
	REG_PIOA_PER |= PIO_PER_P6; //enable PIO controller
  4035be:	682e      	ldr	r6, [r5, #0]
  4035c0:	f046 0640 	orr.w	r6, r6, #64	; 0x40
  4035c4:	602e      	str	r6, [r5, #0]
	REG_PIOA_ODR |= PIO_ODR_P6; //disable output
  4035c6:	6826      	ldr	r6, [r4, #0]
  4035c8:	f046 0640 	orr.w	r6, r6, #64	; 0x40
  4035cc:	6026      	str	r6, [r4, #0]
	REG_PIOA_PPDDR |= PIO_PPDDR_P6; //disable pull-down resistor
  4035ce:	6806      	ldr	r6, [r0, #0]
  4035d0:	f046 0640 	orr.w	r6, r6, #64	; 0x40
  4035d4:	6006      	str	r6, [r0, #0]
	REG_PIOA_PUER |= PIO_PUER_P6;	//enable pull-up resistor
  4035d6:	681e      	ldr	r6, [r3, #0]
  4035d8:	f046 0640 	orr.w	r6, r6, #64	; 0x40
  4035dc:	601e      	str	r6, [r3, #0]
	REG_PIOA_IFSCER |= PIO_IFSCER_P6; //turn on slow clock debounce
  4035de:	680e      	ldr	r6, [r1, #0]
  4035e0:	f046 0640 	orr.w	r6, r6, #64	; 0x40
  4035e4:	600e      	str	r6, [r1, #0]
	REG_PIOA_IFER |= PIO_IFER_P6;	//start debounce filter
  4035e6:	6816      	ldr	r6, [r2, #0]
  4035e8:	f046 0640 	orr.w	r6, r6, #64	; 0x40
  4035ec:	6016      	str	r6, [r2, #0]

	//Set up PA7 as AUX ENC 1 INPUT B
	REG_PIOA_PER |= PIO_PER_P7; //enable PIO controller
  4035ee:	682e      	ldr	r6, [r5, #0]
  4035f0:	f046 0680 	orr.w	r6, r6, #128	; 0x80
  4035f4:	602e      	str	r6, [r5, #0]
	REG_PIOA_ODR |= PIO_ODR_P7; //disable output
  4035f6:	6826      	ldr	r6, [r4, #0]
  4035f8:	f046 0680 	orr.w	r6, r6, #128	; 0x80
  4035fc:	6026      	str	r6, [r4, #0]
	REG_PIOA_PPDDR |= PIO_PPDDR_P7; //disable pull-down resistor
  4035fe:	6806      	ldr	r6, [r0, #0]
  403600:	f046 0680 	orr.w	r6, r6, #128	; 0x80
  403604:	6006      	str	r6, [r0, #0]
	REG_PIOA_PUER |= PIO_PUER_P7;	//enable pull-up resistor
  403606:	681e      	ldr	r6, [r3, #0]
  403608:	f046 0680 	orr.w	r6, r6, #128	; 0x80
  40360c:	601e      	str	r6, [r3, #0]
	REG_PIOA_IFSCER |= PIO_IFSCER_P7; //turn on slow clock debounce
  40360e:	680e      	ldr	r6, [r1, #0]
  403610:	f046 0680 	orr.w	r6, r6, #128	; 0x80
  403614:	600e      	str	r6, [r1, #0]
	REG_PIOA_IFER |= PIO_IFER_P7;	//start debounce filte3
  403616:	6816      	ldr	r6, [r2, #0]
  403618:	f046 0680 	orr.w	r6, r6, #128	; 0x80
  40361c:	6016      	str	r6, [r2, #0]


	
	//Set up PA8 as AUX ENC 2 INPUT A
	REG_PIOA_PER |= PIO_PER_P8; //enable PIO controller
  40361e:	682e      	ldr	r6, [r5, #0]
  403620:	f446 7680 	orr.w	r6, r6, #256	; 0x100
  403624:	602e      	str	r6, [r5, #0]
	REG_PIOA_ODR |= PIO_ODR_P8; //disable output
  403626:	6826      	ldr	r6, [r4, #0]
  403628:	f446 7680 	orr.w	r6, r6, #256	; 0x100
  40362c:	6026      	str	r6, [r4, #0]
	REG_PIOA_PPDDR |= PIO_PPDDR_P8; //disable pull-down resistor
  40362e:	6806      	ldr	r6, [r0, #0]
  403630:	f446 7680 	orr.w	r6, r6, #256	; 0x100
  403634:	6006      	str	r6, [r0, #0]
	REG_PIOA_PUER |= PIO_PUER_P8;	//enable pull-up resistor
  403636:	681e      	ldr	r6, [r3, #0]
  403638:	f446 7680 	orr.w	r6, r6, #256	; 0x100
  40363c:	601e      	str	r6, [r3, #0]
	REG_PIOA_IFSCER |= PIO_IFSCER_P8; //turn on slow clock debounce
  40363e:	680e      	ldr	r6, [r1, #0]
  403640:	f446 7680 	orr.w	r6, r6, #256	; 0x100
  403644:	600e      	str	r6, [r1, #0]
	REG_PIOA_IFER |= PIO_IFER_P8;	//start debounce filter
  403646:	6816      	ldr	r6, [r2, #0]
  403648:	f446 7680 	orr.w	r6, r6, #256	; 0x100
  40364c:	6016      	str	r6, [r2, #0]

	//Set up PA9 as AUX ENC 2 INPUT B
	REG_PIOA_PER |= PIO_PER_P9; //enable PIO controller
  40364e:	682e      	ldr	r6, [r5, #0]
  403650:	f446 7600 	orr.w	r6, r6, #512	; 0x200
  403654:	602e      	str	r6, [r5, #0]
	REG_PIOA_ODR |= PIO_ODR_P9; //disable output
  403656:	6826      	ldr	r6, [r4, #0]
  403658:	f446 7600 	orr.w	r6, r6, #512	; 0x200
  40365c:	6026      	str	r6, [r4, #0]
	REG_PIOA_PPDDR |= PIO_PPDDR_P9; //disable pull-down resistor
  40365e:	6806      	ldr	r6, [r0, #0]
  403660:	f446 7600 	orr.w	r6, r6, #512	; 0x200
  403664:	6006      	str	r6, [r0, #0]
	REG_PIOA_PUER |= PIO_PUER_P9;	//enable pull-up resistor
  403666:	681e      	ldr	r6, [r3, #0]
  403668:	f446 7600 	orr.w	r6, r6, #512	; 0x200
  40366c:	601e      	str	r6, [r3, #0]
	REG_PIOA_IFSCER |= PIO_IFSCER_P9; //turn on slow clock debounce
  40366e:	680e      	ldr	r6, [r1, #0]
  403670:	f446 7600 	orr.w	r6, r6, #512	; 0x200
  403674:	600e      	str	r6, [r1, #0]
	REG_PIOA_IFER |= PIO_IFER_P9;	//start debounce filter
  403676:	6816      	ldr	r6, [r2, #0]
  403678:	f446 7600 	orr.w	r6, r6, #512	; 0x200
  40367c:	6016      	str	r6, [r2, #0]



	//Set up PA16 as AUX ENC 3 INPUT A
	REG_PIOA_PER |= PIO_PER_P16; //enable PIO controller
  40367e:	682e      	ldr	r6, [r5, #0]
  403680:	f446 3680 	orr.w	r6, r6, #65536	; 0x10000
  403684:	602e      	str	r6, [r5, #0]
	REG_PIOA_ODR |= PIO_ODR_P16; //disable output
  403686:	6826      	ldr	r6, [r4, #0]
  403688:	f446 3680 	orr.w	r6, r6, #65536	; 0x10000
  40368c:	6026      	str	r6, [r4, #0]
	REG_PIOA_PPDDR |= PIO_PPDDR_P16; //disable pull-down resistor
  40368e:	6806      	ldr	r6, [r0, #0]
  403690:	f446 3680 	orr.w	r6, r6, #65536	; 0x10000
  403694:	6006      	str	r6, [r0, #0]
	REG_PIOA_PUER |= PIO_PUER_P16;	//enable pull-up resistor
  403696:	681e      	ldr	r6, [r3, #0]
  403698:	f446 3680 	orr.w	r6, r6, #65536	; 0x10000
  40369c:	601e      	str	r6, [r3, #0]
	REG_PIOA_IFSCER |= PIO_IFSCER_P16; //turn on slow clock debounce
  40369e:	680e      	ldr	r6, [r1, #0]
  4036a0:	f446 3680 	orr.w	r6, r6, #65536	; 0x10000
  4036a4:	600e      	str	r6, [r1, #0]
	REG_PIOA_IFER |= PIO_IFER_P16;	//start debounce filter
  4036a6:	6816      	ldr	r6, [r2, #0]
  4036a8:	f446 3680 	orr.w	r6, r6, #65536	; 0x10000
  4036ac:	6016      	str	r6, [r2, #0]

	//Set up PA17 as AUX ENC 3 INPUT B
	REG_PIOA_PER |= PIO_PER_P17; //enable PIO controller
  4036ae:	682e      	ldr	r6, [r5, #0]
  4036b0:	f446 3600 	orr.w	r6, r6, #131072	; 0x20000
  4036b4:	602e      	str	r6, [r5, #0]
	REG_PIOA_ODR |= PIO_ODR_P17; //disable output
  4036b6:	6826      	ldr	r6, [r4, #0]
  4036b8:	f446 3600 	orr.w	r6, r6, #131072	; 0x20000
  4036bc:	6026      	str	r6, [r4, #0]
	REG_PIOA_PPDDR |= PIO_PPDDR_P17; //disable pull-down resistor
  4036be:	6806      	ldr	r6, [r0, #0]
  4036c0:	f446 3600 	orr.w	r6, r6, #131072	; 0x20000
  4036c4:	6006      	str	r6, [r0, #0]
	REG_PIOA_PUER |= PIO_PUER_P17;	//enable pull-up resistor
  4036c6:	681e      	ldr	r6, [r3, #0]
  4036c8:	f446 3600 	orr.w	r6, r6, #131072	; 0x20000
  4036cc:	601e      	str	r6, [r3, #0]
	REG_PIOA_IFSCER |= PIO_IFSCER_P17; //turn on slow clock debounce
  4036ce:	680e      	ldr	r6, [r1, #0]
  4036d0:	f446 3600 	orr.w	r6, r6, #131072	; 0x20000
  4036d4:	600e      	str	r6, [r1, #0]
	REG_PIOA_IFER |= PIO_IFER_P17;	//start debounce filter
  4036d6:	6816      	ldr	r6, [r2, #0]
  4036d8:	f446 3600 	orr.w	r6, r6, #131072	; 0x20000
  4036dc:	6016      	str	r6, [r2, #0]



	//Set up PA20 as AUX ENC 4 INPUT A
	REG_PIOA_PER |= PIO_PER_P20; //enable PIO controller
  4036de:	682e      	ldr	r6, [r5, #0]
  4036e0:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
  4036e4:	602e      	str	r6, [r5, #0]
	REG_PIOA_ODR |= PIO_ODR_P20; //disable output
  4036e6:	6826      	ldr	r6, [r4, #0]
  4036e8:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
  4036ec:	6026      	str	r6, [r4, #0]
	REG_PIOA_PPDDR |= PIO_PPDDR_P20; //disable pull-down resistor
  4036ee:	6806      	ldr	r6, [r0, #0]
  4036f0:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
  4036f4:	6006      	str	r6, [r0, #0]
	REG_PIOA_PUER |= PIO_PUER_P20;	//enable pull-up resistor
  4036f6:	681e      	ldr	r6, [r3, #0]
  4036f8:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
  4036fc:	601e      	str	r6, [r3, #0]
	REG_PIOA_IFSCER |= PIO_IFSCER_P20; //turn on slow clock debounce
  4036fe:	680e      	ldr	r6, [r1, #0]
  403700:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
  403704:	600e      	str	r6, [r1, #0]
	REG_PIOA_IFER |= PIO_IFER_P20;	//start debounce filter
  403706:	6816      	ldr	r6, [r2, #0]
  403708:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
  40370c:	6016      	str	r6, [r2, #0]

	//Set up PA21 as AUX ENC 4 INPUT B
	REG_PIOA_PER |= PIO_PER_P21; //enable PIO controller
  40370e:	682e      	ldr	r6, [r5, #0]
  403710:	f446 1600 	orr.w	r6, r6, #2097152	; 0x200000
  403714:	602e      	str	r6, [r5, #0]
	REG_PIOA_ODR |= PIO_ODR_P21; //disable output
  403716:	6826      	ldr	r6, [r4, #0]
  403718:	f446 1600 	orr.w	r6, r6, #2097152	; 0x200000
  40371c:	6026      	str	r6, [r4, #0]
	REG_PIOA_PPDDR |= PIO_PPDDR_P21; //disable pull-down resistor
  40371e:	6806      	ldr	r6, [r0, #0]
  403720:	f446 1600 	orr.w	r6, r6, #2097152	; 0x200000
  403724:	6006      	str	r6, [r0, #0]
	REG_PIOA_PUER |= PIO_PUER_P21;	//enable pull-up resistor
  403726:	681e      	ldr	r6, [r3, #0]
  403728:	f446 1600 	orr.w	r6, r6, #2097152	; 0x200000
  40372c:	601e      	str	r6, [r3, #0]
	REG_PIOA_IFSCER |= PIO_IFSCER_P21; //turn on slow clock debounce
  40372e:	680e      	ldr	r6, [r1, #0]
  403730:	f446 1600 	orr.w	r6, r6, #2097152	; 0x200000
  403734:	600e      	str	r6, [r1, #0]
	REG_PIOA_IFER |= PIO_IFER_P21;	//start debounce filter
  403736:	6816      	ldr	r6, [r2, #0]
  403738:	f446 1600 	orr.w	r6, r6, #2097152	; 0x200000
  40373c:	6016      	str	r6, [r2, #0]



	//Set up PA22 as AUX ENC 5 INPUT A
	REG_PIOA_PER |= PIO_PER_P22; //enable PIO controller
  40373e:	682e      	ldr	r6, [r5, #0]
  403740:	f446 0680 	orr.w	r6, r6, #4194304	; 0x400000
  403744:	602e      	str	r6, [r5, #0]
	REG_PIOA_ODR |= PIO_ODR_P22; //disable output
  403746:	6826      	ldr	r6, [r4, #0]
  403748:	f446 0680 	orr.w	r6, r6, #4194304	; 0x400000
  40374c:	6026      	str	r6, [r4, #0]
	REG_PIOA_PPDDR |= PIO_PPDDR_P22; //disable pull-down resistor
  40374e:	6806      	ldr	r6, [r0, #0]
  403750:	f446 0680 	orr.w	r6, r6, #4194304	; 0x400000
  403754:	6006      	str	r6, [r0, #0]
	REG_PIOA_PUER |= PIO_PUER_P22;	//enable pull-up resistor
  403756:	681e      	ldr	r6, [r3, #0]
  403758:	f446 0680 	orr.w	r6, r6, #4194304	; 0x400000
  40375c:	601e      	str	r6, [r3, #0]
	REG_PIOA_IFSCER |= PIO_IFSCER_P22; //turn on slow clock debounce
  40375e:	680e      	ldr	r6, [r1, #0]
  403760:	f446 0680 	orr.w	r6, r6, #4194304	; 0x400000
  403764:	600e      	str	r6, [r1, #0]
	REG_PIOA_IFER |= PIO_IFER_P22;	//start debounce filter
  403766:	6816      	ldr	r6, [r2, #0]
  403768:	f446 0680 	orr.w	r6, r6, #4194304	; 0x400000
  40376c:	6016      	str	r6, [r2, #0]

	//Set up PA23 as AUX ENC 5 INPUT B
	REG_PIOA_PER |= PIO_PER_P23; //enable PIO controller
  40376e:	682e      	ldr	r6, [r5, #0]
  403770:	f446 0600 	orr.w	r6, r6, #8388608	; 0x800000
  403774:	602e      	str	r6, [r5, #0]
	REG_PIOA_ODR |= PIO_ODR_P23; //disable output
  403776:	6826      	ldr	r6, [r4, #0]
  403778:	f446 0600 	orr.w	r6, r6, #8388608	; 0x800000
  40377c:	6026      	str	r6, [r4, #0]
	REG_PIOA_PPDDR |= PIO_PPDDR_P23; //disable pull-down resistor
  40377e:	6806      	ldr	r6, [r0, #0]
  403780:	f446 0600 	orr.w	r6, r6, #8388608	; 0x800000
  403784:	6006      	str	r6, [r0, #0]
	REG_PIOA_PUER |= PIO_PUER_P23;	//enable pull-up resistor
  403786:	681e      	ldr	r6, [r3, #0]
  403788:	e022      	b.n	4037d0 <init_sequencer_controls+0x2ec>
  40378a:	bf00      	nop
  40378c:	2000099a 	.word	0x2000099a
  403790:	20000996 	.word	0x20000996
  403794:	200009a5 	.word	0x200009a5
  403798:	20000995 	.word	0x20000995
  40379c:	200009a4 	.word	0x200009a4
  4037a0:	2000099c 	.word	0x2000099c
  4037a4:	20000994 	.word	0x20000994
  4037a8:	20000998 	.word	0x20000998
  4037ac:	20000997 	.word	0x20000997
  4037b0:	200009a6 	.word	0x200009a6
  4037b4:	400e0410 	.word	0x400e0410
  4037b8:	400e0e00 	.word	0x400e0e00
  4037bc:	400e0e14 	.word	0x400e0e14
  4037c0:	400e0e90 	.word	0x400e0e90
  4037c4:	400e0e64 	.word	0x400e0e64
  4037c8:	400e0e10 	.word	0x400e0e10
  4037cc:	400e0e20 	.word	0x400e0e20
  4037d0:	f446 0600 	orr.w	r6, r6, #8388608	; 0x800000
  4037d4:	601e      	str	r6, [r3, #0]
	REG_PIOA_IFSCER |= PIO_IFSCER_P23; //turn on slow clock debounce
  4037d6:	680e      	ldr	r6, [r1, #0]
  4037d8:	f446 0600 	orr.w	r6, r6, #8388608	; 0x800000
  4037dc:	600e      	str	r6, [r1, #0]
	REG_PIOA_IFER |= PIO_IFER_P23;	//start debounce filter
  4037de:	6816      	ldr	r6, [r2, #0]
  4037e0:	f446 0600 	orr.w	r6, r6, #8388608	; 0x800000
  4037e4:	6016      	str	r6, [r2, #0]



	//Set up PA24 as AUX ENC 6 INPUT A
	REG_PIOA_PER |= PIO_PER_P24; //enable PIO controller
  4037e6:	682e      	ldr	r6, [r5, #0]
  4037e8:	f046 7680 	orr.w	r6, r6, #16777216	; 0x1000000
  4037ec:	602e      	str	r6, [r5, #0]
	REG_PIOA_ODR |= PIO_ODR_P24; //disable output
  4037ee:	6826      	ldr	r6, [r4, #0]
  4037f0:	f046 7680 	orr.w	r6, r6, #16777216	; 0x1000000
  4037f4:	6026      	str	r6, [r4, #0]
	REG_PIOA_PPDDR |= PIO_PPDDR_P24; //disable pull-down resistor
  4037f6:	6806      	ldr	r6, [r0, #0]
  4037f8:	f046 7680 	orr.w	r6, r6, #16777216	; 0x1000000
  4037fc:	6006      	str	r6, [r0, #0]
	REG_PIOA_PUER |= PIO_PUER_P24;	//enable pull-up resistor
  4037fe:	681e      	ldr	r6, [r3, #0]
  403800:	f046 7680 	orr.w	r6, r6, #16777216	; 0x1000000
  403804:	601e      	str	r6, [r3, #0]
	REG_PIOA_IFSCER |= PIO_IFSCER_P24; //turn on slow clock debounce
  403806:	680e      	ldr	r6, [r1, #0]
  403808:	f046 7680 	orr.w	r6, r6, #16777216	; 0x1000000
  40380c:	600e      	str	r6, [r1, #0]
	REG_PIOA_IFER |= PIO_IFER_P24;	//start debounce filter
  40380e:	6816      	ldr	r6, [r2, #0]
  403810:	f046 7680 	orr.w	r6, r6, #16777216	; 0x1000000
  403814:	6016      	str	r6, [r2, #0]

	//Set up PA25 as AUX ENC 6 INPUT B
	REG_PIOA_PER |= PIO_PER_P25; //enable PIO controller
  403816:	682e      	ldr	r6, [r5, #0]
  403818:	f046 7600 	orr.w	r6, r6, #33554432	; 0x2000000
  40381c:	602e      	str	r6, [r5, #0]
	REG_PIOA_ODR |= PIO_ODR_P25; //disable output
  40381e:	6826      	ldr	r6, [r4, #0]
  403820:	f046 7600 	orr.w	r6, r6, #33554432	; 0x2000000
  403824:	6026      	str	r6, [r4, #0]
	REG_PIOA_PPDDR |= PIO_PPDDR_P25; //disable pull-down resistor
  403826:	6806      	ldr	r6, [r0, #0]
  403828:	f046 7600 	orr.w	r6, r6, #33554432	; 0x2000000
  40382c:	6006      	str	r6, [r0, #0]
	REG_PIOA_PUER |= PIO_PUER_P25;	//enable pull-up resistor
  40382e:	681e      	ldr	r6, [r3, #0]
  403830:	f046 7600 	orr.w	r6, r6, #33554432	; 0x2000000
  403834:	601e      	str	r6, [r3, #0]
	REG_PIOA_IFSCER |= PIO_IFSCER_P25; //turn on slow clock debounce
  403836:	680e      	ldr	r6, [r1, #0]
  403838:	f046 7600 	orr.w	r6, r6, #33554432	; 0x2000000
  40383c:	600e      	str	r6, [r1, #0]
	REG_PIOA_IFER |= PIO_IFER_P25;	//start debounce filter
  40383e:	6816      	ldr	r6, [r2, #0]
  403840:	f046 7600 	orr.w	r6, r6, #33554432	; 0x2000000
  403844:	6016      	str	r6, [r2, #0]



	//Set up PA26 as AUX ENC 7 INPUT A
	REG_PIOA_PER |= PIO_PER_P26; //enable PIO controller
  403846:	682e      	ldr	r6, [r5, #0]
  403848:	f046 6680 	orr.w	r6, r6, #67108864	; 0x4000000
  40384c:	602e      	str	r6, [r5, #0]
	REG_PIOA_ODR |= PIO_ODR_P26; //disable output
  40384e:	6826      	ldr	r6, [r4, #0]
  403850:	f046 6680 	orr.w	r6, r6, #67108864	; 0x4000000
  403854:	6026      	str	r6, [r4, #0]
	REG_PIOA_PPDDR |= PIO_PPDDR_P26; //disable pull-down resistor
  403856:	6806      	ldr	r6, [r0, #0]
  403858:	f046 6680 	orr.w	r6, r6, #67108864	; 0x4000000
  40385c:	6006      	str	r6, [r0, #0]
	REG_PIOA_PUER |= PIO_PUER_P26;	//enable pull-up resistor
  40385e:	681e      	ldr	r6, [r3, #0]
  403860:	f046 6680 	orr.w	r6, r6, #67108864	; 0x4000000
  403864:	601e      	str	r6, [r3, #0]
	REG_PIOA_IFSCER |= PIO_IFSCER_P26; //turn on slow clock debounce
  403866:	680e      	ldr	r6, [r1, #0]
  403868:	f046 6680 	orr.w	r6, r6, #67108864	; 0x4000000
  40386c:	600e      	str	r6, [r1, #0]
	REG_PIOA_IFER |= PIO_IFER_P26;	//start debounce filter
  40386e:	6816      	ldr	r6, [r2, #0]
  403870:	f046 6680 	orr.w	r6, r6, #67108864	; 0x4000000
  403874:	6016      	str	r6, [r2, #0]

	//Set up PA27 as AUX ENC 7 INPUT B
	REG_PIOA_PER |= PIO_PER_P27; //enable PIO controller
  403876:	682e      	ldr	r6, [r5, #0]
  403878:	f046 6600 	orr.w	r6, r6, #134217728	; 0x8000000
  40387c:	602e      	str	r6, [r5, #0]
	REG_PIOA_ODR |= PIO_ODR_P27; //disable output
  40387e:	6825      	ldr	r5, [r4, #0]
  403880:	f045 6500 	orr.w	r5, r5, #134217728	; 0x8000000
  403884:	6025      	str	r5, [r4, #0]
	REG_PIOA_PPDDR |= PIO_PPDDR_P27; //disable pull-down resistor
  403886:	6804      	ldr	r4, [r0, #0]
  403888:	f044 6400 	orr.w	r4, r4, #134217728	; 0x8000000
  40388c:	6004      	str	r4, [r0, #0]
	REG_PIOA_PUER |= PIO_PUER_P27;	//enable pull-up resistor
  40388e:	6818      	ldr	r0, [r3, #0]
  403890:	f040 6000 	orr.w	r0, r0, #134217728	; 0x8000000
  403894:	6018      	str	r0, [r3, #0]
	REG_PIOA_IFSCER |= PIO_IFSCER_P27; //turn on slow clock debounce
  403896:	680b      	ldr	r3, [r1, #0]
  403898:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
  40389c:	600b      	str	r3, [r1, #0]
	REG_PIOA_IFER |= PIO_IFER_P27;	//start debounce filter
  40389e:	6813      	ldr	r3, [r2, #0]
  4038a0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
  4038a4:	6013      	str	r3, [r2, #0]


	/**************			CONFIGURE AUX ENCODER INTERRUPTS			**************/

	uint32_t flag_clear = REG_PIOA_ISR;	//clear left over interrupt flags
  4038a6:	4b4d      	ldr	r3, [pc, #308]	; (4039dc <init_sequencer_controls+0x4f8>)
  4038a8:	681b      	ldr	r3, [r3, #0]

	//configure interrupt for pause/play button
	REG_PIOA_IER |= PIO_IER_P2;			//enable input rising edge interrupt
  4038aa:	4b4d      	ldr	r3, [pc, #308]	; (4039e0 <init_sequencer_controls+0x4fc>)
  4038ac:	6818      	ldr	r0, [r3, #0]
  4038ae:	f040 0004 	orr.w	r0, r0, #4
  4038b2:	6018      	str	r0, [r3, #0]
	REG_PIOA_FELLSR |= PIO_FELLSR_P2;
  4038b4:	4c4b      	ldr	r4, [pc, #300]	; (4039e4 <init_sequencer_controls+0x500>)
  4038b6:	6820      	ldr	r0, [r4, #0]
  4038b8:	f040 0004 	orr.w	r0, r0, #4
  4038bc:	6020      	str	r0, [r4, #0]
	REG_PIOA_IFSCER |= PIO_IFSCER_P2; //turn on slow clock debounce
  4038be:	6808      	ldr	r0, [r1, #0]
  4038c0:	f040 0004 	orr.w	r0, r0, #4
  4038c4:	6008      	str	r0, [r1, #0]
	REG_PIOA_IFER |= PIO_IFER_P2;	//start debounce filter
  4038c6:	6811      	ldr	r1, [r2, #0]
  4038c8:	f041 0104 	orr.w	r1, r1, #4
  4038cc:	6011      	str	r1, [r2, #0]

	//Enable interrupts for Aux Encoder 0
	REG_PIOA_IER |= PIO_IER_P0;			//enable input rising edge interrupt
  4038ce:	681a      	ldr	r2, [r3, #0]
  4038d0:	f042 0201 	orr.w	r2, r2, #1
  4038d4:	601a      	str	r2, [r3, #0]
	REG_PIOA_REHLSR |= PIO_REHLSR_P0;
  4038d6:	4a44      	ldr	r2, [pc, #272]	; (4039e8 <init_sequencer_controls+0x504>)
  4038d8:	6811      	ldr	r1, [r2, #0]
  4038da:	f041 0101 	orr.w	r1, r1, #1
  4038de:	6011      	str	r1, [r2, #0]
	REG_PIOA_IER |= PIO_IER_P1;			//enable input rising edge interrupt
  4038e0:	6819      	ldr	r1, [r3, #0]
  4038e2:	f041 0102 	orr.w	r1, r1, #2
  4038e6:	6019      	str	r1, [r3, #0]
	REG_PIOA_REHLSR |= PIO_REHLSR_P1;
  4038e8:	6811      	ldr	r1, [r2, #0]
  4038ea:	f041 0102 	orr.w	r1, r1, #2
  4038ee:	6011      	str	r1, [r2, #0]

	//Enable interrupts for Aux Encoder 1
	REG_PIOA_IER |= PIO_IER_P6;			//enable input rising edge interrupt
  4038f0:	6819      	ldr	r1, [r3, #0]
  4038f2:	f041 0140 	orr.w	r1, r1, #64	; 0x40
  4038f6:	6019      	str	r1, [r3, #0]
	REG_PIOA_REHLSR |= PIO_REHLSR_P6;
  4038f8:	6811      	ldr	r1, [r2, #0]
  4038fa:	f041 0140 	orr.w	r1, r1, #64	; 0x40
  4038fe:	6011      	str	r1, [r2, #0]
	REG_PIOA_IER |= PIO_IER_P7;			//enable input rising edge interrupt
  403900:	6819      	ldr	r1, [r3, #0]
  403902:	f041 0180 	orr.w	r1, r1, #128	; 0x80
  403906:	6019      	str	r1, [r3, #0]
	REG_PIOA_REHLSR |= PIO_REHLSR_P7;
  403908:	6811      	ldr	r1, [r2, #0]
  40390a:	f041 0180 	orr.w	r1, r1, #128	; 0x80
  40390e:	6011      	str	r1, [r2, #0]

	//Enable interrupts for Aux Encoder 2
	REG_PIOA_IER |= PIO_IER_P8;			//enable input rising edge interrupt
  403910:	6819      	ldr	r1, [r3, #0]
  403912:	f441 7180 	orr.w	r1, r1, #256	; 0x100
  403916:	6019      	str	r1, [r3, #0]
	REG_PIOA_REHLSR |= PIO_REHLSR_P8;
  403918:	6811      	ldr	r1, [r2, #0]
  40391a:	f441 7180 	orr.w	r1, r1, #256	; 0x100
  40391e:	6011      	str	r1, [r2, #0]
	REG_PIOA_IER |= PIO_IER_P9;			//enable input rising edge interrupt
  403920:	6819      	ldr	r1, [r3, #0]
  403922:	f441 7100 	orr.w	r1, r1, #512	; 0x200
  403926:	6019      	str	r1, [r3, #0]
	REG_PIOA_REHLSR |= PIO_REHLSR_P9;
  403928:	6811      	ldr	r1, [r2, #0]
  40392a:	f441 7100 	orr.w	r1, r1, #512	; 0x200
  40392e:	6011      	str	r1, [r2, #0]

	//Enable interrupts for Aux Encoder 3
	REG_PIOA_IER |= PIO_IER_P16;			//enable input rising edge interrupt
  403930:	6819      	ldr	r1, [r3, #0]
  403932:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
  403936:	6019      	str	r1, [r3, #0]
	REG_PIOA_REHLSR |= PIO_REHLSR_P16;
  403938:	6811      	ldr	r1, [r2, #0]
  40393a:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
  40393e:	6011      	str	r1, [r2, #0]
	REG_PIOA_IER |= PIO_IER_P17;			//enable input rising edge interrupt
  403940:	6819      	ldr	r1, [r3, #0]
  403942:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
  403946:	6019      	str	r1, [r3, #0]
	REG_PIOA_REHLSR |= PIO_REHLSR_P17;
  403948:	6811      	ldr	r1, [r2, #0]
  40394a:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
  40394e:	6011      	str	r1, [r2, #0]

	//Enable interrupts for Aux Encoder 4
	REG_PIOA_IER |= PIO_IER_P20;			//enable input rising edge interrupt
  403950:	6819      	ldr	r1, [r3, #0]
  403952:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  403956:	6019      	str	r1, [r3, #0]
	REG_PIOA_REHLSR |= PIO_REHLSR_P20;
  403958:	6811      	ldr	r1, [r2, #0]
  40395a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40395e:	6011      	str	r1, [r2, #0]
	REG_PIOA_IER |= PIO_IER_P21;			//enable input rising edge interrupt
  403960:	6819      	ldr	r1, [r3, #0]
  403962:	f441 1100 	orr.w	r1, r1, #2097152	; 0x200000
  403966:	6019      	str	r1, [r3, #0]
	REG_PIOA_REHLSR |= PIO_REHLSR_P21;
  403968:	6811      	ldr	r1, [r2, #0]
  40396a:	f441 1100 	orr.w	r1, r1, #2097152	; 0x200000
  40396e:	6011      	str	r1, [r2, #0]

	//Enable interrupts for Aux Encoder 5
	REG_PIOA_IER |= PIO_IER_P22;			//enable input rising edge interrupt
  403970:	6819      	ldr	r1, [r3, #0]
  403972:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
  403976:	6019      	str	r1, [r3, #0]
	REG_PIOA_REHLSR |= PIO_REHLSR_P22;
  403978:	6811      	ldr	r1, [r2, #0]
  40397a:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
  40397e:	6011      	str	r1, [r2, #0]
	REG_PIOA_IER |= PIO_IER_P23;			//enable input rising edge interrupt
  403980:	6819      	ldr	r1, [r3, #0]
  403982:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
  403986:	6019      	str	r1, [r3, #0]
	REG_PIOA_REHLSR |= PIO_REHLSR_P23;
  403988:	6811      	ldr	r1, [r2, #0]
  40398a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
  40398e:	6011      	str	r1, [r2, #0]

	//Enable interrupts for Aux Encoder 6
	REG_PIOA_IER |= PIO_IER_P24;			//enable input rising edge interrupt
  403990:	6819      	ldr	r1, [r3, #0]
  403992:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
  403996:	6019      	str	r1, [r3, #0]
	REG_PIOA_REHLSR |= PIO_REHLSR_P24;
  403998:	6811      	ldr	r1, [r2, #0]
  40399a:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
  40399e:	6011      	str	r1, [r2, #0]
	REG_PIOA_IER |= PIO_IER_P25;			//enable input rising edge interrupt
  4039a0:	6819      	ldr	r1, [r3, #0]
  4039a2:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
  4039a6:	6019      	str	r1, [r3, #0]
	REG_PIOA_REHLSR |= PIO_REHLSR_P25;
  4039a8:	6811      	ldr	r1, [r2, #0]
  4039aa:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
  4039ae:	6011      	str	r1, [r2, #0]

	//Enable interrupts for Aux Encoder 7
	REG_PIOA_IER |= PIO_IER_P26;			//enable input rising edge interrupt
  4039b0:	6819      	ldr	r1, [r3, #0]
  4039b2:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
  4039b6:	6019      	str	r1, [r3, #0]
	REG_PIOA_REHLSR |= PIO_REHLSR_P26;
  4039b8:	6811      	ldr	r1, [r2, #0]
  4039ba:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
  4039be:	6011      	str	r1, [r2, #0]
	REG_PIOA_IER |= PIO_IER_P27;			//enable input rising edge interrupt
  4039c0:	6819      	ldr	r1, [r3, #0]
  4039c2:	f041 6100 	orr.w	r1, r1, #134217728	; 0x8000000
  4039c6:	6019      	str	r1, [r3, #0]
	REG_PIOA_REHLSR |= PIO_REHLSR_P27;
  4039c8:	6813      	ldr	r3, [r2, #0]
  4039ca:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
  4039ce:	6013      	str	r3, [r2, #0]
  4039d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
  4039d4:	4b05      	ldr	r3, [pc, #20]	; (4039ec <init_sequencer_controls+0x508>)
  4039d6:	601a      	str	r2, [r3, #0]

	NVIC_EnableIRQ(PIOA_IRQn);			//enable PORT A interrupts


 }
  4039d8:	bc70      	pop	{r4, r5, r6}
  4039da:	4770      	bx	lr
  4039dc:	400e0e4c 	.word	0x400e0e4c
  4039e0:	400e0e40 	.word	0x400e0e40
  4039e4:	400e0ed0 	.word	0x400e0ed0
  4039e8:	400e0ed4 	.word	0x400e0ed4
  4039ec:	e000e100 	.word	0xe000e100

004039f0 <PIOA_Handler>:


 void PIOA_Handler(){
  4039f0:	b538      	push	{r3, r4, r5, lr}

	 uint32_t status = REG_PIOA_ISR;	//read PIOC interrupt status & clear interrupt flags
  4039f2:	4b49      	ldr	r3, [pc, #292]	; (403b18 <PIOA_Handler+0x128>)
  4039f4:	681b      	ldr	r3, [r3, #0]

	 //check if Aux Encoder 1 was rotated
	 if ( (status & PIO_ISR_P0) || (status & PIO_ISR_P1) ){
  4039f6:	f013 0f03 	tst.w	r3, #3
  4039fa:	d005      	beq.n	403a08 <PIOA_Handler+0x18>
		 control_direction(PIO_ODSR_P0, PIO_ODSR_P1, 0);
  4039fc:	2200      	movs	r2, #0
  4039fe:	2102      	movs	r1, #2
  403a00:	2001      	movs	r0, #1
  403a02:	4b46      	ldr	r3, [pc, #280]	; (403b1c <PIOA_Handler+0x12c>)
  403a04:	4798      	blx	r3
  403a06:	bd38      	pop	{r3, r4, r5, pc}
	 }
	 
	 //check if Pause/Play button was pushed
	 else if ( (status & PIO_ISR_P2) ){
  403a08:	f013 0f04 	tst.w	r3, #4
  403a0c:	d036      	beq.n	403a7c <PIOA_Handler+0x8c>
		pause_count++;
  403a0e:	4a44      	ldr	r2, [pc, #272]	; (403b20 <PIOA_Handler+0x130>)
  403a10:	7813      	ldrb	r3, [r2, #0]
  403a12:	3301      	adds	r3, #1
  403a14:	b2db      	uxtb	r3, r3
  403a16:	7013      	strb	r3, [r2, #0]
		if (pause_count == 2){
  403a18:	2b02      	cmp	r3, #2
  403a1a:	d17c      	bne.n	403b16 <PIOA_Handler+0x126>
			if (pause == 0){
  403a1c:	4b41      	ldr	r3, [pc, #260]	; (403b24 <PIOA_Handler+0x134>)
  403a1e:	781b      	ldrb	r3, [r3, #0]
  403a20:	b9cb      	cbnz	r3, 403a56 <PIOA_Handler+0x66>
				REG_PIOA_CODR |= PIO_CODR_P18;
  403a22:	4a41      	ldr	r2, [pc, #260]	; (403b28 <PIOA_Handler+0x138>)
  403a24:	6813      	ldr	r3, [r2, #0]
  403a26:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
  403a2a:	6013      	str	r3, [r2, #0]
				pause = 1;
  403a2c:	2501      	movs	r5, #1
  403a2e:	4b3d      	ldr	r3, [pc, #244]	; (403b24 <PIOA_Handler+0x134>)
  403a30:	701d      	strb	r5, [r3, #0]

				DAC_write_gate_off(CHANNEL_1);
  403a32:	2000      	movs	r0, #0
  403a34:	4c3d      	ldr	r4, [pc, #244]	; (403b2c <PIOA_Handler+0x13c>)
  403a36:	47a0      	blx	r4
				DAC_write_gate_off(CHANNEL_2);
  403a38:	4628      	mov	r0, r5
  403a3a:	47a0      	blx	r4
				DAC_write_gate_off(CHANNEL_3);
  403a3c:	2002      	movs	r0, #2
  403a3e:	47a0      	blx	r4
				DAC_write_gate_off(CHANNEL_4);
  403a40:	2003      	movs	r0, #3
  403a42:	47a0      	blx	r4

				overflow_count = 0;	
  403a44:	2200      	movs	r2, #0
  403a46:	4b3a      	ldr	r3, [pc, #232]	; (403b30 <PIOA_Handler+0x140>)
  403a48:	801a      	strh	r2, [r3, #0]
				REG_TC0_CCR0 |= TC_CCR_CLKDIS;
  403a4a:	4a3a      	ldr	r2, [pc, #232]	; (403b34 <PIOA_Handler+0x144>)
  403a4c:	6813      	ldr	r3, [r2, #0]
  403a4e:	f043 0302 	orr.w	r3, r3, #2
  403a52:	6013      	str	r3, [r2, #0]
  403a54:	e00e      	b.n	403a74 <PIOA_Handler+0x84>
			}
			else if (pause == 1){
  403a56:	2b01      	cmp	r3, #1
  403a58:	d10c      	bne.n	403a74 <PIOA_Handler+0x84>
				REG_PIOA_SODR |= PIO_SODR_P18; 
  403a5a:	4a37      	ldr	r2, [pc, #220]	; (403b38 <PIOA_Handler+0x148>)
  403a5c:	6813      	ldr	r3, [r2, #0]
  403a5e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
  403a62:	6013      	str	r3, [r2, #0]
				pause = 0;
  403a64:	2200      	movs	r2, #0
  403a66:	4b2f      	ldr	r3, [pc, #188]	; (403b24 <PIOA_Handler+0x134>)
  403a68:	701a      	strb	r2, [r3, #0]
				REG_TC0_CCR0 |= TC_CCR_CLKEN | TC_CCR_SWTRG;
  403a6a:	4a32      	ldr	r2, [pc, #200]	; (403b34 <PIOA_Handler+0x144>)
  403a6c:	6813      	ldr	r3, [r2, #0]
  403a6e:	f043 0305 	orr.w	r3, r3, #5
  403a72:	6013      	str	r3, [r2, #0]
			}
			pause_count= 0;
  403a74:	2200      	movs	r2, #0
  403a76:	4b2a      	ldr	r3, [pc, #168]	; (403b20 <PIOA_Handler+0x130>)
  403a78:	701a      	strb	r2, [r3, #0]
  403a7a:	bd38      	pop	{r3, r4, r5, pc}
		}
	 }

	 //check if Aux Encoder 2 was rotated
	 else if ( (status & PIO_ISR_P6) || (status & PIO_ISR_P7) ){
  403a7c:	f013 0fc0 	tst.w	r3, #192	; 0xc0
  403a80:	d005      	beq.n	403a8e <PIOA_Handler+0x9e>
		 control_direction(PIO_ODSR_P6, PIO_ODSR_P7, 1);
  403a82:	2201      	movs	r2, #1
  403a84:	2180      	movs	r1, #128	; 0x80
  403a86:	2040      	movs	r0, #64	; 0x40
  403a88:	4b24      	ldr	r3, [pc, #144]	; (403b1c <PIOA_Handler+0x12c>)
  403a8a:	4798      	blx	r3
  403a8c:	bd38      	pop	{r3, r4, r5, pc}
	 }

	 //check if Aux Encoder 3 was rotated
	 else if ( (status & PIO_ISR_P8) || (status & PIO_ISR_P9) ){
  403a8e:	f413 7f40 	tst.w	r3, #768	; 0x300
  403a92:	d007      	beq.n	403aa4 <PIOA_Handler+0xb4>
		control_direction(PIO_ODSR_P8, PIO_ODSR_P9, 2);
  403a94:	2202      	movs	r2, #2
  403a96:	f44f 7100 	mov.w	r1, #512	; 0x200
  403a9a:	f44f 7080 	mov.w	r0, #256	; 0x100
  403a9e:	4b1f      	ldr	r3, [pc, #124]	; (403b1c <PIOA_Handler+0x12c>)
  403aa0:	4798      	blx	r3
  403aa2:	bd38      	pop	{r3, r4, r5, pc}
	 }

	 else if ( (status & PIO_ISR_P10) ){
  403aa4:	f413 6f80 	tst.w	r3, #1024	; 0x400
  403aa8:	d135      	bne.n	403b16 <PIOA_Handler+0x126>
		/***************CLOCK IN INT***************/
	 }

	 //check if Aux Encoder 4 was rotated
	 else if ( (status & PIO_ISR_P16) || (status & PIO_ISR_P17) ){
  403aaa:	f413 3f40 	tst.w	r3, #196608	; 0x30000
  403aae:	d007      	beq.n	403ac0 <PIOA_Handler+0xd0>
		control_direction(PIO_ODSR_P16, PIO_ODSR_P17, 3);
  403ab0:	2203      	movs	r2, #3
  403ab2:	f44f 3100 	mov.w	r1, #131072	; 0x20000
  403ab6:	f44f 3080 	mov.w	r0, #65536	; 0x10000
  403aba:	4b18      	ldr	r3, [pc, #96]	; (403b1c <PIOA_Handler+0x12c>)
  403abc:	4798      	blx	r3
  403abe:	bd38      	pop	{r3, r4, r5, pc}
	 }

	 //check if Aux Encoder 5 was rotated
	 else if ( (status & PIO_ISR_P20) || (status & PIO_ISR_P21) ){
  403ac0:	f413 1f40 	tst.w	r3, #3145728	; 0x300000
  403ac4:	d007      	beq.n	403ad6 <PIOA_Handler+0xe6>
		control_direction(PIO_ODSR_P20, PIO_ODSR_P21, 4);
  403ac6:	2204      	movs	r2, #4
  403ac8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
  403acc:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  403ad0:	4b12      	ldr	r3, [pc, #72]	; (403b1c <PIOA_Handler+0x12c>)
  403ad2:	4798      	blx	r3
  403ad4:	bd38      	pop	{r3, r4, r5, pc}
	 }

	 //check if Aux Encoder 6 was rotated
	 else if ( (status & PIO_ISR_P22) || (status & PIO_ISR_P23) ){
  403ad6:	f413 0f40 	tst.w	r3, #12582912	; 0xc00000
  403ada:	d007      	beq.n	403aec <PIOA_Handler+0xfc>
		control_direction(PIO_ODSR_P22, PIO_ODSR_P23, 5);
  403adc:	2205      	movs	r2, #5
  403ade:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
  403ae2:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
  403ae6:	4b0d      	ldr	r3, [pc, #52]	; (403b1c <PIOA_Handler+0x12c>)
  403ae8:	4798      	blx	r3
  403aea:	bd38      	pop	{r3, r4, r5, pc}
	 }

	 //check if Aux Encoder 7 was rotated
	 else if ( (status & PIO_ISR_P24) || (status & PIO_ISR_P25) ){
  403aec:	f013 7f40 	tst.w	r3, #50331648	; 0x3000000
  403af0:	d007      	beq.n	403b02 <PIOA_Handler+0x112>
		 control_direction(PIO_ODSR_P24, PIO_ODSR_P25, 6);
  403af2:	2206      	movs	r2, #6
  403af4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
  403af8:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
  403afc:	4b07      	ldr	r3, [pc, #28]	; (403b1c <PIOA_Handler+0x12c>)
  403afe:	4798      	blx	r3
  403b00:	bd38      	pop	{r3, r4, r5, pc}
	 }
	 
	 //check if Aux Encoder 8 was rotated
	 else if ( (status & PIO_ISR_P26) || (status & PIO_ISR_P27) ){
  403b02:	f013 6f40 	tst.w	r3, #201326592	; 0xc000000
  403b06:	d006      	beq.n	403b16 <PIOA_Handler+0x126>
		 control_direction(PIO_ODSR_P26, PIO_ODSR_P27, 7);
  403b08:	2207      	movs	r2, #7
  403b0a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  403b0e:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
  403b12:	4b02      	ldr	r3, [pc, #8]	; (403b1c <PIOA_Handler+0x12c>)
  403b14:	4798      	blx	r3
  403b16:	bd38      	pop	{r3, r4, r5, pc}
  403b18:	400e0e4c 	.word	0x400e0e4c
  403b1c:	00402fa1 	.word	0x00402fa1
  403b20:	20000998 	.word	0x20000998
  403b24:	20000994 	.word	0x20000994
  403b28:	400e0e34 	.word	0x400e0e34
  403b2c:	004006a9 	.word	0x004006a9
  403b30:	20000970 	.word	0x20000970
  403b34:	40010000 	.word	0x40010000
  403b38:	400e0e30 	.word	0x400e0e30

00403b3c <SPI_modeSelect>:
    Mode0		0		1
    Mode1		0		0
    Mode2		1		1
    Mode3		1		0
    */
    if (mode == 0){
  403b3c:	b948      	cbnz	r0, 403b52 <SPI_modeSelect+0x16>
        REG_SPI_CSR &= ~SPI_CSR_CPOL;
  403b3e:	4b17      	ldr	r3, [pc, #92]	; (403b9c <SPI_modeSelect+0x60>)
  403b40:	681a      	ldr	r2, [r3, #0]
  403b42:	f022 0201 	bic.w	r2, r2, #1
  403b46:	601a      	str	r2, [r3, #0]
        REG_SPI_CSR |= SPI_CSR_NCPHA;
  403b48:	681a      	ldr	r2, [r3, #0]
  403b4a:	f042 0202 	orr.w	r2, r2, #2
  403b4e:	601a      	str	r2, [r3, #0]
  403b50:	4770      	bx	lr
    }
    else if (mode == 1){
  403b52:	2801      	cmp	r0, #1
  403b54:	d109      	bne.n	403b6a <SPI_modeSelect+0x2e>
        REG_SPI_CSR &= ~SPI_CSR_CPOL;
  403b56:	4b11      	ldr	r3, [pc, #68]	; (403b9c <SPI_modeSelect+0x60>)
  403b58:	681a      	ldr	r2, [r3, #0]
  403b5a:	f022 0201 	bic.w	r2, r2, #1
  403b5e:	601a      	str	r2, [r3, #0]
        REG_SPI_CSR &= ~SPI_CSR_NCPHA;
  403b60:	681a      	ldr	r2, [r3, #0]
  403b62:	f022 0202 	bic.w	r2, r2, #2
  403b66:	601a      	str	r2, [r3, #0]
  403b68:	4770      	bx	lr
    }
    else if (mode == 2){
  403b6a:	2802      	cmp	r0, #2
  403b6c:	d109      	bne.n	403b82 <SPI_modeSelect+0x46>
        REG_SPI_CSR |= SPI_CSR_CPOL;
  403b6e:	4b0b      	ldr	r3, [pc, #44]	; (403b9c <SPI_modeSelect+0x60>)
  403b70:	681a      	ldr	r2, [r3, #0]
  403b72:	f042 0201 	orr.w	r2, r2, #1
  403b76:	601a      	str	r2, [r3, #0]
        REG_SPI_CSR |= SPI_CSR_NCPHA;
  403b78:	681a      	ldr	r2, [r3, #0]
  403b7a:	f042 0202 	orr.w	r2, r2, #2
  403b7e:	601a      	str	r2, [r3, #0]
  403b80:	4770      	bx	lr
    }
    else if (mode == 3){
  403b82:	2803      	cmp	r0, #3
  403b84:	d108      	bne.n	403b98 <SPI_modeSelect+0x5c>
        REG_SPI_CSR |= SPI_CSR_CPOL;
  403b86:	4b05      	ldr	r3, [pc, #20]	; (403b9c <SPI_modeSelect+0x60>)
  403b88:	681a      	ldr	r2, [r3, #0]
  403b8a:	f042 0201 	orr.w	r2, r2, #1
  403b8e:	601a      	str	r2, [r3, #0]
        REG_SPI_CSR &= ~SPI_CSR_NCPHA;
  403b90:	681a      	ldr	r2, [r3, #0]
  403b92:	f022 0202 	bic.w	r2, r2, #2
  403b96:	601a      	str	r2, [r3, #0]
  403b98:	4770      	bx	lr
  403b9a:	bf00      	nop
  403b9c:	40008030 	.word	0x40008030

00403ba0 <SPI_led_init>:
    }
}

void SPI_led_init(){
  403ba0:	b508      	push	{r3, lr}

	//enable peripheral clock
	REG_PMC_PCER0 |= PMC_PCER0_PID21;
  403ba2:	4a14      	ldr	r2, [pc, #80]	; (403bf4 <SPI_led_init+0x54>)
  403ba4:	6813      	ldr	r3, [r2, #0]
  403ba6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
  403baa:	6013      	str	r3, [r2, #0]

	//set spi master mode
	REG_SPI_MR |= SPI_MR_MSTR;
  403bac:	4b12      	ldr	r3, [pc, #72]	; (403bf8 <SPI_led_init+0x58>)
  403bae:	681a      	ldr	r2, [r3, #0]
  403bb0:	f042 0201 	orr.w	r2, r2, #1
  403bb4:	601a      	str	r2, [r3, #0]

	//set fixed peripheral select(peripheral chosen in SP_MR.PCS instead of SPI_THR.PCS)
	REG_SPI_MR &= ~SPI_MR_PS;
  403bb6:	681a      	ldr	r2, [r3, #0]
  403bb8:	f022 0202 	bic.w	r2, r2, #2
  403bbc:	601a      	str	r2, [r3, #0]
	//REG_SPI_MR |= SPI_MR_PCS(0b1110);

	//set polarity and clock phase to rising edge sample, falling edge shift
	SPI_modeSelect(0);
  403bbe:	2000      	movs	r0, #0
  403bc0:	4b0e      	ldr	r3, [pc, #56]	; (403bfc <SPI_led_init+0x5c>)
  403bc2:	4798      	blx	r3

	//set clock generator (1 = peripheral clock rate), otherwise a divisor
	//SCBR = fperipheral clock / SPCK Bit Rate
	REG_SPI_CSR |= SPI_CSR_SCBR(5);
  403bc4:	4a0e      	ldr	r2, [pc, #56]	; (403c00 <SPI_led_init+0x60>)
  403bc6:	6813      	ldr	r3, [r2, #0]
  403bc8:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
  403bcc:	6013      	str	r3, [r2, #0]

	//chip select remains low after transfer
	//REG_SPI_CSR |= SPI_CSR_CSNAAT;

	//give peripheral control of pins 
	REG_PIOA_PDR |= PIO_PDR_P11; //NPCS0
  403bce:	4b0d      	ldr	r3, [pc, #52]	; (403c04 <SPI_led_init+0x64>)
  403bd0:	681a      	ldr	r2, [r3, #0]
  403bd2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
  403bd6:	601a      	str	r2, [r3, #0]
	REG_PIOA_PDR |= PIO_PDR_P13; //MOSI
  403bd8:	681a      	ldr	r2, [r3, #0]
  403bda:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  403bde:	601a      	str	r2, [r3, #0]
	REG_PIOA_PDR |= PIO_PDR_P14; //SSCK
  403be0:	681a      	ldr	r2, [r3, #0]
  403be2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
  403be6:	601a      	str	r2, [r3, #0]

	//enable SPI
	REG_SPI_CR |= SPI_CR_SPIEN;
  403be8:	4a07      	ldr	r2, [pc, #28]	; (403c08 <SPI_led_init+0x68>)
  403bea:	6813      	ldr	r3, [r2, #0]
  403bec:	f043 0301 	orr.w	r3, r3, #1
  403bf0:	6013      	str	r3, [r2, #0]
  403bf2:	bd08      	pop	{r3, pc}
  403bf4:	400e0410 	.word	0x400e0410
  403bf8:	40008004 	.word	0x40008004
  403bfc:	00403b3d 	.word	0x00403b3d
  403c00:	40008030 	.word	0x40008030
  403c04:	400e0e04 	.word	0x400e0e04
  403c08:	40008000 	.word	0x40008000

00403c0c <SPI_dac_init>:


}

void SPI_dac_init(){
  403c0c:	b508      	push	{r3, lr}

	//Chip Selects for the DACs / CVs
	REG_PIOB_PER |= PIO_PER_P13; //enable PIO controller on PB13
  403c0e:	493a      	ldr	r1, [pc, #232]	; (403cf8 <SPI_dac_init+0xec>)
  403c10:	680b      	ldr	r3, [r1, #0]
  403c12:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  403c16:	600b      	str	r3, [r1, #0]
	REG_PIOB_OER |= PIO_PER_P13; //enable output on pin PB13
  403c18:	4a38      	ldr	r2, [pc, #224]	; (403cfc <SPI_dac_init+0xf0>)
  403c1a:	6813      	ldr	r3, [r2, #0]
  403c1c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  403c20:	6013      	str	r3, [r2, #0]
	REG_PIOB_SODR |=  PIO_PER_P13;
  403c22:	4b37      	ldr	r3, [pc, #220]	; (403d00 <SPI_dac_init+0xf4>)
  403c24:	6818      	ldr	r0, [r3, #0]
  403c26:	f440 5000 	orr.w	r0, r0, #8192	; 0x2000
  403c2a:	6018      	str	r0, [r3, #0]

	REG_PIOB_PER |= PIO_PER_P14; //enable PIO controller on PB14
  403c2c:	6808      	ldr	r0, [r1, #0]
  403c2e:	f440 4080 	orr.w	r0, r0, #16384	; 0x4000
  403c32:	6008      	str	r0, [r1, #0]
	REG_PIOB_OER |= PIO_PER_P14; //enable output on pin PB14
  403c34:	6810      	ldr	r0, [r2, #0]
  403c36:	f440 4080 	orr.w	r0, r0, #16384	; 0x4000
  403c3a:	6010      	str	r0, [r2, #0]
	REG_PIOB_SODR |=  PIO_PER_P14;
  403c3c:	6818      	ldr	r0, [r3, #0]
  403c3e:	f440 4080 	orr.w	r0, r0, #16384	; 0x4000
  403c42:	6018      	str	r0, [r3, #0]

	//Outputs for the Gates
	REG_PIOB_PER |= PIO_PER_P0; //enable PIO controller on PB13
  403c44:	6808      	ldr	r0, [r1, #0]
  403c46:	f040 0001 	orr.w	r0, r0, #1
  403c4a:	6008      	str	r0, [r1, #0]
	REG_PIOB_OER |= PIO_PER_P0; //enable output on pin PB13
  403c4c:	6810      	ldr	r0, [r2, #0]
  403c4e:	f040 0001 	orr.w	r0, r0, #1
  403c52:	6010      	str	r0, [r2, #0]
	REG_PIOB_SODR |=  PIO_PER_P0;
  403c54:	6818      	ldr	r0, [r3, #0]
  403c56:	f040 0001 	orr.w	r0, r0, #1
  403c5a:	6018      	str	r0, [r3, #0]

	REG_PIOB_PER |= PIO_PER_P1; //enable PIO controller on PB13
  403c5c:	6808      	ldr	r0, [r1, #0]
  403c5e:	f040 0002 	orr.w	r0, r0, #2
  403c62:	6008      	str	r0, [r1, #0]
	REG_PIOB_OER |= PIO_PER_P1; //enable output on pin PB13
  403c64:	6810      	ldr	r0, [r2, #0]
  403c66:	f040 0002 	orr.w	r0, r0, #2
  403c6a:	6010      	str	r0, [r2, #0]
	REG_PIOB_SODR |=  PIO_PER_P1;
  403c6c:	6818      	ldr	r0, [r3, #0]
  403c6e:	f040 0002 	orr.w	r0, r0, #2
  403c72:	6018      	str	r0, [r3, #0]

	REG_PIOB_PER |= PIO_PER_P2; //enable PIO controller on PB13
  403c74:	6808      	ldr	r0, [r1, #0]
  403c76:	f040 0004 	orr.w	r0, r0, #4
  403c7a:	6008      	str	r0, [r1, #0]
	REG_PIOB_OER |= PIO_PER_P2; //enable output on pin PB13
  403c7c:	6810      	ldr	r0, [r2, #0]
  403c7e:	f040 0004 	orr.w	r0, r0, #4
  403c82:	6010      	str	r0, [r2, #0]
	REG_PIOB_SODR |=  PIO_PER_P2;
  403c84:	6818      	ldr	r0, [r3, #0]
  403c86:	f040 0004 	orr.w	r0, r0, #4
  403c8a:	6018      	str	r0, [r3, #0]

	REG_PIOB_PER |= PIO_PER_P3; //enable PIO controller on PB13
  403c8c:	6808      	ldr	r0, [r1, #0]
  403c8e:	f040 0008 	orr.w	r0, r0, #8
  403c92:	6008      	str	r0, [r1, #0]
	REG_PIOB_OER |= PIO_PER_P3; //enable output on pin PB13
  403c94:	6811      	ldr	r1, [r2, #0]
  403c96:	f041 0108 	orr.w	r1, r1, #8
  403c9a:	6011      	str	r1, [r2, #0]
	REG_PIOB_SODR |=  PIO_PER_P3;
  403c9c:	681a      	ldr	r2, [r3, #0]
  403c9e:	f042 0208 	orr.w	r2, r2, #8
  403ca2:	601a      	str	r2, [r3, #0]

	//enable peripheral clock
	REG_PMC_PCER0 |= PMC_PCER0_PID21;
  403ca4:	4a17      	ldr	r2, [pc, #92]	; (403d04 <SPI_dac_init+0xf8>)
  403ca6:	6813      	ldr	r3, [r2, #0]
  403ca8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
  403cac:	6013      	str	r3, [r2, #0]

	//set spi master mode
	REG_SPI_MR |= SPI_MR_MSTR;
  403cae:	4b16      	ldr	r3, [pc, #88]	; (403d08 <SPI_dac_init+0xfc>)
  403cb0:	681a      	ldr	r2, [r3, #0]
  403cb2:	f042 0201 	orr.w	r2, r2, #1
  403cb6:	601a      	str	r2, [r3, #0]

	//set fixed peripheral select(peripheral chosen in SP_MR.PCS instead of SPI_THR.PCS)
	REG_SPI_MR &= ~SPI_MR_PS;
  403cb8:	681a      	ldr	r2, [r3, #0]
  403cba:	f022 0202 	bic.w	r2, r2, #2
  403cbe:	601a      	str	r2, [r3, #0]
	//REG_SPI_MR |= SPI_MR_PCS(0b1101);

	//set polarity and clock phase to rising edge sample, falling edge shift
	SPI_modeSelect(0);
  403cc0:	2000      	movs	r0, #0
  403cc2:	4b12      	ldr	r3, [pc, #72]	; (403d0c <SPI_dac_init+0x100>)
  403cc4:	4798      	blx	r3

	//set clock generator (1 = peripheral clock rate), otherwise a divisor
	//SCBR = fperipheral clock / SPCK Bit Rate
	REG_SPI_CSR |= SPI_CSR_SCBR(20);
  403cc6:	4a12      	ldr	r2, [pc, #72]	; (403d10 <SPI_dac_init+0x104>)
  403cc8:	6813      	ldr	r3, [r2, #0]
  403cca:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
  403cce:	6013      	str	r3, [r2, #0]

	//chip select remains low after transfer
	//REG_SPI_CSR |= SPI_CSR_CSNAAT;

	//give peripheral control of pins
	REG_PIOA_PDR |= PIO_PDR_P11; //NPCS1
  403cd0:	4b10      	ldr	r3, [pc, #64]	; (403d14 <SPI_dac_init+0x108>)
  403cd2:	681a      	ldr	r2, [r3, #0]
  403cd4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
  403cd8:	601a      	str	r2, [r3, #0]
	REG_PIOA_PDR |= PIO_PDR_P13; //MOSI
  403cda:	681a      	ldr	r2, [r3, #0]
  403cdc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  403ce0:	601a      	str	r2, [r3, #0]
	REG_PIOA_PDR |= PIO_PDR_P14; //SSCK
  403ce2:	681a      	ldr	r2, [r3, #0]
  403ce4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
  403ce8:	601a      	str	r2, [r3, #0]

	//enable SPI
	REG_SPI_CR |= SPI_CR_SPIEN;
  403cea:	4a0b      	ldr	r2, [pc, #44]	; (403d18 <SPI_dac_init+0x10c>)
  403cec:	6813      	ldr	r3, [r2, #0]
  403cee:	f043 0301 	orr.w	r3, r3, #1
  403cf2:	6013      	str	r3, [r2, #0]
  403cf4:	bd08      	pop	{r3, pc}
  403cf6:	bf00      	nop
  403cf8:	400e1000 	.word	0x400e1000
  403cfc:	400e1010 	.word	0x400e1010
  403d00:	400e1030 	.word	0x400e1030
  403d04:	400e0410 	.word	0x400e0410
  403d08:	40008004 	.word	0x40008004
  403d0c:	00403b3d 	.word	0x00403b3d
  403d10:	40008030 	.word	0x40008030
  403d14:	400e0e04 	.word	0x400e0e04
  403d18:	40008000 	.word	0x40008000

00403d1c <SPI_byteSend>:

}

void SPI_byteSend(uint8_t data){
	//wait for transmit register to be empty
	while (!(REG_SPI_SR & SPI_SR_TDRE));
  403d1c:	4a04      	ldr	r2, [pc, #16]	; (403d30 <SPI_byteSend+0x14>)
  403d1e:	6813      	ldr	r3, [r2, #0]
  403d20:	f013 0f02 	tst.w	r3, #2
  403d24:	d0fb      	beq.n	403d1e <SPI_byteSend+0x2>
	//send data to transmit register
	REG_SPI_TDR |= (data);
  403d26:	4a03      	ldr	r2, [pc, #12]	; (403d34 <SPI_byteSend+0x18>)
  403d28:	6813      	ldr	r3, [r2, #0]
  403d2a:	4318      	orrs	r0, r3
  403d2c:	6010      	str	r0, [r2, #0]
  403d2e:	4770      	bx	lr
  403d30:	40008010 	.word	0x40008010
  403d34:	4000800c 	.word	0x4000800c

00403d38 <notes_get>:
	//test initializations

float notes_get(uint8_t curr_step, uint8_t channel){
	int lookup_index;

	if (channel == CHANNEL_1){
  403d38:	b959      	cbnz	r1, 403d52 <notes_get+0x1a>
		lookup_index = patterns[curr_pattern_ch[0]][curr_page_ch[0]][curr_step][0];
  403d3a:	4b1c      	ldr	r3, [pc, #112]	; (403dac <notes_get+0x74>)
  403d3c:	781a      	ldrb	r2, [r3, #0]
  403d3e:	4b1c      	ldr	r3, [pc, #112]	; (403db0 <notes_get+0x78>)
  403d40:	781b      	ldrb	r3, [r3, #0]
  403d42:	eb03 1302 	add.w	r3, r3, r2, lsl #4
  403d46:	eb00 1003 	add.w	r0, r0, r3, lsl #4
  403d4a:	4b1a      	ldr	r3, [pc, #104]	; (403db4 <notes_get+0x7c>)
  403d4c:	f853 2030 	ldr.w	r2, [r3, r0, lsl #3]
  403d50:	e028      	b.n	403da4 <notes_get+0x6c>
	}
	else if (channel == CHANNEL_2){
  403d52:	2901      	cmp	r1, #1
  403d54:	d10b      	bne.n	403d6e <notes_get+0x36>
		lookup_index = patterns[curr_pattern_ch[1]][curr_page_ch[1]][curr_step][0];
  403d56:	4b15      	ldr	r3, [pc, #84]	; (403dac <notes_get+0x74>)
  403d58:	785a      	ldrb	r2, [r3, #1]
  403d5a:	4b15      	ldr	r3, [pc, #84]	; (403db0 <notes_get+0x78>)
  403d5c:	785b      	ldrb	r3, [r3, #1]
  403d5e:	eb03 1302 	add.w	r3, r3, r2, lsl #4
  403d62:	eb00 1003 	add.w	r0, r0, r3, lsl #4
  403d66:	4b13      	ldr	r3, [pc, #76]	; (403db4 <notes_get+0x7c>)
  403d68:	f853 2030 	ldr.w	r2, [r3, r0, lsl #3]
  403d6c:	e01a      	b.n	403da4 <notes_get+0x6c>
	}
	else if (channel == CHANNEL_3){
  403d6e:	2902      	cmp	r1, #2
  403d70:	d10b      	bne.n	403d8a <notes_get+0x52>
		lookup_index = patterns[curr_pattern_ch[2]][curr_page_ch[2]][curr_step][0];
  403d72:	4b0e      	ldr	r3, [pc, #56]	; (403dac <notes_get+0x74>)
  403d74:	789a      	ldrb	r2, [r3, #2]
  403d76:	4b0e      	ldr	r3, [pc, #56]	; (403db0 <notes_get+0x78>)
  403d78:	789b      	ldrb	r3, [r3, #2]
  403d7a:	eb03 1302 	add.w	r3, r3, r2, lsl #4
  403d7e:	eb00 1003 	add.w	r0, r0, r3, lsl #4
  403d82:	4b0c      	ldr	r3, [pc, #48]	; (403db4 <notes_get+0x7c>)
  403d84:	f853 2030 	ldr.w	r2, [r3, r0, lsl #3]
  403d88:	e00c      	b.n	403da4 <notes_get+0x6c>
	}
	else if (channel == CHANNEL_4){
  403d8a:	2903      	cmp	r1, #3
  403d8c:	d10a      	bne.n	403da4 <notes_get+0x6c>
		lookup_index = patterns[curr_pattern_ch[3]][curr_page_ch[3]][curr_step][0];
  403d8e:	4b07      	ldr	r3, [pc, #28]	; (403dac <notes_get+0x74>)
  403d90:	78da      	ldrb	r2, [r3, #3]
  403d92:	4b07      	ldr	r3, [pc, #28]	; (403db0 <notes_get+0x78>)
  403d94:	78db      	ldrb	r3, [r3, #3]
  403d96:	eb03 1302 	add.w	r3, r3, r2, lsl #4
  403d9a:	eb00 1003 	add.w	r0, r0, r3, lsl #4
  403d9e:	4b05      	ldr	r3, [pc, #20]	; (403db4 <notes_get+0x7c>)
  403da0:	f853 2030 	ldr.w	r2, [r3, r0, lsl #3]
	}
	
	return notes_lookup[lookup_index];
}
  403da4:	4b04      	ldr	r3, [pc, #16]	; (403db8 <notes_get+0x80>)
  403da6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
  403daa:	4770      	bx	lr
  403dac:	20000974 	.word	0x20000974
  403db0:	2000096c 	.word	0x2000096c
  403db4:	200009b8 	.word	0x200009b8
  403db8:	20000098 	.word	0x20000098

00403dbc <notes_status_get>:

uint8_t notes_status_get(uint8_t curr_step, uint8_t channel){

	if (channel == CHANNEL_1){
  403dbc:	b961      	cbnz	r1, 403dd8 <notes_status_get+0x1c>
		return patterns[curr_pattern_ch[0]][curr_page_ch[0]][curr_step][1];
  403dbe:	4b23      	ldr	r3, [pc, #140]	; (403e4c <notes_status_get+0x90>)
  403dc0:	781a      	ldrb	r2, [r3, #0]
  403dc2:	4b23      	ldr	r3, [pc, #140]	; (403e50 <notes_status_get+0x94>)
  403dc4:	781b      	ldrb	r3, [r3, #0]
  403dc6:	eb03 1302 	add.w	r3, r3, r2, lsl #4
  403dca:	eb00 1003 	add.w	r0, r0, r3, lsl #4
  403dce:	4b21      	ldr	r3, [pc, #132]	; (403e54 <notes_status_get+0x98>)
  403dd0:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
  403dd4:	7900      	ldrb	r0, [r0, #4]
  403dd6:	4770      	bx	lr
	}
	else if (channel == CHANNEL_2){
  403dd8:	2901      	cmp	r1, #1
  403dda:	d10c      	bne.n	403df6 <notes_status_get+0x3a>
		return patterns[curr_pattern_ch[1]][curr_page_ch[1]][curr_step][1];
  403ddc:	4b1b      	ldr	r3, [pc, #108]	; (403e4c <notes_status_get+0x90>)
  403dde:	785a      	ldrb	r2, [r3, #1]
  403de0:	4b1b      	ldr	r3, [pc, #108]	; (403e50 <notes_status_get+0x94>)
  403de2:	785b      	ldrb	r3, [r3, #1]
  403de4:	eb03 1302 	add.w	r3, r3, r2, lsl #4
  403de8:	eb00 1003 	add.w	r0, r0, r3, lsl #4
  403dec:	4b19      	ldr	r3, [pc, #100]	; (403e54 <notes_status_get+0x98>)
  403dee:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
  403df2:	7900      	ldrb	r0, [r0, #4]
  403df4:	4770      	bx	lr
	}
	else if (channel == CHANNEL_3){
  403df6:	2902      	cmp	r1, #2
  403df8:	d10c      	bne.n	403e14 <notes_status_get+0x58>
		return patterns[curr_pattern_ch[2]][curr_page_ch[2]][curr_step][1];
  403dfa:	4b14      	ldr	r3, [pc, #80]	; (403e4c <notes_status_get+0x90>)
  403dfc:	789a      	ldrb	r2, [r3, #2]
  403dfe:	4b14      	ldr	r3, [pc, #80]	; (403e50 <notes_status_get+0x94>)
  403e00:	789b      	ldrb	r3, [r3, #2]
  403e02:	eb03 1302 	add.w	r3, r3, r2, lsl #4
  403e06:	eb00 1003 	add.w	r0, r0, r3, lsl #4
  403e0a:	4b12      	ldr	r3, [pc, #72]	; (403e54 <notes_status_get+0x98>)
  403e0c:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
  403e10:	7900      	ldrb	r0, [r0, #4]
  403e12:	4770      	bx	lr
	}
	else if (channel == CHANNEL_4){
  403e14:	2903      	cmp	r1, #3
  403e16:	d10c      	bne.n	403e32 <notes_status_get+0x76>
		return patterns[curr_pattern_ch[3]][curr_page_ch[3]][curr_step][1];
  403e18:	4b0c      	ldr	r3, [pc, #48]	; (403e4c <notes_status_get+0x90>)
  403e1a:	78da      	ldrb	r2, [r3, #3]
  403e1c:	4b0c      	ldr	r3, [pc, #48]	; (403e50 <notes_status_get+0x94>)
  403e1e:	78db      	ldrb	r3, [r3, #3]
  403e20:	eb03 1302 	add.w	r3, r3, r2, lsl #4
  403e24:	eb00 1003 	add.w	r0, r0, r3, lsl #4
  403e28:	4b0a      	ldr	r3, [pc, #40]	; (403e54 <notes_status_get+0x98>)
  403e2a:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
  403e2e:	7900      	ldrb	r0, [r0, #4]
  403e30:	4770      	bx	lr
	}

	//default
	return patterns[curr_pattern_ch[0]][curr_page_ch[0]][curr_step][1];
  403e32:	4b06      	ldr	r3, [pc, #24]	; (403e4c <notes_status_get+0x90>)
  403e34:	781a      	ldrb	r2, [r3, #0]
  403e36:	4b06      	ldr	r3, [pc, #24]	; (403e50 <notes_status_get+0x94>)
  403e38:	781b      	ldrb	r3, [r3, #0]
  403e3a:	eb03 1302 	add.w	r3, r3, r2, lsl #4
  403e3e:	eb00 1003 	add.w	r0, r0, r3, lsl #4
  403e42:	4b04      	ldr	r3, [pc, #16]	; (403e54 <notes_status_get+0x98>)
  403e44:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
  403e48:	7900      	ldrb	r0, [r0, #4]
}
  403e4a:	4770      	bx	lr
  403e4c:	20000974 	.word	0x20000974
  403e50:	2000096c 	.word	0x2000096c
  403e54:	200009b8 	.word	0x200009b8

00403e58 <notes_display_get>:

uint8_t notes_display_get(uint8_t display_page, uint8_t step){
	return patterns[curr_pattern][display_page][step][1];
  403e58:	4b05      	ldr	r3, [pc, #20]	; (403e70 <notes_display_get+0x18>)
  403e5a:	781b      	ldrb	r3, [r3, #0]
  403e5c:	eb00 1003 	add.w	r0, r0, r3, lsl #4
  403e60:	eb01 1000 	add.w	r0, r1, r0, lsl #4
  403e64:	4903      	ldr	r1, [pc, #12]	; (403e74 <notes_display_get+0x1c>)
  403e66:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
}
  403e6a:	7900      	ldrb	r0, [r0, #4]
  403e6c:	4770      	bx	lr
  403e6e:	bf00      	nop
  403e70:	20000958 	.word	0x20000958
  403e74:	200009b8 	.word	0x200009b8

00403e78 <notes_status_set>:

void notes_status_set(uint8_t display_page, int leds_status[]){

	/* match notes status to current display page status */
	for (int i = 0; i < 16; i++){
		patterns[curr_pattern][display_page][i][1] = leds_status[i];
  403e78:	4b07      	ldr	r3, [pc, #28]	; (403e98 <notes_status_set+0x20>)
  403e7a:	781b      	ldrb	r3, [r3, #0]
  403e7c:	1f0a      	subs	r2, r1, #4
  403e7e:	eb00 1003 	add.w	r0, r0, r3, lsl #4
  403e82:	4b06      	ldr	r3, [pc, #24]	; (403e9c <notes_status_set+0x24>)
  403e84:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
  403e88:	313c      	adds	r1, #60	; 0x3c
  403e8a:	f852 3f04 	ldr.w	r3, [r2, #4]!
  403e8e:	6043      	str	r3, [r0, #4]
  403e90:	3008      	adds	r0, #8
}

void notes_status_set(uint8_t display_page, int leds_status[]){

	/* match notes status to current display page status */
	for (int i = 0; i < 16; i++){
  403e92:	428a      	cmp	r2, r1
  403e94:	d1f9      	bne.n	403e8a <notes_status_set+0x12>
		patterns[curr_pattern][display_page][i][1] = leds_status[i];
	}

}
  403e96:	4770      	bx	lr
  403e98:	20000958 	.word	0x20000958
  403e9c:	200009b8 	.word	0x200009b8

00403ea0 <notes_clear>:

void notes_clear(uint8_t curr_pattern){
  403ea0:	b410      	push	{r4}
  403ea2:	4a0b      	ldr	r2, [pc, #44]	; (403ed0 <notes_clear+0x30>)
  403ea4:	eb02 23c0 	add.w	r3, r2, r0, lsl #11
  403ea8:	3001      	adds	r0, #1
  403eaa:	eb02 24c0 	add.w	r4, r2, r0, lsl #11
	for (int i = 0; i < 16; i++){
		for (int j = 0; j < 16; j++){
			patterns[curr_pattern][i][j][0] = 48; //set note to C4
  403eae:	2030      	movs	r0, #48	; 0x30
			patterns[curr_pattern][i][j][1]= 0;	  //turn notes all OFF
  403eb0:	2100      	movs	r1, #0
  403eb2:	e007      	b.n	403ec4 <notes_clear+0x24>
}

void notes_clear(uint8_t curr_pattern){
	for (int i = 0; i < 16; i++){
		for (int j = 0; j < 16; j++){
			patterns[curr_pattern][i][j][0] = 48; //set note to C4
  403eb4:	6018      	str	r0, [r3, #0]
			patterns[curr_pattern][i][j][1]= 0;	  //turn notes all OFF
  403eb6:	6059      	str	r1, [r3, #4]
  403eb8:	3308      	adds	r3, #8

}

void notes_clear(uint8_t curr_pattern){
	for (int i = 0; i < 16; i++){
		for (int j = 0; j < 16; j++){
  403eba:	4293      	cmp	r3, r2
  403ebc:	d1fa      	bne.n	403eb4 <notes_clear+0x14>
  403ebe:	4613      	mov	r3, r2
	}

}

void notes_clear(uint8_t curr_pattern){
	for (int i = 0; i < 16; i++){
  403ec0:	4294      	cmp	r4, r2
  403ec2:	d002      	beq.n	403eca <notes_clear+0x2a>
  403ec4:	f103 0280 	add.w	r2, r3, #128	; 0x80
  403ec8:	e7f4      	b.n	403eb4 <notes_clear+0x14>
		for (int j = 0; j < 16; j++){
			patterns[curr_pattern][i][j][0] = 48; //set note to C4
			patterns[curr_pattern][i][j][1]= 0;	  //turn notes all OFF
		}
	}
}
  403eca:	bc10      	pop	{r4}
  403ecc:	4770      	bx	lr
  403ece:	bf00      	nop
  403ed0:	200009b8 	.word	0x200009b8

00403ed4 <notes_inc>:


}


void notes_inc(uint8_t step){
  403ed4:	b410      	push	{r4}
	if (patterns[curr_pattern][display_page][step][0] < 108){
  403ed6:	4b0b      	ldr	r3, [pc, #44]	; (403f04 <notes_inc+0x30>)
  403ed8:	7819      	ldrb	r1, [r3, #0]
  403eda:	4b0b      	ldr	r3, [pc, #44]	; (403f08 <notes_inc+0x34>)
  403edc:	781a      	ldrb	r2, [r3, #0]
  403ede:	eb02 1301 	add.w	r3, r2, r1, lsl #4
  403ee2:	eb00 1303 	add.w	r3, r0, r3, lsl #4
  403ee6:	4c09      	ldr	r4, [pc, #36]	; (403f0c <notes_inc+0x38>)
  403ee8:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
  403eec:	2b6b      	cmp	r3, #107	; 0x6b
  403eee:	d806      	bhi.n	403efe <notes_inc+0x2a>
		patterns[curr_pattern][display_page][step][0]++;
  403ef0:	eb02 1201 	add.w	r2, r2, r1, lsl #4
  403ef4:	eb00 1002 	add.w	r0, r0, r2, lsl #4
  403ef8:	3301      	adds	r3, #1
  403efa:	f844 3030 	str.w	r3, [r4, r0, lsl #3]
// 	patterns[curr_pattern_ch[1]][curr_page_ch[1]][11][1] = 1;
// 	patterns[curr_pattern_ch[1]][curr_page_ch[1]][12][1] = 1;
// 	patterns[curr_pattern_ch[1]][curr_page_ch[1]][13][1] = 1;
// 	patterns[curr_pattern_ch[1]][curr_page_ch[1]][14][1] = 0;
// 	patterns[curr_pattern_ch[1]][curr_page_ch[1]][15][1] = 1;
}
  403efe:	bc10      	pop	{r4}
  403f00:	4770      	bx	lr
  403f02:	bf00      	nop
  403f04:	20000958 	.word	0x20000958
  403f08:	20000984 	.word	0x20000984
  403f0c:	200009b8 	.word	0x200009b8

00403f10 <notes_dec>:

void notes_dec(uint8_t step){
  403f10:	b410      	push	{r4}
	if (patterns[curr_pattern][display_page][step][0] > 0){
  403f12:	4b0a      	ldr	r3, [pc, #40]	; (403f3c <notes_dec+0x2c>)
  403f14:	7819      	ldrb	r1, [r3, #0]
  403f16:	4b0a      	ldr	r3, [pc, #40]	; (403f40 <notes_dec+0x30>)
  403f18:	781a      	ldrb	r2, [r3, #0]
  403f1a:	eb02 1301 	add.w	r3, r2, r1, lsl #4
  403f1e:	eb00 1303 	add.w	r3, r0, r3, lsl #4
  403f22:	4c08      	ldr	r4, [pc, #32]	; (403f44 <notes_dec+0x34>)
  403f24:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
  403f28:	b133      	cbz	r3, 403f38 <notes_dec+0x28>
		patterns[curr_pattern][display_page][step][0]--;
  403f2a:	eb02 1201 	add.w	r2, r2, r1, lsl #4
  403f2e:	eb00 1002 	add.w	r0, r0, r2, lsl #4
  403f32:	3b01      	subs	r3, #1
  403f34:	f844 3030 	str.w	r3, [r4, r0, lsl #3]
// 	patterns[curr_pattern_ch[1]][curr_page_ch[1]][11][1] = 1;
// 	patterns[curr_pattern_ch[1]][curr_page_ch[1]][12][1] = 1;
// 	patterns[curr_pattern_ch[1]][curr_page_ch[1]][13][1] = 1;
// 	patterns[curr_pattern_ch[1]][curr_page_ch[1]][14][1] = 0;
// 	patterns[curr_pattern_ch[1]][curr_page_ch[1]][15][1] = 1;
}
  403f38:	bc10      	pop	{r4}
  403f3a:	4770      	bx	lr
  403f3c:	20000958 	.word	0x20000958
  403f40:	20000984 	.word	0x20000984
  403f44:	200009b8 	.word	0x200009b8

00403f48 <timers_init>:
 #include "displays.h"


 void timers_init(void) {

	overflow_count = 0;
  403f48:	2300      	movs	r3, #0
  403f4a:	4a2d      	ldr	r2, [pc, #180]	; (404000 <timers_init+0xb8>)
  403f4c:	8013      	strh	r3, [r2, #0]
	note_overflow_count = 0;
  403f4e:	4a2d      	ldr	r2, [pc, #180]	; (404004 <timers_init+0xbc>)
  403f50:	8013      	strh	r3, [r2, #0]
	refresh_overflow_count = 0;
  403f52:	4a2d      	ldr	r2, [pc, #180]	; (404008 <timers_init+0xc0>)
  403f54:	8013      	strh	r3, [r2, #0]
	resolution = 2;
  403f56:	2102      	movs	r1, #2
  403f58:	4a2c      	ldr	r2, [pc, #176]	; (40400c <timers_init+0xc4>)
  403f5a:	6011      	str	r1, [r2, #0]
	display_page = 0;
  403f5c:	4a2c      	ldr	r2, [pc, #176]	; (404010 <timers_init+0xc8>)
  403f5e:	7013      	strb	r3, [r2, #0]
	page_loop = 0;
  403f60:	4a2c      	ldr	r2, [pc, #176]	; (404014 <timers_init+0xcc>)
  403f62:	7013      	strb	r3, [r2, #0]
	curr_step = 0;
  403f64:	4a2c      	ldr	r2, [pc, #176]	; (404018 <timers_init+0xd0>)
  403f66:	7013      	strb	r3, [r2, #0]
	curr_page = 0;
  403f68:	4a2c      	ldr	r2, [pc, #176]	; (40401c <timers_init+0xd4>)
  403f6a:	7013      	strb	r3, [r2, #0]
	curr_pattern = 0;
  403f6c:	4a2c      	ldr	r2, [pc, #176]	; (404020 <timers_init+0xd8>)
  403f6e:	7013      	strb	r3, [r2, #0]

	curr_pattern_ch[0] = 0;
  403f70:	4a2c      	ldr	r2, [pc, #176]	; (404024 <timers_init+0xdc>)
  403f72:	7013      	strb	r3, [r2, #0]
	curr_pattern_ch[1] = 1;
  403f74:	2001      	movs	r0, #1
  403f76:	7050      	strb	r0, [r2, #1]
	curr_pattern_ch[2] = 2;
  403f78:	7091      	strb	r1, [r2, #2]
	curr_pattern_ch[3] = 3;
  403f7a:	2103      	movs	r1, #3
  403f7c:	70d1      	strb	r1, [r2, #3]

	curr_page_ch[0] = 0;
  403f7e:	4a2a      	ldr	r2, [pc, #168]	; (404028 <timers_init+0xe0>)
  403f80:	7013      	strb	r3, [r2, #0]
	curr_page_ch[1] = 0;
  403f82:	7053      	strb	r3, [r2, #1]
	curr_page_ch[2] = 0;
  403f84:	7093      	strb	r3, [r2, #2]
	curr_page_ch[3] = 0;
  403f86:	70d3      	strb	r3, [r2, #3]

	page_loop_ch[0] = 0;
  403f88:	4a28      	ldr	r2, [pc, #160]	; (40402c <timers_init+0xe4>)
  403f8a:	7013      	strb	r3, [r2, #0]
	page_loop_ch[1] = 0;
  403f8c:	7053      	strb	r3, [r2, #1]
	page_loop_ch[2] = 0;
  403f8e:	7093      	strb	r3, [r2, #2]
	page_loop_ch[3] = 0;
  403f90:	70d3      	strb	r3, [r2, #3]

	channel_mute[0] = 0;
  403f92:	4a27      	ldr	r2, [pc, #156]	; (404030 <timers_init+0xe8>)
  403f94:	7013      	strb	r3, [r2, #0]
	channel_mute[1] = 0;
  403f96:	7053      	strb	r3, [r2, #1]
	channel_mute[2] = 0;
  403f98:	7093      	strb	r3, [r2, #2]
	channel_mute[3] = 0;
  403f9a:	70d3      	strb	r3, [r2, #3]
  403f9c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  403fa0:	4b24      	ldr	r3, [pc, #144]	; (404034 <timers_init+0xec>)
  403fa2:	601a      	str	r2, [r3, #0]
	NVIC_EnableIRQ(TC0_IRQn);
	//NVIC_EnableIRQ(TC1_IRQn);

	// Enable peripheral clock for TC0
	// Peripheral ID (PID) for TC0 is 23
	REG_PMC_PCER0 |= PMC_PCER0_PID23;
  403fa4:	4b24      	ldr	r3, [pc, #144]	; (404038 <timers_init+0xf0>)
  403fa6:	681a      	ldr	r2, [r3, #0]
  403fa8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
  403fac:	601a      	str	r2, [r3, #0]
	
	// Enable peripheral clock for TC1
	// Peripheral ID (PID) for TC1 is 24
	REG_PMC_PCER0 |= PMC_PCER0_PID24;
  403fae:	681a      	ldr	r2, [r3, #0]
  403fb0:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
  403fb4:	601a      	str	r2, [r3, #0]
	// TIMER_CLOCK1 = MCK/2
	// TIMER_CLOCK2 = MCK/8
	// TIMER_CLOCK3 = MCK/32
	// TIMER_CLOCK4 = MCK/128
	// TIMER_CLOCK5 = SCLK
	REG_TC0_CMR0 |= TC_CMR_TCCLKS_TIMER_CLOCK2 | TC_CMR_CPCTRG;
  403fb6:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
  403fba:	f101 1101 	add.w	r1, r1, #65537	; 0x10001
  403fbe:	680a      	ldr	r2, [r1, #0]
  403fc0:	f244 0301 	movw	r3, #16385	; 0x4001
  403fc4:	431a      	orrs	r2, r3
  403fc6:	600a      	str	r2, [r1, #0]
	REG_TC0_CMR1 |= TC_CMR_TCCLKS_TIMER_CLOCK2 | TC_CMR_CPCTRG;
  403fc8:	4a1c      	ldr	r2, [pc, #112]	; (40403c <timers_init+0xf4>)
  403fca:	6811      	ldr	r1, [r2, #0]
  403fcc:	430b      	orrs	r3, r1
  403fce:	6013      	str	r3, [r2, #0]
	// REG_TC0_CMR2 |= TC_CMR_TCCLKS_TIMER_CLOCK4 | TC_CMR_CPCTRG;
	// Set interrupt on compare to RC value
	REG_TC0_IER0 |= TC_IER_CPCS;
  403fd0:	3a20      	subs	r2, #32
  403fd2:	6813      	ldr	r3, [r2, #0]
  403fd4:	f043 0310 	orr.w	r3, r3, #16
  403fd8:	6013      	str	r3, [r2, #0]
	REG_TC0_IER1 |= TC_IER_CPCS;
  403fda:	3240      	adds	r2, #64	; 0x40
  403fdc:	6813      	ldr	r3, [r2, #0]
  403fde:	f043 0310 	orr.w	r3, r3, #16
  403fe2:	6013      	str	r3, [r2, #0]
	// REG_TC0_IER2 |= TC_IER_CPCS;

	// 60 BPM = 1 Hz. MCK/8 = 12.5 MHz. 12.5 million counts per second, 1 interrupt per cycle
	// Anticipating 10000 overflows (10000*1250 is 12.5 million counts)
	REG_TC0_RC0 = 1250;
  403fe4:	f240 42e2 	movw	r2, #1250	; 0x4e2
  403fe8:	4b15      	ldr	r3, [pc, #84]	; (404040 <timers_init+0xf8>)
  403fea:	601a      	str	r2, [r3, #0]

	// 2 seconds = 0.5 Hz. MCK/8 = 12.5 MHz. 25 million counts
	// Anticipating 10000 overflows (10000*2500 is 25 million counts)
	REG_TC0_RC1 = 2500;
  403fec:	f640 12c4 	movw	r2, #2500	; 0x9c4
  403ff0:	3340      	adds	r3, #64	; 0x40
  403ff2:	601a      	str	r2, [r3, #0]
// 	REG_PIOA_PER |= PIO_PER_0; //enable PIO controller on PA11
// 	REG_PIOA_OER |= PIO_PER_P20; //enable output on pin PA11
	/*REG_PMC_PCER0 |= PMC_PCER0_PID11; //Enable PMC control for PA11*/

	// TC0 control register enables timer and triggers it to start
	REG_TC0_CCR0 |= TC_CCR_CLKEN | TC_CCR_SWTRG;
  403ff4:	4a13      	ldr	r2, [pc, #76]	; (404044 <timers_init+0xfc>)
  403ff6:	6813      	ldr	r3, [r2, #0]
  403ff8:	f043 0305 	orr.w	r3, r3, #5
  403ffc:	6013      	str	r3, [r2, #0]
  403ffe:	4770      	bx	lr
  404000:	20000970 	.word	0x20000970
  404004:	2000095e 	.word	0x2000095e
  404008:	20000960 	.word	0x20000960
  40400c:	20000964 	.word	0x20000964
  404010:	20000984 	.word	0x20000984
  404014:	20000968 	.word	0x20000968
  404018:	2000097c 	.word	0x2000097c
  40401c:	20000992 	.word	0x20000992
  404020:	20000958 	.word	0x20000958
  404024:	20000974 	.word	0x20000974
  404028:	2000096c 	.word	0x2000096c
  40402c:	20000988 	.word	0x20000988
  404030:	20000980 	.word	0x20000980
  404034:	e000e100 	.word	0xe000e100
  404038:	400e0410 	.word	0x400e0410
  40403c:	40010044 	.word	0x40010044
  404040:	4001001c 	.word	0x4001001c
  404044:	40010000 	.word	0x40010000

00404048 <update_timers>:

 void update_timers(int bpm) {
// 	// (SCK/2) / (bpm/60); SCK*60/2 = 960000
// 	// Offset is needed, possible not with the crystals working
// 	REG_TC0_RC0 = (uint16_t)(960000/bpm - 420);
	if(bpm > 1) {
  404048:	2801      	cmp	r0, #1
  40404a:	dd0e      	ble.n	40406a <update_timers+0x22>
	REG_TC0_CCR0 |= TC_CCR_CLKEN | TC_CCR_SWTRG;
//	REG_TC0_CCR1 |= TC_CCR_CLKEN | TC_CCR_SWTRG;
//	REG_TC0_CCR2 |= TC_CCR_CLKEN | TC_CCR_SWTRG;
 }

 void update_timers(int bpm) {
  40404c:	b510      	push	{r4, lr}
  40404e:	4604      	mov	r4, r0
// 	// (SCK/2) / (bpm/60); SCK*60/2 = 960000
// 	// Offset is needed, possible not with the crystals working
// 	REG_TC0_RC0 = (uint16_t)(960000/bpm - 420);
	if(bpm > 1) {
		REG_TC0_RC0 = (uint16_t)(75000/(bpm*res_to_int(resolution)));
  404050:	4b06      	ldr	r3, [pc, #24]	; (40406c <update_timers+0x24>)
  404052:	7818      	ldrb	r0, [r3, #0]
  404054:	4b06      	ldr	r3, [pc, #24]	; (404070 <update_timers+0x28>)
  404056:	4798      	blx	r3
  404058:	fb04 f000 	mul.w	r0, r4, r0
  40405c:	4c05      	ldr	r4, [pc, #20]	; (404074 <update_timers+0x2c>)
  40405e:	fb94 f0f0 	sdiv	r0, r4, r0
  404062:	b280      	uxth	r0, r0
  404064:	4b04      	ldr	r3, [pc, #16]	; (404078 <update_timers+0x30>)
  404066:	6018      	str	r0, [r3, #0]
  404068:	bd10      	pop	{r4, pc}
  40406a:	4770      	bx	lr
  40406c:	20000964 	.word	0x20000964
  404070:	00402dfd 	.word	0x00402dfd
  404074:	000124f8 	.word	0x000124f8
  404078:	4001001c 	.word	0x4001001c

0040407c <TC0_Handler>:
	}

 }

  void TC0_Handler() {
  40407c:	b570      	push	{r4, r5, r6, lr}

	  // Step count timer
	  // Test code, normally trigger next step, output clock
	  if((REG_TC0_SR0 & TC_SR_CPCS) >= 1) {
  40407e:	4b77      	ldr	r3, [pc, #476]	; (40425c <TC0_Handler+0x1e0>)
  404080:	681b      	ldr	r3, [r3, #0]
  404082:	f013 0f10 	tst.w	r3, #16
  404086:	f000 80c9 	beq.w	40421c <TC0_Handler+0x1a0>

		  //turn off gates for each channel
		  if ( (overflow_count == note_length)){ //note_length
  40408a:	4b75      	ldr	r3, [pc, #468]	; (404260 <TC0_Handler+0x1e4>)
  40408c:	881a      	ldrh	r2, [r3, #0]
  40408e:	4b75      	ldr	r3, [pc, #468]	; (404264 <TC0_Handler+0x1e8>)
  404090:	881b      	ldrh	r3, [r3, #0]
  404092:	429a      	cmp	r2, r3
  404094:	d108      	bne.n	4040a8 <TC0_Handler+0x2c>
			  DAC_write_gate_off(CHANNEL_1);
  404096:	2000      	movs	r0, #0
  404098:	4c73      	ldr	r4, [pc, #460]	; (404268 <TC0_Handler+0x1ec>)
  40409a:	47a0      	blx	r4
			  DAC_write_gate_off(CHANNEL_2);
  40409c:	2001      	movs	r0, #1
  40409e:	47a0      	blx	r4
			  DAC_write_gate_off(CHANNEL_3);
  4040a0:	2002      	movs	r0, #2
  4040a2:	47a0      	blx	r4
			  DAC_write_gate_off(CHANNEL_4);
  4040a4:	2003      	movs	r0, #3
  4040a6:	47a0      	blx	r4
		  }

		  if(overflow_count == 0) {
  4040a8:	4b6d      	ldr	r3, [pc, #436]	; (404260 <TC0_Handler+0x1e4>)
  4040aa:	881b      	ldrh	r3, [r3, #0]
  4040ac:	2b00      	cmp	r3, #0
  4040ae:	d15a      	bne.n	404166 <TC0_Handler+0xea>

			  //update the CVs for each channel
			  //update the gates for each channel
			  SPI_dac_init();
  4040b0:	4b6e      	ldr	r3, [pc, #440]	; (40426c <TC0_Handler+0x1f0>)
  4040b2:	4798      	blx	r3

			  if ( (notes_status_get(curr_step, CHANNEL_1) == 1) && channel_mute[CHANNEL_1] == 0){
  4040b4:	2100      	movs	r1, #0
  4040b6:	4b6e      	ldr	r3, [pc, #440]	; (404270 <TC0_Handler+0x1f4>)
  4040b8:	7818      	ldrb	r0, [r3, #0]
  4040ba:	4b6e      	ldr	r3, [pc, #440]	; (404274 <TC0_Handler+0x1f8>)
  4040bc:	4798      	blx	r3
  4040be:	2801      	cmp	r0, #1
  4040c0:	d10d      	bne.n	4040de <TC0_Handler+0x62>
  4040c2:	4b6d      	ldr	r3, [pc, #436]	; (404278 <TC0_Handler+0x1fc>)
  4040c4:	781b      	ldrb	r3, [r3, #0]
  4040c6:	b953      	cbnz	r3, 4040de <TC0_Handler+0x62>
				  DAC_write_cv(notes_get(curr_step, CHANNEL_1), CHANNEL_1);
  4040c8:	2100      	movs	r1, #0
  4040ca:	4b69      	ldr	r3, [pc, #420]	; (404270 <TC0_Handler+0x1f4>)
  4040cc:	7818      	ldrb	r0, [r3, #0]
  4040ce:	4b6b      	ldr	r3, [pc, #428]	; (40427c <TC0_Handler+0x200>)
  4040d0:	4798      	blx	r3
  4040d2:	2100      	movs	r1, #0
  4040d4:	4b6a      	ldr	r3, [pc, #424]	; (404280 <TC0_Handler+0x204>)
  4040d6:	4798      	blx	r3
				  DAC_write_gate_on(CHANNEL_1);
  4040d8:	2000      	movs	r0, #0
  4040da:	4b6a      	ldr	r3, [pc, #424]	; (404284 <TC0_Handler+0x208>)
  4040dc:	4798      	blx	r3
			  }
			  if ( (notes_status_get(curr_step, CHANNEL_2) == 1) && channel_mute[CHANNEL_2] == 0){
  4040de:	2101      	movs	r1, #1
  4040e0:	4b63      	ldr	r3, [pc, #396]	; (404270 <TC0_Handler+0x1f4>)
  4040e2:	7818      	ldrb	r0, [r3, #0]
  4040e4:	4b63      	ldr	r3, [pc, #396]	; (404274 <TC0_Handler+0x1f8>)
  4040e6:	4798      	blx	r3
  4040e8:	2801      	cmp	r0, #1
  4040ea:	d10d      	bne.n	404108 <TC0_Handler+0x8c>
  4040ec:	4b62      	ldr	r3, [pc, #392]	; (404278 <TC0_Handler+0x1fc>)
  4040ee:	785b      	ldrb	r3, [r3, #1]
  4040f0:	b953      	cbnz	r3, 404108 <TC0_Handler+0x8c>
				   DAC_write_cv(notes_get(curr_step, CHANNEL_2), CHANNEL_2);
  4040f2:	2101      	movs	r1, #1
  4040f4:	4b5e      	ldr	r3, [pc, #376]	; (404270 <TC0_Handler+0x1f4>)
  4040f6:	7818      	ldrb	r0, [r3, #0]
  4040f8:	4b60      	ldr	r3, [pc, #384]	; (40427c <TC0_Handler+0x200>)
  4040fa:	4798      	blx	r3
  4040fc:	2101      	movs	r1, #1
  4040fe:	4b60      	ldr	r3, [pc, #384]	; (404280 <TC0_Handler+0x204>)
  404100:	4798      	blx	r3
				   DAC_write_gate_on(CHANNEL_2);
  404102:	2001      	movs	r0, #1
  404104:	4b5f      	ldr	r3, [pc, #380]	; (404284 <TC0_Handler+0x208>)
  404106:	4798      	blx	r3
			  }
			  if ( (notes_status_get(curr_step, CHANNEL_3) == 1) && channel_mute[CHANNEL_3] == 0){
  404108:	2102      	movs	r1, #2
  40410a:	4b59      	ldr	r3, [pc, #356]	; (404270 <TC0_Handler+0x1f4>)
  40410c:	7818      	ldrb	r0, [r3, #0]
  40410e:	4b59      	ldr	r3, [pc, #356]	; (404274 <TC0_Handler+0x1f8>)
  404110:	4798      	blx	r3
  404112:	2801      	cmp	r0, #1
  404114:	d10d      	bne.n	404132 <TC0_Handler+0xb6>
  404116:	4b58      	ldr	r3, [pc, #352]	; (404278 <TC0_Handler+0x1fc>)
  404118:	789b      	ldrb	r3, [r3, #2]
  40411a:	b953      	cbnz	r3, 404132 <TC0_Handler+0xb6>
				  DAC_write_cv(notes_get(curr_step, CHANNEL_3), CHANNEL_3);
  40411c:	2102      	movs	r1, #2
  40411e:	4b54      	ldr	r3, [pc, #336]	; (404270 <TC0_Handler+0x1f4>)
  404120:	7818      	ldrb	r0, [r3, #0]
  404122:	4b56      	ldr	r3, [pc, #344]	; (40427c <TC0_Handler+0x200>)
  404124:	4798      	blx	r3
  404126:	2102      	movs	r1, #2
  404128:	4b55      	ldr	r3, [pc, #340]	; (404280 <TC0_Handler+0x204>)
  40412a:	4798      	blx	r3
				  DAC_write_gate_on(CHANNEL_3);
  40412c:	2002      	movs	r0, #2
  40412e:	4b55      	ldr	r3, [pc, #340]	; (404284 <TC0_Handler+0x208>)
  404130:	4798      	blx	r3
			  }
			  if ( (notes_status_get(curr_step, CHANNEL_4) == 1) && channel_mute[CHANNEL_4] == 0){
  404132:	2103      	movs	r1, #3
  404134:	4b4e      	ldr	r3, [pc, #312]	; (404270 <TC0_Handler+0x1f4>)
  404136:	7818      	ldrb	r0, [r3, #0]
  404138:	4b4e      	ldr	r3, [pc, #312]	; (404274 <TC0_Handler+0x1f8>)
  40413a:	4798      	blx	r3
  40413c:	2801      	cmp	r0, #1
  40413e:	d10d      	bne.n	40415c <TC0_Handler+0xe0>
  404140:	4b4d      	ldr	r3, [pc, #308]	; (404278 <TC0_Handler+0x1fc>)
  404142:	78db      	ldrb	r3, [r3, #3]
  404144:	b953      	cbnz	r3, 40415c <TC0_Handler+0xe0>
				  DAC_write_cv(notes_get(curr_step, CHANNEL_4), CHANNEL_4);
  404146:	2103      	movs	r1, #3
  404148:	4b49      	ldr	r3, [pc, #292]	; (404270 <TC0_Handler+0x1f4>)
  40414a:	7818      	ldrb	r0, [r3, #0]
  40414c:	4b4b      	ldr	r3, [pc, #300]	; (40427c <TC0_Handler+0x200>)
  40414e:	4798      	blx	r3
  404150:	2103      	movs	r1, #3
  404152:	4b4b      	ldr	r3, [pc, #300]	; (404280 <TC0_Handler+0x204>)
  404154:	4798      	blx	r3
				  DAC_write_gate_on(CHANNEL_4);
  404156:	2003      	movs	r0, #3
  404158:	4b4a      	ldr	r3, [pc, #296]	; (404284 <TC0_Handler+0x208>)
  40415a:	4798      	blx	r3
			  }

			  REG_ADC_CR |= ADC_CR_START;
  40415c:	4a4a      	ldr	r2, [pc, #296]	; (404288 <TC0_Handler+0x20c>)
  40415e:	6813      	ldr	r3, [r2, #0]
  404160:	f043 0302 	orr.w	r3, r3, #2
  404164:	6013      	str	r3, [r2, #0]
		  }
		  if(overflow_count == 10000) {
  404166:	4b3e      	ldr	r3, [pc, #248]	; (404260 <TC0_Handler+0x1e4>)
  404168:	881a      	ldrh	r2, [r3, #0]
  40416a:	f242 7310 	movw	r3, #10000	; 0x2710
  40416e:	429a      	cmp	r2, r3
  404170:	d146      	bne.n	404200 <TC0_Handler+0x184>
			  SPI_led_init();
  404172:	4b46      	ldr	r3, [pc, #280]	; (40428c <TC0_Handler+0x210>)
  404174:	4798      	blx	r3
			  leds_update_cursor(curr_step);
  404176:	4c3e      	ldr	r4, [pc, #248]	; (404270 <TC0_Handler+0x1f4>)
  404178:	7820      	ldrb	r0, [r4, #0]
  40417a:	4b45      	ldr	r3, [pc, #276]	; (404290 <TC0_Handler+0x214>)
  40417c:	4798      	blx	r3

			  if (curr_step == 0){
  40417e:	7823      	ldrb	r3, [r4, #0]
  404180:	b953      	cbnz	r3, 404198 <TC0_Handler+0x11c>
				//if cursor follow mode is on, then update the page display
				  if (cursor_follow == 1){
  404182:	4a44      	ldr	r2, [pc, #272]	; (404294 <TC0_Handler+0x218>)
  404184:	7812      	ldrb	r2, [r2, #0]
  404186:	2a00      	cmp	r2, #0
  404188:	d030      	beq.n	4041ec <TC0_Handler+0x170>
					  page_display(curr_page);
  40418a:	4b43      	ldr	r3, [pc, #268]	; (404298 <TC0_Handler+0x21c>)
  40418c:	7818      	ldrb	r0, [r3, #0]
  40418e:	4b43      	ldr	r3, [pc, #268]	; (40429c <TC0_Handler+0x220>)
  404190:	4798      	blx	r3
					  page_or_loop = 0;
  404192:	2200      	movs	r2, #0
  404194:	4b42      	ldr	r3, [pc, #264]	; (4042a0 <TC0_Handler+0x224>)
  404196:	701a      	strb	r2, [r3, #0]
				  }
			  }

			  if (curr_step == 15){
  404198:	4b35      	ldr	r3, [pc, #212]	; (404270 <TC0_Handler+0x1f4>)
  40419a:	781b      	ldrb	r3, [r3, #0]
  40419c:	2b0f      	cmp	r3, #15
  40419e:	d125      	bne.n	4041ec <TC0_Handler+0x170>
				  //increment to next page or go back to first page

				  //update display page
				  if (curr_page < patterns_loop[curr_pattern]){
  4041a0:	4b3d      	ldr	r3, [pc, #244]	; (404298 <TC0_Handler+0x21c>)
  4041a2:	781b      	ldrb	r3, [r3, #0]
  4041a4:	4a3f      	ldr	r2, [pc, #252]	; (4042a4 <TC0_Handler+0x228>)
  4041a6:	7812      	ldrb	r2, [r2, #0]
  4041a8:	493f      	ldr	r1, [pc, #252]	; (4042a8 <TC0_Handler+0x22c>)
  4041aa:	5c8a      	ldrb	r2, [r1, r2]
  4041ac:	429a      	cmp	r2, r3
  4041ae:	d903      	bls.n	4041b8 <TC0_Handler+0x13c>
					  curr_page++;
  4041b0:	3301      	adds	r3, #1
  4041b2:	4a39      	ldr	r2, [pc, #228]	; (404298 <TC0_Handler+0x21c>)
  4041b4:	7013      	strb	r3, [r2, #0]
  4041b6:	e002      	b.n	4041be <TC0_Handler+0x142>
				  }
				  else{
					  curr_page = 0;
  4041b8:	2200      	movs	r2, #0
  4041ba:	4b37      	ldr	r3, [pc, #220]	; (404298 <TC0_Handler+0x21c>)
  4041bc:	701a      	strb	r2, [r3, #0]
  4041be:	4b3b      	ldr	r3, [pc, #236]	; (4042ac <TC0_Handler+0x230>)
  4041c0:	493b      	ldr	r1, [pc, #236]	; (4042b0 <TC0_Handler+0x234>)
  4041c2:	1d1d      	adds	r5, r3, #4
				  }

				  //update note / page for each channel output
				  for (int i = 0; i < 4; i++){

					  if (curr_page_ch[i] < patterns_loop[curr_pattern_ch[i]]){
  4041c4:	4c38      	ldr	r4, [pc, #224]	; (4042a8 <TC0_Handler+0x22c>)
						  curr_page_ch[i]++;
					  }
					  else{
						  curr_page_ch[i] = 0;
  4041c6:	2600      	movs	r6, #0
				  }

				  //update note / page for each channel output
				  for (int i = 0; i < 4; i++){

					  if (curr_page_ch[i] < patterns_loop[curr_pattern_ch[i]]){
  4041c8:	f813 2b01 	ldrb.w	r2, [r3], #1
  4041cc:	f811 0b01 	ldrb.w	r0, [r1], #1
  4041d0:	5c20      	ldrb	r0, [r4, r0]
  4041d2:	4290      	cmp	r0, r2
						  curr_page_ch[i]++;
  4041d4:	bf86      	itte	hi
  4041d6:	3201      	addhi	r2, #1
  4041d8:	f803 2c01 	strbhi.w	r2, [r3, #-1]
					  }
					  else{
						  curr_page_ch[i] = 0;
  4041dc:	f803 6c01 	strbls.w	r6, [r3, #-1]
				  else{
					  curr_page = 0;
				  }

				  //update note / page for each channel output
				  for (int i = 0; i < 4; i++){
  4041e0:	42ab      	cmp	r3, r5
  4041e2:	d1f1      	bne.n	4041c8 <TC0_Handler+0x14c>
					  }

				  }

				  //return to first step on next page
				  curr_step = 0;
  4041e4:	2200      	movs	r2, #0
  4041e6:	4b22      	ldr	r3, [pc, #136]	; (404270 <TC0_Handler+0x1f4>)
  4041e8:	701a      	strb	r2, [r3, #0]
  4041ea:	e002      	b.n	4041f2 <TC0_Handler+0x176>
			  }

			  else{ 
				  curr_step++; 
  4041ec:	3301      	adds	r3, #1
  4041ee:	4a20      	ldr	r2, [pc, #128]	; (404270 <TC0_Handler+0x1f4>)
  4041f0:	7013      	strb	r3, [r2, #0]
			  }

			 //if cursor follow is on then set display page to the current page of the pattern
			 if (cursor_follow == 1){
  4041f2:	4b28      	ldr	r3, [pc, #160]	; (404294 <TC0_Handler+0x218>)
  4041f4:	781b      	ldrb	r3, [r3, #0]
  4041f6:	b11b      	cbz	r3, 404200 <TC0_Handler+0x184>
					 display_page = curr_page;
  4041f8:	4b27      	ldr	r3, [pc, #156]	; (404298 <TC0_Handler+0x21c>)
  4041fa:	781a      	ldrb	r2, [r3, #0]
  4041fc:	4b2d      	ldr	r3, [pc, #180]	; (4042b4 <TC0_Handler+0x238>)
  4041fe:	701a      	strb	r2, [r3, #0]
			 }

		  }

		  overflow_count++;
  404200:	4b17      	ldr	r3, [pc, #92]	; (404260 <TC0_Handler+0x1e4>)
  404202:	881b      	ldrh	r3, [r3, #0]
  404204:	3301      	adds	r3, #1
  404206:	b29b      	uxth	r3, r3
		  if (overflow_count >= 40000){
  404208:	f649 423f 	movw	r2, #39999	; 0x9c3f
  40420c:	4293      	cmp	r3, r2
  40420e:	d802      	bhi.n	404216 <TC0_Handler+0x19a>
					 display_page = curr_page;
			 }

		  }

		  overflow_count++;
  404210:	4a13      	ldr	r2, [pc, #76]	; (404260 <TC0_Handler+0x1e4>)
  404212:	8013      	strh	r3, [r2, #0]
  404214:	e002      	b.n	40421c <TC0_Handler+0x1a0>
		  if (overflow_count >= 40000){
			  overflow_count = 0;
  404216:	2200      	movs	r2, #0
  404218:	4b11      	ldr	r3, [pc, #68]	; (404260 <TC0_Handler+0x1e4>)
  40421a:	801a      	strh	r2, [r3, #0]


	  }

// Timeout timer for note displays
	if((REG_TC0_SR1 & TC_SR_CPCS) >= 1) {
  40421c:	4b26      	ldr	r3, [pc, #152]	; (4042b8 <TC0_Handler+0x23c>)
  40421e:	681b      	ldr	r3, [r3, #0]
  404220:	f013 0f10 	tst.w	r3, #16
  404224:	d018      	beq.n	404258 <TC0_Handler+0x1dc>
		note_overflow_count++;
  404226:	4b25      	ldr	r3, [pc, #148]	; (4042bc <TC0_Handler+0x240>)
  404228:	881b      	ldrh	r3, [r3, #0]
  40422a:	3301      	adds	r3, #1
  40422c:	b29b      	uxth	r3, r3

		if (note_overflow_count >= 10000){
  40422e:	f242 720f 	movw	r2, #9999	; 0x270f
  404232:	4293      	cmp	r3, r2
  404234:	d802      	bhi.n	40423c <TC0_Handler+0x1c0>

	  }

// Timeout timer for note displays
	if((REG_TC0_SR1 & TC_SR_CPCS) >= 1) {
		note_overflow_count++;
  404236:	4a21      	ldr	r2, [pc, #132]	; (4042bc <TC0_Handler+0x240>)
  404238:	8013      	strh	r3, [r2, #0]
  40423a:	bd70      	pop	{r4, r5, r6, pc}

		if (note_overflow_count >= 10000){
			note_overflow_count = 0;
  40423c:	2200      	movs	r2, #0
  40423e:	4b1f      	ldr	r3, [pc, #124]	; (4042bc <TC0_Handler+0x240>)
  404240:	801a      	strh	r2, [r3, #0]
			REG_TC0_CCR1 |= TC_CCR_CLKDIS;
  404242:	4a1f      	ldr	r2, [pc, #124]	; (4042c0 <TC0_Handler+0x244>)
  404244:	6813      	ldr	r3, [r2, #0]
  404246:	f043 0302 	orr.w	r3, r3, #2
  40424a:	6013      	str	r3, [r2, #0]
			res_display(res_to_int(resolution));
  40424c:	4b1d      	ldr	r3, [pc, #116]	; (4042c4 <TC0_Handler+0x248>)
  40424e:	7818      	ldrb	r0, [r3, #0]
  404250:	4b1d      	ldr	r3, [pc, #116]	; (4042c8 <TC0_Handler+0x24c>)
  404252:	4798      	blx	r3
  404254:	4b1d      	ldr	r3, [pc, #116]	; (4042cc <TC0_Handler+0x250>)
  404256:	4798      	blx	r3
  404258:	bd70      	pop	{r4, r5, r6, pc}
  40425a:	bf00      	nop
  40425c:	40010020 	.word	0x40010020
  404260:	20000970 	.word	0x20000970
  404264:	2000098e 	.word	0x2000098e
  404268:	004006a9 	.word	0x004006a9
  40426c:	00403c0d 	.word	0x00403c0d
  404270:	2000097c 	.word	0x2000097c
  404274:	00403dbd 	.word	0x00403dbd
  404278:	20000980 	.word	0x20000980
  40427c:	00403d39 	.word	0x00403d39
  404280:	00400589 	.word	0x00400589
  404284:	00400671 	.word	0x00400671
  404288:	40038000 	.word	0x40038000
  40428c:	00403ba1 	.word	0x00403ba1
  404290:	004029f5 	.word	0x004029f5
  404294:	2000099c 	.word	0x2000099c
  404298:	20000992 	.word	0x20000992
  40429c:	0040172d 	.word	0x0040172d
  4042a0:	200009a5 	.word	0x200009a5
  4042a4:	20000958 	.word	0x20000958
  4042a8:	200009a8 	.word	0x200009a8
  4042ac:	2000096c 	.word	0x2000096c
  4042b0:	20000974 	.word	0x20000974
  4042b4:	20000984 	.word	0x20000984
  4042b8:	40010060 	.word	0x40010060
  4042bc:	2000095e 	.word	0x2000095e
  4042c0:	40010040 	.word	0x40010040
  4042c4:	20000964 	.word	0x20000964
  4042c8:	00402dfd 	.word	0x00402dfd
  4042cc:	004015dd 	.word	0x004015dd

004042d0 <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
  4042d0:	4770      	bx	lr
  4042d2:	bf00      	nop

004042d4 <sysclk_init>:

	SystemCoreClockUpdate();
}

void sysclk_init(void)
{
  4042d4:	b510      	push	{r4, lr}
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  4042d6:	480e      	ldr	r0, [pc, #56]	; (404310 <sysclk_init+0x3c>)
  4042d8:	4b0e      	ldr	r3, [pc, #56]	; (404314 <sysclk_init+0x40>)
  4042da:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
		break;

	case OSC_MAINCK_8M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
  4042dc:	2010      	movs	r0, #16
  4042de:	4b0e      	ldr	r3, [pc, #56]	; (404318 <sysclk_init+0x44>)
  4042e0:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  4042e2:	4c0e      	ldr	r4, [pc, #56]	; (40431c <sysclk_init+0x48>)
  4042e4:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  4042e6:	2800      	cmp	r0, #0
  4042e8:	d0fc      	beq.n	4042e4 <sysclk_init+0x10>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  4042ea:	4b0d      	ldr	r3, [pc, #52]	; (404320 <sysclk_init+0x4c>)
  4042ec:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  4042ee:	4a0d      	ldr	r2, [pc, #52]	; (404324 <sysclk_init+0x50>)
  4042f0:	4b0d      	ldr	r3, [pc, #52]	; (404328 <sysclk_init+0x54>)
  4042f2:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
  4042f4:	4c0d      	ldr	r4, [pc, #52]	; (40432c <sysclk_init+0x58>)
  4042f6:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  4042f8:	2800      	cmp	r0, #0
  4042fa:	d0fc      	beq.n	4042f6 <sysclk_init+0x22>

		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  4042fc:	2010      	movs	r0, #16
  4042fe:	4b0c      	ldr	r3, [pc, #48]	; (404330 <sysclk_init+0x5c>)
  404300:	4798      	blx	r3
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  404302:	4b0c      	ldr	r3, [pc, #48]	; (404334 <sysclk_init+0x60>)
  404304:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  404306:	4802      	ldr	r0, [pc, #8]	; (404310 <sysclk_init+0x3c>)
  404308:	4b02      	ldr	r3, [pc, #8]	; (404314 <sysclk_init+0x40>)
  40430a:	4798      	blx	r3
  40430c:	bd10      	pop	{r4, pc}
  40430e:	bf00      	nop
  404310:	05f5e100 	.word	0x05f5e100
  404314:	004045c9 	.word	0x004045c9
  404318:	004043a1 	.word	0x004043a1
  40431c:	004043ed 	.word	0x004043ed
  404320:	004043fd 	.word	0x004043fd
  404324:	20183f01 	.word	0x20183f01
  404328:	400e0400 	.word	0x400e0400
  40432c:	0040440d 	.word	0x0040440d
  404330:	00404339 	.word	0x00404339
  404334:	004044b9 	.word	0x004044b9

00404338 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  404338:	4a18      	ldr	r2, [pc, #96]	; (40439c <pmc_switch_mck_to_pllack+0x64>)
  40433a:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40433c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  404340:	4318      	orrs	r0, r3
  404342:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  404344:	6e93      	ldr	r3, [r2, #104]	; 0x68
  404346:	f013 0f08 	tst.w	r3, #8
  40434a:	d003      	beq.n	404354 <pmc_switch_mck_to_pllack+0x1c>
  40434c:	e009      	b.n	404362 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  40434e:	3b01      	subs	r3, #1
  404350:	d103      	bne.n	40435a <pmc_switch_mck_to_pllack+0x22>
  404352:	e01e      	b.n	404392 <pmc_switch_mck_to_pllack+0x5a>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  404354:	f44f 6300 	mov.w	r3, #2048	; 0x800
  404358:	4910      	ldr	r1, [pc, #64]	; (40439c <pmc_switch_mck_to_pllack+0x64>)
  40435a:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  40435c:	f012 0f08 	tst.w	r2, #8
  404360:	d0f5      	beq.n	40434e <pmc_switch_mck_to_pllack+0x16>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  404362:	4a0e      	ldr	r2, [pc, #56]	; (40439c <pmc_switch_mck_to_pllack+0x64>)
  404364:	6b13      	ldr	r3, [r2, #48]	; 0x30
  404366:	f023 0303 	bic.w	r3, r3, #3
  40436a:	f043 0302 	orr.w	r3, r3, #2
  40436e:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  404370:	6e90      	ldr	r0, [r2, #104]	; 0x68
  404372:	f010 0008 	ands.w	r0, r0, #8
  404376:	d004      	beq.n	404382 <pmc_switch_mck_to_pllack+0x4a>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
  404378:	2000      	movs	r0, #0
  40437a:	4770      	bx	lr
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
  40437c:	3b01      	subs	r3, #1
  40437e:	d103      	bne.n	404388 <pmc_switch_mck_to_pllack+0x50>
  404380:	e009      	b.n	404396 <pmc_switch_mck_to_pllack+0x5e>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  404382:	f44f 6300 	mov.w	r3, #2048	; 0x800
  404386:	4905      	ldr	r1, [pc, #20]	; (40439c <pmc_switch_mck_to_pllack+0x64>)
  404388:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  40438a:	f012 0f08 	tst.w	r2, #8
  40438e:	d0f5      	beq.n	40437c <pmc_switch_mck_to_pllack+0x44>
  404390:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  404392:	2001      	movs	r0, #1
  404394:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  404396:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  404398:	4770      	bx	lr
  40439a:	bf00      	nop
  40439c:	400e0400 	.word	0x400e0400

004043a0 <pmc_switch_mainck_to_fastrc>:
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
  4043a0:	4b11      	ldr	r3, [pc, #68]	; (4043e8 <pmc_switch_mainck_to_fastrc+0x48>)
  4043a2:	6a1a      	ldr	r2, [r3, #32]
  4043a4:	f442 125c 	orr.w	r2, r2, #3604480	; 0x370000
  4043a8:	f042 0208 	orr.w	r2, r2, #8
  4043ac:	621a      	str	r2, [r3, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  4043ae:	461a      	mov	r2, r3
  4043b0:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4043b2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
  4043b6:	d0fb      	beq.n	4043b0 <pmc_switch_mainck_to_fastrc+0x10>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  4043b8:	4a0b      	ldr	r2, [pc, #44]	; (4043e8 <pmc_switch_mainck_to_fastrc+0x48>)
  4043ba:	6a13      	ldr	r3, [r2, #32]
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
  4043bc:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  4043c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  4043c4:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  4043c8:	4303      	orrs	r3, r0

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  4043ca:	6213      	str	r3, [r2, #32]
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  4043cc:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4043ce:	f413 3f00 	tst.w	r3, #131072	; 0x20000
  4043d2:	d0fb      	beq.n	4043cc <pmc_switch_mainck_to_fastrc+0x2c>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  4043d4:	4a04      	ldr	r2, [pc, #16]	; (4043e8 <pmc_switch_mainck_to_fastrc+0x48>)
  4043d6:	6a13      	ldr	r3, [r2, #32]
  4043d8:	f023 739b 	bic.w	r3, r3, #20316160	; 0x1360000
  4043dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  4043e0:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  4043e4:	6213      	str	r3, [r2, #32]
  4043e6:	4770      	bx	lr
  4043e8:	400e0400 	.word	0x400e0400

004043ec <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  4043ec:	4b02      	ldr	r3, [pc, #8]	; (4043f8 <pmc_osc_is_ready_mainck+0xc>)
  4043ee:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4043f0:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  4043f4:	4770      	bx	lr
  4043f6:	bf00      	nop
  4043f8:	400e0400 	.word	0x400e0400

004043fc <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  4043fc:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  404400:	4b01      	ldr	r3, [pc, #4]	; (404408 <pmc_disable_pllack+0xc>)
  404402:	629a      	str	r2, [r3, #40]	; 0x28
  404404:	4770      	bx	lr
  404406:	bf00      	nop
  404408:	400e0400 	.word	0x400e0400

0040440c <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  40440c:	4b02      	ldr	r3, [pc, #8]	; (404418 <pmc_is_locked_pllack+0xc>)
  40440e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  404410:	f000 0002 	and.w	r0, r0, #2
  404414:	4770      	bx	lr
  404416:	bf00      	nop
  404418:	400e0400 	.word	0x400e0400

0040441c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  40441c:	e7fe      	b.n	40441c <Dummy_Handler>
  40441e:	bf00      	nop

00404420 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  404420:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
  404422:	4b19      	ldr	r3, [pc, #100]	; (404488 <Reset_Handler+0x68>)
  404424:	4a19      	ldr	r2, [pc, #100]	; (40448c <Reset_Handler+0x6c>)
  404426:	429a      	cmp	r2, r3
  404428:	d003      	beq.n	404432 <Reset_Handler+0x12>
		for (; pDest < &_erelocate;) {
  40442a:	4b19      	ldr	r3, [pc, #100]	; (404490 <Reset_Handler+0x70>)
  40442c:	4a16      	ldr	r2, [pc, #88]	; (404488 <Reset_Handler+0x68>)
  40442e:	429a      	cmp	r2, r3
  404430:	d304      	bcc.n	40443c <Reset_Handler+0x1c>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  404432:	4b18      	ldr	r3, [pc, #96]	; (404494 <Reset_Handler+0x74>)
  404434:	4a18      	ldr	r2, [pc, #96]	; (404498 <Reset_Handler+0x78>)
  404436:	429a      	cmp	r2, r3
  404438:	d30f      	bcc.n	40445a <Reset_Handler+0x3a>
  40443a:	e01a      	b.n	404472 <Reset_Handler+0x52>
  40443c:	4912      	ldr	r1, [pc, #72]	; (404488 <Reset_Handler+0x68>)
  40443e:	4b17      	ldr	r3, [pc, #92]	; (40449c <Reset_Handler+0x7c>)
  404440:	1a5b      	subs	r3, r3, r1
  404442:	f023 0303 	bic.w	r3, r3, #3
  404446:	3304      	adds	r3, #4
  404448:	4a10      	ldr	r2, [pc, #64]	; (40448c <Reset_Handler+0x6c>)
  40444a:	4413      	add	r3, r2
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
			*pDest++ = *pSrc++;
  40444c:	f852 0b04 	ldr.w	r0, [r2], #4
  404450:	f841 0b04 	str.w	r0, [r1], #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
  404454:	429a      	cmp	r2, r3
  404456:	d1f9      	bne.n	40444c <Reset_Handler+0x2c>
  404458:	e7eb      	b.n	404432 <Reset_Handler+0x12>
  40445a:	4b11      	ldr	r3, [pc, #68]	; (4044a0 <Reset_Handler+0x80>)
  40445c:	4a11      	ldr	r2, [pc, #68]	; (4044a4 <Reset_Handler+0x84>)
  40445e:	1ad2      	subs	r2, r2, r3
  404460:	f022 0203 	bic.w	r2, r2, #3
  404464:	441a      	add	r2, r3
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  404466:	3b04      	subs	r3, #4
		*pDest++ = 0;
  404468:	2100      	movs	r1, #0
  40446a:	f843 1b04 	str.w	r1, [r3], #4
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  40446e:	4293      	cmp	r3, r2
  404470:	d1fb      	bne.n	40446a <Reset_Handler+0x4a>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  404472:	4a0d      	ldr	r2, [pc, #52]	; (4044a8 <Reset_Handler+0x88>)
  404474:	4b0d      	ldr	r3, [pc, #52]	; (4044ac <Reset_Handler+0x8c>)
  404476:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  40447a:	6093      	str	r3, [r2, #8]

	/* Initialize the C library */
	__libc_init_array();
  40447c:	4b0c      	ldr	r3, [pc, #48]	; (4044b0 <Reset_Handler+0x90>)
  40447e:	4798      	blx	r3

	/* Branch to main function */
	main();
  404480:	4b0c      	ldr	r3, [pc, #48]	; (4044b4 <Reset_Handler+0x94>)
  404482:	4798      	blx	r3
  404484:	e7fe      	b.n	404484 <Reset_Handler+0x64>
  404486:	bf00      	nop
  404488:	20000000 	.word	0x20000000
  40448c:	00406518 	.word	0x00406518
  404490:	20000680 	.word	0x20000680
  404494:	200089bc 	.word	0x200089bc
  404498:	20000680 	.word	0x20000680
  40449c:	2000067f 	.word	0x2000067f
  4044a0:	20000684 	.word	0x20000684
  4044a4:	200089bf 	.word	0x200089bf
  4044a8:	e000ed00 	.word	0xe000ed00
  4044ac:	00400000 	.word	0x00400000
  4044b0:	00404f39 	.word	0x00404f39
  4044b4:	00404885 	.word	0x00404885

004044b8 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) {
  4044b8:	4b3c      	ldr	r3, [pc, #240]	; (4045ac <SystemCoreClockUpdate+0xf4>)
  4044ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4044bc:	f003 0303 	and.w	r3, r3, #3
  4044c0:	2b01      	cmp	r3, #1
  4044c2:	d00f      	beq.n	4044e4 <SystemCoreClockUpdate+0x2c>
  4044c4:	b113      	cbz	r3, 4044cc <SystemCoreClockUpdate+0x14>
  4044c6:	2b02      	cmp	r3, #2
  4044c8:	d029      	beq.n	40451e <SystemCoreClockUpdate+0x66>
  4044ca:	e057      	b.n	40457c <SystemCoreClockUpdate+0xc4>
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
  4044cc:	4b38      	ldr	r3, [pc, #224]	; (4045b0 <SystemCoreClockUpdate+0xf8>)
  4044ce:	695b      	ldr	r3, [r3, #20]
  4044d0:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
  4044d4:	bf14      	ite	ne
  4044d6:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
  4044da:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  4044de:	4b35      	ldr	r3, [pc, #212]	; (4045b4 <SystemCoreClockUpdate+0xfc>)
  4044e0:	601a      	str	r2, [r3, #0]
  4044e2:	e04b      	b.n	40457c <SystemCoreClockUpdate+0xc4>
		}
		break;

	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
  4044e4:	4b31      	ldr	r3, [pc, #196]	; (4045ac <SystemCoreClockUpdate+0xf4>)
  4044e6:	6a1b      	ldr	r3, [r3, #32]
  4044e8:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4044ec:	d003      	beq.n	4044f6 <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
  4044ee:	4a32      	ldr	r2, [pc, #200]	; (4045b8 <SystemCoreClockUpdate+0x100>)
  4044f0:	4b30      	ldr	r3, [pc, #192]	; (4045b4 <SystemCoreClockUpdate+0xfc>)
  4044f2:	601a      	str	r2, [r3, #0]
  4044f4:	e042      	b.n	40457c <SystemCoreClockUpdate+0xc4>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4044f6:	4a31      	ldr	r2, [pc, #196]	; (4045bc <SystemCoreClockUpdate+0x104>)
  4044f8:	4b2e      	ldr	r3, [pc, #184]	; (4045b4 <SystemCoreClockUpdate+0xfc>)
  4044fa:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
  4044fc:	4b2b      	ldr	r3, [pc, #172]	; (4045ac <SystemCoreClockUpdate+0xf4>)
  4044fe:	6a1b      	ldr	r3, [r3, #32]
  404500:	f003 0370 	and.w	r3, r3, #112	; 0x70
  404504:	2b10      	cmp	r3, #16
  404506:	d002      	beq.n	40450e <SystemCoreClockUpdate+0x56>
  404508:	2b20      	cmp	r3, #32
  40450a:	d004      	beq.n	404516 <SystemCoreClockUpdate+0x5e>
  40450c:	e036      	b.n	40457c <SystemCoreClockUpdate+0xc4>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;

			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
  40450e:	4a2c      	ldr	r2, [pc, #176]	; (4045c0 <SystemCoreClockUpdate+0x108>)
  404510:	4b28      	ldr	r3, [pc, #160]	; (4045b4 <SystemCoreClockUpdate+0xfc>)
  404512:	601a      	str	r2, [r3, #0]
				break;
  404514:	e032      	b.n	40457c <SystemCoreClockUpdate+0xc4>

			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
  404516:	4a28      	ldr	r2, [pc, #160]	; (4045b8 <SystemCoreClockUpdate+0x100>)
  404518:	4b26      	ldr	r3, [pc, #152]	; (4045b4 <SystemCoreClockUpdate+0xfc>)
  40451a:	601a      	str	r2, [r3, #0]
				break;
  40451c:	e02e      	b.n	40457c <SystemCoreClockUpdate+0xc4>
			}
		}
		break;

	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
  40451e:	4b23      	ldr	r3, [pc, #140]	; (4045ac <SystemCoreClockUpdate+0xf4>)
  404520:	6a1b      	ldr	r3, [r3, #32]
  404522:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  404526:	d003      	beq.n	404530 <SystemCoreClockUpdate+0x78>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
  404528:	4a23      	ldr	r2, [pc, #140]	; (4045b8 <SystemCoreClockUpdate+0x100>)
  40452a:	4b22      	ldr	r3, [pc, #136]	; (4045b4 <SystemCoreClockUpdate+0xfc>)
  40452c:	601a      	str	r2, [r3, #0]
  40452e:	e012      	b.n	404556 <SystemCoreClockUpdate+0x9e>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  404530:	4a22      	ldr	r2, [pc, #136]	; (4045bc <SystemCoreClockUpdate+0x104>)
  404532:	4b20      	ldr	r3, [pc, #128]	; (4045b4 <SystemCoreClockUpdate+0xfc>)
  404534:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
  404536:	4b1d      	ldr	r3, [pc, #116]	; (4045ac <SystemCoreClockUpdate+0xf4>)
  404538:	6a1b      	ldr	r3, [r3, #32]
  40453a:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40453e:	2b10      	cmp	r3, #16
  404540:	d002      	beq.n	404548 <SystemCoreClockUpdate+0x90>
  404542:	2b20      	cmp	r3, #32
  404544:	d004      	beq.n	404550 <SystemCoreClockUpdate+0x98>
  404546:	e006      	b.n	404556 <SystemCoreClockUpdate+0x9e>
				/* So the 4MHz RC selection is forbidden */
				Assert(false);
				break;

			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
  404548:	4a1d      	ldr	r2, [pc, #116]	; (4045c0 <SystemCoreClockUpdate+0x108>)
  40454a:	4b1a      	ldr	r3, [pc, #104]	; (4045b4 <SystemCoreClockUpdate+0xfc>)
  40454c:	601a      	str	r2, [r3, #0]
				break;
  40454e:	e002      	b.n	404556 <SystemCoreClockUpdate+0x9e>

			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
  404550:	4a19      	ldr	r2, [pc, #100]	; (4045b8 <SystemCoreClockUpdate+0x100>)
  404552:	4b18      	ldr	r3, [pc, #96]	; (4045b4 <SystemCoreClockUpdate+0xfc>)
  404554:	601a      	str	r2, [r3, #0]
			default:
				break;
			}
		}

		if ((uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
  404556:	4b15      	ldr	r3, [pc, #84]	; (4045ac <SystemCoreClockUpdate+0xf4>)
  404558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40455a:	f003 0303 	and.w	r3, r3, #3
  40455e:	2b02      	cmp	r3, #2
  404560:	d10c      	bne.n	40457c <SystemCoreClockUpdate+0xc4>
				PMC_MCKR_CSS_PLLA_CLK) {
			SystemCoreClock *=
					((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  404562:	4a12      	ldr	r2, [pc, #72]	; (4045ac <SystemCoreClockUpdate+0xf4>)
  404564:	6a93      	ldr	r3, [r2, #40]	; 0x28
					>> CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  404566:	6a92      	ldr	r2, [r2, #40]	; 0x28
  404568:	4812      	ldr	r0, [pc, #72]	; (4045b4 <SystemCoreClockUpdate+0xfc>)
  40456a:	f3c3 410a 	ubfx	r1, r3, #16, #11
  40456e:	6803      	ldr	r3, [r0, #0]
  404570:	fb01 3303 	mla	r3, r1, r3, r3
  404574:	b2d2      	uxtb	r2, r2
  404576:	fbb3 f3f2 	udiv	r3, r3, r2
  40457a:	6003      	str	r3, [r0, #0]

	default:
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
  40457c:	4b0b      	ldr	r3, [pc, #44]	; (4045ac <SystemCoreClockUpdate+0xf4>)
  40457e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  404580:	f003 0370 	and.w	r3, r3, #112	; 0x70
  404584:	2b70      	cmp	r3, #112	; 0x70
  404586:	d107      	bne.n	404598 <SystemCoreClockUpdate+0xe0>
		SystemCoreClock /= 3U;
  404588:	4a0a      	ldr	r2, [pc, #40]	; (4045b4 <SystemCoreClockUpdate+0xfc>)
  40458a:	6813      	ldr	r3, [r2, #0]
  40458c:	490d      	ldr	r1, [pc, #52]	; (4045c4 <SystemCoreClockUpdate+0x10c>)
  40458e:	fba1 1303 	umull	r1, r3, r1, r3
  404592:	085b      	lsrs	r3, r3, #1
  404594:	6013      	str	r3, [r2, #0]
  404596:	4770      	bx	lr
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >>
  404598:	4b04      	ldr	r3, [pc, #16]	; (4045ac <SystemCoreClockUpdate+0xf4>)
  40459a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40459c:	4905      	ldr	r1, [pc, #20]	; (4045b4 <SystemCoreClockUpdate+0xfc>)
  40459e:	f3c3 1202 	ubfx	r2, r3, #4, #3
  4045a2:	680b      	ldr	r3, [r1, #0]
  4045a4:	40d3      	lsrs	r3, r2
  4045a6:	600b      	str	r3, [r1, #0]
  4045a8:	4770      	bx	lr
  4045aa:	bf00      	nop
  4045ac:	400e0400 	.word	0x400e0400
  4045b0:	400e1410 	.word	0x400e1410
  4045b4:	20000250 	.word	0x20000250
  4045b8:	00b71b00 	.word	0x00b71b00
  4045bc:	003d0900 	.word	0x003d0900
  4045c0:	007a1200 	.word	0x007a1200
  4045c4:	aaaaaaab 	.word	0xaaaaaaab

004045c8 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
  4045c8:	4b0f      	ldr	r3, [pc, #60]	; (404608 <system_init_flash+0x40>)
  4045ca:	4298      	cmp	r0, r3
  4045cc:	d804      	bhi.n	4045d8 <system_init_flash+0x10>
		EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  4045ce:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  4045d2:	4b0e      	ldr	r3, [pc, #56]	; (40460c <system_init_flash+0x44>)
  4045d4:	601a      	str	r2, [r3, #0]
  4045d6:	4770      	bx	lr
	} else {
		if (ul_clk < CHIP_FREQ_FWS_1) {
  4045d8:	4b0d      	ldr	r3, [pc, #52]	; (404610 <system_init_flash+0x48>)
  4045da:	4298      	cmp	r0, r3
  4045dc:	d803      	bhi.n	4045e6 <system_init_flash+0x1e>
			EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  4045de:	4a0d      	ldr	r2, [pc, #52]	; (404614 <system_init_flash+0x4c>)
  4045e0:	4b0a      	ldr	r3, [pc, #40]	; (40460c <system_init_flash+0x44>)
  4045e2:	601a      	str	r2, [r3, #0]
  4045e4:	4770      	bx	lr
		} else {
			if (ul_clk < CHIP_FREQ_FWS_2) {
  4045e6:	4b0c      	ldr	r3, [pc, #48]	; (404618 <system_init_flash+0x50>)
  4045e8:	4298      	cmp	r0, r3
  4045ea:	d803      	bhi.n	4045f4 <system_init_flash+0x2c>
				EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  4045ec:	4a0b      	ldr	r2, [pc, #44]	; (40461c <system_init_flash+0x54>)
  4045ee:	4b07      	ldr	r3, [pc, #28]	; (40460c <system_init_flash+0x44>)
  4045f0:	601a      	str	r2, [r3, #0]
  4045f2:	4770      	bx	lr
			} else {
				if (ul_clk < CHIP_FREQ_FWS_3) {
  4045f4:	4b0a      	ldr	r3, [pc, #40]	; (404620 <system_init_flash+0x58>)
  4045f6:	4298      	cmp	r0, r3
					EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  4045f8:	bf94      	ite	ls
  4045fa:	4a0a      	ldrls	r2, [pc, #40]	; (404624 <system_init_flash+0x5c>)
				} else {
					EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  4045fc:	f04f 2204 	movhi.w	r2, #67109888	; 0x4000400
  404600:	4b02      	ldr	r3, [pc, #8]	; (40460c <system_init_flash+0x44>)
  404602:	601a      	str	r2, [r3, #0]
  404604:	4770      	bx	lr
  404606:	bf00      	nop
  404608:	01312cff 	.word	0x01312cff
  40460c:	400e0a00 	.word	0x400e0a00
  404610:	026259ff 	.word	0x026259ff
  404614:	04000100 	.word	0x04000100
  404618:	039386ff 	.word	0x039386ff
  40461c:	04000200 	.word	0x04000200
  404620:	04c4b3ff 	.word	0x04c4b3ff
  404624:	04000300 	.word	0x04000300

00404628 <init_IO_int>:
 #define MAX7314_inputPortLow 0x00
 #define MAX7314_inputPortHigh 0x01

 #define MAX7314_slaveAddress (uint8_t) 0b0100000 //7bit address when AD0 = GND

 void init_IO_int(){
  404628:	b470      	push	{r4, r5, r6}

	//enable clock for PIOB
	REG_PMC_PCER0 |= PMC_PCER0_PID12;
  40462a:	4a2b      	ldr	r2, [pc, #172]	; (4046d8 <init_IO_int+0xb0>)
  40462c:	6813      	ldr	r3, [r2, #0]
  40462e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  404632:	6013      	str	r3, [r2, #0]

	//Set up PB10 as Button IO Expander Input
	REG_PIOB_PER |= PIO_PER_P10; //enable PIO controller
  404634:	4d29      	ldr	r5, [pc, #164]	; (4046dc <init_IO_int+0xb4>)
  404636:	682b      	ldr	r3, [r5, #0]
  404638:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
  40463c:	602b      	str	r3, [r5, #0]
	REG_PIOB_ODR |= PIO_ODR_P10; //disable output
  40463e:	4c28      	ldr	r4, [pc, #160]	; (4046e0 <init_IO_int+0xb8>)
  404640:	6823      	ldr	r3, [r4, #0]
  404642:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
  404646:	6023      	str	r3, [r4, #0]
	REG_PIOB_PPDDR |= PIO_PPDDR_P10; //disable pull-down resistor
  404648:	4826      	ldr	r0, [pc, #152]	; (4046e4 <init_IO_int+0xbc>)
  40464a:	6803      	ldr	r3, [r0, #0]
  40464c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
  404650:	6003      	str	r3, [r0, #0]
	REG_PIOB_PUER |= PIO_PUER_P10;	//enable pull-up resistor
  404652:	4925      	ldr	r1, [pc, #148]	; (4046e8 <init_IO_int+0xc0>)
  404654:	680b      	ldr	r3, [r1, #0]
  404656:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
  40465a:	600b      	str	r3, [r1, #0]
	REG_PIOB_IFSCER |= PIO_IFSCER_P10; //turn on slow clock debounce
  40465c:	f602 4274 	addw	r2, r2, #3188	; 0xc74
  404660:	6813      	ldr	r3, [r2, #0]
  404662:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
  404666:	6013      	str	r3, [r2, #0]
	REG_PIOB_IFER |= PIO_IFER_P10;	//start debounce filter
  404668:	4b20      	ldr	r3, [pc, #128]	; (4046ec <init_IO_int+0xc4>)
  40466a:	681e      	ldr	r6, [r3, #0]
  40466c:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
  404670:	601e      	str	r6, [r3, #0]

	//Set up PB11 as Encoder IO Expander Input
	REG_PIOB_PER |= PIO_PER_P11; //enable PIO controller
  404672:	682e      	ldr	r6, [r5, #0]
  404674:	f446 6600 	orr.w	r6, r6, #2048	; 0x800
  404678:	602e      	str	r6, [r5, #0]
	REG_PIOB_ODR |= PIO_ODR_P11; //disable output
  40467a:	6825      	ldr	r5, [r4, #0]
  40467c:	f445 6500 	orr.w	r5, r5, #2048	; 0x800
  404680:	6025      	str	r5, [r4, #0]
	REG_PIOB_PPDDR |= PIO_PPDDR_P11; //disable pull-down resistor
  404682:	6804      	ldr	r4, [r0, #0]
  404684:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
  404688:	6004      	str	r4, [r0, #0]
	REG_PIOB_PUER |= PIO_PUER_P11;	//enable pull-up resistor
  40468a:	6808      	ldr	r0, [r1, #0]
  40468c:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
  404690:	6008      	str	r0, [r1, #0]
	REG_PIOB_IFSCER |= PIO_IFSCER_P11; //turn on slow clock debounce
  404692:	6811      	ldr	r1, [r2, #0]
  404694:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
  404698:	6011      	str	r1, [r2, #0]
	REG_PIOB_IFER |= PIO_IFER_P11;	//start debounce filter
  40469a:	681a      	ldr	r2, [r3, #0]
  40469c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
  4046a0:	601a      	str	r2, [r3, #0]

	uint32_t flag_clear = REG_PIOB_ISR;	//clear left over interrupt flags
  4046a2:	332c      	adds	r3, #44	; 0x2c
  4046a4:	681b      	ldr	r3, [r3, #0]

	//Enable interrupts for PB10
	REG_PIOB_IER |= PIO_IER_P10;			//enable falling edge change interrupt
  4046a6:	4a12      	ldr	r2, [pc, #72]	; (4046f0 <init_IO_int+0xc8>)
  4046a8:	6813      	ldr	r3, [r2, #0]
  4046aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
  4046ae:	6013      	str	r3, [r2, #0]
	REG_PIOB_FELLSR |= PIO_FELLSR_P10;
  4046b0:	4b10      	ldr	r3, [pc, #64]	; (4046f4 <init_IO_int+0xcc>)
  4046b2:	6819      	ldr	r1, [r3, #0]
  4046b4:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
  4046b8:	6019      	str	r1, [r3, #0]

	//Enable interrupts for PB10
	REG_PIOB_IER |= PIO_IER_P11;			//enable falling edge change interrupt
  4046ba:	6811      	ldr	r1, [r2, #0]
  4046bc:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
  4046c0:	6011      	str	r1, [r2, #0]
	REG_PIOB_FELLSR |= PIO_FELLSR_P11;
  4046c2:	681a      	ldr	r2, [r3, #0]
  4046c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
  4046c8:	601a      	str	r2, [r3, #0]
  4046ca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  4046ce:	4b0a      	ldr	r3, [pc, #40]	; (4046f8 <init_IO_int+0xd0>)
  4046d0:	601a      	str	r2, [r3, #0]

	NVIC_EnableIRQ(PIOB_IRQn);

 }
  4046d2:	bc70      	pop	{r4, r5, r6}
  4046d4:	4770      	bx	lr
  4046d6:	bf00      	nop
  4046d8:	400e0410 	.word	0x400e0410
  4046dc:	400e1000 	.word	0x400e1000
  4046e0:	400e1014 	.word	0x400e1014
  4046e4:	400e1090 	.word	0x400e1090
  4046e8:	400e1064 	.word	0x400e1064
  4046ec:	400e1020 	.word	0x400e1020
  4046f0:	400e1040 	.word	0x400e1040
  4046f4:	400e10d0 	.word	0x400e10d0
  4046f8:	e000e100 	.word	0xe000e100

004046fc <i2c_init>:

 void i2c_init(){

	REG_TWI0_CR = TWI_CR_SWRST;
  4046fc:	4b12      	ldr	r3, [pc, #72]	; (404748 <i2c_init+0x4c>)
  4046fe:	2280      	movs	r2, #128	; 0x80
  404700:	601a      	str	r2, [r3, #0]

	//enable peripheral clock for i2c using TWI0
	REG_PMC_PCER0 |= PMC_PCER0_PID19;
  404702:	4912      	ldr	r1, [pc, #72]	; (40474c <i2c_init+0x50>)
  404704:	680a      	ldr	r2, [r1, #0]
  404706:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
  40470a:	600a      	str	r2, [r1, #0]

	//disable GPIO control of i2c pins
	REG_PIOA_PDR |= PIO_PDR_P3;
  40470c:	4a10      	ldr	r2, [pc, #64]	; (404750 <i2c_init+0x54>)
  40470e:	6811      	ldr	r1, [r2, #0]
  404710:	f041 0108 	orr.w	r1, r1, #8
  404714:	6011      	str	r1, [r2, #0]
	REG_PIOA_PDR |= PIO_PDR_P4;
  404716:	6811      	ldr	r1, [r2, #0]
  404718:	f041 0110 	orr.w	r1, r1, #16
  40471c:	6011      	str	r1, [r2, #0]

	// tlow = ((CLDIV * 2^CKDIV) + 4) * Tper
	// thigh = ((CHDIV * 2^CKDIV) + 4) * Tper
	// thigh = tlow => 400kHz (supposedly...)
	//set TWI0 clock to 400kHz (supported by IO expander)
	REG_TWI0_CWGR |= TWI_CWGR_CLDIV(121);
  40471e:	f5a2 2248 	sub.w	r2, r2, #819200	; 0xc8000
  404722:	f6a2 52f4 	subw	r2, r2, #3572	; 0xdf4
  404726:	6811      	ldr	r1, [r2, #0]
  404728:	f041 0179 	orr.w	r1, r1, #121	; 0x79
  40472c:	6011      	str	r1, [r2, #0]
	REG_TWI0_CWGR |= TWI_CWGR_CHDIV(121);
  40472e:	6811      	ldr	r1, [r2, #0]
  404730:	f441 41f2 	orr.w	r1, r1, #30976	; 0x7900
  404734:	6011      	str	r1, [r2, #0]

	//disable slave mode & enable master mode
	REG_TWI0_CR |= TWI_CR_SVDIS;
  404736:	681a      	ldr	r2, [r3, #0]
  404738:	f042 0220 	orr.w	r2, r2, #32
  40473c:	601a      	str	r2, [r3, #0]
	REG_TWI0_CR |= TWI_CR_MSEN;
  40473e:	681a      	ldr	r2, [r3, #0]
  404740:	f042 0204 	orr.w	r2, r2, #4
  404744:	601a      	str	r2, [r3, #0]
  404746:	4770      	bx	lr
  404748:	40018000 	.word	0x40018000
  40474c:	400e0410 	.word	0x400e0410
  404750:	400e0e04 	.word	0x400e0e04

00404754 <config_MAX7314>:
		}
	 }

 }

 void config_MAX7314(){
  404754:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404758:	b089      	sub	sp, #36	; 0x24
	twi_packet_t packet_tx;
	uint8_t config_data[] = {MAX7314_configRegister, 0x08};
  40475a:	f8df 808c 	ldr.w	r8, [pc, #140]	; 4047e8 <config_MAX7314+0x94>
  40475e:	af02      	add	r7, sp, #8
  404760:	f8b8 3000 	ldrh.w	r3, [r8]
  404764:	f8ad 3008 	strh.w	r3, [sp, #8]

	/* Configure the Chip Config Register */
	packet_tx.chip        = 0b0100000;
  404768:	2620      	movs	r6, #32
  40476a:	f88d 601c 	strb.w	r6, [sp, #28]
	packet_tx.addr_length = 0;
  40476e:	2500      	movs	r5, #0
  404770:	9504      	str	r5, [sp, #16]
	packet_tx.buffer      = (uint8_t *) config_data;
  404772:	9705      	str	r7, [sp, #20]
	packet_tx.length      = 2;
  404774:	f04f 0b02 	mov.w	fp, #2
  404778:	f8cd b018 	str.w	fp, [sp, #24]
	twi_master_write(BOARD_BASE_TWI, &packet_tx);
  40477c:	a903      	add	r1, sp, #12
  40477e:	4818      	ldr	r0, [pc, #96]	; (4047e0 <config_MAX7314+0x8c>)
  404780:	4c18      	ldr	r4, [pc, #96]	; (4047e4 <config_MAX7314+0x90>)
  404782:	47a0      	blx	r4


	uint8_t port_data_write_encoders[] = {MAX7314_portConfigRegisterLow, 0xFF, 0xFF};
  404784:	aa01      	add	r2, sp, #4
  404786:	4643      	mov	r3, r8
  404788:	f833 af04 	ldrh.w	sl, [r3, #4]!
  40478c:	f893 9002 	ldrb.w	r9, [r3, #2]
  404790:	f8ad a004 	strh.w	sl, [sp, #4]
  404794:	f88d 9006 	strb.w	r9, [sp, #6]

	/* Configure the Chip Ports as Inputs */
	packet_tx.chip        = 0b0100000;
  404798:	f88d 601c 	strb.w	r6, [sp, #28]
	packet_tx.addr_length = 0;
  40479c:	9504      	str	r5, [sp, #16]
	packet_tx.buffer      = (uint8_t *) port_data_write_encoders;
  40479e:	9205      	str	r2, [sp, #20]
	packet_tx.length      = 3;
  4047a0:	2603      	movs	r6, #3
  4047a2:	9606      	str	r6, [sp, #24]
	twi_master_write(BOARD_BASE_TWI, &packet_tx);
  4047a4:	a903      	add	r1, sp, #12
  4047a6:	480e      	ldr	r0, [pc, #56]	; (4047e0 <config_MAX7314+0x8c>)
  4047a8:	47a0      	blx	r4

	/* Configure the Chip Config Register */
	packet_tx.chip        = 0b0100100;
  4047aa:	f04f 0824 	mov.w	r8, #36	; 0x24
  4047ae:	f88d 801c 	strb.w	r8, [sp, #28]
	packet_tx.addr_length = 0;
  4047b2:	9504      	str	r5, [sp, #16]
	packet_tx.buffer      = (uint8_t *) config_data;
  4047b4:	9705      	str	r7, [sp, #20]
	packet_tx.length      = 2;
  4047b6:	f8cd b018 	str.w	fp, [sp, #24]
	twi_master_write(BOARD_BASE_TWI, &packet_tx);
  4047ba:	a903      	add	r1, sp, #12
  4047bc:	4808      	ldr	r0, [pc, #32]	; (4047e0 <config_MAX7314+0x8c>)
  4047be:	47a0      	blx	r4


	uint8_t port_data_write_buttons[] = {MAX7314_portConfigRegisterLow, 0xFF, 0xFF};
  4047c0:	f8ad a000 	strh.w	sl, [sp]
  4047c4:	f88d 9002 	strb.w	r9, [sp, #2]

	/* Configure the Chip Ports as Inputs */
	packet_tx.chip        = 0b0100100;
  4047c8:	f88d 801c 	strb.w	r8, [sp, #28]
	packet_tx.addr_length = 0;
  4047cc:	9504      	str	r5, [sp, #16]
	packet_tx.buffer      = (uint8_t *) port_data_write_buttons;
  4047ce:	f8cd d014 	str.w	sp, [sp, #20]
	packet_tx.length      = 3;
  4047d2:	9606      	str	r6, [sp, #24]
	twi_master_write(BOARD_BASE_TWI, &packet_tx);
  4047d4:	a903      	add	r1, sp, #12
  4047d6:	4802      	ldr	r0, [pc, #8]	; (4047e0 <config_MAX7314+0x8c>)
  4047d8:	47a0      	blx	r4
 }
  4047da:	b009      	add	sp, #36	; 0x24
  4047dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4047e0:	40018000 	.word	0x40018000
  4047e4:	00400329 	.word	0x00400329
  4047e8:	004064e4 	.word	0x004064e4

004047ec <read_encoder_MAX7314>:

 void read_encoder_MAX7314(uint8_t *data){
  4047ec:	b5f0      	push	{r4, r5, r6, r7, lr}
  4047ee:	b08d      	sub	sp, #52	; 0x34
  4047f0:	4607      	mov	r7, r0
	/* Data Packets for tx/rx */
	twi_packet_t packet_rx, packet_tx;
	uint8_t port_addr[] = {MAX7314_inputPortLow};
  4047f2:	2400      	movs	r4, #0
  4047f4:	f88d 4004 	strb.w	r4, [sp, #4]

	
	/* Write the command byte address to be the Low byte of the Input Port */
	packet_tx.chip        = 0b0100000;
  4047f8:	2620      	movs	r6, #32
  4047fa:	f88d 6018 	strb.w	r6, [sp, #24]
	packet_tx.addr_length = 0;
  4047fe:	9403      	str	r4, [sp, #12]
	packet_tx.buffer      = (uint8_t *) port_addr;
  404800:	ab01      	add	r3, sp, #4
  404802:	9304      	str	r3, [sp, #16]
	packet_tx.length      = 1;
  404804:	2301      	movs	r3, #1
  404806:	9305      	str	r3, [sp, #20]
	twi_master_write(BOARD_BASE_TWI, &packet_tx);
  404808:	4d08      	ldr	r5, [pc, #32]	; (40482c <read_encoder_MAX7314+0x40>)
  40480a:	a902      	add	r1, sp, #8
  40480c:	4628      	mov	r0, r5
  40480e:	4b08      	ldr	r3, [pc, #32]	; (404830 <read_encoder_MAX7314+0x44>)
  404810:	4798      	blx	r3


	/* Read Data from the Low and High Input Ports */
	packet_rx.chip        = 0b0100000;
  404812:	f88d 602c 	strb.w	r6, [sp, #44]	; 0x2c
	packet_rx.addr_length = 0;
  404816:	9408      	str	r4, [sp, #32]
	packet_rx.buffer      = data;
  404818:	9709      	str	r7, [sp, #36]	; 0x24
	packet_rx.length      = 2;
  40481a:	2302      	movs	r3, #2
  40481c:	930a      	str	r3, [sp, #40]	; 0x28
	twi_master_read(BOARD_BASE_TWI, &packet_rx);
  40481e:	a907      	add	r1, sp, #28
  404820:	4628      	mov	r0, r5
  404822:	4b04      	ldr	r3, [pc, #16]	; (404834 <read_encoder_MAX7314+0x48>)
  404824:	4798      	blx	r3


 }
  404826:	b00d      	add	sp, #52	; 0x34
  404828:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40482a:	bf00      	nop
  40482c:	40018000 	.word	0x40018000
  404830:	00400329 	.word	0x00400329
  404834:	0040022d 	.word	0x0040022d

00404838 <read_button_MAX7314>:

void read_button_MAX7314(uint8_t *data){
  404838:	b5f0      	push	{r4, r5, r6, r7, lr}
  40483a:	b08d      	sub	sp, #52	; 0x34
  40483c:	4607      	mov	r7, r0
	/* Data Packets for tx/rx */
	twi_packet_t packet_rx, packet_tx;
	uint8_t port_addr[] = {MAX7314_inputPortLow};
  40483e:	2400      	movs	r4, #0
  404840:	f88d 4004 	strb.w	r4, [sp, #4]

	  
	/* Write the command byte address to be the Low byte of the Input Port */
	packet_tx.chip        = 0b0100100;
  404844:	2624      	movs	r6, #36	; 0x24
  404846:	f88d 6018 	strb.w	r6, [sp, #24]
	packet_tx.addr_length = 0;
  40484a:	9403      	str	r4, [sp, #12]
	packet_tx.buffer      = (uint8_t *) port_addr;
  40484c:	ab01      	add	r3, sp, #4
  40484e:	9304      	str	r3, [sp, #16]
	packet_tx.length      = 1;
  404850:	2301      	movs	r3, #1
  404852:	9305      	str	r3, [sp, #20]
	twi_master_write(BOARD_BASE_TWI, &packet_tx);
  404854:	4d08      	ldr	r5, [pc, #32]	; (404878 <read_button_MAX7314+0x40>)
  404856:	a902      	add	r1, sp, #8
  404858:	4628      	mov	r0, r5
  40485a:	4b08      	ldr	r3, [pc, #32]	; (40487c <read_button_MAX7314+0x44>)
  40485c:	4798      	blx	r3


	/* Read Data from the Low and High Input Ports */
	packet_rx.chip        = 0b0100100;
  40485e:	f88d 602c 	strb.w	r6, [sp, #44]	; 0x2c
	packet_rx.addr_length = 0;
  404862:	9408      	str	r4, [sp, #32]
	packet_rx.buffer      = data;
  404864:	9709      	str	r7, [sp, #36]	; 0x24
	packet_rx.length      = 2;
  404866:	2302      	movs	r3, #2
  404868:	930a      	str	r3, [sp, #40]	; 0x28
	twi_master_read(BOARD_BASE_TWI, &packet_rx);
  40486a:	a907      	add	r1, sp, #28
  40486c:	4628      	mov	r0, r5
  40486e:	4b04      	ldr	r3, [pc, #16]	; (404880 <read_button_MAX7314+0x48>)
  404870:	4798      	blx	r3


}
  404872:	b00d      	add	sp, #52	; 0x34
  404874:	bdf0      	pop	{r4, r5, r6, r7, pc}
  404876:	bf00      	nop
  404878:	40018000 	.word	0x40018000
  40487c:	00400329 	.word	0x00400329
  404880:	0040022d 	.word	0x0040022d

00404884 <main>:
void read_button_MAX7314(uint8_t *port_data);
void read_encoder_MAX7314(uint8_t *port_data);


int main (void)
{
  404884:	b508      	push	{r3, lr}
	sysclk_init();				//initialize system clock
  404886:	4b23      	ldr	r3, [pc, #140]	; (404914 <main+0x90>)
  404888:	4798      	blx	r3
	WDT->WDT_MR = WDT_MR_WDDIS; //disable watchdog timer
  40488a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  40488e:	4b22      	ldr	r3, [pc, #136]	; (404918 <main+0x94>)
  404890:	605a      	str	r2, [r3, #4]

	board_init();				//board init (currently empty)
  404892:	4b22      	ldr	r3, [pc, #136]	; (40491c <main+0x98>)
  404894:	4798      	blx	r3
	
	led_init_colors();
  404896:	4b22      	ldr	r3, [pc, #136]	; (404920 <main+0x9c>)
  404898:	4798      	blx	r3
	SPI_led_init();
  40489a:	4b22      	ldr	r3, [pc, #136]	; (404924 <main+0xa0>)
  40489c:	4798      	blx	r3
	i2c_init();
  40489e:	4b22      	ldr	r3, [pc, #136]	; (404928 <main+0xa4>)
  4048a0:	4798      	blx	r3
	init_IO_int();
  4048a2:	4b22      	ldr	r3, [pc, #136]	; (40492c <main+0xa8>)
  4048a4:	4798      	blx	r3
	timers_init();
  4048a6:	4b22      	ldr	r3, [pc, #136]	; (404930 <main+0xac>)
  4048a8:	4798      	blx	r3
	ADC_init();
  4048aa:	4b22      	ldr	r3, [pc, #136]	; (404934 <main+0xb0>)
  4048ac:	4798      	blx	r3
	Encoder_init();				//initialize encoders
  4048ae:	4b22      	ldr	r3, [pc, #136]	; (404938 <main+0xb4>)
  4048b0:	4798      	blx	r3
	all_displays_init();
  4048b2:	4b22      	ldr	r3, [pc, #136]	; (40493c <main+0xb8>)
  4048b4:	4798      	blx	r3
	init_sequencer_controls();
  4048b6:	4b22      	ldr	r3, [pc, #136]	; (404940 <main+0xbc>)
  4048b8:	4798      	blx	r3

	leds_update_display();
  4048ba:	4b22      	ldr	r3, [pc, #136]	; (404944 <main+0xc0>)
  4048bc:	4798      	blx	r3
	update_timers(bpm);
  4048be:	4c22      	ldr	r4, [pc, #136]	; (404948 <main+0xc4>)
  4048c0:	8820      	ldrh	r0, [r4, #0]
  4048c2:	4b22      	ldr	r3, [pc, #136]	; (40494c <main+0xc8>)
  4048c4:	4798      	blx	r3
	config_MAX7314();
  4048c6:	4b22      	ldr	r3, [pc, #136]	; (404950 <main+0xcc>)
  4048c8:	4798      	blx	r3
	read_button_MAX7314(button_port_data);
  4048ca:	4822      	ldr	r0, [pc, #136]	; (404954 <main+0xd0>)
  4048cc:	4b22      	ldr	r3, [pc, #136]	; (404958 <main+0xd4>)
  4048ce:	4798      	blx	r3

	//notes_default();
	//flash_write_mem(0x00490000);
 	
	note_display(48);
  4048d0:	2030      	movs	r0, #48	; 0x30
  4048d2:	4b22      	ldr	r3, [pc, #136]	; (40495c <main+0xd8>)
  4048d4:	4798      	blx	r3
 	

 	bpm_display(bpm);
  4048d6:	8820      	ldrh	r0, [r4, #0]
  4048d8:	4b21      	ldr	r3, [pc, #132]	; (404960 <main+0xdc>)
  4048da:	4798      	blx	r3
 	res_display(res_to_int(resolution));
  4048dc:	4b21      	ldr	r3, [pc, #132]	; (404964 <main+0xe0>)
  4048de:	7818      	ldrb	r0, [r3, #0]
  4048e0:	4b21      	ldr	r3, [pc, #132]	; (404968 <main+0xe4>)
  4048e2:	4798      	blx	r3
  4048e4:	4b21      	ldr	r3, [pc, #132]	; (40496c <main+0xe8>)
  4048e6:	4798      	blx	r3
 	page_display(curr_page);
  4048e8:	4b21      	ldr	r3, [pc, #132]	; (404970 <main+0xec>)
  4048ea:	7818      	ldrb	r0, [r3, #0]
  4048ec:	4b21      	ldr	r3, [pc, #132]	; (404974 <main+0xf0>)
  4048ee:	4798      	blx	r3
 	pattern_display(curr_pattern);
  4048f0:	4b21      	ldr	r3, [pc, #132]	; (404978 <main+0xf4>)
  4048f2:	7818      	ldrb	r0, [r3, #0]
  4048f4:	4b21      	ldr	r3, [pc, #132]	; (40497c <main+0xf8>)
  4048f6:	4798      	blx	r3
 	output_display_1(curr_pattern_ch[0], curr_pattern_ch[1]);
  4048f8:	4c21      	ldr	r4, [pc, #132]	; (404980 <main+0xfc>)
  4048fa:	7861      	ldrb	r1, [r4, #1]
  4048fc:	7820      	ldrb	r0, [r4, #0]
  4048fe:	4b21      	ldr	r3, [pc, #132]	; (404984 <main+0x100>)
  404900:	4798      	blx	r3
 	output_display_2(curr_pattern_ch[2], curr_pattern_ch[3]);
  404902:	78e1      	ldrb	r1, [r4, #3]
  404904:	78a0      	ldrb	r0, [r4, #2]
  404906:	4b20      	ldr	r3, [pc, #128]	; (404988 <main+0x104>)
  404908:	4798      	blx	r3

	pattern_mem_read(0x00490000);
  40490a:	f44f 0092 	mov.w	r0, #4784128	; 0x490000
  40490e:	4b1f      	ldr	r3, [pc, #124]	; (40498c <main+0x108>)
  404910:	4798      	blx	r3
  404912:	e7fe      	b.n	404912 <main+0x8e>
  404914:	004042d5 	.word	0x004042d5
  404918:	400e1450 	.word	0x400e1450
  40491c:	004042d1 	.word	0x004042d1
  404920:	00402631 	.word	0x00402631
  404924:	00403ba1 	.word	0x00403ba1
  404928:	004046fd 	.word	0x004046fd
  40492c:	00404629 	.word	0x00404629
  404930:	00403f49 	.word	0x00403f49
  404934:	0040011d 	.word	0x0040011d
  404938:	00401ad1 	.word	0x00401ad1
  40493c:	004009b1 	.word	0x004009b1
  404940:	004034e5 	.word	0x004034e5
  404944:	0040278d 	.word	0x0040278d
  404948:	2000099a 	.word	0x2000099a
  40494c:	00404049 	.word	0x00404049
  404950:	00404755 	.word	0x00404755
  404954:	20000954 	.word	0x20000954
  404958:	00404839 	.word	0x00404839
  40495c:	0040112d 	.word	0x0040112d
  404960:	00401579 	.word	0x00401579
  404964:	20000964 	.word	0x20000964
  404968:	00402dfd 	.word	0x00402dfd
  40496c:	004015dd 	.word	0x004015dd
  404970:	20000992 	.word	0x20000992
  404974:	0040172d 	.word	0x0040172d
  404978:	20000958 	.word	0x20000958
  40497c:	004017c5 	.word	0x004017c5
  404980:	20000974 	.word	0x20000974
  404984:	004018f1 	.word	0x004018f1
  404988:	00401989 	.word	0x00401989
  40498c:	00402551 	.word	0x00402551

00404990 <PIOB_Handler>:
	{
	
	}
}

 void PIOB_Handler(){
  404990:	b510      	push	{r4, lr}

	 uint32_t status = REG_PIOB_ISR;	//read PIOB interrupt status & clear interrupt flags
  404992:	4b20      	ldr	r3, [pc, #128]	; (404a14 <PIOB_Handler+0x84>)
  404994:	681b      	ldr	r3, [r3, #0]
 
	 //check if Io expander interrupt was driven
	 if (status & PIO_ISR_P10){
  404996:	f413 6f80 	tst.w	r3, #1024	; 0x400
  40499a:	d01b      	beq.n	4049d4 <PIOB_Handler+0x44>
		read_button_MAX7314(temp_data);
  40499c:	4c1e      	ldr	r4, [pc, #120]	; (404a18 <PIOB_Handler+0x88>)
  40499e:	4620      	mov	r0, r4
  4049a0:	4b1e      	ldr	r3, [pc, #120]	; (404a1c <PIOB_Handler+0x8c>)
  4049a2:	4798      	blx	r3

		if  ( !((temp_data[0] == 255) && (temp_data[1] == 255)) ){
  4049a4:	7820      	ldrb	r0, [r4, #0]
  4049a6:	28ff      	cmp	r0, #255	; 0xff
  4049a8:	d102      	bne.n	4049b0 <PIOB_Handler+0x20>
  4049aa:	7863      	ldrb	r3, [r4, #1]
  4049ac:	2bff      	cmp	r3, #255	; 0xff
  4049ae:	d02f      	beq.n	404a10 <PIOB_Handler+0x80>
			button_port_data[0] = temp_data[0];
  4049b0:	4b1b      	ldr	r3, [pc, #108]	; (404a20 <PIOB_Handler+0x90>)
  4049b2:	7018      	strb	r0, [r3, #0]
			button_port_data[1] = temp_data[1];
  4049b4:	4a18      	ldr	r2, [pc, #96]	; (404a18 <PIOB_Handler+0x88>)
  4049b6:	7851      	ldrb	r1, [r2, #1]
  4049b8:	7059      	strb	r1, [r3, #1]

			button_count++;
  4049ba:	4a1a      	ldr	r2, [pc, #104]	; (404a24 <PIOB_Handler+0x94>)
  4049bc:	7813      	ldrb	r3, [r2, #0]
  4049be:	3301      	adds	r3, #1
  4049c0:	b2db      	uxtb	r3, r3
  4049c2:	7013      	strb	r3, [r2, #0]
			if (button_count >= 2){
  4049c4:	2b01      	cmp	r3, #1
  4049c6:	d923      	bls.n	404a10 <PIOB_Handler+0x80>
				led_toggle(button_port_data[0], button_port_data[1]);
  4049c8:	4b17      	ldr	r3, [pc, #92]	; (404a28 <PIOB_Handler+0x98>)
  4049ca:	4798      	blx	r3
				button_count = 0;
  4049cc:	2200      	movs	r2, #0
  4049ce:	4b15      	ldr	r3, [pc, #84]	; (404a24 <PIOB_Handler+0x94>)
  4049d0:	701a      	strb	r2, [r3, #0]
  4049d2:	bd10      	pop	{r4, pc}
			}
		}
		
	 }

	 else if (status & PIO_ISR_P11) {
  4049d4:	f413 6f00 	tst.w	r3, #2048	; 0x800
  4049d8:	d01a      	beq.n	404a10 <PIOB_Handler+0x80>
		read_encoder_MAX7314(temp_data);
  4049da:	4c0f      	ldr	r4, [pc, #60]	; (404a18 <PIOB_Handler+0x88>)
  4049dc:	4620      	mov	r0, r4
  4049de:	4b13      	ldr	r3, [pc, #76]	; (404a2c <PIOB_Handler+0x9c>)
  4049e0:	4798      	blx	r3
		
		if  ( !((temp_data[0] == 255) && (temp_data[1] == 255)) ){
  4049e2:	7820      	ldrb	r0, [r4, #0]
  4049e4:	28ff      	cmp	r0, #255	; 0xff
  4049e6:	d102      	bne.n	4049ee <PIOB_Handler+0x5e>
  4049e8:	7863      	ldrb	r3, [r4, #1]
  4049ea:	2bff      	cmp	r3, #255	; 0xff
  4049ec:	d010      	beq.n	404a10 <PIOB_Handler+0x80>
			encoder_port_data[0] = temp_data[0];
  4049ee:	4b10      	ldr	r3, [pc, #64]	; (404a30 <PIOB_Handler+0xa0>)
  4049f0:	7018      	strb	r0, [r3, #0]
			encoder_port_data[1] = temp_data[1];
  4049f2:	4a09      	ldr	r2, [pc, #36]	; (404a18 <PIOB_Handler+0x88>)
  4049f4:	7851      	ldrb	r1, [r2, #1]
  4049f6:	7059      	strb	r1, [r3, #1]

			encoder_count++;
  4049f8:	4a0e      	ldr	r2, [pc, #56]	; (404a34 <PIOB_Handler+0xa4>)
  4049fa:	7813      	ldrb	r3, [r2, #0]
  4049fc:	3301      	adds	r3, #1
  4049fe:	b2db      	uxtb	r3, r3
  404a00:	7013      	strb	r3, [r2, #0]
			if (encoder_count >= 2){
  404a02:	2b01      	cmp	r3, #1
  404a04:	d904      	bls.n	404a10 <PIOB_Handler+0x80>
				aux_toggle(encoder_port_data[0], encoder_port_data[1]);
  404a06:	4b0c      	ldr	r3, [pc, #48]	; (404a38 <PIOB_Handler+0xa8>)
  404a08:	4798      	blx	r3
				encoder_count = 0;
  404a0a:	2200      	movs	r2, #0
  404a0c:	4b09      	ldr	r3, [pc, #36]	; (404a34 <PIOB_Handler+0xa4>)
  404a0e:	701a      	strb	r2, [r3, #0]
  404a10:	bd10      	pop	{r4, pc}
  404a12:	bf00      	nop
  404a14:	400e104c 	.word	0x400e104c
  404a18:	2000094c 	.word	0x2000094c
  404a1c:	00404839 	.word	0x00404839
  404a20:	20000954 	.word	0x20000954
  404a24:	20000957 	.word	0x20000957
  404a28:	00402c7d 	.word	0x00402c7d
  404a2c:	004047ed 	.word	0x004047ed
  404a30:	20000950 	.word	0x20000950
  404a34:	20000956 	.word	0x20000956
  404a38:	00403349 	.word	0x00403349

00404a3c <__aeabi_frsub>:
  404a3c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
  404a40:	e002      	b.n	404a48 <__addsf3>
  404a42:	bf00      	nop

00404a44 <__aeabi_fsub>:
  404a44:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00404a48 <__addsf3>:
  404a48:	0042      	lsls	r2, r0, #1
  404a4a:	bf1f      	itttt	ne
  404a4c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
  404a50:	ea92 0f03 	teqne	r2, r3
  404a54:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
  404a58:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
  404a5c:	d06a      	beq.n	404b34 <__addsf3+0xec>
  404a5e:	ea4f 6212 	mov.w	r2, r2, lsr #24
  404a62:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
  404a66:	bfc1      	itttt	gt
  404a68:	18d2      	addgt	r2, r2, r3
  404a6a:	4041      	eorgt	r1, r0
  404a6c:	4048      	eorgt	r0, r1
  404a6e:	4041      	eorgt	r1, r0
  404a70:	bfb8      	it	lt
  404a72:	425b      	neglt	r3, r3
  404a74:	2b19      	cmp	r3, #25
  404a76:	bf88      	it	hi
  404a78:	4770      	bxhi	lr
  404a7a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
  404a7e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  404a82:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
  404a86:	bf18      	it	ne
  404a88:	4240      	negne	r0, r0
  404a8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  404a8e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
  404a92:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
  404a96:	bf18      	it	ne
  404a98:	4249      	negne	r1, r1
  404a9a:	ea92 0f03 	teq	r2, r3
  404a9e:	d03f      	beq.n	404b20 <__addsf3+0xd8>
  404aa0:	f1a2 0201 	sub.w	r2, r2, #1
  404aa4:	fa41 fc03 	asr.w	ip, r1, r3
  404aa8:	eb10 000c 	adds.w	r0, r0, ip
  404aac:	f1c3 0320 	rsb	r3, r3, #32
  404ab0:	fa01 f103 	lsl.w	r1, r1, r3
  404ab4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
  404ab8:	d502      	bpl.n	404ac0 <__addsf3+0x78>
  404aba:	4249      	negs	r1, r1
  404abc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
  404ac0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
  404ac4:	d313      	bcc.n	404aee <__addsf3+0xa6>
  404ac6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
  404aca:	d306      	bcc.n	404ada <__addsf3+0x92>
  404acc:	0840      	lsrs	r0, r0, #1
  404ace:	ea4f 0131 	mov.w	r1, r1, rrx
  404ad2:	f102 0201 	add.w	r2, r2, #1
  404ad6:	2afe      	cmp	r2, #254	; 0xfe
  404ad8:	d251      	bcs.n	404b7e <__addsf3+0x136>
  404ada:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
  404ade:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
  404ae2:	bf08      	it	eq
  404ae4:	f020 0001 	biceq.w	r0, r0, #1
  404ae8:	ea40 0003 	orr.w	r0, r0, r3
  404aec:	4770      	bx	lr
  404aee:	0049      	lsls	r1, r1, #1
  404af0:	eb40 0000 	adc.w	r0, r0, r0
  404af4:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
  404af8:	f1a2 0201 	sub.w	r2, r2, #1
  404afc:	d1ed      	bne.n	404ada <__addsf3+0x92>
  404afe:	fab0 fc80 	clz	ip, r0
  404b02:	f1ac 0c08 	sub.w	ip, ip, #8
  404b06:	ebb2 020c 	subs.w	r2, r2, ip
  404b0a:	fa00 f00c 	lsl.w	r0, r0, ip
  404b0e:	bfaa      	itet	ge
  404b10:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
  404b14:	4252      	neglt	r2, r2
  404b16:	4318      	orrge	r0, r3
  404b18:	bfbc      	itt	lt
  404b1a:	40d0      	lsrlt	r0, r2
  404b1c:	4318      	orrlt	r0, r3
  404b1e:	4770      	bx	lr
  404b20:	f092 0f00 	teq	r2, #0
  404b24:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
  404b28:	bf06      	itte	eq
  404b2a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
  404b2e:	3201      	addeq	r2, #1
  404b30:	3b01      	subne	r3, #1
  404b32:	e7b5      	b.n	404aa0 <__addsf3+0x58>
  404b34:	ea4f 0341 	mov.w	r3, r1, lsl #1
  404b38:	ea7f 6c22 	mvns.w	ip, r2, asr #24
  404b3c:	bf18      	it	ne
  404b3e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
  404b42:	d021      	beq.n	404b88 <__addsf3+0x140>
  404b44:	ea92 0f03 	teq	r2, r3
  404b48:	d004      	beq.n	404b54 <__addsf3+0x10c>
  404b4a:	f092 0f00 	teq	r2, #0
  404b4e:	bf08      	it	eq
  404b50:	4608      	moveq	r0, r1
  404b52:	4770      	bx	lr
  404b54:	ea90 0f01 	teq	r0, r1
  404b58:	bf1c      	itt	ne
  404b5a:	2000      	movne	r0, #0
  404b5c:	4770      	bxne	lr
  404b5e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
  404b62:	d104      	bne.n	404b6e <__addsf3+0x126>
  404b64:	0040      	lsls	r0, r0, #1
  404b66:	bf28      	it	cs
  404b68:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
  404b6c:	4770      	bx	lr
  404b6e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
  404b72:	bf3c      	itt	cc
  404b74:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
  404b78:	4770      	bxcc	lr
  404b7a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
  404b7e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
  404b82:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  404b86:	4770      	bx	lr
  404b88:	ea7f 6222 	mvns.w	r2, r2, asr #24
  404b8c:	bf16      	itet	ne
  404b8e:	4608      	movne	r0, r1
  404b90:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
  404b94:	4601      	movne	r1, r0
  404b96:	0242      	lsls	r2, r0, #9
  404b98:	bf06      	itte	eq
  404b9a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
  404b9e:	ea90 0f01 	teqeq	r0, r1
  404ba2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
  404ba6:	4770      	bx	lr

00404ba8 <__aeabi_ui2f>:
  404ba8:	f04f 0300 	mov.w	r3, #0
  404bac:	e004      	b.n	404bb8 <__aeabi_i2f+0x8>
  404bae:	bf00      	nop

00404bb0 <__aeabi_i2f>:
  404bb0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
  404bb4:	bf48      	it	mi
  404bb6:	4240      	negmi	r0, r0
  404bb8:	ea5f 0c00 	movs.w	ip, r0
  404bbc:	bf08      	it	eq
  404bbe:	4770      	bxeq	lr
  404bc0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
  404bc4:	4601      	mov	r1, r0
  404bc6:	f04f 0000 	mov.w	r0, #0
  404bca:	e01c      	b.n	404c06 <__aeabi_l2f+0x2a>

00404bcc <__aeabi_ul2f>:
  404bcc:	ea50 0201 	orrs.w	r2, r0, r1
  404bd0:	bf08      	it	eq
  404bd2:	4770      	bxeq	lr
  404bd4:	f04f 0300 	mov.w	r3, #0
  404bd8:	e00a      	b.n	404bf0 <__aeabi_l2f+0x14>
  404bda:	bf00      	nop

00404bdc <__aeabi_l2f>:
  404bdc:	ea50 0201 	orrs.w	r2, r0, r1
  404be0:	bf08      	it	eq
  404be2:	4770      	bxeq	lr
  404be4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
  404be8:	d502      	bpl.n	404bf0 <__aeabi_l2f+0x14>
  404bea:	4240      	negs	r0, r0
  404bec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  404bf0:	ea5f 0c01 	movs.w	ip, r1
  404bf4:	bf02      	ittt	eq
  404bf6:	4684      	moveq	ip, r0
  404bf8:	4601      	moveq	r1, r0
  404bfa:	2000      	moveq	r0, #0
  404bfc:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
  404c00:	bf08      	it	eq
  404c02:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
  404c06:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
  404c0a:	fabc f28c 	clz	r2, ip
  404c0e:	3a08      	subs	r2, #8
  404c10:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
  404c14:	db10      	blt.n	404c38 <__aeabi_l2f+0x5c>
  404c16:	fa01 fc02 	lsl.w	ip, r1, r2
  404c1a:	4463      	add	r3, ip
  404c1c:	fa00 fc02 	lsl.w	ip, r0, r2
  404c20:	f1c2 0220 	rsb	r2, r2, #32
  404c24:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  404c28:	fa20 f202 	lsr.w	r2, r0, r2
  404c2c:	eb43 0002 	adc.w	r0, r3, r2
  404c30:	bf08      	it	eq
  404c32:	f020 0001 	biceq.w	r0, r0, #1
  404c36:	4770      	bx	lr
  404c38:	f102 0220 	add.w	r2, r2, #32
  404c3c:	fa01 fc02 	lsl.w	ip, r1, r2
  404c40:	f1c2 0220 	rsb	r2, r2, #32
  404c44:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
  404c48:	fa21 f202 	lsr.w	r2, r1, r2
  404c4c:	eb43 0002 	adc.w	r0, r3, r2
  404c50:	bf08      	it	eq
  404c52:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
  404c56:	4770      	bx	lr

00404c58 <__aeabi_fmul>:
  404c58:	f04f 0cff 	mov.w	ip, #255	; 0xff
  404c5c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
  404c60:	bf1e      	ittt	ne
  404c62:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
  404c66:	ea92 0f0c 	teqne	r2, ip
  404c6a:	ea93 0f0c 	teqne	r3, ip
  404c6e:	d06f      	beq.n	404d50 <__aeabi_fmul+0xf8>
  404c70:	441a      	add	r2, r3
  404c72:	ea80 0c01 	eor.w	ip, r0, r1
  404c76:	0240      	lsls	r0, r0, #9
  404c78:	bf18      	it	ne
  404c7a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
  404c7e:	d01e      	beq.n	404cbe <__aeabi_fmul+0x66>
  404c80:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
  404c84:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
  404c88:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
  404c8c:	fba0 3101 	umull	r3, r1, r0, r1
  404c90:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
  404c94:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
  404c98:	bf3e      	ittt	cc
  404c9a:	0049      	lslcc	r1, r1, #1
  404c9c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
  404ca0:	005b      	lslcc	r3, r3, #1
  404ca2:	ea40 0001 	orr.w	r0, r0, r1
  404ca6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
  404caa:	2afd      	cmp	r2, #253	; 0xfd
  404cac:	d81d      	bhi.n	404cea <__aeabi_fmul+0x92>
  404cae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
  404cb2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
  404cb6:	bf08      	it	eq
  404cb8:	f020 0001 	biceq.w	r0, r0, #1
  404cbc:	4770      	bx	lr
  404cbe:	f090 0f00 	teq	r0, #0
  404cc2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
  404cc6:	bf08      	it	eq
  404cc8:	0249      	lsleq	r1, r1, #9
  404cca:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
  404cce:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
  404cd2:	3a7f      	subs	r2, #127	; 0x7f
  404cd4:	bfc2      	ittt	gt
  404cd6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
  404cda:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
  404cde:	4770      	bxgt	lr
  404ce0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  404ce4:	f04f 0300 	mov.w	r3, #0
  404ce8:	3a01      	subs	r2, #1
  404cea:	dc5d      	bgt.n	404da8 <__aeabi_fmul+0x150>
  404cec:	f112 0f19 	cmn.w	r2, #25
  404cf0:	bfdc      	itt	le
  404cf2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
  404cf6:	4770      	bxle	lr
  404cf8:	f1c2 0200 	rsb	r2, r2, #0
  404cfc:	0041      	lsls	r1, r0, #1
  404cfe:	fa21 f102 	lsr.w	r1, r1, r2
  404d02:	f1c2 0220 	rsb	r2, r2, #32
  404d06:	fa00 fc02 	lsl.w	ip, r0, r2
  404d0a:	ea5f 0031 	movs.w	r0, r1, rrx
  404d0e:	f140 0000 	adc.w	r0, r0, #0
  404d12:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
  404d16:	bf08      	it	eq
  404d18:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
  404d1c:	4770      	bx	lr
  404d1e:	f092 0f00 	teq	r2, #0
  404d22:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
  404d26:	bf02      	ittt	eq
  404d28:	0040      	lsleq	r0, r0, #1
  404d2a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
  404d2e:	3a01      	subeq	r2, #1
  404d30:	d0f9      	beq.n	404d26 <__aeabi_fmul+0xce>
  404d32:	ea40 000c 	orr.w	r0, r0, ip
  404d36:	f093 0f00 	teq	r3, #0
  404d3a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  404d3e:	bf02      	ittt	eq
  404d40:	0049      	lsleq	r1, r1, #1
  404d42:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
  404d46:	3b01      	subeq	r3, #1
  404d48:	d0f9      	beq.n	404d3e <__aeabi_fmul+0xe6>
  404d4a:	ea41 010c 	orr.w	r1, r1, ip
  404d4e:	e78f      	b.n	404c70 <__aeabi_fmul+0x18>
  404d50:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
  404d54:	ea92 0f0c 	teq	r2, ip
  404d58:	bf18      	it	ne
  404d5a:	ea93 0f0c 	teqne	r3, ip
  404d5e:	d00a      	beq.n	404d76 <__aeabi_fmul+0x11e>
  404d60:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
  404d64:	bf18      	it	ne
  404d66:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
  404d6a:	d1d8      	bne.n	404d1e <__aeabi_fmul+0xc6>
  404d6c:	ea80 0001 	eor.w	r0, r0, r1
  404d70:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
  404d74:	4770      	bx	lr
  404d76:	f090 0f00 	teq	r0, #0
  404d7a:	bf17      	itett	ne
  404d7c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
  404d80:	4608      	moveq	r0, r1
  404d82:	f091 0f00 	teqne	r1, #0
  404d86:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
  404d8a:	d014      	beq.n	404db6 <__aeabi_fmul+0x15e>
  404d8c:	ea92 0f0c 	teq	r2, ip
  404d90:	d101      	bne.n	404d96 <__aeabi_fmul+0x13e>
  404d92:	0242      	lsls	r2, r0, #9
  404d94:	d10f      	bne.n	404db6 <__aeabi_fmul+0x15e>
  404d96:	ea93 0f0c 	teq	r3, ip
  404d9a:	d103      	bne.n	404da4 <__aeabi_fmul+0x14c>
  404d9c:	024b      	lsls	r3, r1, #9
  404d9e:	bf18      	it	ne
  404da0:	4608      	movne	r0, r1
  404da2:	d108      	bne.n	404db6 <__aeabi_fmul+0x15e>
  404da4:	ea80 0001 	eor.w	r0, r0, r1
  404da8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
  404dac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  404db0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  404db4:	4770      	bx	lr
  404db6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  404dba:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
  404dbe:	4770      	bx	lr

00404dc0 <__aeabi_fdiv>:
  404dc0:	f04f 0cff 	mov.w	ip, #255	; 0xff
  404dc4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
  404dc8:	bf1e      	ittt	ne
  404dca:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
  404dce:	ea92 0f0c 	teqne	r2, ip
  404dd2:	ea93 0f0c 	teqne	r3, ip
  404dd6:	d069      	beq.n	404eac <__aeabi_fdiv+0xec>
  404dd8:	eba2 0203 	sub.w	r2, r2, r3
  404ddc:	ea80 0c01 	eor.w	ip, r0, r1
  404de0:	0249      	lsls	r1, r1, #9
  404de2:	ea4f 2040 	mov.w	r0, r0, lsl #9
  404de6:	d037      	beq.n	404e58 <__aeabi_fdiv+0x98>
  404de8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  404dec:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
  404df0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
  404df4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
  404df8:	428b      	cmp	r3, r1
  404dfa:	bf38      	it	cc
  404dfc:	005b      	lslcc	r3, r3, #1
  404dfe:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
  404e02:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
  404e06:	428b      	cmp	r3, r1
  404e08:	bf24      	itt	cs
  404e0a:	1a5b      	subcs	r3, r3, r1
  404e0c:	ea40 000c 	orrcs.w	r0, r0, ip
  404e10:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
  404e14:	bf24      	itt	cs
  404e16:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
  404e1a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  404e1e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
  404e22:	bf24      	itt	cs
  404e24:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
  404e28:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  404e2c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
  404e30:	bf24      	itt	cs
  404e32:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
  404e36:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  404e3a:	011b      	lsls	r3, r3, #4
  404e3c:	bf18      	it	ne
  404e3e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
  404e42:	d1e0      	bne.n	404e06 <__aeabi_fdiv+0x46>
  404e44:	2afd      	cmp	r2, #253	; 0xfd
  404e46:	f63f af50 	bhi.w	404cea <__aeabi_fmul+0x92>
  404e4a:	428b      	cmp	r3, r1
  404e4c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
  404e50:	bf08      	it	eq
  404e52:	f020 0001 	biceq.w	r0, r0, #1
  404e56:	4770      	bx	lr
  404e58:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
  404e5c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
  404e60:	327f      	adds	r2, #127	; 0x7f
  404e62:	bfc2      	ittt	gt
  404e64:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
  404e68:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
  404e6c:	4770      	bxgt	lr
  404e6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  404e72:	f04f 0300 	mov.w	r3, #0
  404e76:	3a01      	subs	r2, #1
  404e78:	e737      	b.n	404cea <__aeabi_fmul+0x92>
  404e7a:	f092 0f00 	teq	r2, #0
  404e7e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
  404e82:	bf02      	ittt	eq
  404e84:	0040      	lsleq	r0, r0, #1
  404e86:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
  404e8a:	3a01      	subeq	r2, #1
  404e8c:	d0f9      	beq.n	404e82 <__aeabi_fdiv+0xc2>
  404e8e:	ea40 000c 	orr.w	r0, r0, ip
  404e92:	f093 0f00 	teq	r3, #0
  404e96:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  404e9a:	bf02      	ittt	eq
  404e9c:	0049      	lsleq	r1, r1, #1
  404e9e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
  404ea2:	3b01      	subeq	r3, #1
  404ea4:	d0f9      	beq.n	404e9a <__aeabi_fdiv+0xda>
  404ea6:	ea41 010c 	orr.w	r1, r1, ip
  404eaa:	e795      	b.n	404dd8 <__aeabi_fdiv+0x18>
  404eac:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
  404eb0:	ea92 0f0c 	teq	r2, ip
  404eb4:	d108      	bne.n	404ec8 <__aeabi_fdiv+0x108>
  404eb6:	0242      	lsls	r2, r0, #9
  404eb8:	f47f af7d 	bne.w	404db6 <__aeabi_fmul+0x15e>
  404ebc:	ea93 0f0c 	teq	r3, ip
  404ec0:	f47f af70 	bne.w	404da4 <__aeabi_fmul+0x14c>
  404ec4:	4608      	mov	r0, r1
  404ec6:	e776      	b.n	404db6 <__aeabi_fmul+0x15e>
  404ec8:	ea93 0f0c 	teq	r3, ip
  404ecc:	d104      	bne.n	404ed8 <__aeabi_fdiv+0x118>
  404ece:	024b      	lsls	r3, r1, #9
  404ed0:	f43f af4c 	beq.w	404d6c <__aeabi_fmul+0x114>
  404ed4:	4608      	mov	r0, r1
  404ed6:	e76e      	b.n	404db6 <__aeabi_fmul+0x15e>
  404ed8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
  404edc:	bf18      	it	ne
  404ede:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
  404ee2:	d1ca      	bne.n	404e7a <__aeabi_fdiv+0xba>
  404ee4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
  404ee8:	f47f af5c 	bne.w	404da4 <__aeabi_fmul+0x14c>
  404eec:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
  404ef0:	f47f af3c 	bne.w	404d6c <__aeabi_fmul+0x114>
  404ef4:	e75f      	b.n	404db6 <__aeabi_fmul+0x15e>
  404ef6:	bf00      	nop

00404ef8 <__aeabi_f2uiz>:
  404ef8:	0042      	lsls	r2, r0, #1
  404efa:	d20e      	bcs.n	404f1a <__aeabi_f2uiz+0x22>
  404efc:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
  404f00:	d30b      	bcc.n	404f1a <__aeabi_f2uiz+0x22>
  404f02:	f04f 039e 	mov.w	r3, #158	; 0x9e
  404f06:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
  404f0a:	d409      	bmi.n	404f20 <__aeabi_f2uiz+0x28>
  404f0c:	ea4f 2300 	mov.w	r3, r0, lsl #8
  404f10:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  404f14:	fa23 f002 	lsr.w	r0, r3, r2
  404f18:	4770      	bx	lr
  404f1a:	f04f 0000 	mov.w	r0, #0
  404f1e:	4770      	bx	lr
  404f20:	f112 0f61 	cmn.w	r2, #97	; 0x61
  404f24:	d101      	bne.n	404f2a <__aeabi_f2uiz+0x32>
  404f26:	0242      	lsls	r2, r0, #9
  404f28:	d102      	bne.n	404f30 <__aeabi_f2uiz+0x38>
  404f2a:	f04f 30ff 	mov.w	r0, #4294967295
  404f2e:	4770      	bx	lr
  404f30:	f04f 0000 	mov.w	r0, #0
  404f34:	4770      	bx	lr
  404f36:	bf00      	nop

00404f38 <__libc_init_array>:
  404f38:	b570      	push	{r4, r5, r6, lr}
  404f3a:	4e0f      	ldr	r6, [pc, #60]	; (404f78 <__libc_init_array+0x40>)
  404f3c:	4d0f      	ldr	r5, [pc, #60]	; (404f7c <__libc_init_array+0x44>)
  404f3e:	1b76      	subs	r6, r6, r5
  404f40:	10b6      	asrs	r6, r6, #2
  404f42:	bf18      	it	ne
  404f44:	2400      	movne	r4, #0
  404f46:	d005      	beq.n	404f54 <__libc_init_array+0x1c>
  404f48:	3401      	adds	r4, #1
  404f4a:	f855 3b04 	ldr.w	r3, [r5], #4
  404f4e:	4798      	blx	r3
  404f50:	42a6      	cmp	r6, r4
  404f52:	d1f9      	bne.n	404f48 <__libc_init_array+0x10>
  404f54:	4e0a      	ldr	r6, [pc, #40]	; (404f80 <__libc_init_array+0x48>)
  404f56:	4d0b      	ldr	r5, [pc, #44]	; (404f84 <__libc_init_array+0x4c>)
  404f58:	1b76      	subs	r6, r6, r5
  404f5a:	f001 facb 	bl	4064f4 <_init>
  404f5e:	10b6      	asrs	r6, r6, #2
  404f60:	bf18      	it	ne
  404f62:	2400      	movne	r4, #0
  404f64:	d006      	beq.n	404f74 <__libc_init_array+0x3c>
  404f66:	3401      	adds	r4, #1
  404f68:	f855 3b04 	ldr.w	r3, [r5], #4
  404f6c:	4798      	blx	r3
  404f6e:	42a6      	cmp	r6, r4
  404f70:	d1f9      	bne.n	404f66 <__libc_init_array+0x2e>
  404f72:	bd70      	pop	{r4, r5, r6, pc}
  404f74:	bd70      	pop	{r4, r5, r6, pc}
  404f76:	bf00      	nop
  404f78:	00406500 	.word	0x00406500
  404f7c:	00406500 	.word	0x00406500
  404f80:	00406508 	.word	0x00406508
  404f84:	00406500 	.word	0x00406500

00404f88 <memcpy>:
  404f88:	4684      	mov	ip, r0
  404f8a:	ea41 0300 	orr.w	r3, r1, r0
  404f8e:	f013 0303 	ands.w	r3, r3, #3
  404f92:	d16d      	bne.n	405070 <memcpy+0xe8>
  404f94:	3a40      	subs	r2, #64	; 0x40
  404f96:	d341      	bcc.n	40501c <memcpy+0x94>
  404f98:	f851 3b04 	ldr.w	r3, [r1], #4
  404f9c:	f840 3b04 	str.w	r3, [r0], #4
  404fa0:	f851 3b04 	ldr.w	r3, [r1], #4
  404fa4:	f840 3b04 	str.w	r3, [r0], #4
  404fa8:	f851 3b04 	ldr.w	r3, [r1], #4
  404fac:	f840 3b04 	str.w	r3, [r0], #4
  404fb0:	f851 3b04 	ldr.w	r3, [r1], #4
  404fb4:	f840 3b04 	str.w	r3, [r0], #4
  404fb8:	f851 3b04 	ldr.w	r3, [r1], #4
  404fbc:	f840 3b04 	str.w	r3, [r0], #4
  404fc0:	f851 3b04 	ldr.w	r3, [r1], #4
  404fc4:	f840 3b04 	str.w	r3, [r0], #4
  404fc8:	f851 3b04 	ldr.w	r3, [r1], #4
  404fcc:	f840 3b04 	str.w	r3, [r0], #4
  404fd0:	f851 3b04 	ldr.w	r3, [r1], #4
  404fd4:	f840 3b04 	str.w	r3, [r0], #4
  404fd8:	f851 3b04 	ldr.w	r3, [r1], #4
  404fdc:	f840 3b04 	str.w	r3, [r0], #4
  404fe0:	f851 3b04 	ldr.w	r3, [r1], #4
  404fe4:	f840 3b04 	str.w	r3, [r0], #4
  404fe8:	f851 3b04 	ldr.w	r3, [r1], #4
  404fec:	f840 3b04 	str.w	r3, [r0], #4
  404ff0:	f851 3b04 	ldr.w	r3, [r1], #4
  404ff4:	f840 3b04 	str.w	r3, [r0], #4
  404ff8:	f851 3b04 	ldr.w	r3, [r1], #4
  404ffc:	f840 3b04 	str.w	r3, [r0], #4
  405000:	f851 3b04 	ldr.w	r3, [r1], #4
  405004:	f840 3b04 	str.w	r3, [r0], #4
  405008:	f851 3b04 	ldr.w	r3, [r1], #4
  40500c:	f840 3b04 	str.w	r3, [r0], #4
  405010:	f851 3b04 	ldr.w	r3, [r1], #4
  405014:	f840 3b04 	str.w	r3, [r0], #4
  405018:	3a40      	subs	r2, #64	; 0x40
  40501a:	d2bd      	bcs.n	404f98 <memcpy+0x10>
  40501c:	3230      	adds	r2, #48	; 0x30
  40501e:	d311      	bcc.n	405044 <memcpy+0xbc>
  405020:	f851 3b04 	ldr.w	r3, [r1], #4
  405024:	f840 3b04 	str.w	r3, [r0], #4
  405028:	f851 3b04 	ldr.w	r3, [r1], #4
  40502c:	f840 3b04 	str.w	r3, [r0], #4
  405030:	f851 3b04 	ldr.w	r3, [r1], #4
  405034:	f840 3b04 	str.w	r3, [r0], #4
  405038:	f851 3b04 	ldr.w	r3, [r1], #4
  40503c:	f840 3b04 	str.w	r3, [r0], #4
  405040:	3a10      	subs	r2, #16
  405042:	d2ed      	bcs.n	405020 <memcpy+0x98>
  405044:	320c      	adds	r2, #12
  405046:	d305      	bcc.n	405054 <memcpy+0xcc>
  405048:	f851 3b04 	ldr.w	r3, [r1], #4
  40504c:	f840 3b04 	str.w	r3, [r0], #4
  405050:	3a04      	subs	r2, #4
  405052:	d2f9      	bcs.n	405048 <memcpy+0xc0>
  405054:	3204      	adds	r2, #4
  405056:	d008      	beq.n	40506a <memcpy+0xe2>
  405058:	07d2      	lsls	r2, r2, #31
  40505a:	bf1c      	itt	ne
  40505c:	f811 3b01 	ldrbne.w	r3, [r1], #1
  405060:	f800 3b01 	strbne.w	r3, [r0], #1
  405064:	d301      	bcc.n	40506a <memcpy+0xe2>
  405066:	880b      	ldrh	r3, [r1, #0]
  405068:	8003      	strh	r3, [r0, #0]
  40506a:	4660      	mov	r0, ip
  40506c:	4770      	bx	lr
  40506e:	bf00      	nop
  405070:	2a08      	cmp	r2, #8
  405072:	d313      	bcc.n	40509c <memcpy+0x114>
  405074:	078b      	lsls	r3, r1, #30
  405076:	d08d      	beq.n	404f94 <memcpy+0xc>
  405078:	f010 0303 	ands.w	r3, r0, #3
  40507c:	d08a      	beq.n	404f94 <memcpy+0xc>
  40507e:	f1c3 0304 	rsb	r3, r3, #4
  405082:	1ad2      	subs	r2, r2, r3
  405084:	07db      	lsls	r3, r3, #31
  405086:	bf1c      	itt	ne
  405088:	f811 3b01 	ldrbne.w	r3, [r1], #1
  40508c:	f800 3b01 	strbne.w	r3, [r0], #1
  405090:	d380      	bcc.n	404f94 <memcpy+0xc>
  405092:	f831 3b02 	ldrh.w	r3, [r1], #2
  405096:	f820 3b02 	strh.w	r3, [r0], #2
  40509a:	e77b      	b.n	404f94 <memcpy+0xc>
  40509c:	3a04      	subs	r2, #4
  40509e:	d3d9      	bcc.n	405054 <memcpy+0xcc>
  4050a0:	3a01      	subs	r2, #1
  4050a2:	f811 3b01 	ldrb.w	r3, [r1], #1
  4050a6:	f800 3b01 	strb.w	r3, [r0], #1
  4050aa:	d2f9      	bcs.n	4050a0 <memcpy+0x118>
  4050ac:	780b      	ldrb	r3, [r1, #0]
  4050ae:	7003      	strb	r3, [r0, #0]
  4050b0:	784b      	ldrb	r3, [r1, #1]
  4050b2:	7043      	strb	r3, [r0, #1]
  4050b4:	788b      	ldrb	r3, [r1, #2]
  4050b6:	7083      	strb	r3, [r0, #2]
  4050b8:	4660      	mov	r0, ip
  4050ba:	4770      	bx	lr

004050bc <register_fini>:
  4050bc:	4b02      	ldr	r3, [pc, #8]	; (4050c8 <register_fini+0xc>)
  4050be:	b113      	cbz	r3, 4050c6 <register_fini+0xa>
  4050c0:	4802      	ldr	r0, [pc, #8]	; (4050cc <register_fini+0x10>)
  4050c2:	f000 b805 	b.w	4050d0 <atexit>
  4050c6:	4770      	bx	lr
  4050c8:	00000000 	.word	0x00000000
  4050cc:	004050dd 	.word	0x004050dd

004050d0 <atexit>:
  4050d0:	2300      	movs	r3, #0
  4050d2:	4601      	mov	r1, r0
  4050d4:	461a      	mov	r2, r3
  4050d6:	4618      	mov	r0, r3
  4050d8:	f000 b814 	b.w	405104 <__register_exitproc>

004050dc <__libc_fini_array>:
  4050dc:	b538      	push	{r3, r4, r5, lr}
  4050de:	4d07      	ldr	r5, [pc, #28]	; (4050fc <__libc_fini_array+0x20>)
  4050e0:	4c07      	ldr	r4, [pc, #28]	; (405100 <__libc_fini_array+0x24>)
  4050e2:	1b2c      	subs	r4, r5, r4
  4050e4:	10a4      	asrs	r4, r4, #2
  4050e6:	d005      	beq.n	4050f4 <__libc_fini_array+0x18>
  4050e8:	3c01      	subs	r4, #1
  4050ea:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  4050ee:	4798      	blx	r3
  4050f0:	2c00      	cmp	r4, #0
  4050f2:	d1f9      	bne.n	4050e8 <__libc_fini_array+0xc>
  4050f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  4050f8:	f001 ba06 	b.w	406508 <_fini>
  4050fc:	00406518 	.word	0x00406518
  405100:	00406514 	.word	0x00406514

00405104 <__register_exitproc>:
  405104:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  405108:	4c25      	ldr	r4, [pc, #148]	; (4051a0 <__register_exitproc+0x9c>)
  40510a:	6825      	ldr	r5, [r4, #0]
  40510c:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
  405110:	4606      	mov	r6, r0
  405112:	4688      	mov	r8, r1
  405114:	4692      	mov	sl, r2
  405116:	4699      	mov	r9, r3
  405118:	b3c4      	cbz	r4, 40518c <__register_exitproc+0x88>
  40511a:	6860      	ldr	r0, [r4, #4]
  40511c:	281f      	cmp	r0, #31
  40511e:	dc17      	bgt.n	405150 <__register_exitproc+0x4c>
  405120:	1c43      	adds	r3, r0, #1
  405122:	b176      	cbz	r6, 405142 <__register_exitproc+0x3e>
  405124:	eb04 0580 	add.w	r5, r4, r0, lsl #2
  405128:	2201      	movs	r2, #1
  40512a:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
  40512e:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
  405132:	4082      	lsls	r2, r0
  405134:	4311      	orrs	r1, r2
  405136:	2e02      	cmp	r6, #2
  405138:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
  40513c:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
  405140:	d01e      	beq.n	405180 <__register_exitproc+0x7c>
  405142:	3002      	adds	r0, #2
  405144:	6063      	str	r3, [r4, #4]
  405146:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
  40514a:	2000      	movs	r0, #0
  40514c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  405150:	4b14      	ldr	r3, [pc, #80]	; (4051a4 <__register_exitproc+0xa0>)
  405152:	b303      	cbz	r3, 405196 <__register_exitproc+0x92>
  405154:	f44f 70c8 	mov.w	r0, #400	; 0x190
  405158:	f3af 8000 	nop.w
  40515c:	4604      	mov	r4, r0
  40515e:	b1d0      	cbz	r0, 405196 <__register_exitproc+0x92>
  405160:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
  405164:	2700      	movs	r7, #0
  405166:	e880 0088 	stmia.w	r0, {r3, r7}
  40516a:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  40516e:	4638      	mov	r0, r7
  405170:	2301      	movs	r3, #1
  405172:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  405176:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
  40517a:	2e00      	cmp	r6, #0
  40517c:	d0e1      	beq.n	405142 <__register_exitproc+0x3e>
  40517e:	e7d1      	b.n	405124 <__register_exitproc+0x20>
  405180:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
  405184:	430a      	orrs	r2, r1
  405186:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  40518a:	e7da      	b.n	405142 <__register_exitproc+0x3e>
  40518c:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
  405190:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  405194:	e7c1      	b.n	40511a <__register_exitproc+0x16>
  405196:	f04f 30ff 	mov.w	r0, #4294967295
  40519a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40519e:	bf00      	nop
  4051a0:	004064f0 	.word	0x004064f0
  4051a4:	00000000 	.word	0x00000000

004051a8 <oCRAExtended_22ptBitmaps>:
  4051a8:	ffff3030 30303030 3030ffff ffff0c0c     00..0000..00....
  4051b8:	0c0c0c0c 0c0cffff 00000000 00000000     ................
	...
  4051dc:	f0f0f0f0 00000000 00000000 00000000     ................
	...
  4051f4:	e0800000 030f3c70 70e08000 01030f3c     ....p<.....p<...
  405204:	00000000 00010706 00000000 00000000     ................
  405214:	0303fffe 03030303 feff0303 0000ffff     ................
  405224:	00000000 ffff0000 06060703 06060606     ................
  405234:	03070606 03030303 00ffff03 00000000     ................
  405244:	00000000 00ffff00 f8f80000 06060606     ................
  405254:	06070706 07070606 03030303 03030303     ................
  405264:	feff0303 0303fffe 03030303 01030303     ................
  405274:	06060707 06060606 06060606 03030303     ................
  405284:	03030303 feff0303 03030000 03030303     ................
  405294:	fcff0303 06060606 06060606 03070606     ................
  4052a4:	00ffff00 00000000 00fcfc00 0c0f0f00     ................
  4052b4:	0c0c0c0c 0cffff0c 00000000 00000000     ................
  4052c4:	00070700 ffff0000 03030303 03030303     ................
  4052d4:	03030000 03030303 feff0303 06070303     ................
  4052e4:	06060606 03070606 0003ffff 00000000     ................
  4052f4:	00000000 0c0cffff 0c0c0c0c fcfc0c0c     ................
  405304:	06060707 06060606 07070606 03030707     ................
  405314:	03030303 ffff0303 00000000 0efcf800     ................
  405324:	00010306 00000000 00070700 00000000     ................
  405334:	ffff0000 03030303 0000ffff 0303fffe     ................
  405344:	03030303 feff0303 06060703 06060606     ................
  405354:	03070606 8383ffff 83838383 ffff8383     ................
  405364:	01010101 01010101 ffff0101 00000000     ................
  405374:	00000000 07070600 00000000 78787878     ............xxxx
	...
  40538c:	78787878 00000000 00000000 00000000     xxxx............
  40539c:	00000000 6060c080 8c0c1830 387cc6c7     ......``0.....|8
  4053ac:	7c780001 01030606 00000001 06060000     ..x|............
	...
  4053c4:	c0000000 f87f7ff8 000000c0 3ffce000     ...............?
  4053d4:	33303033 00e0fc3f 00000707 00000000     3003?...........
  4053e4:	07070000 0303ffff 03030303 f8fe8603     ................
  4053f4:	0303ffff 03030303 fcff0703 06060707     ................
  405404:	06060606 00030306 1e78e080 03030307     ..........x.....
  405414:	03030303 c0f03f0f 00000000 00000000     .....?..........
  405424:	03000000 06060607 06060606 ffff0303     ................
  405434:	07030303 80e0781e ffff0000 00000000     .....x..........
  405444:	0f3ff0c0 07070606 07060606 00000003     ..?.............
  405454:	0303ffff 03030303 03030303 0303ffff     ................
  405464:	00030303 00000000 06060707 06060606     ................
  405474:	06060606 c3c3ffff c3c3c3c3 0303c3c3     ................
  405484:	0000ffff 00000000 00000000 00000707     ................
	...
  40549c:	1c38e0c0 0303070e 03030303 0000ffff     ..8.............
  4054ac:	0c0c0000 fcfc0c0c 06060301 06060606     ................
  4054bc:	01030606 0000ffff 00000000 ffff0000     ................
  4054cc:	0303ffff 03030303 ffff0303 00000707     ................
  4054dc:	00000000 07070000 03030303 03ffff03     ................
  4054ec:	03030303 00000000 00ffff00 00000000     ................
  4054fc:	06060606 06070706 06060606 00000000     ................
  40550c:	00000000 00ffff00 00fcfc00 00000000     ................
  40551c:	00ffff00 06030100 06060606 00010306     ................
  40552c:	8000ffff 183060c0 0103060c 0d0fffff     .....`0.........
  40553c:	c0603018 00000080 00000707 00000000     .0`.............
  40554c:	04060301 0000ffff 00000000 00000000     ................
  40555c:	0000ffff 00000000 00000000 06060707     ................
  40556c:	06060606 06060606 1c0fffff 78e0e078     ............x..x
  40557c:	ffff0e1c 0000ffff 00010100 ffff0000     ................
  40558c:	00000707 00000000 07070000 7c1effff     ...............|
  40559c:	0000c0f0 ffff0000 0000ffff 7c1f0701     ...............|
  4055ac:	ffffc0f0 00000707 00000000 07070301     ................
  4055bc:	3ef8e080 0f03030f 80e0f83e e0f83f0f     ...>....>....?..
  4055cc:	80000080 0f3ff8e0 03000000 07060607     ......?.........
  4055dc:	00000003 0303ffff 03030303 fcfe0303     ................
  4055ec:	0c0cffff 0c0c0c0c 03070c0c 00000707     ................
	...
  405604:	8383ffff 83838383 7cfe8383 0101ffff     ...........|....
  405614:	3d0f0301 0080e171 00000707 00000000     ...=q...........
  405624:	06070100 e3731f0e 030383c3 0e0f0303     ......s.........
  405634:	00008080 1c0e0301 80c07038 06060703     ........8p......
  405644:	06060606 03070606 03030f0f 03ffff03     ................
  405654:	0f0f0303 00000000 00ffff00 00000000     ................
  405664:	00000000 00070700 00000000 0080ff7f     ................
  405674:	00000000 7fff8000 3e0f0100 f8c0c0f8     ...........>....
  405684:	00010f3e 00000000 01070701 00000000     >...............
  405694:	e0703f1f c08080c0 1f3f70e0 00000000     .?p......p?.....
  4056a4:	01ffff01 00000000 00000000 00070700     ................
  4056b4:	00000000 c080ffff 60606060 0080c060     ........`````...
  4056c4:	0081ffff 00000000 ffff0000 03030707     ................
  4056d4:	06060606 00010306 fefe6060 60606060     ........``..````
  4056e4:	00606060 ffff0000 00000000 80800000     ```.............
  4056f4:	03010000 06060606 01030706              ............

00405700 <oCRAExtended_22ptDescriptors>:
  405700:	0000030c 00000000 00000000 00000000     ................
	...
  40572c:	0024030c 0048030c 006c030c 0090030c     ..$...H...l.....
  40573c:	00b4030c 00d8030c 00fc030c 0120030c     .............. .
  40574c:	0144030c 0168030c 018c030c 01b0030c     ..D...h.........
  40575c:	01d4030c 00000000 00000000 00000000     ................
  40576c:	00000000 01f8030c 00000000 021c030c     ................
  40577c:	0240030c 0264030c 0288030c 02ac030c     ..@...d.........
  40578c:	02d0030c 02f4030c 0318030c 033c030c     ..............<.
  40579c:	0360030c 0384030c 03a8030c 03cc030c     ..`.............
  4057ac:	03f0030c 0414030c 0438030c 00000000     ..........8.....
  4057bc:	045c030c 0480030c 04a4030c 00000000     ..\.............
  4057cc:	04c8030c 00000000 00000000 04ec030c     ................
	...
  4057fc:	0510030c 00000000 00000000 00000000     ................
	...
  405844:	0534030c                                ..4.

00405848 <oCRAExtended_18ptBitmaps>:
  405848:	ffff1818 ff181818 031818ff 031f1f03     ................
  405858:	1f1f0303 00000303 c0000000 0f1c78e0     .............x..
  405868:	3870c003 0003071e 00000000 0303fffe     ..p8............
  405878:	03030303 7ffeff03 c0c0c0ff c0c0c0c0     ................
  405888:	03007fff ff030303 000000ff c0c00000     ................
  405898:	ffffc0c0 fefec0c0 83838303 83838383     ................
  4058a8:	fffeff83 c1c1c1ff c1c1c1c1 0303c0c1     ................
  4058b8:	83838383 7eff8383 c1c0c000 c1c1c1c1     .......~........
  4058c8:	007effc1 00ffff00 fc000000 000000fc     ..~.............
  4058d8:	06060707 ffff0606 00000006 8383ffff     ................
  4058e8:	83838383 e1606003 c1c1c1c1 7fffc1c1     .....``.........
  4058f8:	0003ffff 00000000 ff000000 c6c6c6ff     ................
  405908:	c6c6c6c6 0700fefe 03030307 ff830303     ................
  405918:	0000007f fefe0000 00000103 ffff8000     ................
  405928:	ff838383 7f0080ff c1c1c1ff c1c1c1c1     ................
  405938:	7f7f7fff 63636363 ff636363 000000ff     ....ccccccc.....
  405948:	00000000 ffffc000 00000000 00707070     ............ppp.
  405958:	00000000 1c000000 00001c1c 00000000     ................
  405968:	1ffce000 0000e0fc 3ff8e000 0c0c0c0f     ...........?....
  405978:	e0f83f0f 8383ffff c7838383 ff007cfe     .?...........|..
  405988:	c1c1c1ff 7fe3c1c1 f0c0003e 03030e3c     ........>...<...
  405998:	03030303 3c0f0300 c0c0c070 00c0c0c0     .......<p.......
  4059a8:	ffff0303 3c0e0303 c000c0f0 c0ffffc0     .......<........
  4059b8:	0f3c70c0 ffff0003 83838383 03030303     .p<.............
  4059c8:	c1ffff00 c0c1c1c1 00c0c0c0 6363ffff     ..............cc
  4059d8:	63636363 ff000303 000000ff 00000000     cccc............
  4059e8:	f0e00000 03060c18 03030303 c0ff7f03     ................
  4059f8:	c6c6c0c0 7efec6c6 8080ffff 80808080     .......~........
  405a08:	ffffff80 010101ff 01010101 0303ffff     ................
  405a18:	ffff0303 03030303 c0c0c000 c0ffffc0     ................
  405a28:	00c0c0c0 00000000 ff000000 000000ff     ................
  405a38:	c0c0fe7e 7fffc0c0 ffff0000 183060c0     ~............`0.
  405a48:	0103060c 01ffff00 380c0603 0080c060     ...........8`...
  405a58:	0000ffff 00000000 ff000000 c0c0c0ff     ................
  405a68:	c0c0c0c0 ffffc0c0 70701c0e ffff0e1c     ..........pp....
  405a78:	00ffff00 00000000 00ffff00 3c0fffff     ...............<
  405a88:	0080c0f0 ffffff00 000000ff 781e0701     ...............x
  405a98:	f0c0ffff 03071e3c f03c1e07 3c0f03c0     ....<.....<....<
  405aa8:	e0c0e078 030f3c78 0303ffff 03030303     x...x<..........
  405ab8:	fffeff03 030303ff 03030303 ffff0101     ................
  405ac8:	e3636363 7f6363e3 00ffff3e 07010000     ccc..cc.>.......
  405ad8:	c0f0380e 63331f0e 030383c3 700e0f03     .8....3c.......p
  405ae8:	c0c0c0f0 ccc6c3c1 0f0070f8 ff03030f     .........p......
  405af8:	0f0303ff 0000000f ffff0000 00000000     ................
  405b08:	3060ffff 30303030 ffc0e070 c0c060ff     ..`00000p....`..
  405b18:	e0c0c0c0 30303f7f 3030fefe 00303030     .....?00..00000.
  405b28:	7f000000 c0c0c0ff 0070f0c0              ..........p.

00405b34 <oCRAExtended_28ptBitmaps>:
  405b34:	e0e0e000 e0ffffff ffffffe0 00e0e0e0     ................
  405b44:	70707000 70ffffff ffffff70 00707070     .ppp...pp...ppp.
  405b54:	00000000 000f0f0f 0f0f0f00 00000000     ................
	...
  405b78:	80808000 00008080 00000000 00000000     ................
  405b88:	0f0f0f00 00000f0f 00000000 00000000     ................
  405b98:	00000000 fcf0c000 00071f7f 00000000     ................
  405ba8:	fcf0c080 01030f3f 00000000 fef8e000     ....?...........
  405bb8:	00030f3f 00000000 00000000 fffffe00     ?...............
  405bc8:	07070707 07070707 00feffff ffffff00     ................
	...
  405be0:	00ffffff ffff7f00 e0e0e0e0 e0e0e0e0     ................
  405bf0:	007fffff 07070700 ff070707 0000ffff     ................
	...
  405c08:	ff000000 0000ffff e0e0e000 e0e0e000     ................
  405c18:	ffe0e0e0 e0e0ffff ffffffe0 07070700     ................
  405c28:	07070707 07070707 00feffff fcfcf800     ................
  405c38:	1c1c1c1c 1c1c1c1c 000f1f1f ffffff00     ................
  405c48:	e0e0e0e0 e0e0e0e0 00e0e0e0 07070700     ................
  405c58:	07070707 07070707 feffff07 00000000     ................
  405c68:	1c1c1c1c 1c1c1c1c e7ffff1c e0e0e000     ................
  405c78:	e0e0e0e0 e0e0e0e0 7fffffe0 ffff0000     ................
  405c88:	000000ff f8000000 0000f8f8 ffff0000     ................
  405c98:	e0e0e0ff ffe0e0e0 e0e0ffff 00000000     ................
  405ca8:	00000000 ff000000 0000ffff 00000000     ................
  405cb8:	07ffffff 07070707 00070707 00000000     ................
  405cc8:	1c1f1f1f 1c1c1c1c 00f8fcfc 70707000     .............ppp
  405cd8:	e0e0e0e0 e0e0e0e0 007fffff ffffff00     ................
  405ce8:	00000707 00000000 00000000 ffffff00     ................
  405cf8:	e0e0e0e0 e0e0e0e0 00e0e0e0 ffffff00     ................
  405d08:	e0e0e0e0 e0e0e0e0 00ffffff 0f0f0f00     ................
  405d18:	07070707 07070707 ffffff07 00000000     ................
  405d28:	c0000000 3c78f0e0 07070f1e 00000000     ......x<........
  405d38:	ff000000 0000ffff 00000000 00000000     ................
  405d48:	07ffffff ffffff07 00000000 fcfcf800     ................
  405d58:	1c1f1f1f 1f1f1f1c 00f8fcfc ffff7f00     ................
  405d68:	e0e0e0e0 e0e0e0e0 007fffff ffffff00     ................
  405d78:	07070707 07070707 00ffffff 07070700     ................
  405d88:	07070707 07070707 00ffffff 00000000     ................
  405d98:	00000000 e0c00000 00ffffff 00000000     ................
  405da8:	f0f0f000 0000f0f0 00000000 00000000     ................
  405db8:	c1c1c100 0000c1c1 00000000 00000000     ................
  405dc8:	07070700 00000707 00000000 c0800000     ................
  405dd8:	3870e0e0 8f0f1e3c 00f8f8fe 03070700     ..p8<...........
  405de8:	78f0e0c1 070f1e3c 00000103 00000000     ...x<...........
  405df8:	00e7e7e7 00000000 00000000 00000000     ................
  405e08:	fffee000 00e0feff 00000000 f0000000     ................
  405e18:	011ffffe feff1f01 000000e0 fffff000     ................
  405e28:	0707071f 1f070707 00f0ffff ffffff00     ................
  405e38:	07070707 07070707 f8fcfe0f ffffff00     ................
  405e48:	1c1c1c1c 1c1c1c1c c1f7ff3e ffffff00     ........>.......
  405e58:	e0e0e0e0 e0e0e0e0 0f3f7f70 e0800000     ........p.?.....
  405e68:	0f3efcf8 07070707 07070707 ffff7e00     ..>..........~..
  405e78:	000000c3 00000000 00000000 07010000     ................
  405e88:	f07c3f1f e0e0e0e0 e0e0e0e0 07070700     .?|.............
  405e98:	07ffffff fe3e0f07 0080e0f8 00000000     ......>.........
  405ea8:	00ffffff 00000000 7effffc3 e0e0e000     ...........~....
  405eb8:	e0ffffff 3f7cf0e0 0001071f ffffff00     ......|?........
  405ec8:	07070707 07070707 07070707 ffffff00     ................
  405ed8:	1c1c1c1c 00001c1c 00000000 ffffff00     ................
  405ee8:	e0e0e0e0 e0e0e0e0 e0e0e0e0 ffffff00     ................
  405ef8:	07070707 07070707 07070707 ffffff00     ................
  405f08:	07070707 07070707 00000007 ffffff00     ................
	...
  405f24:	e0800000 1f3e78f0 07070707 00070707     .....x>.........
  405f34:	ffffff00 00000001 e0e0e0e0 00e0e0e0     ................
  405f44:	ff7f3f00 e0e0e0e0 e0e0e0e0 003f7fff     .?............?.
  405f54:	fefffe00 00000000 00000000 00fefffe     ................
  405f64:	ffffff00 1c1c1c1c 1c1c1c1c 00ffffff     ................
  405f74:	7fff7f00 00000000 00000000 007fff7f     ................
  405f84:	07070702 ffff0707 070707ff 00020707     ................
  405f94:	00000000 ffff0000 000000ff 00000000     ................
  405fa4:	e0e0e040 ffffe0e0 e0e0e0ff 0040e0e0     @.............@.
	...
  405fbc:	ff000000 0000ffff e0e00000 000000e0     ................
  405fcc:	ff000000 0000ffff 7f1f0000 e0e0e0ff     ................
  405fdc:	ffe0e0e0 00003f7f ffffff00 c0808000     .....?..........
  405fec:	3c78f0e0 03070f1e ffffff00 c1e3f77f     ..x<............
  405ffc:	00000080 00000000 ffffff00 03010000     ................
  40600c:	3c1e0f07 c0e0f078 ffffff00 00000000     ...<x...........
	...
  406024:	ffffff00 00000000 00000000 00000000     ................
  406034:	ffffff00 e0e0e0e0 e0e0e0e0 00e0e0e0     ................
  406044:	ffffff00 e0fc7f1f ff1f7ffc 0000ffff     ................
  406054:	ffffff00 07070000 ff000007 0000ffff     ................
  406064:	ffffff00 00000000 ff000000 0000ffff     ................
  406074:	ffffff00 c0f8fe3f 00000000 00ffffff     ....?...........
  406084:	ffffff00 7f0f0100 0080f0fe 00ffffff     ................
  406094:	ffffff00 00000000 fc7f1f03 00ffffff     ................
  4060a4:	e0800000 071f7ef8 f8fe1f07 000080e0     .....~..........
  4060b4:	ffff7e00 000000c3 c3000000 007effff     .~............~.
  4060c4:	07010000 e0f87f1f 1f7ff8e0 00000107     ................
  4060d4:	ffffff00 07070707 07070707 00fcfeff     ................
  4060e4:	ffffff00 70707070 70707070 001f3f7f     ....pppppppp.?..
  4060f4:	ffffff00 00000000 00000000 00000000     ................
  406104:	ffffff00 07070707 07070707 00fcfeff     ................
  406114:	ffffff00 3f1f0707 07c7f7ff 00010307     .......?........
  406124:	ffffff00 00000000 3f0f0300 00e0f87e     ...........?~...
  406134:	ff7e1c00 0787c7e7 07070707 003c3e3f     ..~.........?><.
  406144:	00000000 3e0f0703 c0e0f07c 00000000     .......>|.......
  406154:	fc7c3c00 e0e0e0e0 e7e3e1e0 0038feff     .<|...........8.
  406164:	3f3f3f00 ff070707 0707ffff 3f3f3f07     .???.........???
  406174:	00000000 ff000000 0000ffff 00000000     ................
  406184:	00000000 ff000000 0000ffff 00000000     ................
  406194:	fefffe00 00000000 00000000 00fefffe     ................
  4061a4:	3f0f0100 00c0f8ff fff8c000 00010f3f     ...?........?...
  4061b4:	00000000 fe7f0f01 010f7ffe 00000000     ................
  4061c4:	7f3f1f00 0080e0f0 e0800000 1f3f7ff0     ..?...........?.
  4061d4:	00000000 ff070301 0307fffe 00000001     ................
  4061e4:	00000000 ff000000 0000ffff 00000000     ................
  4061f4:	ffffff00 80800000 80808080 00000000     ................
  406204:	ffffff00 0303070e 07030303 00fcfeff     ................
  406214:	ffffff00 e0e07038 f0e0e0e0 001f3f7f     ....8p.......?..
  406224:	80808000 80fcfcfc 80808080 00008080     ................
  406234:	03030300 03ffffff 03030303 00000303     ................
  406244:	00000000 e0ff7f3f e0e0e0e0 1c7cfcf0     ....?.........|.

00406254 <oCRAExtended_28ptDescriptors>:
  406254:	00000310 00000000 00000000 00000000     ................
	...
  406280:	00300310 00600310 00900310 00c00310     ..0...`.........
  406290:	00f00310 01200310 01500310 01800310     ...... ...P.....
  4062a0:	01b00310 01e00310 02100310 02400310     ..............@.
  4062b0:	02700310 00000000 00000000 00000000     ..p.............
  4062c0:	00000000 02a00310 00000000 02d00310     ................
  4062d0:	03000310 03300310 03600310 03900310     ......0...`.....
  4062e0:	03c00310 03f00310 04200310 04500310     .......... ...P.
  4062f0:	04800310 04b00310 04e00310 05100310     ................
  406300:	05400310 05700310 05a00310 00000000     ..@...p.........
  406310:	05d00310 06000310 06300310 00000000     ..........0.....
  406320:	06600310 00000000 00000000 06900310     ..`.............
	...
  406350:	06c00310 00000000 00000000 00000000     ................
	...
  406398:	06f00310                                ....

0040639c <oCRAExtended_18ptDescriptors>:
  40639c:	0000020b 00000000 00000000 00000000     ................
	...
  4063cc:	0016020b 002c020b 0042020b 0058020b     ......,...B...X.
  4063dc:	006e020b 0084020b 009a020b 00b0020b     ..n.............
  4063ec:	00c6020b 00dc020b 00f2020b 0108020b     ................
	...
  406414:	011e020b 0134020b 014a020b 0160020b     ......4...J...`.
  406424:	0176020b 018c020b 01a2020b 01b8020b     ..v.............
  406434:	01ce020b 01e4020b 01fa020b 0210020b     ................
  406444:	0226020b 023c020b 0252020b 0268020b     ..&...<...R...h.
  406454:	00000000 027e020b 0294020b 02aa020b     ......~.........
	...
  406498:	02c0020b 00000000 00000000 00000000     ................
	...
  4064e0:	02d6020b 0000080f 00ffff06 00000043     ............C...

004064f0 <_global_impure_ptr>:
  4064f0:	20000258                                X.. 

004064f4 <_init>:
  4064f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4064f6:	bf00      	nop
  4064f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4064fa:	bc08      	pop	{r3}
  4064fc:	469e      	mov	lr, r3
  4064fe:	4770      	bx	lr

00406500 <__init_array_start>:
  406500:	004050bd 	.word	0x004050bd

00406504 <__frame_dummy_init_array_entry>:
  406504:	004000e5                                ..@.

00406508 <_fini>:
  406508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40650a:	bf00      	nop
  40650c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40650e:	bc08      	pop	{r3}
  406510:	469e      	mov	lr, r3
  406512:	4770      	bx	lr

00406514 <__fini_array_start>:
  406514:	004000c1 	.word	0x004000c1

Disassembly of section .relocate:

20000000 <efc_perform_read_sequence>:
__no_inline
RAMFUNC
uint32_t efc_perform_read_sequence(Efc *p_efc,
		uint32_t ul_cmd_st, uint32_t ul_cmd_sp,
		uint32_t *p_ul_buf, uint32_t ul_size)
{
20000000:	b470      	push	{r4, r5, r6}
20000002:	b083      	sub	sp, #12
20000004:	9e06      	ldr	r6, [sp, #24]
	uint32_t *p_ul_data = (uint32_t *) READ_BUFF_ADDR;
#else
	return EFC_RC_NOT_SUPPORT;
#endif

	if (p_ul_buf == NULL) {
20000006:	b343      	cbz	r3, 2000005a <efc_perform_read_sequence+0x5a>
20000008:	461c      	mov	r4, r3
		return EFC_RC_INVALID;
	}

	p_efc->EEFC_FMR |= (0x1u << 16);
2000000a:	6803      	ldr	r3, [r0, #0]
2000000c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
20000010:	6003      	str	r3, [r0, #0]

	/* Send the Start Read command */
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || \
	 SAMV71 || SAMV70 || SAMS70 || SAME70)
	p_efc->EEFC_FCR = EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0)
			| EEFC_FCR_FCMD(ul_cmd_st);
20000012:	b2c9      	uxtb	r1, r1
20000014:	f041 41b4 	orr.w	r1, r1, #1509949440	; 0x5a000000
	p_efc->EEFC_FMR |= (0x1u << 16);

	/* Send the Start Read command */
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || \
	 SAMV71 || SAMV70 || SAMS70 || SAME70)
	p_efc->EEFC_FCR = EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0)
20000018:	6041      	str	r1, [r0, #4]
#endif
	/* Wait for the FRDY bit in the Flash Programming Status Register
	 * (EEFC_FSR) falls.
	 */
	do {
		ul_status = p_efc->EEFC_FSR;
2000001a:	6883      	ldr	r3, [r0, #8]
2000001c:	9301      	str	r3, [sp, #4]
	} while ((ul_status & EEFC_FSR_FRDY) == EEFC_FSR_FRDY);
2000001e:	9b01      	ldr	r3, [sp, #4]
20000020:	f013 0301 	ands.w	r3, r3, #1
20000024:	d1f9      	bne.n	2000001a <efc_perform_read_sequence+0x1a>

	/* The data is located in the first address of the Flash
	 * memory mapping.
	 */
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
20000026:	b14e      	cbz	r6, 2000003c <efc_perform_read_sequence+0x3c>
20000028:	4621      	mov	r1, r4
2000002a:	eb04 0686 	add.w	r6, r4, r6, lsl #2
2000002e:	4c0d      	ldr	r4, [pc, #52]	; (20000064 <efc_perform_read_sequence+0x64>)
		p_ul_buf[ul_cnt] = p_ul_data[ul_cnt];
20000030:	f854 5f04 	ldr.w	r5, [r4, #4]!
20000034:	f841 5b04 	str.w	r5, [r1], #4
	} while ((ul_status & EEFC_FSR_FRDY) == EEFC_FSR_FRDY);

	/* The data is located in the first address of the Flash
	 * memory mapping.
	 */
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
20000038:	42b1      	cmp	r1, r6
2000003a:	d1f9      	bne.n	20000030 <efc_perform_read_sequence+0x30>

	/* To stop the read mode */
	p_efc->EEFC_FCR =
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || \
	 SAMV71 || SAMV70 || SAMS70 || SAME70)
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0) |
2000003c:	b2d2      	uxtb	r2, r2
2000003e:	f042 42b4 	orr.w	r2, r2, #1509949440	; 0x5a000000
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
		p_ul_buf[ul_cnt] = p_ul_data[ul_cnt];
	}

	/* To stop the read mode */
	p_efc->EEFC_FCR =
20000042:	6042      	str	r2, [r0, #4]
#endif
	/* Wait for the FRDY bit in the Flash Programming Status Register (EEFC_FSR)
	 * rises.
	 */
	do {
		ul_status = p_efc->EEFC_FSR;
20000044:	6882      	ldr	r2, [r0, #8]
20000046:	9201      	str	r2, [sp, #4]
	} while ((ul_status & EEFC_FSR_FRDY) != EEFC_FSR_FRDY);
20000048:	9a01      	ldr	r2, [sp, #4]
2000004a:	f012 0f01 	tst.w	r2, #1
2000004e:	d0f9      	beq.n	20000044 <efc_perform_read_sequence+0x44>

	p_efc->EEFC_FMR &= ~(0x1u << 16);
20000050:	6802      	ldr	r2, [r0, #0]
20000052:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
20000056:	6002      	str	r2, [r0, #0]

	return EFC_RC_OK;
20000058:	e000      	b.n	2000005c <efc_perform_read_sequence+0x5c>
#else
	return EFC_RC_NOT_SUPPORT;
#endif

	if (p_ul_buf == NULL) {
		return EFC_RC_INVALID;
2000005a:	2302      	movs	r3, #2
	} while ((ul_status & EEFC_FSR_FRDY) != EEFC_FSR_FRDY);

	p_efc->EEFC_FMR &= ~(0x1u << 16);

	return EFC_RC_OK;
}
2000005c:	4618      	mov	r0, r3
2000005e:	b003      	add	sp, #12
20000060:	bc70      	pop	{r4, r5, r6}
20000062:	4770      	bx	lr
20000064:	003ffffc 	.word	0x003ffffc

20000068 <efc_write_fmr>:
 */
__no_inline
RAMFUNC
void efc_write_fmr(Efc *p_efc, uint32_t ul_fmr)
{
	p_efc->EEFC_FMR = ul_fmr;
20000068:	6001      	str	r1, [r0, #0]
2000006a:	4770      	bx	lr

2000006c <efc_perform_fcr>:
 * \return The current status.
 */
__no_inline
RAMFUNC
uint32_t efc_perform_fcr(Efc *p_efc, uint32_t ul_fcr)
{
2000006c:	b082      	sub	sp, #8
	volatile uint32_t ul_status;

	p_efc->EEFC_FCR = ul_fcr;
2000006e:	6041      	str	r1, [r0, #4]
	do {
		ul_status = p_efc->EEFC_FSR;
20000070:	6883      	ldr	r3, [r0, #8]
20000072:	9301      	str	r3, [sp, #4]
	} while ((ul_status & EEFC_FSR_FRDY) != EEFC_FSR_FRDY);
20000074:	9b01      	ldr	r3, [sp, #4]
20000076:	f013 0f01 	tst.w	r3, #1
2000007a:	d0f9      	beq.n	20000070 <efc_perform_fcr+0x4>

	return (ul_status & EEFC_ERROR_FLAGS);
2000007c:	9801      	ldr	r0, [sp, #4]
}
2000007e:	f000 000e 	and.w	r0, r0, #14
20000082:	b002      	add	sp, #8
20000084:	4770      	bx	lr
20000086:	bf00      	nop

20000088 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000088:	f3bf 8f5f 	dmb	sy
2000008c:	3801      	subs	r0, #1
2000008e:	d1fb      	bne.n	20000088 <portable_delay_cycles>
20000090:	4770      	bx	lr
20000092:	bf00      	nop

20000094 <curr_display>:
20000094:	0007 0000                                   ....

20000098 <notes_lookup>:
20000098:	0000 3f80 a993 3f8a 5326 3f95 fcb9 3f9f     ...?...?&S.?...?
200000a8:	a64c 3faa 4fdf 3fb5 f972 3fbf a305 3fca     L..?.O.?r..?...?
200000b8:	4c98 3fd5 f62b 3fdf 9fbe 3fea 4952 3ff5     .L.?+..?...?RI.?
200000c8:	0000 4000 54ca 4005 a993 400a fe5d 400f     ...@.T.@...@]..@
200000d8:	5326 4015 a7f0 401a fcb9 401f 5183 4025     &S.@...@...@.Q%@
200000e8:	a64c 402a fb16 402f 4fdf 4035 a4a9 403a     L.*@../@.O5@..:@
200000f8:	0000 4040 54ca 4045 a993 404a fe5d 404f     ..@@.TE@..J@].O@
20000108:	5326 4055 a7f0 405a fcb9 405f 5183 4065     &SU@..Z@.._@.Qe@
20000118:	a64c 406a fb16 406f 4fdf 4075 a4a9 407a     L.j@..o@.Ou@..z@
20000128:	0000 4080 aa65 4082 54ca 4085 ff2e 4087     ...@e..@.T.@...@
20000138:	a993 408a 53f8 408d fe5d 408f a8c1 4092     ...@.S.@]..@...@
20000148:	5326 4095 fd8b 4097 a7f0 409a 5254 409d     &S.@...@...@TR.@
20000158:	0000 40a0 aa65 40a2 54ca 40a5 ff2e 40a7     ...@e..@.T.@...@
20000168:	a993 40aa 53f8 40ad fe5d 40af a8c1 40b2     ...@.S.@]..@...@
20000178:	5326 40b5 fd8b 40b7 a7f0 40ba 5254 40bd     &S.@...@...@TR.@
20000188:	0000 40c0 aa65 40c2 54ca 40c5 ff2e 40c7     ...@e..@.T.@...@
20000198:	a993 40ca 53f8 40cd fe5d 40cf a8c1 40d2     ...@.S.@]..@...@
200001a8:	5326 40d5 fd8b 40d7 a7f0 40da 5254 40dd     &S.@...@...@TR.@
200001b8:	0000 40e0 aa65 40e2 54ca 40e5 ff2e 40e7     ...@e..@.T.@...@
200001c8:	a993 40ea 53f8 40ed fe5d 40ef a8c1 40f2     ...@.S.@]..@...@
200001d8:	5326 40f5 fd8b 40f7 a7f0 40fa 5254 40fd     &S.@...@...@TR.@
200001e8:	0000 4100 5532 4101 aa65 4102 ff97 4103     ...A2U.Ae..A...A
200001f8:	54ca 4105 a9fc 4106 ff2e 4107 5461 4109     .T.A...A...AaT.A
20000208:	a993 410a fec5 410b 53f8 410d a92a 410e     ...A...A.S.A*..A
20000218:	0000 4110 5532 4111 aa65 4112 ff97 4113     ...A2U.Ae..A...A
20000228:	54ca 4115 a9fc 4116 ff2e 4117 5461 4119     .T.A...A...AaT.A
20000238:	a993 411a fec5 411b 53f8 411d a92a 411e     ...A...A.S.A*..A
20000248:	0000 4120                                   .. A

2000024c <g_interrupt_enabled>:
2000024c:	0001 0000                                   ....

20000250 <SystemCoreClock>:
20000250:	0900 003d 0000 0000                         ..=.....

20000258 <impure_data>:
20000258:	0000 0000 0544 2000 05ac 2000 0614 2000     ....D.. ... ... 
	...
2000028c:	64ec 0040 0000 0000 0000 0000 0000 0000     .d@.............
	...
20000300:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
20000310:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...
