
gatorsynth_sequencer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000934  00400000  00400000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000430  20000000  00400934  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000024  20000430  00400d64  00020430  2**2
                  ALLOC
  3 .stack        00003004  20000454  00400d88  00020430  2**0
                  ALLOC
  4 .ARM.attributes 0000002a  00000000  00000000  00020430  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0002045a  2**0
                  CONTENTS, READONLY
  6 .debug_info   00002cb7  00000000  00000000  000204b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b35  00000000  00000000  0002316a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000dfa  00000000  00000000  00023c9f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000002f0  00000000  00000000  00024a99  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000270  00000000  00000000  00024d89  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0000cfee  00000000  00000000  00024ff9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00004d60  00000000  00000000  00031fe7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0003cd6a  00000000  00000000  00036d47  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  0000068c  00000000  00000000  00073ab4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <_sfixed>:
  400000:	20003458 	.word	0x20003458
  400004:	00400485 	.word	0x00400485
  400008:	00400481 	.word	0x00400481
  40000c:	00400481 	.word	0x00400481
  400010:	00400481 	.word	0x00400481
  400014:	00400481 	.word	0x00400481
  400018:	00400481 	.word	0x00400481
	...
  40002c:	00400481 	.word	0x00400481
  400030:	00400481 	.word	0x00400481
  400034:	00000000 	.word	0x00000000
  400038:	00400481 	.word	0x00400481
  40003c:	00400481 	.word	0x00400481
  400040:	00400481 	.word	0x00400481
  400044:	00400481 	.word	0x00400481
  400048:	00400481 	.word	0x00400481
  40004c:	00400481 	.word	0x00400481
  400050:	00400481 	.word	0x00400481
  400054:	00400481 	.word	0x00400481
  400058:	00400481 	.word	0x00400481
  40005c:	00000000 	.word	0x00000000
  400060:	00400481 	.word	0x00400481
  400064:	00400481 	.word	0x00400481
  400068:	00400481 	.word	0x00400481
  40006c:	00400721 	.word	0x00400721
  400070:	00400481 	.word	0x00400481
  400074:	00400481 	.word	0x00400481
  400078:	00400481 	.word	0x00400481
  40007c:	00400481 	.word	0x00400481
  400080:	00400481 	.word	0x00400481
  400084:	00400481 	.word	0x00400481
  400088:	00000000 	.word	0x00000000
  40008c:	00400481 	.word	0x00400481
  400090:	00400481 	.word	0x00400481
  400094:	00400481 	.word	0x00400481
  400098:	00400481 	.word	0x00400481
  40009c:	00400181 	.word	0x00400181
  4000a0:	00400481 	.word	0x00400481
  4000a4:	00400481 	.word	0x00400481
  4000a8:	00400481 	.word	0x00400481
  4000ac:	00400481 	.word	0x00400481
  4000b0:	00400481 	.word	0x00400481
  4000b4:	00400481 	.word	0x00400481
  4000b8:	00400481 	.word	0x00400481
  4000bc:	00400481 	.word	0x00400481

004000c0 <__do_global_dtors_aux>:
  4000c0:	b510      	push	{r4, lr}
  4000c2:	4c05      	ldr	r4, [pc, #20]	; (4000d8 <__do_global_dtors_aux+0x18>)
  4000c4:	7823      	ldrb	r3, [r4, #0]
  4000c6:	b933      	cbnz	r3, 4000d6 <__do_global_dtors_aux+0x16>
  4000c8:	4b04      	ldr	r3, [pc, #16]	; (4000dc <__do_global_dtors_aux+0x1c>)
  4000ca:	b113      	cbz	r3, 4000d2 <__do_global_dtors_aux+0x12>
  4000cc:	4804      	ldr	r0, [pc, #16]	; (4000e0 <__do_global_dtors_aux+0x20>)
  4000ce:	f3af 8000 	nop.w
  4000d2:	2301      	movs	r3, #1
  4000d4:	7023      	strb	r3, [r4, #0]
  4000d6:	bd10      	pop	{r4, pc}
  4000d8:	20000430 	.word	0x20000430
  4000dc:	00000000 	.word	0x00000000
  4000e0:	00400934 	.word	0x00400934

004000e4 <frame_dummy>:
  4000e4:	4b08      	ldr	r3, [pc, #32]	; (400108 <frame_dummy+0x24>)
  4000e6:	b510      	push	{r4, lr}
  4000e8:	b11b      	cbz	r3, 4000f2 <frame_dummy+0xe>
  4000ea:	4908      	ldr	r1, [pc, #32]	; (40010c <frame_dummy+0x28>)
  4000ec:	4808      	ldr	r0, [pc, #32]	; (400110 <frame_dummy+0x2c>)
  4000ee:	f3af 8000 	nop.w
  4000f2:	4808      	ldr	r0, [pc, #32]	; (400114 <frame_dummy+0x30>)
  4000f4:	6803      	ldr	r3, [r0, #0]
  4000f6:	b903      	cbnz	r3, 4000fa <frame_dummy+0x16>
  4000f8:	bd10      	pop	{r4, pc}
  4000fa:	4b07      	ldr	r3, [pc, #28]	; (400118 <frame_dummy+0x34>)
  4000fc:	2b00      	cmp	r3, #0
  4000fe:	d0fb      	beq.n	4000f8 <frame_dummy+0x14>
  400100:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400104:	4718      	bx	r3
  400106:	bf00      	nop
  400108:	00000000 	.word	0x00000000
  40010c:	20000434 	.word	0x20000434
  400110:	00400934 	.word	0x00400934
  400114:	00400934 	.word	0x00400934
  400118:	00000000 	.word	0x00000000

0040011c <timers_init>:
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  40011c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  400120:	4b13      	ldr	r3, [pc, #76]	; (400170 <timers_init+0x54>)
  400122:	601a      	str	r2, [r3, #0]

	NVIC_EnableIRQ(TC0_IRQn);

	// Enable peripheral clock for TC0
	// Peripheral ID (PID) for TC0 is 23
	REG_PMC_PCER0 |= PMC_PCER0_PID23;
  400124:	4b13      	ldr	r3, [pc, #76]	; (400174 <timers_init+0x58>)
  400126:	681a      	ldr	r2, [r3, #0]
  400128:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
  40012c:	601a      	str	r2, [r3, #0]

	// Links timer clock to Master clock / 32 = 3.125 MHz
	// 3.125 MHz = 62500 ticks @ 50 BPM (without handling overflows)
	REG_TC0_CMR0 |= TC_CMR_TCCLKS_TIMER_CLOCK4;
  40012e:	4912      	ldr	r1, [pc, #72]	; (400178 <timers_init+0x5c>)
  400130:	680a      	ldr	r2, [r1, #0]
  400132:	f042 0203 	orr.w	r2, r2, #3
  400136:	600a      	str	r2, [r1, #0]

	// Sets the counter overflow interrupt
	REG_TC0_IER0 |= TC_IER_COVFS;
  400138:	3120      	adds	r1, #32
  40013a:	680a      	ldr	r2, [r1, #0]
  40013c:	f042 0201 	orr.w	r2, r2, #1
  400140:	600a      	str	r2, [r1, #0]

	// For the interrupt
	REG_PIOA_PER |= PIO_PER_P11; //enable PIO controller on PA11
  400142:	f501 2150 	add.w	r1, r1, #851968	; 0xd0000
  400146:	f601 51dc 	addw	r1, r1, #3548	; 0xddc
  40014a:	680a      	ldr	r2, [r1, #0]
  40014c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
  400150:	600a      	str	r2, [r1, #0]
	REG_PIOA_OER |= PIO_PER_P11; //enable output on pin PA11
  400152:	3110      	adds	r1, #16
  400154:	680a      	ldr	r2, [r1, #0]
  400156:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
  40015a:	600a      	str	r2, [r1, #0]
	REG_PMC_PCER0 |= PMC_PCER0_PID11; //Enable PMC control for PA11
  40015c:	681a      	ldr	r2, [r3, #0]
  40015e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
  400162:	601a      	str	r2, [r3, #0]

	// TC0 control register enables timer and triggers it to start
	REG_TC0_CCR0 |= TC_CCR_CLKEN | TC_CCR_SWTRG;
  400164:	4a05      	ldr	r2, [pc, #20]	; (40017c <timers_init+0x60>)
  400166:	6813      	ldr	r3, [r2, #0]
  400168:	f043 0305 	orr.w	r3, r3, #5
  40016c:	6013      	str	r3, [r2, #0]
  40016e:	4770      	bx	lr
  400170:	e000e100 	.word	0xe000e100
  400174:	400e0410 	.word	0x400e0410
  400178:	40010004 	.word	0x40010004
  40017c:	40010000 	.word	0x40010000

00400180 <TC0_Handler>:
 }

 void TC0_Handler() {
	 // Handling overflow
	 if((REG_TC0_SR0 & TC_SR_COVFS) != 0) {
  400180:	4b0a      	ldr	r3, [pc, #40]	; (4001ac <TC0_Handler+0x2c>)
  400182:	681b      	ldr	r3, [r3, #0]
  400184:	f013 0f01 	tst.w	r3, #1
  400188:	d00f      	beq.n	4001aa <TC0_Handler+0x2a>
		 if((REG_PIOA_PDSR & PIO_ODSR_P11) >= 1) {
  40018a:	4b09      	ldr	r3, [pc, #36]	; (4001b0 <TC0_Handler+0x30>)
  40018c:	681b      	ldr	r3, [r3, #0]
  40018e:	f413 6f00 	tst.w	r3, #2048	; 0x800
  400192:	d005      	beq.n	4001a0 <TC0_Handler+0x20>
			 REG_PIOA_CODR |= PIO_CODR_P11;
  400194:	4a07      	ldr	r2, [pc, #28]	; (4001b4 <TC0_Handler+0x34>)
  400196:	6813      	ldr	r3, [r2, #0]
  400198:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  40019c:	6013      	str	r3, [r2, #0]
  40019e:	4770      	bx	lr
		 }
		 else {
			 REG_PIOA_SODR |= PIO_SODR_P11;
  4001a0:	4a05      	ldr	r2, [pc, #20]	; (4001b8 <TC0_Handler+0x38>)
  4001a2:	6813      	ldr	r3, [r2, #0]
  4001a4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  4001a8:	6013      	str	r3, [r2, #0]
  4001aa:	4770      	bx	lr
  4001ac:	40010020 	.word	0x40010020
  4001b0:	400e0e3c 	.word	0x400e0e3c
  4001b4:	400e0e34 	.word	0x400e0e34
  4001b8:	400e0e30 	.word	0x400e0e30

004001bc <LED_init>:
#include <board.h>
#include <conf_board.h>

void LED_init(){
	 //enable clock for PIOA
	 REG_PMC_PCER0 |= PMC_PCER0_PID11;
  4001bc:	4a16      	ldr	r2, [pc, #88]	; (400218 <LED_init+0x5c>)
  4001be:	6813      	ldr	r3, [r2, #0]
  4001c0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  4001c4:	6013      	str	r3, [r2, #0]

	 //Set up PA11 as LED OUTPUT
	 REG_PIOA_PER |= PIO_PER_P11; //enable PIO controller on PA11
  4001c6:	4915      	ldr	r1, [pc, #84]	; (40021c <LED_init+0x60>)
  4001c8:	680b      	ldr	r3, [r1, #0]
  4001ca:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  4001ce:	600b      	str	r3, [r1, #0]
	 REG_PIOA_OER |= PIO_PER_P11; //enable output on pin PA11
  4001d0:	f502 6220 	add.w	r2, r2, #2560	; 0xa00
  4001d4:	6813      	ldr	r3, [r2, #0]
  4001d6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  4001da:	6013      	str	r3, [r2, #0]
	 REG_PIOA_CODR |= PIO_PER_P11; //set output low on PA11 as default
  4001dc:	4b10      	ldr	r3, [pc, #64]	; (400220 <LED_init+0x64>)
  4001de:	6818      	ldr	r0, [r3, #0]
  4001e0:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
  4001e4:	6018      	str	r0, [r3, #0]

	  //Set up PA15 as Left LED OUTPUT
	  REG_PIOA_PER |= PIO_PER_P15; //enable PIO controller on PA15
  4001e6:	6808      	ldr	r0, [r1, #0]
  4001e8:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
  4001ec:	6008      	str	r0, [r1, #0]
	  REG_PIOA_OER |= PIO_PER_P15; //enable output on pin PA15
  4001ee:	6810      	ldr	r0, [r2, #0]
  4001f0:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
  4001f4:	6010      	str	r0, [r2, #0]
	  REG_PIOA_CODR |= PIO_PER_P15; //set output low on PA15 as default
  4001f6:	6818      	ldr	r0, [r3, #0]
  4001f8:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
  4001fc:	6018      	str	r0, [r3, #0]

	  //Set up PA16 as Right LED OUTPUT
	  REG_PIOA_PER |= PIO_PER_P16; //enable PIO controller on PA16
  4001fe:	6808      	ldr	r0, [r1, #0]
  400200:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
  400204:	6008      	str	r0, [r1, #0]
	  REG_PIOA_OER |= PIO_PER_P16; //enable output on pin PA16
  400206:	6811      	ldr	r1, [r2, #0]
  400208:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
  40020c:	6011      	str	r1, [r2, #0]
	  REG_PIOA_CODR |= PIO_PER_P16; //set output low on PA16 as default
  40020e:	681a      	ldr	r2, [r3, #0]
  400210:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  400214:	601a      	str	r2, [r3, #0]
  400216:	4770      	bx	lr
  400218:	400e0410 	.word	0x400e0410
  40021c:	400e0e00 	.word	0x400e0e00
  400220:	400e0e34 	.word	0x400e0e34

00400224 <Encoder_init>:
}

void Encoder_init(){
  400224:	b470      	push	{r4, r5, r6}
	 //Set up PA12 as BUTTON INPUT
	 REG_PIOA_PER |= PIO_PER_P12; //enable PIO controller on PA12
  400226:	4d36      	ldr	r5, [pc, #216]	; (400300 <Encoder_init+0xdc>)
  400228:	682b      	ldr	r3, [r5, #0]
  40022a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  40022e:	602b      	str	r3, [r5, #0]
	 REG_PIOA_ODR |= PIO_ODR_P12; //disable output on pin PA12
  400230:	4c34      	ldr	r4, [pc, #208]	; (400304 <Encoder_init+0xe0>)
  400232:	6823      	ldr	r3, [r4, #0]
  400234:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  400238:	6023      	str	r3, [r4, #0]
	 REG_PIOA_PPDDR |= PIO_PPDDR_P12; //disable pull-down resistor on PA12
  40023a:	4833      	ldr	r0, [pc, #204]	; (400308 <Encoder_init+0xe4>)
  40023c:	6803      	ldr	r3, [r0, #0]
  40023e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  400242:	6003      	str	r3, [r0, #0]
	 REG_PIOA_PUER |= PIO_PUER_P12;	//enable pull-up resistor on PA12
  400244:	4931      	ldr	r1, [pc, #196]	; (40030c <Encoder_init+0xe8>)
  400246:	680b      	ldr	r3, [r1, #0]
  400248:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  40024c:	600b      	str	r3, [r1, #0]
	 REG_PIOA_IFSCER |= PIO_IFSCER_P12; //turn on slow clock debounce
  40024e:	4a30      	ldr	r2, [pc, #192]	; (400310 <Encoder_init+0xec>)
  400250:	6813      	ldr	r3, [r2, #0]
  400252:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  400256:	6013      	str	r3, [r2, #0]
	 REG_PIOA_IFER |= PIO_IFER_P12;	//start debounce filter
  400258:	4b2e      	ldr	r3, [pc, #184]	; (400314 <Encoder_init+0xf0>)
  40025a:	681e      	ldr	r6, [r3, #0]
  40025c:	f446 5680 	orr.w	r6, r6, #4096	; 0x1000
  400260:	601e      	str	r6, [r3, #0]

	 //Set up PA13 as ENCODER INPUT A
	 REG_PIOA_PER |= PIO_PER_P13; //enable PIO controller on PA13
  400262:	682e      	ldr	r6, [r5, #0]
  400264:	f446 5600 	orr.w	r6, r6, #8192	; 0x2000
  400268:	602e      	str	r6, [r5, #0]
	 REG_PIOA_ODR |= PIO_ODR_P13; //disable output on pin PA13
  40026a:	6826      	ldr	r6, [r4, #0]
  40026c:	f446 5600 	orr.w	r6, r6, #8192	; 0x2000
  400270:	6026      	str	r6, [r4, #0]
	 REG_PIOA_PPDDR |= PIO_PPDDR_P13; //disable pull-down resistor on PA13
  400272:	6806      	ldr	r6, [r0, #0]
  400274:	f446 5600 	orr.w	r6, r6, #8192	; 0x2000
  400278:	6006      	str	r6, [r0, #0]
	 REG_PIOA_PUER |= PIO_PUER_P13;	//enable pull-up resistor on PA13
  40027a:	680e      	ldr	r6, [r1, #0]
  40027c:	f446 5600 	orr.w	r6, r6, #8192	; 0x2000
  400280:	600e      	str	r6, [r1, #0]
	 REG_PIOA_IFSCER |= PIO_IFSCER_P13; //turn on slow clock debounce
  400282:	6816      	ldr	r6, [r2, #0]
  400284:	f446 5600 	orr.w	r6, r6, #8192	; 0x2000
  400288:	6016      	str	r6, [r2, #0]
	 REG_PIOA_IFER |= PIO_IFER_P13;	//start debounce filter
  40028a:	681e      	ldr	r6, [r3, #0]
  40028c:	f446 5600 	orr.w	r6, r6, #8192	; 0x2000
  400290:	601e      	str	r6, [r3, #0]

	 //Set up PA12 as ENCODER INPUT B
	 REG_PIOA_PER |= PIO_PER_P14; //enable PIO controller on PA14
  400292:	682e      	ldr	r6, [r5, #0]
  400294:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
  400298:	602e      	str	r6, [r5, #0]
	 REG_PIOA_ODR |= PIO_ODR_P14; //disable output on pin PA14
  40029a:	6825      	ldr	r5, [r4, #0]
  40029c:	f445 4580 	orr.w	r5, r5, #16384	; 0x4000
  4002a0:	6025      	str	r5, [r4, #0]
	 REG_PIOA_PPDDR |= PIO_PPDDR_P14; //disable pull-down resistor on PA14
  4002a2:	6804      	ldr	r4, [r0, #0]
  4002a4:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
  4002a8:	6004      	str	r4, [r0, #0]
	 REG_PIOA_PUER |= PIO_PUER_P14;	//enable pull-up resistor on PA14
  4002aa:	6808      	ldr	r0, [r1, #0]
  4002ac:	f440 4080 	orr.w	r0, r0, #16384	; 0x4000
  4002b0:	6008      	str	r0, [r1, #0]
	 REG_PIOA_IFSCER |= PIO_IFSCER_P14; //turn on slow clock debounce
  4002b2:	6811      	ldr	r1, [r2, #0]
  4002b4:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
  4002b8:	6011      	str	r1, [r2, #0]
	 REG_PIOA_IFER |= PIO_IFER_P14;	//start debounce filter
  4002ba:	681a      	ldr	r2, [r3, #0]
  4002bc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
  4002c0:	601a      	str	r2, [r3, #0]
	 

	 uint32_t flag_clear = REG_PIOA_ISR;	//clear left over interrupt flags
  4002c2:	332c      	adds	r3, #44	; 0x2c
  4002c4:	681b      	ldr	r3, [r3, #0]
	 REG_PIOA_IER |= PIO_IER_P12;			//enable input level change interrupt on P12
  4002c6:	4b14      	ldr	r3, [pc, #80]	; (400318 <Encoder_init+0xf4>)
  4002c8:	681a      	ldr	r2, [r3, #0]
  4002ca:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
  4002ce:	601a      	str	r2, [r3, #0]
	 REG_PIOA_IER |= PIO_IER_P13;			//enable input level change interrupt on P13
  4002d0:	681a      	ldr	r2, [r3, #0]
  4002d2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  4002d6:	601a      	str	r2, [r3, #0]
	 REG_PIOA_REHLSR |= PIO_REHLSR_P13;
  4002d8:	4a10      	ldr	r2, [pc, #64]	; (40031c <Encoder_init+0xf8>)
  4002da:	6811      	ldr	r1, [r2, #0]
  4002dc:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
  4002e0:	6011      	str	r1, [r2, #0]
	 REG_PIOA_IER |= PIO_IER_P14;			//enable input level change interrupt on P14
  4002e2:	6819      	ldr	r1, [r3, #0]
  4002e4:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
  4002e8:	6019      	str	r1, [r3, #0]
	 REG_PIOA_REHLSR |= PIO_REHLSR_P14;
  4002ea:	6813      	ldr	r3, [r2, #0]
  4002ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  4002f0:	6013      	str	r3, [r2, #0]
  4002f2:	f44f 6200 	mov.w	r2, #2048	; 0x800
  4002f6:	4b0a      	ldr	r3, [pc, #40]	; (400320 <Encoder_init+0xfc>)
  4002f8:	601a      	str	r2, [r3, #0]
	 NVIC_EnableIRQ(PIOA_IRQn);				//enable PORT A interrupts
}
  4002fa:	bc70      	pop	{r4, r5, r6}
  4002fc:	4770      	bx	lr
  4002fe:	bf00      	nop
  400300:	400e0e00 	.word	0x400e0e00
  400304:	400e0e14 	.word	0x400e0e14
  400308:	400e0e90 	.word	0x400e0e90
  40030c:	400e0e64 	.word	0x400e0e64
  400310:	400e0e84 	.word	0x400e0e84
  400314:	400e0e20 	.word	0x400e0e20
  400318:	400e0e40 	.word	0x400e0e40
  40031c:	400e0ed4 	.word	0x400e0ed4
  400320:	e000e100 	.word	0xe000e100

00400324 <board_init>:

void board_init(void)
{
  400324:	b508      	push	{r3, lr}
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
	 LED_init();
  400326:	4b02      	ldr	r3, [pc, #8]	; (400330 <board_init+0xc>)
  400328:	4798      	blx	r3
	 Encoder_init();
  40032a:	4b02      	ldr	r3, [pc, #8]	; (400334 <board_init+0x10>)
  40032c:	4798      	blx	r3
  40032e:	bd08      	pop	{r3, pc}
  400330:	004001bd 	.word	0x004001bd
  400334:	00400225 	.word	0x00400225

00400338 <sysclk_init>:

	SystemCoreClockUpdate();
}

void sysclk_init(void)
{
  400338:	b510      	push	{r4, lr}
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  40033a:	480e      	ldr	r0, [pc, #56]	; (400374 <sysclk_init+0x3c>)
  40033c:	4b0e      	ldr	r3, [pc, #56]	; (400378 <sysclk_init+0x40>)
  40033e:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
		break;

	case OSC_MAINCK_8M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
  400340:	2010      	movs	r0, #16
  400342:	4b0e      	ldr	r3, [pc, #56]	; (40037c <sysclk_init+0x44>)
  400344:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  400346:	4c0e      	ldr	r4, [pc, #56]	; (400380 <sysclk_init+0x48>)
  400348:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  40034a:	2800      	cmp	r0, #0
  40034c:	d0fc      	beq.n	400348 <sysclk_init+0x10>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  40034e:	4b0d      	ldr	r3, [pc, #52]	; (400384 <sysclk_init+0x4c>)
  400350:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  400352:	4a0d      	ldr	r2, [pc, #52]	; (400388 <sysclk_init+0x50>)
  400354:	4b0d      	ldr	r3, [pc, #52]	; (40038c <sysclk_init+0x54>)
  400356:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
  400358:	4c0d      	ldr	r4, [pc, #52]	; (400390 <sysclk_init+0x58>)
  40035a:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  40035c:	2800      	cmp	r0, #0
  40035e:	d0fc      	beq.n	40035a <sysclk_init+0x22>

		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  400360:	2010      	movs	r0, #16
  400362:	4b0c      	ldr	r3, [pc, #48]	; (400394 <sysclk_init+0x5c>)
  400364:	4798      	blx	r3
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  400366:	4b0c      	ldr	r3, [pc, #48]	; (400398 <sysclk_init+0x60>)
  400368:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  40036a:	4802      	ldr	r0, [pc, #8]	; (400374 <sysclk_init+0x3c>)
  40036c:	4b02      	ldr	r3, [pc, #8]	; (400378 <sysclk_init+0x40>)
  40036e:	4798      	blx	r3
  400370:	bd10      	pop	{r4, pc}
  400372:	bf00      	nop
  400374:	05f5e100 	.word	0x05f5e100
  400378:	00400625 	.word	0x00400625
  40037c:	00400405 	.word	0x00400405
  400380:	00400451 	.word	0x00400451
  400384:	00400461 	.word	0x00400461
  400388:	20183f01 	.word	0x20183f01
  40038c:	400e0400 	.word	0x400e0400
  400390:	00400471 	.word	0x00400471
  400394:	0040039d 	.word	0x0040039d
  400398:	0040051d 	.word	0x0040051d

0040039c <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  40039c:	4a18      	ldr	r2, [pc, #96]	; (400400 <pmc_switch_mck_to_pllack+0x64>)
  40039e:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4003a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  4003a4:	4318      	orrs	r0, r3
  4003a6:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4003a8:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4003aa:	f013 0f08 	tst.w	r3, #8
  4003ae:	d003      	beq.n	4003b8 <pmc_switch_mck_to_pllack+0x1c>
  4003b0:	e009      	b.n	4003c6 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4003b2:	3b01      	subs	r3, #1
  4003b4:	d103      	bne.n	4003be <pmc_switch_mck_to_pllack+0x22>
  4003b6:	e01e      	b.n	4003f6 <pmc_switch_mck_to_pllack+0x5a>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4003b8:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4003bc:	4910      	ldr	r1, [pc, #64]	; (400400 <pmc_switch_mck_to_pllack+0x64>)
  4003be:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4003c0:	f012 0f08 	tst.w	r2, #8
  4003c4:	d0f5      	beq.n	4003b2 <pmc_switch_mck_to_pllack+0x16>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  4003c6:	4a0e      	ldr	r2, [pc, #56]	; (400400 <pmc_switch_mck_to_pllack+0x64>)
  4003c8:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4003ca:	f023 0303 	bic.w	r3, r3, #3
  4003ce:	f043 0302 	orr.w	r3, r3, #2
  4003d2:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4003d4:	6e90      	ldr	r0, [r2, #104]	; 0x68
  4003d6:	f010 0008 	ands.w	r0, r0, #8
  4003da:	d004      	beq.n	4003e6 <pmc_switch_mck_to_pllack+0x4a>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
  4003dc:	2000      	movs	r0, #0
  4003de:	4770      	bx	lr
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
  4003e0:	3b01      	subs	r3, #1
  4003e2:	d103      	bne.n	4003ec <pmc_switch_mck_to_pllack+0x50>
  4003e4:	e009      	b.n	4003fa <pmc_switch_mck_to_pllack+0x5e>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4003e6:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4003ea:	4905      	ldr	r1, [pc, #20]	; (400400 <pmc_switch_mck_to_pllack+0x64>)
  4003ec:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4003ee:	f012 0f08 	tst.w	r2, #8
  4003f2:	d0f5      	beq.n	4003e0 <pmc_switch_mck_to_pllack+0x44>
  4003f4:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  4003f6:	2001      	movs	r0, #1
  4003f8:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  4003fa:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  4003fc:	4770      	bx	lr
  4003fe:	bf00      	nop
  400400:	400e0400 	.word	0x400e0400

00400404 <pmc_switch_mainck_to_fastrc>:
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
  400404:	4b11      	ldr	r3, [pc, #68]	; (40044c <pmc_switch_mainck_to_fastrc+0x48>)
  400406:	6a1a      	ldr	r2, [r3, #32]
  400408:	f442 125c 	orr.w	r2, r2, #3604480	; 0x370000
  40040c:	f042 0208 	orr.w	r2, r2, #8
  400410:	621a      	str	r2, [r3, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  400412:	461a      	mov	r2, r3
  400414:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400416:	f413 3f00 	tst.w	r3, #131072	; 0x20000
  40041a:	d0fb      	beq.n	400414 <pmc_switch_mainck_to_fastrc+0x10>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  40041c:	4a0b      	ldr	r2, [pc, #44]	; (40044c <pmc_switch_mainck_to_fastrc+0x48>)
  40041e:	6a13      	ldr	r3, [r2, #32]
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
  400420:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  400424:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  400428:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  40042c:	4303      	orrs	r3, r0

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  40042e:	6213      	str	r3, [r2, #32]
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  400430:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400432:	f413 3f00 	tst.w	r3, #131072	; 0x20000
  400436:	d0fb      	beq.n	400430 <pmc_switch_mainck_to_fastrc+0x2c>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  400438:	4a04      	ldr	r2, [pc, #16]	; (40044c <pmc_switch_mainck_to_fastrc+0x48>)
  40043a:	6a13      	ldr	r3, [r2, #32]
  40043c:	f023 739b 	bic.w	r3, r3, #20316160	; 0x1360000
  400440:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  400444:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  400448:	6213      	str	r3, [r2, #32]
  40044a:	4770      	bx	lr
  40044c:	400e0400 	.word	0x400e0400

00400450 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  400450:	4b02      	ldr	r3, [pc, #8]	; (40045c <pmc_osc_is_ready_mainck+0xc>)
  400452:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400454:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  400458:	4770      	bx	lr
  40045a:	bf00      	nop
  40045c:	400e0400 	.word	0x400e0400

00400460 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  400460:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400464:	4b01      	ldr	r3, [pc, #4]	; (40046c <pmc_disable_pllack+0xc>)
  400466:	629a      	str	r2, [r3, #40]	; 0x28
  400468:	4770      	bx	lr
  40046a:	bf00      	nop
  40046c:	400e0400 	.word	0x400e0400

00400470 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  400470:	4b02      	ldr	r3, [pc, #8]	; (40047c <pmc_is_locked_pllack+0xc>)
  400472:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400474:	f000 0002 	and.w	r0, r0, #2
  400478:	4770      	bx	lr
  40047a:	bf00      	nop
  40047c:	400e0400 	.word	0x400e0400

00400480 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  400480:	e7fe      	b.n	400480 <Dummy_Handler>
  400482:	bf00      	nop

00400484 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  400484:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
  400486:	4b19      	ldr	r3, [pc, #100]	; (4004ec <Reset_Handler+0x68>)
  400488:	4a19      	ldr	r2, [pc, #100]	; (4004f0 <Reset_Handler+0x6c>)
  40048a:	429a      	cmp	r2, r3
  40048c:	d003      	beq.n	400496 <Reset_Handler+0x12>
		for (; pDest < &_erelocate;) {
  40048e:	4b19      	ldr	r3, [pc, #100]	; (4004f4 <Reset_Handler+0x70>)
  400490:	4a16      	ldr	r2, [pc, #88]	; (4004ec <Reset_Handler+0x68>)
  400492:	429a      	cmp	r2, r3
  400494:	d304      	bcc.n	4004a0 <Reset_Handler+0x1c>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  400496:	4b18      	ldr	r3, [pc, #96]	; (4004f8 <Reset_Handler+0x74>)
  400498:	4a18      	ldr	r2, [pc, #96]	; (4004fc <Reset_Handler+0x78>)
  40049a:	429a      	cmp	r2, r3
  40049c:	d30f      	bcc.n	4004be <Reset_Handler+0x3a>
  40049e:	e01a      	b.n	4004d6 <Reset_Handler+0x52>
  4004a0:	4912      	ldr	r1, [pc, #72]	; (4004ec <Reset_Handler+0x68>)
  4004a2:	4b17      	ldr	r3, [pc, #92]	; (400500 <Reset_Handler+0x7c>)
  4004a4:	1a5b      	subs	r3, r3, r1
  4004a6:	f023 0303 	bic.w	r3, r3, #3
  4004aa:	3304      	adds	r3, #4
  4004ac:	4a10      	ldr	r2, [pc, #64]	; (4004f0 <Reset_Handler+0x6c>)
  4004ae:	4413      	add	r3, r2
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
			*pDest++ = *pSrc++;
  4004b0:	f852 0b04 	ldr.w	r0, [r2], #4
  4004b4:	f841 0b04 	str.w	r0, [r1], #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
  4004b8:	429a      	cmp	r2, r3
  4004ba:	d1f9      	bne.n	4004b0 <Reset_Handler+0x2c>
  4004bc:	e7eb      	b.n	400496 <Reset_Handler+0x12>
  4004be:	4b11      	ldr	r3, [pc, #68]	; (400504 <Reset_Handler+0x80>)
  4004c0:	4a11      	ldr	r2, [pc, #68]	; (400508 <Reset_Handler+0x84>)
  4004c2:	1ad2      	subs	r2, r2, r3
  4004c4:	f022 0203 	bic.w	r2, r2, #3
  4004c8:	441a      	add	r2, r3
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  4004ca:	3b04      	subs	r3, #4
		*pDest++ = 0;
  4004cc:	2100      	movs	r1, #0
  4004ce:	f843 1b04 	str.w	r1, [r3], #4
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  4004d2:	4293      	cmp	r3, r2
  4004d4:	d1fb      	bne.n	4004ce <Reset_Handler+0x4a>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  4004d6:	4a0d      	ldr	r2, [pc, #52]	; (40050c <Reset_Handler+0x88>)
  4004d8:	4b0d      	ldr	r3, [pc, #52]	; (400510 <Reset_Handler+0x8c>)
  4004da:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  4004de:	6093      	str	r3, [r2, #8]

	/* Initialize the C library */
	__libc_init_array();
  4004e0:	4b0c      	ldr	r3, [pc, #48]	; (400514 <Reset_Handler+0x90>)
  4004e2:	4798      	blx	r3

	/* Branch to main function */
	main();
  4004e4:	4b0c      	ldr	r3, [pc, #48]	; (400518 <Reset_Handler+0x94>)
  4004e6:	4798      	blx	r3
  4004e8:	e7fe      	b.n	4004e8 <Reset_Handler+0x64>
  4004ea:	bf00      	nop
  4004ec:	20000000 	.word	0x20000000
  4004f0:	00400934 	.word	0x00400934
  4004f4:	20000430 	.word	0x20000430
  4004f8:	20000454 	.word	0x20000454
  4004fc:	20000430 	.word	0x20000430
  400500:	2000042f 	.word	0x2000042f
  400504:	20000434 	.word	0x20000434
  400508:	20000457 	.word	0x20000457
  40050c:	e000ed00 	.word	0xe000ed00
  400510:	00400000 	.word	0x00400000
  400514:	004007cd 	.word	0x004007cd
  400518:	00400685 	.word	0x00400685

0040051c <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) {
  40051c:	4b3a      	ldr	r3, [pc, #232]	; (400608 <SystemCoreClockUpdate+0xec>)
  40051e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400520:	f003 0303 	and.w	r3, r3, #3
  400524:	2b01      	cmp	r3, #1
  400526:	d00f      	beq.n	400548 <SystemCoreClockUpdate+0x2c>
  400528:	b113      	cbz	r3, 400530 <SystemCoreClockUpdate+0x14>
  40052a:	2b02      	cmp	r3, #2
  40052c:	d027      	beq.n	40057e <SystemCoreClockUpdate+0x62>
  40052e:	e053      	b.n	4005d8 <SystemCoreClockUpdate+0xbc>
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
  400530:	4b36      	ldr	r3, [pc, #216]	; (40060c <SystemCoreClockUpdate+0xf0>)
  400532:	695b      	ldr	r3, [r3, #20]
  400534:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
  400538:	bf14      	ite	ne
  40053a:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
  40053e:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  400542:	4b33      	ldr	r3, [pc, #204]	; (400610 <SystemCoreClockUpdate+0xf4>)
  400544:	601a      	str	r2, [r3, #0]
  400546:	e047      	b.n	4005d8 <SystemCoreClockUpdate+0xbc>
		}
		break;

	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
  400548:	4b2f      	ldr	r3, [pc, #188]	; (400608 <SystemCoreClockUpdate+0xec>)
  40054a:	6a1b      	ldr	r3, [r3, #32]
  40054c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400550:	d003      	beq.n	40055a <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
  400552:	4a30      	ldr	r2, [pc, #192]	; (400614 <SystemCoreClockUpdate+0xf8>)
  400554:	4b2e      	ldr	r3, [pc, #184]	; (400610 <SystemCoreClockUpdate+0xf4>)
  400556:	601a      	str	r2, [r3, #0]
  400558:	e03e      	b.n	4005d8 <SystemCoreClockUpdate+0xbc>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40055a:	4a2f      	ldr	r2, [pc, #188]	; (400618 <SystemCoreClockUpdate+0xfc>)
  40055c:	4b2c      	ldr	r3, [pc, #176]	; (400610 <SystemCoreClockUpdate+0xf4>)
  40055e:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
  400560:	4b29      	ldr	r3, [pc, #164]	; (400608 <SystemCoreClockUpdate+0xec>)
  400562:	6a1b      	ldr	r3, [r3, #32]
  400564:	f013 0370 	ands.w	r3, r3, #112	; 0x70
  400568:	d005      	beq.n	400576 <SystemCoreClockUpdate+0x5a>
  40056a:	2b10      	cmp	r3, #16
  40056c:	d134      	bne.n	4005d8 <SystemCoreClockUpdate+0xbc>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;

			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
  40056e:	4a2b      	ldr	r2, [pc, #172]	; (40061c <SystemCoreClockUpdate+0x100>)
  400570:	4b27      	ldr	r3, [pc, #156]	; (400610 <SystemCoreClockUpdate+0xf4>)
  400572:	601a      	str	r2, [r3, #0]
				break;
  400574:	e030      	b.n	4005d8 <SystemCoreClockUpdate+0xbc>

			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
  400576:	4a27      	ldr	r2, [pc, #156]	; (400614 <SystemCoreClockUpdate+0xf8>)
  400578:	4b25      	ldr	r3, [pc, #148]	; (400610 <SystemCoreClockUpdate+0xf4>)
  40057a:	601a      	str	r2, [r3, #0]
				break;
  40057c:	e02c      	b.n	4005d8 <SystemCoreClockUpdate+0xbc>
			}
		}
		break;

	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
  40057e:	4b22      	ldr	r3, [pc, #136]	; (400608 <SystemCoreClockUpdate+0xec>)
  400580:	6a1b      	ldr	r3, [r3, #32]
  400582:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400586:	d003      	beq.n	400590 <SystemCoreClockUpdate+0x74>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
  400588:	4a22      	ldr	r2, [pc, #136]	; (400614 <SystemCoreClockUpdate+0xf8>)
  40058a:	4b21      	ldr	r3, [pc, #132]	; (400610 <SystemCoreClockUpdate+0xf4>)
  40058c:	601a      	str	r2, [r3, #0]
  40058e:	e010      	b.n	4005b2 <SystemCoreClockUpdate+0x96>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400590:	4a21      	ldr	r2, [pc, #132]	; (400618 <SystemCoreClockUpdate+0xfc>)
  400592:	4b1f      	ldr	r3, [pc, #124]	; (400610 <SystemCoreClockUpdate+0xf4>)
  400594:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
  400596:	4b1c      	ldr	r3, [pc, #112]	; (400608 <SystemCoreClockUpdate+0xec>)
  400598:	6a1b      	ldr	r3, [r3, #32]
  40059a:	f013 0370 	ands.w	r3, r3, #112	; 0x70
  40059e:	d005      	beq.n	4005ac <SystemCoreClockUpdate+0x90>
  4005a0:	2b10      	cmp	r3, #16
  4005a2:	d106      	bne.n	4005b2 <SystemCoreClockUpdate+0x96>
				/* So the 4MHz RC selection is forbidden */
				Assert(false);
				break;

			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
  4005a4:	4a1d      	ldr	r2, [pc, #116]	; (40061c <SystemCoreClockUpdate+0x100>)
  4005a6:	4b1a      	ldr	r3, [pc, #104]	; (400610 <SystemCoreClockUpdate+0xf4>)
  4005a8:	601a      	str	r2, [r3, #0]
				break;
  4005aa:	e002      	b.n	4005b2 <SystemCoreClockUpdate+0x96>

			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
  4005ac:	4a19      	ldr	r2, [pc, #100]	; (400614 <SystemCoreClockUpdate+0xf8>)
  4005ae:	4b18      	ldr	r3, [pc, #96]	; (400610 <SystemCoreClockUpdate+0xf4>)
  4005b0:	601a      	str	r2, [r3, #0]
			default:
				break;
			}
		}

		if ((uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
  4005b2:	4b15      	ldr	r3, [pc, #84]	; (400608 <SystemCoreClockUpdate+0xec>)
  4005b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4005b6:	f003 0303 	and.w	r3, r3, #3
  4005ba:	2b02      	cmp	r3, #2
  4005bc:	d10c      	bne.n	4005d8 <SystemCoreClockUpdate+0xbc>
				PMC_MCKR_CSS_PLLA_CLK) {
			SystemCoreClock *=
					((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  4005be:	4a12      	ldr	r2, [pc, #72]	; (400608 <SystemCoreClockUpdate+0xec>)
  4005c0:	6a93      	ldr	r3, [r2, #40]	; 0x28
					>> CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  4005c2:	6a92      	ldr	r2, [r2, #40]	; 0x28
  4005c4:	4812      	ldr	r0, [pc, #72]	; (400610 <SystemCoreClockUpdate+0xf4>)
  4005c6:	f3c3 410a 	ubfx	r1, r3, #16, #11
  4005ca:	6803      	ldr	r3, [r0, #0]
  4005cc:	fb01 3303 	mla	r3, r1, r3, r3
  4005d0:	b2d2      	uxtb	r2, r2
  4005d2:	fbb3 f3f2 	udiv	r3, r3, r2
  4005d6:	6003      	str	r3, [r0, #0]

	default:
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
  4005d8:	4b0b      	ldr	r3, [pc, #44]	; (400608 <SystemCoreClockUpdate+0xec>)
  4005da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4005dc:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4005e0:	2b70      	cmp	r3, #112	; 0x70
  4005e2:	d107      	bne.n	4005f4 <SystemCoreClockUpdate+0xd8>
		SystemCoreClock /= 3U;
  4005e4:	4a0a      	ldr	r2, [pc, #40]	; (400610 <SystemCoreClockUpdate+0xf4>)
  4005e6:	6813      	ldr	r3, [r2, #0]
  4005e8:	490d      	ldr	r1, [pc, #52]	; (400620 <SystemCoreClockUpdate+0x104>)
  4005ea:	fba1 1303 	umull	r1, r3, r1, r3
  4005ee:	085b      	lsrs	r3, r3, #1
  4005f0:	6013      	str	r3, [r2, #0]
  4005f2:	4770      	bx	lr
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >>
  4005f4:	4b04      	ldr	r3, [pc, #16]	; (400608 <SystemCoreClockUpdate+0xec>)
  4005f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4005f8:	4905      	ldr	r1, [pc, #20]	; (400610 <SystemCoreClockUpdate+0xf4>)
  4005fa:	f3c3 1202 	ubfx	r2, r3, #4, #3
  4005fe:	680b      	ldr	r3, [r1, #0]
  400600:	40d3      	lsrs	r3, r2
  400602:	600b      	str	r3, [r1, #0]
  400604:	4770      	bx	lr
  400606:	bf00      	nop
  400608:	400e0400 	.word	0x400e0400
  40060c:	400e1410 	.word	0x400e1410
  400610:	20000000 	.word	0x20000000
  400614:	00b71b00 	.word	0x00b71b00
  400618:	003d0900 	.word	0x003d0900
  40061c:	007a1200 	.word	0x007a1200
  400620:	aaaaaaab 	.word	0xaaaaaaab

00400624 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
  400624:	4b0f      	ldr	r3, [pc, #60]	; (400664 <system_init_flash+0x40>)
  400626:	4298      	cmp	r0, r3
  400628:	d804      	bhi.n	400634 <system_init_flash+0x10>
		EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  40062a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  40062e:	4b0e      	ldr	r3, [pc, #56]	; (400668 <system_init_flash+0x44>)
  400630:	601a      	str	r2, [r3, #0]
  400632:	4770      	bx	lr
	} else {
		if (ul_clk < CHIP_FREQ_FWS_1) {
  400634:	4b0d      	ldr	r3, [pc, #52]	; (40066c <system_init_flash+0x48>)
  400636:	4298      	cmp	r0, r3
  400638:	d803      	bhi.n	400642 <system_init_flash+0x1e>
			EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  40063a:	4a0d      	ldr	r2, [pc, #52]	; (400670 <system_init_flash+0x4c>)
  40063c:	4b0a      	ldr	r3, [pc, #40]	; (400668 <system_init_flash+0x44>)
  40063e:	601a      	str	r2, [r3, #0]
  400640:	4770      	bx	lr
		} else {
			if (ul_clk < CHIP_FREQ_FWS_2) {
  400642:	4b0c      	ldr	r3, [pc, #48]	; (400674 <system_init_flash+0x50>)
  400644:	4298      	cmp	r0, r3
  400646:	d803      	bhi.n	400650 <system_init_flash+0x2c>
				EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  400648:	4a0b      	ldr	r2, [pc, #44]	; (400678 <system_init_flash+0x54>)
  40064a:	4b07      	ldr	r3, [pc, #28]	; (400668 <system_init_flash+0x44>)
  40064c:	601a      	str	r2, [r3, #0]
  40064e:	4770      	bx	lr
			} else {
				if (ul_clk < CHIP_FREQ_FWS_3) {
  400650:	4b0a      	ldr	r3, [pc, #40]	; (40067c <system_init_flash+0x58>)
  400652:	4298      	cmp	r0, r3
					EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  400654:	bf94      	ite	ls
  400656:	4a0a      	ldrls	r2, [pc, #40]	; (400680 <system_init_flash+0x5c>)
				} else {
					EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  400658:	f04f 2204 	movhi.w	r2, #67109888	; 0x4000400
  40065c:	4b02      	ldr	r3, [pc, #8]	; (400668 <system_init_flash+0x44>)
  40065e:	601a      	str	r2, [r3, #0]
  400660:	4770      	bx	lr
  400662:	bf00      	nop
  400664:	01312cff 	.word	0x01312cff
  400668:	400e0a00 	.word	0x400e0a00
  40066c:	026259ff 	.word	0x026259ff
  400670:	04000100 	.word	0x04000100
  400674:	039386ff 	.word	0x039386ff
  400678:	04000200 	.word	0x04000200
  40067c:	04c4b3ff 	.word	0x04c4b3ff
  400680:	04000300 	.word	0x04000300

00400684 <main>:

uint8_t count_left = 0;
uint8_t count_right = 0;

int main (void)
{
  400684:	b508      	push	{r3, lr}
	 sysclk_init();				//initialize system clock
  400686:	4b1f      	ldr	r3, [pc, #124]	; (400704 <main+0x80>)
  400688:	4798      	blx	r3
	 board_init();				//board init (currently empty)
  40068a:	4b1f      	ldr	r3, [pc, #124]	; (400708 <main+0x84>)
  40068c:	4798      	blx	r3
	 timers_init();				//initiate timer for LED on PA11
  40068e:	4b1f      	ldr	r3, [pc, #124]	; (40070c <main+0x88>)
  400690:	4798      	blx	r3
	 WDT->WDT_MR = WDT_MR_WDDIS; //disable watchdog timer
  400692:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400696:	4b1e      	ldr	r3, [pc, #120]	; (400710 <main+0x8c>)
  400698:	605a      	str	r2, [r3, #4]

	while (1)
	{
		//endless loop
		if ((Right == true) && (Left == true)){
  40069a:	4c1e      	ldr	r4, [pc, #120]	; (400714 <main+0x90>)
		if ((Right == false) && (Left == false)){
			REG_PIOA_CODR |= PIO_PER_P15;	//turn Left LED ON
			REG_PIOA_CODR |= PIO_PER_P16;	//turn Right LED ON
		}
		else if (Left == true){
			REG_PIOA_SODR |= PIO_PER_P15;	//turn Left LED ON
  40069c:	4a1e      	ldr	r2, [pc, #120]	; (400718 <main+0x94>)
			REG_PIOA_CODR |= PIO_PER_P16;	//turn Right LED Off
  40069e:	f2a3 631c 	subw	r3, r3, #1564	; 0x61c
		//endless loop
		if ((Right == true) && (Left == true)){
			REG_PIOA_SODR |= PIO_PER_P15;	//turn Left LED ON
			REG_PIOA_SODR |= PIO_PER_P16;	//turn Right LED ON
		}
		if ((Right == false) && (Left == false)){
  4006a2:	481e      	ldr	r0, [pc, #120]	; (40071c <main+0x98>)
	 WDT->WDT_MR = WDT_MR_WDDIS; //disable watchdog timer

	while (1)
	{
		//endless loop
		if ((Right == true) && (Left == true)){
  4006a4:	7821      	ldrb	r1, [r4, #0]
  4006a6:	b159      	cbz	r1, 4006c0 <main+0x3c>
  4006a8:	7801      	ldrb	r1, [r0, #0]
  4006aa:	b1e9      	cbz	r1, 4006e8 <main+0x64>
			REG_PIOA_SODR |= PIO_PER_P15;	//turn Left LED ON
  4006ac:	6811      	ldr	r1, [r2, #0]
  4006ae:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
  4006b2:	6011      	str	r1, [r2, #0]
			REG_PIOA_SODR |= PIO_PER_P16;	//turn Right LED ON
  4006b4:	6811      	ldr	r1, [r2, #0]
  4006b6:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
  4006ba:	6011      	str	r1, [r2, #0]
		}
		if ((Right == false) && (Left == false)){
  4006bc:	7821      	ldrb	r1, [r4, #0]
  4006be:	b9e1      	cbnz	r1, 4006fa <main+0x76>
  4006c0:	7801      	ldrb	r1, [r0, #0]
  4006c2:	b941      	cbnz	r1, 4006d6 <main+0x52>
			REG_PIOA_CODR |= PIO_PER_P15;	//turn Left LED ON
  4006c4:	6819      	ldr	r1, [r3, #0]
  4006c6:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
  4006ca:	6019      	str	r1, [r3, #0]
			REG_PIOA_CODR |= PIO_PER_P16;	//turn Right LED ON
  4006cc:	6819      	ldr	r1, [r3, #0]
  4006ce:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
  4006d2:	6019      	str	r1, [r3, #0]
  4006d4:	e7e6      	b.n	4006a4 <main+0x20>
		}
		else if (Left == true){
			REG_PIOA_SODR |= PIO_PER_P15;	//turn Left LED ON
  4006d6:	6811      	ldr	r1, [r2, #0]
  4006d8:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
  4006dc:	6011      	str	r1, [r2, #0]
			REG_PIOA_CODR |= PIO_PER_P16;	//turn Right LED Off
  4006de:	6819      	ldr	r1, [r3, #0]
  4006e0:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
  4006e4:	6019      	str	r1, [r3, #0]
  4006e6:	e7dd      	b.n	4006a4 <main+0x20>
		}
		else if (Right == true){
			REG_PIOA_CODR |= PIO_PER_P15;	//turn Left LED Off
  4006e8:	6819      	ldr	r1, [r3, #0]
  4006ea:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
  4006ee:	6019      	str	r1, [r3, #0]
			REG_PIOA_SODR |= PIO_PER_P16;	//turn Right LED ON
  4006f0:	6811      	ldr	r1, [r2, #0]
  4006f2:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
  4006f6:	6011      	str	r1, [r2, #0]
  4006f8:	e7d4      	b.n	4006a4 <main+0x20>
		}
		if ((Right == false) && (Left == false)){
			REG_PIOA_CODR |= PIO_PER_P15;	//turn Left LED ON
			REG_PIOA_CODR |= PIO_PER_P16;	//turn Right LED ON
		}
		else if (Left == true){
  4006fa:	7801      	ldrb	r1, [r0, #0]
  4006fc:	2900      	cmp	r1, #0
  4006fe:	d0f3      	beq.n	4006e8 <main+0x64>
  400700:	e7e9      	b.n	4006d6 <main+0x52>
  400702:	bf00      	nop
  400704:	00400339 	.word	0x00400339
  400708:	00400325 	.word	0x00400325
  40070c:	0040011d 	.word	0x0040011d
  400710:	400e1450 	.word	0x400e1450
  400714:	2000044d 	.word	0x2000044d
  400718:	400e0e30 	.word	0x400e0e30
  40071c:	20000450 	.word	0x20000450

00400720 <PIOA_Handler>:
}

//turn LED ON/OFF when interrupt triggered on PA12
void PIOA_Handler(void){

	uint32_t status = REG_PIOA_ISR;	//read PIOA interrupt status & clear interrupt flags
  400720:	4b22      	ldr	r3, [pc, #136]	; (4007ac <PIOA_Handler+0x8c>)
  400722:	681b      	ldr	r3, [r3, #0]

	if ((status & PIO_ISR_P12)){	//check if Encoder Button was pressed
  400724:	f413 5f80 	tst.w	r3, #4096	; 0x1000
  400728:	d00b      	beq.n	400742 <PIOA_Handler+0x22>
		//check if PA11 is HIGH or LOW
				if ( (REG_PIOA_PDSR & PIO_ODSR_P12) >= 1){	//if PA12 is HIGH
  40072a:	4b21      	ldr	r3, [pc, #132]	; (4007b0 <PIOA_Handler+0x90>)
  40072c:	681b      	ldr	r3, [r3, #0]
  40072e:	f413 5f80 	tst.w	r3, #4096	; 0x1000
					Right = false;
  400732:	bf14      	ite	ne
  400734:	2300      	movne	r3, #0
					Left = false;
				}
				else{
					Right = true;
  400736:	2301      	moveq	r3, #1
  400738:	4a1e      	ldr	r2, [pc, #120]	; (4007b4 <PIOA_Handler+0x94>)
  40073a:	7013      	strb	r3, [r2, #0]
					Left = true;
  40073c:	4a1e      	ldr	r2, [pc, #120]	; (4007b8 <PIOA_Handler+0x98>)
  40073e:	7013      	strb	r3, [r2, #0]
  400740:	4770      	bx	lr
		}
	}
}

//turn LED ON/OFF when interrupt triggered on PA12
void PIOA_Handler(void){
  400742:	b410      	push	{r4}
	}

 	else {	//  handle Encoder signal inputs

		//read Encoder input A
		bool A_in = REG_PIOA_PDSR & PIO_ODSR_P13;
  400744:	4a1a      	ldr	r2, [pc, #104]	; (4007b0 <PIOA_Handler+0x90>)
  400746:	6813      	ldr	r3, [r2, #0]
		//read Encoder input B
		bool B_in = REG_PIOA_PDSR & PIO_ODSR_P14;
  400748:	6812      	ldr	r2, [r2, #0]

		A_seq = A_seq << 1;
		A_seq |= A_in;

		B_seq = B_seq << 1;
  40074a:	491c      	ldr	r1, [pc, #112]	; (4007bc <PIOA_Handler+0x9c>)
		B_seq |= B_in;
  40074c:	7808      	ldrb	r0, [r1, #0]
  40074e:	f3c2 3280 	ubfx	r2, r2, #14, #1
  400752:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
		//read Encoder input A
		bool A_in = REG_PIOA_PDSR & PIO_ODSR_P13;
		//read Encoder input B
		bool B_in = REG_PIOA_PDSR & PIO_ODSR_P14;

		A_seq = A_seq << 1;
  400756:	481a      	ldr	r0, [pc, #104]	; (4007c0 <PIOA_Handler+0xa0>)
		A_seq |= A_in;

		B_seq = B_seq << 1;
		B_seq |= B_in;

		A_seq &= 0b00001111;
  400758:	7804      	ldrb	r4, [r0, #0]
  40075a:	f3c3 3340 	ubfx	r3, r3, #13, #1
  40075e:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
  400762:	f003 030f 	and.w	r3, r3, #15
  400766:	7003      	strb	r3, [r0, #0]
		B_seq &= 0b00001111;
  400768:	f002 020f 	and.w	r2, r2, #15
  40076c:	700a      	strb	r2, [r1, #0]

		if ((A_seq == 0b00001001) && (B_seq == 0b00000011)){
  40076e:	2b09      	cmp	r3, #9
  400770:	d10c      	bne.n	40078c <PIOA_Handler+0x6c>
  400772:	2a03      	cmp	r2, #3
  400774:	d118      	bne.n	4007a8 <PIOA_Handler+0x88>
			Left = false;
  400776:	2200      	movs	r2, #0
  400778:	4b0f      	ldr	r3, [pc, #60]	; (4007b8 <PIOA_Handler+0x98>)
  40077a:	701a      	strb	r2, [r3, #0]
			Right = true;
  40077c:	2201      	movs	r2, #1
  40077e:	4b0d      	ldr	r3, [pc, #52]	; (4007b4 <PIOA_Handler+0x94>)
  400780:	701a      	strb	r2, [r3, #0]
			count_right++;
  400782:	4a10      	ldr	r2, [pc, #64]	; (4007c4 <PIOA_Handler+0xa4>)
  400784:	7813      	ldrb	r3, [r2, #0]
  400786:	3301      	adds	r3, #1
  400788:	7013      	strb	r3, [r2, #0]
  40078a:	e00d      	b.n	4007a8 <PIOA_Handler+0x88>
		}

		else if ((A_seq == 0b00000011) && (B_seq == 0b00001001)){
  40078c:	2b03      	cmp	r3, #3
  40078e:	d10b      	bne.n	4007a8 <PIOA_Handler+0x88>
  400790:	2a09      	cmp	r2, #9
  400792:	d109      	bne.n	4007a8 <PIOA_Handler+0x88>
			Left = true;
  400794:	2201      	movs	r2, #1
  400796:	4b08      	ldr	r3, [pc, #32]	; (4007b8 <PIOA_Handler+0x98>)
  400798:	701a      	strb	r2, [r3, #0]
			Right = false;
  40079a:	2200      	movs	r2, #0
  40079c:	4b05      	ldr	r3, [pc, #20]	; (4007b4 <PIOA_Handler+0x94>)
  40079e:	701a      	strb	r2, [r3, #0]
			count_left++;
  4007a0:	4a09      	ldr	r2, [pc, #36]	; (4007c8 <PIOA_Handler+0xa8>)
  4007a2:	7813      	ldrb	r3, [r2, #0]
  4007a4:	3301      	adds	r3, #1
  4007a6:	7013      	strb	r3, [r2, #0]
// 			count_left++;
// 		}

	}

}
  4007a8:	bc10      	pop	{r4}
  4007aa:	4770      	bx	lr
  4007ac:	400e0e4c 	.word	0x400e0e4c
  4007b0:	400e0e3c 	.word	0x400e0e3c
  4007b4:	2000044d 	.word	0x2000044d
  4007b8:	20000450 	.word	0x20000450
  4007bc:	2000044f 	.word	0x2000044f
  4007c0:	2000044e 	.word	0x2000044e
  4007c4:	2000044c 	.word	0x2000044c
  4007c8:	20000451 	.word	0x20000451

004007cc <__libc_init_array>:
  4007cc:	b570      	push	{r4, r5, r6, lr}
  4007ce:	4e0f      	ldr	r6, [pc, #60]	; (40080c <__libc_init_array+0x40>)
  4007d0:	4d0f      	ldr	r5, [pc, #60]	; (400810 <__libc_init_array+0x44>)
  4007d2:	1b76      	subs	r6, r6, r5
  4007d4:	10b6      	asrs	r6, r6, #2
  4007d6:	bf18      	it	ne
  4007d8:	2400      	movne	r4, #0
  4007da:	d005      	beq.n	4007e8 <__libc_init_array+0x1c>
  4007dc:	3401      	adds	r4, #1
  4007de:	f855 3b04 	ldr.w	r3, [r5], #4
  4007e2:	4798      	blx	r3
  4007e4:	42a6      	cmp	r6, r4
  4007e6:	d1f9      	bne.n	4007dc <__libc_init_array+0x10>
  4007e8:	4e0a      	ldr	r6, [pc, #40]	; (400814 <__libc_init_array+0x48>)
  4007ea:	4d0b      	ldr	r5, [pc, #44]	; (400818 <__libc_init_array+0x4c>)
  4007ec:	1b76      	subs	r6, r6, r5
  4007ee:	f000 f88f 	bl	400910 <_init>
  4007f2:	10b6      	asrs	r6, r6, #2
  4007f4:	bf18      	it	ne
  4007f6:	2400      	movne	r4, #0
  4007f8:	d006      	beq.n	400808 <__libc_init_array+0x3c>
  4007fa:	3401      	adds	r4, #1
  4007fc:	f855 3b04 	ldr.w	r3, [r5], #4
  400800:	4798      	blx	r3
  400802:	42a6      	cmp	r6, r4
  400804:	d1f9      	bne.n	4007fa <__libc_init_array+0x2e>
  400806:	bd70      	pop	{r4, r5, r6, pc}
  400808:	bd70      	pop	{r4, r5, r6, pc}
  40080a:	bf00      	nop
  40080c:	0040091c 	.word	0x0040091c
  400810:	0040091c 	.word	0x0040091c
  400814:	00400924 	.word	0x00400924
  400818:	0040091c 	.word	0x0040091c

0040081c <register_fini>:
  40081c:	4b02      	ldr	r3, [pc, #8]	; (400828 <register_fini+0xc>)
  40081e:	b113      	cbz	r3, 400826 <register_fini+0xa>
  400820:	4802      	ldr	r0, [pc, #8]	; (40082c <register_fini+0x10>)
  400822:	f000 b805 	b.w	400830 <atexit>
  400826:	4770      	bx	lr
  400828:	00000000 	.word	0x00000000
  40082c:	0040083d 	.word	0x0040083d

00400830 <atexit>:
  400830:	2300      	movs	r3, #0
  400832:	4601      	mov	r1, r0
  400834:	461a      	mov	r2, r3
  400836:	4618      	mov	r0, r3
  400838:	f000 b814 	b.w	400864 <__register_exitproc>

0040083c <__libc_fini_array>:
  40083c:	b538      	push	{r3, r4, r5, lr}
  40083e:	4d07      	ldr	r5, [pc, #28]	; (40085c <__libc_fini_array+0x20>)
  400840:	4c07      	ldr	r4, [pc, #28]	; (400860 <__libc_fini_array+0x24>)
  400842:	1b2c      	subs	r4, r5, r4
  400844:	10a4      	asrs	r4, r4, #2
  400846:	d005      	beq.n	400854 <__libc_fini_array+0x18>
  400848:	3c01      	subs	r4, #1
  40084a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  40084e:	4798      	blx	r3
  400850:	2c00      	cmp	r4, #0
  400852:	d1f9      	bne.n	400848 <__libc_fini_array+0xc>
  400854:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  400858:	f000 b864 	b.w	400924 <_fini>
  40085c:	00400934 	.word	0x00400934
  400860:	00400930 	.word	0x00400930

00400864 <__register_exitproc>:
  400864:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  400868:	4c25      	ldr	r4, [pc, #148]	; (400900 <__register_exitproc+0x9c>)
  40086a:	6825      	ldr	r5, [r4, #0]
  40086c:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
  400870:	4606      	mov	r6, r0
  400872:	4688      	mov	r8, r1
  400874:	4692      	mov	sl, r2
  400876:	4699      	mov	r9, r3
  400878:	b3c4      	cbz	r4, 4008ec <__register_exitproc+0x88>
  40087a:	6860      	ldr	r0, [r4, #4]
  40087c:	281f      	cmp	r0, #31
  40087e:	dc17      	bgt.n	4008b0 <__register_exitproc+0x4c>
  400880:	1c43      	adds	r3, r0, #1
  400882:	b176      	cbz	r6, 4008a2 <__register_exitproc+0x3e>
  400884:	eb04 0580 	add.w	r5, r4, r0, lsl #2
  400888:	2201      	movs	r2, #1
  40088a:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
  40088e:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
  400892:	4082      	lsls	r2, r0
  400894:	4311      	orrs	r1, r2
  400896:	2e02      	cmp	r6, #2
  400898:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
  40089c:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
  4008a0:	d01e      	beq.n	4008e0 <__register_exitproc+0x7c>
  4008a2:	3002      	adds	r0, #2
  4008a4:	6063      	str	r3, [r4, #4]
  4008a6:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
  4008aa:	2000      	movs	r0, #0
  4008ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4008b0:	4b14      	ldr	r3, [pc, #80]	; (400904 <__register_exitproc+0xa0>)
  4008b2:	b303      	cbz	r3, 4008f6 <__register_exitproc+0x92>
  4008b4:	f44f 70c8 	mov.w	r0, #400	; 0x190
  4008b8:	f3af 8000 	nop.w
  4008bc:	4604      	mov	r4, r0
  4008be:	b1d0      	cbz	r0, 4008f6 <__register_exitproc+0x92>
  4008c0:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
  4008c4:	2700      	movs	r7, #0
  4008c6:	e880 0088 	stmia.w	r0, {r3, r7}
  4008ca:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  4008ce:	4638      	mov	r0, r7
  4008d0:	2301      	movs	r3, #1
  4008d2:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  4008d6:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
  4008da:	2e00      	cmp	r6, #0
  4008dc:	d0e1      	beq.n	4008a2 <__register_exitproc+0x3e>
  4008de:	e7d1      	b.n	400884 <__register_exitproc+0x20>
  4008e0:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
  4008e4:	430a      	orrs	r2, r1
  4008e6:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  4008ea:	e7da      	b.n	4008a2 <__register_exitproc+0x3e>
  4008ec:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
  4008f0:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  4008f4:	e7c1      	b.n	40087a <__register_exitproc+0x16>
  4008f6:	f04f 30ff 	mov.w	r0, #4294967295
  4008fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4008fe:	bf00      	nop
  400900:	0040090c 	.word	0x0040090c
  400904:	00000000 	.word	0x00000000
  400908:	00000043 	.word	0x00000043

0040090c <_global_impure_ptr>:
  40090c:	20000008                                ... 

00400910 <_init>:
  400910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400912:	bf00      	nop
  400914:	bcf8      	pop	{r3, r4, r5, r6, r7}
  400916:	bc08      	pop	{r3}
  400918:	469e      	mov	lr, r3
  40091a:	4770      	bx	lr

0040091c <__init_array_start>:
  40091c:	0040081d 	.word	0x0040081d

00400920 <__frame_dummy_init_array_entry>:
  400920:	004000e5                                ..@.

00400924 <_fini>:
  400924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400926:	bf00      	nop
  400928:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40092a:	bc08      	pop	{r3}
  40092c:	469e      	mov	lr, r3
  40092e:	4770      	bx	lr

00400930 <__fini_array_start>:
  400930:	004000c1 	.word	0x004000c1
