
gatorsynth_sequencer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b98  00400000  00400000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000440  20000000  00400b98  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  2 .bss          00000020  20000440  00400fd8  00020440  2**2
                  ALLOC
  3 .stack        00003000  20000460  00400ff8  00020440  2**0
                  ALLOC
  4 .ARM.attributes 0000002a  00000000  00000000  00020440  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0002046a  2**0
                  CONTENTS, READONLY
  6 .debug_info   00003383  00000000  00000000  000204c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d7e  00000000  00000000  00023846  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000fd4  00000000  00000000  000245c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000348  00000000  00000000  00025598  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000002a8  00000000  00000000  000258e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0000dc36  00000000  00000000  00025b88  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00006e63  00000000  00000000  000337be  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0003bc1b  00000000  00000000  0003a621  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000708  00000000  00000000  0007623c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <_sfixed>:
  400000:	20003460 	.word	0x20003460
  400004:	004005bd 	.word	0x004005bd
  400008:	004005b9 	.word	0x004005b9
  40000c:	004005b9 	.word	0x004005b9
  400010:	004005b9 	.word	0x004005b9
  400014:	004005b9 	.word	0x004005b9
  400018:	004005b9 	.word	0x004005b9
	...
  40002c:	004005b9 	.word	0x004005b9
  400030:	004005b9 	.word	0x004005b9
  400034:	00000000 	.word	0x00000000
  400038:	004005b9 	.word	0x004005b9
  40003c:	004005b9 	.word	0x004005b9
  400040:	004005b9 	.word	0x004005b9
  400044:	004005b9 	.word	0x004005b9
  400048:	004005b9 	.word	0x004005b9
  40004c:	004005b9 	.word	0x004005b9
  400050:	004005b9 	.word	0x004005b9
  400054:	004005b9 	.word	0x004005b9
  400058:	004005b9 	.word	0x004005b9
  40005c:	00000000 	.word	0x00000000
  400060:	004005b9 	.word	0x004005b9
  400064:	004005b9 	.word	0x004005b9
  400068:	004005b9 	.word	0x004005b9
  40006c:	004008c5 	.word	0x004008c5
  400070:	004005b9 	.word	0x004005b9
  400074:	004005b9 	.word	0x004005b9
  400078:	004005b9 	.word	0x004005b9
  40007c:	004005b9 	.word	0x004005b9
  400080:	004005b9 	.word	0x004005b9
  400084:	004005b9 	.word	0x004005b9
  400088:	00000000 	.word	0x00000000
  40008c:	004005b9 	.word	0x004005b9
  400090:	004005b9 	.word	0x004005b9
  400094:	004005b9 	.word	0x004005b9
  400098:	004005b9 	.word	0x004005b9
  40009c:	004002ad 	.word	0x004002ad
  4000a0:	004005b9 	.word	0x004005b9
  4000a4:	004005b9 	.word	0x004005b9
  4000a8:	004005b9 	.word	0x004005b9
  4000ac:	004005b9 	.word	0x004005b9
  4000b0:	004005b9 	.word	0x004005b9
  4000b4:	004005b9 	.word	0x004005b9
  4000b8:	004005b9 	.word	0x004005b9
  4000bc:	004005b9 	.word	0x004005b9

004000c0 <__do_global_dtors_aux>:
  4000c0:	b510      	push	{r4, lr}
  4000c2:	4c05      	ldr	r4, [pc, #20]	; (4000d8 <__do_global_dtors_aux+0x18>)
  4000c4:	7823      	ldrb	r3, [r4, #0]
  4000c6:	b933      	cbnz	r3, 4000d6 <__do_global_dtors_aux+0x16>
  4000c8:	4b04      	ldr	r3, [pc, #16]	; (4000dc <__do_global_dtors_aux+0x1c>)
  4000ca:	b113      	cbz	r3, 4000d2 <__do_global_dtors_aux+0x12>
  4000cc:	4804      	ldr	r0, [pc, #16]	; (4000e0 <__do_global_dtors_aux+0x20>)
  4000ce:	f3af 8000 	nop.w
  4000d2:	2301      	movs	r3, #1
  4000d4:	7023      	strb	r3, [r4, #0]
  4000d6:	bd10      	pop	{r4, pc}
  4000d8:	20000440 	.word	0x20000440
  4000dc:	00000000 	.word	0x00000000
  4000e0:	00400b98 	.word	0x00400b98

004000e4 <frame_dummy>:
  4000e4:	4b08      	ldr	r3, [pc, #32]	; (400108 <frame_dummy+0x24>)
  4000e6:	b510      	push	{r4, lr}
  4000e8:	b11b      	cbz	r3, 4000f2 <frame_dummy+0xe>
  4000ea:	4908      	ldr	r1, [pc, #32]	; (40010c <frame_dummy+0x28>)
  4000ec:	4808      	ldr	r0, [pc, #32]	; (400110 <frame_dummy+0x2c>)
  4000ee:	f3af 8000 	nop.w
  4000f2:	4808      	ldr	r0, [pc, #32]	; (400114 <frame_dummy+0x30>)
  4000f4:	6803      	ldr	r3, [r0, #0]
  4000f6:	b903      	cbnz	r3, 4000fa <frame_dummy+0x16>
  4000f8:	bd10      	pop	{r4, pc}
  4000fa:	4b07      	ldr	r3, [pc, #28]	; (400118 <frame_dummy+0x34>)
  4000fc:	2b00      	cmp	r3, #0
  4000fe:	d0fb      	beq.n	4000f8 <frame_dummy+0x14>
  400100:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400104:	4718      	bx	r3
  400106:	bf00      	nop
  400108:	00000000 	.word	0x00000000
  40010c:	20000444 	.word	0x20000444
  400110:	00400b98 	.word	0x00400b98
  400114:	00400b98 	.word	0x00400b98
  400118:	00000000 	.word	0x00000000

0040011c <SPI_modeSelect>:
    Mode0		0		1
    Mode1		0		0
    Mode2		1		1
    Mode3		1		0
    */
    if (mode == 0){
  40011c:	b948      	cbnz	r0, 400132 <SPI_modeSelect+0x16>
        REG_SPI_CSR &= ~SPI_CSR_CPOL;
  40011e:	4b17      	ldr	r3, [pc, #92]	; (40017c <SPI_modeSelect+0x60>)
  400120:	681a      	ldr	r2, [r3, #0]
  400122:	f022 0201 	bic.w	r2, r2, #1
  400126:	601a      	str	r2, [r3, #0]
        REG_SPI_CSR |= SPI_CSR_NCPHA;
  400128:	681a      	ldr	r2, [r3, #0]
  40012a:	f042 0202 	orr.w	r2, r2, #2
  40012e:	601a      	str	r2, [r3, #0]
  400130:	4770      	bx	lr
    }
    else if (mode == 1){
  400132:	2801      	cmp	r0, #1
  400134:	d109      	bne.n	40014a <SPI_modeSelect+0x2e>
        REG_SPI_CSR &= ~SPI_CSR_CPOL;
  400136:	4b11      	ldr	r3, [pc, #68]	; (40017c <SPI_modeSelect+0x60>)
  400138:	681a      	ldr	r2, [r3, #0]
  40013a:	f022 0201 	bic.w	r2, r2, #1
  40013e:	601a      	str	r2, [r3, #0]
        REG_SPI_CSR &= ~SPI_CSR_NCPHA;
  400140:	681a      	ldr	r2, [r3, #0]
  400142:	f022 0202 	bic.w	r2, r2, #2
  400146:	601a      	str	r2, [r3, #0]
  400148:	4770      	bx	lr
    }
    else if (mode == 2){
  40014a:	2802      	cmp	r0, #2
  40014c:	d109      	bne.n	400162 <SPI_modeSelect+0x46>
        REG_SPI_CSR |= SPI_CSR_CPOL;
  40014e:	4b0b      	ldr	r3, [pc, #44]	; (40017c <SPI_modeSelect+0x60>)
  400150:	681a      	ldr	r2, [r3, #0]
  400152:	f042 0201 	orr.w	r2, r2, #1
  400156:	601a      	str	r2, [r3, #0]
        REG_SPI_CSR |= SPI_CSR_NCPHA;
  400158:	681a      	ldr	r2, [r3, #0]
  40015a:	f042 0202 	orr.w	r2, r2, #2
  40015e:	601a      	str	r2, [r3, #0]
  400160:	4770      	bx	lr
    }
    else if (mode == 3){
  400162:	2803      	cmp	r0, #3
  400164:	d108      	bne.n	400178 <SPI_modeSelect+0x5c>
        REG_SPI_CSR |= SPI_CSR_CPOL;
  400166:	4b05      	ldr	r3, [pc, #20]	; (40017c <SPI_modeSelect+0x60>)
  400168:	681a      	ldr	r2, [r3, #0]
  40016a:	f042 0201 	orr.w	r2, r2, #1
  40016e:	601a      	str	r2, [r3, #0]
        REG_SPI_CSR &= ~SPI_CSR_NCPHA;
  400170:	681a      	ldr	r2, [r3, #0]
  400172:	f022 0202 	bic.w	r2, r2, #2
  400176:	601a      	str	r2, [r3, #0]
  400178:	4770      	bx	lr
  40017a:	bf00      	nop
  40017c:	40008030 	.word	0x40008030

00400180 <SPI_init>:
    }
}

void SPI_init(){
  400180:	b508      	push	{r3, lr}


	//enable peripheral clock
	REG_PMC_PCER0 |= PMC_PCER0_PID21;
  400182:	4a18      	ldr	r2, [pc, #96]	; (4001e4 <SPI_init+0x64>)
  400184:	6813      	ldr	r3, [r2, #0]
  400186:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
  40018a:	6013      	str	r3, [r2, #0]
	//set spi master mode
	REG_SPI_MR |= SPI_MR_MSTR;
  40018c:	4b16      	ldr	r3, [pc, #88]	; (4001e8 <SPI_init+0x68>)
  40018e:	681a      	ldr	r2, [r3, #0]
  400190:	f042 0201 	orr.w	r2, r2, #1
  400194:	601a      	str	r2, [r3, #0]
	//set fixed peripheral select(peripheral chosen in SP_MR.PCS instead of SPI_THR.PCS)
	REG_SPI_MR &= ~SPI_MR_PS;
  400196:	681a      	ldr	r2, [r3, #0]
  400198:	f022 0202 	bic.w	r2, r2, #2
  40019c:	601a      	str	r2, [r3, #0]
	//set polarity and clock phase to rising edge sample, falling edge shift
	SPI_modeSelect(0);
  40019e:	2000      	movs	r0, #0
  4001a0:	4b12      	ldr	r3, [pc, #72]	; (4001ec <SPI_init+0x6c>)
  4001a2:	4798      	blx	r3
	//set clock generator (1 = peripheral clock rate), otherwise a divisor
	//SCBR = fperipheral clock / SPCK Bit Rate
	REG_SPI_CSR |= SPI_CSR_SCBR(5);
  4001a4:	4b12      	ldr	r3, [pc, #72]	; (4001f0 <SPI_init+0x70>)
  4001a6:	681a      	ldr	r2, [r3, #0]
  4001a8:	f442 62a0 	orr.w	r2, r2, #1280	; 0x500
  4001ac:	601a      	str	r2, [r3, #0]
	//chip select remains low after transfer
	REG_SPI_CSR |= SPI_CSR_CSNAAT;
  4001ae:	681a      	ldr	r2, [r3, #0]
  4001b0:	f042 0204 	orr.w	r2, r2, #4
  4001b4:	601a      	str	r2, [r3, #0]
	//give peripheral control of pins (Chip select pins are optional)
	REG_PIOA_PDR |= PIO_PDR_P11; //NPCS0
  4001b6:	f503 2358 	add.w	r3, r3, #884736	; 0xd8000
  4001ba:	f603 53d4 	addw	r3, r3, #3540	; 0xdd4
  4001be:	681a      	ldr	r2, [r3, #0]
  4001c0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
  4001c4:	601a      	str	r2, [r3, #0]
	//REG_PIOA_PDR |= PIO_PDR_P31; //NPCS1
	//REG_PIOA_PDR |= PIO_PDR_P12; //MISO
	REG_PIOA_PDR |= PIO_PDR_P13; //MOSI
  4001c6:	681a      	ldr	r2, [r3, #0]
  4001c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  4001cc:	601a      	str	r2, [r3, #0]
	REG_PIOA_PDR |= PIO_PDR_P14; //SSCK
  4001ce:	681a      	ldr	r2, [r3, #0]
  4001d0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
  4001d4:	601a      	str	r2, [r3, #0]
	//enable SPI
	REG_SPI_CR |= SPI_CR_SPIEN;
  4001d6:	4a07      	ldr	r2, [pc, #28]	; (4001f4 <SPI_init+0x74>)
  4001d8:	6813      	ldr	r3, [r2, #0]
  4001da:	f043 0301 	orr.w	r3, r3, #1
  4001de:	6013      	str	r3, [r2, #0]
  4001e0:	bd08      	pop	{r3, pc}
  4001e2:	bf00      	nop
  4001e4:	400e0410 	.word	0x400e0410
  4001e8:	40008004 	.word	0x40008004
  4001ec:	0040011d 	.word	0x0040011d
  4001f0:	40008030 	.word	0x40008030
  4001f4:	40008000 	.word	0x40008000

004001f8 <SPI_byteSend>:

}

void SPI_byteSend(uint8_t data){
	//wait for transmit register to be empty
	while (!(REG_SPI_SR & SPI_SR_TDRE));
  4001f8:	4a04      	ldr	r2, [pc, #16]	; (40020c <SPI_byteSend+0x14>)
  4001fa:	6813      	ldr	r3, [r2, #0]
  4001fc:	f013 0f02 	tst.w	r3, #2
  400200:	d0fb      	beq.n	4001fa <SPI_byteSend+0x2>
	//send data to transmit register
	REG_SPI_TDR |= (data);
  400202:	4a03      	ldr	r2, [pc, #12]	; (400210 <SPI_byteSend+0x18>)
  400204:	6813      	ldr	r3, [r2, #0]
  400206:	4318      	orrs	r0, r3
  400208:	6010      	str	r0, [r2, #0]
  40020a:	4770      	bx	lr
  40020c:	40008010 	.word	0x40008010
  400210:	4000800c 	.word	0x4000800c

00400214 <timers_init>:
 #include <stdbool.h>
 #include "timers.h"

 void timers_init(void) {

	overflow_count = 0;
  400214:	2200      	movs	r2, #0
  400216:	4b17      	ldr	r3, [pc, #92]	; (400274 <timers_init+0x60>)
  400218:	801a      	strh	r2, [r3, #0]
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  40021a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  40021e:	4b16      	ldr	r3, [pc, #88]	; (400278 <timers_init+0x64>)
  400220:	601a      	str	r2, [r3, #0]

	NVIC_EnableIRQ(TC0_IRQn);

	// Enable peripheral clock for TC0
	// Peripheral ID (PID) for TC0 is 23
	REG_PMC_PCER0 |= PMC_PCER0_PID23;
  400222:	4a16      	ldr	r2, [pc, #88]	; (40027c <timers_init+0x68>)
  400224:	6813      	ldr	r3, [r2, #0]
  400226:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
  40022a:	6013      	str	r3, [r2, #0]
	// TIMER_CLOCK1 = MCK/2
	// TIMER_CLOCK2 = MCK/8
	// TIMER_CLOCK3 = MCK/32
	// TIMER_CLOCK4 = MCK/128
	// TIMER_CLOCK5 = SCLK
	REG_TC0_CMR0 |= TC_CMR_TCCLKS_TIMER_CLOCK2 | TC_CMR_CPCTRG;
  40022c:	4914      	ldr	r1, [pc, #80]	; (400280 <timers_init+0x6c>)
  40022e:	680b      	ldr	r3, [r1, #0]
  400230:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  400234:	f043 0301 	orr.w	r3, r3, #1
  400238:	600b      	str	r3, [r1, #0]
	// Set interrupt on compare to RC value
	REG_TC0_IER0 |= TC_IER_CPCS;
  40023a:	3120      	adds	r1, #32
  40023c:	680b      	ldr	r3, [r1, #0]
  40023e:	f043 0310 	orr.w	r3, r3, #16
  400242:	600b      	str	r3, [r1, #0]
// 	// 60 BPM = 1 Hz. SCK = 32 KHz. 16,000 counts per half second, 2 interrupts per cycle
// 	REG_TC0_RC0 = 16000;

	// 60 BPM = 1 Hz. MCK/8 = 12.5 MHz. 6.25 mil counts per half second, 2 interrupts per cycle
	// Anticipating 5000 overflows (5000*1250 is 6.25 mil)
	REG_TC0_RC0 = 1250;
  400244:	f240 41e2 	movw	r1, #1250	; 0x4e2
  400248:	4b0e      	ldr	r3, [pc, #56]	; (400284 <timers_init+0x70>)
  40024a:	6019      	str	r1, [r3, #0]

	// For the interrupt
	REG_PIOA_PER |= PIO_PER_P20; //enable PIO controller on PA11
  40024c:	490e      	ldr	r1, [pc, #56]	; (400288 <timers_init+0x74>)
  40024e:	680b      	ldr	r3, [r1, #0]
  400250:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  400254:	600b      	str	r3, [r1, #0]
	REG_PIOA_OER |= PIO_PER_P20; //enable output on pin PA11
  400256:	3110      	adds	r1, #16
  400258:	680b      	ldr	r3, [r1, #0]
  40025a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  40025e:	600b      	str	r3, [r1, #0]
	REG_PMC_PCER0 |= PMC_PCER0_PID11; //Enable PMC control for PA11
  400260:	6813      	ldr	r3, [r2, #0]
  400262:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  400266:	6013      	str	r3, [r2, #0]

	// TC0 control register enables timer and triggers it to start
	REG_TC0_CCR0 |= TC_CCR_CLKEN | TC_CCR_SWTRG;
  400268:	4a08      	ldr	r2, [pc, #32]	; (40028c <timers_init+0x78>)
  40026a:	6813      	ldr	r3, [r2, #0]
  40026c:	f043 0305 	orr.w	r3, r3, #5
  400270:	6013      	str	r3, [r2, #0]
  400272:	4770      	bx	lr
  400274:	2000045e 	.word	0x2000045e
  400278:	e000e100 	.word	0xe000e100
  40027c:	400e0410 	.word	0x400e0410
  400280:	40010004 	.word	0x40010004
  400284:	4001001c 	.word	0x4001001c
  400288:	400e0e00 	.word	0x400e0e00
  40028c:	40010000 	.word	0x40010000

00400290 <update_timers>:

 void update_timers(int bpm) {
// 	// (SCK/2) / (bpm/60); SCK*60/2 = 960000
// 	// Offset is needed, possible not with the crystals working
// 	REG_TC0_RC0 = (uint16_t)(960000/bpm - 420);
	if(bpm > 1) {
  400290:	2801      	cmp	r0, #1
  400292:	dd05      	ble.n	4002a0 <update_timers+0x10>
		REG_TC0_RC0 = (uint16_t)(75000/bpm);
  400294:	4b03      	ldr	r3, [pc, #12]	; (4002a4 <update_timers+0x14>)
  400296:	fb93 f0f0 	sdiv	r0, r3, r0
  40029a:	b280      	uxth	r0, r0
  40029c:	4b02      	ldr	r3, [pc, #8]	; (4002a8 <update_timers+0x18>)
  40029e:	6018      	str	r0, [r3, #0]
  4002a0:	4770      	bx	lr
  4002a2:	bf00      	nop
  4002a4:	000124f8 	.word	0x000124f8
  4002a8:	4001001c 	.word	0x4001001c

004002ac <TC0_Handler>:

 void TC0_Handler() {
	 // Handling timer = RC

	 // Test code, normally trigger next step, output clock
	 if((REG_TC0_SR0 & TC_SR_CPCS) >= 0) {
  4002ac:	4b0c      	ldr	r3, [pc, #48]	; (4002e0 <TC0_Handler+0x34>)
  4002ae:	681b      	ldr	r3, [r3, #0]
		overflow_count += 1;
  4002b0:	4a0c      	ldr	r2, [pc, #48]	; (4002e4 <TC0_Handler+0x38>)
  4002b2:	8813      	ldrh	r3, [r2, #0]
  4002b4:	3301      	adds	r3, #1
  4002b6:	b29b      	uxth	r3, r3
  4002b8:	8013      	strh	r3, [r2, #0]
	 }

	 if(overflow_count >= 5000) {
  4002ba:	f241 3287 	movw	r2, #4999	; 0x1387
  4002be:	4293      	cmp	r3, r2
  4002c0:	d90d      	bls.n	4002de <TC0_Handler+0x32>
		if((REG_PIOA_PDSR & PIO_ODSR_P20) >= 1) {
  4002c2:	4b09      	ldr	r3, [pc, #36]	; (4002e8 <TC0_Handler+0x3c>)
  4002c4:	681b      	ldr	r3, [r3, #0]
  4002c6:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
			REG_PIOA_CODR |= PIO_CODR_P20;
  4002ca:	bf14      	ite	ne
  4002cc:	4a07      	ldrne	r2, [pc, #28]	; (4002ec <TC0_Handler+0x40>)
		}
		else {
			REG_PIOA_SODR |= PIO_SODR_P20;
  4002ce:	4a08      	ldreq	r2, [pc, #32]	; (4002f0 <TC0_Handler+0x44>)
  4002d0:	6813      	ldr	r3, [r2, #0]
  4002d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  4002d6:	6013      	str	r3, [r2, #0]
		}
		overflow_count = 0;
  4002d8:	2200      	movs	r2, #0
  4002da:	4b02      	ldr	r3, [pc, #8]	; (4002e4 <TC0_Handler+0x38>)
  4002dc:	801a      	strh	r2, [r3, #0]
  4002de:	4770      	bx	lr
  4002e0:	40010020 	.word	0x40010020
  4002e4:	2000045e 	.word	0x2000045e
  4002e8:	400e0e3c 	.word	0x400e0e3c
  4002ec:	400e0e34 	.word	0x400e0e34
  4002f0:	400e0e30 	.word	0x400e0e30

004002f4 <LED_init>:
#include <board.h>
#include <conf_board.h>

void LED_init(){
	 //enable clock for PIOA
	 REG_PMC_PCER0 |= PMC_PCER0_PID11;
  4002f4:	4a16      	ldr	r2, [pc, #88]	; (400350 <LED_init+0x5c>)
  4002f6:	6813      	ldr	r3, [r2, #0]
  4002f8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  4002fc:	6013      	str	r3, [r2, #0]

	 //Set up PA11 as Center LED OUTPUT
	 REG_PIOA_PER |= PIO_PER_P17; //enable PIO controller on PA17
  4002fe:	4915      	ldr	r1, [pc, #84]	; (400354 <LED_init+0x60>)
  400300:	680b      	ldr	r3, [r1, #0]
  400302:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  400306:	600b      	str	r3, [r1, #0]
	 REG_PIOA_OER |= PIO_PER_P17; //enable output on pin PA17
  400308:	f502 6220 	add.w	r2, r2, #2560	; 0xa00
  40030c:	6813      	ldr	r3, [r2, #0]
  40030e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  400312:	6013      	str	r3, [r2, #0]
	 REG_PIOA_CODR |= PIO_PER_P17; //set output low on PA17 as default
  400314:	4b10      	ldr	r3, [pc, #64]	; (400358 <LED_init+0x64>)
  400316:	6818      	ldr	r0, [r3, #0]
  400318:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  40031c:	6018      	str	r0, [r3, #0]

	  //Set up PA15 as Left LED OUTPUT
	  REG_PIOA_PER |= PIO_PER_P15; //enable PIO controller on PA15
  40031e:	6808      	ldr	r0, [r1, #0]
  400320:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
  400324:	6008      	str	r0, [r1, #0]
	  REG_PIOA_OER |= PIO_PER_P15; //enable output on pin PA15
  400326:	6810      	ldr	r0, [r2, #0]
  400328:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
  40032c:	6010      	str	r0, [r2, #0]
	  REG_PIOA_CODR |= PIO_PER_P15; //set output low on PA15 as default
  40032e:	6818      	ldr	r0, [r3, #0]
  400330:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
  400334:	6018      	str	r0, [r3, #0]

	  //Set up PA16 as Right LED OUTPUT
	  REG_PIOA_PER |= PIO_PER_P16; //enable PIO controller on PA16
  400336:	6808      	ldr	r0, [r1, #0]
  400338:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
  40033c:	6008      	str	r0, [r1, #0]
	  REG_PIOA_OER |= PIO_PER_P16; //enable output on pin PA16
  40033e:	6811      	ldr	r1, [r2, #0]
  400340:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
  400344:	6011      	str	r1, [r2, #0]
	  REG_PIOA_CODR |= PIO_PER_P16; //set output low on PA16 as default
  400346:	681a      	ldr	r2, [r3, #0]
  400348:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  40034c:	601a      	str	r2, [r3, #0]
  40034e:	4770      	bx	lr
  400350:	400e0410 	.word	0x400e0410
  400354:	400e0e00 	.word	0x400e0e00
  400358:	400e0e34 	.word	0x400e0e34

0040035c <Encoder_init>:
}

void Encoder_init(){
  40035c:	b470      	push	{r4, r5, r6}
	 //Set up PA12 as BUTTON INPUT
	 REG_PIOA_PER |= PIO_PER_P12; //enable PIO controller on PA12
  40035e:	4d36      	ldr	r5, [pc, #216]	; (400438 <Encoder_init+0xdc>)
  400360:	682b      	ldr	r3, [r5, #0]
  400362:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  400366:	602b      	str	r3, [r5, #0]
	 REG_PIOA_ODR |= PIO_ODR_P12; //disable output on pin PA12
  400368:	4c34      	ldr	r4, [pc, #208]	; (40043c <Encoder_init+0xe0>)
  40036a:	6823      	ldr	r3, [r4, #0]
  40036c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  400370:	6023      	str	r3, [r4, #0]
	 REG_PIOA_PPDDR |= PIO_PPDDR_P12; //disable pull-down resistor on PA12
  400372:	4833      	ldr	r0, [pc, #204]	; (400440 <Encoder_init+0xe4>)
  400374:	6803      	ldr	r3, [r0, #0]
  400376:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  40037a:	6003      	str	r3, [r0, #0]
	 REG_PIOA_PUER |= PIO_PUER_P12;	//enable pull-up resistor on PA12
  40037c:	4931      	ldr	r1, [pc, #196]	; (400444 <Encoder_init+0xe8>)
  40037e:	680b      	ldr	r3, [r1, #0]
  400380:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  400384:	600b      	str	r3, [r1, #0]
	 REG_PIOA_IFSCER |= PIO_IFSCER_P12; //turn on slow clock debounce
  400386:	4a30      	ldr	r2, [pc, #192]	; (400448 <Encoder_init+0xec>)
  400388:	6813      	ldr	r3, [r2, #0]
  40038a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  40038e:	6013      	str	r3, [r2, #0]
	 REG_PIOA_IFER |= PIO_IFER_P12;	//start debounce filter
  400390:	4b2e      	ldr	r3, [pc, #184]	; (40044c <Encoder_init+0xf0>)
  400392:	681e      	ldr	r6, [r3, #0]
  400394:	f446 5680 	orr.w	r6, r6, #4096	; 0x1000
  400398:	601e      	str	r6, [r3, #0]

	 //Set up PA13 as ENCODER INPUT A
	 REG_PIOA_PER |= PIO_PER_P5; //enable PIO controller on PA13
  40039a:	682e      	ldr	r6, [r5, #0]
  40039c:	f046 0620 	orr.w	r6, r6, #32
  4003a0:	602e      	str	r6, [r5, #0]
	 REG_PIOA_ODR |= PIO_ODR_P5; //disable output on pin PA13
  4003a2:	6826      	ldr	r6, [r4, #0]
  4003a4:	f046 0620 	orr.w	r6, r6, #32
  4003a8:	6026      	str	r6, [r4, #0]
	 REG_PIOA_PPDDR |= PIO_PPDDR_P5; //disable pull-down resistor on PA13
  4003aa:	6806      	ldr	r6, [r0, #0]
  4003ac:	f046 0620 	orr.w	r6, r6, #32
  4003b0:	6006      	str	r6, [r0, #0]
	 REG_PIOA_PUER |= PIO_PUER_P5;	//enable pull-up resistor on PA13
  4003b2:	680e      	ldr	r6, [r1, #0]
  4003b4:	f046 0620 	orr.w	r6, r6, #32
  4003b8:	600e      	str	r6, [r1, #0]
	 REG_PIOA_IFSCER |= PIO_IFSCER_P5; //turn on slow clock debounce
  4003ba:	6816      	ldr	r6, [r2, #0]
  4003bc:	f046 0620 	orr.w	r6, r6, #32
  4003c0:	6016      	str	r6, [r2, #0]
	 REG_PIOA_IFER |= PIO_IFER_P5;	//start debounce filter
  4003c2:	681e      	ldr	r6, [r3, #0]
  4003c4:	f046 0620 	orr.w	r6, r6, #32
  4003c8:	601e      	str	r6, [r3, #0]

	 //Set up PA12 as ENCODER INPUT B
	 REG_PIOA_PER |= PIO_PER_P6; //enable PIO controller on PA14
  4003ca:	682e      	ldr	r6, [r5, #0]
  4003cc:	f046 0640 	orr.w	r6, r6, #64	; 0x40
  4003d0:	602e      	str	r6, [r5, #0]
	 REG_PIOA_ODR |= PIO_ODR_P6; //disable output on pin PA14
  4003d2:	6825      	ldr	r5, [r4, #0]
  4003d4:	f045 0540 	orr.w	r5, r5, #64	; 0x40
  4003d8:	6025      	str	r5, [r4, #0]
	 REG_PIOA_PPDDR |= PIO_PPDDR_P6; //disable pull-down resistor on PA14
  4003da:	6804      	ldr	r4, [r0, #0]
  4003dc:	f044 0440 	orr.w	r4, r4, #64	; 0x40
  4003e0:	6004      	str	r4, [r0, #0]
	 REG_PIOA_PUER |= PIO_PUER_P6;	//enable pull-up resistor on PA14
  4003e2:	6808      	ldr	r0, [r1, #0]
  4003e4:	f040 0040 	orr.w	r0, r0, #64	; 0x40
  4003e8:	6008      	str	r0, [r1, #0]
	 REG_PIOA_IFSCER |= PIO_IFSCER_P6; //turn on slow clock debounce
  4003ea:	6811      	ldr	r1, [r2, #0]
  4003ec:	f041 0140 	orr.w	r1, r1, #64	; 0x40
  4003f0:	6011      	str	r1, [r2, #0]
	 REG_PIOA_IFER |= PIO_IFER_P6;	//start debounce filter
  4003f2:	681a      	ldr	r2, [r3, #0]
  4003f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  4003f8:	601a      	str	r2, [r3, #0]
	 

	 uint32_t flag_clear = REG_PIOA_ISR;	//clear left over interrupt flags
  4003fa:	332c      	adds	r3, #44	; 0x2c
  4003fc:	681b      	ldr	r3, [r3, #0]
	 REG_PIOA_IER |= PIO_IER_P12;			//enable input level change interrupt on P12
  4003fe:	4b14      	ldr	r3, [pc, #80]	; (400450 <Encoder_init+0xf4>)
  400400:	681a      	ldr	r2, [r3, #0]
  400402:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
  400406:	601a      	str	r2, [r3, #0]
	 REG_PIOA_IER |= PIO_IER_P5;			//enable input rising edge interrupt on P5
  400408:	681a      	ldr	r2, [r3, #0]
  40040a:	f042 0220 	orr.w	r2, r2, #32
  40040e:	601a      	str	r2, [r3, #0]
	 REG_PIOA_REHLSR |= PIO_REHLSR_P5;
  400410:	4a10      	ldr	r2, [pc, #64]	; (400454 <Encoder_init+0xf8>)
  400412:	6811      	ldr	r1, [r2, #0]
  400414:	f041 0120 	orr.w	r1, r1, #32
  400418:	6011      	str	r1, [r2, #0]
	 REG_PIOA_IER |= PIO_IER_P6;			//enable input rising edge interrupt on P6
  40041a:	6819      	ldr	r1, [r3, #0]
  40041c:	f041 0140 	orr.w	r1, r1, #64	; 0x40
  400420:	6019      	str	r1, [r3, #0]
	 REG_PIOA_REHLSR |= PIO_REHLSR_P6;
  400422:	6813      	ldr	r3, [r2, #0]
  400424:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  400428:	6013      	str	r3, [r2, #0]
  40042a:	f44f 6200 	mov.w	r2, #2048	; 0x800
  40042e:	4b0a      	ldr	r3, [pc, #40]	; (400458 <Encoder_init+0xfc>)
  400430:	601a      	str	r2, [r3, #0]
	 NVIC_EnableIRQ(PIOA_IRQn);				//enable PORT A interrupts
}
  400432:	bc70      	pop	{r4, r5, r6}
  400434:	4770      	bx	lr
  400436:	bf00      	nop
  400438:	400e0e00 	.word	0x400e0e00
  40043c:	400e0e14 	.word	0x400e0e14
  400440:	400e0e90 	.word	0x400e0e90
  400444:	400e0e64 	.word	0x400e0e64
  400448:	400e0e84 	.word	0x400e0e84
  40044c:	400e0e20 	.word	0x400e0e20
  400450:	400e0e40 	.word	0x400e0e40
  400454:	400e0ed4 	.word	0x400e0ed4
  400458:	e000e100 	.word	0xe000e100

0040045c <board_init>:

void board_init(void)
{
  40045c:	b508      	push	{r3, lr}
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
	 LED_init();
  40045e:	4b02      	ldr	r3, [pc, #8]	; (400468 <board_init+0xc>)
  400460:	4798      	blx	r3
	 Encoder_init();
  400462:	4b02      	ldr	r3, [pc, #8]	; (40046c <board_init+0x10>)
  400464:	4798      	blx	r3
  400466:	bd08      	pop	{r3, pc}
  400468:	004002f5 	.word	0x004002f5
  40046c:	0040035d 	.word	0x0040035d

00400470 <sysclk_init>:

	SystemCoreClockUpdate();
}

void sysclk_init(void)
{
  400470:	b510      	push	{r4, lr}
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  400472:	480e      	ldr	r0, [pc, #56]	; (4004ac <sysclk_init+0x3c>)
  400474:	4b0e      	ldr	r3, [pc, #56]	; (4004b0 <sysclk_init+0x40>)
  400476:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
		break;

	case OSC_MAINCK_8M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
  400478:	2010      	movs	r0, #16
  40047a:	4b0e      	ldr	r3, [pc, #56]	; (4004b4 <sysclk_init+0x44>)
  40047c:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  40047e:	4c0e      	ldr	r4, [pc, #56]	; (4004b8 <sysclk_init+0x48>)
  400480:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  400482:	2800      	cmp	r0, #0
  400484:	d0fc      	beq.n	400480 <sysclk_init+0x10>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  400486:	4b0d      	ldr	r3, [pc, #52]	; (4004bc <sysclk_init+0x4c>)
  400488:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  40048a:	4a0d      	ldr	r2, [pc, #52]	; (4004c0 <sysclk_init+0x50>)
  40048c:	4b0d      	ldr	r3, [pc, #52]	; (4004c4 <sysclk_init+0x54>)
  40048e:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
  400490:	4c0d      	ldr	r4, [pc, #52]	; (4004c8 <sysclk_init+0x58>)
  400492:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  400494:	2800      	cmp	r0, #0
  400496:	d0fc      	beq.n	400492 <sysclk_init+0x22>

		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  400498:	2010      	movs	r0, #16
  40049a:	4b0c      	ldr	r3, [pc, #48]	; (4004cc <sysclk_init+0x5c>)
  40049c:	4798      	blx	r3
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  40049e:	4b0c      	ldr	r3, [pc, #48]	; (4004d0 <sysclk_init+0x60>)
  4004a0:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  4004a2:	4802      	ldr	r0, [pc, #8]	; (4004ac <sysclk_init+0x3c>)
  4004a4:	4b02      	ldr	r3, [pc, #8]	; (4004b0 <sysclk_init+0x40>)
  4004a6:	4798      	blx	r3
  4004a8:	bd10      	pop	{r4, pc}
  4004aa:	bf00      	nop
  4004ac:	05f5e100 	.word	0x05f5e100
  4004b0:	00400765 	.word	0x00400765
  4004b4:	0040053d 	.word	0x0040053d
  4004b8:	00400589 	.word	0x00400589
  4004bc:	00400599 	.word	0x00400599
  4004c0:	20183f01 	.word	0x20183f01
  4004c4:	400e0400 	.word	0x400e0400
  4004c8:	004005a9 	.word	0x004005a9
  4004cc:	004004d5 	.word	0x004004d5
  4004d0:	00400655 	.word	0x00400655

004004d4 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  4004d4:	4a18      	ldr	r2, [pc, #96]	; (400538 <pmc_switch_mck_to_pllack+0x64>)
  4004d6:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4004d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  4004dc:	4318      	orrs	r0, r3
  4004de:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4004e0:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4004e2:	f013 0f08 	tst.w	r3, #8
  4004e6:	d003      	beq.n	4004f0 <pmc_switch_mck_to_pllack+0x1c>
  4004e8:	e009      	b.n	4004fe <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4004ea:	3b01      	subs	r3, #1
  4004ec:	d103      	bne.n	4004f6 <pmc_switch_mck_to_pllack+0x22>
  4004ee:	e01e      	b.n	40052e <pmc_switch_mck_to_pllack+0x5a>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4004f0:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4004f4:	4910      	ldr	r1, [pc, #64]	; (400538 <pmc_switch_mck_to_pllack+0x64>)
  4004f6:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4004f8:	f012 0f08 	tst.w	r2, #8
  4004fc:	d0f5      	beq.n	4004ea <pmc_switch_mck_to_pllack+0x16>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  4004fe:	4a0e      	ldr	r2, [pc, #56]	; (400538 <pmc_switch_mck_to_pllack+0x64>)
  400500:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400502:	f023 0303 	bic.w	r3, r3, #3
  400506:	f043 0302 	orr.w	r3, r3, #2
  40050a:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40050c:	6e90      	ldr	r0, [r2, #104]	; 0x68
  40050e:	f010 0008 	ands.w	r0, r0, #8
  400512:	d004      	beq.n	40051e <pmc_switch_mck_to_pllack+0x4a>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
  400514:	2000      	movs	r0, #0
  400516:	4770      	bx	lr
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
  400518:	3b01      	subs	r3, #1
  40051a:	d103      	bne.n	400524 <pmc_switch_mck_to_pllack+0x50>
  40051c:	e009      	b.n	400532 <pmc_switch_mck_to_pllack+0x5e>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40051e:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400522:	4905      	ldr	r1, [pc, #20]	; (400538 <pmc_switch_mck_to_pllack+0x64>)
  400524:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400526:	f012 0f08 	tst.w	r2, #8
  40052a:	d0f5      	beq.n	400518 <pmc_switch_mck_to_pllack+0x44>
  40052c:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  40052e:	2001      	movs	r0, #1
  400530:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  400532:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  400534:	4770      	bx	lr
  400536:	bf00      	nop
  400538:	400e0400 	.word	0x400e0400

0040053c <pmc_switch_mainck_to_fastrc>:
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
  40053c:	4b11      	ldr	r3, [pc, #68]	; (400584 <pmc_switch_mainck_to_fastrc+0x48>)
  40053e:	6a1a      	ldr	r2, [r3, #32]
  400540:	f442 125c 	orr.w	r2, r2, #3604480	; 0x370000
  400544:	f042 0208 	orr.w	r2, r2, #8
  400548:	621a      	str	r2, [r3, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  40054a:	461a      	mov	r2, r3
  40054c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40054e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
  400552:	d0fb      	beq.n	40054c <pmc_switch_mainck_to_fastrc+0x10>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  400554:	4a0b      	ldr	r2, [pc, #44]	; (400584 <pmc_switch_mainck_to_fastrc+0x48>)
  400556:	6a13      	ldr	r3, [r2, #32]
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
  400558:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  40055c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  400560:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  400564:	4303      	orrs	r3, r0

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  400566:	6213      	str	r3, [r2, #32]
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  400568:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40056a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
  40056e:	d0fb      	beq.n	400568 <pmc_switch_mainck_to_fastrc+0x2c>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  400570:	4a04      	ldr	r2, [pc, #16]	; (400584 <pmc_switch_mainck_to_fastrc+0x48>)
  400572:	6a13      	ldr	r3, [r2, #32]
  400574:	f023 739b 	bic.w	r3, r3, #20316160	; 0x1360000
  400578:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  40057c:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  400580:	6213      	str	r3, [r2, #32]
  400582:	4770      	bx	lr
  400584:	400e0400 	.word	0x400e0400

00400588 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  400588:	4b02      	ldr	r3, [pc, #8]	; (400594 <pmc_osc_is_ready_mainck+0xc>)
  40058a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  40058c:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  400590:	4770      	bx	lr
  400592:	bf00      	nop
  400594:	400e0400 	.word	0x400e0400

00400598 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  400598:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  40059c:	4b01      	ldr	r3, [pc, #4]	; (4005a4 <pmc_disable_pllack+0xc>)
  40059e:	629a      	str	r2, [r3, #40]	; 0x28
  4005a0:	4770      	bx	lr
  4005a2:	bf00      	nop
  4005a4:	400e0400 	.word	0x400e0400

004005a8 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  4005a8:	4b02      	ldr	r3, [pc, #8]	; (4005b4 <pmc_is_locked_pllack+0xc>)
  4005aa:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4005ac:	f000 0002 	and.w	r0, r0, #2
  4005b0:	4770      	bx	lr
  4005b2:	bf00      	nop
  4005b4:	400e0400 	.word	0x400e0400

004005b8 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  4005b8:	e7fe      	b.n	4005b8 <Dummy_Handler>
  4005ba:	bf00      	nop

004005bc <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  4005bc:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
  4005be:	4b19      	ldr	r3, [pc, #100]	; (400624 <Reset_Handler+0x68>)
  4005c0:	4a19      	ldr	r2, [pc, #100]	; (400628 <Reset_Handler+0x6c>)
  4005c2:	429a      	cmp	r2, r3
  4005c4:	d003      	beq.n	4005ce <Reset_Handler+0x12>
		for (; pDest < &_erelocate;) {
  4005c6:	4b19      	ldr	r3, [pc, #100]	; (40062c <Reset_Handler+0x70>)
  4005c8:	4a16      	ldr	r2, [pc, #88]	; (400624 <Reset_Handler+0x68>)
  4005ca:	429a      	cmp	r2, r3
  4005cc:	d304      	bcc.n	4005d8 <Reset_Handler+0x1c>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  4005ce:	4b18      	ldr	r3, [pc, #96]	; (400630 <Reset_Handler+0x74>)
  4005d0:	4a18      	ldr	r2, [pc, #96]	; (400634 <Reset_Handler+0x78>)
  4005d2:	429a      	cmp	r2, r3
  4005d4:	d30f      	bcc.n	4005f6 <Reset_Handler+0x3a>
  4005d6:	e01a      	b.n	40060e <Reset_Handler+0x52>
  4005d8:	4912      	ldr	r1, [pc, #72]	; (400624 <Reset_Handler+0x68>)
  4005da:	4b17      	ldr	r3, [pc, #92]	; (400638 <Reset_Handler+0x7c>)
  4005dc:	1a5b      	subs	r3, r3, r1
  4005de:	f023 0303 	bic.w	r3, r3, #3
  4005e2:	3304      	adds	r3, #4
  4005e4:	4a10      	ldr	r2, [pc, #64]	; (400628 <Reset_Handler+0x6c>)
  4005e6:	4413      	add	r3, r2
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
			*pDest++ = *pSrc++;
  4005e8:	f852 0b04 	ldr.w	r0, [r2], #4
  4005ec:	f841 0b04 	str.w	r0, [r1], #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
  4005f0:	429a      	cmp	r2, r3
  4005f2:	d1f9      	bne.n	4005e8 <Reset_Handler+0x2c>
  4005f4:	e7eb      	b.n	4005ce <Reset_Handler+0x12>
  4005f6:	4b11      	ldr	r3, [pc, #68]	; (40063c <Reset_Handler+0x80>)
  4005f8:	4a11      	ldr	r2, [pc, #68]	; (400640 <Reset_Handler+0x84>)
  4005fa:	1ad2      	subs	r2, r2, r3
  4005fc:	f022 0203 	bic.w	r2, r2, #3
  400600:	441a      	add	r2, r3
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  400602:	3b04      	subs	r3, #4
		*pDest++ = 0;
  400604:	2100      	movs	r1, #0
  400606:	f843 1b04 	str.w	r1, [r3], #4
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  40060a:	4293      	cmp	r3, r2
  40060c:	d1fb      	bne.n	400606 <Reset_Handler+0x4a>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  40060e:	4a0d      	ldr	r2, [pc, #52]	; (400644 <Reset_Handler+0x88>)
  400610:	4b0d      	ldr	r3, [pc, #52]	; (400648 <Reset_Handler+0x8c>)
  400612:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  400616:	6093      	str	r3, [r2, #8]

	/* Initialize the C library */
	__libc_init_array();
  400618:	4b0c      	ldr	r3, [pc, #48]	; (40064c <Reset_Handler+0x90>)
  40061a:	4798      	blx	r3

	/* Branch to main function */
	main();
  40061c:	4b0c      	ldr	r3, [pc, #48]	; (400650 <Reset_Handler+0x94>)
  40061e:	4798      	blx	r3
  400620:	e7fe      	b.n	400620 <Reset_Handler+0x64>
  400622:	bf00      	nop
  400624:	20000000 	.word	0x20000000
  400628:	00400b98 	.word	0x00400b98
  40062c:	20000440 	.word	0x20000440
  400630:	20000460 	.word	0x20000460
  400634:	20000440 	.word	0x20000440
  400638:	2000043f 	.word	0x2000043f
  40063c:	20000444 	.word	0x20000444
  400640:	20000463 	.word	0x20000463
  400644:	e000ed00 	.word	0xe000ed00
  400648:	00400000 	.word	0x00400000
  40064c:	00400a31 	.word	0x00400a31
  400650:	004007c5 	.word	0x004007c5

00400654 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) {
  400654:	4b3c      	ldr	r3, [pc, #240]	; (400748 <SystemCoreClockUpdate+0xf4>)
  400656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400658:	f003 0303 	and.w	r3, r3, #3
  40065c:	2b01      	cmp	r3, #1
  40065e:	d00f      	beq.n	400680 <SystemCoreClockUpdate+0x2c>
  400660:	b113      	cbz	r3, 400668 <SystemCoreClockUpdate+0x14>
  400662:	2b02      	cmp	r3, #2
  400664:	d029      	beq.n	4006ba <SystemCoreClockUpdate+0x66>
  400666:	e057      	b.n	400718 <SystemCoreClockUpdate+0xc4>
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
  400668:	4b38      	ldr	r3, [pc, #224]	; (40074c <SystemCoreClockUpdate+0xf8>)
  40066a:	695b      	ldr	r3, [r3, #20]
  40066c:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
  400670:	bf14      	ite	ne
  400672:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
  400676:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  40067a:	4b35      	ldr	r3, [pc, #212]	; (400750 <SystemCoreClockUpdate+0xfc>)
  40067c:	601a      	str	r2, [r3, #0]
  40067e:	e04b      	b.n	400718 <SystemCoreClockUpdate+0xc4>
		}
		break;

	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
  400680:	4b31      	ldr	r3, [pc, #196]	; (400748 <SystemCoreClockUpdate+0xf4>)
  400682:	6a1b      	ldr	r3, [r3, #32]
  400684:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400688:	d003      	beq.n	400692 <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
  40068a:	4a32      	ldr	r2, [pc, #200]	; (400754 <SystemCoreClockUpdate+0x100>)
  40068c:	4b30      	ldr	r3, [pc, #192]	; (400750 <SystemCoreClockUpdate+0xfc>)
  40068e:	601a      	str	r2, [r3, #0]
  400690:	e042      	b.n	400718 <SystemCoreClockUpdate+0xc4>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400692:	4a31      	ldr	r2, [pc, #196]	; (400758 <SystemCoreClockUpdate+0x104>)
  400694:	4b2e      	ldr	r3, [pc, #184]	; (400750 <SystemCoreClockUpdate+0xfc>)
  400696:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
  400698:	4b2b      	ldr	r3, [pc, #172]	; (400748 <SystemCoreClockUpdate+0xf4>)
  40069a:	6a1b      	ldr	r3, [r3, #32]
  40069c:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4006a0:	2b10      	cmp	r3, #16
  4006a2:	d002      	beq.n	4006aa <SystemCoreClockUpdate+0x56>
  4006a4:	2b20      	cmp	r3, #32
  4006a6:	d004      	beq.n	4006b2 <SystemCoreClockUpdate+0x5e>
  4006a8:	e036      	b.n	400718 <SystemCoreClockUpdate+0xc4>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;

			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
  4006aa:	4a2c      	ldr	r2, [pc, #176]	; (40075c <SystemCoreClockUpdate+0x108>)
  4006ac:	4b28      	ldr	r3, [pc, #160]	; (400750 <SystemCoreClockUpdate+0xfc>)
  4006ae:	601a      	str	r2, [r3, #0]
				break;
  4006b0:	e032      	b.n	400718 <SystemCoreClockUpdate+0xc4>

			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
  4006b2:	4a28      	ldr	r2, [pc, #160]	; (400754 <SystemCoreClockUpdate+0x100>)
  4006b4:	4b26      	ldr	r3, [pc, #152]	; (400750 <SystemCoreClockUpdate+0xfc>)
  4006b6:	601a      	str	r2, [r3, #0]
				break;
  4006b8:	e02e      	b.n	400718 <SystemCoreClockUpdate+0xc4>
			}
		}
		break;

	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
  4006ba:	4b23      	ldr	r3, [pc, #140]	; (400748 <SystemCoreClockUpdate+0xf4>)
  4006bc:	6a1b      	ldr	r3, [r3, #32]
  4006be:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4006c2:	d003      	beq.n	4006cc <SystemCoreClockUpdate+0x78>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
  4006c4:	4a23      	ldr	r2, [pc, #140]	; (400754 <SystemCoreClockUpdate+0x100>)
  4006c6:	4b22      	ldr	r3, [pc, #136]	; (400750 <SystemCoreClockUpdate+0xfc>)
  4006c8:	601a      	str	r2, [r3, #0]
  4006ca:	e012      	b.n	4006f2 <SystemCoreClockUpdate+0x9e>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4006cc:	4a22      	ldr	r2, [pc, #136]	; (400758 <SystemCoreClockUpdate+0x104>)
  4006ce:	4b20      	ldr	r3, [pc, #128]	; (400750 <SystemCoreClockUpdate+0xfc>)
  4006d0:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
  4006d2:	4b1d      	ldr	r3, [pc, #116]	; (400748 <SystemCoreClockUpdate+0xf4>)
  4006d4:	6a1b      	ldr	r3, [r3, #32]
  4006d6:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4006da:	2b10      	cmp	r3, #16
  4006dc:	d002      	beq.n	4006e4 <SystemCoreClockUpdate+0x90>
  4006de:	2b20      	cmp	r3, #32
  4006e0:	d004      	beq.n	4006ec <SystemCoreClockUpdate+0x98>
  4006e2:	e006      	b.n	4006f2 <SystemCoreClockUpdate+0x9e>
				/* So the 4MHz RC selection is forbidden */
				Assert(false);
				break;

			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
  4006e4:	4a1d      	ldr	r2, [pc, #116]	; (40075c <SystemCoreClockUpdate+0x108>)
  4006e6:	4b1a      	ldr	r3, [pc, #104]	; (400750 <SystemCoreClockUpdate+0xfc>)
  4006e8:	601a      	str	r2, [r3, #0]
				break;
  4006ea:	e002      	b.n	4006f2 <SystemCoreClockUpdate+0x9e>

			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
  4006ec:	4a19      	ldr	r2, [pc, #100]	; (400754 <SystemCoreClockUpdate+0x100>)
  4006ee:	4b18      	ldr	r3, [pc, #96]	; (400750 <SystemCoreClockUpdate+0xfc>)
  4006f0:	601a      	str	r2, [r3, #0]
			default:
				break;
			}
		}

		if ((uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
  4006f2:	4b15      	ldr	r3, [pc, #84]	; (400748 <SystemCoreClockUpdate+0xf4>)
  4006f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4006f6:	f003 0303 	and.w	r3, r3, #3
  4006fa:	2b02      	cmp	r3, #2
  4006fc:	d10c      	bne.n	400718 <SystemCoreClockUpdate+0xc4>
				PMC_MCKR_CSS_PLLA_CLK) {
			SystemCoreClock *=
					((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  4006fe:	4a12      	ldr	r2, [pc, #72]	; (400748 <SystemCoreClockUpdate+0xf4>)
  400700:	6a93      	ldr	r3, [r2, #40]	; 0x28
					>> CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  400702:	6a92      	ldr	r2, [r2, #40]	; 0x28
  400704:	4812      	ldr	r0, [pc, #72]	; (400750 <SystemCoreClockUpdate+0xfc>)
  400706:	f3c3 410a 	ubfx	r1, r3, #16, #11
  40070a:	6803      	ldr	r3, [r0, #0]
  40070c:	fb01 3303 	mla	r3, r1, r3, r3
  400710:	b2d2      	uxtb	r2, r2
  400712:	fbb3 f3f2 	udiv	r3, r3, r2
  400716:	6003      	str	r3, [r0, #0]

	default:
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
  400718:	4b0b      	ldr	r3, [pc, #44]	; (400748 <SystemCoreClockUpdate+0xf4>)
  40071a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40071c:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400720:	2b70      	cmp	r3, #112	; 0x70
  400722:	d107      	bne.n	400734 <SystemCoreClockUpdate+0xe0>
		SystemCoreClock /= 3U;
  400724:	4a0a      	ldr	r2, [pc, #40]	; (400750 <SystemCoreClockUpdate+0xfc>)
  400726:	6813      	ldr	r3, [r2, #0]
  400728:	490d      	ldr	r1, [pc, #52]	; (400760 <SystemCoreClockUpdate+0x10c>)
  40072a:	fba1 1303 	umull	r1, r3, r1, r3
  40072e:	085b      	lsrs	r3, r3, #1
  400730:	6013      	str	r3, [r2, #0]
  400732:	4770      	bx	lr
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >>
  400734:	4b04      	ldr	r3, [pc, #16]	; (400748 <SystemCoreClockUpdate+0xf4>)
  400736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400738:	4905      	ldr	r1, [pc, #20]	; (400750 <SystemCoreClockUpdate+0xfc>)
  40073a:	f3c3 1202 	ubfx	r2, r3, #4, #3
  40073e:	680b      	ldr	r3, [r1, #0]
  400740:	40d3      	lsrs	r3, r2
  400742:	600b      	str	r3, [r1, #0]
  400744:	4770      	bx	lr
  400746:	bf00      	nop
  400748:	400e0400 	.word	0x400e0400
  40074c:	400e1410 	.word	0x400e1410
  400750:	2000000c 	.word	0x2000000c
  400754:	00b71b00 	.word	0x00b71b00
  400758:	003d0900 	.word	0x003d0900
  40075c:	007a1200 	.word	0x007a1200
  400760:	aaaaaaab 	.word	0xaaaaaaab

00400764 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
  400764:	4b0f      	ldr	r3, [pc, #60]	; (4007a4 <system_init_flash+0x40>)
  400766:	4298      	cmp	r0, r3
  400768:	d804      	bhi.n	400774 <system_init_flash+0x10>
		EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  40076a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  40076e:	4b0e      	ldr	r3, [pc, #56]	; (4007a8 <system_init_flash+0x44>)
  400770:	601a      	str	r2, [r3, #0]
  400772:	4770      	bx	lr
	} else {
		if (ul_clk < CHIP_FREQ_FWS_1) {
  400774:	4b0d      	ldr	r3, [pc, #52]	; (4007ac <system_init_flash+0x48>)
  400776:	4298      	cmp	r0, r3
  400778:	d803      	bhi.n	400782 <system_init_flash+0x1e>
			EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  40077a:	4a0d      	ldr	r2, [pc, #52]	; (4007b0 <system_init_flash+0x4c>)
  40077c:	4b0a      	ldr	r3, [pc, #40]	; (4007a8 <system_init_flash+0x44>)
  40077e:	601a      	str	r2, [r3, #0]
  400780:	4770      	bx	lr
		} else {
			if (ul_clk < CHIP_FREQ_FWS_2) {
  400782:	4b0c      	ldr	r3, [pc, #48]	; (4007b4 <system_init_flash+0x50>)
  400784:	4298      	cmp	r0, r3
  400786:	d803      	bhi.n	400790 <system_init_flash+0x2c>
				EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  400788:	4a0b      	ldr	r2, [pc, #44]	; (4007b8 <system_init_flash+0x54>)
  40078a:	4b07      	ldr	r3, [pc, #28]	; (4007a8 <system_init_flash+0x44>)
  40078c:	601a      	str	r2, [r3, #0]
  40078e:	4770      	bx	lr
			} else {
				if (ul_clk < CHIP_FREQ_FWS_3) {
  400790:	4b0a      	ldr	r3, [pc, #40]	; (4007bc <system_init_flash+0x58>)
  400792:	4298      	cmp	r0, r3
					EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  400794:	bf94      	ite	ls
  400796:	4a0a      	ldrls	r2, [pc, #40]	; (4007c0 <system_init_flash+0x5c>)
				} else {
					EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  400798:	f04f 2204 	movhi.w	r2, #67109888	; 0x4000400
  40079c:	4b02      	ldr	r3, [pc, #8]	; (4007a8 <system_init_flash+0x44>)
  40079e:	601a      	str	r2, [r3, #0]
  4007a0:	4770      	bx	lr
  4007a2:	bf00      	nop
  4007a4:	01312cff 	.word	0x01312cff
  4007a8:	400e0a00 	.word	0x400e0a00
  4007ac:	026259ff 	.word	0x026259ff
  4007b0:	04000100 	.word	0x04000100
  4007b4:	039386ff 	.word	0x039386ff
  4007b8:	04000200 	.word	0x04000200
  4007bc:	04c4b3ff 	.word	0x04c4b3ff
  4007c0:	04000300 	.word	0x04000300

004007c4 <main>:
uint8_t position = 1;
uint16_t bpm = 120;
uint8_t brightness = 0x01;

int main (void)
{
  4007c4:	b570      	push	{r4, r5, r6, lr}
	sysclk_init();				//initialize system clock
  4007c6:	4b32      	ldr	r3, [pc, #200]	; (400890 <main+0xcc>)
  4007c8:	4798      	blx	r3
	WDT->WDT_MR = WDT_MR_WDDIS; //disable watchdog timer
  4007ca:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4007ce:	4b31      	ldr	r3, [pc, #196]	; (400894 <main+0xd0>)
  4007d0:	605a      	str	r2, [r3, #4]
	board_init();				//board init (currently empty)
  4007d2:	4b31      	ldr	r3, [pc, #196]	; (400898 <main+0xd4>)
  4007d4:	4798      	blx	r3
	SPI_init();
  4007d6:	4b31      	ldr	r3, [pc, #196]	; (40089c <main+0xd8>)
  4007d8:	4798      	blx	r3
	timers_init();				//initiate timer for Flashing LED on PA20
  4007da:	4b31      	ldr	r3, [pc, #196]	; (4008a0 <main+0xdc>)
  4007dc:	4798      	blx	r3
	update_timers(bpm);
  4007de:	4b31      	ldr	r3, [pc, #196]	; (4008a4 <main+0xe0>)
  4007e0:	8818      	ldrh	r0, [r3, #0]
  4007e2:	4b31      	ldr	r3, [pc, #196]	; (4008a8 <main+0xe4>)
  4007e4:	4798      	blx	r3

		//Set Write Command, Function, and BC Bits
		SPI_byteSend(0x94);
  4007e6:	2094      	movs	r0, #148	; 0x94
  4007e8:	4c30      	ldr	r4, [pc, #192]	; (4008ac <main+0xe8>)
  4007ea:	47a0      	blx	r4
		SPI_byteSend(0x5F);
  4007ec:	205f      	movs	r0, #95	; 0x5f
  4007ee:	47a0      	blx	r4
		SPI_byteSend(0xFF);
  4007f0:	20ff      	movs	r0, #255	; 0xff
  4007f2:	47a0      	blx	r4
		SPI_byteSend(0x80);
  4007f4:	2080      	movs	r0, #128	; 0x80
  4007f6:	47a0      	blx	r4
  4007f8:	2418      	movs	r4, #24
	
		//set PWM GrayScale Bits (BITS 191-0)
		for (int i = 0; i < 24; i++){
			SPI_byteSend(brightness);
  4007fa:	4e2d      	ldr	r6, [pc, #180]	; (4008b0 <main+0xec>)
  4007fc:	4d2b      	ldr	r5, [pc, #172]	; (4008ac <main+0xe8>)
  4007fe:	7830      	ldrb	r0, [r6, #0]
  400800:	47a8      	blx	r5
		SPI_byteSend(0x5F);
		SPI_byteSend(0xFF);
		SPI_byteSend(0x80);
	
		//set PWM GrayScale Bits (BITS 191-0)
		for (int i = 0; i < 24; i++){
  400802:	3c01      	subs	r4, #1
  400804:	d1fb      	bne.n	4007fe <main+0x3a>
			SPI_byteSend(brightness);
		}
	
		//Set Write Command, Function, and BC Bits
		SPI_byteSend(0x94);
  400806:	2094      	movs	r0, #148	; 0x94
  400808:	4c28      	ldr	r4, [pc, #160]	; (4008ac <main+0xe8>)
  40080a:	47a0      	blx	r4
		SPI_byteSend(0x5F);
  40080c:	205f      	movs	r0, #95	; 0x5f
  40080e:	47a0      	blx	r4
		SPI_byteSend(0xFF);
  400810:	20ff      	movs	r0, #255	; 0xff
  400812:	47a0      	blx	r4
		SPI_byteSend(0xFF);
  400814:	20ff      	movs	r0, #255	; 0xff
  400816:	47a0      	blx	r4
  400818:	2418      	movs	r4, #24
	
		//set PWM GrayScale Bits (BITS 191-0)
		for (int i = 0; i < 24; i++){
			SPI_byteSend(brightness);
  40081a:	4e25      	ldr	r6, [pc, #148]	; (4008b0 <main+0xec>)
  40081c:	4d23      	ldr	r5, [pc, #140]	; (4008ac <main+0xe8>)
  40081e:	7830      	ldrb	r0, [r6, #0]
  400820:	47a8      	blx	r5
		SPI_byteSend(0x5F);
		SPI_byteSend(0xFF);
		SPI_byteSend(0xFF);
	
		//set PWM GrayScale Bits (BITS 191-0)
		for (int i = 0; i < 24; i++){
  400822:	3c01      	subs	r4, #1
  400824:	d1fb      	bne.n	40081e <main+0x5a>
			SPI_byteSend(brightness);
		}
		
		delay_ms(2.74);
  400826:	f243 70ce 	movw	r0, #14286	; 0x37ce
  40082a:	4b22      	ldr	r3, [pc, #136]	; (4008b4 <main+0xf0>)
  40082c:	4798      	blx	r3

	while (1)
	{
  
		if (position == 0){
  40082e:	4822      	ldr	r0, [pc, #136]	; (4008b8 <main+0xf4>)
			REG_PIOA_CODR |= PIO_PER_P16; //turn Center LED on
			REG_PIOA_CODR |= PIO_PER_P17; //turn Right LED off
		}

		else if (position == 2){
			REG_PIOA_CODR |= PIO_PER_P15; //turn Left LED off
  400830:	4b22      	ldr	r3, [pc, #136]	; (4008bc <main+0xf8>)
			REG_PIOA_CODR |= PIO_PER_P16; //turn Center LED off
			REG_PIOA_SODR |= PIO_PER_P17; //turn Right LED on
  400832:	4923      	ldr	r1, [pc, #140]	; (4008c0 <main+0xfc>)
		delay_ms(2.74);

	while (1)
	{
  
		if (position == 0){
  400834:	7802      	ldrb	r2, [r0, #0]
  400836:	b962      	cbnz	r2, 400852 <main+0x8e>
			REG_PIOA_CODR |= PIO_PER_P15; //turn Left LED on
  400838:	681a      	ldr	r2, [r3, #0]
  40083a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
  40083e:	601a      	str	r2, [r3, #0]
			REG_PIOA_SODR |= PIO_PER_P16; //turn Center LED off
  400840:	680a      	ldr	r2, [r1, #0]
  400842:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  400846:	600a      	str	r2, [r1, #0]
			REG_PIOA_CODR |= PIO_PER_P17; //turn Right LED off
  400848:	681a      	ldr	r2, [r3, #0]
  40084a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
  40084e:	601a      	str	r2, [r3, #0]
  400850:	e7f0      	b.n	400834 <main+0x70>
		}

		else if (position == 1){
  400852:	2a01      	cmp	r2, #1
  400854:	d10c      	bne.n	400870 <main+0xac>
			REG_PIOA_SODR |= PIO_PER_P15; //turn Left LED off
  400856:	680a      	ldr	r2, [r1, #0]
  400858:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
  40085c:	600a      	str	r2, [r1, #0]
			REG_PIOA_CODR |= PIO_PER_P16; //turn Center LED on
  40085e:	681a      	ldr	r2, [r3, #0]
  400860:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  400864:	601a      	str	r2, [r3, #0]
			REG_PIOA_CODR |= PIO_PER_P17; //turn Right LED off
  400866:	681a      	ldr	r2, [r3, #0]
  400868:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
  40086c:	601a      	str	r2, [r3, #0]
  40086e:	e7e1      	b.n	400834 <main+0x70>
		}

		else if (position == 2){
  400870:	2a02      	cmp	r2, #2
  400872:	d1df      	bne.n	400834 <main+0x70>
			REG_PIOA_CODR |= PIO_PER_P15; //turn Left LED off
  400874:	681a      	ldr	r2, [r3, #0]
  400876:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
  40087a:	601a      	str	r2, [r3, #0]
			REG_PIOA_CODR |= PIO_PER_P16; //turn Center LED off
  40087c:	681a      	ldr	r2, [r3, #0]
  40087e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  400882:	601a      	str	r2, [r3, #0]
			REG_PIOA_SODR |= PIO_PER_P17; //turn Right LED on
  400884:	680a      	ldr	r2, [r1, #0]
  400886:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
  40088a:	600a      	str	r2, [r1, #0]
  40088c:	e7d2      	b.n	400834 <main+0x70>
  40088e:	bf00      	nop
  400890:	00400471 	.word	0x00400471
  400894:	400e1450 	.word	0x400e1450
  400898:	0040045d 	.word	0x0040045d
  40089c:	00400181 	.word	0x00400181
  4008a0:	00400215 	.word	0x00400215
  4008a4:	20000012 	.word	0x20000012
  4008a8:	00400291 	.word	0x00400291
  4008ac:	004001f9 	.word	0x004001f9
  4008b0:	20000010 	.word	0x20000010
  4008b4:	20000001 	.word	0x20000001
  4008b8:	20000011 	.word	0x20000011
  4008bc:	400e0e34 	.word	0x400e0e34
  4008c0:	400e0e30 	.word	0x400e0e30

004008c4 <PIOA_Handler>:

	}
}

//turn LED ON/OFF when interrupt triggered on PA12
void PIOA_Handler(void){
  4008c4:	b570      	push	{r4, r5, r6, lr}

	uint32_t status = REG_PIOA_ISR;	//read PIOA interrupt status & clear interrupt flags
  4008c6:	4b50      	ldr	r3, [pc, #320]	; (400a08 <PIOA_Handler+0x144>)
  4008c8:	681b      	ldr	r3, [r3, #0]

	if ((status & PIO_ISR_P12)){	//check if Encoder Button was pressed
  4008ca:	f413 5f80 	tst.w	r3, #4096	; 0x1000
  4008ce:	d006      	beq.n	4008de <PIOA_Handler+0x1a>

		position = 1;	//reset positon to center
  4008d0:	2201      	movs	r2, #1
  4008d2:	4b4e      	ldr	r3, [pc, #312]	; (400a0c <PIOA_Handler+0x148>)
  4008d4:	701a      	strb	r2, [r3, #0]
	    bpm = 120;
  4008d6:	2278      	movs	r2, #120	; 0x78
  4008d8:	4b4d      	ldr	r3, [pc, #308]	; (400a10 <PIOA_Handler+0x14c>)
  4008da:	801a      	strh	r2, [r3, #0]
  4008dc:	e08e      	b.n	4009fc <PIOA_Handler+0x138>
	}

	else {	//  handle Encoder signal inputs

		//read Encoder input A
		bool A_in = REG_PIOA_PDSR & PIO_ODSR_P5;
  4008de:	4a4d      	ldr	r2, [pc, #308]	; (400a14 <PIOA_Handler+0x150>)
  4008e0:	6813      	ldr	r3, [r2, #0]
		//read Encoder input B
		bool B_in = REG_PIOA_PDSR & PIO_ODSR_P6;
  4008e2:	6812      	ldr	r2, [r2, #0]

		A_seq = A_seq << 1;
		A_seq |= A_in;

		B_seq = B_seq << 1;
  4008e4:	494c      	ldr	r1, [pc, #304]	; (400a18 <PIOA_Handler+0x154>)
		B_seq |= B_in;
  4008e6:	7808      	ldrb	r0, [r1, #0]
  4008e8:	f3c2 1280 	ubfx	r2, r2, #6, #1
  4008ec:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
		//read Encoder input A
		bool A_in = REG_PIOA_PDSR & PIO_ODSR_P5;
		//read Encoder input B
		bool B_in = REG_PIOA_PDSR & PIO_ODSR_P6;

		A_seq = A_seq << 1;
  4008f0:	484a      	ldr	r0, [pc, #296]	; (400a1c <PIOA_Handler+0x158>)
		A_seq |= A_in;

		B_seq = B_seq << 1;
		B_seq |= B_in;

		A_seq &= 0b00001111;
  4008f2:	7804      	ldrb	r4, [r0, #0]
  4008f4:	f3c3 1340 	ubfx	r3, r3, #5, #1
  4008f8:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
  4008fc:	f003 030f 	and.w	r3, r3, #15
  400900:	7003      	strb	r3, [r0, #0]
		B_seq &= 0b00001111;
  400902:	f002 020f 	and.w	r2, r2, #15
  400906:	700a      	strb	r2, [r1, #0]

		if ((A_seq == 0b00001001) && (B_seq == 0b00000011)){
  400908:	2b09      	cmp	r3, #9
  40090a:	d13c      	bne.n	400986 <PIOA_Handler+0xc2>
  40090c:	2a03      	cmp	r2, #3
  40090e:	d175      	bne.n	4009fc <PIOA_Handler+0x138>

			if (position < 2)	//Check if not at Right-most LED
  400910:	4b3e      	ldr	r3, [pc, #248]	; (400a0c <PIOA_Handler+0x148>)
  400912:	781b      	ldrb	r3, [r3, #0]
  400914:	2b01      	cmp	r3, #1
  400916:	d802      	bhi.n	40091e <PIOA_Handler+0x5a>
			position++;		//Move position right
  400918:	3301      	adds	r3, #1
  40091a:	4a3c      	ldr	r2, [pc, #240]	; (400a0c <PIOA_Handler+0x148>)
  40091c:	7013      	strb	r3, [r2, #0]
			if(bpm < 999) {
  40091e:	4b3c      	ldr	r3, [pc, #240]	; (400a10 <PIOA_Handler+0x14c>)
  400920:	881b      	ldrh	r3, [r3, #0]
  400922:	f240 32e6 	movw	r2, #998	; 0x3e6
  400926:	4293      	cmp	r3, r2
  400928:	d802      	bhi.n	400930 <PIOA_Handler+0x6c>
				bpm+=1;
  40092a:	3301      	adds	r3, #1
  40092c:	4a38      	ldr	r2, [pc, #224]	; (400a10 <PIOA_Handler+0x14c>)
  40092e:	8013      	strh	r3, [r2, #0]
			}

			if (brightness != 0x80){
  400930:	4b3b      	ldr	r3, [pc, #236]	; (400a20 <PIOA_Handler+0x15c>)
  400932:	781b      	ldrb	r3, [r3, #0]
  400934:	2b80      	cmp	r3, #128	; 0x80
  400936:	d002      	beq.n	40093e <PIOA_Handler+0x7a>
				brightness = brightness << 1;
  400938:	005b      	lsls	r3, r3, #1
  40093a:	4a39      	ldr	r2, [pc, #228]	; (400a20 <PIOA_Handler+0x15c>)
  40093c:	7013      	strb	r3, [r2, #0]
			}
			//Set Write Command, Function, and BC Bits
			SPI_byteSend(0x94);
  40093e:	2094      	movs	r0, #148	; 0x94
  400940:	4c38      	ldr	r4, [pc, #224]	; (400a24 <PIOA_Handler+0x160>)
  400942:	47a0      	blx	r4
			SPI_byteSend(0x5F);
  400944:	205f      	movs	r0, #95	; 0x5f
  400946:	47a0      	blx	r4
			SPI_byteSend(0xFF);
  400948:	20ff      	movs	r0, #255	; 0xff
  40094a:	47a0      	blx	r4
			SPI_byteSend(0x80);
  40094c:	2080      	movs	r0, #128	; 0x80
  40094e:	47a0      	blx	r4
  400950:	2418      	movs	r4, #24

			//set PWM GrayScale Bits (BITS 191-0)
			for (int i = 0; i < 24; i++){
				SPI_byteSend(brightness);
  400952:	4e33      	ldr	r6, [pc, #204]	; (400a20 <PIOA_Handler+0x15c>)
  400954:	4d33      	ldr	r5, [pc, #204]	; (400a24 <PIOA_Handler+0x160>)
  400956:	7830      	ldrb	r0, [r6, #0]
  400958:	47a8      	blx	r5
			SPI_byteSend(0x5F);
			SPI_byteSend(0xFF);
			SPI_byteSend(0x80);

			//set PWM GrayScale Bits (BITS 191-0)
			for (int i = 0; i < 24; i++){
  40095a:	3c01      	subs	r4, #1
  40095c:	d1fb      	bne.n	400956 <PIOA_Handler+0x92>
				SPI_byteSend(brightness);
			}

			//Set Write Command, Function, and BC Bits
			SPI_byteSend(0x94);
  40095e:	2094      	movs	r0, #148	; 0x94
  400960:	4c30      	ldr	r4, [pc, #192]	; (400a24 <PIOA_Handler+0x160>)
  400962:	47a0      	blx	r4
			SPI_byteSend(0x5F);
  400964:	205f      	movs	r0, #95	; 0x5f
  400966:	47a0      	blx	r4
			SPI_byteSend(0xFF);
  400968:	20ff      	movs	r0, #255	; 0xff
  40096a:	47a0      	blx	r4
			SPI_byteSend(0xFF);
  40096c:	20ff      	movs	r0, #255	; 0xff
  40096e:	47a0      	blx	r4
  400970:	2418      	movs	r4, #24

			//set PWM GrayScale Bits (BITS 191-0)
			for (int i = 0; i < 24; i++){
				SPI_byteSend(brightness);
  400972:	4e2b      	ldr	r6, [pc, #172]	; (400a20 <PIOA_Handler+0x15c>)
  400974:	4d2b      	ldr	r5, [pc, #172]	; (400a24 <PIOA_Handler+0x160>)
  400976:	7830      	ldrb	r0, [r6, #0]
  400978:	47a8      	blx	r5
			SPI_byteSend(0x5F);
			SPI_byteSend(0xFF);
			SPI_byteSend(0xFF);

			//set PWM GrayScale Bits (BITS 191-0)
			for (int i = 0; i < 24; i++){
  40097a:	3c01      	subs	r4, #1
  40097c:	d1fb      	bne.n	400976 <PIOA_Handler+0xb2>
				SPI_byteSend(brightness);
			}
	
			delay_cycles(5*8);
  40097e:	2028      	movs	r0, #40	; 0x28
  400980:	4b29      	ldr	r3, [pc, #164]	; (400a28 <PIOA_Handler+0x164>)
  400982:	4798      	blx	r3
  400984:	e03a      	b.n	4009fc <PIOA_Handler+0x138>
		}


		else if ((A_seq == 0b00000011) && (B_seq == 0b00001001)){
  400986:	2b03      	cmp	r3, #3
  400988:	d138      	bne.n	4009fc <PIOA_Handler+0x138>
  40098a:	2a09      	cmp	r2, #9
  40098c:	d136      	bne.n	4009fc <PIOA_Handler+0x138>

			if (position > 0)	//Check if not at Left-most LED
  40098e:	4b1f      	ldr	r3, [pc, #124]	; (400a0c <PIOA_Handler+0x148>)
  400990:	781b      	ldrb	r3, [r3, #0]
  400992:	b113      	cbz	r3, 40099a <PIOA_Handler+0xd6>
			position--;		//Move position left
  400994:	3b01      	subs	r3, #1
  400996:	4a1d      	ldr	r2, [pc, #116]	; (400a0c <PIOA_Handler+0x148>)
  400998:	7013      	strb	r3, [r2, #0]
			if(bpm > 20) {
  40099a:	4b1d      	ldr	r3, [pc, #116]	; (400a10 <PIOA_Handler+0x14c>)
  40099c:	881b      	ldrh	r3, [r3, #0]
  40099e:	2b14      	cmp	r3, #20
  4009a0:	d902      	bls.n	4009a8 <PIOA_Handler+0xe4>
				bpm-=1;
  4009a2:	3b01      	subs	r3, #1
  4009a4:	4a1a      	ldr	r2, [pc, #104]	; (400a10 <PIOA_Handler+0x14c>)
  4009a6:	8013      	strh	r3, [r2, #0]
			}

			if (brightness != 0x01){
  4009a8:	4b1d      	ldr	r3, [pc, #116]	; (400a20 <PIOA_Handler+0x15c>)
  4009aa:	781b      	ldrb	r3, [r3, #0]
  4009ac:	2b01      	cmp	r3, #1
  4009ae:	d002      	beq.n	4009b6 <PIOA_Handler+0xf2>
				brightness = brightness >> 1;
  4009b0:	085b      	lsrs	r3, r3, #1
  4009b2:	4a1b      	ldr	r2, [pc, #108]	; (400a20 <PIOA_Handler+0x15c>)
  4009b4:	7013      	strb	r3, [r2, #0]
			}

			//Set Write Command, Function, and BC Bits
			SPI_byteSend(0x94);
  4009b6:	2094      	movs	r0, #148	; 0x94
  4009b8:	4c1a      	ldr	r4, [pc, #104]	; (400a24 <PIOA_Handler+0x160>)
  4009ba:	47a0      	blx	r4
			SPI_byteSend(0x5F);
  4009bc:	205f      	movs	r0, #95	; 0x5f
  4009be:	47a0      	blx	r4
			SPI_byteSend(0xFF);
  4009c0:	20ff      	movs	r0, #255	; 0xff
  4009c2:	47a0      	blx	r4
			SPI_byteSend(0x80);
  4009c4:	2080      	movs	r0, #128	; 0x80
  4009c6:	47a0      	blx	r4
  4009c8:	2418      	movs	r4, #24

			//set PWM GrayScale Bits (BITS 191-0)
			for (int i = 0; i < 24; i++){
				SPI_byteSend(brightness);
  4009ca:	4e15      	ldr	r6, [pc, #84]	; (400a20 <PIOA_Handler+0x15c>)
  4009cc:	4d15      	ldr	r5, [pc, #84]	; (400a24 <PIOA_Handler+0x160>)
  4009ce:	7830      	ldrb	r0, [r6, #0]
  4009d0:	47a8      	blx	r5
			SPI_byteSend(0x5F);
			SPI_byteSend(0xFF);
			SPI_byteSend(0x80);

			//set PWM GrayScale Bits (BITS 191-0)
			for (int i = 0; i < 24; i++){
  4009d2:	3c01      	subs	r4, #1
  4009d4:	d1fb      	bne.n	4009ce <PIOA_Handler+0x10a>
				SPI_byteSend(brightness);
			}

			//Set Write Command, Function, and BC Bits
			SPI_byteSend(0x94);
  4009d6:	2094      	movs	r0, #148	; 0x94
  4009d8:	4c12      	ldr	r4, [pc, #72]	; (400a24 <PIOA_Handler+0x160>)
  4009da:	47a0      	blx	r4
			SPI_byteSend(0x5F);
  4009dc:	205f      	movs	r0, #95	; 0x5f
  4009de:	47a0      	blx	r4
			SPI_byteSend(0xFF);
  4009e0:	20ff      	movs	r0, #255	; 0xff
  4009e2:	47a0      	blx	r4
			SPI_byteSend(0xFF);
  4009e4:	20ff      	movs	r0, #255	; 0xff
  4009e6:	47a0      	blx	r4
  4009e8:	2418      	movs	r4, #24

			//set PWM GrayScale Bits (BITS 191-0)
			for (int i = 0; i < 24; i++){
				SPI_byteSend(brightness);
  4009ea:	4e0d      	ldr	r6, [pc, #52]	; (400a20 <PIOA_Handler+0x15c>)
  4009ec:	4d0d      	ldr	r5, [pc, #52]	; (400a24 <PIOA_Handler+0x160>)
  4009ee:	7830      	ldrb	r0, [r6, #0]
  4009f0:	47a8      	blx	r5
			SPI_byteSend(0x5F);
			SPI_byteSend(0xFF);
			SPI_byteSend(0xFF);

			//set PWM GrayScale Bits (BITS 191-0)
			for (int i = 0; i < 24; i++){
  4009f2:	3c01      	subs	r4, #1
  4009f4:	d1fb      	bne.n	4009ee <PIOA_Handler+0x12a>
				SPI_byteSend(brightness);
			}
	
			delay_cycles(5*8);
  4009f6:	2028      	movs	r0, #40	; 0x28
  4009f8:	4b0b      	ldr	r3, [pc, #44]	; (400a28 <PIOA_Handler+0x164>)
  4009fa:	4798      	blx	r3
		}
	}

	update_timers(bpm);
  4009fc:	4b04      	ldr	r3, [pc, #16]	; (400a10 <PIOA_Handler+0x14c>)
  4009fe:	8818      	ldrh	r0, [r3, #0]
  400a00:	4b0a      	ldr	r3, [pc, #40]	; (400a2c <PIOA_Handler+0x168>)
  400a02:	4798      	blx	r3
  400a04:	bd70      	pop	{r4, r5, r6, pc}
  400a06:	bf00      	nop
  400a08:	400e0e4c 	.word	0x400e0e4c
  400a0c:	20000011 	.word	0x20000011
  400a10:	20000012 	.word	0x20000012
  400a14:	400e0e3c 	.word	0x400e0e3c
  400a18:	2000045d 	.word	0x2000045d
  400a1c:	2000045c 	.word	0x2000045c
  400a20:	20000010 	.word	0x20000010
  400a24:	004001f9 	.word	0x004001f9
  400a28:	20000001 	.word	0x20000001
  400a2c:	00400291 	.word	0x00400291

00400a30 <__libc_init_array>:
  400a30:	b570      	push	{r4, r5, r6, lr}
  400a32:	4e0f      	ldr	r6, [pc, #60]	; (400a70 <__libc_init_array+0x40>)
  400a34:	4d0f      	ldr	r5, [pc, #60]	; (400a74 <__libc_init_array+0x44>)
  400a36:	1b76      	subs	r6, r6, r5
  400a38:	10b6      	asrs	r6, r6, #2
  400a3a:	bf18      	it	ne
  400a3c:	2400      	movne	r4, #0
  400a3e:	d005      	beq.n	400a4c <__libc_init_array+0x1c>
  400a40:	3401      	adds	r4, #1
  400a42:	f855 3b04 	ldr.w	r3, [r5], #4
  400a46:	4798      	blx	r3
  400a48:	42a6      	cmp	r6, r4
  400a4a:	d1f9      	bne.n	400a40 <__libc_init_array+0x10>
  400a4c:	4e0a      	ldr	r6, [pc, #40]	; (400a78 <__libc_init_array+0x48>)
  400a4e:	4d0b      	ldr	r5, [pc, #44]	; (400a7c <__libc_init_array+0x4c>)
  400a50:	1b76      	subs	r6, r6, r5
  400a52:	f000 f88f 	bl	400b74 <_init>
  400a56:	10b6      	asrs	r6, r6, #2
  400a58:	bf18      	it	ne
  400a5a:	2400      	movne	r4, #0
  400a5c:	d006      	beq.n	400a6c <__libc_init_array+0x3c>
  400a5e:	3401      	adds	r4, #1
  400a60:	f855 3b04 	ldr.w	r3, [r5], #4
  400a64:	4798      	blx	r3
  400a66:	42a6      	cmp	r6, r4
  400a68:	d1f9      	bne.n	400a5e <__libc_init_array+0x2e>
  400a6a:	bd70      	pop	{r4, r5, r6, pc}
  400a6c:	bd70      	pop	{r4, r5, r6, pc}
  400a6e:	bf00      	nop
  400a70:	00400b80 	.word	0x00400b80
  400a74:	00400b80 	.word	0x00400b80
  400a78:	00400b88 	.word	0x00400b88
  400a7c:	00400b80 	.word	0x00400b80

00400a80 <register_fini>:
  400a80:	4b02      	ldr	r3, [pc, #8]	; (400a8c <register_fini+0xc>)
  400a82:	b113      	cbz	r3, 400a8a <register_fini+0xa>
  400a84:	4802      	ldr	r0, [pc, #8]	; (400a90 <register_fini+0x10>)
  400a86:	f000 b805 	b.w	400a94 <atexit>
  400a8a:	4770      	bx	lr
  400a8c:	00000000 	.word	0x00000000
  400a90:	00400aa1 	.word	0x00400aa1

00400a94 <atexit>:
  400a94:	2300      	movs	r3, #0
  400a96:	4601      	mov	r1, r0
  400a98:	461a      	mov	r2, r3
  400a9a:	4618      	mov	r0, r3
  400a9c:	f000 b814 	b.w	400ac8 <__register_exitproc>

00400aa0 <__libc_fini_array>:
  400aa0:	b538      	push	{r3, r4, r5, lr}
  400aa2:	4d07      	ldr	r5, [pc, #28]	; (400ac0 <__libc_fini_array+0x20>)
  400aa4:	4c07      	ldr	r4, [pc, #28]	; (400ac4 <__libc_fini_array+0x24>)
  400aa6:	1b2c      	subs	r4, r5, r4
  400aa8:	10a4      	asrs	r4, r4, #2
  400aaa:	d005      	beq.n	400ab8 <__libc_fini_array+0x18>
  400aac:	3c01      	subs	r4, #1
  400aae:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  400ab2:	4798      	blx	r3
  400ab4:	2c00      	cmp	r4, #0
  400ab6:	d1f9      	bne.n	400aac <__libc_fini_array+0xc>
  400ab8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  400abc:	f000 b864 	b.w	400b88 <_fini>
  400ac0:	00400b98 	.word	0x00400b98
  400ac4:	00400b94 	.word	0x00400b94

00400ac8 <__register_exitproc>:
  400ac8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  400acc:	4c25      	ldr	r4, [pc, #148]	; (400b64 <__register_exitproc+0x9c>)
  400ace:	6825      	ldr	r5, [r4, #0]
  400ad0:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
  400ad4:	4606      	mov	r6, r0
  400ad6:	4688      	mov	r8, r1
  400ad8:	4692      	mov	sl, r2
  400ada:	4699      	mov	r9, r3
  400adc:	b3c4      	cbz	r4, 400b50 <__register_exitproc+0x88>
  400ade:	6860      	ldr	r0, [r4, #4]
  400ae0:	281f      	cmp	r0, #31
  400ae2:	dc17      	bgt.n	400b14 <__register_exitproc+0x4c>
  400ae4:	1c43      	adds	r3, r0, #1
  400ae6:	b176      	cbz	r6, 400b06 <__register_exitproc+0x3e>
  400ae8:	eb04 0580 	add.w	r5, r4, r0, lsl #2
  400aec:	2201      	movs	r2, #1
  400aee:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
  400af2:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
  400af6:	4082      	lsls	r2, r0
  400af8:	4311      	orrs	r1, r2
  400afa:	2e02      	cmp	r6, #2
  400afc:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
  400b00:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
  400b04:	d01e      	beq.n	400b44 <__register_exitproc+0x7c>
  400b06:	3002      	adds	r0, #2
  400b08:	6063      	str	r3, [r4, #4]
  400b0a:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
  400b0e:	2000      	movs	r0, #0
  400b10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  400b14:	4b14      	ldr	r3, [pc, #80]	; (400b68 <__register_exitproc+0xa0>)
  400b16:	b303      	cbz	r3, 400b5a <__register_exitproc+0x92>
  400b18:	f44f 70c8 	mov.w	r0, #400	; 0x190
  400b1c:	f3af 8000 	nop.w
  400b20:	4604      	mov	r4, r0
  400b22:	b1d0      	cbz	r0, 400b5a <__register_exitproc+0x92>
  400b24:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
  400b28:	2700      	movs	r7, #0
  400b2a:	e880 0088 	stmia.w	r0, {r3, r7}
  400b2e:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  400b32:	4638      	mov	r0, r7
  400b34:	2301      	movs	r3, #1
  400b36:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  400b3a:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
  400b3e:	2e00      	cmp	r6, #0
  400b40:	d0e1      	beq.n	400b06 <__register_exitproc+0x3e>
  400b42:	e7d1      	b.n	400ae8 <__register_exitproc+0x20>
  400b44:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
  400b48:	430a      	orrs	r2, r1
  400b4a:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  400b4e:	e7da      	b.n	400b06 <__register_exitproc+0x3e>
  400b50:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
  400b54:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  400b58:	e7c1      	b.n	400ade <__register_exitproc+0x16>
  400b5a:	f04f 30ff 	mov.w	r0, #4294967295
  400b5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  400b62:	bf00      	nop
  400b64:	00400b70 	.word	0x00400b70
  400b68:	00000000 	.word	0x00000000
  400b6c:	00000043 	.word	0x00000043

00400b70 <_global_impure_ptr>:
  400b70:	20000018                                ... 

00400b74 <_init>:
  400b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400b76:	bf00      	nop
  400b78:	bcf8      	pop	{r3, r4, r5, r6, r7}
  400b7a:	bc08      	pop	{r3}
  400b7c:	469e      	mov	lr, r3
  400b7e:	4770      	bx	lr

00400b80 <__init_array_start>:
  400b80:	00400a81 	.word	0x00400a81

00400b84 <__frame_dummy_init_array_entry>:
  400b84:	004000e5                                ..@.

00400b88 <_fini>:
  400b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400b8a:	bf00      	nop
  400b8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  400b8e:	bc08      	pop	{r3}
  400b90:	469e      	mov	lr, r3
  400b92:	4770      	bx	lr

00400b94 <__fini_array_start>:
  400b94:	004000c1 	.word	0x004000c1

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	d1fb      	bne.n	20000000 <portable_delay_cycles>
20000008:	4770      	bx	lr
2000000a:	bf00      	nop

2000000c <SystemCoreClock>:
2000000c:	0900 003d                                   ..=.

20000010 <brightness>:
20000010:	0101                                             .

20000011 <position>:
20000011:	7801                                             .

20000012 <bpm>:
20000012:	0078 0000 0000                              x.....

20000018 <impure_data>:
20000018:	0000 0000 0304 2000 036c 2000 03d4 2000     ....... l.. ... 
	...
2000004c:	0b6c 0040 0000 0000 0000 0000 0000 0000     l.@.............
	...
200000c0:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
200000d0:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...
