
gatorsynth_sequencer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004e24  00400000  00400000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000628  20000000  00404e24  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  2 .bss          0000810c  20000628  0040544c  00020628  2**2
                  ALLOC
  3 .stack        00003004  20008734  0040d558  00020628  2**0
                  ALLOC
  4 .ARM.attributes 0000002a  00000000  00000000  00020628  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020652  2**0
                  CONTENTS, READONLY
  6 .debug_info   00008de1  00000000  00000000  000206ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002188  00000000  00000000  0002948c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00003461  00000000  00000000  0002b614  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000740  00000000  00000000  0002ea75  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000638  00000000  00000000  0002f1b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00012739  00000000  00000000  0002f7ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000fb06  00000000  00000000  00041f26  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0003d8f3  00000000  00000000  00051a2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001030  00000000  00000000  0008f320  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <_sfixed>:
  400000:	2000b738 	.word	0x2000b738
  400004:	00403155 	.word	0x00403155
  400008:	00403151 	.word	0x00403151
  40000c:	00403151 	.word	0x00403151
  400010:	00403151 	.word	0x00403151
  400014:	00403151 	.word	0x00403151
  400018:	00403151 	.word	0x00403151
	...
  40002c:	00403151 	.word	0x00403151
  400030:	00403151 	.word	0x00403151
  400034:	00000000 	.word	0x00000000
  400038:	00403151 	.word	0x00403151
  40003c:	00403151 	.word	0x00403151
  400040:	00403151 	.word	0x00403151
  400044:	00403151 	.word	0x00403151
  400048:	00403151 	.word	0x00403151
  40004c:	00403151 	.word	0x00403151
  400050:	00403151 	.word	0x00403151
  400054:	00403151 	.word	0x00403151
  400058:	00403151 	.word	0x00403151
  40005c:	00000000 	.word	0x00000000
  400060:	00403151 	.word	0x00403151
  400064:	00403151 	.word	0x00403151
  400068:	00403151 	.word	0x00403151
  40006c:	00402755 	.word	0x00402755
  400070:	004035d9 	.word	0x004035d9
  400074:	00401779 	.word	0x00401779
  400078:	00403151 	.word	0x00403151
  40007c:	00403151 	.word	0x00403151
  400080:	00403151 	.word	0x00403151
  400084:	00403151 	.word	0x00403151
  400088:	00000000 	.word	0x00000000
  40008c:	00403151 	.word	0x00403151
  400090:	00403151 	.word	0x00403151
  400094:	00403151 	.word	0x00403151
  400098:	00403151 	.word	0x00403151
  40009c:	00402e6d 	.word	0x00402e6d
  4000a0:	00403151 	.word	0x00403151
  4000a4:	00403151 	.word	0x00403151
  4000a8:	00403151 	.word	0x00403151
  4000ac:	00403151 	.word	0x00403151
  4000b0:	00403151 	.word	0x00403151
  4000b4:	004001bd 	.word	0x004001bd
  4000b8:	00403151 	.word	0x00403151
  4000bc:	00403151 	.word	0x00403151

004000c0 <__do_global_dtors_aux>:
  4000c0:	b510      	push	{r4, lr}
  4000c2:	4c05      	ldr	r4, [pc, #20]	; (4000d8 <__do_global_dtors_aux+0x18>)
  4000c4:	7823      	ldrb	r3, [r4, #0]
  4000c6:	b933      	cbnz	r3, 4000d6 <__do_global_dtors_aux+0x16>
  4000c8:	4b04      	ldr	r3, [pc, #16]	; (4000dc <__do_global_dtors_aux+0x1c>)
  4000ca:	b113      	cbz	r3, 4000d2 <__do_global_dtors_aux+0x12>
  4000cc:	4804      	ldr	r0, [pc, #16]	; (4000e0 <__do_global_dtors_aux+0x20>)
  4000ce:	f3af 8000 	nop.w
  4000d2:	2301      	movs	r3, #1
  4000d4:	7023      	strb	r3, [r4, #0]
  4000d6:	bd10      	pop	{r4, pc}
  4000d8:	20000628 	.word	0x20000628
  4000dc:	00000000 	.word	0x00000000
  4000e0:	00404e24 	.word	0x00404e24

004000e4 <frame_dummy>:
  4000e4:	4b08      	ldr	r3, [pc, #32]	; (400108 <frame_dummy+0x24>)
  4000e6:	b510      	push	{r4, lr}
  4000e8:	b11b      	cbz	r3, 4000f2 <frame_dummy+0xe>
  4000ea:	4908      	ldr	r1, [pc, #32]	; (40010c <frame_dummy+0x28>)
  4000ec:	4808      	ldr	r0, [pc, #32]	; (400110 <frame_dummy+0x2c>)
  4000ee:	f3af 8000 	nop.w
  4000f2:	4808      	ldr	r0, [pc, #32]	; (400114 <frame_dummy+0x30>)
  4000f4:	6803      	ldr	r3, [r0, #0]
  4000f6:	b903      	cbnz	r3, 4000fa <frame_dummy+0x16>
  4000f8:	bd10      	pop	{r4, pc}
  4000fa:	4b07      	ldr	r3, [pc, #28]	; (400118 <frame_dummy+0x34>)
  4000fc:	2b00      	cmp	r3, #0
  4000fe:	d0fb      	beq.n	4000f8 <frame_dummy+0x14>
  400100:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400104:	4718      	bx	r3
  400106:	bf00      	nop
  400108:	00000000 	.word	0x00000000
  40010c:	2000062c 	.word	0x2000062c
  400110:	00404e24 	.word	0x00404e24
  400114:	00404e24 	.word	0x00404e24
  400118:	00000000 	.word	0x00000000

0040011c <ADC_init>:
 //define register to read CH2 conversion from
#define REG_ADC_CDR2     (*(__I  uint32_t*)0x40038058U) /**< \brief (ADC) Channel Data Register */ 

 void ADC_init(){

	note_length = 5000;
  40011c:	f241 3288 	movw	r2, #5000	; 0x1388
  400120:	4b0f      	ldr	r3, [pc, #60]	; (400160 <ADC_init+0x44>)
  400122:	801a      	strh	r2, [r3, #0]

	//enable peripheral clock for ADC
	REG_PMC_PCER0 |= PMC_PCER0_PID29;
  400124:	4a0f      	ldr	r2, [pc, #60]	; (400164 <ADC_init+0x48>)
  400126:	6813      	ldr	r3, [r2, #0]
  400128:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  40012c:	6013      	str	r3, [r2, #0]
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  40012e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400132:	4b0d      	ldr	r3, [pc, #52]	; (400168 <ADC_init+0x4c>)
  400134:	601a      	str	r2, [r3, #0]

	//enable interrupts for ADC
	NVIC_EnableIRQ(ADC_IRQn);

	//enable Channel 2 of ADC (PORTA 19)
	REG_ADC_CHER |= ADC_CHER_CH2;
  400136:	4a0d      	ldr	r2, [pc, #52]	; (40016c <ADC_init+0x50>)
  400138:	6813      	ldr	r3, [r2, #0]
  40013a:	f043 0304 	orr.w	r3, r3, #4
  40013e:	6013      	str	r3, [r2, #0]

	//configure ADC clock to 5MHz
	REG_ADC_MR |= ADC_MR_PRESCAL(9);
  400140:	3a0c      	subs	r2, #12
  400142:	6813      	ldr	r3, [r2, #0]
  400144:	f443 6310 	orr.w	r3, r3, #2304	; 0x900
  400148:	6013      	str	r3, [r2, #0]

	//enable interrupt for end of ADC conversion on CH2
	REG_ADC_IER |= ADC_IER_EOC2;
  40014a:	3220      	adds	r2, #32
  40014c:	6813      	ldr	r3, [r2, #0]
  40014e:	f043 0304 	orr.w	r3, r3, #4
  400152:	6013      	str	r3, [r2, #0]

	//start initial conversion
	REG_ADC_CR |= ADC_CR_START;
  400154:	3a24      	subs	r2, #36	; 0x24
  400156:	6813      	ldr	r3, [r2, #0]
  400158:	f043 0302 	orr.w	r3, r3, #2
  40015c:	6013      	str	r3, [r2, #0]
  40015e:	4770      	bx	lr
  400160:	20008724 	.word	0x20008724
  400164:	400e0410 	.word	0x400e0410
  400168:	e000e100 	.word	0xe000e100
  40016c:	40038010 	.word	0x40038010

00400170 <convert_NoteLength>:

 }

  void convert_NoteLength(uint32_t DAC_data){
  400170:	b508      	push	{r3, lr}

	  //get note length as a proportion of the overflow count of the timer
	  float note_float = 10000*(((float)DAC_data)/1023);
	  note_length = (uint16_t) note_float;
  400172:	4b0d      	ldr	r3, [pc, #52]	; (4001a8 <convert_NoteLength+0x38>)
  400174:	4798      	blx	r3
  400176:	490d      	ldr	r1, [pc, #52]	; (4001ac <convert_NoteLength+0x3c>)
  400178:	4b0d      	ldr	r3, [pc, #52]	; (4001b0 <convert_NoteLength+0x40>)
  40017a:	4798      	blx	r3
  40017c:	4b0d      	ldr	r3, [pc, #52]	; (4001b4 <convert_NoteLength+0x44>)
  40017e:	4798      	blx	r3
  400180:	b280      	uxth	r0, r0

	  //in case of over flow from offset
	  if (note_length > 9000){
  400182:	f242 3328 	movw	r3, #9000	; 0x2328
  400186:	4298      	cmp	r0, r3
  400188:	d903      	bls.n	400192 <convert_NoteLength+0x22>
		note_length = 9000;
  40018a:	461a      	mov	r2, r3
  40018c:	4b0a      	ldr	r3, [pc, #40]	; (4001b8 <convert_NoteLength+0x48>)
  40018e:	801a      	strh	r2, [r3, #0]
  400190:	bd08      	pop	{r3, pc}
	  }
	  else if (note_length < 1000){
  400192:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
  400196:	d302      	bcc.n	40019e <convert_NoteLength+0x2e>

  void convert_NoteLength(uint32_t DAC_data){

	  //get note length as a proportion of the overflow count of the timer
	  float note_float = 10000*(((float)DAC_data)/1023);
	  note_length = (uint16_t) note_float;
  400198:	4b07      	ldr	r3, [pc, #28]	; (4001b8 <convert_NoteLength+0x48>)
  40019a:	8018      	strh	r0, [r3, #0]
  40019c:	bd08      	pop	{r3, pc}
	  //in case of over flow from offset
	  if (note_length > 9000){
		note_length = 9000;
	  }
	  else if (note_length < 1000){
		note_length = 1000;
  40019e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  4001a2:	4b05      	ldr	r3, [pc, #20]	; (4001b8 <convert_NoteLength+0x48>)
  4001a4:	801a      	strh	r2, [r3, #0]
  4001a6:	bd08      	pop	{r3, pc}
  4001a8:	004037b1 	.word	0x004037b1
  4001ac:	411c671a 	.word	0x411c671a
  4001b0:	00403861 	.word	0x00403861
  4001b4:	00403b01 	.word	0x00403b01
  4001b8:	20008724 	.word	0x20008724

004001bc <ADC_Handler>:
	  }

  }

 void ADC_Handler(){
  4001bc:	b508      	push	{r3, lr}

	//read the interrupt flag and clear it
	uint32_t status = REG_ADC_ISR;
  4001be:	4b05      	ldr	r3, [pc, #20]	; (4001d4 <ADC_Handler+0x18>)
  4001c0:	681b      	ldr	r3, [r3, #0]

	//store the data
	uint32_t data;

	//check for CH2 interrupt
	if ((status & ADC_IMR_EOC2) > 0){
  4001c2:	f013 0f04 	tst.w	r3, #4
		data = REG_ADC_CDR2;	//read ADC data off CH2
  4001c6:	bf1c      	itt	ne
  4001c8:	4b03      	ldrne	r3, [pc, #12]	; (4001d8 <ADC_Handler+0x1c>)
  4001ca:	6818      	ldrne	r0, [r3, #0]
	}

	convert_NoteLength(data);
  4001cc:	4b03      	ldr	r3, [pc, #12]	; (4001dc <ADC_Handler+0x20>)
  4001ce:	4798      	blx	r3
  4001d0:	bd08      	pop	{r3, pc}
  4001d2:	bf00      	nop
  4001d4:	40038030 	.word	0x40038030
  4001d8:	40038058 	.word	0x40038058
  4001dc:	00400171 	.word	0x00400171

004001e0 <twi_master_read>:
 * \param p_packet Packet information and data (see \ref twi_packet_t).
 *
 * \return TWI_SUCCESS if all bytes were read, error code otherwise.
 */
uint32_t twi_master_read(Twi *p_twi, twi_packet_t *p_packet)
{
  4001e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	//cpu_irq_disable();
	
	uint32_t status;
	uint32_t cnt = p_packet->length;
  4001e4:	68cb      	ldr	r3, [r1, #12]
	uint8_t *buffer = p_packet->buffer;
	uint8_t stop_sent = 0;
	uint32_t timeout = TWI_TIMEOUT;;
	
	/* Check argument */
	if (cnt == 0) {
  4001e6:	2b00      	cmp	r3, #0
  4001e8:	d049      	beq.n	40027e <twi_master_read+0x9e>
{
	//cpu_irq_disable();
	
	uint32_t status;
	uint32_t cnt = p_packet->length;
	uint8_t *buffer = p_packet->buffer;
  4001ea:	688c      	ldr	r4, [r1, #8]
	if (cnt == 0) {
		return TWI_INVALID_ARGUMENT;
	}

	/* Set read mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
  4001ec:	2600      	movs	r6, #0
  4001ee:	6046      	str	r6, [r0, #4]
	p_twi->TWI_MMR = TWI_MMR_MREAD | TWI_MMR_DADR(p_packet->chip) |
  4001f0:	684a      	ldr	r2, [r1, #4]
  4001f2:	0212      	lsls	r2, r2, #8
  4001f4:	f402 7240 	and.w	r2, r2, #768	; 0x300
  4001f8:	f442 5580 	orr.w	r5, r2, #4096	; 0x1000
  4001fc:	7c0a      	ldrb	r2, [r1, #16]
  4001fe:	0412      	lsls	r2, r2, #16
  400200:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
  400204:	432a      	orrs	r2, r5
  400206:	6042      	str	r2, [r0, #4]
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
  400208:	60c6      	str	r6, [r0, #12]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
  40020a:	684d      	ldr	r5, [r1, #4]
 */
static uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
	uint32_t val;

	if (len == 0)
  40020c:	b15d      	cbz	r5, 400226 <twi_master_read+0x46>
		return 0;

	val = addr[0];
  40020e:	780a      	ldrb	r2, [r1, #0]
	if (len > 1) {
  400210:	2d01      	cmp	r5, #1
		val <<= 8;
		val |= addr[1];
  400212:	bfc4      	itt	gt
  400214:	784e      	ldrbgt	r6, [r1, #1]
  400216:	ea46 2202 	orrgt.w	r2, r6, r2, lsl #8
	}
	if (len > 2) {
  40021a:	2d02      	cmp	r5, #2
  40021c:	dd04      	ble.n	400228 <twi_master_read+0x48>
		val <<= 8;
		val |= addr[2];
  40021e:	7889      	ldrb	r1, [r1, #2]
  400220:	ea41 2202 	orr.w	r2, r1, r2, lsl #8
  400224:	e000      	b.n	400228 <twi_master_read+0x48>
static uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
	uint32_t val;

	if (len == 0)
		return 0;
  400226:	2200      	movs	r2, #0
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
  400228:	60c2      	str	r2, [r0, #12]

	/* Send a START condition */
	if (cnt == 1) {
  40022a:	2b01      	cmp	r3, #1
  40022c:	d103      	bne.n	400236 <twi_master_read+0x56>
		p_twi->TWI_CR = TWI_CR_START | TWI_CR_STOP;
  40022e:	2203      	movs	r2, #3
  400230:	6002      	str	r2, [r0, #0]
		stop_sent = 1;
  400232:	2701      	movs	r7, #1
  400234:	e02f      	b.n	400296 <twi_master_read+0xb6>
	} else {
		p_twi->TWI_CR = TWI_CR_START;
  400236:	2201      	movs	r2, #1
  400238:	6002      	str	r2, [r0, #0]
		stop_sent = 0;
  40023a:	2700      	movs	r7, #0
  40023c:	e02b      	b.n	400296 <twi_master_read+0xb6>
		if (cnt == 1  && !stop_sent) {
			p_twi->TWI_CR = TWI_CR_STOP;
			stop_sent = 1;
		}

		if (!(status & TWI_SR_RXRDY)) {
  40023e:	4629      	mov	r1, r5
		p_twi->TWI_CR = TWI_CR_START;
		stop_sent = 0;
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
  400240:	6a02      	ldr	r2, [r0, #32]
		if (status & TWI_SR_NACK) {
  400242:	f412 7f80 	tst.w	r2, #256	; 0x100
  400246:	d11d      	bne.n	400284 <twi_master_read+0xa4>
			return TWI_RECEIVE_NACK;
		}

		if (!timeout--) {
  400248:	1e4d      	subs	r5, r1, #1
  40024a:	b1f1      	cbz	r1, 40028a <twi_master_read+0xaa>
			return TWI_ERROR_TIMEOUT;
		}
				
		/* Last byte ? */
		if (cnt == 1  && !stop_sent) {
  40024c:	2b01      	cmp	r3, #1
  40024e:	d104      	bne.n	40025a <twi_master_read+0x7a>
  400250:	bb77      	cbnz	r7, 4002b0 <twi_master_read+0xd0>
			p_twi->TWI_CR = TWI_CR_STOP;
  400252:	f8c0 8000 	str.w	r8, [r0]
			stop_sent = 1;
  400256:	4667      	mov	r7, ip
  400258:	e02a      	b.n	4002b0 <twi_master_read+0xd0>
		}

		if (!(status & TWI_SR_RXRDY)) {
  40025a:	f012 0f02 	tst.w	r2, #2
  40025e:	d005      	beq.n	40026c <twi_master_read+0x8c>
			continue;
		}
		*buffer++ = p_twi->TWI_RHR;
  400260:	6b02      	ldr	r2, [r0, #48]	; 0x30
  400262:	7022      	strb	r2, [r4, #0]

		cnt--;
  400264:	3b01      	subs	r3, #1
		}

		if (!(status & TWI_SR_RXRDY)) {
			continue;
		}
		*buffer++ = p_twi->TWI_RHR;
  400266:	3401      	adds	r4, #1

		cnt--;
		timeout = TWI_TIMEOUT;
  400268:	4631      	mov	r1, r6
  40026a:	e000      	b.n	40026e <twi_master_read+0x8e>
  40026c:	4629      	mov	r1, r5
	} else {
		p_twi->TWI_CR = TWI_CR_START;
		stop_sent = 0;
	}

	while (cnt > 0) {
  40026e:	2b00      	cmp	r3, #0
  400270:	d1e6      	bne.n	400240 <twi_master_read+0x60>

		cnt--;
		timeout = TWI_TIMEOUT;
	}

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
  400272:	6a03      	ldr	r3, [r0, #32]
  400274:	f013 0f01 	tst.w	r3, #1
  400278:	d0fb      	beq.n	400272 <twi_master_read+0x92>
	}

	p_twi->TWI_SR;
  40027a:	6a03      	ldr	r3, [r0, #32]

	//cpu_irq_enable();

	return TWI_SUCCESS;
  40027c:	e01c      	b.n	4002b8 <twi_master_read+0xd8>
	uint8_t stop_sent = 0;
	uint32_t timeout = TWI_TIMEOUT;;
	
	/* Check argument */
	if (cnt == 0) {
		return TWI_INVALID_ARGUMENT;
  40027e:	f04f 0e01 	mov.w	lr, #1
  400282:	e019      	b.n	4002b8 <twi_master_read+0xd8>
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
  400284:	f04f 0e05 	mov.w	lr, #5
  400288:	e016      	b.n	4002b8 <twi_master_read+0xd8>
		}

		if (!timeout--) {
			return TWI_ERROR_TIMEOUT;
  40028a:	f04f 0e09 	mov.w	lr, #9
  40028e:	e013      	b.n	4002b8 <twi_master_read+0xd8>
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
  400290:	f04f 0e05 	mov.w	lr, #5
  400294:	e010      	b.n	4002b8 <twi_master_read+0xd8>
		p_twi->TWI_CR = TWI_CR_START;
		stop_sent = 0;
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
  400296:	6a02      	ldr	r2, [r0, #32]
		if (status & TWI_SR_NACK) {
  400298:	f412 7e80 	ands.w	lr, r2, #256	; 0x100
  40029c:	d1f8      	bne.n	400290 <twi_master_read+0xb0>
  40029e:	f643 2597 	movw	r5, #14999	; 0x3a97
			continue;
		}
		*buffer++ = p_twi->TWI_RHR;

		cnt--;
		timeout = TWI_TIMEOUT;
  4002a2:	f643 2698 	movw	r6, #15000	; 0x3a98
			return TWI_ERROR_TIMEOUT;
		}
				
		/* Last byte ? */
		if (cnt == 1  && !stop_sent) {
			p_twi->TWI_CR = TWI_CR_STOP;
  4002a6:	f04f 0802 	mov.w	r8, #2
			stop_sent = 1;
  4002aa:	f04f 0c01 	mov.w	ip, #1
  4002ae:	e7cd      	b.n	40024c <twi_master_read+0x6c>
		}

		if (!(status & TWI_SR_RXRDY)) {
  4002b0:	f012 0f02 	tst.w	r2, #2
  4002b4:	d0c3      	beq.n	40023e <twi_master_read+0x5e>
  4002b6:	e7d3      	b.n	400260 <twi_master_read+0x80>
	p_twi->TWI_SR;

	//cpu_irq_enable();

	return TWI_SUCCESS;
}
  4002b8:	4670      	mov	r0, lr
  4002ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4002be:	bf00      	nop

004002c0 <twi_master_write>:
 * \param p_packet Packet information and data (see \ref twi_packet_t).
 *
 * \return TWI_SUCCESS if all bytes were written, error code otherwise.
 */
uint32_t twi_master_write(Twi *p_twi, twi_packet_t *p_packet)
{
  4002c0:	4602      	mov	r2, r0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  4002c2:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  4002c4:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4002c8:	2000      	movs	r0, #0
  4002ca:	4b1d      	ldr	r3, [pc, #116]	; (400340 <twi_master_write+0x80>)
  4002cc:	7018      	strb	r0, [r3, #0]

	uint32_t status;
	uint32_t cnt = p_packet->length;
  4002ce:	68c8      	ldr	r0, [r1, #12]
	uint8_t *buffer = p_packet->buffer;

	/* Check argument */
	if (cnt == 0) {
  4002d0:	b360      	cbz	r0, 40032c <twi_master_write+0x6c>
 * \param p_packet Packet information and data (see \ref twi_packet_t).
 *
 * \return TWI_SUCCESS if all bytes were written, error code otherwise.
 */
uint32_t twi_master_write(Twi *p_twi, twi_packet_t *p_packet)
{
  4002d2:	b410      	push	{r4}
	cpu_irq_disable();

	uint32_t status;
	uint32_t cnt = p_packet->length;
	uint8_t *buffer = p_packet->buffer;
  4002d4:	688c      	ldr	r4, [r1, #8]
		return TWI_INVALID_ARGUMENT;
	}

	/* Set write mode, slave address and 3 internal address byte lengths */
	//p_twi->TWI_MMR = 0;
	p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip);
  4002d6:	7c0b      	ldrb	r3, [r1, #16]
  4002d8:	041b      	lsls	r3, r3, #16
  4002da:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
  4002de:	6053      	str	r3, [r2, #4]
	//p_twi->TWI_IADR = 0;
	//p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);

	/* Send all bytes */
	while (cnt > 0) {
		status = p_twi->TWI_SR;
  4002e0:	6a13      	ldr	r3, [r2, #32]
		if (status & TWI_SR_NACK) {
  4002e2:	f413 7f80 	tst.w	r3, #256	; 0x100
  4002e6:	d004      	beq.n	4002f2 <twi_master_write+0x32>
  4002e8:	e022      	b.n	400330 <twi_master_write+0x70>
	//p_twi->TWI_IADR = 0;
	//p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);

	/* Send all bytes */
	while (cnt > 0) {
		status = p_twi->TWI_SR;
  4002ea:	6a13      	ldr	r3, [r2, #32]
		if (status & TWI_SR_NACK) {
  4002ec:	f413 7f80 	tst.w	r3, #256	; 0x100
  4002f0:	d120      	bne.n	400334 <twi_master_write+0x74>
 			return TWI_RECEIVE_NACK;
 		}

		if (!(status & TWI_SR_TXRDY)) {
  4002f2:	f013 0f04 	tst.w	r3, #4
  4002f6:	d003      	beq.n	400300 <twi_master_write+0x40>
 			continue;
 		}
		p_twi->TWI_THR = *buffer++;
  4002f8:	7823      	ldrb	r3, [r4, #0]
  4002fa:	6353      	str	r3, [r2, #52]	; 0x34

		cnt--;
  4002fc:	3801      	subs	r0, #1
 		}

		if (!(status & TWI_SR_TXRDY)) {
 			continue;
 		}
		p_twi->TWI_THR = *buffer++;
  4002fe:	3401      	adds	r4, #1
	/* Set internal address for remote chip */
	//p_twi->TWI_IADR = 0;
	//p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);

	/* Send all bytes */
	while (cnt > 0) {
  400300:	2800      	cmp	r0, #0
  400302:	d1f2      	bne.n	4002ea <twi_master_write+0x2a>

		cnt--;
	}

	while (1) {
		status = p_twi->TWI_SR;
  400304:	6a13      	ldr	r3, [r2, #32]
		if (status & TWI_SR_NACK) {
  400306:	f413 7080 	ands.w	r0, r3, #256	; 0x100
  40030a:	d115      	bne.n	400338 <twi_master_write+0x78>
			return TWI_RECEIVE_NACK;
		}

		if (status & TWI_SR_TXRDY) {
  40030c:	f013 0f04 	tst.w	r3, #4
  400310:	d0f8      	beq.n	400304 <twi_master_write+0x44>
			break;
		}

	}

	p_twi->TWI_CR = TWI_CR_STOP;
  400312:	2302      	movs	r3, #2
  400314:	6013      	str	r3, [r2, #0]

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
  400316:	6a13      	ldr	r3, [r2, #32]
  400318:	f013 0f01 	tst.w	r3, #1
  40031c:	d0fb      	beq.n	400316 <twi_master_write+0x56>
	}

	cpu_irq_enable();
  40031e:	2201      	movs	r2, #1
  400320:	4b07      	ldr	r3, [pc, #28]	; (400340 <twi_master_write+0x80>)
  400322:	701a      	strb	r2, [r3, #0]
  400324:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  400328:	b662      	cpsie	i

	return TWI_SUCCESS;
  40032a:	e006      	b.n	40033a <twi_master_write+0x7a>
	uint32_t cnt = p_packet->length;
	uint8_t *buffer = p_packet->buffer;

	/* Check argument */
	if (cnt == 0) {
		return TWI_INVALID_ARGUMENT;
  40032c:	2001      	movs	r0, #1
	}

	cpu_irq_enable();

	return TWI_SUCCESS;
}
  40032e:	4770      	bx	lr

	/* Send all bytes */
	while (cnt > 0) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
 			return TWI_RECEIVE_NACK;
  400330:	2005      	movs	r0, #5
  400332:	e002      	b.n	40033a <twi_master_write+0x7a>
  400334:	2005      	movs	r0, #5
  400336:	e000      	b.n	40033a <twi_master_write+0x7a>
	}

	while (1) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
  400338:	2005      	movs	r0, #5
	}

	cpu_irq_enable();

	return TWI_SUCCESS;
}
  40033a:	bc10      	pop	{r4}
  40033c:	4770      	bx	lr
  40033e:	bf00      	nop
  400340:	200001f4 	.word	0x200001f4

00400344 <DAC_write_cv>:


#define VREF 10
#define max 1023

void DAC_write_cv(float voltage, uint8_t channel){
  400344:	b538      	push	{r3, r4, r5, lr}
  400346:	4604      	mov	r4, r0
  400348:	460d      	mov	r5, r1
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  40034a:	b672      	cpsid	i
  40034c:	f3bf 8f5f 	dmb	sy

	cpu_irq_disable();
  400350:	2200      	movs	r2, #0
  400352:	4b30      	ldr	r3, [pc, #192]	; (400414 <DAC_write_cv+0xd0>)
  400354:	701a      	strb	r2, [r3, #0]
	SPI_dac_init();
  400356:	4b30      	ldr	r3, [pc, #192]	; (400418 <DAC_write_cv+0xd4>)
  400358:	4798      	blx	r3

	float float_voltage = (max*(voltage))/VREF;
	uint16_t dac_voltage = (uint16_t) float_voltage;
  40035a:	4930      	ldr	r1, [pc, #192]	; (40041c <DAC_write_cv+0xd8>)
  40035c:	4620      	mov	r0, r4
  40035e:	4b30      	ldr	r3, [pc, #192]	; (400420 <DAC_write_cv+0xdc>)
  400360:	4798      	blx	r3
  400362:	4b30      	ldr	r3, [pc, #192]	; (400424 <DAC_write_cv+0xe0>)
  400364:	4798      	blx	r3
  400366:	b284      	uxth	r4, r0

	uint8_t low_byte;
	uint8_t high_byte;

	if (channel == CHANNEL_1){
  400368:	b9bd      	cbnz	r5, 40039a <DAC_write_cv+0x56>
		low_byte = (uint8_t) (dac_voltage << 2);
		high_byte = ((uint8_t) (dac_voltage >> 6)) | (0x90);
		REG_PIOB_CODR |=  PIO_PER_P13;
  40036a:	4a2f      	ldr	r2, [pc, #188]	; (400428 <DAC_write_cv+0xe4>)
  40036c:	6813      	ldr	r3, [r2, #0]
  40036e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  400372:	6013      	str	r3, [r2, #0]
		low_byte = (uint8_t) (dac_voltage << 2);
		high_byte = ((uint8_t) (dac_voltage >> 6)) | (0xA0);
		REG_PIOB_CODR |=  PIO_PER_P14;
	}
	
	SPI_byteSend(high_byte);
  400374:	09a0      	lsrs	r0, r4, #6
  400376:	f060 006f 	orn	r0, r0, #111	; 0x6f
  40037a:	b2c0      	uxtb	r0, r0
  40037c:	4d2b      	ldr	r5, [pc, #172]	; (40042c <DAC_write_cv+0xe8>)
  40037e:	47a8      	blx	r5
	SPI_byteSend(low_byte);
  400380:	00a0      	lsls	r0, r4, #2
  400382:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
  400386:	47a8      	blx	r5
	delay_us(3);
  400388:	2016      	movs	r0, #22
  40038a:	4b29      	ldr	r3, [pc, #164]	; (400430 <DAC_write_cv+0xec>)
  40038c:	4798      	blx	r3

	if (channel == CHANNEL_1){
		REG_PIOB_SODR |=  PIO_PER_P13;
  40038e:	4a29      	ldr	r2, [pc, #164]	; (400434 <DAC_write_cv+0xf0>)
  400390:	6813      	ldr	r3, [r2, #0]
  400392:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  400396:	6013      	str	r3, [r2, #0]
  400398:	e035      	b.n	400406 <DAC_write_cv+0xc2>
	if (channel == CHANNEL_1){
		low_byte = (uint8_t) (dac_voltage << 2);
		high_byte = ((uint8_t) (dac_voltage >> 6)) | (0x90);
		REG_PIOB_CODR |=  PIO_PER_P13;
	}
	else if (channel == CHANNEL_2){
  40039a:	2d01      	cmp	r5, #1
  40039c:	d117      	bne.n	4003ce <DAC_write_cv+0x8a>
		low_byte = (uint8_t) (dac_voltage << 2);
		high_byte = ((uint8_t) (dac_voltage >> 6)) | (0xA0);
		REG_PIOB_CODR |=  PIO_PER_P13;
  40039e:	4a22      	ldr	r2, [pc, #136]	; (400428 <DAC_write_cv+0xe4>)
  4003a0:	6813      	ldr	r3, [r2, #0]
  4003a2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  4003a6:	6013      	str	r3, [r2, #0]
		low_byte = (uint8_t) (dac_voltage << 2);
		high_byte = ((uint8_t) (dac_voltage >> 6)) | (0xA0);
		REG_PIOB_CODR |=  PIO_PER_P14;
	}
	
	SPI_byteSend(high_byte);
  4003a8:	09a0      	lsrs	r0, r4, #6
  4003aa:	f060 005f 	orn	r0, r0, #95	; 0x5f
  4003ae:	b2c0      	uxtb	r0, r0
  4003b0:	4d1e      	ldr	r5, [pc, #120]	; (40042c <DAC_write_cv+0xe8>)
  4003b2:	47a8      	blx	r5
	SPI_byteSend(low_byte);
  4003b4:	00a0      	lsls	r0, r4, #2
  4003b6:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
  4003ba:	47a8      	blx	r5
	delay_us(3);
  4003bc:	2016      	movs	r0, #22
  4003be:	4b1c      	ldr	r3, [pc, #112]	; (400430 <DAC_write_cv+0xec>)
  4003c0:	4798      	blx	r3

	if (channel == CHANNEL_1){
		REG_PIOB_SODR |=  PIO_PER_P13;
	}
	else if (channel == CHANNEL_2){
		REG_PIOB_SODR |=  PIO_PER_P13;
  4003c2:	4a1c      	ldr	r2, [pc, #112]	; (400434 <DAC_write_cv+0xf0>)
  4003c4:	6813      	ldr	r3, [r2, #0]
  4003c6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  4003ca:	6013      	str	r3, [r2, #0]
  4003cc:	e01b      	b.n	400406 <DAC_write_cv+0xc2>
	else if (channel == CHANNEL_2){
		low_byte = (uint8_t) (dac_voltage << 2);
		high_byte = ((uint8_t) (dac_voltage >> 6)) | (0xA0);
		REG_PIOB_CODR |=  PIO_PER_P13;
	}
	else if (channel == CHANNEL_3){
  4003ce:	2d02      	cmp	r5, #2
		low_byte = (uint8_t) (dac_voltage << 2);
		high_byte = ((uint8_t) (dac_voltage >> 6)) | (0x90);
		REG_PIOB_CODR |=  PIO_PER_P14;
  4003d0:	4a15      	ldr	r2, [pc, #84]	; (400428 <DAC_write_cv+0xe4>)
  4003d2:	6813      	ldr	r3, [r2, #0]
  4003d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  4003d8:	6013      	str	r3, [r2, #0]
		low_byte = (uint8_t) (dac_voltage << 2);
		high_byte = ((uint8_t) (dac_voltage >> 6)) | (0xA0);
		REG_PIOB_CODR |=  PIO_PER_P14;
	}
	
	SPI_byteSend(high_byte);
  4003da:	ea4f 1094 	mov.w	r0, r4, lsr #6
  4003de:	bf0c      	ite	eq
  4003e0:	f060 006f 	orneq	r0, r0, #111	; 0x6f
  4003e4:	f060 005f 	ornne	r0, r0, #95	; 0x5f
  4003e8:	b2c0      	uxtb	r0, r0
  4003ea:	4d10      	ldr	r5, [pc, #64]	; (40042c <DAC_write_cv+0xe8>)
  4003ec:	47a8      	blx	r5
	SPI_byteSend(low_byte);
  4003ee:	00a0      	lsls	r0, r4, #2
  4003f0:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
  4003f4:	47a8      	blx	r5
	delay_us(3);
  4003f6:	2016      	movs	r0, #22
  4003f8:	4b0d      	ldr	r3, [pc, #52]	; (400430 <DAC_write_cv+0xec>)
  4003fa:	4798      	blx	r3
	}
	else if (channel == CHANNEL_3){
		REG_PIOB_SODR |=  PIO_PER_P14;
	}
	else{
		REG_PIOB_SODR |=  PIO_PER_P14;
  4003fc:	4a0d      	ldr	r2, [pc, #52]	; (400434 <DAC_write_cv+0xf0>)
  4003fe:	6813      	ldr	r3, [r2, #0]
  400400:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  400404:	6013      	str	r3, [r2, #0]
	}

	cpu_irq_enable();
  400406:	2201      	movs	r2, #1
  400408:	4b02      	ldr	r3, [pc, #8]	; (400414 <DAC_write_cv+0xd0>)
  40040a:	701a      	strb	r2, [r3, #0]
  40040c:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  400410:	b662      	cpsie	i
  400412:	bd38      	pop	{r3, r4, r5, pc}
  400414:	200001f4 	.word	0x200001f4
  400418:	004028e9 	.word	0x004028e9
  40041c:	42cc999a 	.word	0x42cc999a
  400420:	00403861 	.word	0x00403861
  400424:	00403b01 	.word	0x00403b01
  400428:	400e1034 	.word	0x400e1034
  40042c:	004029f9 	.word	0x004029f9
  400430:	20000001 	.word	0x20000001
  400434:	400e1030 	.word	0x400e1030

00400438 <DAC_write_gate_on>:

}

void DAC_write_gate_on(uint8_t channel){

	if (channel == CHANNEL_1){
  400438:	b928      	cbnz	r0, 400446 <DAC_write_gate_on+0xe>
		REG_PIOB_CODR |=  PIO_PER_P0;
  40043a:	4a0c      	ldr	r2, [pc, #48]	; (40046c <DAC_write_gate_on+0x34>)
  40043c:	6813      	ldr	r3, [r2, #0]
  40043e:	f043 0301 	orr.w	r3, r3, #1
  400442:	6013      	str	r3, [r2, #0]
  400444:	4770      	bx	lr
	}
	else if (channel == CHANNEL_2){
  400446:	2801      	cmp	r0, #1
  400448:	d105      	bne.n	400456 <DAC_write_gate_on+0x1e>
		REG_PIOB_CODR |=  PIO_PER_P1;
  40044a:	4a08      	ldr	r2, [pc, #32]	; (40046c <DAC_write_gate_on+0x34>)
  40044c:	6813      	ldr	r3, [r2, #0]
  40044e:	f043 0302 	orr.w	r3, r3, #2
  400452:	6013      	str	r3, [r2, #0]
  400454:	4770      	bx	lr
	}
	else if (channel == CHANNEL_3){
  400456:	2802      	cmp	r0, #2
		REG_PIOB_CODR |=  PIO_PER_P2;
  400458:	4a04      	ldr	r2, [pc, #16]	; (40046c <DAC_write_gate_on+0x34>)
  40045a:	6813      	ldr	r3, [r2, #0]
  40045c:	bf0c      	ite	eq
  40045e:	f043 0304 	orreq.w	r3, r3, #4
	}
	else{
		REG_PIOB_CODR |=  PIO_PER_P3;
  400462:	f043 0308 	orrne.w	r3, r3, #8
  400466:	6013      	str	r3, [r2, #0]
  400468:	4770      	bx	lr
  40046a:	bf00      	nop
  40046c:	400e1034 	.word	0x400e1034

00400470 <DAC_write_gate_off>:
// 	cpu_irq_enable();
}

void DAC_write_gate_off(uint8_t channel){

	if (channel == CHANNEL_1){
  400470:	b928      	cbnz	r0, 40047e <DAC_write_gate_off+0xe>
		REG_PIOB_SODR |=  PIO_PER_P0;
  400472:	4a0c      	ldr	r2, [pc, #48]	; (4004a4 <DAC_write_gate_off+0x34>)
  400474:	6813      	ldr	r3, [r2, #0]
  400476:	f043 0301 	orr.w	r3, r3, #1
  40047a:	6013      	str	r3, [r2, #0]
  40047c:	4770      	bx	lr
	}
	else if (channel == CHANNEL_2){
  40047e:	2801      	cmp	r0, #1
  400480:	d105      	bne.n	40048e <DAC_write_gate_off+0x1e>
		REG_PIOB_SODR |=  PIO_PER_P1;
  400482:	4a08      	ldr	r2, [pc, #32]	; (4004a4 <DAC_write_gate_off+0x34>)
  400484:	6813      	ldr	r3, [r2, #0]
  400486:	f043 0302 	orr.w	r3, r3, #2
  40048a:	6013      	str	r3, [r2, #0]
  40048c:	4770      	bx	lr
	}
	else if (channel == CHANNEL_3){
  40048e:	2802      	cmp	r0, #2
		REG_PIOB_SODR |=  PIO_PER_P2;
  400490:	4a04      	ldr	r2, [pc, #16]	; (4004a4 <DAC_write_gate_off+0x34>)
  400492:	6813      	ldr	r3, [r2, #0]
  400494:	bf0c      	ite	eq
  400496:	f043 0304 	orreq.w	r3, r3, #4
	}
	else{
		REG_PIOB_SODR |=  PIO_PER_P3;
  40049a:	f043 0308 	orrne.w	r3, r3, #8
  40049e:	6013      	str	r3, [r2, #0]
  4004a0:	4770      	bx	lr
  4004a2:	bf00      	nop
  4004a4:	400e1030 	.word	0x400e1030

004004a8 <display_select>:
bool inverted[7] = {0,0,0,0,0,0,0};
uint16_t disp_ptr_location[7] = {0,0,0,0,0,0,0};
uint8_t curr_display = 7;

 void display_select(uint8_t d_id) {
	if(curr_display != d_id) {
  4004a8:	4b4d      	ldr	r3, [pc, #308]	; (4005e0 <display_select+0x138>)
  4004aa:	781b      	ldrb	r3, [r3, #0]
  4004ac:	4283      	cmp	r3, r0
  4004ae:	f000 8096 	beq.w	4005de <display_select+0x136>
		switch (d_id) {
  4004b2:	2806      	cmp	r0, #6
  4004b4:	f200 8083 	bhi.w	4005be <display_select+0x116>
  4004b8:	e8df f000 	tbb	[pc, r0]
  4004bc:	39271504 	.word	0x39271504
  4004c0:	5d4b      	.short	0x5d4b
  4004c2:	6f          	.byte	0x6f
  4004c3:	00          	.byte	0x00
			case 0:
				REG_PIOA_CODR |= disp_sel_0;
  4004c4:	4b47      	ldr	r3, [pc, #284]	; (4005e4 <display_select+0x13c>)
  4004c6:	681a      	ldr	r2, [r3, #0]
  4004c8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
  4004cc:	601a      	str	r2, [r3, #0]
				REG_PIOA_CODR |= disp_sel_1;
  4004ce:	681a      	ldr	r2, [r3, #0]
  4004d0:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
  4004d4:	601a      	str	r2, [r3, #0]
				REG_PIOA_CODR |= disp_sel_2;
  4004d6:	681a      	ldr	r2, [r3, #0]
  4004d8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
  4004dc:	601a      	str	r2, [r3, #0]
				curr_display = 0;
  4004de:	2200      	movs	r2, #0
  4004e0:	4b3f      	ldr	r3, [pc, #252]	; (4005e0 <display_select+0x138>)
  4004e2:	701a      	strb	r2, [r3, #0]
				break;
  4004e4:	4770      	bx	lr
			case 1:
				REG_PIOA_SODR |= disp_sel_0;
  4004e6:	4a40      	ldr	r2, [pc, #256]	; (4005e8 <display_select+0x140>)
  4004e8:	6813      	ldr	r3, [r2, #0]
  4004ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
  4004ee:	6013      	str	r3, [r2, #0]
				REG_PIOA_CODR |= disp_sel_1;
  4004f0:	4b3c      	ldr	r3, [pc, #240]	; (4005e4 <display_select+0x13c>)
  4004f2:	681a      	ldr	r2, [r3, #0]
  4004f4:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
  4004f8:	601a      	str	r2, [r3, #0]
				REG_PIOA_CODR |= disp_sel_2;
  4004fa:	681a      	ldr	r2, [r3, #0]
  4004fc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
  400500:	601a      	str	r2, [r3, #0]
				curr_display = 1;
  400502:	2201      	movs	r2, #1
  400504:	4b36      	ldr	r3, [pc, #216]	; (4005e0 <display_select+0x138>)
  400506:	701a      	strb	r2, [r3, #0]
				break;
  400508:	4770      	bx	lr
			case 2:
				REG_PIOA_CODR |= disp_sel_0;
  40050a:	4b36      	ldr	r3, [pc, #216]	; (4005e4 <display_select+0x13c>)
  40050c:	681a      	ldr	r2, [r3, #0]
  40050e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
  400512:	601a      	str	r2, [r3, #0]
				REG_PIOA_SODR |= disp_sel_1;
  400514:	4934      	ldr	r1, [pc, #208]	; (4005e8 <display_select+0x140>)
  400516:	680a      	ldr	r2, [r1, #0]
  400518:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
  40051c:	600a      	str	r2, [r1, #0]
				REG_PIOA_CODR |= disp_sel_2;
  40051e:	681a      	ldr	r2, [r3, #0]
  400520:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
  400524:	601a      	str	r2, [r3, #0]
				curr_display = 2;
  400526:	2202      	movs	r2, #2
  400528:	4b2d      	ldr	r3, [pc, #180]	; (4005e0 <display_select+0x138>)
  40052a:	701a      	strb	r2, [r3, #0]
				break;
  40052c:	4770      	bx	lr
			case 3:
				REG_PIOA_SODR |= disp_sel_0;
  40052e:	4b2e      	ldr	r3, [pc, #184]	; (4005e8 <display_select+0x140>)
  400530:	681a      	ldr	r2, [r3, #0]
  400532:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
  400536:	601a      	str	r2, [r3, #0]
				REG_PIOA_SODR |= disp_sel_1;
  400538:	681a      	ldr	r2, [r3, #0]
  40053a:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
  40053e:	601a      	str	r2, [r3, #0]
				REG_PIOA_CODR |= disp_sel_2;
  400540:	4a28      	ldr	r2, [pc, #160]	; (4005e4 <display_select+0x13c>)
  400542:	6813      	ldr	r3, [r2, #0]
  400544:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
  400548:	6013      	str	r3, [r2, #0]
				curr_display = 3;
  40054a:	2203      	movs	r2, #3
  40054c:	4b24      	ldr	r3, [pc, #144]	; (4005e0 <display_select+0x138>)
  40054e:	701a      	strb	r2, [r3, #0]
				break;
  400550:	4770      	bx	lr
			case 4:
				REG_PIOA_CODR |= disp_sel_0;
  400552:	4b24      	ldr	r3, [pc, #144]	; (4005e4 <display_select+0x13c>)
  400554:	681a      	ldr	r2, [r3, #0]
  400556:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
  40055a:	601a      	str	r2, [r3, #0]
				REG_PIOA_CODR |= disp_sel_1;
  40055c:	681a      	ldr	r2, [r3, #0]
  40055e:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
  400562:	601a      	str	r2, [r3, #0]
				REG_PIOA_SODR |= disp_sel_2;
  400564:	4a20      	ldr	r2, [pc, #128]	; (4005e8 <display_select+0x140>)
  400566:	6813      	ldr	r3, [r2, #0]
  400568:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
  40056c:	6013      	str	r3, [r2, #0]
				curr_display = 4;
  40056e:	2204      	movs	r2, #4
  400570:	4b1b      	ldr	r3, [pc, #108]	; (4005e0 <display_select+0x138>)
  400572:	701a      	strb	r2, [r3, #0]
				break;
  400574:	4770      	bx	lr
			case 5:
				REG_PIOA_SODR |= disp_sel_0;
  400576:	4b1c      	ldr	r3, [pc, #112]	; (4005e8 <display_select+0x140>)
  400578:	681a      	ldr	r2, [r3, #0]
  40057a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
  40057e:	601a      	str	r2, [r3, #0]
				REG_PIOA_CODR |= disp_sel_1;
  400580:	4918      	ldr	r1, [pc, #96]	; (4005e4 <display_select+0x13c>)
  400582:	680a      	ldr	r2, [r1, #0]
  400584:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
  400588:	600a      	str	r2, [r1, #0]
				REG_PIOA_SODR |= disp_sel_2;
  40058a:	681a      	ldr	r2, [r3, #0]
  40058c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
  400590:	601a      	str	r2, [r3, #0]
				curr_display = 5;
  400592:	2205      	movs	r2, #5
  400594:	4b12      	ldr	r3, [pc, #72]	; (4005e0 <display_select+0x138>)
  400596:	701a      	strb	r2, [r3, #0]
				break;
  400598:	4770      	bx	lr
			case 6:
				REG_PIOA_CODR |= disp_sel_0;
  40059a:	4a12      	ldr	r2, [pc, #72]	; (4005e4 <display_select+0x13c>)
  40059c:	6813      	ldr	r3, [r2, #0]
  40059e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
  4005a2:	6013      	str	r3, [r2, #0]
				REG_PIOA_SODR |= disp_sel_1;
  4005a4:	4b10      	ldr	r3, [pc, #64]	; (4005e8 <display_select+0x140>)
  4005a6:	681a      	ldr	r2, [r3, #0]
  4005a8:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
  4005ac:	601a      	str	r2, [r3, #0]
				REG_PIOA_SODR |= disp_sel_2;
  4005ae:	681a      	ldr	r2, [r3, #0]
  4005b0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
  4005b4:	601a      	str	r2, [r3, #0]
				curr_display = 6;
  4005b6:	2206      	movs	r2, #6
  4005b8:	4b09      	ldr	r3, [pc, #36]	; (4005e0 <display_select+0x138>)
  4005ba:	701a      	strb	r2, [r3, #0]
				break;
  4005bc:	4770      	bx	lr
			default:
				REG_PIOA_SODR |= disp_sel_0;
  4005be:	4b0a      	ldr	r3, [pc, #40]	; (4005e8 <display_select+0x140>)
  4005c0:	681a      	ldr	r2, [r3, #0]
  4005c2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
  4005c6:	601a      	str	r2, [r3, #0]
				REG_PIOA_SODR |= disp_sel_1;
  4005c8:	681a      	ldr	r2, [r3, #0]
  4005ca:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
  4005ce:	601a      	str	r2, [r3, #0]
				REG_PIOA_SODR |= disp_sel_2;
  4005d0:	681a      	ldr	r2, [r3, #0]
  4005d2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
  4005d6:	601a      	str	r2, [r3, #0]
				curr_display = 7;
  4005d8:	2207      	movs	r2, #7
  4005da:	4b01      	ldr	r3, [pc, #4]	; (4005e0 <display_select+0x138>)
  4005dc:	701a      	strb	r2, [r3, #0]
  4005de:	4770      	bx	lr
  4005e0:	2000000c 	.word	0x2000000c
  4005e4:	400e0e34 	.word	0x400e0e34
  4005e8:	400e0e30 	.word	0x400e0e30

004005ec <display_command>:
		}
	}
 }

 //Used to send command to the display during operation
 void display_command(uint8_t data, uint8_t d_id){
  4005ec:	b510      	push	{r4, lr}
  4005ee:	b086      	sub	sp, #24
  4005f0:	4604      	mov	r4, r0
	 display_select(d_id);
  4005f2:	4608      	mov	r0, r1
  4005f4:	4b0a      	ldr	r3, [pc, #40]	; (400620 <display_command+0x34>)
  4005f6:	4798      	blx	r3

	 twi_packet_t packet_tx;
	 uint8_t command_buffer[] = {control_command, data};
  4005f8:	2300      	movs	r3, #0
  4005fa:	f88d 3000 	strb.w	r3, [sp]
  4005fe:	f88d 4001 	strb.w	r4, [sp, #1]

	 packet_tx.chip        = 0x3C;		// 0x3C is slave address for display
  400602:	223c      	movs	r2, #60	; 0x3c
  400604:	f88d 2014 	strb.w	r2, [sp, #20]
	 packet_tx.addr_length = 0;
  400608:	9302      	str	r3, [sp, #8]
	 packet_tx.buffer      = (uint8_t *) command_buffer;
  40060a:	f8cd d00c 	str.w	sp, [sp, #12]
	 packet_tx.length      = 2;
  40060e:	2302      	movs	r3, #2
  400610:	9304      	str	r3, [sp, #16]
	 twi_master_write(BOARD_BASE_TWI, &packet_tx);
  400612:	a901      	add	r1, sp, #4
  400614:	4803      	ldr	r0, [pc, #12]	; (400624 <display_command+0x38>)
  400616:	4b04      	ldr	r3, [pc, #16]	; (400628 <display_command+0x3c>)
  400618:	4798      	blx	r3

 }
  40061a:	b006      	add	sp, #24
  40061c:	bd10      	pop	{r4, pc}
  40061e:	bf00      	nop
  400620:	004004a9 	.word	0x004004a9
  400624:	40018000 	.word	0x40018000
  400628:	004002c1 	.word	0x004002c1

0040062c <display_data>:

 //used to send data to the display during operation
 void display_data(uint8_t data, uint8_t d_id){
  40062c:	b530      	push	{r4, r5, lr}
  40062e:	b087      	sub	sp, #28
  400630:	4605      	mov	r5, r0
  400632:	460c      	mov	r4, r1
	display_select(d_id);
  400634:	4608      	mov	r0, r1
  400636:	4b13      	ldr	r3, [pc, #76]	; (400684 <display_data+0x58>)
  400638:	4798      	blx	r3
	
	twi_packet_t packet_tx;
	uint8_t data_buffer[] = {control_data, data};
  40063a:	2340      	movs	r3, #64	; 0x40
  40063c:	f88d 3000 	strb.w	r3, [sp]
  400640:	f88d 5001 	strb.w	r5, [sp, #1]
	packet_tx.chip        = 0x3C;		// 0x3C is slave address for display
  400644:	233c      	movs	r3, #60	; 0x3c
  400646:	f88d 3014 	strb.w	r3, [sp, #20]
	packet_tx.addr_length = 0;
  40064a:	2300      	movs	r3, #0
  40064c:	9302      	str	r3, [sp, #8]
	packet_tx.buffer      = (uint8_t *) data_buffer;
  40064e:	f8cd d00c 	str.w	sp, [sp, #12]
	packet_tx.length      = 2;
  400652:	2302      	movs	r3, #2
  400654:	9304      	str	r3, [sp, #16]
	twi_master_write(BOARD_BASE_TWI, &packet_tx);
  400656:	a901      	add	r1, sp, #4
  400658:	480b      	ldr	r0, [pc, #44]	; (400688 <display_data+0x5c>)
  40065a:	4b0c      	ldr	r3, [pc, #48]	; (40068c <display_data+0x60>)
  40065c:	4798      	blx	r3
	disp_ptr_location[d_id] += 8;
  40065e:	4b0c      	ldr	r3, [pc, #48]	; (400690 <display_data+0x64>)
  400660:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
  400664:	3308      	adds	r3, #8
  400666:	b29b      	uxth	r3, r3
	if(disp_ptr_location[d_id] >= 4096) {
  400668:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
  40066c:	d203      	bcs.n	400676 <display_data+0x4a>
	packet_tx.chip        = 0x3C;		// 0x3C is slave address for display
	packet_tx.addr_length = 0;
	packet_tx.buffer      = (uint8_t *) data_buffer;
	packet_tx.length      = 2;
	twi_master_write(BOARD_BASE_TWI, &packet_tx);
	disp_ptr_location[d_id] += 8;
  40066e:	4a08      	ldr	r2, [pc, #32]	; (400690 <display_data+0x64>)
  400670:	f822 3014 	strh.w	r3, [r2, r4, lsl #1]
  400674:	e003      	b.n	40067e <display_data+0x52>
	if(disp_ptr_location[d_id] >= 4096) {
		disp_ptr_location[d_id] = 0;
  400676:	2200      	movs	r2, #0
  400678:	4b05      	ldr	r3, [pc, #20]	; (400690 <display_data+0x64>)
  40067a:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
	}
 }
  40067e:	b007      	add	sp, #28
  400680:	bd30      	pop	{r4, r5, pc}
  400682:	bf00      	nop
  400684:	004004a9 	.word	0x004004a9
  400688:	40018000 	.word	0x40018000
  40068c:	004002c1 	.word	0x004002c1
  400690:	20000644 	.word	0x20000644

00400694 <display_reset>:

 void display_reset(uint8_t d_id){
  400694:	b538      	push	{r3, r4, r5, lr}
	display_select(d_id);
  400696:	4b0b      	ldr	r3, [pc, #44]	; (4006c4 <display_reset+0x30>)
  400698:	4798      	blx	r3
	REG_PIOA_SODR |= disp_reset; //set high
  40069a:	4c0b      	ldr	r4, [pc, #44]	; (4006c8 <display_reset+0x34>)
  40069c:	6823      	ldr	r3, [r4, #0]
  40069e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  4006a2:	6023      	str	r3, [r4, #0]
	delay_ms(1);
  4006a4:	f641 30e7 	movw	r0, #7143	; 0x1be7
  4006a8:	4d08      	ldr	r5, [pc, #32]	; (4006cc <display_reset+0x38>)
  4006aa:	47a8      	blx	r5
	REG_PIOA_CODR |= disp_reset; //set low
  4006ac:	4a08      	ldr	r2, [pc, #32]	; (4006d0 <display_reset+0x3c>)
  4006ae:	6813      	ldr	r3, [r2, #0]
  4006b0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  4006b4:	6013      	str	r3, [r2, #0]
	delay_ms(10);
  4006b6:	4807      	ldr	r0, [pc, #28]	; (4006d4 <display_reset+0x40>)
  4006b8:	47a8      	blx	r5
	REG_PIOA_SODR |= disp_reset; //set high and hold for normal operation
  4006ba:	6823      	ldr	r3, [r4, #0]
  4006bc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  4006c0:	6023      	str	r3, [r4, #0]
  4006c2:	bd38      	pop	{r3, r4, r5, pc}
  4006c4:	004004a9 	.word	0x004004a9
  4006c8:	400e0e30 	.word	0x400e0e30
  4006cc:	20000001 	.word	0x20000001
  4006d0:	400e0e34 	.word	0x400e0e34
  4006d4:	00011705 	.word	0x00011705

004006d8 <display_init>:
 }

 void display_init(uint8_t d_id) {
  4006d8:	b538      	push	{r3, r4, r5, lr}
  4006da:	4605      	mov	r5, r0
	// Reset display to begin
	display_reset(d_id);
  4006dc:	4b28      	ldr	r3, [pc, #160]	; (400780 <display_init+0xa8>)
  4006de:	4798      	blx	r3

	// Init settings for OLED
	display_command(SSD1306_DISPLAYOFF, d_id);
  4006e0:	4629      	mov	r1, r5
  4006e2:	20ae      	movs	r0, #174	; 0xae
  4006e4:	4c27      	ldr	r4, [pc, #156]	; (400784 <display_init+0xac>)
  4006e6:	47a0      	blx	r4

	display_command(SSD1306_SETDISPLAYCLOCKDIV, d_id);
  4006e8:	4629      	mov	r1, r5
  4006ea:	20d5      	movs	r0, #213	; 0xd5
  4006ec:	47a0      	blx	r4
	display_command(0x80, d_id);
  4006ee:	4629      	mov	r1, r5
  4006f0:	2080      	movs	r0, #128	; 0x80
  4006f2:	47a0      	blx	r4

	// Set no display offset
	display_command(SSD1306_SETDISPLAYOFFSET, d_id);
  4006f4:	4629      	mov	r1, r5
  4006f6:	20d3      	movs	r0, #211	; 0xd3
  4006f8:	47a0      	blx	r4
	display_command(0x00, d_id);
  4006fa:	4629      	mov	r1, r5
  4006fc:	2000      	movs	r0, #0
  4006fe:	47a0      	blx	r4

	// Start at line 0
	display_command(SSD1306_SETSTARTLINE, d_id);
  400700:	4629      	mov	r1, r5
  400702:	2040      	movs	r0, #64	; 0x40
  400704:	47a0      	blx	r4

	display_command(SSD1306_CHARGEPUMP, d_id);
  400706:	4629      	mov	r1, r5
  400708:	208d      	movs	r0, #141	; 0x8d
  40070a:	47a0      	blx	r4
	display_command(0x14, d_id);	//internal VCC from charge pump
  40070c:	4629      	mov	r1, r5
  40070e:	2014      	movs	r0, #20
  400710:	47a0      	blx	r4

	// Set segment remap
	display_command(0xA0, d_id);
  400712:	4629      	mov	r1, r5
  400714:	20a0      	movs	r0, #160	; 0xa0
  400716:	47a0      	blx	r4

	display_command(SSD1306_SETCOMPINS, d_id);
  400718:	4629      	mov	r1, r5
  40071a:	20da      	movs	r0, #218	; 0xda
  40071c:	47a0      	blx	r4
	display_command(0x02, d_id);
  40071e:	4629      	mov	r1, r5
  400720:	2002      	movs	r0, #2
  400722:	47a0      	blx	r4

	display_command(SSD1306_SETCONTRAST, d_id);
  400724:	4629      	mov	r1, r5
  400726:	2081      	movs	r0, #129	; 0x81
  400728:	47a0      	blx	r4
	display_command(0xCF, d_id);
  40072a:	4629      	mov	r1, r5
  40072c:	20cf      	movs	r0, #207	; 0xcf
  40072e:	47a0      	blx	r4

	display_command(SSD1306_SETPRECHARGE, d_id);
  400730:	4629      	mov	r1, r5
  400732:	20d9      	movs	r0, #217	; 0xd9
  400734:	47a0      	blx	r4
	display_command(0xF1, d_id);
  400736:	4629      	mov	r1, r5
  400738:	20f1      	movs	r0, #241	; 0xf1
  40073a:	47a0      	blx	r4

	display_command(SSD1306_SETVCOMDETECT, d_id);
  40073c:	4629      	mov	r1, r5
  40073e:	20db      	movs	r0, #219	; 0xdb
  400740:	47a0      	blx	r4
	display_command(0x40, d_id);
  400742:	4629      	mov	r1, r5
  400744:	2040      	movs	r0, #64	; 0x40
  400746:	47a0      	blx	r4

	display_command(SSD1306_NORMALDISPLAY, d_id);
  400748:	4629      	mov	r1, r5
  40074a:	20a6      	movs	r0, #166	; 0xa6
  40074c:	47a0      	blx	r4
	display_command(SSD1306_DISPLAYON, d_id);
  40074e:	4629      	mov	r1, r5
  400750:	20af      	movs	r0, #175	; 0xaf
  400752:	47a0      	blx	r4
	display_command(SSD1306_MEMORYMODE, d_id);
  400754:	4629      	mov	r1, r5
  400756:	2020      	movs	r0, #32
  400758:	47a0      	blx	r4
	display_command(SSD1306_VERTADDR, d_id);
  40075a:	4629      	mov	r1, r5
  40075c:	2001      	movs	r0, #1
  40075e:	47a0      	blx	r4

	// Adjusting for 32 height display
	display_command(SSD1306_EDITPAGEADDR, d_id);
  400760:	4629      	mov	r1, r5
  400762:	2022      	movs	r0, #34	; 0x22
  400764:	47a0      	blx	r4
	display_command(0, d_id);
  400766:	4629      	mov	r1, r5
  400768:	2000      	movs	r0, #0
  40076a:	47a0      	blx	r4
	display_command(3, d_id);
  40076c:	4629      	mov	r1, r5
  40076e:	2003      	movs	r0, #3
  400770:	47a0      	blx	r4

	display_command(SSD1306_SETMULTIPLEX, d_id);
  400772:	4629      	mov	r1, r5
  400774:	20a8      	movs	r0, #168	; 0xa8
  400776:	47a0      	blx	r4
	display_command(31, d_id);
  400778:	4629      	mov	r1, r5
  40077a:	201f      	movs	r0, #31
  40077c:	47a0      	blx	r4
  40077e:	bd38      	pop	{r3, r4, r5, pc}
  400780:	00400695 	.word	0x00400695
  400784:	004005ed 	.word	0x004005ed

00400788 <all_displays_init>:
 }

 void all_displays_init(void) {
  400788:	b508      	push	{r3, lr}

	// Configure registers used for display mux lines
	REG_PIOA_PER |= disp_sel_0; //enable PIO controller on PA28
  40078a:	4a13      	ldr	r2, [pc, #76]	; (4007d8 <all_displays_init+0x50>)
  40078c:	6813      	ldr	r3, [r2, #0]
  40078e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
  400792:	6013      	str	r3, [r2, #0]
	REG_PIOA_OER |= disp_sel_0; //enable output on pin PA28
  400794:	4b11      	ldr	r3, [pc, #68]	; (4007dc <all_displays_init+0x54>)
  400796:	6819      	ldr	r1, [r3, #0]
  400798:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
  40079c:	6019      	str	r1, [r3, #0]
	REG_PIOA_PER |= disp_sel_1; //enable PIO controller on PA29
  40079e:	6811      	ldr	r1, [r2, #0]
  4007a0:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
  4007a4:	6011      	str	r1, [r2, #0]
	REG_PIOA_OER |= disp_sel_1; //enable output on pin PA29
  4007a6:	6819      	ldr	r1, [r3, #0]
  4007a8:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
  4007ac:	6019      	str	r1, [r3, #0]
	REG_PIOA_PER |= disp_sel_2; //enable PIO controller on PA30
  4007ae:	6811      	ldr	r1, [r2, #0]
  4007b0:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
  4007b4:	6011      	str	r1, [r2, #0]
	REG_PIOA_OER |= disp_sel_2; //enable output on pin PA30
  4007b6:	6819      	ldr	r1, [r3, #0]
  4007b8:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
  4007bc:	6019      	str	r1, [r3, #0]

	// Configure register used for display reset
	REG_PIOA_PER |= disp_reset; //enable PIO controller on PA31
  4007be:	6811      	ldr	r1, [r2, #0]
  4007c0:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
  4007c4:	6011      	str	r1, [r2, #0]
	REG_PIOA_OER |= disp_reset; //enable output on pin PA31
  4007c6:	681a      	ldr	r2, [r3, #0]
  4007c8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
  4007cc:	601a      	str	r2, [r3, #0]

// 	display_init(0);
//   display_init(1);
 	display_init(2);
  4007ce:	2002      	movs	r0, #2
  4007d0:	4b03      	ldr	r3, [pc, #12]	; (4007e0 <all_displays_init+0x58>)
  4007d2:	4798      	blx	r3
  4007d4:	bd08      	pop	{r3, pc}
  4007d6:	bf00      	nop
  4007d8:	400e0e00 	.word	0x400e0e00
  4007dc:	400e0e10 	.word	0x400e0e10
  4007e0:	004006d9 	.word	0x004006d9

004007e4 <finish_display>:
		inverted[d_id] = 0;
	}
 }

 void finish_display(uint8_t d_id) {
	while(disp_ptr_location[d_id] > 0 && disp_ptr_location[d_id] <= 4096) {
  4007e4:	4b0e      	ldr	r3, [pc, #56]	; (400820 <finish_display+0x3c>)
  4007e6:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
  4007ea:	3b01      	subs	r3, #1
  4007ec:	b29b      	uxth	r3, r3
  4007ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
  4007f2:	d213      	bcs.n	40081c <finish_display+0x38>
		display_command(SSD1306_NORMALDISPLAY, d_id);
		inverted[d_id] = 0;
	}
 }

 void finish_display(uint8_t d_id) {
  4007f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4007f8:	4605      	mov	r5, r0
  4007fa:	4604      	mov	r4, r0
	while(disp_ptr_location[d_id] > 0 && disp_ptr_location[d_id] <= 4096) {
		display_data(0, d_id);
  4007fc:	f04f 0800 	mov.w	r8, #0
  400800:	4f08      	ldr	r7, [pc, #32]	; (400824 <finish_display+0x40>)
		inverted[d_id] = 0;
	}
 }

 void finish_display(uint8_t d_id) {
	while(disp_ptr_location[d_id] > 0 && disp_ptr_location[d_id] <= 4096) {
  400802:	4e07      	ldr	r6, [pc, #28]	; (400820 <finish_display+0x3c>)
		display_data(0, d_id);
  400804:	4621      	mov	r1, r4
  400806:	4640      	mov	r0, r8
  400808:	47b8      	blx	r7
		inverted[d_id] = 0;
	}
 }

 void finish_display(uint8_t d_id) {
	while(disp_ptr_location[d_id] > 0 && disp_ptr_location[d_id] <= 4096) {
  40080a:	f836 3015 	ldrh.w	r3, [r6, r5, lsl #1]
  40080e:	3b01      	subs	r3, #1
  400810:	b29b      	uxth	r3, r3
  400812:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
  400816:	d3f5      	bcc.n	400804 <finish_display+0x20>
  400818:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40081c:	4770      	bx	lr
  40081e:	bf00      	nop
  400820:	20000644 	.word	0x20000644
  400824:	0040062d 	.word	0x0040062d

00400828 <display_char>:
	finish_display(d_id);
	finish_display(d_id);
 }

  // Displays 1 byte of space and 3 bytes of character at a time
 void display_char(char input, uint8_t font_size, uint8_t d_id) {
  400828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40082c:	b085      	sub	sp, #20
  40082e:	9201      	str	r2, [sp, #4]
	  // Lets us customize our space width, input parameter can be added if needed
	if(input == ' ') {
  400830:	2820      	cmp	r0, #32
  400832:	d108      	bne.n	400846 <display_char+0x1e>
  400834:	2408      	movs	r4, #8
		int i;
		for(i = 8; i > 0; i--) {
			display_data(0, d_id);
  400836:	2600      	movs	r6, #0
  400838:	4da6      	ldr	r5, [pc, #664]	; (400ad4 <display_char+0x2ac>)
  40083a:	9901      	ldr	r1, [sp, #4]
  40083c:	4630      	mov	r0, r6
  40083e:	47a8      	blx	r5
  // Displays 1 byte of space and 3 bytes of character at a time
 void display_char(char input, uint8_t font_size, uint8_t d_id) {
	  // Lets us customize our space width, input parameter can be added if needed
	if(input == ' ') {
		int i;
		for(i = 8; i > 0; i--) {
  400840:	3c01      	subs	r4, #1
  400842:	d1fa      	bne.n	40083a <display_char+0x12>
  400844:	e142      	b.n	400acc <display_char+0x2a4>
  400846:	4682      	mov	sl, r0
	else {
		uint16_t font_index = 0;
		uint8_t byte_1;
		uint8_t byte_2;
		uint8_t byte_3;
		if(font_size == 28) {
  400848:	291c      	cmp	r1, #28
  40084a:	d141      	bne.n	4008d0 <display_char+0xa8>
			uint16_t width = getWidth_28();
  40084c:	4ba2      	ldr	r3, [pc, #648]	; (400ad8 <display_char+0x2b0>)
  40084e:	4798      	blx	r3
  400850:	fa1f fb80 	uxth.w	fp, r0
			while (font_index < width) {
  400854:	f1bb 0f00 	cmp.w	fp, #0
  400858:	f000 8138 	beq.w	400acc <display_char+0x2a4>
				if(input != '#' && input != 'b') {
					display_data(0, d_id);
				}
				byte_1 = getByte_28(input, font_index);
				byte_2 = getByte_28(input, font_index + width);
				byte_3 = getByte_28(input, font_index + 2*width);
  40085c:	ea4f 034b 	mov.w	r3, fp, lsl #1
  400860:	fa1f f983 	uxth.w	r9, r3
  400864:	465c      	mov	r4, fp
  400866:	2600      	movs	r6, #0
			while (font_index < width) {
				//Sharps and flats are elevated, rest of characters are not
				if(input != '#' && input != 'b') {
					display_data(0, d_id);
				}
				byte_1 = getByte_28(input, font_index);
  400868:	f8df 827c 	ldr.w	r8, [pc, #636]	; 400ae8 <display_char+0x2c0>
				byte_2 = getByte_28(input, font_index + width);
				byte_3 = getByte_28(input, font_index + 2*width);
				display_data(byte_1, d_id);
  40086c:	4f99      	ldr	r7, [pc, #612]	; (400ad4 <display_char+0x2ac>)
  40086e:	464b      	mov	r3, r9
  400870:	46d9      	mov	r9, fp
  400872:	469b      	mov	fp, r3
  400874:	b2b5      	uxth	r5, r6
		uint8_t byte_3;
		if(font_size == 28) {
			uint16_t width = getWidth_28();
			while (font_index < width) {
				//Sharps and flats are elevated, rest of characters are not
				if(input != '#' && input != 'b') {
  400876:	f1ba 0f23 	cmp.w	sl, #35	; 0x23
  40087a:	f000 80bb 	beq.w	4009f4 <display_char+0x1cc>
  40087e:	f1ba 0f62 	cmp.w	sl, #98	; 0x62
  400882:	f000 809f 	beq.w	4009c4 <display_char+0x19c>
					display_data(0, d_id);
  400886:	9901      	ldr	r1, [sp, #4]
  400888:	2000      	movs	r0, #0
  40088a:	47b8      	blx	r7
				}
				byte_1 = getByte_28(input, font_index);
  40088c:	4629      	mov	r1, r5
  40088e:	4650      	mov	r0, sl
  400890:	47c0      	blx	r8
  400892:	9002      	str	r0, [sp, #8]
				byte_2 = getByte_28(input, font_index + width);
  400894:	4621      	mov	r1, r4
  400896:	4650      	mov	r0, sl
  400898:	47c0      	blx	r8
  40089a:	9003      	str	r0, [sp, #12]
				byte_3 = getByte_28(input, font_index + 2*width);
  40089c:	eb05 010b 	add.w	r1, r5, fp
  4008a0:	b289      	uxth	r1, r1
  4008a2:	4650      	mov	r0, sl
  4008a4:	47c0      	blx	r8
  4008a6:	4605      	mov	r5, r0
				display_data(byte_1, d_id);
  4008a8:	9901      	ldr	r1, [sp, #4]
  4008aa:	9802      	ldr	r0, [sp, #8]
  4008ac:	47b8      	blx	r7
				display_data(byte_2, d_id);
  4008ae:	9901      	ldr	r1, [sp, #4]
  4008b0:	9803      	ldr	r0, [sp, #12]
  4008b2:	47b8      	blx	r7
				display_data(byte_3, d_id);
  4008b4:	9901      	ldr	r1, [sp, #4]
  4008b6:	4628      	mov	r0, r5
  4008b8:	47b8      	blx	r7
  4008ba:	e002      	b.n	4008c2 <display_char+0x9a>
				//Sharps and flats are elevated, rest of characters are not
				if(input == '#' || input == 'b') {
					display_data(0, d_id);
  4008bc:	9901      	ldr	r1, [sp, #4]
  4008be:	2000      	movs	r0, #0
  4008c0:	47b8      	blx	r7
  4008c2:	3601      	adds	r6, #1
  4008c4:	3401      	adds	r4, #1
  4008c6:	b2a4      	uxth	r4, r4
		uint8_t byte_1;
		uint8_t byte_2;
		uint8_t byte_3;
		if(font_size == 28) {
			uint16_t width = getWidth_28();
			while (font_index < width) {
  4008c8:	b2b3      	uxth	r3, r6
  4008ca:	454b      	cmp	r3, r9
  4008cc:	d3d2      	bcc.n	400874 <display_char+0x4c>
  4008ce:	e0fd      	b.n	400acc <display_char+0x2a4>
				}
				font_index++;
			}
		}

		else if(font_size == 22) {
  4008d0:	2916      	cmp	r1, #22
  4008d2:	d141      	bne.n	400958 <display_char+0x130>
			uint16_t width = getWidth_22();
  4008d4:	4b81      	ldr	r3, [pc, #516]	; (400adc <display_char+0x2b4>)
  4008d6:	4798      	blx	r3
  4008d8:	fa1f fb80 	uxth.w	fp, r0
			while (font_index < width) {
  4008dc:	f1bb 0f00 	cmp.w	fp, #0
  4008e0:	f000 80f4 	beq.w	400acc <display_char+0x2a4>
				if(input != '#' && input != 'b') {
					display_data(0, d_id);
				}
				byte_1 = getByte_22(input, font_index);
				byte_2 = getByte_22(input, font_index + width);
				byte_3 = getByte_22(input, font_index + 2*width);
  4008e4:	ea4f 034b 	mov.w	r3, fp, lsl #1
  4008e8:	fa1f f983 	uxth.w	r9, r3
  4008ec:	465c      	mov	r4, fp
  4008ee:	2600      	movs	r6, #0
			while (font_index < width) {
				//Sharps and flats are elevated, rest of characters are not
				if(input != '#' && input != 'b') {
					display_data(0, d_id);
				}
				byte_1 = getByte_22(input, font_index);
  4008f0:	f8df 81f8 	ldr.w	r8, [pc, #504]	; 400aec <display_char+0x2c4>
				byte_2 = getByte_22(input, font_index + width);
				byte_3 = getByte_22(input, font_index + 2*width);
				display_data(byte_1, d_id);
  4008f4:	4f77      	ldr	r7, [pc, #476]	; (400ad4 <display_char+0x2ac>)
  4008f6:	464b      	mov	r3, r9
  4008f8:	46d9      	mov	r9, fp
  4008fa:	469b      	mov	fp, r3
  4008fc:	b2b5      	uxth	r5, r6

		else if(font_size == 22) {
			uint16_t width = getWidth_22();
			while (font_index < width) {
				//Sharps and flats are elevated, rest of characters are not
				if(input != '#' && input != 'b') {
  4008fe:	f1ba 0f23 	cmp.w	sl, #35	; 0x23
  400902:	f000 808f 	beq.w	400a24 <display_char+0x1fc>
  400906:	f1ba 0f62 	cmp.w	sl, #98	; 0x62
  40090a:	f000 80a3 	beq.w	400a54 <display_char+0x22c>
					display_data(0, d_id);
  40090e:	9901      	ldr	r1, [sp, #4]
  400910:	2000      	movs	r0, #0
  400912:	47b8      	blx	r7
				}
				byte_1 = getByte_22(input, font_index);
  400914:	4629      	mov	r1, r5
  400916:	4650      	mov	r0, sl
  400918:	47c0      	blx	r8
  40091a:	9002      	str	r0, [sp, #8]
				byte_2 = getByte_22(input, font_index + width);
  40091c:	4621      	mov	r1, r4
  40091e:	4650      	mov	r0, sl
  400920:	47c0      	blx	r8
  400922:	9003      	str	r0, [sp, #12]
				byte_3 = getByte_22(input, font_index + 2*width);
  400924:	eb05 010b 	add.w	r1, r5, fp
  400928:	b289      	uxth	r1, r1
  40092a:	4650      	mov	r0, sl
  40092c:	47c0      	blx	r8
  40092e:	4605      	mov	r5, r0
				display_data(byte_1, d_id);
  400930:	9901      	ldr	r1, [sp, #4]
  400932:	9802      	ldr	r0, [sp, #8]
  400934:	47b8      	blx	r7
				display_data(byte_2, d_id);
  400936:	9901      	ldr	r1, [sp, #4]
  400938:	9803      	ldr	r0, [sp, #12]
  40093a:	47b8      	blx	r7
				display_data(byte_3, d_id);
  40093c:	9901      	ldr	r1, [sp, #4]
  40093e:	4628      	mov	r0, r5
  400940:	47b8      	blx	r7
  400942:	e002      	b.n	40094a <display_char+0x122>
				//Sharps and flats are elevated, rest of characters are not
				if(input == '#' || input == 'b') {
					display_data(0, d_id);
  400944:	9901      	ldr	r1, [sp, #4]
  400946:	2000      	movs	r0, #0
  400948:	47b8      	blx	r7
  40094a:	3601      	adds	r6, #1
  40094c:	3401      	adds	r4, #1
  40094e:	b2a4      	uxth	r4, r4
			}
		}

		else if(font_size == 22) {
			uint16_t width = getWidth_22();
			while (font_index < width) {
  400950:	b2b3      	uxth	r3, r6
  400952:	4599      	cmp	r9, r3
  400954:	d8d2      	bhi.n	4008fc <display_char+0xd4>
  400956:	e0b9      	b.n	400acc <display_char+0x2a4>
			}
		}

		// Defaults to 18 to reduce errors.
		else {
			uint16_t width = getWidth_18();
  400958:	4b61      	ldr	r3, [pc, #388]	; (400ae0 <display_char+0x2b8>)
  40095a:	4798      	blx	r3
  40095c:	fa1f f980 	uxth.w	r9, r0
			while (font_index < width) {
  400960:	f1b9 0f00 	cmp.w	r9, #0
  400964:	f000 80b2 	beq.w	400acc <display_char+0x2a4>
  400968:	464d      	mov	r5, r9
  40096a:	2400      	movs	r4, #0
				//Sharps and flats are elevated, rest of characters are not
				if(input != '#' && input != 'b') {
					display_data(0, d_id);
				}
				display_data(0, d_id);
  40096c:	46a0      	mov	r8, r4
  40096e:	4e59      	ldr	r6, [pc, #356]	; (400ad4 <display_char+0x2ac>)
				byte_1 = getByte_18(input, font_index);
  400970:	4f5c      	ldr	r7, [pc, #368]	; (400ae4 <display_char+0x2bc>)
  400972:	f8dd b004 	ldr.w	fp, [sp, #4]
		// Defaults to 18 to reduce errors.
		else {
			uint16_t width = getWidth_18();
			while (font_index < width) {
				//Sharps and flats are elevated, rest of characters are not
				if(input != '#' && input != 'b') {
  400976:	f1ba 0f23 	cmp.w	sl, #35	; 0x23
  40097a:	f000 8083 	beq.w	400a84 <display_char+0x25c>
  40097e:	f1ba 0f62 	cmp.w	sl, #98	; 0x62
  400982:	f000 8091 	beq.w	400aa8 <display_char+0x280>
					display_data(0, d_id);
  400986:	4659      	mov	r1, fp
  400988:	4640      	mov	r0, r8
  40098a:	47b0      	blx	r6
				}
				display_data(0, d_id);
  40098c:	4659      	mov	r1, fp
  40098e:	4640      	mov	r0, r8
  400990:	47b0      	blx	r6
				byte_1 = getByte_18(input, font_index);
  400992:	4621      	mov	r1, r4
  400994:	4650      	mov	r0, sl
  400996:	47b8      	blx	r7
  400998:	9001      	str	r0, [sp, #4]
				byte_2 = getByte_18(input, font_index + width);
  40099a:	4629      	mov	r1, r5
  40099c:	4650      	mov	r0, sl
  40099e:	47b8      	blx	r7
  4009a0:	9002      	str	r0, [sp, #8]
				display_data(byte_1, d_id);
  4009a2:	4659      	mov	r1, fp
  4009a4:	9801      	ldr	r0, [sp, #4]
  4009a6:	47b0      	blx	r6
				display_data(byte_2, d_id);
  4009a8:	4659      	mov	r1, fp
  4009aa:	9802      	ldr	r0, [sp, #8]
  4009ac:	47b0      	blx	r6
  4009ae:	e002      	b.n	4009b6 <display_char+0x18e>
				//Sharps and flats are elevated, rest of characters are not
				if(input == '#' || input == 'b') {
					display_data(0, d_id);
  4009b0:	4659      	mov	r1, fp
  4009b2:	4640      	mov	r0, r8
  4009b4:	47b0      	blx	r6
				}
				font_index++;
  4009b6:	3401      	adds	r4, #1
  4009b8:	b2a4      	uxth	r4, r4
  4009ba:	3501      	adds	r5, #1
  4009bc:	b2ad      	uxth	r5, r5
		}

		// Defaults to 18 to reduce errors.
		else {
			uint16_t width = getWidth_18();
			while (font_index < width) {
  4009be:	45a1      	cmp	r9, r4
  4009c0:	d1d9      	bne.n	400976 <display_char+0x14e>
  4009c2:	e083      	b.n	400acc <display_char+0x2a4>
			while (font_index < width) {
				//Sharps and flats are elevated, rest of characters are not
				if(input != '#' && input != 'b') {
					display_data(0, d_id);
				}
				byte_1 = getByte_28(input, font_index);
  4009c4:	4629      	mov	r1, r5
  4009c6:	2062      	movs	r0, #98	; 0x62
  4009c8:	47c0      	blx	r8
  4009ca:	9002      	str	r0, [sp, #8]
				byte_2 = getByte_28(input, font_index + width);
  4009cc:	4621      	mov	r1, r4
  4009ce:	2062      	movs	r0, #98	; 0x62
  4009d0:	47c0      	blx	r8
  4009d2:	9003      	str	r0, [sp, #12]
				byte_3 = getByte_28(input, font_index + 2*width);
  4009d4:	eb05 010b 	add.w	r1, r5, fp
  4009d8:	b289      	uxth	r1, r1
  4009da:	2062      	movs	r0, #98	; 0x62
  4009dc:	47c0      	blx	r8
  4009de:	4605      	mov	r5, r0
				display_data(byte_1, d_id);
  4009e0:	9901      	ldr	r1, [sp, #4]
  4009e2:	9802      	ldr	r0, [sp, #8]
  4009e4:	47b8      	blx	r7
				display_data(byte_2, d_id);
  4009e6:	9901      	ldr	r1, [sp, #4]
  4009e8:	9803      	ldr	r0, [sp, #12]
  4009ea:	47b8      	blx	r7
				display_data(byte_3, d_id);
  4009ec:	9901      	ldr	r1, [sp, #4]
  4009ee:	4628      	mov	r0, r5
  4009f0:	47b8      	blx	r7
  4009f2:	e763      	b.n	4008bc <display_char+0x94>
			while (font_index < width) {
				//Sharps and flats are elevated, rest of characters are not
				if(input != '#' && input != 'b') {
					display_data(0, d_id);
				}
				byte_1 = getByte_28(input, font_index);
  4009f4:	4629      	mov	r1, r5
  4009f6:	2023      	movs	r0, #35	; 0x23
  4009f8:	47c0      	blx	r8
  4009fa:	9002      	str	r0, [sp, #8]
				byte_2 = getByte_28(input, font_index + width);
  4009fc:	4621      	mov	r1, r4
  4009fe:	2023      	movs	r0, #35	; 0x23
  400a00:	47c0      	blx	r8
  400a02:	9003      	str	r0, [sp, #12]
				byte_3 = getByte_28(input, font_index + 2*width);
  400a04:	eb05 010b 	add.w	r1, r5, fp
  400a08:	b289      	uxth	r1, r1
  400a0a:	2023      	movs	r0, #35	; 0x23
  400a0c:	47c0      	blx	r8
  400a0e:	4605      	mov	r5, r0
				display_data(byte_1, d_id);
  400a10:	9901      	ldr	r1, [sp, #4]
  400a12:	9802      	ldr	r0, [sp, #8]
  400a14:	47b8      	blx	r7
				display_data(byte_2, d_id);
  400a16:	9901      	ldr	r1, [sp, #4]
  400a18:	9803      	ldr	r0, [sp, #12]
  400a1a:	47b8      	blx	r7
				display_data(byte_3, d_id);
  400a1c:	9901      	ldr	r1, [sp, #4]
  400a1e:	4628      	mov	r0, r5
  400a20:	47b8      	blx	r7
  400a22:	e74b      	b.n	4008bc <display_char+0x94>
			while (font_index < width) {
				//Sharps and flats are elevated, rest of characters are not
				if(input != '#' && input != 'b') {
					display_data(0, d_id);
				}
				byte_1 = getByte_22(input, font_index);
  400a24:	4629      	mov	r1, r5
  400a26:	2023      	movs	r0, #35	; 0x23
  400a28:	47c0      	blx	r8
  400a2a:	9002      	str	r0, [sp, #8]
				byte_2 = getByte_22(input, font_index + width);
  400a2c:	4621      	mov	r1, r4
  400a2e:	2023      	movs	r0, #35	; 0x23
  400a30:	47c0      	blx	r8
  400a32:	9003      	str	r0, [sp, #12]
				byte_3 = getByte_22(input, font_index + 2*width);
  400a34:	eb05 010b 	add.w	r1, r5, fp
  400a38:	b289      	uxth	r1, r1
  400a3a:	2023      	movs	r0, #35	; 0x23
  400a3c:	47c0      	blx	r8
  400a3e:	4605      	mov	r5, r0
				display_data(byte_1, d_id);
  400a40:	9901      	ldr	r1, [sp, #4]
  400a42:	9802      	ldr	r0, [sp, #8]
  400a44:	47b8      	blx	r7
				display_data(byte_2, d_id);
  400a46:	9901      	ldr	r1, [sp, #4]
  400a48:	9803      	ldr	r0, [sp, #12]
  400a4a:	47b8      	blx	r7
				display_data(byte_3, d_id);
  400a4c:	9901      	ldr	r1, [sp, #4]
  400a4e:	4628      	mov	r0, r5
  400a50:	47b8      	blx	r7
  400a52:	e777      	b.n	400944 <display_char+0x11c>
			while (font_index < width) {
				//Sharps and flats are elevated, rest of characters are not
				if(input != '#' && input != 'b') {
					display_data(0, d_id);
				}
				byte_1 = getByte_22(input, font_index);
  400a54:	4629      	mov	r1, r5
  400a56:	2062      	movs	r0, #98	; 0x62
  400a58:	47c0      	blx	r8
  400a5a:	9002      	str	r0, [sp, #8]
				byte_2 = getByte_22(input, font_index + width);
  400a5c:	4621      	mov	r1, r4
  400a5e:	2062      	movs	r0, #98	; 0x62
  400a60:	47c0      	blx	r8
  400a62:	9003      	str	r0, [sp, #12]
				byte_3 = getByte_22(input, font_index + 2*width);
  400a64:	eb05 010b 	add.w	r1, r5, fp
  400a68:	b289      	uxth	r1, r1
  400a6a:	2062      	movs	r0, #98	; 0x62
  400a6c:	47c0      	blx	r8
  400a6e:	4605      	mov	r5, r0
				display_data(byte_1, d_id);
  400a70:	9901      	ldr	r1, [sp, #4]
  400a72:	9802      	ldr	r0, [sp, #8]
  400a74:	47b8      	blx	r7
				display_data(byte_2, d_id);
  400a76:	9901      	ldr	r1, [sp, #4]
  400a78:	9803      	ldr	r0, [sp, #12]
  400a7a:	47b8      	blx	r7
				display_data(byte_3, d_id);
  400a7c:	9901      	ldr	r1, [sp, #4]
  400a7e:	4628      	mov	r0, r5
  400a80:	47b8      	blx	r7
  400a82:	e75f      	b.n	400944 <display_char+0x11c>
			while (font_index < width) {
				//Sharps and flats are elevated, rest of characters are not
				if(input != '#' && input != 'b') {
					display_data(0, d_id);
				}
				display_data(0, d_id);
  400a84:	4659      	mov	r1, fp
  400a86:	4640      	mov	r0, r8
  400a88:	47b0      	blx	r6
				byte_1 = getByte_18(input, font_index);
  400a8a:	4621      	mov	r1, r4
  400a8c:	2023      	movs	r0, #35	; 0x23
  400a8e:	47b8      	blx	r7
  400a90:	9001      	str	r0, [sp, #4]
				byte_2 = getByte_18(input, font_index + width);
  400a92:	4629      	mov	r1, r5
  400a94:	2023      	movs	r0, #35	; 0x23
  400a96:	47b8      	blx	r7
  400a98:	9002      	str	r0, [sp, #8]
				display_data(byte_1, d_id);
  400a9a:	4659      	mov	r1, fp
  400a9c:	9801      	ldr	r0, [sp, #4]
  400a9e:	47b0      	blx	r6
				display_data(byte_2, d_id);
  400aa0:	4659      	mov	r1, fp
  400aa2:	9802      	ldr	r0, [sp, #8]
  400aa4:	47b0      	blx	r6
  400aa6:	e783      	b.n	4009b0 <display_char+0x188>
			while (font_index < width) {
				//Sharps and flats are elevated, rest of characters are not
				if(input != '#' && input != 'b') {
					display_data(0, d_id);
				}
				display_data(0, d_id);
  400aa8:	4659      	mov	r1, fp
  400aaa:	4640      	mov	r0, r8
  400aac:	47b0      	blx	r6
				byte_1 = getByte_18(input, font_index);
  400aae:	4621      	mov	r1, r4
  400ab0:	2062      	movs	r0, #98	; 0x62
  400ab2:	47b8      	blx	r7
  400ab4:	9001      	str	r0, [sp, #4]
				byte_2 = getByte_18(input, font_index + width);
  400ab6:	4629      	mov	r1, r5
  400ab8:	2062      	movs	r0, #98	; 0x62
  400aba:	47b8      	blx	r7
  400abc:	9002      	str	r0, [sp, #8]
				display_data(byte_1, d_id);
  400abe:	4659      	mov	r1, fp
  400ac0:	9801      	ldr	r0, [sp, #4]
  400ac2:	47b0      	blx	r6
				display_data(byte_2, d_id);
  400ac4:	4659      	mov	r1, fp
  400ac6:	9802      	ldr	r0, [sp, #8]
  400ac8:	47b0      	blx	r6
  400aca:	e771      	b.n	4009b0 <display_char+0x188>
				}
				font_index++;
			}
		}
	}
 }
  400acc:	b005      	add	sp, #20
  400ace:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  400ad2:	bf00      	nop
  400ad4:	0040062d 	.word	0x0040062d
  400ad8:	004018dd 	.word	0x004018dd
  400adc:	004018e1 	.word	0x004018e1
  400ae0:	004018e5 	.word	0x004018e5
  400ae4:	00401939 	.word	0x00401939
  400ae8:	004018e9 	.word	0x004018e9
  400aec:	00401905 	.word	0x00401905

00400af0 <display_number>:

 void display_number(uint32_t input, uint8_t font_size, uint8_t d_id) {
  400af0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  400af4:	b083      	sub	sp, #12
  400af6:	460c      	mov	r4, r1
  400af8:	4615      	mov	r5, r2
	int buffersize = 0;
    char buffer[8];

	if(input==0) {
  400afa:	b938      	cbnz	r0, 400b0c <display_number+0x1c>
		display_char('0', font_size, d_id);
  400afc:	2030      	movs	r0, #48	; 0x30
  400afe:	4e2e      	ldr	r6, [pc, #184]	; (400bb8 <display_number+0xc8>)
  400b00:	47b0      	blx	r6
		display_char(' ', font_size, d_id);
  400b02:	462a      	mov	r2, r5
  400b04:	4621      	mov	r1, r4
  400b06:	2020      	movs	r0, #32
  400b08:	47b0      	blx	r6
  400b0a:	e051      	b.n	400bb0 <display_number+0xc0>
  400b0c:	4601      	mov	r1, r0
		return;
	}

	//Determining needed size of buffer
    if (input > 999999) {           
  400b0e:	4b2b      	ldr	r3, [pc, #172]	; (400bbc <display_number+0xcc>)
  400b10:	4298      	cmp	r0, r3
  400b12:	d837      	bhi.n	400b84 <display_number+0x94>
        buffersize = 7;
    }
    else if (input > 99999) {
  400b14:	4b2a      	ldr	r3, [pc, #168]	; (400bc0 <display_number+0xd0>)
  400b16:	4298      	cmp	r0, r3
  400b18:	d837      	bhi.n	400b8a <display_number+0x9a>
        buffersize = 6;
    }
    else if (input > 9999) {
  400b1a:	f242 730f 	movw	r3, #9999	; 0x270f
  400b1e:	4298      	cmp	r0, r3
  400b20:	d836      	bhi.n	400b90 <display_number+0xa0>
        buffersize = 5;
    }
    else if (input > 999) {
  400b22:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
  400b26:	d236      	bcs.n	400b96 <display_number+0xa6>
        buffersize = 4;
    }
    else if(input > 99) {
  400b28:	2863      	cmp	r0, #99	; 0x63
  400b2a:	d837      	bhi.n	400b9c <display_number+0xac>
    }
    else if(input > 9) {
        buffersize = 2;
    }
    else {
        buffersize = 1;
  400b2c:	2809      	cmp	r0, #9
  400b2e:	bf8c      	ite	hi
  400b30:	f04f 0c02 	movhi.w	ip, #2
  400b34:	f04f 0c01 	movls.w	ip, #1
  400b38:	e032      	b.n	400ba0 <display_number+0xb0>
	// Does this to reverse the order it's output in
    int i = buffersize - 1;
    uint32_t temp;
    while(input > 0) {
        temp = input;
        buffer[i] = (char)(input%10 + '0');
  400b3a:	fbae 2301 	umull	r2, r3, lr, r1
  400b3e:	08db      	lsrs	r3, r3, #3
  400b40:	eb03 0283 	add.w	r2, r3, r3, lsl #2
  400b44:	eba1 0242 	sub.w	r2, r1, r2, lsl #1
  400b48:	3230      	adds	r2, #48	; 0x30
  400b4a:	f807 2d01 	strb.w	r2, [r7, #-1]!
        input = temp;
        input = input/10;
  400b4e:	4619      	mov	r1, r3
        i--;
  400b50:	3801      	subs	r0, #1

    // Grabs each digit at a time from integer and stores in array
	// Does this to reverse the order it's output in
    int i = buffersize - 1;
    uint32_t temp;
    while(input > 0) {
  400b52:	2b00      	cmp	r3, #0
  400b54:	d1f1      	bne.n	400b3a <display_number+0x4a>
        buffer[i] = (char)(input%10 + '0');
        input = temp;
        input = input/10;
        i--;
    }
	while(i > 0) {
  400b56:	2800      	cmp	r0, #0
  400b58:	dd00      	ble.n	400b5c <display_number+0x6c>
  400b5a:	e7fe      	b.n	400b5a <display_number+0x6a>
		buffer[i] = '1';
	}

    i = 0;
    while(i < buffersize) {
  400b5c:	f1bc 0f00 	cmp.w	ip, #0
  400b60:	d026      	beq.n	400bb0 <display_number+0xc0>
  400b62:	466f      	mov	r7, sp
		display_char(buffer[i], font_size, d_id);
  400b64:	f8df 8050 	ldr.w	r8, [pc, #80]	; 400bb8 <display_number+0xc8>
		display_char(' ', font_size, d_id);
  400b68:	f04f 0920 	mov.w	r9, #32
		buffer[i] = '1';
	}

    i = 0;
    while(i < buffersize) {
		display_char(buffer[i], font_size, d_id);
  400b6c:	462a      	mov	r2, r5
  400b6e:	4621      	mov	r1, r4
  400b70:	f817 0b01 	ldrb.w	r0, [r7], #1
  400b74:	47c0      	blx	r8
		display_char(' ', font_size, d_id);
  400b76:	462a      	mov	r2, r5
  400b78:	4621      	mov	r1, r4
  400b7a:	4648      	mov	r0, r9
  400b7c:	47c0      	blx	r8
	while(i > 0) {
		buffer[i] = '1';
	}

    i = 0;
    while(i < buffersize) {
  400b7e:	42be      	cmp	r6, r7
  400b80:	d1f4      	bne.n	400b6c <display_number+0x7c>
  400b82:	e015      	b.n	400bb0 <display_number+0xc0>
		return;
	}

	//Determining needed size of buffer
    if (input > 999999) {           
        buffersize = 7;
  400b84:	f04f 0c07 	mov.w	ip, #7
  400b88:	e00a      	b.n	400ba0 <display_number+0xb0>
    }
    else if (input > 99999) {
        buffersize = 6;
  400b8a:	f04f 0c06 	mov.w	ip, #6
  400b8e:	e007      	b.n	400ba0 <display_number+0xb0>
    }
    else if (input > 9999) {
        buffersize = 5;
  400b90:	f04f 0c05 	mov.w	ip, #5
  400b94:	e004      	b.n	400ba0 <display_number+0xb0>
    }
    else if (input > 999) {
        buffersize = 4;
  400b96:	f04f 0c04 	mov.w	ip, #4
  400b9a:	e001      	b.n	400ba0 <display_number+0xb0>
    }
    else if(input > 99) {
        buffersize = 3;
  400b9c:	f04f 0c03 	mov.w	ip, #3
        buffersize = 1;
    }

    // Grabs each digit at a time from integer and stores in array
	// Does this to reverse the order it's output in
    int i = buffersize - 1;
  400ba0:	f10c 30ff 	add.w	r0, ip, #4294967295
  400ba4:	eb0d 060c 	add.w	r6, sp, ip
  400ba8:	4637      	mov	r7, r6
    uint32_t temp;
    while(input > 0) {
        temp = input;
        buffer[i] = (char)(input%10 + '0');
  400baa:	f8df e018 	ldr.w	lr, [pc, #24]	; 400bc4 <display_number+0xd4>
  400bae:	e7c4      	b.n	400b3a <display_number+0x4a>
    while(i < buffersize) {
		display_char(buffer[i], font_size, d_id);
		display_char(' ', font_size, d_id);
		i++;
	}
 }
  400bb0:	b003      	add	sp, #12
  400bb2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  400bb6:	bf00      	nop
  400bb8:	00400829 	.word	0x00400829
  400bbc:	000f423f 	.word	0x000f423f
  400bc0:	0001869f 	.word	0x0001869f
  400bc4:	cccccccd 	.word	0xcccccccd

00400bc8 <bpm_display>:
	display_char('3', 18, 0);
	finish_display(0);
}

// Display 1
void bpm_display(uint16_t bpm) {
  400bc8:	b538      	push	{r3, r4, r5, lr}
  400bca:	4605      	mov	r5, r0
	display_char('B', 28, 1);
  400bcc:	2201      	movs	r2, #1
  400bce:	211c      	movs	r1, #28
  400bd0:	2042      	movs	r0, #66	; 0x42
  400bd2:	4c13      	ldr	r4, [pc, #76]	; (400c20 <bpm_display+0x58>)
  400bd4:	47a0      	blx	r4
	display_char(' ', 28, 1);
  400bd6:	2201      	movs	r2, #1
  400bd8:	211c      	movs	r1, #28
  400bda:	2020      	movs	r0, #32
  400bdc:	47a0      	blx	r4
	display_char('P', 28, 1);
  400bde:	2201      	movs	r2, #1
  400be0:	211c      	movs	r1, #28
  400be2:	2050      	movs	r0, #80	; 0x50
  400be4:	47a0      	blx	r4
	display_char(' ', 28, 1);
  400be6:	2201      	movs	r2, #1
  400be8:	211c      	movs	r1, #28
  400bea:	2020      	movs	r0, #32
  400bec:	47a0      	blx	r4
	display_char('M', 28, 1);
  400bee:	2201      	movs	r2, #1
  400bf0:	211c      	movs	r1, #28
  400bf2:	204d      	movs	r0, #77	; 0x4d
  400bf4:	47a0      	blx	r4
	display_char(' ', 28, 1);
  400bf6:	2201      	movs	r2, #1
  400bf8:	211c      	movs	r1, #28
  400bfa:	2020      	movs	r0, #32
  400bfc:	47a0      	blx	r4
	display_char(':', 28, 1);
  400bfe:	2201      	movs	r2, #1
  400c00:	211c      	movs	r1, #28
  400c02:	203a      	movs	r0, #58	; 0x3a
  400c04:	47a0      	blx	r4
	display_char(' ', 28, 1);
  400c06:	2201      	movs	r2, #1
  400c08:	211c      	movs	r1, #28
  400c0a:	2020      	movs	r0, #32
  400c0c:	47a0      	blx	r4
	display_number(bpm, 28, 1);
  400c0e:	2201      	movs	r2, #1
  400c10:	211c      	movs	r1, #28
  400c12:	4628      	mov	r0, r5
  400c14:	4b03      	ldr	r3, [pc, #12]	; (400c24 <bpm_display+0x5c>)
  400c16:	4798      	blx	r3
	finish_display(1);
  400c18:	2001      	movs	r0, #1
  400c1a:	4b03      	ldr	r3, [pc, #12]	; (400c28 <bpm_display+0x60>)
  400c1c:	4798      	blx	r3
  400c1e:	bd38      	pop	{r3, r4, r5, pc}
  400c20:	00400829 	.word	0x00400829
  400c24:	00400af1 	.word	0x00400af1
  400c28:	004007e5 	.word	0x004007e5

00400c2c <res_display>:
}

// Display 2
void res_display(uint8_t res) {
  400c2c:	b538      	push	{r3, r4, r5, lr}
  400c2e:	4605      	mov	r5, r0
	display_char('R', 22, 2);
  400c30:	2202      	movs	r2, #2
  400c32:	2116      	movs	r1, #22
  400c34:	2052      	movs	r0, #82	; 0x52
  400c36:	4c1f      	ldr	r4, [pc, #124]	; (400cb4 <res_display+0x88>)
  400c38:	47a0      	blx	r4
	display_char(' ', 28, 2);
  400c3a:	2202      	movs	r2, #2
  400c3c:	211c      	movs	r1, #28
  400c3e:	2020      	movs	r0, #32
  400c40:	47a0      	blx	r4
	display_char('E', 22, 2);
  400c42:	2202      	movs	r2, #2
  400c44:	2116      	movs	r1, #22
  400c46:	2045      	movs	r0, #69	; 0x45
  400c48:	47a0      	blx	r4
	display_char(' ', 28, 2);
  400c4a:	2202      	movs	r2, #2
  400c4c:	211c      	movs	r1, #28
  400c4e:	2020      	movs	r0, #32
  400c50:	47a0      	blx	r4
	display_char('S', 22, 2);
  400c52:	2202      	movs	r2, #2
  400c54:	2116      	movs	r1, #22
  400c56:	2053      	movs	r0, #83	; 0x53
  400c58:	47a0      	blx	r4
	display_char(' ', 28, 2);
  400c5a:	2202      	movs	r2, #2
  400c5c:	211c      	movs	r1, #28
  400c5e:	2020      	movs	r0, #32
  400c60:	47a0      	blx	r4
	display_char(':', 22, 2);
  400c62:	2202      	movs	r2, #2
  400c64:	2116      	movs	r1, #22
  400c66:	203a      	movs	r0, #58	; 0x3a
  400c68:	47a0      	blx	r4
	display_char(' ', 28, 2);
  400c6a:	2202      	movs	r2, #2
  400c6c:	211c      	movs	r1, #28
  400c6e:	2020      	movs	r0, #32
  400c70:	47a0      	blx	r4
	display_char('1', 22, 2);
  400c72:	2202      	movs	r2, #2
  400c74:	2116      	movs	r1, #22
  400c76:	2031      	movs	r0, #49	; 0x31
  400c78:	47a0      	blx	r4
	display_char(' ', 28, 2);
  400c7a:	2202      	movs	r2, #2
  400c7c:	211c      	movs	r1, #28
  400c7e:	2020      	movs	r0, #32
  400c80:	47a0      	blx	r4
	display_char('/', 22, 2); 
  400c82:	2202      	movs	r2, #2
  400c84:	2116      	movs	r1, #22
  400c86:	202f      	movs	r0, #47	; 0x2f
  400c88:	47a0      	blx	r4
	display_char(' ', 28, 2);
  400c8a:	2202      	movs	r2, #2
  400c8c:	211c      	movs	r1, #28
  400c8e:	2020      	movs	r0, #32
  400c90:	47a0      	blx	r4
	display_number(res, 22, 2);
  400c92:	2202      	movs	r2, #2
  400c94:	2116      	movs	r1, #22
  400c96:	4628      	mov	r0, r5
  400c98:	4b07      	ldr	r3, [pc, #28]	; (400cb8 <res_display+0x8c>)
  400c9a:	4798      	blx	r3
	display_char(' ', 28, 2);
  400c9c:	2202      	movs	r2, #2
  400c9e:	211c      	movs	r1, #28
  400ca0:	2020      	movs	r0, #32
  400ca2:	47a0      	blx	r4
	display_char('t', 22, 2);
  400ca4:	2202      	movs	r2, #2
  400ca6:	2116      	movs	r1, #22
  400ca8:	2074      	movs	r0, #116	; 0x74
  400caa:	47a0      	blx	r4
	finish_display(2);  
  400cac:	2002      	movs	r0, #2
  400cae:	4b03      	ldr	r3, [pc, #12]	; (400cbc <res_display+0x90>)
  400cb0:	4798      	blx	r3
  400cb2:	bd38      	pop	{r3, r4, r5, pc}
  400cb4:	00400829 	.word	0x00400829
  400cb8:	00400af1 	.word	0x00400af1
  400cbc:	004007e5 	.word	0x004007e5

00400cc0 <page_display>:
}

// Display 3
void page_display(uint8_t page) {
  400cc0:	b538      	push	{r3, r4, r5, lr}
  400cc2:	4605      	mov	r5, r0
	display_char('P', 28, 3);
  400cc4:	2203      	movs	r2, #3
  400cc6:	211c      	movs	r1, #28
  400cc8:	2050      	movs	r0, #80	; 0x50
  400cca:	4c0d      	ldr	r4, [pc, #52]	; (400d00 <page_display+0x40>)
  400ccc:	47a0      	blx	r4
	display_char('A', 28, 3);
  400cce:	2203      	movs	r2, #3
  400cd0:	211c      	movs	r1, #28
  400cd2:	2041      	movs	r0, #65	; 0x41
  400cd4:	47a0      	blx	r4
	display_char('G', 28, 3);
  400cd6:	2203      	movs	r2, #3
  400cd8:	211c      	movs	r1, #28
  400cda:	2047      	movs	r0, #71	; 0x47
  400cdc:	47a0      	blx	r4
	display_char('E', 28, 3);
  400cde:	2203      	movs	r2, #3
  400ce0:	211c      	movs	r1, #28
  400ce2:	2045      	movs	r0, #69	; 0x45
  400ce4:	47a0      	blx	r4
	display_char(':', 28, 3);
  400ce6:	2203      	movs	r2, #3
  400ce8:	211c      	movs	r1, #28
  400cea:	203a      	movs	r0, #58	; 0x3a
  400cec:	47a0      	blx	r4
	display_number(page, 28, 3);
  400cee:	2203      	movs	r2, #3
  400cf0:	211c      	movs	r1, #28
  400cf2:	4628      	mov	r0, r5
  400cf4:	4b03      	ldr	r3, [pc, #12]	; (400d04 <page_display+0x44>)
  400cf6:	4798      	blx	r3
	finish_display(3);
  400cf8:	2003      	movs	r0, #3
  400cfa:	4b03      	ldr	r3, [pc, #12]	; (400d08 <page_display+0x48>)
  400cfc:	4798      	blx	r3
  400cfe:	bd38      	pop	{r3, r4, r5, pc}
  400d00:	00400829 	.word	0x00400829
  400d04:	00400af1 	.word	0x00400af1
  400d08:	004007e5 	.word	0x004007e5

00400d0c <pattern_display>:
}

// Display 4
void pattern_display(uint8_t pattern) {
  400d0c:	b538      	push	{r3, r4, r5, lr}
  400d0e:	4605      	mov	r5, r0
	display_char('P', 18, 4);
  400d10:	2204      	movs	r2, #4
  400d12:	2112      	movs	r1, #18
  400d14:	2050      	movs	r0, #80	; 0x50
  400d16:	4c0d      	ldr	r4, [pc, #52]	; (400d4c <pattern_display+0x40>)
  400d18:	47a0      	blx	r4
	display_char('T', 18, 4);
  400d1a:	2204      	movs	r2, #4
  400d1c:	2112      	movs	r1, #18
  400d1e:	2054      	movs	r0, #84	; 0x54
  400d20:	47a0      	blx	r4
	display_char('R', 18, 4);
  400d22:	2204      	movs	r2, #4
  400d24:	2112      	movs	r1, #18
  400d26:	2052      	movs	r0, #82	; 0x52
  400d28:	47a0      	blx	r4
	display_char('N', 18, 4);
  400d2a:	2204      	movs	r2, #4
  400d2c:	2112      	movs	r1, #18
  400d2e:	204e      	movs	r0, #78	; 0x4e
  400d30:	47a0      	blx	r4
	display_char(':', 18, 4);
  400d32:	2204      	movs	r2, #4
  400d34:	2112      	movs	r1, #18
  400d36:	203a      	movs	r0, #58	; 0x3a
  400d38:	47a0      	blx	r4
	display_number(pattern, 18, 4);
  400d3a:	2204      	movs	r2, #4
  400d3c:	2112      	movs	r1, #18
  400d3e:	4628      	mov	r0, r5
  400d40:	4b03      	ldr	r3, [pc, #12]	; (400d50 <pattern_display+0x44>)
  400d42:	4798      	blx	r3
	finish_display(4);
  400d44:	2004      	movs	r0, #4
  400d46:	4b03      	ldr	r3, [pc, #12]	; (400d54 <pattern_display+0x48>)
  400d48:	4798      	blx	r3
  400d4a:	bd38      	pop	{r3, r4, r5, pc}
  400d4c:	00400829 	.word	0x00400829
  400d50:	00400af1 	.word	0x00400af1
  400d54:	004007e5 	.word	0x004007e5

00400d58 <output_display_1>:
}

// Display 5
void output_display_1(uint8_t out1, uint8_t out2) {
  400d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400d5a:	4605      	mov	r5, r0
  400d5c:	460f      	mov	r7, r1
	display_char('0', 22, 5);
  400d5e:	2205      	movs	r2, #5
  400d60:	2116      	movs	r1, #22
  400d62:	2030      	movs	r0, #48	; 0x30
  400d64:	4c1d      	ldr	r4, [pc, #116]	; (400ddc <output_display_1+0x84>)
  400d66:	47a0      	blx	r4
	display_char(' ', 22, 5);
  400d68:	2205      	movs	r2, #5
  400d6a:	2116      	movs	r1, #22
  400d6c:	2020      	movs	r0, #32
  400d6e:	47a0      	blx	r4
	display_char('1', 18, 5);
  400d70:	2205      	movs	r2, #5
  400d72:	2112      	movs	r1, #18
  400d74:	2031      	movs	r0, #49	; 0x31
  400d76:	47a0      	blx	r4
	display_char(':', 18, 5);
  400d78:	2205      	movs	r2, #5
  400d7a:	2112      	movs	r1, #18
  400d7c:	203a      	movs	r0, #58	; 0x3a
  400d7e:	47a0      	blx	r4
	display_number(out1, 18, 5);
  400d80:	2205      	movs	r2, #5
  400d82:	2112      	movs	r1, #18
  400d84:	4628      	mov	r0, r5
  400d86:	4b16      	ldr	r3, [pc, #88]	; (400de0 <output_display_1+0x88>)
  400d88:	4798      	blx	r3

	while(disp_ptr_location[5] < 1920) {
  400d8a:	4b16      	ldr	r3, [pc, #88]	; (400de4 <output_display_1+0x8c>)
  400d8c:	895b      	ldrh	r3, [r3, #10]
  400d8e:	f5b3 6ff0 	cmp.w	r3, #1920	; 0x780
  400d92:	d209      	bcs.n	400da8 <output_display_1+0x50>
		display_data(0, 5);
  400d94:	2605      	movs	r6, #5
  400d96:	4d14      	ldr	r5, [pc, #80]	; (400de8 <output_display_1+0x90>)
	display_char(' ', 22, 5);
	display_char('1', 18, 5);
	display_char(':', 18, 5);
	display_number(out1, 18, 5);

	while(disp_ptr_location[5] < 1920) {
  400d98:	4c12      	ldr	r4, [pc, #72]	; (400de4 <output_display_1+0x8c>)
		display_data(0, 5);
  400d9a:	4631      	mov	r1, r6
  400d9c:	2000      	movs	r0, #0
  400d9e:	47a8      	blx	r5
	display_char(' ', 22, 5);
	display_char('1', 18, 5);
	display_char(':', 18, 5);
	display_number(out1, 18, 5);

	while(disp_ptr_location[5] < 1920) {
  400da0:	8963      	ldrh	r3, [r4, #10]
  400da2:	f5b3 6ff0 	cmp.w	r3, #1920	; 0x780
  400da6:	d3f8      	bcc.n	400d9a <output_display_1+0x42>
		display_data(0, 5);
	}

	display_char('0', 22, 5);
  400da8:	2205      	movs	r2, #5
  400daa:	2116      	movs	r1, #22
  400dac:	2030      	movs	r0, #48	; 0x30
  400dae:	4c0b      	ldr	r4, [pc, #44]	; (400ddc <output_display_1+0x84>)
  400db0:	47a0      	blx	r4
	display_char(' ', 22, 5);
  400db2:	2205      	movs	r2, #5
  400db4:	2116      	movs	r1, #22
  400db6:	2020      	movs	r0, #32
  400db8:	47a0      	blx	r4
	display_char('2', 18, 5);
  400dba:	2205      	movs	r2, #5
  400dbc:	2112      	movs	r1, #18
  400dbe:	2032      	movs	r0, #50	; 0x32
  400dc0:	47a0      	blx	r4
	display_char(':', 18, 5);
  400dc2:	2205      	movs	r2, #5
  400dc4:	2112      	movs	r1, #18
  400dc6:	203a      	movs	r0, #58	; 0x3a
  400dc8:	47a0      	blx	r4
	display_number(out2, 18, 5);
  400dca:	2205      	movs	r2, #5
  400dcc:	2112      	movs	r1, #18
  400dce:	4638      	mov	r0, r7
  400dd0:	4b03      	ldr	r3, [pc, #12]	; (400de0 <output_display_1+0x88>)
  400dd2:	4798      	blx	r3
	
	finish_display(5);
  400dd4:	2005      	movs	r0, #5
  400dd6:	4b05      	ldr	r3, [pc, #20]	; (400dec <output_display_1+0x94>)
  400dd8:	4798      	blx	r3
  400dda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400ddc:	00400829 	.word	0x00400829
  400de0:	00400af1 	.word	0x00400af1
  400de4:	20000644 	.word	0x20000644
  400de8:	0040062d 	.word	0x0040062d
  400dec:	004007e5 	.word	0x004007e5

00400df0 <output_display_2>:
}

// Display 6
void output_display_2(uint8_t out3, uint8_t out4) {
  400df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400df2:	4605      	mov	r5, r0
  400df4:	460f      	mov	r7, r1
	display_char('0', 22, 6);
  400df6:	2206      	movs	r2, #6
  400df8:	2116      	movs	r1, #22
  400dfa:	2030      	movs	r0, #48	; 0x30
  400dfc:	4c1d      	ldr	r4, [pc, #116]	; (400e74 <output_display_2+0x84>)
  400dfe:	47a0      	blx	r4
	display_char(' ', 22, 6);
  400e00:	2206      	movs	r2, #6
  400e02:	2116      	movs	r1, #22
  400e04:	2020      	movs	r0, #32
  400e06:	47a0      	blx	r4
	display_char('3', 18, 6);
  400e08:	2206      	movs	r2, #6
  400e0a:	2112      	movs	r1, #18
  400e0c:	2033      	movs	r0, #51	; 0x33
  400e0e:	47a0      	blx	r4
	display_char(':', 18, 6);
  400e10:	2206      	movs	r2, #6
  400e12:	2112      	movs	r1, #18
  400e14:	203a      	movs	r0, #58	; 0x3a
  400e16:	47a0      	blx	r4
	display_number(out3, 18, 6);
  400e18:	2206      	movs	r2, #6
  400e1a:	2112      	movs	r1, #18
  400e1c:	4628      	mov	r0, r5
  400e1e:	4b16      	ldr	r3, [pc, #88]	; (400e78 <output_display_2+0x88>)
  400e20:	4798      	blx	r3

	while(disp_ptr_location[6] < 1920) {
  400e22:	4b16      	ldr	r3, [pc, #88]	; (400e7c <output_display_2+0x8c>)
  400e24:	899b      	ldrh	r3, [r3, #12]
  400e26:	f5b3 6ff0 	cmp.w	r3, #1920	; 0x780
  400e2a:	d209      	bcs.n	400e40 <output_display_2+0x50>
		display_data(0, 6);
  400e2c:	2606      	movs	r6, #6
  400e2e:	4d14      	ldr	r5, [pc, #80]	; (400e80 <output_display_2+0x90>)
	display_char(' ', 22, 6);
	display_char('3', 18, 6);
	display_char(':', 18, 6);
	display_number(out3, 18, 6);

	while(disp_ptr_location[6] < 1920) {
  400e30:	4c12      	ldr	r4, [pc, #72]	; (400e7c <output_display_2+0x8c>)
		display_data(0, 6);
  400e32:	4631      	mov	r1, r6
  400e34:	2000      	movs	r0, #0
  400e36:	47a8      	blx	r5
	display_char(' ', 22, 6);
	display_char('3', 18, 6);
	display_char(':', 18, 6);
	display_number(out3, 18, 6);

	while(disp_ptr_location[6] < 1920) {
  400e38:	89a3      	ldrh	r3, [r4, #12]
  400e3a:	f5b3 6ff0 	cmp.w	r3, #1920	; 0x780
  400e3e:	d3f8      	bcc.n	400e32 <output_display_2+0x42>
		display_data(0, 6);
	}

	display_char('0', 22, 6);
  400e40:	2206      	movs	r2, #6
  400e42:	2116      	movs	r1, #22
  400e44:	2030      	movs	r0, #48	; 0x30
  400e46:	4c0b      	ldr	r4, [pc, #44]	; (400e74 <output_display_2+0x84>)
  400e48:	47a0      	blx	r4
	display_char(' ', 22, 6);
  400e4a:	2206      	movs	r2, #6
  400e4c:	2116      	movs	r1, #22
  400e4e:	2020      	movs	r0, #32
  400e50:	47a0      	blx	r4
	display_char('4', 18, 6);
  400e52:	2206      	movs	r2, #6
  400e54:	2112      	movs	r1, #18
  400e56:	2034      	movs	r0, #52	; 0x34
  400e58:	47a0      	blx	r4
	display_char(':', 18, 6);
  400e5a:	2206      	movs	r2, #6
  400e5c:	2112      	movs	r1, #18
  400e5e:	203a      	movs	r0, #58	; 0x3a
  400e60:	47a0      	blx	r4
	display_number(out4, 18, 6);
  400e62:	2206      	movs	r2, #6
  400e64:	2112      	movs	r1, #18
  400e66:	4638      	mov	r0, r7
  400e68:	4b03      	ldr	r3, [pc, #12]	; (400e78 <output_display_2+0x88>)
  400e6a:	4798      	blx	r3
	
	finish_display(6);
  400e6c:	2006      	movs	r0, #6
  400e6e:	4b05      	ldr	r3, [pc, #20]	; (400e84 <output_display_2+0x94>)
  400e70:	4798      	blx	r3
  400e72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400e74:	00400829 	.word	0x00400829
  400e78:	00400af1 	.word	0x00400af1
  400e7c:	20000644 	.word	0x20000644
  400e80:	0040062d 	.word	0x0040062d
  400e84:	004007e5 	.word	0x004007e5

00400e88 <encoder_direction>:
#include "timers.h"

uint8_t A_seq;
uint8_t B_seq;

 void encoder_direction(uint32_t A, uint32_t B, uint8_t step){
  400e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	//read Encoder input A
	bool A_in = REG_PIOC_PDSR & A;
  400e8a:	4b19      	ldr	r3, [pc, #100]	; (400ef0 <encoder_direction+0x68>)
  400e8c:	681f      	ldr	r7, [r3, #0]
	//read Encoder input B
	bool B_in = REG_PIOC_PDSR & B;
  400e8e:	681d      	ldr	r5, [r3, #0]
	
	A_seq = A_seq << 1;
	A_seq |= A_in;
	
	B_seq = B_seq << 1;
  400e90:	4c18      	ldr	r4, [pc, #96]	; (400ef4 <encoder_direction+0x6c>)
	B_seq |= B_in;
  400e92:	7823      	ldrb	r3, [r4, #0]
  400e94:	420d      	tst	r5, r1
  400e96:	bf14      	ite	ne
  400e98:	2101      	movne	r1, #1
  400e9a:	2100      	moveq	r1, #0
  400e9c:	ea41 0143 	orr.w	r1, r1, r3, lsl #1
	//read Encoder input A
	bool A_in = REG_PIOC_PDSR & A;
	//read Encoder input B
	bool B_in = REG_PIOC_PDSR & B;
	
	A_seq = A_seq << 1;
  400ea0:	4d15      	ldr	r5, [pc, #84]	; (400ef8 <encoder_direction+0x70>)
	A_seq |= A_in;
	
	B_seq = B_seq << 1;
	B_seq |= B_in;
	
	A_seq &= 0b00001111;
  400ea2:	782e      	ldrb	r6, [r5, #0]
  400ea4:	4207      	tst	r7, r0
  400ea6:	bf14      	ite	ne
  400ea8:	2301      	movne	r3, #1
  400eaa:	2300      	moveq	r3, #0
  400eac:	ea43 0346 	orr.w	r3, r3, r6, lsl #1
  400eb0:	f003 030f 	and.w	r3, r3, #15
  400eb4:	702b      	strb	r3, [r5, #0]
	B_seq &= 0b00001111;
  400eb6:	f001 010f 	and.w	r1, r1, #15
  400eba:	7021      	strb	r1, [r4, #0]


	//return true if turned right
	if ((A_seq == 0b00001001) && (B_seq == 0b00000011)){
  400ebc:	2b09      	cmp	r3, #9
  400ebe:	d10a      	bne.n	400ed6 <encoder_direction+0x4e>
  400ec0:	2903      	cmp	r1, #3
  400ec2:	d114      	bne.n	400eee <encoder_direction+0x66>
		REG_PIOB_SODR |= PIO_PER_P3; //set output high on PB3
  400ec4:	490d      	ldr	r1, [pc, #52]	; (400efc <encoder_direction+0x74>)
  400ec6:	680b      	ldr	r3, [r1, #0]
  400ec8:	f043 0308 	orr.w	r3, r3, #8
  400ecc:	600b      	str	r3, [r1, #0]
		notes_inc(step);
  400ece:	4610      	mov	r0, r2
  400ed0:	4b0b      	ldr	r3, [pc, #44]	; (400f00 <encoder_direction+0x78>)
  400ed2:	4798      	blx	r3
  400ed4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}

	else if ((A_seq == 0b00000011) && (B_seq == 0b00001001)){
  400ed6:	2b03      	cmp	r3, #3
  400ed8:	d109      	bne.n	400eee <encoder_direction+0x66>
  400eda:	2909      	cmp	r1, #9
  400edc:	d107      	bne.n	400eee <encoder_direction+0x66>
		REG_PIOB_CODR |= PIO_PER_P3; //set output low on PB3
  400ede:	4909      	ldr	r1, [pc, #36]	; (400f04 <encoder_direction+0x7c>)
  400ee0:	680b      	ldr	r3, [r1, #0]
  400ee2:	f043 0308 	orr.w	r3, r3, #8
  400ee6:	600b      	str	r3, [r1, #0]
		notes_dec(step);
  400ee8:	4610      	mov	r0, r2
  400eea:	4b07      	ldr	r3, [pc, #28]	; (400f08 <encoder_direction+0x80>)
  400eec:	4798      	blx	r3
  400eee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400ef0:	400e123c 	.word	0x400e123c
  400ef4:	20008731 	.word	0x20008731
  400ef8:	20008730 	.word	0x20008730
  400efc:	400e1030 	.word	0x400e1030
  400f00:	00402b7d 	.word	0x00402b7d
  400f04:	400e1034 	.word	0x400e1034
  400f08:	00402c51 	.word	0x00402c51

00400f0c <Encoder_init>:
	}
}


void Encoder_init(){
  400f0c:	b470      	push	{r4, r5, r6}
	A_seq = 0;
  400f0e:	2300      	movs	r3, #0
  400f10:	4aa8      	ldr	r2, [pc, #672]	; (4011b4 <Encoder_init+0x2a8>)
  400f12:	7013      	strb	r3, [r2, #0]
	B_seq = 0;
  400f14:	4aa8      	ldr	r2, [pc, #672]	; (4011b8 <Encoder_init+0x2ac>)
  400f16:	7013      	strb	r3, [r2, #0]

	//enable clock for PIOC
	REG_PMC_PCER0 |= PMC_PCER0_PID13;
  400f18:	4aa8      	ldr	r2, [pc, #672]	; (4011bc <Encoder_init+0x2b0>)
  400f1a:	6813      	ldr	r3, [r2, #0]
  400f1c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  400f20:	6013      	str	r3, [r2, #0]


	/**************			CONFIGURE 16 STEP ENCODERS			**************/

	//Set up PC0 as ENCODER 1 INPUT A
	REG_PIOC_PER |= PIO_PER_P0; //enable PIO controller
  400f22:	4da7      	ldr	r5, [pc, #668]	; (4011c0 <Encoder_init+0x2b4>)
  400f24:	682b      	ldr	r3, [r5, #0]
  400f26:	f043 0301 	orr.w	r3, r3, #1
  400f2a:	602b      	str	r3, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P0; //disable output
  400f2c:	4ca5      	ldr	r4, [pc, #660]	; (4011c4 <Encoder_init+0x2b8>)
  400f2e:	6823      	ldr	r3, [r4, #0]
  400f30:	f043 0301 	orr.w	r3, r3, #1
  400f34:	6023      	str	r3, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P0; //disable pull-down resistor
  400f36:	48a4      	ldr	r0, [pc, #656]	; (4011c8 <Encoder_init+0x2bc>)
  400f38:	6803      	ldr	r3, [r0, #0]
  400f3a:	f043 0301 	orr.w	r3, r3, #1
  400f3e:	6003      	str	r3, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P0;	//enable pull-up resistor
  400f40:	49a2      	ldr	r1, [pc, #648]	; (4011cc <Encoder_init+0x2c0>)
  400f42:	680b      	ldr	r3, [r1, #0]
  400f44:	f043 0301 	orr.w	r3, r3, #1
  400f48:	600b      	str	r3, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P0; //turn on slow clock debounce
  400f4a:	f602 6274 	addw	r2, r2, #3700	; 0xe74
  400f4e:	6813      	ldr	r3, [r2, #0]
  400f50:	f043 0301 	orr.w	r3, r3, #1
  400f54:	6013      	str	r3, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P0;	//start debounce filter
  400f56:	4b9e      	ldr	r3, [pc, #632]	; (4011d0 <Encoder_init+0x2c4>)
  400f58:	681e      	ldr	r6, [r3, #0]
  400f5a:	f046 0601 	orr.w	r6, r6, #1
  400f5e:	601e      	str	r6, [r3, #0]

	//Set up PC1 as ENCODER 1 INPUT B
	REG_PIOC_PER |= PIO_PER_P1; //enable PIO controller
  400f60:	682e      	ldr	r6, [r5, #0]
  400f62:	f046 0602 	orr.w	r6, r6, #2
  400f66:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P1; //disable output
  400f68:	6826      	ldr	r6, [r4, #0]
  400f6a:	f046 0602 	orr.w	r6, r6, #2
  400f6e:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P1; //disable pull-down resistor
  400f70:	6806      	ldr	r6, [r0, #0]
  400f72:	f046 0602 	orr.w	r6, r6, #2
  400f76:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P1;	//enable pull-up resistor
  400f78:	680e      	ldr	r6, [r1, #0]
  400f7a:	f046 0602 	orr.w	r6, r6, #2
  400f7e:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P1; //turn on slow clock debounce
  400f80:	6816      	ldr	r6, [r2, #0]
  400f82:	f046 0602 	orr.w	r6, r6, #2
  400f86:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P1;	//start debounce filter
  400f88:	681e      	ldr	r6, [r3, #0]
  400f8a:	f046 0602 	orr.w	r6, r6, #2
  400f8e:	601e      	str	r6, [r3, #0]


	
	//Set up PC2 as ENCODER 2 INPUT A
	REG_PIOC_PER |= PIO_PER_P2; //enable PIO controller
  400f90:	682e      	ldr	r6, [r5, #0]
  400f92:	f046 0604 	orr.w	r6, r6, #4
  400f96:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P2; //disable output
  400f98:	6826      	ldr	r6, [r4, #0]
  400f9a:	f046 0604 	orr.w	r6, r6, #4
  400f9e:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P2; //disable pull-down resistor
  400fa0:	6806      	ldr	r6, [r0, #0]
  400fa2:	f046 0604 	orr.w	r6, r6, #4
  400fa6:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P2;	//enable pull-up resistor
  400fa8:	680e      	ldr	r6, [r1, #0]
  400faa:	f046 0604 	orr.w	r6, r6, #4
  400fae:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P2; //turn on slow clock debounce
  400fb0:	6816      	ldr	r6, [r2, #0]
  400fb2:	f046 0604 	orr.w	r6, r6, #4
  400fb6:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P2;	//start debounce filter
  400fb8:	681e      	ldr	r6, [r3, #0]
  400fba:	f046 0604 	orr.w	r6, r6, #4
  400fbe:	601e      	str	r6, [r3, #0]

	//Set up PC3 as ENCODER 2 INPUT B
	REG_PIOC_PER |= PIO_PER_P3; //enable PIO controller
  400fc0:	682e      	ldr	r6, [r5, #0]
  400fc2:	f046 0608 	orr.w	r6, r6, #8
  400fc6:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P3; //disable output
  400fc8:	6826      	ldr	r6, [r4, #0]
  400fca:	f046 0608 	orr.w	r6, r6, #8
  400fce:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P3; //disable pull-down resistor
  400fd0:	6806      	ldr	r6, [r0, #0]
  400fd2:	f046 0608 	orr.w	r6, r6, #8
  400fd6:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P3;	//enable pull-up resistor
  400fd8:	680e      	ldr	r6, [r1, #0]
  400fda:	f046 0608 	orr.w	r6, r6, #8
  400fde:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P3; //turn on slow clock debounce
  400fe0:	6816      	ldr	r6, [r2, #0]
  400fe2:	f046 0608 	orr.w	r6, r6, #8
  400fe6:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P3;	//start debounce filter
  400fe8:	681e      	ldr	r6, [r3, #0]
  400fea:	f046 0608 	orr.w	r6, r6, #8
  400fee:	601e      	str	r6, [r3, #0]



	//Set up PC4 as ENCODER 3 INPUT A
	REG_PIOC_PER |= PIO_PER_P4; //enable PIO controller
  400ff0:	682e      	ldr	r6, [r5, #0]
  400ff2:	f046 0610 	orr.w	r6, r6, #16
  400ff6:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P4; //disable output
  400ff8:	6826      	ldr	r6, [r4, #0]
  400ffa:	f046 0610 	orr.w	r6, r6, #16
  400ffe:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P4; //disable pull-down resistor
  401000:	6806      	ldr	r6, [r0, #0]
  401002:	f046 0610 	orr.w	r6, r6, #16
  401006:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P4;	//enable pull-up resistor
  401008:	680e      	ldr	r6, [r1, #0]
  40100a:	f046 0610 	orr.w	r6, r6, #16
  40100e:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P4; //turn on slow clock debounce
  401010:	6816      	ldr	r6, [r2, #0]
  401012:	f046 0610 	orr.w	r6, r6, #16
  401016:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P4;	//start debounce filter
  401018:	681e      	ldr	r6, [r3, #0]
  40101a:	f046 0610 	orr.w	r6, r6, #16
  40101e:	601e      	str	r6, [r3, #0]

	//Set up PC5 as ENCODER 3 INPUT B
	REG_PIOC_PER |= PIO_PER_P5; //enable PIO controller
  401020:	682e      	ldr	r6, [r5, #0]
  401022:	f046 0620 	orr.w	r6, r6, #32
  401026:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P5; //disable output
  401028:	6826      	ldr	r6, [r4, #0]
  40102a:	f046 0620 	orr.w	r6, r6, #32
  40102e:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P5; //disable pull-down resistor
  401030:	6806      	ldr	r6, [r0, #0]
  401032:	f046 0620 	orr.w	r6, r6, #32
  401036:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P5;	//enable pull-up resistor
  401038:	680e      	ldr	r6, [r1, #0]
  40103a:	f046 0620 	orr.w	r6, r6, #32
  40103e:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P5; //turn on slow clock debounce
  401040:	6816      	ldr	r6, [r2, #0]
  401042:	f046 0620 	orr.w	r6, r6, #32
  401046:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P5;	//start debounce filter
  401048:	681e      	ldr	r6, [r3, #0]
  40104a:	f046 0620 	orr.w	r6, r6, #32
  40104e:	601e      	str	r6, [r3, #0]



	//Set up PC6 as ENCODER 4 INPUT A
	REG_PIOC_PER |= PIO_PER_P6; //enable PIO controller
  401050:	682e      	ldr	r6, [r5, #0]
  401052:	f046 0640 	orr.w	r6, r6, #64	; 0x40
  401056:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P6; //disable output
  401058:	6826      	ldr	r6, [r4, #0]
  40105a:	f046 0640 	orr.w	r6, r6, #64	; 0x40
  40105e:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P6; //disable pull-down resistor
  401060:	6806      	ldr	r6, [r0, #0]
  401062:	f046 0640 	orr.w	r6, r6, #64	; 0x40
  401066:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P6;	//enable pull-up resistor
  401068:	680e      	ldr	r6, [r1, #0]
  40106a:	f046 0640 	orr.w	r6, r6, #64	; 0x40
  40106e:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P6; //turn on slow clock debounce
  401070:	6816      	ldr	r6, [r2, #0]
  401072:	f046 0640 	orr.w	r6, r6, #64	; 0x40
  401076:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P6;	//start debounce filter
  401078:	681e      	ldr	r6, [r3, #0]
  40107a:	f046 0640 	orr.w	r6, r6, #64	; 0x40
  40107e:	601e      	str	r6, [r3, #0]

	//Set up PC7 as ENCODER 4 INPUT B
	REG_PIOC_PER |= PIO_PER_P7; //enable PIO controller
  401080:	682e      	ldr	r6, [r5, #0]
  401082:	f046 0680 	orr.w	r6, r6, #128	; 0x80
  401086:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P7; //disable output
  401088:	6826      	ldr	r6, [r4, #0]
  40108a:	f046 0680 	orr.w	r6, r6, #128	; 0x80
  40108e:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P7; //disable pull-down resistor
  401090:	6806      	ldr	r6, [r0, #0]
  401092:	f046 0680 	orr.w	r6, r6, #128	; 0x80
  401096:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P7;	//enable pull-up resistor
  401098:	680e      	ldr	r6, [r1, #0]
  40109a:	f046 0680 	orr.w	r6, r6, #128	; 0x80
  40109e:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P7; //turn on slow clock debounce
  4010a0:	6816      	ldr	r6, [r2, #0]
  4010a2:	f046 0680 	orr.w	r6, r6, #128	; 0x80
  4010a6:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P7;	//start debounce filter
  4010a8:	681e      	ldr	r6, [r3, #0]
  4010aa:	f046 0680 	orr.w	r6, r6, #128	; 0x80
  4010ae:	601e      	str	r6, [r3, #0]



	//Set up PC8 as ENCODER 5 INPUT A
	REG_PIOC_PER |= PIO_PER_P8; //enable PIO controller
  4010b0:	682e      	ldr	r6, [r5, #0]
  4010b2:	f446 7680 	orr.w	r6, r6, #256	; 0x100
  4010b6:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P8; //disable output
  4010b8:	6826      	ldr	r6, [r4, #0]
  4010ba:	f446 7680 	orr.w	r6, r6, #256	; 0x100
  4010be:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P8; //disable pull-down resistor
  4010c0:	6806      	ldr	r6, [r0, #0]
  4010c2:	f446 7680 	orr.w	r6, r6, #256	; 0x100
  4010c6:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P8;	//enable pull-up resistor
  4010c8:	680e      	ldr	r6, [r1, #0]
  4010ca:	f446 7680 	orr.w	r6, r6, #256	; 0x100
  4010ce:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P8; //turn on slow clock debounce
  4010d0:	6816      	ldr	r6, [r2, #0]
  4010d2:	f446 7680 	orr.w	r6, r6, #256	; 0x100
  4010d6:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P8;	//start debounce filter
  4010d8:	681e      	ldr	r6, [r3, #0]
  4010da:	f446 7680 	orr.w	r6, r6, #256	; 0x100
  4010de:	601e      	str	r6, [r3, #0]

	//Set up PC9 as ENCODER 5 INPUT B
	REG_PIOC_PER |= PIO_PER_P9; //enable PIO controller
  4010e0:	682e      	ldr	r6, [r5, #0]
  4010e2:	f446 7600 	orr.w	r6, r6, #512	; 0x200
  4010e6:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P9; //disable output
  4010e8:	6826      	ldr	r6, [r4, #0]
  4010ea:	f446 7600 	orr.w	r6, r6, #512	; 0x200
  4010ee:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P9; //disable pull-down resistor
  4010f0:	6806      	ldr	r6, [r0, #0]
  4010f2:	f446 7600 	orr.w	r6, r6, #512	; 0x200
  4010f6:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P9;	//enable pull-up resistor
  4010f8:	680e      	ldr	r6, [r1, #0]
  4010fa:	f446 7600 	orr.w	r6, r6, #512	; 0x200
  4010fe:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P9; //turn on slow clock debounce
  401100:	6816      	ldr	r6, [r2, #0]
  401102:	f446 7600 	orr.w	r6, r6, #512	; 0x200
  401106:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P9;	//start debounce filter
  401108:	681e      	ldr	r6, [r3, #0]
  40110a:	f446 7600 	orr.w	r6, r6, #512	; 0x200
  40110e:	601e      	str	r6, [r3, #0]



	//Set up PC10 as ENCODER 6 INPUT A
	REG_PIOC_PER |= PIO_PER_P10; //enable PIO controller
  401110:	682e      	ldr	r6, [r5, #0]
  401112:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
  401116:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P10; //disable output
  401118:	6826      	ldr	r6, [r4, #0]
  40111a:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
  40111e:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P10; //disable pull-down resistor
  401120:	6806      	ldr	r6, [r0, #0]
  401122:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
  401126:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P10;	//enable pull-up resistor
  401128:	680e      	ldr	r6, [r1, #0]
  40112a:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
  40112e:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P10; //turn on slow clock debounce
  401130:	6816      	ldr	r6, [r2, #0]
  401132:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
  401136:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P10;	//start debounce filter
  401138:	681e      	ldr	r6, [r3, #0]
  40113a:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
  40113e:	601e      	str	r6, [r3, #0]

	//Set up PC11 as ENCODER 6 INPUT B
	REG_PIOC_PER |= PIO_PER_P11; //enable PIO controller
  401140:	682e      	ldr	r6, [r5, #0]
  401142:	f446 6600 	orr.w	r6, r6, #2048	; 0x800
  401146:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P11; //disable output
  401148:	6826      	ldr	r6, [r4, #0]
  40114a:	f446 6600 	orr.w	r6, r6, #2048	; 0x800
  40114e:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P11; //disable pull-down resistor
  401150:	6806      	ldr	r6, [r0, #0]
  401152:	f446 6600 	orr.w	r6, r6, #2048	; 0x800
  401156:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P11;	//enable pull-up resistor
  401158:	680e      	ldr	r6, [r1, #0]
  40115a:	f446 6600 	orr.w	r6, r6, #2048	; 0x800
  40115e:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P11; //turn on slow clock debounce
  401160:	6816      	ldr	r6, [r2, #0]
  401162:	f446 6600 	orr.w	r6, r6, #2048	; 0x800
  401166:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P11;	//start debounce filter
  401168:	681e      	ldr	r6, [r3, #0]
  40116a:	f446 6600 	orr.w	r6, r6, #2048	; 0x800
  40116e:	601e      	str	r6, [r3, #0]



	//Set up PC12 as ENCODER 7 INPUT A
	REG_PIOC_PER |= PIO_PER_P3; //enable PIO controller
  401170:	682e      	ldr	r6, [r5, #0]
  401172:	f046 0608 	orr.w	r6, r6, #8
  401176:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P3; //disable output
  401178:	6826      	ldr	r6, [r4, #0]
  40117a:	f046 0608 	orr.w	r6, r6, #8
  40117e:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P3; //disable pull-down resistor
  401180:	6806      	ldr	r6, [r0, #0]
  401182:	f046 0608 	orr.w	r6, r6, #8
  401186:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P3;	//enable pull-up resistor
  401188:	680e      	ldr	r6, [r1, #0]
  40118a:	f046 0608 	orr.w	r6, r6, #8
  40118e:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P3; //turn on slow clock debounce
  401190:	6816      	ldr	r6, [r2, #0]
  401192:	f046 0608 	orr.w	r6, r6, #8
  401196:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P3;	//start debounce filter
  401198:	681e      	ldr	r6, [r3, #0]
  40119a:	f046 0608 	orr.w	r6, r6, #8
  40119e:	601e      	str	r6, [r3, #0]

	//Set up PC13 as ENCODER 7 INPUT B
	REG_PIOC_PER |= PIO_PER_P13; //enable PIO controller
  4011a0:	682e      	ldr	r6, [r5, #0]
  4011a2:	f446 5600 	orr.w	r6, r6, #8192	; 0x2000
  4011a6:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P13; //disable output
  4011a8:	6826      	ldr	r6, [r4, #0]
  4011aa:	f446 5600 	orr.w	r6, r6, #8192	; 0x2000
  4011ae:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P13; //disable pull-down resistor
  4011b0:	6806      	ldr	r6, [r0, #0]
  4011b2:	e00f      	b.n	4011d4 <Encoder_init+0x2c8>
  4011b4:	20008730 	.word	0x20008730
  4011b8:	20008731 	.word	0x20008731
  4011bc:	400e0410 	.word	0x400e0410
  4011c0:	400e1200 	.word	0x400e1200
  4011c4:	400e1214 	.word	0x400e1214
  4011c8:	400e1290 	.word	0x400e1290
  4011cc:	400e1264 	.word	0x400e1264
  4011d0:	400e1220 	.word	0x400e1220
  4011d4:	f446 5600 	orr.w	r6, r6, #8192	; 0x2000
  4011d8:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P13;	//enable pull-up resistor
  4011da:	680e      	ldr	r6, [r1, #0]
  4011dc:	f446 5600 	orr.w	r6, r6, #8192	; 0x2000
  4011e0:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P13; //turn on slow clock debounce
  4011e2:	6816      	ldr	r6, [r2, #0]
  4011e4:	f446 5600 	orr.w	r6, r6, #8192	; 0x2000
  4011e8:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P13;	//start debounce filter
  4011ea:	681e      	ldr	r6, [r3, #0]
  4011ec:	f446 5600 	orr.w	r6, r6, #8192	; 0x2000
  4011f0:	601e      	str	r6, [r3, #0]



	//Set up PC14 as ENCODER 8 INPUT A
	REG_PIOC_PER |= PIO_PER_P14; //enable PIO controller
  4011f2:	682e      	ldr	r6, [r5, #0]
  4011f4:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
  4011f8:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P14; //disable output
  4011fa:	6826      	ldr	r6, [r4, #0]
  4011fc:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
  401200:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P14; //disable pull-down resistor
  401202:	6806      	ldr	r6, [r0, #0]
  401204:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
  401208:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P14;	//enable pull-up resistor
  40120a:	680e      	ldr	r6, [r1, #0]
  40120c:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
  401210:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P14; //turn on slow clock debounce
  401212:	6816      	ldr	r6, [r2, #0]
  401214:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
  401218:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P14;	//start debounce filter
  40121a:	681e      	ldr	r6, [r3, #0]
  40121c:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
  401220:	601e      	str	r6, [r3, #0]

	//Set up PC15 as ENCODER 8 INPUT B
	REG_PIOC_PER |= PIO_PER_P15; //enable PIO controller
  401222:	682e      	ldr	r6, [r5, #0]
  401224:	f446 4600 	orr.w	r6, r6, #32768	; 0x8000
  401228:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P15; //disable output
  40122a:	6826      	ldr	r6, [r4, #0]
  40122c:	f446 4600 	orr.w	r6, r6, #32768	; 0x8000
  401230:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P15; //disable pull-down resistor
  401232:	6806      	ldr	r6, [r0, #0]
  401234:	f446 4600 	orr.w	r6, r6, #32768	; 0x8000
  401238:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P15;	//enable pull-up resistor
  40123a:	680e      	ldr	r6, [r1, #0]
  40123c:	f446 4600 	orr.w	r6, r6, #32768	; 0x8000
  401240:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P15; //turn on slow clock debounce
  401242:	6816      	ldr	r6, [r2, #0]
  401244:	f446 4600 	orr.w	r6, r6, #32768	; 0x8000
  401248:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P15;	//start debounce filter
  40124a:	681e      	ldr	r6, [r3, #0]
  40124c:	f446 4600 	orr.w	r6, r6, #32768	; 0x8000
  401250:	601e      	str	r6, [r3, #0]



	//Set up PC16 as ENCODER 9 INPUT A
	REG_PIOC_PER |= PIO_PER_P16; //enable PIO controller
  401252:	682e      	ldr	r6, [r5, #0]
  401254:	f446 3680 	orr.w	r6, r6, #65536	; 0x10000
  401258:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P16; //disable output
  40125a:	6826      	ldr	r6, [r4, #0]
  40125c:	f446 3680 	orr.w	r6, r6, #65536	; 0x10000
  401260:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P16; //disable pull-down resistor
  401262:	6806      	ldr	r6, [r0, #0]
  401264:	f446 3680 	orr.w	r6, r6, #65536	; 0x10000
  401268:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P16;	//enable pull-up resistor
  40126a:	680e      	ldr	r6, [r1, #0]
  40126c:	f446 3680 	orr.w	r6, r6, #65536	; 0x10000
  401270:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P16; //turn on slow clock debounce
  401272:	6816      	ldr	r6, [r2, #0]
  401274:	f446 3680 	orr.w	r6, r6, #65536	; 0x10000
  401278:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P16;	//start debounce filter
  40127a:	681e      	ldr	r6, [r3, #0]
  40127c:	f446 3680 	orr.w	r6, r6, #65536	; 0x10000
  401280:	601e      	str	r6, [r3, #0]

	//Set up PC17 as ENCODER 9 INPUT B
	REG_PIOC_PER |= PIO_PER_P17; //enable PIO controller
  401282:	682e      	ldr	r6, [r5, #0]
  401284:	f446 3600 	orr.w	r6, r6, #131072	; 0x20000
  401288:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P17; //disable output
  40128a:	6826      	ldr	r6, [r4, #0]
  40128c:	f446 3600 	orr.w	r6, r6, #131072	; 0x20000
  401290:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P17; //disable pull-down resistor
  401292:	6806      	ldr	r6, [r0, #0]
  401294:	f446 3600 	orr.w	r6, r6, #131072	; 0x20000
  401298:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P17;	//enable pull-up resistor
  40129a:	680e      	ldr	r6, [r1, #0]
  40129c:	f446 3600 	orr.w	r6, r6, #131072	; 0x20000
  4012a0:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P17; //turn on slow clock debounce
  4012a2:	6816      	ldr	r6, [r2, #0]
  4012a4:	f446 3600 	orr.w	r6, r6, #131072	; 0x20000
  4012a8:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P17;	//start debounce filter
  4012aa:	681e      	ldr	r6, [r3, #0]
  4012ac:	f446 3600 	orr.w	r6, r6, #131072	; 0x20000
  4012b0:	601e      	str	r6, [r3, #0]



	
	//Set up PC18 as ENCODER 10 INPUT A
	REG_PIOC_PER |= PIO_PER_P18; //enable PIO controller
  4012b2:	682e      	ldr	r6, [r5, #0]
  4012b4:	f446 2680 	orr.w	r6, r6, #262144	; 0x40000
  4012b8:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P18; //disable output
  4012ba:	6826      	ldr	r6, [r4, #0]
  4012bc:	f446 2680 	orr.w	r6, r6, #262144	; 0x40000
  4012c0:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P18; //disable pull-down resistor
  4012c2:	6806      	ldr	r6, [r0, #0]
  4012c4:	f446 2680 	orr.w	r6, r6, #262144	; 0x40000
  4012c8:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P18;	//enable pull-up resistor
  4012ca:	680e      	ldr	r6, [r1, #0]
  4012cc:	f446 2680 	orr.w	r6, r6, #262144	; 0x40000
  4012d0:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P18; //turn on slow clock debounce
  4012d2:	6816      	ldr	r6, [r2, #0]
  4012d4:	f446 2680 	orr.w	r6, r6, #262144	; 0x40000
  4012d8:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P18;	//start debounce filter
  4012da:	681e      	ldr	r6, [r3, #0]
  4012dc:	f446 2680 	orr.w	r6, r6, #262144	; 0x40000
  4012e0:	601e      	str	r6, [r3, #0]

	//Set up PC19 as ENCODER 10 INPUT B
	REG_PIOC_PER |= PIO_PER_P19; //enable PIO controller
  4012e2:	682e      	ldr	r6, [r5, #0]
  4012e4:	f446 2600 	orr.w	r6, r6, #524288	; 0x80000
  4012e8:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P19; //disable output
  4012ea:	6826      	ldr	r6, [r4, #0]
  4012ec:	f446 2600 	orr.w	r6, r6, #524288	; 0x80000
  4012f0:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P19; //disable pull-down resistor
  4012f2:	6806      	ldr	r6, [r0, #0]
  4012f4:	f446 2600 	orr.w	r6, r6, #524288	; 0x80000
  4012f8:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P19;	//enable pull-up resistor
  4012fa:	680e      	ldr	r6, [r1, #0]
  4012fc:	f446 2600 	orr.w	r6, r6, #524288	; 0x80000
  401300:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P19; //turn on slow clock debounce
  401302:	6816      	ldr	r6, [r2, #0]
  401304:	f446 2600 	orr.w	r6, r6, #524288	; 0x80000
  401308:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P19;	//start debounce filter
  40130a:	681e      	ldr	r6, [r3, #0]
  40130c:	f446 2600 	orr.w	r6, r6, #524288	; 0x80000
  401310:	601e      	str	r6, [r3, #0]



	//Set up PC20 as ENCODER 11 INPUT A
	REG_PIOC_PER |= PIO_PER_P20; //enable PIO controller
  401312:	682e      	ldr	r6, [r5, #0]
  401314:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
  401318:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P20; //disable output
  40131a:	6826      	ldr	r6, [r4, #0]
  40131c:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
  401320:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P20; //disable pull-down resistor
  401322:	6806      	ldr	r6, [r0, #0]
  401324:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
  401328:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P20;	//enable pull-up resistor
  40132a:	680e      	ldr	r6, [r1, #0]
  40132c:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
  401330:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P20; //turn on slow clock debounce
  401332:	6816      	ldr	r6, [r2, #0]
  401334:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
  401338:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P20;	//start debounce filter
  40133a:	681e      	ldr	r6, [r3, #0]
  40133c:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
  401340:	601e      	str	r6, [r3, #0]

	//Set up PC21 as ENCODER 11 INPUT B
	REG_PIOC_PER |= PIO_PER_P21; //enable PIO controller
  401342:	682e      	ldr	r6, [r5, #0]
  401344:	f446 1600 	orr.w	r6, r6, #2097152	; 0x200000
  401348:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P21; //disable output
  40134a:	6826      	ldr	r6, [r4, #0]
  40134c:	f446 1600 	orr.w	r6, r6, #2097152	; 0x200000
  401350:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P21; //disable pull-down resistor
  401352:	6806      	ldr	r6, [r0, #0]
  401354:	f446 1600 	orr.w	r6, r6, #2097152	; 0x200000
  401358:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P21;	//enable pull-up resistor
  40135a:	680e      	ldr	r6, [r1, #0]
  40135c:	f446 1600 	orr.w	r6, r6, #2097152	; 0x200000
  401360:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P21; //turn on slow clock debounce
  401362:	6816      	ldr	r6, [r2, #0]
  401364:	f446 1600 	orr.w	r6, r6, #2097152	; 0x200000
  401368:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P21;	//start debounce filter
  40136a:	681e      	ldr	r6, [r3, #0]
  40136c:	f446 1600 	orr.w	r6, r6, #2097152	; 0x200000
  401370:	601e      	str	r6, [r3, #0]



	//Set up PC22 as ENCODER 12 INPUT A
	REG_PIOC_PER |= PIO_PER_P22; //enable PIO controller
  401372:	682e      	ldr	r6, [r5, #0]
  401374:	f446 0680 	orr.w	r6, r6, #4194304	; 0x400000
  401378:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P22; //disable output
  40137a:	6826      	ldr	r6, [r4, #0]
  40137c:	f446 0680 	orr.w	r6, r6, #4194304	; 0x400000
  401380:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P22; //disable pull-down resistor
  401382:	6806      	ldr	r6, [r0, #0]
  401384:	f446 0680 	orr.w	r6, r6, #4194304	; 0x400000
  401388:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P22;	//enable pull-up resistor
  40138a:	680e      	ldr	r6, [r1, #0]
  40138c:	f446 0680 	orr.w	r6, r6, #4194304	; 0x400000
  401390:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P22; //turn on slow clock debounce
  401392:	6816      	ldr	r6, [r2, #0]
  401394:	f446 0680 	orr.w	r6, r6, #4194304	; 0x400000
  401398:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P22;	//start debounce filter
  40139a:	681e      	ldr	r6, [r3, #0]
  40139c:	f446 0680 	orr.w	r6, r6, #4194304	; 0x400000
  4013a0:	601e      	str	r6, [r3, #0]

	//Set up PC23 as ENCODER 12 INPUT B
	REG_PIOC_PER |= PIO_PER_P23; //enable PIO controller
  4013a2:	682e      	ldr	r6, [r5, #0]
  4013a4:	f446 0600 	orr.w	r6, r6, #8388608	; 0x800000
  4013a8:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P23; //disable output
  4013aa:	6826      	ldr	r6, [r4, #0]
  4013ac:	f446 0600 	orr.w	r6, r6, #8388608	; 0x800000
  4013b0:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P23; //disable pull-down resistor
  4013b2:	6806      	ldr	r6, [r0, #0]
  4013b4:	f446 0600 	orr.w	r6, r6, #8388608	; 0x800000
  4013b8:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P23;	//enable pull-up resistor
  4013ba:	680e      	ldr	r6, [r1, #0]
  4013bc:	f446 0600 	orr.w	r6, r6, #8388608	; 0x800000
  4013c0:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P23; //turn on slow clock debounce
  4013c2:	6816      	ldr	r6, [r2, #0]
  4013c4:	f446 0600 	orr.w	r6, r6, #8388608	; 0x800000
  4013c8:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P23;	//start debounce filter
  4013ca:	681e      	ldr	r6, [r3, #0]
  4013cc:	f446 0600 	orr.w	r6, r6, #8388608	; 0x800000
  4013d0:	601e      	str	r6, [r3, #0]



	//Set up PC24 as ENCODER 13 INPUT A
	REG_PIOC_PER |= PIO_PER_P24; //enable PIO controller
  4013d2:	682e      	ldr	r6, [r5, #0]
  4013d4:	f046 7680 	orr.w	r6, r6, #16777216	; 0x1000000
  4013d8:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P24; //disable output
  4013da:	6826      	ldr	r6, [r4, #0]
  4013dc:	f046 7680 	orr.w	r6, r6, #16777216	; 0x1000000
  4013e0:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P24; //disable pull-down resistor
  4013e2:	6806      	ldr	r6, [r0, #0]
  4013e4:	f046 7680 	orr.w	r6, r6, #16777216	; 0x1000000
  4013e8:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P24;	//enable pull-up resistor
  4013ea:	680e      	ldr	r6, [r1, #0]
  4013ec:	f046 7680 	orr.w	r6, r6, #16777216	; 0x1000000
  4013f0:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P24; //turn on slow clock debounce
  4013f2:	6816      	ldr	r6, [r2, #0]
  4013f4:	f046 7680 	orr.w	r6, r6, #16777216	; 0x1000000
  4013f8:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P24;	//start debounce filter
  4013fa:	681e      	ldr	r6, [r3, #0]
  4013fc:	f046 7680 	orr.w	r6, r6, #16777216	; 0x1000000
  401400:	601e      	str	r6, [r3, #0]

	//Set up PC25 as ENCODER 13 INPUT B
	REG_PIOC_PER |= PIO_PER_P25; //enable PIO controller
  401402:	682e      	ldr	r6, [r5, #0]
  401404:	f046 7600 	orr.w	r6, r6, #33554432	; 0x2000000
  401408:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P25; //disable output
  40140a:	6826      	ldr	r6, [r4, #0]
  40140c:	f046 7600 	orr.w	r6, r6, #33554432	; 0x2000000
  401410:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P25; //disable pull-down resistor
  401412:	6806      	ldr	r6, [r0, #0]
  401414:	f046 7600 	orr.w	r6, r6, #33554432	; 0x2000000
  401418:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P25;	//enable pull-up resistor
  40141a:	680e      	ldr	r6, [r1, #0]
  40141c:	f046 7600 	orr.w	r6, r6, #33554432	; 0x2000000
  401420:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P25; //turn on slow clock debounce
  401422:	6816      	ldr	r6, [r2, #0]
  401424:	f046 7600 	orr.w	r6, r6, #33554432	; 0x2000000
  401428:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P25;	//start debounce filter
  40142a:	681e      	ldr	r6, [r3, #0]
  40142c:	f046 7600 	orr.w	r6, r6, #33554432	; 0x2000000
  401430:	601e      	str	r6, [r3, #0]



	//Set up PC26 as ENCODER 14 INPUT A
	REG_PIOC_PER |= PIO_PER_P26; //enable PIO controller
  401432:	682e      	ldr	r6, [r5, #0]
  401434:	f046 6680 	orr.w	r6, r6, #67108864	; 0x4000000
  401438:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P26; //disable output
  40143a:	6826      	ldr	r6, [r4, #0]
  40143c:	f046 6680 	orr.w	r6, r6, #67108864	; 0x4000000
  401440:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P26; //disable pull-down resistor
  401442:	6806      	ldr	r6, [r0, #0]
  401444:	f046 6680 	orr.w	r6, r6, #67108864	; 0x4000000
  401448:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P26;	//enable pull-up resistor
  40144a:	680e      	ldr	r6, [r1, #0]
  40144c:	f046 6680 	orr.w	r6, r6, #67108864	; 0x4000000
  401450:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P26; //turn on slow clock debounce
  401452:	6816      	ldr	r6, [r2, #0]
  401454:	f046 6680 	orr.w	r6, r6, #67108864	; 0x4000000
  401458:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P26;	//start debounce filter
  40145a:	681e      	ldr	r6, [r3, #0]
  40145c:	f046 6680 	orr.w	r6, r6, #67108864	; 0x4000000
  401460:	601e      	str	r6, [r3, #0]

	//Set up PC27 as ENCODER 14 INPUT B
	REG_PIOC_PER |= PIO_PER_P27; //enable PIO controller
  401462:	682e      	ldr	r6, [r5, #0]
  401464:	f046 6600 	orr.w	r6, r6, #134217728	; 0x8000000
  401468:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P27; //disable output
  40146a:	6826      	ldr	r6, [r4, #0]
  40146c:	f046 6600 	orr.w	r6, r6, #134217728	; 0x8000000
  401470:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P27; //disable pull-down resistor
  401472:	6806      	ldr	r6, [r0, #0]
  401474:	f046 6600 	orr.w	r6, r6, #134217728	; 0x8000000
  401478:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P27;	//enable pull-up resistor
  40147a:	680e      	ldr	r6, [r1, #0]
  40147c:	f046 6600 	orr.w	r6, r6, #134217728	; 0x8000000
  401480:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P27; //turn on slow clock debounce
  401482:	6816      	ldr	r6, [r2, #0]
  401484:	f046 6600 	orr.w	r6, r6, #134217728	; 0x8000000
  401488:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P27;	//start debounce filter
  40148a:	681e      	ldr	r6, [r3, #0]
  40148c:	f046 6600 	orr.w	r6, r6, #134217728	; 0x8000000
  401490:	601e      	str	r6, [r3, #0]



	//Set up PC28 as ENCODER 15 INPUT A
	REG_PIOC_PER |= PIO_PER_P28; //enable PIO controller
  401492:	682e      	ldr	r6, [r5, #0]
  401494:	f046 5680 	orr.w	r6, r6, #268435456	; 0x10000000
  401498:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P28; //disable output
  40149a:	6826      	ldr	r6, [r4, #0]
  40149c:	f046 5680 	orr.w	r6, r6, #268435456	; 0x10000000
  4014a0:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P28; //disable pull-down resistor
  4014a2:	6806      	ldr	r6, [r0, #0]
  4014a4:	f046 5680 	orr.w	r6, r6, #268435456	; 0x10000000
  4014a8:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P28;	//enable pull-up resistor
  4014aa:	680e      	ldr	r6, [r1, #0]
  4014ac:	f046 5680 	orr.w	r6, r6, #268435456	; 0x10000000
  4014b0:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P28; //turn on slow clock debounce
  4014b2:	6816      	ldr	r6, [r2, #0]
  4014b4:	f046 5680 	orr.w	r6, r6, #268435456	; 0x10000000
  4014b8:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P28;	//start debounce filter
  4014ba:	681e      	ldr	r6, [r3, #0]
  4014bc:	f046 5680 	orr.w	r6, r6, #268435456	; 0x10000000
  4014c0:	601e      	str	r6, [r3, #0]

	//Set up PC29 as ENCODER 15 INPUT B
	REG_PIOC_PER |= PIO_PER_P29; //enable PIO controller
  4014c2:	682e      	ldr	r6, [r5, #0]
  4014c4:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
  4014c8:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P29; //disable output
  4014ca:	6826      	ldr	r6, [r4, #0]
  4014cc:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
  4014d0:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P29; //disable pull-down resistor
  4014d2:	6806      	ldr	r6, [r0, #0]
  4014d4:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
  4014d8:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P29;	//enable pull-up resistor
  4014da:	680e      	ldr	r6, [r1, #0]
  4014dc:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
  4014e0:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P29; //turn on slow clock debounce
  4014e2:	6816      	ldr	r6, [r2, #0]
  4014e4:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
  4014e8:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P29;	//start debounce filter
  4014ea:	681e      	ldr	r6, [r3, #0]
  4014ec:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
  4014f0:	601e      	str	r6, [r3, #0]



	//Set up PC30 as ENCODER 16 INPUT A
	REG_PIOC_PER |= PIO_PER_P30; //enable PIO controller
  4014f2:	682e      	ldr	r6, [r5, #0]
  4014f4:	f046 4680 	orr.w	r6, r6, #1073741824	; 0x40000000
  4014f8:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P30; //disable output
  4014fa:	6826      	ldr	r6, [r4, #0]
  4014fc:	f046 4680 	orr.w	r6, r6, #1073741824	; 0x40000000
  401500:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P30; //disable pull-down resistor
  401502:	6806      	ldr	r6, [r0, #0]
  401504:	f046 4680 	orr.w	r6, r6, #1073741824	; 0x40000000
  401508:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P30;	//enable pull-up resistor
  40150a:	680e      	ldr	r6, [r1, #0]
  40150c:	f046 4680 	orr.w	r6, r6, #1073741824	; 0x40000000
  401510:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P30; //turn on slow clock debounce
  401512:	6816      	ldr	r6, [r2, #0]
  401514:	f046 4680 	orr.w	r6, r6, #1073741824	; 0x40000000
  401518:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P30;	//start debounce filter
  40151a:	681e      	ldr	r6, [r3, #0]
  40151c:	f046 4680 	orr.w	r6, r6, #1073741824	; 0x40000000
  401520:	601e      	str	r6, [r3, #0]

	//Set up PC31 as ENCODER 16 INPUT B
	REG_PIOC_PER |= PIO_PER_P31; //enable PIO controller
  401522:	682e      	ldr	r6, [r5, #0]
  401524:	f046 4600 	orr.w	r6, r6, #2147483648	; 0x80000000
  401528:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P31; //disable output
  40152a:	6825      	ldr	r5, [r4, #0]
  40152c:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
  401530:	6025      	str	r5, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P31; //disable pull-down resistor
  401532:	6804      	ldr	r4, [r0, #0]
  401534:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
  401538:	6004      	str	r4, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P31;	//enable pull-up resistor
  40153a:	6808      	ldr	r0, [r1, #0]
  40153c:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
  401540:	6008      	str	r0, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P31; //turn on slow clock debounce
  401542:	6811      	ldr	r1, [r2, #0]
  401544:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
  401548:	6011      	str	r1, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P31;	//start debounce filter
  40154a:	681a      	ldr	r2, [r3, #0]
  40154c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
  401550:	601a      	str	r2, [r3, #0]
	


	/**************			CONFIGURE ENCODER INTERRUPTS			**************/

	uint32_t flag_clear = REG_PIOC_ISR;	//clear left over interrupt flags
  401552:	332c      	adds	r3, #44	; 0x2c
  401554:	681b      	ldr	r3, [r3, #0]

	//Enable interrupts for Encoder 1
	REG_PIOC_IER |= PIO_IER_P0;			//enable input rising edge interrupt
  401556:	4b85      	ldr	r3, [pc, #532]	; (40176c <Encoder_init+0x860>)
  401558:	681a      	ldr	r2, [r3, #0]
  40155a:	f042 0201 	orr.w	r2, r2, #1
  40155e:	601a      	str	r2, [r3, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P0;
  401560:	4a83      	ldr	r2, [pc, #524]	; (401770 <Encoder_init+0x864>)
  401562:	6811      	ldr	r1, [r2, #0]
  401564:	f041 0101 	orr.w	r1, r1, #1
  401568:	6011      	str	r1, [r2, #0]
	REG_PIOC_IER |= PIO_IER_P1;			//enable input rising edge interrupt
  40156a:	6819      	ldr	r1, [r3, #0]
  40156c:	f041 0102 	orr.w	r1, r1, #2
  401570:	6019      	str	r1, [r3, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P1;
  401572:	6811      	ldr	r1, [r2, #0]
  401574:	f041 0102 	orr.w	r1, r1, #2
  401578:	6011      	str	r1, [r2, #0]

	//Enable interrupts for Encoder 2
	REG_PIOC_IER |= PIO_IER_P2;			//enable input rising edge interrupt
  40157a:	6819      	ldr	r1, [r3, #0]
  40157c:	f041 0104 	orr.w	r1, r1, #4
  401580:	6019      	str	r1, [r3, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P2;
  401582:	6812      	ldr	r2, [r2, #0]
  401584:	f042 0204 	orr.w	r2, r2, #4
  401588:	3394      	adds	r3, #148	; 0x94
  40158a:	601a      	str	r2, [r3, #0]
	REG_PIOC_IER |= PIO_IER_P3;			//enable input rising edge interrupt
  40158c:	4a77      	ldr	r2, [pc, #476]	; (40176c <Encoder_init+0x860>)
  40158e:	6811      	ldr	r1, [r2, #0]
  401590:	f041 0108 	orr.w	r1, r1, #8
  401594:	6011      	str	r1, [r2, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P3;
  401596:	6819      	ldr	r1, [r3, #0]
  401598:	f041 0108 	orr.w	r1, r1, #8
  40159c:	6019      	str	r1, [r3, #0]

	//Enable interrupts for Encoder 3
	REG_PIOC_IER |= PIO_IER_P4;			//enable input rising edge interrupt
  40159e:	6811      	ldr	r1, [r2, #0]
  4015a0:	f041 0110 	orr.w	r1, r1, #16
  4015a4:	6011      	str	r1, [r2, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P4;
  4015a6:	6819      	ldr	r1, [r3, #0]
  4015a8:	f041 0110 	orr.w	r1, r1, #16
  4015ac:	6019      	str	r1, [r3, #0]
	REG_PIOC_IER |= PIO_IER_P5;			//enable input rising edge interrupt
  4015ae:	6811      	ldr	r1, [r2, #0]
  4015b0:	f041 0120 	orr.w	r1, r1, #32
  4015b4:	6011      	str	r1, [r2, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P5;
  4015b6:	6819      	ldr	r1, [r3, #0]
  4015b8:	f041 0120 	orr.w	r1, r1, #32
  4015bc:	6019      	str	r1, [r3, #0]

	//Enable interrupts for Encoder 4
	REG_PIOC_IER |= PIO_IER_P6;			//enable input rising edge interrupt
  4015be:	6811      	ldr	r1, [r2, #0]
  4015c0:	f041 0140 	orr.w	r1, r1, #64	; 0x40
  4015c4:	6011      	str	r1, [r2, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P6;
  4015c6:	6819      	ldr	r1, [r3, #0]
  4015c8:	f041 0140 	orr.w	r1, r1, #64	; 0x40
  4015cc:	6019      	str	r1, [r3, #0]
	REG_PIOC_IER |= PIO_IER_P7;			//enable input rising edge interrupt
  4015ce:	6811      	ldr	r1, [r2, #0]
  4015d0:	f041 0180 	orr.w	r1, r1, #128	; 0x80
  4015d4:	6011      	str	r1, [r2, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P7;
  4015d6:	6819      	ldr	r1, [r3, #0]
  4015d8:	f041 0180 	orr.w	r1, r1, #128	; 0x80
  4015dc:	6019      	str	r1, [r3, #0]

	//Enable interrupts for Encoder 5
	REG_PIOC_IER |= PIO_IER_P8;			//enable input rising edge interrupt
  4015de:	6811      	ldr	r1, [r2, #0]
  4015e0:	f441 7180 	orr.w	r1, r1, #256	; 0x100
  4015e4:	6011      	str	r1, [r2, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P8;
  4015e6:	6819      	ldr	r1, [r3, #0]
  4015e8:	f441 7180 	orr.w	r1, r1, #256	; 0x100
  4015ec:	6019      	str	r1, [r3, #0]
	REG_PIOC_IER |= PIO_IER_P9;			//enable input rising edge interrupt
  4015ee:	6811      	ldr	r1, [r2, #0]
  4015f0:	f441 7100 	orr.w	r1, r1, #512	; 0x200
  4015f4:	6011      	str	r1, [r2, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P9;
  4015f6:	6819      	ldr	r1, [r3, #0]
  4015f8:	f441 7100 	orr.w	r1, r1, #512	; 0x200
  4015fc:	6019      	str	r1, [r3, #0]

	//Enable interrupts for Encoder 6
	REG_PIOC_IER |= PIO_IER_P10;			//enable input rising edge interrupt
  4015fe:	6811      	ldr	r1, [r2, #0]
  401600:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
  401604:	6011      	str	r1, [r2, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P10;
  401606:	6819      	ldr	r1, [r3, #0]
  401608:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
  40160c:	6019      	str	r1, [r3, #0]
	REG_PIOC_IER |= PIO_IER_P11;			//enable input rising edge interrupt
  40160e:	6811      	ldr	r1, [r2, #0]
  401610:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
  401614:	6011      	str	r1, [r2, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P11;
  401616:	6819      	ldr	r1, [r3, #0]
  401618:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
  40161c:	6019      	str	r1, [r3, #0]

	//Enable interrupts for Encoder 7
	REG_PIOC_IER |= PIO_IER_P3;			//enable input rising edge interrupt
  40161e:	6811      	ldr	r1, [r2, #0]
  401620:	f041 0108 	orr.w	r1, r1, #8
  401624:	6011      	str	r1, [r2, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P3;
  401626:	6819      	ldr	r1, [r3, #0]
  401628:	f041 0108 	orr.w	r1, r1, #8
  40162c:	6019      	str	r1, [r3, #0]
	REG_PIOC_IER |= PIO_IER_P13;			//enable input rising edge interrupt
  40162e:	6811      	ldr	r1, [r2, #0]
  401630:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
  401634:	6011      	str	r1, [r2, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P13;
  401636:	6819      	ldr	r1, [r3, #0]
  401638:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
  40163c:	6019      	str	r1, [r3, #0]

	//Enable interrupts for Encoder 8
	REG_PIOC_IER |= PIO_IER_P14;			//enable input rising edge interrupt
  40163e:	6811      	ldr	r1, [r2, #0]
  401640:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
  401644:	6011      	str	r1, [r2, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P14;
  401646:	6819      	ldr	r1, [r3, #0]
  401648:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
  40164c:	6019      	str	r1, [r3, #0]
	REG_PIOC_IER |= PIO_IER_P15;			//enable input rising edge interrupt
  40164e:	6811      	ldr	r1, [r2, #0]
  401650:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
  401654:	6011      	str	r1, [r2, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P15;
  401656:	6819      	ldr	r1, [r3, #0]
  401658:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
  40165c:	6019      	str	r1, [r3, #0]

	//Enable interrupts for Encoder 9
	REG_PIOC_IER |= PIO_IER_P16;			//enable input rising edge interrupt
  40165e:	6811      	ldr	r1, [r2, #0]
  401660:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
  401664:	6011      	str	r1, [r2, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P16;
  401666:	6819      	ldr	r1, [r3, #0]
  401668:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
  40166c:	6019      	str	r1, [r3, #0]
	REG_PIOC_IER |= PIO_IER_P17;			//enable input rising edge interrupt
  40166e:	6811      	ldr	r1, [r2, #0]
  401670:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
  401674:	6011      	str	r1, [r2, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P17;
  401676:	6819      	ldr	r1, [r3, #0]
  401678:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
  40167c:	6019      	str	r1, [r3, #0]

	//Enable interrupts for Encoder 10
	REG_PIOC_IER |= PIO_IER_P18;			//enable input rising edge interrupt
  40167e:	6811      	ldr	r1, [r2, #0]
  401680:	f441 2180 	orr.w	r1, r1, #262144	; 0x40000
  401684:	6011      	str	r1, [r2, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P18;
  401686:	6819      	ldr	r1, [r3, #0]
  401688:	f441 2180 	orr.w	r1, r1, #262144	; 0x40000
  40168c:	6019      	str	r1, [r3, #0]
	REG_PIOC_IER |= PIO_IER_P19;			//enable input rising edge interrupt
  40168e:	6811      	ldr	r1, [r2, #0]
  401690:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
  401694:	6011      	str	r1, [r2, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P19;
  401696:	6819      	ldr	r1, [r3, #0]
  401698:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
  40169c:	6019      	str	r1, [r3, #0]

	//Enable interrupts for Encoder 11
	REG_PIOC_IER |= PIO_IER_P20;			//enable input rising edge interrupt
  40169e:	6811      	ldr	r1, [r2, #0]
  4016a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4016a4:	6011      	str	r1, [r2, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P20;
  4016a6:	6819      	ldr	r1, [r3, #0]
  4016a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4016ac:	6019      	str	r1, [r3, #0]
	REG_PIOC_IER |= PIO_IER_P21;			//enable input rising edge interrupt
  4016ae:	6811      	ldr	r1, [r2, #0]
  4016b0:	f441 1100 	orr.w	r1, r1, #2097152	; 0x200000
  4016b4:	6011      	str	r1, [r2, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P21;
  4016b6:	6819      	ldr	r1, [r3, #0]
  4016b8:	f441 1100 	orr.w	r1, r1, #2097152	; 0x200000
  4016bc:	6019      	str	r1, [r3, #0]

	//Enable interrupts for Encoder 12
	REG_PIOC_IER |= PIO_IER_P22;			//enable input rising edge interrupt
  4016be:	6811      	ldr	r1, [r2, #0]
  4016c0:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
  4016c4:	6011      	str	r1, [r2, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P22;
  4016c6:	6819      	ldr	r1, [r3, #0]
  4016c8:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
  4016cc:	6019      	str	r1, [r3, #0]
	REG_PIOC_IER |= PIO_IER_P23;			//enable input rising edge interrupt
  4016ce:	6811      	ldr	r1, [r2, #0]
  4016d0:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
  4016d4:	6011      	str	r1, [r2, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P23;
  4016d6:	6819      	ldr	r1, [r3, #0]
  4016d8:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
  4016dc:	6019      	str	r1, [r3, #0]

	//Enable interrupts for Encoder 13
	REG_PIOC_IER |= PIO_IER_P24;			//enable input rising edge interrupt
  4016de:	6811      	ldr	r1, [r2, #0]
  4016e0:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
  4016e4:	6011      	str	r1, [r2, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P24;
  4016e6:	6819      	ldr	r1, [r3, #0]
  4016e8:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
  4016ec:	6019      	str	r1, [r3, #0]
	REG_PIOC_IER |= PIO_IER_P25;			//enable input rising edge interrupt
  4016ee:	6811      	ldr	r1, [r2, #0]
  4016f0:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
  4016f4:	6011      	str	r1, [r2, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P25;
  4016f6:	6819      	ldr	r1, [r3, #0]
  4016f8:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
  4016fc:	6019      	str	r1, [r3, #0]

	//Enable interrupts for Encoder 14
	REG_PIOC_IER |= PIO_IER_P26;			//enable input rising edge interrupt
  4016fe:	6811      	ldr	r1, [r2, #0]
  401700:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
  401704:	6011      	str	r1, [r2, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P26;
  401706:	6819      	ldr	r1, [r3, #0]
  401708:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
  40170c:	6019      	str	r1, [r3, #0]
	REG_PIOC_IER |= PIO_IER_P27;			//enable input rising edge interrupt
  40170e:	6811      	ldr	r1, [r2, #0]
  401710:	f041 6100 	orr.w	r1, r1, #134217728	; 0x8000000
  401714:	6011      	str	r1, [r2, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P27;
  401716:	6819      	ldr	r1, [r3, #0]
  401718:	f041 6100 	orr.w	r1, r1, #134217728	; 0x8000000
  40171c:	6019      	str	r1, [r3, #0]

	//Enable interrupts for Encoder 15
	REG_PIOC_IER |= PIO_IER_P28;			//enable input rising edge interrupt
  40171e:	6811      	ldr	r1, [r2, #0]
  401720:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
  401724:	6011      	str	r1, [r2, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P28;
  401726:	6819      	ldr	r1, [r3, #0]
  401728:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
  40172c:	6019      	str	r1, [r3, #0]
	REG_PIOC_IER |= PIO_IER_P29;			//enable input rising edge interrupt
  40172e:	6811      	ldr	r1, [r2, #0]
  401730:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
  401734:	6011      	str	r1, [r2, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P29;
  401736:	6819      	ldr	r1, [r3, #0]
  401738:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
  40173c:	6019      	str	r1, [r3, #0]

	//Enable interrupts for Encoder 16
	REG_PIOC_IER |= PIO_IER_P30;			//enable input rising edge interrupt
  40173e:	6811      	ldr	r1, [r2, #0]
  401740:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
  401744:	6011      	str	r1, [r2, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P30;
  401746:	6819      	ldr	r1, [r3, #0]
  401748:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
  40174c:	6019      	str	r1, [r3, #0]
	REG_PIOC_IER |= PIO_IER_P31;			//enable input rising edge interrupt
  40174e:	6811      	ldr	r1, [r2, #0]
  401750:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
  401754:	6011      	str	r1, [r2, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P31;
  401756:	681a      	ldr	r2, [r3, #0]
  401758:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
  40175c:	601a      	str	r2, [r3, #0]
  40175e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  401762:	4b04      	ldr	r3, [pc, #16]	; (401774 <Encoder_init+0x868>)
  401764:	601a      	str	r2, [r3, #0]

	NVIC_EnableIRQ(PIOC_IRQn);			//enable PORT C interrupts


}
  401766:	bc70      	pop	{r4, r5, r6}
  401768:	4770      	bx	lr
  40176a:	bf00      	nop
  40176c:	400e1240 	.word	0x400e1240
  401770:	400e12d4 	.word	0x400e12d4
  401774:	e000e100 	.word	0xe000e100

00401778 <PIOC_Handler>:



void PIOC_Handler(){
  401778:	b508      	push	{r3, lr}

	uint32_t status = REG_PIOC_ISR;	//read PIOC interrupt status & clear interrupt flags
  40177a:	4b56      	ldr	r3, [pc, #344]	; (4018d4 <PIOC_Handler+0x15c>)
  40177c:	681b      	ldr	r3, [r3, #0]

	//check if Encoder 1 was rotated
	if ( (status & PIO_ISR_P0) || (status & PIO_ISR_P1) ){	
  40177e:	f013 0f03 	tst.w	r3, #3
  401782:	d005      	beq.n	401790 <PIOC_Handler+0x18>
		encoder_direction(PIO_ODSR_P0, PIO_ODSR_P1, 0);
  401784:	2200      	movs	r2, #0
  401786:	2102      	movs	r1, #2
  401788:	2001      	movs	r0, #1
  40178a:	4b53      	ldr	r3, [pc, #332]	; (4018d8 <PIOC_Handler+0x160>)
  40178c:	4798      	blx	r3
  40178e:	bd08      	pop	{r3, pc}
	}

	//check if Encoder 2 was rotated
	else if ( (status & PIO_ISR_P2) || (status & PIO_ISR_P3) ){
  401790:	f013 0f0c 	tst.w	r3, #12
  401794:	d005      	beq.n	4017a2 <PIOC_Handler+0x2a>
		encoder_direction(PIO_ODSR_P2, PIO_ODSR_P3, 1);
  401796:	2201      	movs	r2, #1
  401798:	2108      	movs	r1, #8
  40179a:	2004      	movs	r0, #4
  40179c:	4b4e      	ldr	r3, [pc, #312]	; (4018d8 <PIOC_Handler+0x160>)
  40179e:	4798      	blx	r3
  4017a0:	bd08      	pop	{r3, pc}
	}

	//check if Encoder 3 was rotated
	else if ( (status & PIO_ISR_P4) || (status & PIO_ISR_P5) ){
  4017a2:	f013 0f30 	tst.w	r3, #48	; 0x30
  4017a6:	d005      	beq.n	4017b4 <PIOC_Handler+0x3c>
		encoder_direction(PIO_ODSR_P4, PIO_ODSR_P5, 2);
  4017a8:	2202      	movs	r2, #2
  4017aa:	2120      	movs	r1, #32
  4017ac:	2010      	movs	r0, #16
  4017ae:	4b4a      	ldr	r3, [pc, #296]	; (4018d8 <PIOC_Handler+0x160>)
  4017b0:	4798      	blx	r3
  4017b2:	bd08      	pop	{r3, pc}
	}

	//check if Encoder 4 was rotated
	else if ( (status & PIO_ISR_P6) || (status & PIO_ISR_P7) ){
  4017b4:	f013 0fc0 	tst.w	r3, #192	; 0xc0
  4017b8:	d005      	beq.n	4017c6 <PIOC_Handler+0x4e>
		encoder_direction(PIO_ODSR_P6, PIO_ODSR_P7, 3);
  4017ba:	2203      	movs	r2, #3
  4017bc:	2180      	movs	r1, #128	; 0x80
  4017be:	2040      	movs	r0, #64	; 0x40
  4017c0:	4b45      	ldr	r3, [pc, #276]	; (4018d8 <PIOC_Handler+0x160>)
  4017c2:	4798      	blx	r3
  4017c4:	bd08      	pop	{r3, pc}
	}

	//check if Encoder 5 was rotated
	else if ( (status & PIO_ISR_P8) || (status & PIO_ISR_P9) ){
  4017c6:	f413 7f40 	tst.w	r3, #768	; 0x300
  4017ca:	d007      	beq.n	4017dc <PIOC_Handler+0x64>
		encoder_direction(PIO_ODSR_P8, PIO_ODSR_P9, 4);
  4017cc:	2204      	movs	r2, #4
  4017ce:	f44f 7100 	mov.w	r1, #512	; 0x200
  4017d2:	f44f 7080 	mov.w	r0, #256	; 0x100
  4017d6:	4b40      	ldr	r3, [pc, #256]	; (4018d8 <PIOC_Handler+0x160>)
  4017d8:	4798      	blx	r3
  4017da:	bd08      	pop	{r3, pc}
	}

	//check if Encoder 6 was rotated
	else if ( (status & PIO_ISR_P10) || (status & PIO_ISR_P11) ){
  4017dc:	f413 6f40 	tst.w	r3, #3072	; 0xc00
  4017e0:	d007      	beq.n	4017f2 <PIOC_Handler+0x7a>
		encoder_direction(PIO_ODSR_P10, PIO_ODSR_P11, 5);
  4017e2:	2205      	movs	r2, #5
  4017e4:	f44f 6100 	mov.w	r1, #2048	; 0x800
  4017e8:	f44f 6080 	mov.w	r0, #1024	; 0x400
  4017ec:	4b3a      	ldr	r3, [pc, #232]	; (4018d8 <PIOC_Handler+0x160>)
  4017ee:	4798      	blx	r3
  4017f0:	bd08      	pop	{r3, pc}
	}

	//check if Encoder 7 was rotated
	else if ( (status & PIO_ISR_P12) || (status & PIO_ISR_P13) ){
  4017f2:	f413 5f40 	tst.w	r3, #12288	; 0x3000
  4017f6:	d007      	beq.n	401808 <PIOC_Handler+0x90>
		encoder_direction(PIO_ODSR_P12, PIO_ODSR_P13, 6);
  4017f8:	2206      	movs	r2, #6
  4017fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  4017fe:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  401802:	4b35      	ldr	r3, [pc, #212]	; (4018d8 <PIOC_Handler+0x160>)
  401804:	4798      	blx	r3
  401806:	bd08      	pop	{r3, pc}
	}

	//check if Encoder 8 was rotated
	else if ( (status & PIO_ISR_P14) || (status & PIO_ISR_P15) ){
  401808:	f413 4f40 	tst.w	r3, #49152	; 0xc000
  40180c:	d007      	beq.n	40181e <PIOC_Handler+0xa6>
		encoder_direction(PIO_ODSR_P14, PIO_ODSR_P15, 7);
  40180e:	2207      	movs	r2, #7
  401810:	f44f 4100 	mov.w	r1, #32768	; 0x8000
  401814:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  401818:	4b2f      	ldr	r3, [pc, #188]	; (4018d8 <PIOC_Handler+0x160>)
  40181a:	4798      	blx	r3
  40181c:	bd08      	pop	{r3, pc}
	}

	//check if Encoder 9 was rotated
	else if ( (status & PIO_ISR_P16) || (status & PIO_ISR_P17) ){
  40181e:	f413 3f40 	tst.w	r3, #196608	; 0x30000
  401822:	d007      	beq.n	401834 <PIOC_Handler+0xbc>
		encoder_direction(PIO_ODSR_P16, PIO_ODSR_P17, 8);
  401824:	2208      	movs	r2, #8
  401826:	f44f 3100 	mov.w	r1, #131072	; 0x20000
  40182a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
  40182e:	4b2a      	ldr	r3, [pc, #168]	; (4018d8 <PIOC_Handler+0x160>)
  401830:	4798      	blx	r3
  401832:	bd08      	pop	{r3, pc}
	}

	//check if Encoder 10 was rotated
	else if ( (status & PIO_ISR_P18) || (status & PIO_ISR_P19) ){
  401834:	f413 2f40 	tst.w	r3, #786432	; 0xc0000
  401838:	d007      	beq.n	40184a <PIOC_Handler+0xd2>
		encoder_direction(PIO_ODSR_P18, PIO_ODSR_P19, 9);
  40183a:	2209      	movs	r2, #9
  40183c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  401840:	f44f 2080 	mov.w	r0, #262144	; 0x40000
  401844:	4b24      	ldr	r3, [pc, #144]	; (4018d8 <PIOC_Handler+0x160>)
  401846:	4798      	blx	r3
  401848:	bd08      	pop	{r3, pc}
	}

	//check if Encoder 11 was rotated
	else if ( (status & PIO_ISR_P20) || (status & PIO_ISR_P21) ){
  40184a:	f413 1f40 	tst.w	r3, #3145728	; 0x300000
  40184e:	d007      	beq.n	401860 <PIOC_Handler+0xe8>
		encoder_direction(PIO_ODSR_P20, PIO_ODSR_P21, 10);
  401850:	220a      	movs	r2, #10
  401852:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
  401856:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  40185a:	4b1f      	ldr	r3, [pc, #124]	; (4018d8 <PIOC_Handler+0x160>)
  40185c:	4798      	blx	r3
  40185e:	bd08      	pop	{r3, pc}
	}

	//check if Encoder 12 was rotated
	else if ( (status & PIO_ISR_P22) || (status & PIO_ISR_P23) ){
  401860:	f413 0f40 	tst.w	r3, #12582912	; 0xc00000
  401864:	d007      	beq.n	401876 <PIOC_Handler+0xfe>
		encoder_direction(PIO_ODSR_P22, PIO_ODSR_P23, 11);
  401866:	220b      	movs	r2, #11
  401868:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
  40186c:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
  401870:	4b19      	ldr	r3, [pc, #100]	; (4018d8 <PIOC_Handler+0x160>)
  401872:	4798      	blx	r3
  401874:	bd08      	pop	{r3, pc}
	}

	//check if Encoder 13 was rotated
	else if ( (status & PIO_ISR_P24) || (status & PIO_ISR_P25) ){
  401876:	f013 7f40 	tst.w	r3, #50331648	; 0x3000000
  40187a:	d007      	beq.n	40188c <PIOC_Handler+0x114>
		encoder_direction(PIO_ODSR_P24, PIO_ODSR_P25, 12);
  40187c:	220c      	movs	r2, #12
  40187e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
  401882:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
  401886:	4b14      	ldr	r3, [pc, #80]	; (4018d8 <PIOC_Handler+0x160>)
  401888:	4798      	blx	r3
  40188a:	bd08      	pop	{r3, pc}
	}
	
	//check if Encoder 14 was rotated
	else if ( (status & PIO_ISR_P26) || (status & PIO_ISR_P27) ){
  40188c:	f013 6f40 	tst.w	r3, #201326592	; 0xc000000
  401890:	d007      	beq.n	4018a2 <PIOC_Handler+0x12a>
		encoder_direction(PIO_ODSR_P26, PIO_ODSR_P27, 13);
  401892:	220d      	movs	r2, #13
  401894:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401898:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
  40189c:	4b0e      	ldr	r3, [pc, #56]	; (4018d8 <PIOC_Handler+0x160>)
  40189e:	4798      	blx	r3
  4018a0:	bd08      	pop	{r3, pc}
	}

	//check if Encoder 15 was rotated
	else if ( (status & PIO_ISR_P28) || (status & PIO_ISR_P29) ){
  4018a2:	f013 5f40 	tst.w	r3, #805306368	; 0x30000000
  4018a6:	d007      	beq.n	4018b8 <PIOC_Handler+0x140>
		encoder_direction(PIO_ODSR_P28, PIO_ODSR_P29, 14);
  4018a8:	220e      	movs	r2, #14
  4018aa:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  4018ae:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
  4018b2:	4b09      	ldr	r3, [pc, #36]	; (4018d8 <PIOC_Handler+0x160>)
  4018b4:	4798      	blx	r3
  4018b6:	bd08      	pop	{r3, pc}
	}

	//check if Encoder 16 was rotated
	else if ( (status & PIO_ISR_P30) || (status & PIO_ISR_P31) ){
  4018b8:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
  4018bc:	d101      	bne.n	4018c2 <PIOC_Handler+0x14a>
  4018be:	2b00      	cmp	r3, #0
  4018c0:	da06      	bge.n	4018d0 <PIOC_Handler+0x158>
		encoder_direction(PIO_ODSR_P30, PIO_ODSR_P31, 15);
  4018c2:	220f      	movs	r2, #15
  4018c4:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  4018c8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  4018cc:	4b02      	ldr	r3, [pc, #8]	; (4018d8 <PIOC_Handler+0x160>)
  4018ce:	4798      	blx	r3
  4018d0:	bd08      	pop	{r3, pc}
  4018d2:	bf00      	nop
  4018d4:	400e124c 	.word	0x400e124c
  4018d8:	00400e89 	.word	0x00400e89

004018dc <getWidth_28>:

//______________________________________________________________________________________________________

uint8_t getWidth_28() {
	return 16;
}
  4018dc:	2010      	movs	r0, #16
  4018de:	4770      	bx	lr

004018e0 <getWidth_22>:

uint8_t getWidth_22() {
	return 12;
}
  4018e0:	200c      	movs	r0, #12
  4018e2:	4770      	bx	lr

004018e4 <getWidth_18>:

uint8_t getWidth_18() {
	return 11;
}
  4018e4:	200b      	movs	r0, #11
  4018e6:	4770      	bx	lr

004018e8 <getByte_28>:

uint8_t getByte_28(char input, uint16_t byte_offset) {
	// Finds which descriptor to use
	uint16_t index_value = input - oCRAExtended_28ptFontInfo.StartCharacter;
	// Finds the start of the character in the main array using the descriptor
	uint16_t lookup = oCRAExtended_28ptDescriptors[index_value].Offset;
  4018e8:	3823      	subs	r0, #35	; 0x23
  4018ea:	b280      	uxth	r0, r0
  4018ec:	4b03      	ldr	r3, [pc, #12]	; (4018fc <getByte_28+0x14>)
  4018ee:	eb03 0080 	add.w	r0, r3, r0, lsl #2
	// Accesses the intended byte in the character
	return oCRAExtended_28ptBitmaps[lookup + byte_offset];
  4018f2:	8842      	ldrh	r2, [r0, #2]
  4018f4:	4b02      	ldr	r3, [pc, #8]	; (401900 <getByte_28+0x18>)
  4018f6:	4419      	add	r1, r3
}
  4018f8:	5c88      	ldrb	r0, [r1, r2]
  4018fa:	4770      	bx	lr
  4018fc:	00404ba8 	.word	0x00404ba8
  401900:	00404578 	.word	0x00404578

00401904 <getByte_22>:

uint8_t getByte_22(char input, uint16_t byte_offset) {
  401904:	b082      	sub	sp, #8
	// Finds which descriptor to use
	volatile uint16_t index_value = input - oCRAExtended_22ptFontInfo.StartCharacter;
  401906:	3823      	subs	r0, #35	; 0x23
  401908:	b280      	uxth	r0, r0
  40190a:	f8ad 0006 	strh.w	r0, [sp, #6]
	// Finds the start of the character in the main array using the descriptor
	volatile uint16_t lookup = oCRAExtended_22ptDescriptors[index_value].Offset;
  40190e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  401912:	b29a      	uxth	r2, r3
  401914:	4b06      	ldr	r3, [pc, #24]	; (401930 <getByte_22+0x2c>)
  401916:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  40191a:	885b      	ldrh	r3, [r3, #2]
  40191c:	f8ad 3004 	strh.w	r3, [sp, #4]
	// Accesses the intended byte in the character
	return oCRAExtended_22ptBitmaps[lookup + byte_offset];
  401920:	f8bd 3004 	ldrh.w	r3, [sp, #4]
  401924:	4a03      	ldr	r2, [pc, #12]	; (401934 <getByte_22+0x30>)
  401926:	fa12 f383 	uxtah	r3, r2, r3
}
  40192a:	5c58      	ldrb	r0, [r3, r1]
  40192c:	b002      	add	sp, #8
  40192e:	4770      	bx	lr
  401930:	00404144 	.word	0x00404144
  401934:	00403c7c 	.word	0x00403c7c

00401938 <getByte_18>:

uint8_t getByte_18(char input, uint16_t byte_offset) {
  401938:	b082      	sub	sp, #8
	// Finds which descriptor to use
	volatile uint16_t index_value = input - oCRAExtended_18ptFontInfo.StartCharacter;
  40193a:	3823      	subs	r0, #35	; 0x23
  40193c:	b280      	uxth	r0, r0
  40193e:	f8ad 0006 	strh.w	r0, [sp, #6]
	// Finds the start of the character in the main array using the descriptor
	volatile uint16_t lookup = oCRAExtended_18ptDescriptors[index_value].Offset;
  401942:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  401946:	b29a      	uxth	r2, r3
  401948:	4b06      	ldr	r3, [pc, #24]	; (401964 <getByte_18+0x2c>)
  40194a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  40194e:	885b      	ldrh	r3, [r3, #2]
  401950:	f8ad 3004 	strh.w	r3, [sp, #4]
	// Accesses the intended byte in the character
	return oCRAExtended_18ptBitmaps[lookup + byte_offset];
  401954:	f8bd 3004 	ldrh.w	r3, [sp, #4]
  401958:	4a03      	ldr	r2, [pc, #12]	; (401968 <getByte_18+0x30>)
  40195a:	fa12 f383 	uxtah	r3, r2, r3
  40195e:	5c58      	ldrb	r0, [r3, r1]
  401960:	b002      	add	sp, #8
  401962:	4770      	bx	lr
  401964:	00404ca8 	.word	0x00404ca8
  401968:	0040428c 	.word	0x0040428c

0040196c <leds_update_status>:
	SPI_led_init();
	leds_update_cursor(curr_step);
}

/* updates LED statuses for current page being displayed */
void leds_update_status(){
  40196c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40196e:	4d06      	ldr	r5, [pc, #24]	; (401988 <leds_update_status+0x1c>)

	/* match LED status to current display page status */
	for (int i = 0; i < 16; i++){
  401970:	2400      	movs	r4, #0
		leds_status[i] = notes_display_get(display_page, i);
  401972:	4f06      	ldr	r7, [pc, #24]	; (40198c <leds_update_status+0x20>)
  401974:	4e06      	ldr	r6, [pc, #24]	; (401990 <leds_update_status+0x24>)
  401976:	b2e1      	uxtb	r1, r4
  401978:	7838      	ldrb	r0, [r7, #0]
  40197a:	47b0      	blx	r6
  40197c:	f845 0f04 	str.w	r0, [r5, #4]!

/* updates LED statuses for current page being displayed */
void leds_update_status(){

	/* match LED status to current display page status */
	for (int i = 0; i < 16; i++){
  401980:	3401      	adds	r4, #1
  401982:	2c10      	cmp	r4, #16
  401984:	d1f7      	bne.n	401976 <leds_update_status+0xa>
		leds_status[i] = notes_display_get(display_page, i);
	}

}
  401986:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401988:	20000650 	.word	0x20000650
  40198c:	2000871c 	.word	0x2000871c
  401990:	00402b35 	.word	0x00402b35

00401994 <leds_update_display>:
void leds_update_note(uint8_t led_pos){

	leds_update_display();
}

 void leds_update_display(){
  401994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  401996:	b672      	cpsid	i
  401998:	f3bf 8f5f 	dmb	sy

	cpu_irq_disable();
  40199c:	4f90      	ldr	r7, [pc, #576]	; (401be0 <leds_update_display+0x24c>)
  40199e:	2300      	movs	r3, #0
  4019a0:	703b      	strb	r3, [r7, #0]

	//Set Write Command, Function, and BC Bits
	SPI_byteSend(0x94);
  4019a2:	2094      	movs	r0, #148	; 0x94
  4019a4:	4c8f      	ldr	r4, [pc, #572]	; (401be4 <leds_update_display+0x250>)
  4019a6:	47a0      	blx	r4
	SPI_byteSend(0x5F);
  4019a8:	205f      	movs	r0, #95	; 0x5f
  4019aa:	47a0      	blx	r4
	SPI_byteSend(0xFF);
  4019ac:	20ff      	movs	r0, #255	; 0xff
  4019ae:	47a0      	blx	r4
	SPI_byteSend(0xFF);
  4019b0:	20ff      	movs	r0, #255	; 0xff
  4019b2:	47a0      	blx	r4
// 	for (int i = 11; i > -1; i--){
// 		SPI_byteSend( (uint8_t) (leds_data_1[i] >> 8) );
// 		SPI_byteSend( (uint8_t) (leds_data_1[i]) );
// 	}

	SPI_byteSend( (uint8_t) (leds_data_1[2] >> 8) );
  4019b4:	4d8c      	ldr	r5, [pc, #560]	; (401be8 <leds_update_display+0x254>)
  4019b6:	88a8      	ldrh	r0, [r5, #4]
  4019b8:	0a00      	lsrs	r0, r0, #8
  4019ba:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_1[2]) );
  4019bc:	7928      	ldrb	r0, [r5, #4]
  4019be:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_1[1] >> 8) );
  4019c0:	8868      	ldrh	r0, [r5, #2]
  4019c2:	0a00      	lsrs	r0, r0, #8
  4019c4:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_1[1]) );
  4019c6:	78a8      	ldrb	r0, [r5, #2]
  4019c8:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_1[0] >> 8) );
  4019ca:	8828      	ldrh	r0, [r5, #0]
  4019cc:	0a00      	lsrs	r0, r0, #8
  4019ce:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_1[0]) );
  4019d0:	7828      	ldrb	r0, [r5, #0]
  4019d2:	47a0      	blx	r4

	SPI_byteSend( (uint8_t) (leds_data_3[2] >> 8) );
  4019d4:	4e85      	ldr	r6, [pc, #532]	; (401bec <leds_update_display+0x258>)
  4019d6:	88b0      	ldrh	r0, [r6, #4]
  4019d8:	0a00      	lsrs	r0, r0, #8
  4019da:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_3[2]) );
  4019dc:	7930      	ldrb	r0, [r6, #4]
  4019de:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_3[1] >> 8) );
  4019e0:	8870      	ldrh	r0, [r6, #2]
  4019e2:	0a00      	lsrs	r0, r0, #8
  4019e4:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_3[1]) );
  4019e6:	78b0      	ldrb	r0, [r6, #2]
  4019e8:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_3[0] >> 8) );
  4019ea:	8830      	ldrh	r0, [r6, #0]
  4019ec:	0a00      	lsrs	r0, r0, #8
  4019ee:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_3[0]) );
  4019f0:	7830      	ldrb	r0, [r6, #0]
  4019f2:	47a0      	blx	r4

	SPI_byteSend( (uint8_t) (leds_data_3[5] >> 8) );
  4019f4:	8970      	ldrh	r0, [r6, #10]
  4019f6:	0a00      	lsrs	r0, r0, #8
  4019f8:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_3[5]) );
  4019fa:	7ab0      	ldrb	r0, [r6, #10]
  4019fc:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_3[4] >> 8) );
  4019fe:	8930      	ldrh	r0, [r6, #8]
  401a00:	0a00      	lsrs	r0, r0, #8
  401a02:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_3[4]) );
  401a04:	7a30      	ldrb	r0, [r6, #8]
  401a06:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_3[3] >> 8) );
  401a08:	88f0      	ldrh	r0, [r6, #6]
  401a0a:	0a00      	lsrs	r0, r0, #8
  401a0c:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_3[3]) );
  401a0e:	79b0      	ldrb	r0, [r6, #6]
  401a10:	47a0      	blx	r4

	SPI_byteSend( (uint8_t) (leds_data_1[5] >> 8) );
  401a12:	8968      	ldrh	r0, [r5, #10]
  401a14:	0a00      	lsrs	r0, r0, #8
  401a16:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_1[5]) );
  401a18:	7aa8      	ldrb	r0, [r5, #10]
  401a1a:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_1[4] >> 8) );
  401a1c:	8928      	ldrh	r0, [r5, #8]
  401a1e:	0a00      	lsrs	r0, r0, #8
  401a20:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_1[4]) );
  401a22:	7a28      	ldrb	r0, [r5, #8]
  401a24:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_1[3] >> 8) );
  401a26:	88e8      	ldrh	r0, [r5, #6]
  401a28:	0a00      	lsrs	r0, r0, #8
  401a2a:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_1[3]) );
  401a2c:	79a8      	ldrb	r0, [r5, #6]
  401a2e:	47a0      	blx	r4

	//Set Write Command, Function, and BC Bits
	SPI_byteSend(0x94);
  401a30:	2094      	movs	r0, #148	; 0x94
  401a32:	47a0      	blx	r4
	SPI_byteSend(0x5F);
  401a34:	205f      	movs	r0, #95	; 0x5f
  401a36:	47a0      	blx	r4
	SPI_byteSend(0xFF);
  401a38:	20ff      	movs	r0, #255	; 0xff
  401a3a:	47a0      	blx	r4
	SPI_byteSend(0xFF);
  401a3c:	20ff      	movs	r0, #255	; 0xff
  401a3e:	47a0      	blx	r4
// 	for (int i = 11; i > -1; i--){
// 		SPI_byteSend( (uint8_t) (leds_data_2[i] >> 8) );
// 		SPI_byteSend( (uint8_t) (leds_data_2[i]) );
// 	}

	SPI_byteSend( (uint8_t) (leds_data_1[8] >> 8) );
  401a40:	8a28      	ldrh	r0, [r5, #16]
  401a42:	0a00      	lsrs	r0, r0, #8
  401a44:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_1[8]) );
  401a46:	7c28      	ldrb	r0, [r5, #16]
  401a48:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_1[7] >> 8) );
  401a4a:	89e8      	ldrh	r0, [r5, #14]
  401a4c:	0a00      	lsrs	r0, r0, #8
  401a4e:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_1[7]) );
  401a50:	7ba8      	ldrb	r0, [r5, #14]
  401a52:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_1[6] >> 8) );
  401a54:	89a8      	ldrh	r0, [r5, #12]
  401a56:	0a00      	lsrs	r0, r0, #8
  401a58:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_1[6]) );
  401a5a:	7b28      	ldrb	r0, [r5, #12]
  401a5c:	47a0      	blx	r4

	SPI_byteSend( (uint8_t) (leds_data_3[8] >> 8) );
  401a5e:	8a30      	ldrh	r0, [r6, #16]
  401a60:	0a00      	lsrs	r0, r0, #8
  401a62:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_3[8]) );
  401a64:	7c30      	ldrb	r0, [r6, #16]
  401a66:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_3[7] >> 8) );
  401a68:	89f0      	ldrh	r0, [r6, #14]
  401a6a:	0a00      	lsrs	r0, r0, #8
  401a6c:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_3[7]) );
  401a6e:	7bb0      	ldrb	r0, [r6, #14]
  401a70:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_3[6] >> 8) );
  401a72:	89b0      	ldrh	r0, [r6, #12]
  401a74:	0a00      	lsrs	r0, r0, #8
  401a76:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_3[6]) );
  401a78:	7b30      	ldrb	r0, [r6, #12]
  401a7a:	47a0      	blx	r4

	SPI_byteSend( (uint8_t) (leds_data_3[11] >> 8) );
  401a7c:	8af0      	ldrh	r0, [r6, #22]
  401a7e:	0a00      	lsrs	r0, r0, #8
  401a80:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_3[11]) );
  401a82:	7db0      	ldrb	r0, [r6, #22]
  401a84:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_3[10] >> 8) );
  401a86:	8ab0      	ldrh	r0, [r6, #20]
  401a88:	0a00      	lsrs	r0, r0, #8
  401a8a:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_3[10]) );
  401a8c:	7d30      	ldrb	r0, [r6, #20]
  401a8e:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_3[9] >> 8) );
  401a90:	8a70      	ldrh	r0, [r6, #18]
  401a92:	0a00      	lsrs	r0, r0, #8
  401a94:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_3[9]) );
  401a96:	7cb0      	ldrb	r0, [r6, #18]
  401a98:	47a0      	blx	r4

	SPI_byteSend( (uint8_t) (leds_data_1[11] >> 8) );
  401a9a:	8ae8      	ldrh	r0, [r5, #22]
  401a9c:	0a00      	lsrs	r0, r0, #8
  401a9e:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_1[11]) );
  401aa0:	7da8      	ldrb	r0, [r5, #22]
  401aa2:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_1[10] >> 8) );
  401aa4:	8aa8      	ldrh	r0, [r5, #20]
  401aa6:	0a00      	lsrs	r0, r0, #8
  401aa8:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_1[10]) );
  401aaa:	7d28      	ldrb	r0, [r5, #20]
  401aac:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_1[9] >> 8) );
  401aae:	8a68      	ldrh	r0, [r5, #18]
  401ab0:	0a00      	lsrs	r0, r0, #8
  401ab2:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_1[9]) );
  401ab4:	7ca8      	ldrb	r0, [r5, #18]
  401ab6:	47a0      	blx	r4

	//Set Write Command, Function, and BC Bits
	SPI_byteSend(0x94);
  401ab8:	2094      	movs	r0, #148	; 0x94
  401aba:	47a0      	blx	r4
	SPI_byteSend(0x5F);
  401abc:	205f      	movs	r0, #95	; 0x5f
  401abe:	47a0      	blx	r4
	SPI_byteSend(0xFF);
  401ac0:	20ff      	movs	r0, #255	; 0xff
  401ac2:	47a0      	blx	r4
	SPI_byteSend(0xFF);
  401ac4:	20ff      	movs	r0, #255	; 0xff
  401ac6:	47a0      	blx	r4
// 	for (int i = 11; i > -1; i--){
// 		SPI_byteSend( (uint8_t) (leds_data_3[i] >> 8) );
// 		SPI_byteSend( (uint8_t) (leds_data_3[i]) );
// 	}

	SPI_byteSend( (uint8_t) (leds_data_2[2] >> 8) );
  401ac8:	4d49      	ldr	r5, [pc, #292]	; (401bf0 <leds_update_display+0x25c>)
  401aca:	88a8      	ldrh	r0, [r5, #4]
  401acc:	0a00      	lsrs	r0, r0, #8
  401ace:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_2[2]) );
  401ad0:	7928      	ldrb	r0, [r5, #4]
  401ad2:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_2[1] >> 8) );
  401ad4:	8868      	ldrh	r0, [r5, #2]
  401ad6:	0a00      	lsrs	r0, r0, #8
  401ad8:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_2[1]) );
  401ada:	78a8      	ldrb	r0, [r5, #2]
  401adc:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_2[0] >> 8) );
  401ade:	8828      	ldrh	r0, [r5, #0]
  401ae0:	0a00      	lsrs	r0, r0, #8
  401ae2:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_2[0]) );
  401ae4:	7828      	ldrb	r0, [r5, #0]
  401ae6:	47a0      	blx	r4

	SPI_byteSend( (uint8_t) (leds_data_4[2] >> 8) );
  401ae8:	4e42      	ldr	r6, [pc, #264]	; (401bf4 <leds_update_display+0x260>)
  401aea:	88b0      	ldrh	r0, [r6, #4]
  401aec:	0a00      	lsrs	r0, r0, #8
  401aee:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_4[2]) );
  401af0:	7930      	ldrb	r0, [r6, #4]
  401af2:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_4[1] >> 8) );
  401af4:	8870      	ldrh	r0, [r6, #2]
  401af6:	0a00      	lsrs	r0, r0, #8
  401af8:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_4[1]) );
  401afa:	78b0      	ldrb	r0, [r6, #2]
  401afc:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_4[0] >> 8) );
  401afe:	8830      	ldrh	r0, [r6, #0]
  401b00:	0a00      	lsrs	r0, r0, #8
  401b02:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_4[0]) );
  401b04:	7830      	ldrb	r0, [r6, #0]
  401b06:	47a0      	blx	r4

	SPI_byteSend( (uint8_t) (leds_data_4[5] >> 8) );
  401b08:	8970      	ldrh	r0, [r6, #10]
  401b0a:	0a00      	lsrs	r0, r0, #8
  401b0c:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_4[5]) );
  401b0e:	7ab0      	ldrb	r0, [r6, #10]
  401b10:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_4[4] >> 8) );
  401b12:	8930      	ldrh	r0, [r6, #8]
  401b14:	0a00      	lsrs	r0, r0, #8
  401b16:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_4[4]) );
  401b18:	7a30      	ldrb	r0, [r6, #8]
  401b1a:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_4[3] >> 8) );
  401b1c:	88f0      	ldrh	r0, [r6, #6]
  401b1e:	0a00      	lsrs	r0, r0, #8
  401b20:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_4[3]) );
  401b22:	79b0      	ldrb	r0, [r6, #6]
  401b24:	47a0      	blx	r4

	SPI_byteSend( (uint8_t) (leds_data_2[5] >> 8) );
  401b26:	8968      	ldrh	r0, [r5, #10]
  401b28:	0a00      	lsrs	r0, r0, #8
  401b2a:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_2[5]) );
  401b2c:	7aa8      	ldrb	r0, [r5, #10]
  401b2e:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_2[4] >> 8) );
  401b30:	8928      	ldrh	r0, [r5, #8]
  401b32:	0a00      	lsrs	r0, r0, #8
  401b34:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_2[4]) );
  401b36:	7a28      	ldrb	r0, [r5, #8]
  401b38:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_2[3] >> 8) );
  401b3a:	88e8      	ldrh	r0, [r5, #6]
  401b3c:	0a00      	lsrs	r0, r0, #8
  401b3e:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_2[3]) );
  401b40:	79a8      	ldrb	r0, [r5, #6]
  401b42:	47a0      	blx	r4

	//Set Write Command, Function, and BC Bits
	SPI_byteSend(0x94);
  401b44:	2094      	movs	r0, #148	; 0x94
  401b46:	47a0      	blx	r4
	SPI_byteSend(0x5F);
  401b48:	205f      	movs	r0, #95	; 0x5f
  401b4a:	47a0      	blx	r4
	SPI_byteSend(0xFF);
  401b4c:	20ff      	movs	r0, #255	; 0xff
  401b4e:	47a0      	blx	r4
	SPI_byteSend(0xFF);
  401b50:	20ff      	movs	r0, #255	; 0xff
  401b52:	47a0      	blx	r4
// 	for (int i = 11; i > -1; i--){
// 		SPI_byteSend( (uint8_t) (leds_data_4[i] >> 8) );
// 		SPI_byteSend( (uint8_t) (leds_data_4[i]) );
// 	}

	SPI_byteSend( (uint8_t) (leds_data_2[8] >> 8) );
  401b54:	8a28      	ldrh	r0, [r5, #16]
  401b56:	0a00      	lsrs	r0, r0, #8
  401b58:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_2[8]) );
  401b5a:	7c28      	ldrb	r0, [r5, #16]
  401b5c:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_2[7] >> 8) );
  401b5e:	89e8      	ldrh	r0, [r5, #14]
  401b60:	0a00      	lsrs	r0, r0, #8
  401b62:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_2[7]) );
  401b64:	7ba8      	ldrb	r0, [r5, #14]
  401b66:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_2[6] >> 8) );
  401b68:	89a8      	ldrh	r0, [r5, #12]
  401b6a:	0a00      	lsrs	r0, r0, #8
  401b6c:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_2[6]) );
  401b6e:	7b28      	ldrb	r0, [r5, #12]
  401b70:	47a0      	blx	r4

	SPI_byteSend( (uint8_t) (leds_data_4[8] >> 8) );
  401b72:	8a30      	ldrh	r0, [r6, #16]
  401b74:	0a00      	lsrs	r0, r0, #8
  401b76:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_4[8]) );
  401b78:	7c30      	ldrb	r0, [r6, #16]
  401b7a:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_4[7] >> 8) );
  401b7c:	89f0      	ldrh	r0, [r6, #14]
  401b7e:	0a00      	lsrs	r0, r0, #8
  401b80:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_4[7]) );
  401b82:	7bb0      	ldrb	r0, [r6, #14]
  401b84:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_4[6] >> 8) );
  401b86:	89b0      	ldrh	r0, [r6, #12]
  401b88:	0a00      	lsrs	r0, r0, #8
  401b8a:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_4[6]) );
  401b8c:	7b30      	ldrb	r0, [r6, #12]
  401b8e:	47a0      	blx	r4

	SPI_byteSend( (uint8_t) (leds_data_4[11] >> 8) );
  401b90:	8af0      	ldrh	r0, [r6, #22]
  401b92:	0a00      	lsrs	r0, r0, #8
  401b94:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_4[11]) );
  401b96:	7db0      	ldrb	r0, [r6, #22]
  401b98:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_4[10] >> 8) );
  401b9a:	8ab0      	ldrh	r0, [r6, #20]
  401b9c:	0a00      	lsrs	r0, r0, #8
  401b9e:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_4[10]) );
  401ba0:	7d30      	ldrb	r0, [r6, #20]
  401ba2:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_4[9] >> 8) );
  401ba4:	8a70      	ldrh	r0, [r6, #18]
  401ba6:	0a00      	lsrs	r0, r0, #8
  401ba8:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_4[9]) );
  401baa:	7cb0      	ldrb	r0, [r6, #18]
  401bac:	47a0      	blx	r4

	SPI_byteSend( (uint8_t) (leds_data_2[11] >> 8) );
  401bae:	8ae8      	ldrh	r0, [r5, #22]
  401bb0:	0a00      	lsrs	r0, r0, #8
  401bb2:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_2[11]) );
  401bb4:	7da8      	ldrb	r0, [r5, #22]
  401bb6:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_2[10] >> 8) );
  401bb8:	8aa8      	ldrh	r0, [r5, #20]
  401bba:	0a00      	lsrs	r0, r0, #8
  401bbc:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_2[10]) );
  401bbe:	7d28      	ldrb	r0, [r5, #20]
  401bc0:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_2[9] >> 8) );
  401bc2:	8a68      	ldrh	r0, [r5, #18]
  401bc4:	0a00      	lsrs	r0, r0, #8
  401bc6:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_2[9]) );
  401bc8:	7ca8      	ldrb	r0, [r5, #18]
  401bca:	47a0      	blx	r4


	delay_ms(2.74);
  401bcc:	f243 70ce 	movw	r0, #14286	; 0x37ce
  401bd0:	4b09      	ldr	r3, [pc, #36]	; (401bf8 <leds_update_display+0x264>)
  401bd2:	4798      	blx	r3
	cpu_irq_enable();
  401bd4:	2301      	movs	r3, #1
  401bd6:	703b      	strb	r3, [r7, #0]
  401bd8:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  401bdc:	b662      	cpsie	i
  401bde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401be0:	200001f4 	.word	0x200001f4
  401be4:	004029f9 	.word	0x004029f9
  401be8:	20000694 	.word	0x20000694
  401bec:	200006c4 	.word	0x200006c4
  401bf0:	200006ac 	.word	0x200006ac
  401bf4:	200006dc 	.word	0x200006dc
  401bf8:	20000001 	.word	0x20000001

00401bfc <leds_update_cursor>:

	/* update note status if button was pressed on current page */
		notes_status_set(display_page, leds_status);
}

void leds_update_cursor(uint8_t curr_step){
  401bfc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401c00:	4607      	mov	r7, r0

	/* update LEDs status for current page being displayed */
	leds_update_status();
  401c02:	4b7f      	ldr	r3, [pc, #508]	; (401e00 <leds_update_cursor+0x204>)
  401c04:	4798      	blx	r3
  401c06:	4c7f      	ldr	r4, [pc, #508]	; (401e04 <leds_update_cursor+0x208>)
  401c08:	1ca5      	adds	r5, r4, #2
  401c0a:	497f      	ldr	r1, [pc, #508]	; (401e08 <leds_update_cursor+0x20c>)
  401c0c:	2200      	movs	r2, #0

/* Initialize the Notes that are Enabled as Blue */
	for (int i = 0; i < 16; i++){
  401c0e:	4613      	mov	r3, r2
					leds_data_3[toffset+1] = 0x0000;
					leds_data_3[toffset+2] = 0x0000;
				}
			}
			else {
				toffset = (i % 12)*3;
  401c10:	f8df c224 	ldr.w	ip, [pc, #548]	; 401e38 <leds_update_cursor+0x23c>
					leds_data_4[toffset] = 0x0000;
					leds_data_4[toffset+1] = 0x0000;
					leds_data_4[toffset+2] = 0xFFFF;
				}
				else{
					leds_data_4[toffset] = 0x0000;
  401c14:	f8df e218 	ldr.w	lr, [pc, #536]	; 401e30 <leds_update_cursor+0x234>
  401c18:	4610      	mov	r0, r2
			else {
				toffset = (i % 12)*3;
				if(leds_status[i] == 1){
					leds_data_4[toffset] = 0x0000;
					leds_data_4[toffset+1] = 0x0000;
					leds_data_4[toffset+2] = 0xFFFF;
  401c1a:	f64f 78ff 	movw	r8, #65535	; 0xffff
					leds_data_3[toffset] = 0x0000;
					leds_data_3[toffset+1] = 0x0000;
					leds_data_3[toffset+2] = 0xFFFF;
				}
				else{
					leds_data_3[toffset] = 0x0000;
  401c1e:	f8df a208 	ldr.w	sl, [pc, #520]	; 401e28 <leds_update_cursor+0x22c>
					leds_data_2[toffset] = 0x0000;
					leds_data_2[toffset+1] = 0x0000;
					leds_data_2[toffset+2] = 0xFFFF;
				}
				else{
					leds_data_2[toffset] = 0x0000;
  401c22:	f8df b200 	ldr.w	fp, [pc, #512]	; 401e24 <leds_update_cursor+0x228>
	/* update LEDs status for current page being displayed */
	leds_update_status();

/* Initialize the Notes that are Enabled as Blue */
	for (int i = 0; i < 16; i++){
			if ( (i >= 0) && (i < 4) ){
  401c26:	2b03      	cmp	r3, #3
  401c28:	d80a      	bhi.n	401c40 <leds_update_cursor+0x44>
				toffset = (i)*3;
				if(leds_status[i] == 1){
  401c2a:	680e      	ldr	r6, [r1, #0]
  401c2c:	2e01      	cmp	r6, #1
					leds_data_1[toffset] = 0x0000;
  401c2e:	f825 0c02 	strh.w	r0, [r5, #-2]
					leds_data_1[toffset+1] = 0x0000;
  401c32:	8060      	strh	r0, [r4, #2]
					leds_data_1[toffset+2] = 0xFFFF;
  401c34:	bf0c      	ite	eq
  401c36:	f8a4 8004 	strheq.w	r8, [r4, #4]
				}
				else{
					leds_data_1[toffset] = 0x0000;
					leds_data_1[toffset+1] = 0x0000;
					leds_data_1[toffset+2] = 0x0000;
  401c3a:	80a0      	strhne	r0, [r4, #4]
	leds_update_status();

/* Initialize the Notes that are Enabled as Blue */
	for (int i = 0; i < 16; i++){
			if ( (i >= 0) && (i < 4) ){
				toffset = (i)*3;
  401c3c:	4691      	mov	r9, r2
  401c3e:	e060      	b.n	401d02 <leds_update_cursor+0x106>
					leds_data_1[toffset] = 0x0000;
					leds_data_1[toffset+1] = 0x0000;
					leds_data_1[toffset+2] = 0x0000;
				}
			}
			else if ( (i >= 4) && (i < 8) ){
  401c40:	f1a3 0904 	sub.w	r9, r3, #4
  401c44:	f1b9 0f03 	cmp.w	r9, #3
  401c48:	d81d      	bhi.n	401c86 <leds_update_cursor+0x8a>
				toffset = (i % 4)*3;
  401c4a:	4e70      	ldr	r6, [pc, #448]	; (401e0c <leds_update_cursor+0x210>)
  401c4c:	ea13 0906 	ands.w	r9, r3, r6
  401c50:	d505      	bpl.n	401c5e <leds_update_cursor+0x62>
  401c52:	f109 39ff 	add.w	r9, r9, #4294967295
  401c56:	f069 0903 	orn	r9, r9, #3
  401c5a:	f109 0901 	add.w	r9, r9, #1
  401c5e:	eb09 0949 	add.w	r9, r9, r9, lsl #1
  401c62:	fa5f f989 	uxtb.w	r9, r9
				if(leds_status[i] == 1){
  401c66:	680e      	ldr	r6, [r1, #0]
  401c68:	2e01      	cmp	r6, #1
					leds_data_2[toffset] = 0x0000;
  401c6a:	f82b 0019 	strh.w	r0, [fp, r9, lsl #1]
					leds_data_2[toffset+1] = 0x0000;
  401c6e:	f109 0601 	add.w	r6, r9, #1
  401c72:	f82b 0016 	strh.w	r0, [fp, r6, lsl #1]
					leds_data_2[toffset+2] = 0xFFFF;
  401c76:	f109 0602 	add.w	r6, r9, #2
  401c7a:	bf0c      	ite	eq
  401c7c:	f82b 8016 	strheq.w	r8, [fp, r6, lsl #1]
				}
				else{
					leds_data_2[toffset] = 0x0000;
					leds_data_2[toffset+1] = 0x0000;
					leds_data_2[toffset+2] = 0x0000;
  401c80:	f82b 0016 	strhne.w	r0, [fp, r6, lsl #1]
  401c84:	e03d      	b.n	401d02 <leds_update_cursor+0x106>
				}
			}
			else if ( (i >= 8) && (i < 12) ){
  401c86:	f1a3 0608 	sub.w	r6, r3, #8
  401c8a:	2e03      	cmp	r6, #3
  401c8c:	d81d      	bhi.n	401cca <leds_update_cursor+0xce>
				toffset = (i % 8)*3;
  401c8e:	4e60      	ldr	r6, [pc, #384]	; (401e10 <leds_update_cursor+0x214>)
  401c90:	ea13 0906 	ands.w	r9, r3, r6
  401c94:	d505      	bpl.n	401ca2 <leds_update_cursor+0xa6>
  401c96:	f109 39ff 	add.w	r9, r9, #4294967295
  401c9a:	f069 0907 	orn	r9, r9, #7
  401c9e:	f109 0901 	add.w	r9, r9, #1
  401ca2:	eb09 0949 	add.w	r9, r9, r9, lsl #1
  401ca6:	fa5f f989 	uxtb.w	r9, r9
				if(leds_status[i] == 1){
  401caa:	680e      	ldr	r6, [r1, #0]
  401cac:	2e01      	cmp	r6, #1
					leds_data_3[toffset] = 0x0000;
  401cae:	f82a 0019 	strh.w	r0, [sl, r9, lsl #1]
					leds_data_3[toffset+1] = 0x0000;
  401cb2:	f109 0601 	add.w	r6, r9, #1
  401cb6:	f82a 0016 	strh.w	r0, [sl, r6, lsl #1]
					leds_data_3[toffset+2] = 0xFFFF;
  401cba:	f109 0602 	add.w	r6, r9, #2
  401cbe:	bf0c      	ite	eq
  401cc0:	f82a 8016 	strheq.w	r8, [sl, r6, lsl #1]
				}
				else{
					leds_data_3[toffset] = 0x0000;
					leds_data_3[toffset+1] = 0x0000;
					leds_data_3[toffset+2] = 0x0000;
  401cc4:	f82a 0016 	strhne.w	r0, [sl, r6, lsl #1]
  401cc8:	e01b      	b.n	401d02 <leds_update_cursor+0x106>
				}
			}
			else {
				toffset = (i % 12)*3;
  401cca:	fb8c 6903 	smull	r6, r9, ip, r3
  401cce:	17de      	asrs	r6, r3, #31
  401cd0:	ebc6 0969 	rsb	r9, r6, r9, asr #1
  401cd4:	eb09 0949 	add.w	r9, r9, r9, lsl #1
  401cd8:	eba3 0989 	sub.w	r9, r3, r9, lsl #2
  401cdc:	eb09 0949 	add.w	r9, r9, r9, lsl #1
  401ce0:	fa5f f989 	uxtb.w	r9, r9
				if(leds_status[i] == 1){
  401ce4:	680e      	ldr	r6, [r1, #0]
  401ce6:	2e01      	cmp	r6, #1
					leds_data_4[toffset] = 0x0000;
  401ce8:	f82e 0019 	strh.w	r0, [lr, r9, lsl #1]
					leds_data_4[toffset+1] = 0x0000;
  401cec:	f109 0601 	add.w	r6, r9, #1
  401cf0:	f82e 0016 	strh.w	r0, [lr, r6, lsl #1]
					leds_data_4[toffset+2] = 0xFFFF;
  401cf4:	f109 0602 	add.w	r6, r9, #2
  401cf8:	bf0c      	ite	eq
  401cfa:	f82e 8016 	strheq.w	r8, [lr, r6, lsl #1]
				}
				else{
					leds_data_4[toffset] = 0x0000;
					leds_data_4[toffset+1] = 0x0000;
					leds_data_4[toffset+2] = 0x0000;
  401cfe:	f82e 0016 	strhne.w	r0, [lr, r6, lsl #1]

	/* update LEDs status for current page being displayed */
	leds_update_status();

/* Initialize the Notes that are Enabled as Blue */
	for (int i = 0; i < 16; i++){
  401d02:	3301      	adds	r3, #1
  401d04:	3203      	adds	r2, #3
  401d06:	b2d2      	uxtb	r2, r2
  401d08:	3406      	adds	r4, #6
  401d0a:	3506      	adds	r5, #6
  401d0c:	3104      	adds	r1, #4
  401d0e:	2b10      	cmp	r3, #16
  401d10:	d189      	bne.n	401c26 <leds_update_cursor+0x2a>
  401d12:	4b40      	ldr	r3, [pc, #256]	; (401e14 <leds_update_cursor+0x218>)
  401d14:	f883 9000 	strb.w	r9, [r3]
				}
			}
	}

	/*check if page being displayed is the current page being output to synth before updating cursor*/
	if (curr_page == display_page){
  401d18:	4b3f      	ldr	r3, [pc, #252]	; (401e18 <leds_update_cursor+0x21c>)
  401d1a:	781a      	ldrb	r2, [r3, #0]
  401d1c:	4b3f      	ldr	r3, [pc, #252]	; (401e1c <leds_update_cursor+0x220>)
  401d1e:	781b      	ldrb	r3, [r3, #0]
  401d20:	429a      	cmp	r2, r3
  401d22:	d168      	bne.n	401df6 <leds_update_cursor+0x1fa>
		/* Update Cursor to correct position */
			if ( (curr_step >= 0) && (curr_step < 4) ){
  401d24:	2f03      	cmp	r7, #3
  401d26:	d813      	bhi.n	401d50 <leds_update_cursor+0x154>
				offset = (curr_step)*3;
  401d28:	eb07 0747 	add.w	r7, r7, r7, lsl #1
  401d2c:	b2fb      	uxtb	r3, r7
  401d2e:	4a3c      	ldr	r2, [pc, #240]	; (401e20 <leds_update_cursor+0x224>)
  401d30:	7013      	strb	r3, [r2, #0]
				leds_data_1[offset] = 0xFFFF;
  401d32:	4a34      	ldr	r2, [pc, #208]	; (401e04 <leds_update_cursor+0x208>)
  401d34:	f64f 71ff 	movw	r1, #65535	; 0xffff
  401d38:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				leds_data_1[offset+1] = 0x0FFF;
  401d3c:	1c59      	adds	r1, r3, #1
  401d3e:	f640 70ff 	movw	r0, #4095	; 0xfff
  401d42:	f822 0011 	strh.w	r0, [r2, r1, lsl #1]
				leds_data_1[offset+2] = 0x0000;
  401d46:	3302      	adds	r3, #2
  401d48:	2100      	movs	r1, #0
  401d4a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  401d4e:	e052      	b.n	401df6 <leds_update_cursor+0x1fa>
			}
			else if ( (curr_step >= 4) && (curr_step < 8) ){
  401d50:	1f3b      	subs	r3, r7, #4
  401d52:	b2db      	uxtb	r3, r3
  401d54:	2b03      	cmp	r3, #3
  401d56:	d814      	bhi.n	401d82 <leds_update_cursor+0x186>
				offset = (curr_step % 4)*3;
  401d58:	f007 0703 	and.w	r7, r7, #3
  401d5c:	eb07 0747 	add.w	r7, r7, r7, lsl #1
  401d60:	4b2f      	ldr	r3, [pc, #188]	; (401e20 <leds_update_cursor+0x224>)
  401d62:	701f      	strb	r7, [r3, #0]
				leds_data_2[offset] = 0xFFFF;
  401d64:	4b2f      	ldr	r3, [pc, #188]	; (401e24 <leds_update_cursor+0x228>)
  401d66:	f64f 72ff 	movw	r2, #65535	; 0xffff
  401d6a:	f823 2017 	strh.w	r2, [r3, r7, lsl #1]
				leds_data_2[offset+1] = 0x0FFF;
  401d6e:	1c7a      	adds	r2, r7, #1
  401d70:	f640 71ff 	movw	r1, #4095	; 0xfff
  401d74:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				leds_data_2[offset+2] = 0x0000;
  401d78:	3702      	adds	r7, #2
  401d7a:	2200      	movs	r2, #0
  401d7c:	f823 2017 	strh.w	r2, [r3, r7, lsl #1]
  401d80:	e039      	b.n	401df6 <leds_update_cursor+0x1fa>
			}
			else if ( (curr_step >= 8) && (curr_step < 12) ){
  401d82:	f1a7 0308 	sub.w	r3, r7, #8
  401d86:	b2db      	uxtb	r3, r3
  401d88:	2b03      	cmp	r3, #3
  401d8a:	d814      	bhi.n	401db6 <leds_update_cursor+0x1ba>
				offset = (curr_step % 8)*3;
  401d8c:	f007 0707 	and.w	r7, r7, #7
  401d90:	eb07 0747 	add.w	r7, r7, r7, lsl #1
  401d94:	4b22      	ldr	r3, [pc, #136]	; (401e20 <leds_update_cursor+0x224>)
  401d96:	701f      	strb	r7, [r3, #0]
				leds_data_3[offset] = 0xFFFF;
  401d98:	4b23      	ldr	r3, [pc, #140]	; (401e28 <leds_update_cursor+0x22c>)
  401d9a:	f64f 72ff 	movw	r2, #65535	; 0xffff
  401d9e:	f823 2017 	strh.w	r2, [r3, r7, lsl #1]
				leds_data_3[offset+1] = 0x0FFF;
  401da2:	1c7a      	adds	r2, r7, #1
  401da4:	f640 71ff 	movw	r1, #4095	; 0xfff
  401da8:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				leds_data_3[offset+2] = 0x0000;
  401dac:	3702      	adds	r7, #2
  401dae:	2200      	movs	r2, #0
  401db0:	f823 2017 	strh.w	r2, [r3, r7, lsl #1]
  401db4:	e01f      	b.n	401df6 <leds_update_cursor+0x1fa>
			}
			else if ( (curr_step >= 12) && (curr_step < 16) ){
  401db6:	f1a7 030c 	sub.w	r3, r7, #12
  401dba:	b2db      	uxtb	r3, r3
  401dbc:	2b03      	cmp	r3, #3
  401dbe:	d81a      	bhi.n	401df6 <leds_update_cursor+0x1fa>
				offset = (curr_step % 12)*3;
  401dc0:	4b1a      	ldr	r3, [pc, #104]	; (401e2c <leds_update_cursor+0x230>)
  401dc2:	fba3 2307 	umull	r2, r3, r3, r7
  401dc6:	08db      	lsrs	r3, r3, #3
  401dc8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  401dcc:	eba7 0783 	sub.w	r7, r7, r3, lsl #2
  401dd0:	eb07 0747 	add.w	r7, r7, r7, lsl #1
  401dd4:	b2fb      	uxtb	r3, r7
  401dd6:	4a12      	ldr	r2, [pc, #72]	; (401e20 <leds_update_cursor+0x224>)
  401dd8:	7013      	strb	r3, [r2, #0]
				leds_data_4[offset] = 0xFFFF;
  401dda:	4a15      	ldr	r2, [pc, #84]	; (401e30 <leds_update_cursor+0x234>)
  401ddc:	f64f 71ff 	movw	r1, #65535	; 0xffff
  401de0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				leds_data_4[offset+1] = 0x0FFF;
  401de4:	1c59      	adds	r1, r3, #1
  401de6:	f640 70ff 	movw	r0, #4095	; 0xfff
  401dea:	f822 0011 	strh.w	r0, [r2, r1, lsl #1]
				leds_data_4[offset+2] = 0x0000;
  401dee:	3302      	adds	r3, #2
  401df0:	2100      	movs	r1, #0
  401df2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			}
	}

	leds_update_display();
  401df6:	4b0f      	ldr	r3, [pc, #60]	; (401e34 <leds_update_cursor+0x238>)
  401df8:	4798      	blx	r3
  401dfa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401dfe:	bf00      	nop
  401e00:	0040196d 	.word	0x0040196d
  401e04:	20000694 	.word	0x20000694
  401e08:	20000654 	.word	0x20000654
  401e0c:	80000003 	.word	0x80000003
  401e10:	80000007 	.word	0x80000007
  401e14:	20008732 	.word	0x20008732
  401e18:	20008726 	.word	0x20008726
  401e1c:	2000871c 	.word	0x2000871c
  401e20:	20008733 	.word	0x20008733
  401e24:	200006ac 	.word	0x200006ac
  401e28:	200006c4 	.word	0x200006c4
  401e2c:	aaaaaaab 	.word	0xaaaaaaab
  401e30:	200006dc 	.word	0x200006dc
  401e34:	00401995 	.word	0x00401995
  401e38:	2aaaaaab 	.word	0x2aaaaaab

00401e3c <led_toggle>:

int leds_status_get(uint8_t curr_step){
	return leds_status[curr_step];
}

void led_toggle(uint8_t top_row, uint8_t bottom_row){
  401e3c:	b508      	push	{r3, lr}

	switch(bottom_row) {
  401e3e:	29ef      	cmp	r1, #239	; 0xef
  401e40:	d031      	beq.n	401ea6 <led_toggle+0x6a>
  401e42:	d806      	bhi.n	401e52 <led_toggle+0x16>
  401e44:	29bf      	cmp	r1, #191	; 0xbf
  401e46:	d03e      	beq.n	401ec6 <led_toggle+0x8a>
  401e48:	29df      	cmp	r1, #223	; 0xdf
  401e4a:	d034      	beq.n	401eb6 <led_toggle+0x7a>
  401e4c:	297f      	cmp	r1, #127	; 0x7f
  401e4e:	d149      	bne.n	401ee4 <led_toggle+0xa8>
  401e50:	e041      	b.n	401ed6 <led_toggle+0x9a>
  401e52:	29fb      	cmp	r1, #251	; 0xfb
  401e54:	d017      	beq.n	401e86 <led_toggle+0x4a>
  401e56:	d802      	bhi.n	401e5e <led_toggle+0x22>
  401e58:	29f7      	cmp	r1, #247	; 0xf7
  401e5a:	d01c      	beq.n	401e96 <led_toggle+0x5a>
  401e5c:	e042      	b.n	401ee4 <led_toggle+0xa8>
  401e5e:	29fd      	cmp	r1, #253	; 0xfd
  401e60:	d009      	beq.n	401e76 <led_toggle+0x3a>
  401e62:	29fe      	cmp	r1, #254	; 0xfe
  401e64:	d13e      	bne.n	401ee4 <led_toggle+0xa8>
		case 254 :
			leds_status[15] = abs(leds_status[15] - 1);
  401e66:	4a4f      	ldr	r2, [pc, #316]	; (401fa4 <led_toggle+0x168>)
  401e68:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
  401e6a:	3b01      	subs	r3, #1
  401e6c:	2b00      	cmp	r3, #0
  401e6e:	bfb8      	it	lt
  401e70:	425b      	neglt	r3, r3
  401e72:	63d3      	str	r3, [r2, #60]	; 0x3c
			break;
  401e74:	e036      	b.n	401ee4 <led_toggle+0xa8>
		case 253 :
			leds_status[14] = abs(leds_status[14] - 1);
  401e76:	4a4b      	ldr	r2, [pc, #300]	; (401fa4 <led_toggle+0x168>)
  401e78:	6b93      	ldr	r3, [r2, #56]	; 0x38
  401e7a:	3b01      	subs	r3, #1
  401e7c:	2b00      	cmp	r3, #0
  401e7e:	bfb8      	it	lt
  401e80:	425b      	neglt	r3, r3
  401e82:	6393      	str	r3, [r2, #56]	; 0x38
			break;
  401e84:	e02e      	b.n	401ee4 <led_toggle+0xa8>
		case 251 :
			leds_status[13] = abs(leds_status[13] - 1);
  401e86:	4a47      	ldr	r2, [pc, #284]	; (401fa4 <led_toggle+0x168>)
  401e88:	6b53      	ldr	r3, [r2, #52]	; 0x34
  401e8a:	3b01      	subs	r3, #1
  401e8c:	2b00      	cmp	r3, #0
  401e8e:	bfb8      	it	lt
  401e90:	425b      	neglt	r3, r3
  401e92:	6353      	str	r3, [r2, #52]	; 0x34
			break;
  401e94:	e026      	b.n	401ee4 <led_toggle+0xa8>
		case 247 :
			leds_status[12] = abs(leds_status[12] - 1);
  401e96:	4a43      	ldr	r2, [pc, #268]	; (401fa4 <led_toggle+0x168>)
  401e98:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401e9a:	3b01      	subs	r3, #1
  401e9c:	2b00      	cmp	r3, #0
  401e9e:	bfb8      	it	lt
  401ea0:	425b      	neglt	r3, r3
  401ea2:	6313      	str	r3, [r2, #48]	; 0x30
			break;
  401ea4:	e01e      	b.n	401ee4 <led_toggle+0xa8>
		case 239 :
			leds_status[11] = abs(leds_status[11] - 1);
  401ea6:	4a3f      	ldr	r2, [pc, #252]	; (401fa4 <led_toggle+0x168>)
  401ea8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
  401eaa:	3b01      	subs	r3, #1
  401eac:	2b00      	cmp	r3, #0
  401eae:	bfb8      	it	lt
  401eb0:	425b      	neglt	r3, r3
  401eb2:	62d3      	str	r3, [r2, #44]	; 0x2c
			break;
  401eb4:	e016      	b.n	401ee4 <led_toggle+0xa8>
		case 223 :
			leds_status[10] = abs(leds_status[10] - 1);
  401eb6:	4a3b      	ldr	r2, [pc, #236]	; (401fa4 <led_toggle+0x168>)
  401eb8:	6a93      	ldr	r3, [r2, #40]	; 0x28
  401eba:	3b01      	subs	r3, #1
  401ebc:	2b00      	cmp	r3, #0
  401ebe:	bfb8      	it	lt
  401ec0:	425b      	neglt	r3, r3
  401ec2:	6293      	str	r3, [r2, #40]	; 0x28
			break;
  401ec4:	e00e      	b.n	401ee4 <led_toggle+0xa8>
		case 191 :
			leds_status[9] = abs(leds_status[9] - 1);
  401ec6:	4a37      	ldr	r2, [pc, #220]	; (401fa4 <led_toggle+0x168>)
  401ec8:	6a53      	ldr	r3, [r2, #36]	; 0x24
  401eca:	3b01      	subs	r3, #1
  401ecc:	2b00      	cmp	r3, #0
  401ece:	bfb8      	it	lt
  401ed0:	425b      	neglt	r3, r3
  401ed2:	6253      	str	r3, [r2, #36]	; 0x24
			break;
  401ed4:	e006      	b.n	401ee4 <led_toggle+0xa8>
		case 127 :
			leds_status[8] = abs(leds_status[8] - 1);
  401ed6:	4a33      	ldr	r2, [pc, #204]	; (401fa4 <led_toggle+0x168>)
  401ed8:	6a13      	ldr	r3, [r2, #32]
  401eda:	3b01      	subs	r3, #1
  401edc:	2b00      	cmp	r3, #0
  401ede:	bfb8      	it	lt
  401ee0:	425b      	neglt	r3, r3
  401ee2:	6213      	str	r3, [r2, #32]
			break;
		default :
			break;
	}

	switch(top_row) {
  401ee4:	286f      	cmp	r0, #111	; 0x6f
  401ee6:	d031      	beq.n	401f4c <led_toggle+0x110>
  401ee8:	d806      	bhi.n	401ef8 <led_toggle+0xbc>
  401eea:	283f      	cmp	r0, #63	; 0x3f
  401eec:	d03e      	beq.n	401f6c <led_toggle+0x130>
  401eee:	285f      	cmp	r0, #95	; 0x5f
  401ef0:	d034      	beq.n	401f5c <led_toggle+0x120>
  401ef2:	2802      	cmp	r0, #2
  401ef4:	d149      	bne.n	401f8a <led_toggle+0x14e>
  401ef6:	e041      	b.n	401f7c <led_toggle+0x140>
  401ef8:	287b      	cmp	r0, #123	; 0x7b
  401efa:	d017      	beq.n	401f2c <led_toggle+0xf0>
  401efc:	d802      	bhi.n	401f04 <led_toggle+0xc8>
  401efe:	2877      	cmp	r0, #119	; 0x77
  401f00:	d01c      	beq.n	401f3c <led_toggle+0x100>
  401f02:	e042      	b.n	401f8a <led_toggle+0x14e>
  401f04:	287d      	cmp	r0, #125	; 0x7d
  401f06:	d009      	beq.n	401f1c <led_toggle+0xe0>
  401f08:	287e      	cmp	r0, #126	; 0x7e
  401f0a:	d13e      	bne.n	401f8a <led_toggle+0x14e>
		case 126 :
			leds_status[7] = abs(leds_status[7] - 1);
  401f0c:	4a25      	ldr	r2, [pc, #148]	; (401fa4 <led_toggle+0x168>)
  401f0e:	69d3      	ldr	r3, [r2, #28]
  401f10:	3b01      	subs	r3, #1
  401f12:	2b00      	cmp	r3, #0
  401f14:	bfb8      	it	lt
  401f16:	425b      	neglt	r3, r3
  401f18:	61d3      	str	r3, [r2, #28]
			break;
  401f1a:	e036      	b.n	401f8a <led_toggle+0x14e>
		case 125 :
			leds_status[6] = abs(leds_status[6] - 1);
  401f1c:	4a21      	ldr	r2, [pc, #132]	; (401fa4 <led_toggle+0x168>)
  401f1e:	6993      	ldr	r3, [r2, #24]
  401f20:	3b01      	subs	r3, #1
  401f22:	2b00      	cmp	r3, #0
  401f24:	bfb8      	it	lt
  401f26:	425b      	neglt	r3, r3
  401f28:	6193      	str	r3, [r2, #24]
			break;
  401f2a:	e02e      	b.n	401f8a <led_toggle+0x14e>
		case 123 :
			leds_status[5] = abs(leds_status[5] - 1);
  401f2c:	4a1d      	ldr	r2, [pc, #116]	; (401fa4 <led_toggle+0x168>)
  401f2e:	6953      	ldr	r3, [r2, #20]
  401f30:	3b01      	subs	r3, #1
  401f32:	2b00      	cmp	r3, #0
  401f34:	bfb8      	it	lt
  401f36:	425b      	neglt	r3, r3
  401f38:	6153      	str	r3, [r2, #20]
			break;
  401f3a:	e026      	b.n	401f8a <led_toggle+0x14e>
		case 119 :
			leds_status[4] = abs(leds_status[4] - 1);
  401f3c:	4a19      	ldr	r2, [pc, #100]	; (401fa4 <led_toggle+0x168>)
  401f3e:	6913      	ldr	r3, [r2, #16]
  401f40:	3b01      	subs	r3, #1
  401f42:	2b00      	cmp	r3, #0
  401f44:	bfb8      	it	lt
  401f46:	425b      	neglt	r3, r3
  401f48:	6113      	str	r3, [r2, #16]
			break;
  401f4a:	e01e      	b.n	401f8a <led_toggle+0x14e>
		case 111 :
			leds_status[3] = abs(leds_status[3] - 1);
  401f4c:	4a15      	ldr	r2, [pc, #84]	; (401fa4 <led_toggle+0x168>)
  401f4e:	68d3      	ldr	r3, [r2, #12]
  401f50:	3b01      	subs	r3, #1
  401f52:	2b00      	cmp	r3, #0
  401f54:	bfb8      	it	lt
  401f56:	425b      	neglt	r3, r3
  401f58:	60d3      	str	r3, [r2, #12]
			break;
  401f5a:	e016      	b.n	401f8a <led_toggle+0x14e>
		case 95 :
			leds_status[2] = abs(leds_status[2] - 1);
  401f5c:	4a11      	ldr	r2, [pc, #68]	; (401fa4 <led_toggle+0x168>)
  401f5e:	6893      	ldr	r3, [r2, #8]
  401f60:	3b01      	subs	r3, #1
  401f62:	2b00      	cmp	r3, #0
  401f64:	bfb8      	it	lt
  401f66:	425b      	neglt	r3, r3
  401f68:	6093      	str	r3, [r2, #8]
			break;
  401f6a:	e00e      	b.n	401f8a <led_toggle+0x14e>
		case 63 :
			leds_status[1] = abs(leds_status[1] - 1);
  401f6c:	4a0d      	ldr	r2, [pc, #52]	; (401fa4 <led_toggle+0x168>)
  401f6e:	6853      	ldr	r3, [r2, #4]
  401f70:	3b01      	subs	r3, #1
  401f72:	2b00      	cmp	r3, #0
  401f74:	bfb8      	it	lt
  401f76:	425b      	neglt	r3, r3
  401f78:	6053      	str	r3, [r2, #4]
			break;
  401f7a:	e006      	b.n	401f8a <led_toggle+0x14e>
		case 2 :
			leds_status[0] = abs(leds_status[0] - 1);
  401f7c:	4a09      	ldr	r2, [pc, #36]	; (401fa4 <led_toggle+0x168>)
  401f7e:	6813      	ldr	r3, [r2, #0]
  401f80:	3b01      	subs	r3, #1
  401f82:	2b00      	cmp	r3, #0
  401f84:	bfb8      	it	lt
  401f86:	425b      	neglt	r3, r3
  401f88:	6013      	str	r3, [r2, #0]
		default : 
			break;
	}

	/* match note status to display status if changed*/
	notes_status_set(display_page, leds_status);
  401f8a:	4906      	ldr	r1, [pc, #24]	; (401fa4 <led_toggle+0x168>)
  401f8c:	4b06      	ldr	r3, [pc, #24]	; (401fa8 <led_toggle+0x16c>)
  401f8e:	7818      	ldrb	r0, [r3, #0]
  401f90:	4b06      	ldr	r3, [pc, #24]	; (401fac <led_toggle+0x170>)
  401f92:	4798      	blx	r3
	
	SPI_led_init();
  401f94:	4b06      	ldr	r3, [pc, #24]	; (401fb0 <led_toggle+0x174>)
  401f96:	4798      	blx	r3
	leds_update_cursor(curr_step);
  401f98:	4b06      	ldr	r3, [pc, #24]	; (401fb4 <led_toggle+0x178>)
  401f9a:	7818      	ldrb	r0, [r3, #0]
  401f9c:	4b06      	ldr	r3, [pc, #24]	; (401fb8 <led_toggle+0x17c>)
  401f9e:	4798      	blx	r3
  401fa0:	bd08      	pop	{r3, pc}
  401fa2:	bf00      	nop
  401fa4:	20000654 	.word	0x20000654
  401fa8:	2000871c 	.word	0x2000871c
  401fac:	00402b55 	.word	0x00402b55
  401fb0:	0040287d 	.word	0x0040287d
  401fb4:	20008718 	.word	0x20008718
  401fb8:	00401bfd 	.word	0x00401bfd

00401fbc <res_to_int>:


}

uint8_t res_to_int(uint8_t res){
	if (res == 0){
  401fbc:	b190      	cbz	r0, 401fe4 <res_to_int+0x28>
		return 1;
	}
	else if (res == 1){
  401fbe:	2801      	cmp	r0, #1
  401fc0:	d012      	beq.n	401fe8 <res_to_int+0x2c>
		return 2;
	}
	else if (res == 2){
  401fc2:	2802      	cmp	r0, #2
  401fc4:	d012      	beq.n	401fec <res_to_int+0x30>
		return 3;
	}
	else if (res == 3){
  401fc6:	2803      	cmp	r0, #3
  401fc8:	d012      	beq.n	401ff0 <res_to_int+0x34>
		return 4;
	}
	else if (res == 4){
  401fca:	2804      	cmp	r0, #4
  401fcc:	d012      	beq.n	401ff4 <res_to_int+0x38>
		return 8;
	}
	else if (res == 5){
  401fce:	2805      	cmp	r0, #5
  401fd0:	d012      	beq.n	401ff8 <res_to_int+0x3c>
		return 12;
	}
	else if (res == 6){
  401fd2:	2806      	cmp	r0, #6
  401fd4:	d012      	beq.n	401ffc <res_to_int+0x40>
		return 16;
	}
	else if (res == 7){
  401fd6:	2807      	cmp	r0, #7
  401fd8:	d012      	beq.n	402000 <res_to_int+0x44>
	else if (res == 8){
		return 32;
	}

	//default
	return 1;
  401fda:	2808      	cmp	r0, #8
  401fdc:	bf0c      	ite	eq
  401fde:	2020      	moveq	r0, #32
  401fe0:	2001      	movne	r0, #1
  401fe2:	4770      	bx	lr

}

uint8_t res_to_int(uint8_t res){
	if (res == 0){
		return 1;
  401fe4:	2001      	movs	r0, #1
  401fe6:	4770      	bx	lr
	}
	else if (res == 1){
		return 2;
  401fe8:	2002      	movs	r0, #2
  401fea:	4770      	bx	lr
	}
	else if (res == 2){
		return 3;
  401fec:	2003      	movs	r0, #3
  401fee:	4770      	bx	lr
	}
	else if (res == 3){
		return 4;
  401ff0:	2004      	movs	r0, #4
  401ff2:	4770      	bx	lr
	}
	else if (res == 4){
		return 8;
  401ff4:	2008      	movs	r0, #8
  401ff6:	4770      	bx	lr
	}
	else if (res == 5){
		return 12;
  401ff8:	200c      	movs	r0, #12
  401ffa:	4770      	bx	lr
	}
	else if (res == 6){
		return 16;
  401ffc:	2010      	movs	r0, #16
  401ffe:	4770      	bx	lr
	}
	else if (res == 7){
		return 24;
  402000:	2018      	movs	r0, #24
		return 32;
	}

	//default
	return 1;
}
  402002:	4770      	bx	lr

00402004 <res_inc>:

void res_inc(){
	if (resolution < 8){
  402004:	4b03      	ldr	r3, [pc, #12]	; (402014 <res_inc+0x10>)
  402006:	681b      	ldr	r3, [r3, #0]
  402008:	2b07      	cmp	r3, #7
  40200a:	dc02      	bgt.n	402012 <res_inc+0xe>
		resolution++;
  40200c:	3301      	adds	r3, #1
  40200e:	4a01      	ldr	r2, [pc, #4]	; (402014 <res_inc+0x10>)
  402010:	6013      	str	r3, [r2, #0]
  402012:	4770      	bx	lr
  402014:	20008704 	.word	0x20008704

00402018 <res_dec>:
	}
}

void res_dec(){
	if (resolution > 0){
  402018:	4b03      	ldr	r3, [pc, #12]	; (402028 <res_dec+0x10>)
  40201a:	681b      	ldr	r3, [r3, #0]
  40201c:	2b00      	cmp	r3, #0
  40201e:	dd02      	ble.n	402026 <res_dec+0xe>
		resolution--;
  402020:	3b01      	subs	r3, #1
  402022:	4a01      	ldr	r2, [pc, #4]	; (402028 <res_dec+0x10>)
  402024:	6013      	str	r3, [r2, #0]
  402026:	4770      	bx	lr
  402028:	20008704 	.word	0x20008704

0040202c <bpm_inc>:
	}
}

 void bpm_inc(){
	if (bpm < 999){
  40202c:	4b04      	ldr	r3, [pc, #16]	; (402040 <bpm_inc+0x14>)
  40202e:	881b      	ldrh	r3, [r3, #0]
  402030:	f240 32e6 	movw	r2, #998	; 0x3e6
  402034:	4293      	cmp	r3, r2
  402036:	d802      	bhi.n	40203e <bpm_inc+0x12>
		bpm++;
  402038:	3301      	adds	r3, #1
  40203a:	4a01      	ldr	r2, [pc, #4]	; (402040 <bpm_inc+0x14>)
  40203c:	8013      	strh	r3, [r2, #0]
  40203e:	4770      	bx	lr
  402040:	20008728 	.word	0x20008728

00402044 <bpm_dec>:
	}
}

 void bpm_dec(){
	if (bpm > 20){
  402044:	4b03      	ldr	r3, [pc, #12]	; (402054 <bpm_dec+0x10>)
  402046:	881b      	ldrh	r3, [r3, #0]
  402048:	2b14      	cmp	r3, #20
  40204a:	d902      	bls.n	402052 <bpm_dec+0xe>
		bpm--;
  40204c:	3b01      	subs	r3, #1
  40204e:	4a01      	ldr	r2, [pc, #4]	; (402054 <bpm_dec+0x10>)
  402050:	8013      	strh	r3, [r2, #0]
  402052:	4770      	bx	lr
  402054:	20008728 	.word	0x20008728

00402058 <display_page_inc>:
	}
}

 void display_page_inc(){
	if (display_page < 15){
  402058:	4b03      	ldr	r3, [pc, #12]	; (402068 <display_page_inc+0x10>)
  40205a:	781b      	ldrb	r3, [r3, #0]
  40205c:	2b0e      	cmp	r3, #14
  40205e:	d802      	bhi.n	402066 <display_page_inc+0xe>
		display_page++;
  402060:	3301      	adds	r3, #1
  402062:	4a01      	ldr	r2, [pc, #4]	; (402068 <display_page_inc+0x10>)
  402064:	7013      	strb	r3, [r2, #0]
  402066:	4770      	bx	lr
  402068:	2000871c 	.word	0x2000871c

0040206c <display_page_dec>:
	}
}

 void display_page_dec(){
	if (display_page > 0){
  40206c:	4b03      	ldr	r3, [pc, #12]	; (40207c <display_page_dec+0x10>)
  40206e:	781b      	ldrb	r3, [r3, #0]
  402070:	b113      	cbz	r3, 402078 <display_page_dec+0xc>
		display_page--;
  402072:	3b01      	subs	r3, #1
  402074:	4a01      	ldr	r2, [pc, #4]	; (40207c <display_page_dec+0x10>)
  402076:	7013      	strb	r3, [r2, #0]
  402078:	4770      	bx	lr
  40207a:	bf00      	nop
  40207c:	2000871c 	.word	0x2000871c

00402080 <pattern_inc>:
	}
}

 void pattern_inc(){
	  if (curr_pattern < 15){
  402080:	4b03      	ldr	r3, [pc, #12]	; (402090 <pattern_inc+0x10>)
  402082:	781b      	ldrb	r3, [r3, #0]
  402084:	2b0e      	cmp	r3, #14
  402086:	d802      	bhi.n	40208e <pattern_inc+0xe>
		  curr_pattern++;
  402088:	3301      	adds	r3, #1
  40208a:	4a01      	ldr	r2, [pc, #4]	; (402090 <pattern_inc+0x10>)
  40208c:	7013      	strb	r3, [r2, #0]
  40208e:	4770      	bx	lr
  402090:	20008700 	.word	0x20008700

00402094 <pattern_dec>:
	  }
 }

 void pattern_dec(){
	  if (curr_pattern > 0){
  402094:	4b03      	ldr	r3, [pc, #12]	; (4020a4 <pattern_dec+0x10>)
  402096:	781b      	ldrb	r3, [r3, #0]
  402098:	b113      	cbz	r3, 4020a0 <pattern_dec+0xc>
		  curr_pattern--;
  40209a:	3b01      	subs	r3, #1
  40209c:	4a01      	ldr	r2, [pc, #4]	; (4020a4 <pattern_dec+0x10>)
  40209e:	7013      	strb	r3, [r2, #0]
  4020a0:	4770      	bx	lr
  4020a2:	bf00      	nop
  4020a4:	20008700 	.word	0x20008700

004020a8 <pattern_up>:
	  }
 }

void pattern_up(uint8_t channel){
	if (curr_pattern_ch[channel] < 15){
  4020a8:	4b03      	ldr	r3, [pc, #12]	; (4020b8 <pattern_up+0x10>)
  4020aa:	5c1b      	ldrb	r3, [r3, r0]
  4020ac:	2b0e      	cmp	r3, #14
  4020ae:	d802      	bhi.n	4020b6 <pattern_up+0xe>
		curr_pattern_ch[channel]++;
  4020b0:	3301      	adds	r3, #1
  4020b2:	4a01      	ldr	r2, [pc, #4]	; (4020b8 <pattern_up+0x10>)
  4020b4:	5413      	strb	r3, [r2, r0]
  4020b6:	4770      	bx	lr
  4020b8:	20008714 	.word	0x20008714

004020bc <pattern_down>:
	}
}

void pattern_down(uint8_t channel){
	  if (curr_pattern_ch[channel] > 0){
  4020bc:	4b03      	ldr	r3, [pc, #12]	; (4020cc <pattern_down+0x10>)
  4020be:	5c1b      	ldrb	r3, [r3, r0]
  4020c0:	b113      	cbz	r3, 4020c8 <pattern_down+0xc>
		  curr_pattern_ch[channel]--;
  4020c2:	3b01      	subs	r3, #1
  4020c4:	4a01      	ldr	r2, [pc, #4]	; (4020cc <pattern_down+0x10>)
  4020c6:	5413      	strb	r3, [r2, r0]
  4020c8:	4770      	bx	lr
  4020ca:	bf00      	nop
  4020cc:	20008714 	.word	0x20008714

004020d0 <control_direction>:

 uint8_t A_seq;
 uint8_t B_seq;


 void control_direction(uint32_t A, uint32_t B, uint8_t aux_control){
  4020d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	//read Encoder input A
	bool A_in = REG_PIOA_PDSR & A;
  4020d2:	4b69      	ldr	r3, [pc, #420]	; (402278 <control_direction+0x1a8>)
  4020d4:	681f      	ldr	r7, [r3, #0]
	//read Encoder input B
	bool B_in = REG_PIOA_PDSR & B;
  4020d6:	681d      	ldr	r5, [r3, #0]
	
	A_seq = A_seq << 1;
	A_seq |= A_in;
	
	B_seq = B_seq << 1;
  4020d8:	4c68      	ldr	r4, [pc, #416]	; (40227c <control_direction+0x1ac>)
	B_seq |= B_in;
  4020da:	7823      	ldrb	r3, [r4, #0]
  4020dc:	420d      	tst	r5, r1
  4020de:	bf14      	ite	ne
  4020e0:	2101      	movne	r1, #1
  4020e2:	2100      	moveq	r1, #0
  4020e4:	ea41 0143 	orr.w	r1, r1, r3, lsl #1
	//read Encoder input A
	bool A_in = REG_PIOA_PDSR & A;
	//read Encoder input B
	bool B_in = REG_PIOA_PDSR & B;
	
	A_seq = A_seq << 1;
  4020e8:	4d65      	ldr	r5, [pc, #404]	; (402280 <control_direction+0x1b0>)
	A_seq |= A_in;
	
	B_seq = B_seq << 1;
	B_seq |= B_in;
	
	A_seq &= 0b00001111;
  4020ea:	782e      	ldrb	r6, [r5, #0]
  4020ec:	4207      	tst	r7, r0
  4020ee:	bf14      	ite	ne
  4020f0:	2301      	movne	r3, #1
  4020f2:	2300      	moveq	r3, #0
  4020f4:	ea43 0346 	orr.w	r3, r3, r6, lsl #1
  4020f8:	f003 030f 	and.w	r3, r3, #15
  4020fc:	702b      	strb	r3, [r5, #0]
	B_seq &= 0b00001111;
  4020fe:	f001 010f 	and.w	r1, r1, #15
  402102:	7021      	strb	r1, [r4, #0]


	//return true if turned right
	if ((A_seq == 0b00001001) && (B_seq == 0b00000011)){
  402104:	2b09      	cmp	r3, #9
  402106:	d15a      	bne.n	4021be <control_direction+0xee>
  402108:	2903      	cmp	r1, #3
  40210a:	f040 80b3 	bne.w	402274 <control_direction+0x1a4>
		if (aux_control == 0){
  40210e:	b94a      	cbnz	r2, 402124 <control_direction+0x54>
			bpm_inc();
  402110:	4b5c      	ldr	r3, [pc, #368]	; (402284 <control_direction+0x1b4>)
  402112:	4798      	blx	r3
			update_timers(bpm);
  402114:	4c5c      	ldr	r4, [pc, #368]	; (402288 <control_direction+0x1b8>)
  402116:	8820      	ldrh	r0, [r4, #0]
  402118:	4b5c      	ldr	r3, [pc, #368]	; (40228c <control_direction+0x1bc>)
  40211a:	4798      	blx	r3
			bpm_display(bpm);
  40211c:	7820      	ldrb	r0, [r4, #0]
  40211e:	4b5c      	ldr	r3, [pc, #368]	; (402290 <control_direction+0x1c0>)
  402120:	4798      	blx	r3
  402122:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		}
		else if (aux_control == 1){
  402124:	2a01      	cmp	r2, #1
  402126:	d10c      	bne.n	402142 <control_direction+0x72>
			/* resolution UP */
			res_inc();
  402128:	4b5a      	ldr	r3, [pc, #360]	; (402294 <control_direction+0x1c4>)
  40212a:	4798      	blx	r3
			update_timers(bpm);
  40212c:	4b56      	ldr	r3, [pc, #344]	; (402288 <control_direction+0x1b8>)
  40212e:	8818      	ldrh	r0, [r3, #0]
  402130:	4b56      	ldr	r3, [pc, #344]	; (40228c <control_direction+0x1bc>)
  402132:	4798      	blx	r3
			res_display(res_to_int(resolution));
  402134:	4b58      	ldr	r3, [pc, #352]	; (402298 <control_direction+0x1c8>)
  402136:	7818      	ldrb	r0, [r3, #0]
  402138:	4b58      	ldr	r3, [pc, #352]	; (40229c <control_direction+0x1cc>)
  40213a:	4798      	blx	r3
  40213c:	4b58      	ldr	r3, [pc, #352]	; (4022a0 <control_direction+0x1d0>)
  40213e:	4798      	blx	r3
  402140:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			//page_loop_inc();
		}
		else if (aux_control == 2){
  402142:	2a02      	cmp	r2, #2
  402144:	d106      	bne.n	402154 <control_direction+0x84>
			display_page_inc();
  402146:	4b57      	ldr	r3, [pc, #348]	; (4022a4 <control_direction+0x1d4>)
  402148:	4798      	blx	r3
			page_display(display_page);
  40214a:	4b57      	ldr	r3, [pc, #348]	; (4022a8 <control_direction+0x1d8>)
  40214c:	7818      	ldrb	r0, [r3, #0]
  40214e:	4b57      	ldr	r3, [pc, #348]	; (4022ac <control_direction+0x1dc>)
  402150:	4798      	blx	r3
  402152:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		}
		else if (aux_control == 3){
  402154:	2a03      	cmp	r2, #3
  402156:	d106      	bne.n	402166 <control_direction+0x96>
			pattern_inc();
  402158:	4b55      	ldr	r3, [pc, #340]	; (4022b0 <control_direction+0x1e0>)
  40215a:	4798      	blx	r3
			pattern_display(curr_pattern);
  40215c:	4b55      	ldr	r3, [pc, #340]	; (4022b4 <control_direction+0x1e4>)
  40215e:	7818      	ldrb	r0, [r3, #0]
  402160:	4b55      	ldr	r3, [pc, #340]	; (4022b8 <control_direction+0x1e8>)
  402162:	4798      	blx	r3
  402164:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		}
		else if (aux_control == 4){
  402166:	2a04      	cmp	r2, #4
  402168:	d108      	bne.n	40217c <control_direction+0xac>
			pattern_up(CHANNEL_1);
  40216a:	2000      	movs	r0, #0
  40216c:	4b53      	ldr	r3, [pc, #332]	; (4022bc <control_direction+0x1ec>)
  40216e:	4798      	blx	r3
			output_display_1(curr_pattern_ch[0], curr_pattern_ch[1]);
  402170:	4b53      	ldr	r3, [pc, #332]	; (4022c0 <control_direction+0x1f0>)
  402172:	7859      	ldrb	r1, [r3, #1]
  402174:	7818      	ldrb	r0, [r3, #0]
  402176:	4b53      	ldr	r3, [pc, #332]	; (4022c4 <control_direction+0x1f4>)
  402178:	4798      	blx	r3
  40217a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		}
		else if (aux_control == 5){
  40217c:	2a05      	cmp	r2, #5
  40217e:	d108      	bne.n	402192 <control_direction+0xc2>
			pattern_up(CHANNEL_2);
  402180:	2001      	movs	r0, #1
  402182:	4b4e      	ldr	r3, [pc, #312]	; (4022bc <control_direction+0x1ec>)
  402184:	4798      	blx	r3
			output_display_1(curr_pattern_ch[0], curr_pattern_ch[1]);
  402186:	4b4e      	ldr	r3, [pc, #312]	; (4022c0 <control_direction+0x1f0>)
  402188:	7859      	ldrb	r1, [r3, #1]
  40218a:	7818      	ldrb	r0, [r3, #0]
  40218c:	4b4d      	ldr	r3, [pc, #308]	; (4022c4 <control_direction+0x1f4>)
  40218e:	4798      	blx	r3
  402190:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		}
		else if (aux_control == 6){
  402192:	2a06      	cmp	r2, #6
  402194:	d108      	bne.n	4021a8 <control_direction+0xd8>
			pattern_up(CHANNEL_3);
  402196:	2002      	movs	r0, #2
  402198:	4b48      	ldr	r3, [pc, #288]	; (4022bc <control_direction+0x1ec>)
  40219a:	4798      	blx	r3
			output_display_2(curr_pattern_ch[2], curr_pattern_ch[3]);
  40219c:	4b48      	ldr	r3, [pc, #288]	; (4022c0 <control_direction+0x1f0>)
  40219e:	78d9      	ldrb	r1, [r3, #3]
  4021a0:	7898      	ldrb	r0, [r3, #2]
  4021a2:	4b49      	ldr	r3, [pc, #292]	; (4022c8 <control_direction+0x1f8>)
  4021a4:	4798      	blx	r3
  4021a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		}
		else if (aux_control == 7){
  4021a8:	2a07      	cmp	r2, #7
  4021aa:	d163      	bne.n	402274 <control_direction+0x1a4>
			pattern_up(CHANNEL_4);
  4021ac:	2003      	movs	r0, #3
  4021ae:	4b43      	ldr	r3, [pc, #268]	; (4022bc <control_direction+0x1ec>)
  4021b0:	4798      	blx	r3
			output_display_2(curr_pattern_ch[2], curr_pattern_ch[3]);
  4021b2:	4b43      	ldr	r3, [pc, #268]	; (4022c0 <control_direction+0x1f0>)
  4021b4:	78d9      	ldrb	r1, [r3, #3]
  4021b6:	7898      	ldrb	r0, [r3, #2]
  4021b8:	4b43      	ldr	r3, [pc, #268]	; (4022c8 <control_direction+0x1f8>)
  4021ba:	4798      	blx	r3
  4021bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		}

	}

	else if ((A_seq == 0b00000011) && (B_seq == 0b00001001)){
  4021be:	2b03      	cmp	r3, #3
  4021c0:	d158      	bne.n	402274 <control_direction+0x1a4>
  4021c2:	2909      	cmp	r1, #9
  4021c4:	d156      	bne.n	402274 <control_direction+0x1a4>

		if (aux_control == 0){
  4021c6:	b94a      	cbnz	r2, 4021dc <control_direction+0x10c>
			bpm_dec();
  4021c8:	4b40      	ldr	r3, [pc, #256]	; (4022cc <control_direction+0x1fc>)
  4021ca:	4798      	blx	r3
			update_timers(bpm);
  4021cc:	4c2e      	ldr	r4, [pc, #184]	; (402288 <control_direction+0x1b8>)
  4021ce:	8820      	ldrh	r0, [r4, #0]
  4021d0:	4b2e      	ldr	r3, [pc, #184]	; (40228c <control_direction+0x1bc>)
  4021d2:	4798      	blx	r3
			bpm_display(bpm);
  4021d4:	7820      	ldrb	r0, [r4, #0]
  4021d6:	4b2e      	ldr	r3, [pc, #184]	; (402290 <control_direction+0x1c0>)
  4021d8:	4798      	blx	r3
  4021da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		}
		else if (aux_control == 1){
  4021dc:	2a01      	cmp	r2, #1
  4021de:	d10c      	bne.n	4021fa <control_direction+0x12a>
			/* resolution DOWN */
			res_dec();
  4021e0:	4b3b      	ldr	r3, [pc, #236]	; (4022d0 <control_direction+0x200>)
  4021e2:	4798      	blx	r3
			update_timers(bpm);
  4021e4:	4b28      	ldr	r3, [pc, #160]	; (402288 <control_direction+0x1b8>)
  4021e6:	8818      	ldrh	r0, [r3, #0]
  4021e8:	4b28      	ldr	r3, [pc, #160]	; (40228c <control_direction+0x1bc>)
  4021ea:	4798      	blx	r3
			res_display(res_to_int(resolution));
  4021ec:	4b2a      	ldr	r3, [pc, #168]	; (402298 <control_direction+0x1c8>)
  4021ee:	7818      	ldrb	r0, [r3, #0]
  4021f0:	4b2a      	ldr	r3, [pc, #168]	; (40229c <control_direction+0x1cc>)
  4021f2:	4798      	blx	r3
  4021f4:	4b2a      	ldr	r3, [pc, #168]	; (4022a0 <control_direction+0x1d0>)
  4021f6:	4798      	blx	r3
  4021f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			//page_loop_dec();
		}
		else if (aux_control == 2){
  4021fa:	2a02      	cmp	r2, #2
  4021fc:	d106      	bne.n	40220c <control_direction+0x13c>
			display_page_dec();
  4021fe:	4b35      	ldr	r3, [pc, #212]	; (4022d4 <control_direction+0x204>)
  402200:	4798      	blx	r3
			page_display(display_page);
  402202:	4b29      	ldr	r3, [pc, #164]	; (4022a8 <control_direction+0x1d8>)
  402204:	7818      	ldrb	r0, [r3, #0]
  402206:	4b29      	ldr	r3, [pc, #164]	; (4022ac <control_direction+0x1dc>)
  402208:	4798      	blx	r3
  40220a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		}
		else if (aux_control == 3){
  40220c:	2a03      	cmp	r2, #3
  40220e:	d106      	bne.n	40221e <control_direction+0x14e>
			pattern_dec();
  402210:	4b31      	ldr	r3, [pc, #196]	; (4022d8 <control_direction+0x208>)
  402212:	4798      	blx	r3
			pattern_display(curr_pattern);
  402214:	4b27      	ldr	r3, [pc, #156]	; (4022b4 <control_direction+0x1e4>)
  402216:	7818      	ldrb	r0, [r3, #0]
  402218:	4b27      	ldr	r3, [pc, #156]	; (4022b8 <control_direction+0x1e8>)
  40221a:	4798      	blx	r3
  40221c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		}
		else if (aux_control == 4){
  40221e:	2a04      	cmp	r2, #4
  402220:	d108      	bne.n	402234 <control_direction+0x164>
			pattern_down(CHANNEL_1);
  402222:	2000      	movs	r0, #0
  402224:	4b2d      	ldr	r3, [pc, #180]	; (4022dc <control_direction+0x20c>)
  402226:	4798      	blx	r3
			output_display_1(curr_pattern_ch[0], curr_pattern_ch[1]);
  402228:	4b25      	ldr	r3, [pc, #148]	; (4022c0 <control_direction+0x1f0>)
  40222a:	7859      	ldrb	r1, [r3, #1]
  40222c:	7818      	ldrb	r0, [r3, #0]
  40222e:	4b25      	ldr	r3, [pc, #148]	; (4022c4 <control_direction+0x1f4>)
  402230:	4798      	blx	r3
  402232:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		}
		else if (aux_control == 5){
  402234:	2a05      	cmp	r2, #5
  402236:	d108      	bne.n	40224a <control_direction+0x17a>
			pattern_down(CHANNEL_2);
  402238:	2001      	movs	r0, #1
  40223a:	4b28      	ldr	r3, [pc, #160]	; (4022dc <control_direction+0x20c>)
  40223c:	4798      	blx	r3
			output_display_1(curr_pattern_ch[0], curr_pattern_ch[1]);
  40223e:	4b20      	ldr	r3, [pc, #128]	; (4022c0 <control_direction+0x1f0>)
  402240:	7859      	ldrb	r1, [r3, #1]
  402242:	7818      	ldrb	r0, [r3, #0]
  402244:	4b1f      	ldr	r3, [pc, #124]	; (4022c4 <control_direction+0x1f4>)
  402246:	4798      	blx	r3
  402248:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		}
		else if (aux_control == 6){
  40224a:	2a06      	cmp	r2, #6
  40224c:	d108      	bne.n	402260 <control_direction+0x190>
			pattern_down(CHANNEL_3);
  40224e:	2002      	movs	r0, #2
  402250:	4b22      	ldr	r3, [pc, #136]	; (4022dc <control_direction+0x20c>)
  402252:	4798      	blx	r3
			output_display_2(curr_pattern_ch[2], curr_pattern_ch[3]);
  402254:	4b1a      	ldr	r3, [pc, #104]	; (4022c0 <control_direction+0x1f0>)
  402256:	78d9      	ldrb	r1, [r3, #3]
  402258:	7898      	ldrb	r0, [r3, #2]
  40225a:	4b1b      	ldr	r3, [pc, #108]	; (4022c8 <control_direction+0x1f8>)
  40225c:	4798      	blx	r3
  40225e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		}
		else if (aux_control == 7){
  402260:	2a07      	cmp	r2, #7
  402262:	d107      	bne.n	402274 <control_direction+0x1a4>
			pattern_down(CHANNEL_4);
  402264:	2003      	movs	r0, #3
  402266:	4b1d      	ldr	r3, [pc, #116]	; (4022dc <control_direction+0x20c>)
  402268:	4798      	blx	r3
			output_display_2(curr_pattern_ch[2], curr_pattern_ch[3]);
  40226a:	4b15      	ldr	r3, [pc, #84]	; (4022c0 <control_direction+0x1f0>)
  40226c:	78d9      	ldrb	r1, [r3, #3]
  40226e:	7898      	ldrb	r0, [r3, #2]
  402270:	4b15      	ldr	r3, [pc, #84]	; (4022c8 <control_direction+0x1f8>)
  402272:	4798      	blx	r3
  402274:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402276:	bf00      	nop
  402278:	400e0e3c 	.word	0x400e0e3c
  40227c:	20008731 	.word	0x20008731
  402280:	20008730 	.word	0x20008730
  402284:	0040202d 	.word	0x0040202d
  402288:	20008728 	.word	0x20008728
  40228c:	00402e39 	.word	0x00402e39
  402290:	00400bc9 	.word	0x00400bc9
  402294:	00402005 	.word	0x00402005
  402298:	20008704 	.word	0x20008704
  40229c:	00401fbd 	.word	0x00401fbd
  4022a0:	00400c2d 	.word	0x00400c2d
  4022a4:	00402059 	.word	0x00402059
  4022a8:	2000871c 	.word	0x2000871c
  4022ac:	00400cc1 	.word	0x00400cc1
  4022b0:	00402081 	.word	0x00402081
  4022b4:	20008700 	.word	0x20008700
  4022b8:	00400d0d 	.word	0x00400d0d
  4022bc:	004020a9 	.word	0x004020a9
  4022c0:	20008714 	.word	0x20008714
  4022c4:	00400d59 	.word	0x00400d59
  4022c8:	00400df1 	.word	0x00400df1
  4022cc:	00402045 	.word	0x00402045
  4022d0:	00402019 	.word	0x00402019
  4022d4:	0040206d 	.word	0x0040206d
  4022d8:	00402095 	.word	0x00402095
  4022dc:	004020bd 	.word	0x004020bd

004022e0 <init_sequencer_controls>:
		page_loop--;
	}
}


 void init_sequencer_controls(){
  4022e0:	b470      	push	{r4, r5, r6}

	bpm = 240;
  4022e2:	22f0      	movs	r2, #240	; 0xf0
  4022e4:	4ba8      	ldr	r3, [pc, #672]	; (402588 <init_sequencer_controls+0x2a8>)
  4022e6:	801a      	strh	r2, [r3, #0]

	A_seq = 0;
  4022e8:	2300      	movs	r3, #0
  4022ea:	4aa8      	ldr	r2, [pc, #672]	; (40258c <init_sequencer_controls+0x2ac>)
  4022ec:	7013      	strb	r3, [r2, #0]
	B_seq = 0;
  4022ee:	4aa8      	ldr	r2, [pc, #672]	; (402590 <init_sequencer_controls+0x2b0>)
  4022f0:	7013      	strb	r3, [r2, #0]

	//enable clock for PIOA
	REG_PMC_PCER0 |= PMC_PCER0_PID11;
  4022f2:	4aa8      	ldr	r2, [pc, #672]	; (402594 <init_sequencer_controls+0x2b4>)
  4022f4:	6813      	ldr	r3, [r2, #0]
  4022f6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  4022fa:	6013      	str	r3, [r2, #0]


	/**************			CONFIGURE 8 STEP AUX ENCODERS			**************/

	//Set up PA0 as AUX ENC 0 INPUT A
	REG_PIOA_PER |= PIO_PER_P0; //enable PIO controller
  4022fc:	4da6      	ldr	r5, [pc, #664]	; (402598 <init_sequencer_controls+0x2b8>)
  4022fe:	682b      	ldr	r3, [r5, #0]
  402300:	f043 0301 	orr.w	r3, r3, #1
  402304:	602b      	str	r3, [r5, #0]
	REG_PIOA_ODR |= PIO_ODR_P0; //disable output
  402306:	4ca5      	ldr	r4, [pc, #660]	; (40259c <init_sequencer_controls+0x2bc>)
  402308:	6823      	ldr	r3, [r4, #0]
  40230a:	f043 0301 	orr.w	r3, r3, #1
  40230e:	6023      	str	r3, [r4, #0]
	REG_PIOA_PPDDR |= PIO_PPDDR_P0; //disable pull-down resistor
  402310:	48a3      	ldr	r0, [pc, #652]	; (4025a0 <init_sequencer_controls+0x2c0>)
  402312:	6803      	ldr	r3, [r0, #0]
  402314:	f043 0301 	orr.w	r3, r3, #1
  402318:	6003      	str	r3, [r0, #0]
	REG_PIOA_PUER |= PIO_PUER_P0;	//enable pull-up resistor
  40231a:	49a2      	ldr	r1, [pc, #648]	; (4025a4 <init_sequencer_controls+0x2c4>)
  40231c:	680b      	ldr	r3, [r1, #0]
  40231e:	f043 0301 	orr.w	r3, r3, #1
  402322:	600b      	str	r3, [r1, #0]
	REG_PIOA_IFSCER |= PIO_IFSCER_P0; //turn on slow clock debounce
  402324:	f602 2274 	addw	r2, r2, #2676	; 0xa74
  402328:	6813      	ldr	r3, [r2, #0]
  40232a:	f043 0301 	orr.w	r3, r3, #1
  40232e:	6013      	str	r3, [r2, #0]
	REG_PIOA_IFER |= PIO_IFER_P0;	//start debounce filter
  402330:	4b9d      	ldr	r3, [pc, #628]	; (4025a8 <init_sequencer_controls+0x2c8>)
  402332:	681e      	ldr	r6, [r3, #0]
  402334:	f046 0601 	orr.w	r6, r6, #1
  402338:	601e      	str	r6, [r3, #0]

	//Set up PA1 as AUX ENC 0 INPUT B
	REG_PIOA_PER |= PIO_PER_P1; //enable PIO controller
  40233a:	682e      	ldr	r6, [r5, #0]
  40233c:	f046 0602 	orr.w	r6, r6, #2
  402340:	602e      	str	r6, [r5, #0]
	REG_PIOA_ODR |= PIO_ODR_P1; //disable output
  402342:	6826      	ldr	r6, [r4, #0]
  402344:	f046 0602 	orr.w	r6, r6, #2
  402348:	6026      	str	r6, [r4, #0]
	REG_PIOA_PPDDR |= PIO_PPDDR_P1; //disable pull-down resistor
  40234a:	6806      	ldr	r6, [r0, #0]
  40234c:	f046 0602 	orr.w	r6, r6, #2
  402350:	6006      	str	r6, [r0, #0]
	REG_PIOA_PUER |= PIO_PUER_P1;	//enable pull-up resistor
  402352:	680e      	ldr	r6, [r1, #0]
  402354:	f046 0602 	orr.w	r6, r6, #2
  402358:	600e      	str	r6, [r1, #0]
	REG_PIOA_IFSCER |= PIO_IFSCER_P1; //turn on slow clock debounce
  40235a:	6816      	ldr	r6, [r2, #0]
  40235c:	f046 0602 	orr.w	r6, r6, #2
  402360:	6016      	str	r6, [r2, #0]
	REG_PIOA_IFER |= PIO_IFER_P1;	//start debounce filter
  402362:	681e      	ldr	r6, [r3, #0]
  402364:	f046 0602 	orr.w	r6, r6, #2
  402368:	601e      	str	r6, [r3, #0]



	//Set up PA6 as AUX ENC 1 INPUT A
	REG_PIOA_PER |= PIO_PER_P6; //enable PIO controller
  40236a:	682e      	ldr	r6, [r5, #0]
  40236c:	f046 0640 	orr.w	r6, r6, #64	; 0x40
  402370:	602e      	str	r6, [r5, #0]
	REG_PIOA_ODR |= PIO_ODR_P6; //disable output
  402372:	6826      	ldr	r6, [r4, #0]
  402374:	f046 0640 	orr.w	r6, r6, #64	; 0x40
  402378:	6026      	str	r6, [r4, #0]
	REG_PIOA_PPDDR |= PIO_PPDDR_P6; //disable pull-down resistor
  40237a:	6806      	ldr	r6, [r0, #0]
  40237c:	f046 0640 	orr.w	r6, r6, #64	; 0x40
  402380:	6006      	str	r6, [r0, #0]
	REG_PIOA_PUER |= PIO_PUER_P6;	//enable pull-up resistor
  402382:	680e      	ldr	r6, [r1, #0]
  402384:	f046 0640 	orr.w	r6, r6, #64	; 0x40
  402388:	600e      	str	r6, [r1, #0]
	REG_PIOA_IFSCER |= PIO_IFSCER_P6; //turn on slow clock debounce
  40238a:	6816      	ldr	r6, [r2, #0]
  40238c:	f046 0640 	orr.w	r6, r6, #64	; 0x40
  402390:	6016      	str	r6, [r2, #0]
	REG_PIOA_IFER |= PIO_IFER_P6;	//start debounce filter
  402392:	681e      	ldr	r6, [r3, #0]
  402394:	f046 0640 	orr.w	r6, r6, #64	; 0x40
  402398:	601e      	str	r6, [r3, #0]

	//Set up PA7 as AUX ENC 1 INPUT B
	REG_PIOA_PER |= PIO_PER_P7; //enable PIO controller
  40239a:	682e      	ldr	r6, [r5, #0]
  40239c:	f046 0680 	orr.w	r6, r6, #128	; 0x80
  4023a0:	602e      	str	r6, [r5, #0]
	REG_PIOA_ODR |= PIO_ODR_P7; //disable output
  4023a2:	6826      	ldr	r6, [r4, #0]
  4023a4:	f046 0680 	orr.w	r6, r6, #128	; 0x80
  4023a8:	6026      	str	r6, [r4, #0]
	REG_PIOA_PPDDR |= PIO_PPDDR_P7; //disable pull-down resistor
  4023aa:	6806      	ldr	r6, [r0, #0]
  4023ac:	f046 0680 	orr.w	r6, r6, #128	; 0x80
  4023b0:	6006      	str	r6, [r0, #0]
	REG_PIOA_PUER |= PIO_PUER_P7;	//enable pull-up resistor
  4023b2:	680e      	ldr	r6, [r1, #0]
  4023b4:	f046 0680 	orr.w	r6, r6, #128	; 0x80
  4023b8:	600e      	str	r6, [r1, #0]
	REG_PIOA_IFSCER |= PIO_IFSCER_P7; //turn on slow clock debounce
  4023ba:	6816      	ldr	r6, [r2, #0]
  4023bc:	f046 0680 	orr.w	r6, r6, #128	; 0x80
  4023c0:	6016      	str	r6, [r2, #0]
	REG_PIOA_IFER |= PIO_IFER_P7;	//start debounce filter
  4023c2:	681e      	ldr	r6, [r3, #0]
  4023c4:	f046 0680 	orr.w	r6, r6, #128	; 0x80
  4023c8:	601e      	str	r6, [r3, #0]


	
	//Set up PA8 as AUX ENC 2 INPUT A
	REG_PIOA_PER |= PIO_PER_P8; //enable PIO controller
  4023ca:	682e      	ldr	r6, [r5, #0]
  4023cc:	f446 7680 	orr.w	r6, r6, #256	; 0x100
  4023d0:	602e      	str	r6, [r5, #0]
	REG_PIOA_ODR |= PIO_ODR_P8; //disable output
  4023d2:	6826      	ldr	r6, [r4, #0]
  4023d4:	f446 7680 	orr.w	r6, r6, #256	; 0x100
  4023d8:	6026      	str	r6, [r4, #0]
	REG_PIOA_PPDDR |= PIO_PPDDR_P8; //disable pull-down resistor
  4023da:	6806      	ldr	r6, [r0, #0]
  4023dc:	f446 7680 	orr.w	r6, r6, #256	; 0x100
  4023e0:	6006      	str	r6, [r0, #0]
	REG_PIOA_PUER |= PIO_PUER_P8;	//enable pull-up resistor
  4023e2:	680e      	ldr	r6, [r1, #0]
  4023e4:	f446 7680 	orr.w	r6, r6, #256	; 0x100
  4023e8:	600e      	str	r6, [r1, #0]
	REG_PIOA_IFSCER |= PIO_IFSCER_P8; //turn on slow clock debounce
  4023ea:	6816      	ldr	r6, [r2, #0]
  4023ec:	f446 7680 	orr.w	r6, r6, #256	; 0x100
  4023f0:	6016      	str	r6, [r2, #0]
	REG_PIOA_IFER |= PIO_IFER_P8;	//start debounce filter
  4023f2:	681e      	ldr	r6, [r3, #0]
  4023f4:	f446 7680 	orr.w	r6, r6, #256	; 0x100
  4023f8:	601e      	str	r6, [r3, #0]

	//Set up PA9 as AUX ENC 2 INPUT B
	REG_PIOA_PER |= PIO_PER_P9; //enable PIO controller
  4023fa:	682e      	ldr	r6, [r5, #0]
  4023fc:	f446 7600 	orr.w	r6, r6, #512	; 0x200
  402400:	602e      	str	r6, [r5, #0]
	REG_PIOA_ODR |= PIO_ODR_P9; //disable output
  402402:	6826      	ldr	r6, [r4, #0]
  402404:	f446 7600 	orr.w	r6, r6, #512	; 0x200
  402408:	6026      	str	r6, [r4, #0]
	REG_PIOA_PPDDR |= PIO_PPDDR_P9; //disable pull-down resistor
  40240a:	6806      	ldr	r6, [r0, #0]
  40240c:	f446 7600 	orr.w	r6, r6, #512	; 0x200
  402410:	6006      	str	r6, [r0, #0]
	REG_PIOA_PUER |= PIO_PUER_P9;	//enable pull-up resistor
  402412:	680e      	ldr	r6, [r1, #0]
  402414:	f446 7600 	orr.w	r6, r6, #512	; 0x200
  402418:	600e      	str	r6, [r1, #0]
	REG_PIOA_IFSCER |= PIO_IFSCER_P9; //turn on slow clock debounce
  40241a:	6816      	ldr	r6, [r2, #0]
  40241c:	f446 7600 	orr.w	r6, r6, #512	; 0x200
  402420:	6016      	str	r6, [r2, #0]
	REG_PIOA_IFER |= PIO_IFER_P9;	//start debounce filter
  402422:	681e      	ldr	r6, [r3, #0]
  402424:	f446 7600 	orr.w	r6, r6, #512	; 0x200
  402428:	601e      	str	r6, [r3, #0]



	//Set up PA16 as AUX ENC 3 INPUT A
	REG_PIOA_PER |= PIO_PER_P16; //enable PIO controller
  40242a:	682e      	ldr	r6, [r5, #0]
  40242c:	f446 3680 	orr.w	r6, r6, #65536	; 0x10000
  402430:	602e      	str	r6, [r5, #0]
	REG_PIOA_ODR |= PIO_ODR_P16; //disable output
  402432:	6826      	ldr	r6, [r4, #0]
  402434:	f446 3680 	orr.w	r6, r6, #65536	; 0x10000
  402438:	6026      	str	r6, [r4, #0]
	REG_PIOA_PPDDR |= PIO_PPDDR_P16; //disable pull-down resistor
  40243a:	6806      	ldr	r6, [r0, #0]
  40243c:	f446 3680 	orr.w	r6, r6, #65536	; 0x10000
  402440:	6006      	str	r6, [r0, #0]
	REG_PIOA_PUER |= PIO_PUER_P16;	//enable pull-up resistor
  402442:	680e      	ldr	r6, [r1, #0]
  402444:	f446 3680 	orr.w	r6, r6, #65536	; 0x10000
  402448:	600e      	str	r6, [r1, #0]
	REG_PIOA_IFSCER |= PIO_IFSCER_P16; //turn on slow clock debounce
  40244a:	6816      	ldr	r6, [r2, #0]
  40244c:	f446 3680 	orr.w	r6, r6, #65536	; 0x10000
  402450:	6016      	str	r6, [r2, #0]
	REG_PIOA_IFER |= PIO_IFER_P16;	//start debounce filter
  402452:	681e      	ldr	r6, [r3, #0]
  402454:	f446 3680 	orr.w	r6, r6, #65536	; 0x10000
  402458:	601e      	str	r6, [r3, #0]

	//Set up PA17 as AUX ENC 3 INPUT B
	REG_PIOA_PER |= PIO_PER_P17; //enable PIO controller
  40245a:	682e      	ldr	r6, [r5, #0]
  40245c:	f446 3600 	orr.w	r6, r6, #131072	; 0x20000
  402460:	602e      	str	r6, [r5, #0]
	REG_PIOA_ODR |= PIO_ODR_P17; //disable output
  402462:	6826      	ldr	r6, [r4, #0]
  402464:	f446 3600 	orr.w	r6, r6, #131072	; 0x20000
  402468:	6026      	str	r6, [r4, #0]
	REG_PIOA_PPDDR |= PIO_PPDDR_P17; //disable pull-down resistor
  40246a:	6806      	ldr	r6, [r0, #0]
  40246c:	f446 3600 	orr.w	r6, r6, #131072	; 0x20000
  402470:	6006      	str	r6, [r0, #0]
	REG_PIOA_PUER |= PIO_PUER_P17;	//enable pull-up resistor
  402472:	680e      	ldr	r6, [r1, #0]
  402474:	f446 3600 	orr.w	r6, r6, #131072	; 0x20000
  402478:	600e      	str	r6, [r1, #0]
	REG_PIOA_IFSCER |= PIO_IFSCER_P17; //turn on slow clock debounce
  40247a:	6816      	ldr	r6, [r2, #0]
  40247c:	f446 3600 	orr.w	r6, r6, #131072	; 0x20000
  402480:	6016      	str	r6, [r2, #0]
	REG_PIOA_IFER |= PIO_IFER_P17;	//start debounce filter
  402482:	681e      	ldr	r6, [r3, #0]
  402484:	f446 3600 	orr.w	r6, r6, #131072	; 0x20000
  402488:	601e      	str	r6, [r3, #0]



	//Set up PA20 as AUX ENC 4 INPUT A
	REG_PIOA_PER |= PIO_PER_P20; //enable PIO controller
  40248a:	682e      	ldr	r6, [r5, #0]
  40248c:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
  402490:	602e      	str	r6, [r5, #0]
	REG_PIOA_ODR |= PIO_ODR_P20; //disable output
  402492:	6826      	ldr	r6, [r4, #0]
  402494:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
  402498:	6026      	str	r6, [r4, #0]
	REG_PIOA_PPDDR |= PIO_PPDDR_P20; //disable pull-down resistor
  40249a:	6806      	ldr	r6, [r0, #0]
  40249c:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
  4024a0:	6006      	str	r6, [r0, #0]
	REG_PIOA_PUER |= PIO_PUER_P20;	//enable pull-up resistor
  4024a2:	680e      	ldr	r6, [r1, #0]
  4024a4:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
  4024a8:	600e      	str	r6, [r1, #0]
	REG_PIOA_IFSCER |= PIO_IFSCER_P20; //turn on slow clock debounce
  4024aa:	6816      	ldr	r6, [r2, #0]
  4024ac:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
  4024b0:	6016      	str	r6, [r2, #0]
	REG_PIOA_IFER |= PIO_IFER_P20;	//start debounce filter
  4024b2:	681e      	ldr	r6, [r3, #0]
  4024b4:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
  4024b8:	601e      	str	r6, [r3, #0]

	//Set up PA21 as AUX ENC 4 INPUT B
	REG_PIOA_PER |= PIO_PER_P21; //enable PIO controller
  4024ba:	682e      	ldr	r6, [r5, #0]
  4024bc:	f446 1600 	orr.w	r6, r6, #2097152	; 0x200000
  4024c0:	602e      	str	r6, [r5, #0]
	REG_PIOA_ODR |= PIO_ODR_P21; //disable output
  4024c2:	6826      	ldr	r6, [r4, #0]
  4024c4:	f446 1600 	orr.w	r6, r6, #2097152	; 0x200000
  4024c8:	6026      	str	r6, [r4, #0]
	REG_PIOA_PPDDR |= PIO_PPDDR_P21; //disable pull-down resistor
  4024ca:	6806      	ldr	r6, [r0, #0]
  4024cc:	f446 1600 	orr.w	r6, r6, #2097152	; 0x200000
  4024d0:	6006      	str	r6, [r0, #0]
	REG_PIOA_PUER |= PIO_PUER_P21;	//enable pull-up resistor
  4024d2:	680e      	ldr	r6, [r1, #0]
  4024d4:	f446 1600 	orr.w	r6, r6, #2097152	; 0x200000
  4024d8:	600e      	str	r6, [r1, #0]
	REG_PIOA_IFSCER |= PIO_IFSCER_P21; //turn on slow clock debounce
  4024da:	6816      	ldr	r6, [r2, #0]
  4024dc:	f446 1600 	orr.w	r6, r6, #2097152	; 0x200000
  4024e0:	6016      	str	r6, [r2, #0]
	REG_PIOA_IFER |= PIO_IFER_P21;	//start debounce filter
  4024e2:	681e      	ldr	r6, [r3, #0]
  4024e4:	f446 1600 	orr.w	r6, r6, #2097152	; 0x200000
  4024e8:	601e      	str	r6, [r3, #0]



	//Set up PA22 as AUX ENC 5 INPUT A
	REG_PIOA_PER |= PIO_PER_P22; //enable PIO controller
  4024ea:	682e      	ldr	r6, [r5, #0]
  4024ec:	f446 0680 	orr.w	r6, r6, #4194304	; 0x400000
  4024f0:	602e      	str	r6, [r5, #0]
	REG_PIOA_ODR |= PIO_ODR_P22; //disable output
  4024f2:	6826      	ldr	r6, [r4, #0]
  4024f4:	f446 0680 	orr.w	r6, r6, #4194304	; 0x400000
  4024f8:	6026      	str	r6, [r4, #0]
	REG_PIOA_PPDDR |= PIO_PPDDR_P22; //disable pull-down resistor
  4024fa:	6806      	ldr	r6, [r0, #0]
  4024fc:	f446 0680 	orr.w	r6, r6, #4194304	; 0x400000
  402500:	6006      	str	r6, [r0, #0]
	REG_PIOA_PUER |= PIO_PUER_P22;	//enable pull-up resistor
  402502:	680e      	ldr	r6, [r1, #0]
  402504:	f446 0680 	orr.w	r6, r6, #4194304	; 0x400000
  402508:	600e      	str	r6, [r1, #0]
	REG_PIOA_IFSCER |= PIO_IFSCER_P22; //turn on slow clock debounce
  40250a:	6816      	ldr	r6, [r2, #0]
  40250c:	f446 0680 	orr.w	r6, r6, #4194304	; 0x400000
  402510:	6016      	str	r6, [r2, #0]
	REG_PIOA_IFER |= PIO_IFER_P22;	//start debounce filter
  402512:	681e      	ldr	r6, [r3, #0]
  402514:	f446 0680 	orr.w	r6, r6, #4194304	; 0x400000
  402518:	601e      	str	r6, [r3, #0]

	//Set up PA23 as AUX ENC 5 INPUT B
	REG_PIOA_PER |= PIO_PER_P23; //enable PIO controller
  40251a:	682e      	ldr	r6, [r5, #0]
  40251c:	f446 0600 	orr.w	r6, r6, #8388608	; 0x800000
  402520:	602e      	str	r6, [r5, #0]
	REG_PIOA_ODR |= PIO_ODR_P23; //disable output
  402522:	6826      	ldr	r6, [r4, #0]
  402524:	f446 0600 	orr.w	r6, r6, #8388608	; 0x800000
  402528:	6026      	str	r6, [r4, #0]
	REG_PIOA_PPDDR |= PIO_PPDDR_P23; //disable pull-down resistor
  40252a:	6806      	ldr	r6, [r0, #0]
  40252c:	f446 0600 	orr.w	r6, r6, #8388608	; 0x800000
  402530:	6006      	str	r6, [r0, #0]
	REG_PIOA_PUER |= PIO_PUER_P23;	//enable pull-up resistor
  402532:	680e      	ldr	r6, [r1, #0]
  402534:	f446 0600 	orr.w	r6, r6, #8388608	; 0x800000
  402538:	600e      	str	r6, [r1, #0]
	REG_PIOA_IFSCER |= PIO_IFSCER_P23; //turn on slow clock debounce
  40253a:	6816      	ldr	r6, [r2, #0]
  40253c:	f446 0600 	orr.w	r6, r6, #8388608	; 0x800000
  402540:	6016      	str	r6, [r2, #0]
	REG_PIOA_IFER |= PIO_IFER_P23;	//start debounce filter
  402542:	681e      	ldr	r6, [r3, #0]
  402544:	f446 0600 	orr.w	r6, r6, #8388608	; 0x800000
  402548:	601e      	str	r6, [r3, #0]



	//Set up PA24 as AUX ENC 6 INPUT A
	REG_PIOA_PER |= PIO_PER_P24; //enable PIO controller
  40254a:	682e      	ldr	r6, [r5, #0]
  40254c:	f046 7680 	orr.w	r6, r6, #16777216	; 0x1000000
  402550:	602e      	str	r6, [r5, #0]
	REG_PIOA_ODR |= PIO_ODR_P24; //disable output
  402552:	6826      	ldr	r6, [r4, #0]
  402554:	f046 7680 	orr.w	r6, r6, #16777216	; 0x1000000
  402558:	6026      	str	r6, [r4, #0]
	REG_PIOA_PPDDR |= PIO_PPDDR_P24; //disable pull-down resistor
  40255a:	6806      	ldr	r6, [r0, #0]
  40255c:	f046 7680 	orr.w	r6, r6, #16777216	; 0x1000000
  402560:	6006      	str	r6, [r0, #0]
	REG_PIOA_PUER |= PIO_PUER_P24;	//enable pull-up resistor
  402562:	680e      	ldr	r6, [r1, #0]
  402564:	f046 7680 	orr.w	r6, r6, #16777216	; 0x1000000
  402568:	600e      	str	r6, [r1, #0]
	REG_PIOA_IFSCER |= PIO_IFSCER_P24; //turn on slow clock debounce
  40256a:	6816      	ldr	r6, [r2, #0]
  40256c:	f046 7680 	orr.w	r6, r6, #16777216	; 0x1000000
  402570:	6016      	str	r6, [r2, #0]
	REG_PIOA_IFER |= PIO_IFER_P24;	//start debounce filter
  402572:	681e      	ldr	r6, [r3, #0]
  402574:	f046 7680 	orr.w	r6, r6, #16777216	; 0x1000000
  402578:	601e      	str	r6, [r3, #0]

	//Set up PA25 as AUX ENC 6 INPUT B
	REG_PIOA_PER |= PIO_PER_P25; //enable PIO controller
  40257a:	682e      	ldr	r6, [r5, #0]
  40257c:	f046 7600 	orr.w	r6, r6, #33554432	; 0x2000000
  402580:	602e      	str	r6, [r5, #0]
	REG_PIOA_ODR |= PIO_ODR_P25; //disable output
  402582:	6826      	ldr	r6, [r4, #0]
  402584:	e012      	b.n	4025ac <init_sequencer_controls+0x2cc>
  402586:	bf00      	nop
  402588:	20008728 	.word	0x20008728
  40258c:	20008730 	.word	0x20008730
  402590:	20008731 	.word	0x20008731
  402594:	400e0410 	.word	0x400e0410
  402598:	400e0e00 	.word	0x400e0e00
  40259c:	400e0e14 	.word	0x400e0e14
  4025a0:	400e0e90 	.word	0x400e0e90
  4025a4:	400e0e64 	.word	0x400e0e64
  4025a8:	400e0e20 	.word	0x400e0e20
  4025ac:	f046 7600 	orr.w	r6, r6, #33554432	; 0x2000000
  4025b0:	6026      	str	r6, [r4, #0]
	REG_PIOA_PPDDR |= PIO_PPDDR_P25; //disable pull-down resistor
  4025b2:	6806      	ldr	r6, [r0, #0]
  4025b4:	f046 7600 	orr.w	r6, r6, #33554432	; 0x2000000
  4025b8:	6006      	str	r6, [r0, #0]
	REG_PIOA_PUER |= PIO_PUER_P25;	//enable pull-up resistor
  4025ba:	680e      	ldr	r6, [r1, #0]
  4025bc:	f046 7600 	orr.w	r6, r6, #33554432	; 0x2000000
  4025c0:	600e      	str	r6, [r1, #0]
	REG_PIOA_IFSCER |= PIO_IFSCER_P25; //turn on slow clock debounce
  4025c2:	6816      	ldr	r6, [r2, #0]
  4025c4:	f046 7600 	orr.w	r6, r6, #33554432	; 0x2000000
  4025c8:	6016      	str	r6, [r2, #0]
	REG_PIOA_IFER |= PIO_IFER_P25;	//start debounce filter
  4025ca:	681e      	ldr	r6, [r3, #0]
  4025cc:	f046 7600 	orr.w	r6, r6, #33554432	; 0x2000000
  4025d0:	601e      	str	r6, [r3, #0]



	//Set up PA26 as AUX ENC 7 INPUT A
	REG_PIOA_PER |= PIO_PER_P26; //enable PIO controller
  4025d2:	682e      	ldr	r6, [r5, #0]
  4025d4:	f046 6680 	orr.w	r6, r6, #67108864	; 0x4000000
  4025d8:	602e      	str	r6, [r5, #0]
	REG_PIOA_ODR |= PIO_ODR_P26; //disable output
  4025da:	6826      	ldr	r6, [r4, #0]
  4025dc:	f046 6680 	orr.w	r6, r6, #67108864	; 0x4000000
  4025e0:	6026      	str	r6, [r4, #0]
	REG_PIOA_PPDDR |= PIO_PPDDR_P26; //disable pull-down resistor
  4025e2:	6806      	ldr	r6, [r0, #0]
  4025e4:	f046 6680 	orr.w	r6, r6, #67108864	; 0x4000000
  4025e8:	6006      	str	r6, [r0, #0]
	REG_PIOA_PUER |= PIO_PUER_P26;	//enable pull-up resistor
  4025ea:	680e      	ldr	r6, [r1, #0]
  4025ec:	f046 6680 	orr.w	r6, r6, #67108864	; 0x4000000
  4025f0:	600e      	str	r6, [r1, #0]
	REG_PIOA_IFSCER |= PIO_IFSCER_P26; //turn on slow clock debounce
  4025f2:	6816      	ldr	r6, [r2, #0]
  4025f4:	f046 6680 	orr.w	r6, r6, #67108864	; 0x4000000
  4025f8:	6016      	str	r6, [r2, #0]
	REG_PIOA_IFER |= PIO_IFER_P26;	//start debounce filter
  4025fa:	681e      	ldr	r6, [r3, #0]
  4025fc:	f046 6680 	orr.w	r6, r6, #67108864	; 0x4000000
  402600:	601e      	str	r6, [r3, #0]

	//Set up PA27 as AUX ENC 7 INPUT B
	REG_PIOA_PER |= PIO_PER_P27; //enable PIO controller
  402602:	682e      	ldr	r6, [r5, #0]
  402604:	f046 6600 	orr.w	r6, r6, #134217728	; 0x8000000
  402608:	602e      	str	r6, [r5, #0]
	REG_PIOA_ODR |= PIO_ODR_P27; //disable output
  40260a:	6825      	ldr	r5, [r4, #0]
  40260c:	f045 6500 	orr.w	r5, r5, #134217728	; 0x8000000
  402610:	6025      	str	r5, [r4, #0]
	REG_PIOA_PPDDR |= PIO_PPDDR_P27; //disable pull-down resistor
  402612:	6804      	ldr	r4, [r0, #0]
  402614:	f044 6400 	orr.w	r4, r4, #134217728	; 0x8000000
  402618:	6004      	str	r4, [r0, #0]
	REG_PIOA_PUER |= PIO_PUER_P27;	//enable pull-up resistor
  40261a:	6808      	ldr	r0, [r1, #0]
  40261c:	f040 6000 	orr.w	r0, r0, #134217728	; 0x8000000
  402620:	6008      	str	r0, [r1, #0]
	REG_PIOA_IFSCER |= PIO_IFSCER_P27; //turn on slow clock debounce
  402622:	6811      	ldr	r1, [r2, #0]
  402624:	f041 6100 	orr.w	r1, r1, #134217728	; 0x8000000
  402628:	6011      	str	r1, [r2, #0]
	REG_PIOA_IFER |= PIO_IFER_P27;	//start debounce filter
  40262a:	681a      	ldr	r2, [r3, #0]
  40262c:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
  402630:	601a      	str	r2, [r3, #0]


	/**************			CONFIGURE AUX ENCODER INTERRUPTS			**************/

	uint32_t flag_clear = REG_PIOA_ISR;	//clear left over interrupt flags
  402632:	332c      	adds	r3, #44	; 0x2c
  402634:	681b      	ldr	r3, [r3, #0]

	//Enable interrupts for Aux Encoder 0
	REG_PIOA_IER |= PIO_IER_P0;			//enable input rising edge interrupt
  402636:	4a44      	ldr	r2, [pc, #272]	; (402748 <init_sequencer_controls+0x468>)
  402638:	6813      	ldr	r3, [r2, #0]
  40263a:	f043 0301 	orr.w	r3, r3, #1
  40263e:	6013      	str	r3, [r2, #0]
	REG_PIOA_REHLSR |= PIO_REHLSR_P0;
  402640:	4b42      	ldr	r3, [pc, #264]	; (40274c <init_sequencer_controls+0x46c>)
  402642:	6819      	ldr	r1, [r3, #0]
  402644:	f041 0101 	orr.w	r1, r1, #1
  402648:	6019      	str	r1, [r3, #0]
	REG_PIOA_IER |= PIO_IER_P1;			//enable input rising edge interrupt
  40264a:	6811      	ldr	r1, [r2, #0]
  40264c:	f041 0102 	orr.w	r1, r1, #2
  402650:	6011      	str	r1, [r2, #0]
	REG_PIOA_REHLSR |= PIO_REHLSR_P1;
  402652:	6819      	ldr	r1, [r3, #0]
  402654:	f041 0102 	orr.w	r1, r1, #2
  402658:	6019      	str	r1, [r3, #0]

	//Enable interrupts for Aux Encoder 1
	REG_PIOA_IER |= PIO_IER_P6;			//enable input rising edge interrupt
  40265a:	6811      	ldr	r1, [r2, #0]
  40265c:	f041 0140 	orr.w	r1, r1, #64	; 0x40
  402660:	6011      	str	r1, [r2, #0]
	REG_PIOA_REHLSR |= PIO_REHLSR_P6;
  402662:	6819      	ldr	r1, [r3, #0]
  402664:	f041 0140 	orr.w	r1, r1, #64	; 0x40
  402668:	6019      	str	r1, [r3, #0]
	REG_PIOA_IER |= PIO_IER_P7;			//enable input rising edge interrupt
  40266a:	6811      	ldr	r1, [r2, #0]
  40266c:	f041 0180 	orr.w	r1, r1, #128	; 0x80
  402670:	6011      	str	r1, [r2, #0]
	REG_PIOA_REHLSR |= PIO_REHLSR_P7;
  402672:	6819      	ldr	r1, [r3, #0]
  402674:	f041 0180 	orr.w	r1, r1, #128	; 0x80
  402678:	6019      	str	r1, [r3, #0]

	//Enable interrupts for Aux Encoder 2
	REG_PIOA_IER |= PIO_IER_P8;			//enable input rising edge interrupt
  40267a:	6811      	ldr	r1, [r2, #0]
  40267c:	f441 7180 	orr.w	r1, r1, #256	; 0x100
  402680:	6011      	str	r1, [r2, #0]
	REG_PIOA_REHLSR |= PIO_REHLSR_P8;
  402682:	6819      	ldr	r1, [r3, #0]
  402684:	f441 7180 	orr.w	r1, r1, #256	; 0x100
  402688:	6019      	str	r1, [r3, #0]
	REG_PIOA_IER |= PIO_IER_P9;			//enable input rising edge interrupt
  40268a:	6811      	ldr	r1, [r2, #0]
  40268c:	f441 7100 	orr.w	r1, r1, #512	; 0x200
  402690:	6011      	str	r1, [r2, #0]
	REG_PIOA_REHLSR |= PIO_REHLSR_P9;
  402692:	6819      	ldr	r1, [r3, #0]
  402694:	f441 7100 	orr.w	r1, r1, #512	; 0x200
  402698:	6019      	str	r1, [r3, #0]

	//Enable interrupts for Aux Encoder 3
	REG_PIOA_IER |= PIO_IER_P16;			//enable input rising edge interrupt
  40269a:	6811      	ldr	r1, [r2, #0]
  40269c:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
  4026a0:	6011      	str	r1, [r2, #0]
	REG_PIOA_REHLSR |= PIO_REHLSR_P16;
  4026a2:	6819      	ldr	r1, [r3, #0]
  4026a4:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
  4026a8:	6019      	str	r1, [r3, #0]
	REG_PIOA_IER |= PIO_IER_P17;			//enable input rising edge interrupt
  4026aa:	6811      	ldr	r1, [r2, #0]
  4026ac:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
  4026b0:	6011      	str	r1, [r2, #0]
	REG_PIOA_REHLSR |= PIO_REHLSR_P17;
  4026b2:	6819      	ldr	r1, [r3, #0]
  4026b4:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
  4026b8:	6019      	str	r1, [r3, #0]

	//Enable interrupts for Aux Encoder 4
	REG_PIOA_IER |= PIO_IER_P20;			//enable input rising edge interrupt
  4026ba:	6811      	ldr	r1, [r2, #0]
  4026bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4026c0:	6011      	str	r1, [r2, #0]
	REG_PIOA_REHLSR |= PIO_REHLSR_P20;
  4026c2:	6819      	ldr	r1, [r3, #0]
  4026c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4026c8:	6019      	str	r1, [r3, #0]
	REG_PIOA_IER |= PIO_IER_P21;			//enable input rising edge interrupt
  4026ca:	6811      	ldr	r1, [r2, #0]
  4026cc:	f441 1100 	orr.w	r1, r1, #2097152	; 0x200000
  4026d0:	6011      	str	r1, [r2, #0]
	REG_PIOA_REHLSR |= PIO_REHLSR_P21;
  4026d2:	6819      	ldr	r1, [r3, #0]
  4026d4:	f441 1100 	orr.w	r1, r1, #2097152	; 0x200000
  4026d8:	6019      	str	r1, [r3, #0]

	//Enable interrupts for Aux Encoder 5
	REG_PIOA_IER |= PIO_IER_P22;			//enable input rising edge interrupt
  4026da:	6811      	ldr	r1, [r2, #0]
  4026dc:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
  4026e0:	6011      	str	r1, [r2, #0]
	REG_PIOA_REHLSR |= PIO_REHLSR_P22;
  4026e2:	6819      	ldr	r1, [r3, #0]
  4026e4:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
  4026e8:	6019      	str	r1, [r3, #0]
	REG_PIOA_IER |= PIO_IER_P23;			//enable input rising edge interrupt
  4026ea:	6811      	ldr	r1, [r2, #0]
  4026ec:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
  4026f0:	6011      	str	r1, [r2, #0]
	REG_PIOA_REHLSR |= PIO_REHLSR_P23;
  4026f2:	6819      	ldr	r1, [r3, #0]
  4026f4:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
  4026f8:	6019      	str	r1, [r3, #0]

	//Enable interrupts for Aux Encoder 6
	REG_PIOA_IER |= PIO_IER_P24;			//enable input rising edge interrupt
  4026fa:	6811      	ldr	r1, [r2, #0]
  4026fc:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
  402700:	6011      	str	r1, [r2, #0]
	REG_PIOA_REHLSR |= PIO_REHLSR_P24;
  402702:	6819      	ldr	r1, [r3, #0]
  402704:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
  402708:	6019      	str	r1, [r3, #0]
	REG_PIOA_IER |= PIO_IER_P25;			//enable input rising edge interrupt
  40270a:	6811      	ldr	r1, [r2, #0]
  40270c:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
  402710:	6011      	str	r1, [r2, #0]
	REG_PIOA_REHLSR |= PIO_REHLSR_P25;
  402712:	6819      	ldr	r1, [r3, #0]
  402714:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
  402718:	6019      	str	r1, [r3, #0]

	//Enable interrupts for Aux Encoder 7
	REG_PIOA_IER |= PIO_IER_P26;			//enable input rising edge interrupt
  40271a:	6811      	ldr	r1, [r2, #0]
  40271c:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
  402720:	6011      	str	r1, [r2, #0]
	REG_PIOA_REHLSR |= PIO_REHLSR_P26;
  402722:	6819      	ldr	r1, [r3, #0]
  402724:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
  402728:	6019      	str	r1, [r3, #0]
	REG_PIOA_IER |= PIO_IER_P27;			//enable input rising edge interrupt
  40272a:	6811      	ldr	r1, [r2, #0]
  40272c:	f041 6100 	orr.w	r1, r1, #134217728	; 0x8000000
  402730:	6011      	str	r1, [r2, #0]
	REG_PIOA_REHLSR |= PIO_REHLSR_P27;
  402732:	681a      	ldr	r2, [r3, #0]
  402734:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
  402738:	601a      	str	r2, [r3, #0]
  40273a:	f44f 6200 	mov.w	r2, #2048	; 0x800
  40273e:	4b04      	ldr	r3, [pc, #16]	; (402750 <init_sequencer_controls+0x470>)
  402740:	601a      	str	r2, [r3, #0]

	NVIC_EnableIRQ(PIOA_IRQn);			//enable PORT A interrupts


 }
  402742:	bc70      	pop	{r4, r5, r6}
  402744:	4770      	bx	lr
  402746:	bf00      	nop
  402748:	400e0e40 	.word	0x400e0e40
  40274c:	400e0ed4 	.word	0x400e0ed4
  402750:	e000e100 	.word	0xe000e100

00402754 <PIOA_Handler>:


 void PIOA_Handler(){
  402754:	b508      	push	{r3, lr}

	 uint32_t status = REG_PIOA_ISR;	//read PIOC interrupt status & clear interrupt flags
  402756:	4b2e      	ldr	r3, [pc, #184]	; (402810 <PIOA_Handler+0xbc>)
  402758:	681b      	ldr	r3, [r3, #0]

	 //check if Aux Encoder 1 was rotated
	 if ( (status & PIO_ISR_P0) || (status & PIO_ISR_P1) ){
  40275a:	f013 0f03 	tst.w	r3, #3
  40275e:	d005      	beq.n	40276c <PIOA_Handler+0x18>
		 control_direction(PIO_ODSR_P0, PIO_ODSR_P1, 0);
  402760:	2200      	movs	r2, #0
  402762:	2102      	movs	r1, #2
  402764:	2001      	movs	r0, #1
  402766:	4b2b      	ldr	r3, [pc, #172]	; (402814 <PIOA_Handler+0xc0>)
  402768:	4798      	blx	r3
  40276a:	bd08      	pop	{r3, pc}
	 }

	 else if ( (status & PIO_ISR_P2) ){
  40276c:	f013 0f04 	tst.w	r3, #4
  402770:	d14c      	bne.n	40280c <PIOA_Handler+0xb8>
		/************** PLAY / PAUSE INT****************/
	 }

	 //check if Aux Encoder 2 was rotated
	 else if ( (status & PIO_ISR_P6) || (status & PIO_ISR_P7) ){
  402772:	f013 0fc0 	tst.w	r3, #192	; 0xc0
  402776:	d005      	beq.n	402784 <PIOA_Handler+0x30>
		 control_direction(PIO_ODSR_P6, PIO_ODSR_P7, 1);
  402778:	2201      	movs	r2, #1
  40277a:	2180      	movs	r1, #128	; 0x80
  40277c:	2040      	movs	r0, #64	; 0x40
  40277e:	4b25      	ldr	r3, [pc, #148]	; (402814 <PIOA_Handler+0xc0>)
  402780:	4798      	blx	r3
  402782:	bd08      	pop	{r3, pc}
	 }

	 //check if Aux Encoder 3 was rotated
	 else if ( (status & PIO_ISR_P8) || (status & PIO_ISR_P9) ){
  402784:	f413 7f40 	tst.w	r3, #768	; 0x300
  402788:	d007      	beq.n	40279a <PIOA_Handler+0x46>
		control_direction(PIO_ODSR_P8, PIO_ODSR_P9, 2);
  40278a:	2202      	movs	r2, #2
  40278c:	f44f 7100 	mov.w	r1, #512	; 0x200
  402790:	f44f 7080 	mov.w	r0, #256	; 0x100
  402794:	4b1f      	ldr	r3, [pc, #124]	; (402814 <PIOA_Handler+0xc0>)
  402796:	4798      	blx	r3
  402798:	bd08      	pop	{r3, pc}
	 }

	 else if ( (status & PIO_ISR_P10) ){
  40279a:	f413 6f80 	tst.w	r3, #1024	; 0x400
  40279e:	d135      	bne.n	40280c <PIOA_Handler+0xb8>
		/***************CLOCK IN INT***************/
	 }

	 //check if Aux Encoder 4 was rotated
	 else if ( (status & PIO_ISR_P16) || (status & PIO_ISR_P17) ){
  4027a0:	f413 3f40 	tst.w	r3, #196608	; 0x30000
  4027a4:	d007      	beq.n	4027b6 <PIOA_Handler+0x62>
		control_direction(PIO_ODSR_P16, PIO_ODSR_P17, 3);
  4027a6:	2203      	movs	r2, #3
  4027a8:	f44f 3100 	mov.w	r1, #131072	; 0x20000
  4027ac:	f44f 3080 	mov.w	r0, #65536	; 0x10000
  4027b0:	4b18      	ldr	r3, [pc, #96]	; (402814 <PIOA_Handler+0xc0>)
  4027b2:	4798      	blx	r3
  4027b4:	bd08      	pop	{r3, pc}
	 }

	 //check if Aux Encoder 5 was rotated
	 else if ( (status & PIO_ISR_P20) || (status & PIO_ISR_P21) ){
  4027b6:	f413 1f40 	tst.w	r3, #3145728	; 0x300000
  4027ba:	d007      	beq.n	4027cc <PIOA_Handler+0x78>
		control_direction(PIO_ODSR_P20, PIO_ODSR_P21, 4);
  4027bc:	2204      	movs	r2, #4
  4027be:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
  4027c2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  4027c6:	4b13      	ldr	r3, [pc, #76]	; (402814 <PIOA_Handler+0xc0>)
  4027c8:	4798      	blx	r3
  4027ca:	bd08      	pop	{r3, pc}
	 }

	 //check if Aux Encoder 6 was rotated
	 else if ( (status & PIO_ISR_P22) || (status & PIO_ISR_P23) ){
  4027cc:	f413 0f40 	tst.w	r3, #12582912	; 0xc00000
  4027d0:	d007      	beq.n	4027e2 <PIOA_Handler+0x8e>
		control_direction(PIO_ODSR_P22, PIO_ODSR_P23, 5);
  4027d2:	2205      	movs	r2, #5
  4027d4:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
  4027d8:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
  4027dc:	4b0d      	ldr	r3, [pc, #52]	; (402814 <PIOA_Handler+0xc0>)
  4027de:	4798      	blx	r3
  4027e0:	bd08      	pop	{r3, pc}
	 }

	 //check if Aux Encoder 7 was rotated
	 else if ( (status & PIO_ISR_P24) || (status & PIO_ISR_P25) ){
  4027e2:	f013 7f40 	tst.w	r3, #50331648	; 0x3000000
  4027e6:	d007      	beq.n	4027f8 <PIOA_Handler+0xa4>
		 control_direction(PIO_ODSR_P24, PIO_ODSR_P25, 6);
  4027e8:	2206      	movs	r2, #6
  4027ea:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
  4027ee:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
  4027f2:	4b08      	ldr	r3, [pc, #32]	; (402814 <PIOA_Handler+0xc0>)
  4027f4:	4798      	blx	r3
  4027f6:	bd08      	pop	{r3, pc}
	 }
	 
	 //check if Aux Encoder 8 was rotated
	 else if ( (status & PIO_ISR_P26) || (status & PIO_ISR_P27) ){
  4027f8:	f013 6f40 	tst.w	r3, #201326592	; 0xc000000
  4027fc:	d006      	beq.n	40280c <PIOA_Handler+0xb8>
		 control_direction(PIO_ODSR_P26, PIO_ODSR_P27, 7);
  4027fe:	2207      	movs	r2, #7
  402800:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  402804:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
  402808:	4b02      	ldr	r3, [pc, #8]	; (402814 <PIOA_Handler+0xc0>)
  40280a:	4798      	blx	r3
  40280c:	bd08      	pop	{r3, pc}
  40280e:	bf00      	nop
  402810:	400e0e4c 	.word	0x400e0e4c
  402814:	004020d1 	.word	0x004020d1

00402818 <SPI_modeSelect>:
    Mode0		0		1
    Mode1		0		0
    Mode2		1		1
    Mode3		1		0
    */
    if (mode == 0){
  402818:	b948      	cbnz	r0, 40282e <SPI_modeSelect+0x16>
        REG_SPI_CSR &= ~SPI_CSR_CPOL;
  40281a:	4b17      	ldr	r3, [pc, #92]	; (402878 <SPI_modeSelect+0x60>)
  40281c:	681a      	ldr	r2, [r3, #0]
  40281e:	f022 0201 	bic.w	r2, r2, #1
  402822:	601a      	str	r2, [r3, #0]
        REG_SPI_CSR |= SPI_CSR_NCPHA;
  402824:	681a      	ldr	r2, [r3, #0]
  402826:	f042 0202 	orr.w	r2, r2, #2
  40282a:	601a      	str	r2, [r3, #0]
  40282c:	4770      	bx	lr
    }
    else if (mode == 1){
  40282e:	2801      	cmp	r0, #1
  402830:	d109      	bne.n	402846 <SPI_modeSelect+0x2e>
        REG_SPI_CSR &= ~SPI_CSR_CPOL;
  402832:	4b11      	ldr	r3, [pc, #68]	; (402878 <SPI_modeSelect+0x60>)
  402834:	681a      	ldr	r2, [r3, #0]
  402836:	f022 0201 	bic.w	r2, r2, #1
  40283a:	601a      	str	r2, [r3, #0]
        REG_SPI_CSR &= ~SPI_CSR_NCPHA;
  40283c:	681a      	ldr	r2, [r3, #0]
  40283e:	f022 0202 	bic.w	r2, r2, #2
  402842:	601a      	str	r2, [r3, #0]
  402844:	4770      	bx	lr
    }
    else if (mode == 2){
  402846:	2802      	cmp	r0, #2
  402848:	d109      	bne.n	40285e <SPI_modeSelect+0x46>
        REG_SPI_CSR |= SPI_CSR_CPOL;
  40284a:	4b0b      	ldr	r3, [pc, #44]	; (402878 <SPI_modeSelect+0x60>)
  40284c:	681a      	ldr	r2, [r3, #0]
  40284e:	f042 0201 	orr.w	r2, r2, #1
  402852:	601a      	str	r2, [r3, #0]
        REG_SPI_CSR |= SPI_CSR_NCPHA;
  402854:	681a      	ldr	r2, [r3, #0]
  402856:	f042 0202 	orr.w	r2, r2, #2
  40285a:	601a      	str	r2, [r3, #0]
  40285c:	4770      	bx	lr
    }
    else if (mode == 3){
  40285e:	2803      	cmp	r0, #3
  402860:	d108      	bne.n	402874 <SPI_modeSelect+0x5c>
        REG_SPI_CSR |= SPI_CSR_CPOL;
  402862:	4b05      	ldr	r3, [pc, #20]	; (402878 <SPI_modeSelect+0x60>)
  402864:	681a      	ldr	r2, [r3, #0]
  402866:	f042 0201 	orr.w	r2, r2, #1
  40286a:	601a      	str	r2, [r3, #0]
        REG_SPI_CSR &= ~SPI_CSR_NCPHA;
  40286c:	681a      	ldr	r2, [r3, #0]
  40286e:	f022 0202 	bic.w	r2, r2, #2
  402872:	601a      	str	r2, [r3, #0]
  402874:	4770      	bx	lr
  402876:	bf00      	nop
  402878:	40008030 	.word	0x40008030

0040287c <SPI_led_init>:
    }
}

void SPI_led_init(){
  40287c:	b508      	push	{r3, lr}

	//enable peripheral clock
	REG_PMC_PCER0 |= PMC_PCER0_PID21;
  40287e:	4a14      	ldr	r2, [pc, #80]	; (4028d0 <SPI_led_init+0x54>)
  402880:	6813      	ldr	r3, [r2, #0]
  402882:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
  402886:	6013      	str	r3, [r2, #0]

	//set spi master mode
	REG_SPI_MR |= SPI_MR_MSTR;
  402888:	4b12      	ldr	r3, [pc, #72]	; (4028d4 <SPI_led_init+0x58>)
  40288a:	681a      	ldr	r2, [r3, #0]
  40288c:	f042 0201 	orr.w	r2, r2, #1
  402890:	601a      	str	r2, [r3, #0]

	//set fixed peripheral select(peripheral chosen in SP_MR.PCS instead of SPI_THR.PCS)
	REG_SPI_MR &= ~SPI_MR_PS;
  402892:	681a      	ldr	r2, [r3, #0]
  402894:	f022 0202 	bic.w	r2, r2, #2
  402898:	601a      	str	r2, [r3, #0]
	//REG_SPI_MR |= SPI_MR_PCS(0b1110);

	//set polarity and clock phase to rising edge sample, falling edge shift
	SPI_modeSelect(0);
  40289a:	2000      	movs	r0, #0
  40289c:	4b0e      	ldr	r3, [pc, #56]	; (4028d8 <SPI_led_init+0x5c>)
  40289e:	4798      	blx	r3

	//set clock generator (1 = peripheral clock rate), otherwise a divisor
	//SCBR = fperipheral clock / SPCK Bit Rate
	REG_SPI_CSR |= SPI_CSR_SCBR(5);
  4028a0:	4a0e      	ldr	r2, [pc, #56]	; (4028dc <SPI_led_init+0x60>)
  4028a2:	6813      	ldr	r3, [r2, #0]
  4028a4:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
  4028a8:	6013      	str	r3, [r2, #0]

	//chip select remains low after transfer
	//REG_SPI_CSR |= SPI_CSR_CSNAAT;

	//give peripheral control of pins 
	REG_PIOA_PDR |= PIO_PDR_P11; //NPCS0
  4028aa:	4b0d      	ldr	r3, [pc, #52]	; (4028e0 <SPI_led_init+0x64>)
  4028ac:	681a      	ldr	r2, [r3, #0]
  4028ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
  4028b2:	601a      	str	r2, [r3, #0]
	REG_PIOA_PDR |= PIO_PDR_P13; //MOSI
  4028b4:	681a      	ldr	r2, [r3, #0]
  4028b6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  4028ba:	601a      	str	r2, [r3, #0]
	REG_PIOA_PDR |= PIO_PDR_P14; //SSCK
  4028bc:	681a      	ldr	r2, [r3, #0]
  4028be:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
  4028c2:	601a      	str	r2, [r3, #0]

	//enable SPI
	REG_SPI_CR |= SPI_CR_SPIEN;
  4028c4:	4a07      	ldr	r2, [pc, #28]	; (4028e4 <SPI_led_init+0x68>)
  4028c6:	6813      	ldr	r3, [r2, #0]
  4028c8:	f043 0301 	orr.w	r3, r3, #1
  4028cc:	6013      	str	r3, [r2, #0]
  4028ce:	bd08      	pop	{r3, pc}
  4028d0:	400e0410 	.word	0x400e0410
  4028d4:	40008004 	.word	0x40008004
  4028d8:	00402819 	.word	0x00402819
  4028dc:	40008030 	.word	0x40008030
  4028e0:	400e0e04 	.word	0x400e0e04
  4028e4:	40008000 	.word	0x40008000

004028e8 <SPI_dac_init>:


}

void SPI_dac_init(){
  4028e8:	b508      	push	{r3, lr}

	//Chip Selects for the DACs / CVs
	REG_PIOB_PER |= PIO_PER_P13; //enable PIO controller on PB13
  4028ea:	493a      	ldr	r1, [pc, #232]	; (4029d4 <SPI_dac_init+0xec>)
  4028ec:	680b      	ldr	r3, [r1, #0]
  4028ee:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  4028f2:	600b      	str	r3, [r1, #0]
	REG_PIOB_OER |= PIO_PER_P13; //enable output on pin PB13
  4028f4:	4a38      	ldr	r2, [pc, #224]	; (4029d8 <SPI_dac_init+0xf0>)
  4028f6:	6813      	ldr	r3, [r2, #0]
  4028f8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  4028fc:	6013      	str	r3, [r2, #0]
	REG_PIOB_SODR |=  PIO_PER_P13;
  4028fe:	4b37      	ldr	r3, [pc, #220]	; (4029dc <SPI_dac_init+0xf4>)
  402900:	6818      	ldr	r0, [r3, #0]
  402902:	f440 5000 	orr.w	r0, r0, #8192	; 0x2000
  402906:	6018      	str	r0, [r3, #0]

	REG_PIOB_PER |= PIO_PER_P14; //enable PIO controller on PB14
  402908:	6808      	ldr	r0, [r1, #0]
  40290a:	f440 4080 	orr.w	r0, r0, #16384	; 0x4000
  40290e:	6008      	str	r0, [r1, #0]
	REG_PIOB_OER |= PIO_PER_P14; //enable output on pin PB14
  402910:	6810      	ldr	r0, [r2, #0]
  402912:	f440 4080 	orr.w	r0, r0, #16384	; 0x4000
  402916:	6010      	str	r0, [r2, #0]
	REG_PIOB_SODR |=  PIO_PER_P14;
  402918:	6818      	ldr	r0, [r3, #0]
  40291a:	f440 4080 	orr.w	r0, r0, #16384	; 0x4000
  40291e:	6018      	str	r0, [r3, #0]

	//Outputs for the Gates
	REG_PIOB_PER |= PIO_PER_P0; //enable PIO controller on PB13
  402920:	6808      	ldr	r0, [r1, #0]
  402922:	f040 0001 	orr.w	r0, r0, #1
  402926:	6008      	str	r0, [r1, #0]
	REG_PIOB_OER |= PIO_PER_P0; //enable output on pin PB13
  402928:	6810      	ldr	r0, [r2, #0]
  40292a:	f040 0001 	orr.w	r0, r0, #1
  40292e:	6010      	str	r0, [r2, #0]
	REG_PIOB_SODR |=  PIO_PER_P0;
  402930:	6818      	ldr	r0, [r3, #0]
  402932:	f040 0001 	orr.w	r0, r0, #1
  402936:	6018      	str	r0, [r3, #0]

	REG_PIOB_PER |= PIO_PER_P1; //enable PIO controller on PB13
  402938:	6808      	ldr	r0, [r1, #0]
  40293a:	f040 0002 	orr.w	r0, r0, #2
  40293e:	6008      	str	r0, [r1, #0]
	REG_PIOB_OER |= PIO_PER_P1; //enable output on pin PB13
  402940:	6810      	ldr	r0, [r2, #0]
  402942:	f040 0002 	orr.w	r0, r0, #2
  402946:	6010      	str	r0, [r2, #0]
	REG_PIOB_SODR |=  PIO_PER_P1;
  402948:	6818      	ldr	r0, [r3, #0]
  40294a:	f040 0002 	orr.w	r0, r0, #2
  40294e:	6018      	str	r0, [r3, #0]

	REG_PIOB_PER |= PIO_PER_P2; //enable PIO controller on PB13
  402950:	6808      	ldr	r0, [r1, #0]
  402952:	f040 0004 	orr.w	r0, r0, #4
  402956:	6008      	str	r0, [r1, #0]
	REG_PIOB_OER |= PIO_PER_P2; //enable output on pin PB13
  402958:	6810      	ldr	r0, [r2, #0]
  40295a:	f040 0004 	orr.w	r0, r0, #4
  40295e:	6010      	str	r0, [r2, #0]
	REG_PIOB_SODR |=  PIO_PER_P2;
  402960:	6818      	ldr	r0, [r3, #0]
  402962:	f040 0004 	orr.w	r0, r0, #4
  402966:	6018      	str	r0, [r3, #0]

	REG_PIOB_PER |= PIO_PER_P3; //enable PIO controller on PB13
  402968:	6808      	ldr	r0, [r1, #0]
  40296a:	f040 0008 	orr.w	r0, r0, #8
  40296e:	6008      	str	r0, [r1, #0]
	REG_PIOB_OER |= PIO_PER_P3; //enable output on pin PB13
  402970:	6811      	ldr	r1, [r2, #0]
  402972:	f041 0108 	orr.w	r1, r1, #8
  402976:	6011      	str	r1, [r2, #0]
	REG_PIOB_SODR |=  PIO_PER_P3;
  402978:	681a      	ldr	r2, [r3, #0]
  40297a:	f042 0208 	orr.w	r2, r2, #8
  40297e:	601a      	str	r2, [r3, #0]

	//enable peripheral clock
	REG_PMC_PCER0 |= PMC_PCER0_PID21;
  402980:	4a17      	ldr	r2, [pc, #92]	; (4029e0 <SPI_dac_init+0xf8>)
  402982:	6813      	ldr	r3, [r2, #0]
  402984:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
  402988:	6013      	str	r3, [r2, #0]

	//set spi master mode
	REG_SPI_MR |= SPI_MR_MSTR;
  40298a:	4b16      	ldr	r3, [pc, #88]	; (4029e4 <SPI_dac_init+0xfc>)
  40298c:	681a      	ldr	r2, [r3, #0]
  40298e:	f042 0201 	orr.w	r2, r2, #1
  402992:	601a      	str	r2, [r3, #0]

	//set fixed peripheral select(peripheral chosen in SP_MR.PCS instead of SPI_THR.PCS)
	REG_SPI_MR &= ~SPI_MR_PS;
  402994:	681a      	ldr	r2, [r3, #0]
  402996:	f022 0202 	bic.w	r2, r2, #2
  40299a:	601a      	str	r2, [r3, #0]
	//REG_SPI_MR |= SPI_MR_PCS(0b1101);

	//set polarity and clock phase to rising edge sample, falling edge shift
	SPI_modeSelect(0);
  40299c:	2000      	movs	r0, #0
  40299e:	4b12      	ldr	r3, [pc, #72]	; (4029e8 <SPI_dac_init+0x100>)
  4029a0:	4798      	blx	r3

	//set clock generator (1 = peripheral clock rate), otherwise a divisor
	//SCBR = fperipheral clock / SPCK Bit Rate
	REG_SPI_CSR |= SPI_CSR_SCBR(20);
  4029a2:	4a12      	ldr	r2, [pc, #72]	; (4029ec <SPI_dac_init+0x104>)
  4029a4:	6813      	ldr	r3, [r2, #0]
  4029a6:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
  4029aa:	6013      	str	r3, [r2, #0]

	//chip select remains low after transfer
	//REG_SPI_CSR |= SPI_CSR_CSNAAT;

	//give peripheral control of pins
	REG_PIOA_PDR |= PIO_PDR_P11; //NPCS1
  4029ac:	4b10      	ldr	r3, [pc, #64]	; (4029f0 <SPI_dac_init+0x108>)
  4029ae:	681a      	ldr	r2, [r3, #0]
  4029b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
  4029b4:	601a      	str	r2, [r3, #0]
	REG_PIOA_PDR |= PIO_PDR_P13; //MOSI
  4029b6:	681a      	ldr	r2, [r3, #0]
  4029b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  4029bc:	601a      	str	r2, [r3, #0]
	REG_PIOA_PDR |= PIO_PDR_P14; //SSCK
  4029be:	681a      	ldr	r2, [r3, #0]
  4029c0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
  4029c4:	601a      	str	r2, [r3, #0]

	//enable SPI
	REG_SPI_CR |= SPI_CR_SPIEN;
  4029c6:	4a0b      	ldr	r2, [pc, #44]	; (4029f4 <SPI_dac_init+0x10c>)
  4029c8:	6813      	ldr	r3, [r2, #0]
  4029ca:	f043 0301 	orr.w	r3, r3, #1
  4029ce:	6013      	str	r3, [r2, #0]
  4029d0:	bd08      	pop	{r3, pc}
  4029d2:	bf00      	nop
  4029d4:	400e1000 	.word	0x400e1000
  4029d8:	400e1010 	.word	0x400e1010
  4029dc:	400e1030 	.word	0x400e1030
  4029e0:	400e0410 	.word	0x400e0410
  4029e4:	40008004 	.word	0x40008004
  4029e8:	00402819 	.word	0x00402819
  4029ec:	40008030 	.word	0x40008030
  4029f0:	400e0e04 	.word	0x400e0e04
  4029f4:	40008000 	.word	0x40008000

004029f8 <SPI_byteSend>:

}

void SPI_byteSend(uint8_t data){
	//wait for transmit register to be empty
	while (!(REG_SPI_SR & SPI_SR_TDRE));
  4029f8:	4a04      	ldr	r2, [pc, #16]	; (402a0c <SPI_byteSend+0x14>)
  4029fa:	6813      	ldr	r3, [r2, #0]
  4029fc:	f013 0f02 	tst.w	r3, #2
  402a00:	d0fb      	beq.n	4029fa <SPI_byteSend+0x2>
	//send data to transmit register
	REG_SPI_TDR |= (data);
  402a02:	4a03      	ldr	r2, [pc, #12]	; (402a10 <SPI_byteSend+0x18>)
  402a04:	6813      	ldr	r3, [r2, #0]
  402a06:	4318      	orrs	r0, r3
  402a08:	6010      	str	r0, [r2, #0]
  402a0a:	4770      	bx	lr
  402a0c:	40008010 	.word	0x40008010
  402a10:	4000800c 	.word	0x4000800c

00402a14 <notes_get>:


float notes_get(uint8_t curr_step, uint8_t channel){
	int lookup_index;

	if (channel == CHANNEL_1){
  402a14:	b959      	cbnz	r1, 402a2e <notes_get+0x1a>
		lookup_index = patterns[curr_pattern_ch[0]][curr_page_ch[0]][curr_step][0];
  402a16:	4b1c      	ldr	r3, [pc, #112]	; (402a88 <notes_get+0x74>)
  402a18:	781a      	ldrb	r2, [r3, #0]
  402a1a:	4b1c      	ldr	r3, [pc, #112]	; (402a8c <notes_get+0x78>)
  402a1c:	781b      	ldrb	r3, [r3, #0]
  402a1e:	eb03 1302 	add.w	r3, r3, r2, lsl #4
  402a22:	eb00 1003 	add.w	r0, r0, r3, lsl #4
  402a26:	4b1a      	ldr	r3, [pc, #104]	; (402a90 <notes_get+0x7c>)
  402a28:	f853 2030 	ldr.w	r2, [r3, r0, lsl #3]
  402a2c:	e028      	b.n	402a80 <notes_get+0x6c>
	}
	else if (channel == CHANNEL_2){
  402a2e:	2901      	cmp	r1, #1
  402a30:	d10b      	bne.n	402a4a <notes_get+0x36>
		lookup_index = patterns[curr_pattern_ch[1]][curr_page_ch[1]][curr_step][0];
  402a32:	4b15      	ldr	r3, [pc, #84]	; (402a88 <notes_get+0x74>)
  402a34:	785a      	ldrb	r2, [r3, #1]
  402a36:	4b15      	ldr	r3, [pc, #84]	; (402a8c <notes_get+0x78>)
  402a38:	785b      	ldrb	r3, [r3, #1]
  402a3a:	eb03 1302 	add.w	r3, r3, r2, lsl #4
  402a3e:	eb00 1003 	add.w	r0, r0, r3, lsl #4
  402a42:	4b13      	ldr	r3, [pc, #76]	; (402a90 <notes_get+0x7c>)
  402a44:	f853 2030 	ldr.w	r2, [r3, r0, lsl #3]
  402a48:	e01a      	b.n	402a80 <notes_get+0x6c>
	}
	else if (channel == CHANNEL_3){
  402a4a:	2902      	cmp	r1, #2
  402a4c:	d10b      	bne.n	402a66 <notes_get+0x52>
		lookup_index = patterns[curr_pattern_ch[2]][curr_page_ch[2]][curr_step][0];
  402a4e:	4b0e      	ldr	r3, [pc, #56]	; (402a88 <notes_get+0x74>)
  402a50:	789a      	ldrb	r2, [r3, #2]
  402a52:	4b0e      	ldr	r3, [pc, #56]	; (402a8c <notes_get+0x78>)
  402a54:	789b      	ldrb	r3, [r3, #2]
  402a56:	eb03 1302 	add.w	r3, r3, r2, lsl #4
  402a5a:	eb00 1003 	add.w	r0, r0, r3, lsl #4
  402a5e:	4b0c      	ldr	r3, [pc, #48]	; (402a90 <notes_get+0x7c>)
  402a60:	f853 2030 	ldr.w	r2, [r3, r0, lsl #3]
  402a64:	e00c      	b.n	402a80 <notes_get+0x6c>
	}
	else if (channel == CHANNEL_4){
  402a66:	2903      	cmp	r1, #3
  402a68:	d10a      	bne.n	402a80 <notes_get+0x6c>
		lookup_index = patterns[curr_pattern_ch[3]][curr_page_ch[3]][curr_step][0];
  402a6a:	4b07      	ldr	r3, [pc, #28]	; (402a88 <notes_get+0x74>)
  402a6c:	78da      	ldrb	r2, [r3, #3]
  402a6e:	4b07      	ldr	r3, [pc, #28]	; (402a8c <notes_get+0x78>)
  402a70:	78db      	ldrb	r3, [r3, #3]
  402a72:	eb03 1302 	add.w	r3, r3, r2, lsl #4
  402a76:	eb00 1003 	add.w	r0, r0, r3, lsl #4
  402a7a:	4b05      	ldr	r3, [pc, #20]	; (402a90 <notes_get+0x7c>)
  402a7c:	f853 2030 	ldr.w	r2, [r3, r0, lsl #3]
	}
	
	return notes_lookup[lookup_index];
}
  402a80:	4b04      	ldr	r3, [pc, #16]	; (402a94 <notes_get+0x80>)
  402a82:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
  402a86:	4770      	bx	lr
  402a88:	20008714 	.word	0x20008714
  402a8c:	2000870c 	.word	0x2000870c
  402a90:	200006f4 	.word	0x200006f4
  402a94:	20000010 	.word	0x20000010

00402a98 <notes_status_get>:

int notes_status_get(uint8_t curr_step, uint8_t channel){

	if (channel == CHANNEL_1){
  402a98:	b961      	cbnz	r1, 402ab4 <notes_status_get+0x1c>
		return patterns[curr_pattern_ch[0]][curr_page_ch[0]][curr_step][1];
  402a9a:	4b23      	ldr	r3, [pc, #140]	; (402b28 <notes_status_get+0x90>)
  402a9c:	781a      	ldrb	r2, [r3, #0]
  402a9e:	4b23      	ldr	r3, [pc, #140]	; (402b2c <notes_status_get+0x94>)
  402aa0:	781b      	ldrb	r3, [r3, #0]
  402aa2:	eb03 1302 	add.w	r3, r3, r2, lsl #4
  402aa6:	eb00 1003 	add.w	r0, r0, r3, lsl #4
  402aaa:	4b21      	ldr	r3, [pc, #132]	; (402b30 <notes_status_get+0x98>)
  402aac:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
  402ab0:	6840      	ldr	r0, [r0, #4]
  402ab2:	4770      	bx	lr
	}
	else if (channel == CHANNEL_2){
  402ab4:	2901      	cmp	r1, #1
  402ab6:	d10c      	bne.n	402ad2 <notes_status_get+0x3a>
		return patterns[curr_pattern_ch[1]][curr_page_ch[1]][curr_step][1];
  402ab8:	4b1b      	ldr	r3, [pc, #108]	; (402b28 <notes_status_get+0x90>)
  402aba:	785a      	ldrb	r2, [r3, #1]
  402abc:	4b1b      	ldr	r3, [pc, #108]	; (402b2c <notes_status_get+0x94>)
  402abe:	785b      	ldrb	r3, [r3, #1]
  402ac0:	eb03 1302 	add.w	r3, r3, r2, lsl #4
  402ac4:	eb00 1003 	add.w	r0, r0, r3, lsl #4
  402ac8:	4b19      	ldr	r3, [pc, #100]	; (402b30 <notes_status_get+0x98>)
  402aca:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
  402ace:	6840      	ldr	r0, [r0, #4]
  402ad0:	4770      	bx	lr
	}
	else if (channel == CHANNEL_3){
  402ad2:	2902      	cmp	r1, #2
  402ad4:	d10c      	bne.n	402af0 <notes_status_get+0x58>
		return patterns[curr_pattern_ch[2]][curr_page_ch[2]][curr_step][1];
  402ad6:	4b14      	ldr	r3, [pc, #80]	; (402b28 <notes_status_get+0x90>)
  402ad8:	789a      	ldrb	r2, [r3, #2]
  402ada:	4b14      	ldr	r3, [pc, #80]	; (402b2c <notes_status_get+0x94>)
  402adc:	789b      	ldrb	r3, [r3, #2]
  402ade:	eb03 1302 	add.w	r3, r3, r2, lsl #4
  402ae2:	eb00 1003 	add.w	r0, r0, r3, lsl #4
  402ae6:	4b12      	ldr	r3, [pc, #72]	; (402b30 <notes_status_get+0x98>)
  402ae8:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
  402aec:	6840      	ldr	r0, [r0, #4]
  402aee:	4770      	bx	lr
	}
	else if (channel == CHANNEL_4){
  402af0:	2903      	cmp	r1, #3
  402af2:	d10c      	bne.n	402b0e <notes_status_get+0x76>
		return patterns[curr_pattern_ch[3]][curr_page_ch[3]][curr_step][1];
  402af4:	4b0c      	ldr	r3, [pc, #48]	; (402b28 <notes_status_get+0x90>)
  402af6:	78da      	ldrb	r2, [r3, #3]
  402af8:	4b0c      	ldr	r3, [pc, #48]	; (402b2c <notes_status_get+0x94>)
  402afa:	78db      	ldrb	r3, [r3, #3]
  402afc:	eb03 1302 	add.w	r3, r3, r2, lsl #4
  402b00:	eb00 1003 	add.w	r0, r0, r3, lsl #4
  402b04:	4b0a      	ldr	r3, [pc, #40]	; (402b30 <notes_status_get+0x98>)
  402b06:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
  402b0a:	6840      	ldr	r0, [r0, #4]
  402b0c:	4770      	bx	lr
	}

	//default
	return patterns[curr_pattern_ch[0]][curr_page_ch[0]][curr_step][1];
  402b0e:	4b06      	ldr	r3, [pc, #24]	; (402b28 <notes_status_get+0x90>)
  402b10:	781a      	ldrb	r2, [r3, #0]
  402b12:	4b06      	ldr	r3, [pc, #24]	; (402b2c <notes_status_get+0x94>)
  402b14:	781b      	ldrb	r3, [r3, #0]
  402b16:	eb03 1302 	add.w	r3, r3, r2, lsl #4
  402b1a:	eb00 1003 	add.w	r0, r0, r3, lsl #4
  402b1e:	4b04      	ldr	r3, [pc, #16]	; (402b30 <notes_status_get+0x98>)
  402b20:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
  402b24:	6840      	ldr	r0, [r0, #4]
}
  402b26:	4770      	bx	lr
  402b28:	20008714 	.word	0x20008714
  402b2c:	2000870c 	.word	0x2000870c
  402b30:	200006f4 	.word	0x200006f4

00402b34 <notes_display_get>:

int notes_display_get(uint8_t display_page, uint8_t step){
	return patterns[curr_pattern][display_page][step][1];
  402b34:	4b05      	ldr	r3, [pc, #20]	; (402b4c <notes_display_get+0x18>)
  402b36:	781b      	ldrb	r3, [r3, #0]
  402b38:	eb00 1003 	add.w	r0, r0, r3, lsl #4
  402b3c:	eb01 1000 	add.w	r0, r1, r0, lsl #4
  402b40:	4903      	ldr	r1, [pc, #12]	; (402b50 <notes_display_get+0x1c>)
  402b42:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
}
  402b46:	6840      	ldr	r0, [r0, #4]
  402b48:	4770      	bx	lr
  402b4a:	bf00      	nop
  402b4c:	20008700 	.word	0x20008700
  402b50:	200006f4 	.word	0x200006f4

00402b54 <notes_status_set>:

void notes_status_set(uint8_t display_page, int leds_status[]){

	/* match notes status to current display page status */
	for (int i = 0; i < 16; i++){
		patterns[curr_pattern][display_page][i][1] = leds_status[i];
  402b54:	4b07      	ldr	r3, [pc, #28]	; (402b74 <notes_status_set+0x20>)
  402b56:	781b      	ldrb	r3, [r3, #0]
  402b58:	1f0a      	subs	r2, r1, #4
  402b5a:	eb00 1003 	add.w	r0, r0, r3, lsl #4
  402b5e:	4b06      	ldr	r3, [pc, #24]	; (402b78 <notes_status_set+0x24>)
  402b60:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
  402b64:	313c      	adds	r1, #60	; 0x3c
  402b66:	f852 3f04 	ldr.w	r3, [r2, #4]!
  402b6a:	6043      	str	r3, [r0, #4]
  402b6c:	3008      	adds	r0, #8
}

void notes_status_set(uint8_t display_page, int leds_status[]){

	/* match notes status to current display page status */
	for (int i = 0; i < 16; i++){
  402b6e:	428a      	cmp	r2, r1
  402b70:	d1f9      	bne.n	402b66 <notes_status_set+0x12>
		patterns[curr_pattern][display_page][i][1] = leds_status[i];
	}

}
  402b72:	4770      	bx	lr
  402b74:	20008700 	.word	0x20008700
  402b78:	200006f4 	.word	0x200006f4

00402b7c <notes_inc>:


void notes_inc(uint8_t step){
  402b7c:	b430      	push	{r4, r5}
// 	if (patterns[curr_pattern][display_page][step][0] < 120){
// 		patterns[curr_pattern][display_page][step][0]++;
// 	}

	patterns[curr_pattern][display_page][0][0] = 60; //C5
  402b7e:	4b2f      	ldr	r3, [pc, #188]	; (402c3c <notes_inc+0xc0>)
  402b80:	781a      	ldrb	r2, [r3, #0]
  402b82:	4b2f      	ldr	r3, [pc, #188]	; (402c40 <notes_inc+0xc4>)
  402b84:	781b      	ldrb	r3, [r3, #0]
  402b86:	4d2f      	ldr	r5, [pc, #188]	; (402c44 <notes_inc+0xc8>)
  402b88:	eb03 1202 	add.w	r2, r3, r2, lsl #4
  402b8c:	01d2      	lsls	r2, r2, #7
  402b8e:	18ab      	adds	r3, r5, r2
  402b90:	213c      	movs	r1, #60	; 0x3c
  402b92:	50a9      	str	r1, [r5, r2]
	patterns[curr_pattern][display_page][1][0] = 60; //C5
  402b94:	6099      	str	r1, [r3, #8]
	patterns[curr_pattern][display_page][2][0] = 62; //D5
  402b96:	223e      	movs	r2, #62	; 0x3e
  402b98:	611a      	str	r2, [r3, #16]
	patterns[curr_pattern][display_page][3][0] = 64; //E5
  402b9a:	2240      	movs	r2, #64	; 0x40
  402b9c:	619a      	str	r2, [r3, #24]
	patterns[curr_pattern][display_page][4][0] = 67; //G5
  402b9e:	2043      	movs	r0, #67	; 0x43
  402ba0:	6218      	str	r0, [r3, #32]
	patterns[curr_pattern][display_page][5][0] = 67; //G5
  402ba2:	6298      	str	r0, [r3, #40]	; 0x28
	patterns[curr_pattern][display_page][6][0] = 67; //G5
  402ba4:	6318      	str	r0, [r3, #48]	; 0x30
	patterns[curr_pattern][display_page][7][0] = 64; //E5
  402ba6:	639a      	str	r2, [r3, #56]	; 0x38

	patterns[curr_pattern][display_page][8][0] = 64; //F5
  402ba8:	641a      	str	r2, [r3, #64]	; 0x40
	patterns[curr_pattern][display_page][9][0] = 64; //E5
  402baa:	649a      	str	r2, [r3, #72]	; 0x48
	patterns[curr_pattern][display_page][10][0] = 60; //C5
  402bac:	6519      	str	r1, [r3, #80]	; 0x50
	patterns[curr_pattern][display_page][11][0] = 55; //G4
  402bae:	2237      	movs	r2, #55	; 0x37
  402bb0:	659a      	str	r2, [r3, #88]	; 0x58
	patterns[curr_pattern][display_page][12][0] = 55; //G4
  402bb2:	661a      	str	r2, [r3, #96]	; 0x60
	patterns[curr_pattern][display_page][13][0] = 55; //G4
  402bb4:	669a      	str	r2, [r3, #104]	; 0x68
	patterns[curr_pattern][display_page][14][0] = 57; //A4
  402bb6:	2239      	movs	r2, #57	; 0x39
  402bb8:	671a      	str	r2, [r3, #112]	; 0x70
	patterns[curr_pattern][display_page][15][0] = 59; //B4
  402bba:	223b      	movs	r2, #59	; 0x3b
  402bbc:	679a      	str	r2, [r3, #120]	; 0x78

	patterns[curr_pattern][display_page][0][1] = 1;
  402bbe:	2201      	movs	r2, #1
  402bc0:	605a      	str	r2, [r3, #4]
	patterns[curr_pattern][display_page][1][1] = 1;
  402bc2:	60da      	str	r2, [r3, #12]
	patterns[curr_pattern][display_page][2][1] = 1;
  402bc4:	615a      	str	r2, [r3, #20]
	patterns[curr_pattern][display_page][3][1] = 1;
  402bc6:	61da      	str	r2, [r3, #28]
	patterns[curr_pattern][display_page][4][1] = 0;
  402bc8:	2100      	movs	r1, #0
  402bca:	6259      	str	r1, [r3, #36]	; 0x24
	patterns[curr_pattern][display_page][5][1] = 1;
  402bcc:	62da      	str	r2, [r3, #44]	; 0x2c
	patterns[curr_pattern][display_page][6][1] = 0;
  402bce:	6359      	str	r1, [r3, #52]	; 0x34
	patterns[curr_pattern][display_page][7][1] = 1;
  402bd0:	63da      	str	r2, [r3, #60]	; 0x3c

	patterns[curr_pattern][display_page][8][1] = 1;
  402bd2:	645a      	str	r2, [r3, #68]	; 0x44
	patterns[curr_pattern][display_page][9][1] = 1;
  402bd4:	64da      	str	r2, [r3, #76]	; 0x4c
	patterns[curr_pattern][display_page][10][1] = 1;
  402bd6:	655a      	str	r2, [r3, #84]	; 0x54
	patterns[curr_pattern][display_page][11][1] = 1;
  402bd8:	65da      	str	r2, [r3, #92]	; 0x5c
	patterns[curr_pattern][display_page][12][1] = 0;
  402bda:	6659      	str	r1, [r3, #100]	; 0x64
	patterns[curr_pattern][display_page][13][1] = 1;
  402bdc:	66da      	str	r2, [r3, #108]	; 0x6c
	patterns[curr_pattern][display_page][14][1] = 1;
  402bde:	675a      	str	r2, [r3, #116]	; 0x74
	patterns[curr_pattern][display_page][15][1] = 1;
  402be0:	67da      	str	r2, [r3, #124]	; 0x7c

	patterns[curr_pattern_ch[1]][curr_page_ch[1]][0][0] = 28; //E2
  402be2:	4b19      	ldr	r3, [pc, #100]	; (402c48 <notes_inc+0xcc>)
  402be4:	785c      	ldrb	r4, [r3, #1]
  402be6:	4b19      	ldr	r3, [pc, #100]	; (402c4c <notes_inc+0xd0>)
  402be8:	785b      	ldrb	r3, [r3, #1]
  402bea:	eb03 1404 	add.w	r4, r3, r4, lsl #4
  402bee:	01e4      	lsls	r4, r4, #7
  402bf0:	192b      	adds	r3, r5, r4
  402bf2:	201c      	movs	r0, #28
  402bf4:	5128      	str	r0, [r5, r4]
	patterns[curr_pattern_ch[1]][curr_page_ch[1]][1][0] = 28; //E2
  402bf6:	6098      	str	r0, [r3, #8]
	patterns[curr_pattern_ch[1]][curr_page_ch[1]][2][0] = 28; //E2
  402bf8:	6118      	str	r0, [r3, #16]
	patterns[curr_pattern_ch[1]][curr_page_ch[1]][3][0] = 0; //REST
  402bfa:	6199      	str	r1, [r3, #24]
	patterns[curr_pattern_ch[1]][curr_page_ch[1]][4][0] = 28; //E2
  402bfc:	6218      	str	r0, [r3, #32]
	patterns[curr_pattern_ch[1]][curr_page_ch[1]][5][0] = 28; //E2
  402bfe:	6298      	str	r0, [r3, #40]	; 0x28
	patterns[curr_pattern_ch[1]][curr_page_ch[1]][6][0] = 28; //E2
  402c00:	6318      	str	r0, [r3, #48]	; 0x30
	patterns[curr_pattern_ch[1]][curr_page_ch[1]][7][0] = 0; //REST
  402c02:	6399      	str	r1, [r3, #56]	; 0x38

	patterns[curr_pattern_ch[1]][curr_page_ch[1]][8][0] = 25; //C2_SH
  402c04:	2419      	movs	r4, #25
  402c06:	641c      	str	r4, [r3, #64]	; 0x40
	patterns[curr_pattern_ch[1]][curr_page_ch[1]][9][0] = 0; //REST
  402c08:	6499      	str	r1, [r3, #72]	; 0x48
	patterns[curr_pattern_ch[1]][curr_page_ch[1]][10][0] = 0; //REST
  402c0a:	6519      	str	r1, [r3, #80]	; 0x50
	patterns[curr_pattern_ch[1]][curr_page_ch[1]][11][0] = 25; //C2_SH
  402c0c:	659c      	str	r4, [r3, #88]	; 0x58
	patterns[curr_pattern_ch[1]][curr_page_ch[1]][12][0] = 25; //C2_SH
  402c0e:	661c      	str	r4, [r3, #96]	; 0x60
	patterns[curr_pattern_ch[1]][curr_page_ch[1]][13][0] = 28; //E2
  402c10:	6698      	str	r0, [r3, #104]	; 0x68
	patterns[curr_pattern_ch[1]][curr_page_ch[1]][14][0] = 0; //REST
  402c12:	6719      	str	r1, [r3, #112]	; 0x70
	patterns[curr_pattern_ch[1]][curr_page_ch[1]][15][0] = 28; //E2
  402c14:	6798      	str	r0, [r3, #120]	; 0x78


	patterns[curr_pattern_ch[1]][curr_page_ch[1]][0][1] = 1;
  402c16:	605a      	str	r2, [r3, #4]
	patterns[curr_pattern_ch[1]][curr_page_ch[1]][1][1] = 1;
  402c18:	60da      	str	r2, [r3, #12]
	patterns[curr_pattern_ch[1]][curr_page_ch[1]][2][1] = 1;
  402c1a:	615a      	str	r2, [r3, #20]
	patterns[curr_pattern_ch[1]][curr_page_ch[1]][3][1] = 0;
  402c1c:	61d9      	str	r1, [r3, #28]
	patterns[curr_pattern_ch[1]][curr_page_ch[1]][4][1] = 1;
  402c1e:	625a      	str	r2, [r3, #36]	; 0x24
	patterns[curr_pattern_ch[1]][curr_page_ch[1]][5][1] = 1;
  402c20:	62da      	str	r2, [r3, #44]	; 0x2c
	patterns[curr_pattern_ch[1]][curr_page_ch[1]][6][1] = 1;
  402c22:	635a      	str	r2, [r3, #52]	; 0x34
	patterns[curr_pattern_ch[1]][curr_page_ch[1]][7][1] = 0;
  402c24:	63d9      	str	r1, [r3, #60]	; 0x3c

	patterns[curr_pattern_ch[1]][curr_page_ch[1]][8][1] = 1;
  402c26:	645a      	str	r2, [r3, #68]	; 0x44
	patterns[curr_pattern_ch[1]][curr_page_ch[1]][9][1] = 0;
  402c28:	64d9      	str	r1, [r3, #76]	; 0x4c
	patterns[curr_pattern_ch[1]][curr_page_ch[1]][10][1] = 0;
  402c2a:	6559      	str	r1, [r3, #84]	; 0x54
	patterns[curr_pattern_ch[1]][curr_page_ch[1]][11][1] = 1;
  402c2c:	65da      	str	r2, [r3, #92]	; 0x5c
	patterns[curr_pattern_ch[1]][curr_page_ch[1]][12][1] = 1;
  402c2e:	665a      	str	r2, [r3, #100]	; 0x64
	patterns[curr_pattern_ch[1]][curr_page_ch[1]][13][1] = 1;
  402c30:	66da      	str	r2, [r3, #108]	; 0x6c
	patterns[curr_pattern_ch[1]][curr_page_ch[1]][14][1] = 0;
  402c32:	6759      	str	r1, [r3, #116]	; 0x74
	patterns[curr_pattern_ch[1]][curr_page_ch[1]][15][1] = 1;
  402c34:	67da      	str	r2, [r3, #124]	; 0x7c
}
  402c36:	bc30      	pop	{r4, r5}
  402c38:	4770      	bx	lr
  402c3a:	bf00      	nop
  402c3c:	20008700 	.word	0x20008700
  402c40:	2000871c 	.word	0x2000871c
  402c44:	200006f4 	.word	0x200006f4
  402c48:	20008714 	.word	0x20008714
  402c4c:	2000870c 	.word	0x2000870c

00402c50 <notes_dec>:

void notes_dec(uint8_t step){
  402c50:	b430      	push	{r4, r5}
	if (patterns[curr_pattern][display_page][step][0] > 0){
  402c52:	4b37      	ldr	r3, [pc, #220]	; (402d30 <notes_dec+0xe0>)
  402c54:	781a      	ldrb	r2, [r3, #0]
  402c56:	4b37      	ldr	r3, [pc, #220]	; (402d34 <notes_dec+0xe4>)
  402c58:	781b      	ldrb	r3, [r3, #0]
  402c5a:	eb03 1102 	add.w	r1, r3, r2, lsl #4
  402c5e:	eb00 1101 	add.w	r1, r0, r1, lsl #4
  402c62:	4c35      	ldr	r4, [pc, #212]	; (402d38 <notes_dec+0xe8>)
  402c64:	f854 1031 	ldr.w	r1, [r4, r1, lsl #3]
  402c68:	2900      	cmp	r1, #0
  402c6a:	dd07      	ble.n	402c7c <notes_dec+0x2c>
		patterns[curr_pattern][display_page][step][0]--;
  402c6c:	eb03 1402 	add.w	r4, r3, r2, lsl #4
  402c70:	eb00 1004 	add.w	r0, r0, r4, lsl #4
  402c74:	3901      	subs	r1, #1
  402c76:	4c30      	ldr	r4, [pc, #192]	; (402d38 <notes_dec+0xe8>)
  402c78:	f844 1030 	str.w	r1, [r4, r0, lsl #3]
	}

	patterns[curr_pattern][display_page][0][0] = 60; //C5
  402c7c:	4d2e      	ldr	r5, [pc, #184]	; (402d38 <notes_dec+0xe8>)
  402c7e:	eb03 1302 	add.w	r3, r3, r2, lsl #4
  402c82:	01da      	lsls	r2, r3, #7
  402c84:	18ab      	adds	r3, r5, r2
  402c86:	213c      	movs	r1, #60	; 0x3c
  402c88:	50a9      	str	r1, [r5, r2]
	patterns[curr_pattern][display_page][1][0] = 60; //C5
  402c8a:	6099      	str	r1, [r3, #8]
	patterns[curr_pattern][display_page][2][0] = 62; //D5
  402c8c:	223e      	movs	r2, #62	; 0x3e
  402c8e:	611a      	str	r2, [r3, #16]
	patterns[curr_pattern][display_page][3][0] = 64; //E5
  402c90:	2240      	movs	r2, #64	; 0x40
  402c92:	619a      	str	r2, [r3, #24]
	patterns[curr_pattern][display_page][4][0] = 67; //G5
  402c94:	2043      	movs	r0, #67	; 0x43
  402c96:	6218      	str	r0, [r3, #32]
	patterns[curr_pattern][display_page][5][0] = 67; //G5
  402c98:	6298      	str	r0, [r3, #40]	; 0x28
	patterns[curr_pattern][display_page][6][0] = 67; //G5
  402c9a:	6318      	str	r0, [r3, #48]	; 0x30
	patterns[curr_pattern][display_page][7][0] = 64; //E5
  402c9c:	639a      	str	r2, [r3, #56]	; 0x38

	patterns[curr_pattern][display_page][8][0] = 64; //F5
  402c9e:	641a      	str	r2, [r3, #64]	; 0x40
	patterns[curr_pattern][display_page][9][0] = 64; //E5
  402ca0:	649a      	str	r2, [r3, #72]	; 0x48
	patterns[curr_pattern][display_page][10][0] = 60; //C5
  402ca2:	6519      	str	r1, [r3, #80]	; 0x50
	patterns[curr_pattern][display_page][11][0] = 55; //G4
  402ca4:	2237      	movs	r2, #55	; 0x37
  402ca6:	659a      	str	r2, [r3, #88]	; 0x58
	patterns[curr_pattern][display_page][12][0] = 55; //G4
  402ca8:	661a      	str	r2, [r3, #96]	; 0x60
	patterns[curr_pattern][display_page][13][0] = 55; //G4
  402caa:	669a      	str	r2, [r3, #104]	; 0x68
	patterns[curr_pattern][display_page][14][0] = 57; //A4
  402cac:	2239      	movs	r2, #57	; 0x39
  402cae:	671a      	str	r2, [r3, #112]	; 0x70
	patterns[curr_pattern][display_page][15][0] = 59; //B4
  402cb0:	223b      	movs	r2, #59	; 0x3b
  402cb2:	679a      	str	r2, [r3, #120]	; 0x78

	patterns[curr_pattern][display_page][0][1] = 1;
  402cb4:	2201      	movs	r2, #1
  402cb6:	605a      	str	r2, [r3, #4]
	patterns[curr_pattern][display_page][1][1] = 1;
  402cb8:	60da      	str	r2, [r3, #12]
	patterns[curr_pattern][display_page][2][1] = 1;
  402cba:	615a      	str	r2, [r3, #20]
	patterns[curr_pattern][display_page][3][1] = 1;
  402cbc:	61da      	str	r2, [r3, #28]
	patterns[curr_pattern][display_page][4][1] = 0;
  402cbe:	2100      	movs	r1, #0
  402cc0:	6259      	str	r1, [r3, #36]	; 0x24
	patterns[curr_pattern][display_page][5][1] = 1;
  402cc2:	62da      	str	r2, [r3, #44]	; 0x2c
	patterns[curr_pattern][display_page][6][1] = 0;
  402cc4:	6359      	str	r1, [r3, #52]	; 0x34
	patterns[curr_pattern][display_page][7][1] = 1;
  402cc6:	63da      	str	r2, [r3, #60]	; 0x3c

	patterns[curr_pattern][display_page][8][1] = 1;
  402cc8:	645a      	str	r2, [r3, #68]	; 0x44
	patterns[curr_pattern][display_page][9][1] = 1;
  402cca:	64da      	str	r2, [r3, #76]	; 0x4c
	patterns[curr_pattern][display_page][10][1] = 1;
  402ccc:	655a      	str	r2, [r3, #84]	; 0x54
	patterns[curr_pattern][display_page][11][1] = 1;
  402cce:	65da      	str	r2, [r3, #92]	; 0x5c
	patterns[curr_pattern][display_page][12][1] = 0;
  402cd0:	6659      	str	r1, [r3, #100]	; 0x64
	patterns[curr_pattern][display_page][13][1] = 1;
  402cd2:	66da      	str	r2, [r3, #108]	; 0x6c
	patterns[curr_pattern][display_page][14][1] = 1;
  402cd4:	675a      	str	r2, [r3, #116]	; 0x74
	patterns[curr_pattern][display_page][15][1] = 1;
  402cd6:	67da      	str	r2, [r3, #124]	; 0x7c

	patterns[curr_pattern_ch[1]][curr_page_ch[1]][0][0] = 28; //E2
  402cd8:	4b18      	ldr	r3, [pc, #96]	; (402d3c <notes_dec+0xec>)
  402cda:	785c      	ldrb	r4, [r3, #1]
  402cdc:	4b18      	ldr	r3, [pc, #96]	; (402d40 <notes_dec+0xf0>)
  402cde:	785b      	ldrb	r3, [r3, #1]
  402ce0:	eb03 1404 	add.w	r4, r3, r4, lsl #4
  402ce4:	01e4      	lsls	r4, r4, #7
  402ce6:	192b      	adds	r3, r5, r4
  402ce8:	201c      	movs	r0, #28
  402cea:	5128      	str	r0, [r5, r4]
	patterns[curr_pattern_ch[1]][curr_page_ch[1]][1][0] = 28; //E2
  402cec:	6098      	str	r0, [r3, #8]
	patterns[curr_pattern_ch[1]][curr_page_ch[1]][2][0] = 28; //E2
  402cee:	6118      	str	r0, [r3, #16]
	patterns[curr_pattern_ch[1]][curr_page_ch[1]][3][0] = 0; //REST
  402cf0:	6199      	str	r1, [r3, #24]
	patterns[curr_pattern_ch[1]][curr_page_ch[1]][4][0] = 28; //E2
  402cf2:	6218      	str	r0, [r3, #32]
	patterns[curr_pattern_ch[1]][curr_page_ch[1]][5][0] = 28; //E2
  402cf4:	6298      	str	r0, [r3, #40]	; 0x28
	patterns[curr_pattern_ch[1]][curr_page_ch[1]][6][0] = 28; //E2
  402cf6:	6318      	str	r0, [r3, #48]	; 0x30
	patterns[curr_pattern_ch[1]][curr_page_ch[1]][7][0] = 0; //REST
  402cf8:	6399      	str	r1, [r3, #56]	; 0x38

	patterns[curr_pattern_ch[1]][curr_page_ch[1]][8][0] = 25; //C2_SH
  402cfa:	2419      	movs	r4, #25
  402cfc:	641c      	str	r4, [r3, #64]	; 0x40
	patterns[curr_pattern_ch[1]][curr_page_ch[1]][9][0] = 0; //REST
  402cfe:	6499      	str	r1, [r3, #72]	; 0x48
	patterns[curr_pattern_ch[1]][curr_page_ch[1]][10][0] = 0; //REST
  402d00:	6519      	str	r1, [r3, #80]	; 0x50
	patterns[curr_pattern_ch[1]][curr_page_ch[1]][11][0] = 25; //C2_SH
  402d02:	659c      	str	r4, [r3, #88]	; 0x58
	patterns[curr_pattern_ch[1]][curr_page_ch[1]][12][0] = 25; //C2_SH
  402d04:	661c      	str	r4, [r3, #96]	; 0x60
	patterns[curr_pattern_ch[1]][curr_page_ch[1]][13][0] = 28; //E2
  402d06:	6698      	str	r0, [r3, #104]	; 0x68
	patterns[curr_pattern_ch[1]][curr_page_ch[1]][14][0] = 0; //REST
  402d08:	6719      	str	r1, [r3, #112]	; 0x70
	patterns[curr_pattern_ch[1]][curr_page_ch[1]][15][0] = 28; //E2
  402d0a:	6798      	str	r0, [r3, #120]	; 0x78


	patterns[curr_pattern_ch[1]][curr_page_ch[1]][0][1] = 1;
  402d0c:	605a      	str	r2, [r3, #4]
	patterns[curr_pattern_ch[1]][curr_page_ch[1]][1][1] = 1;
  402d0e:	60da      	str	r2, [r3, #12]
	patterns[curr_pattern_ch[1]][curr_page_ch[1]][2][1] = 1;
  402d10:	615a      	str	r2, [r3, #20]
	patterns[curr_pattern_ch[1]][curr_page_ch[1]][3][1] = 0;
  402d12:	61d9      	str	r1, [r3, #28]
	patterns[curr_pattern_ch[1]][curr_page_ch[1]][4][1] = 1;
  402d14:	625a      	str	r2, [r3, #36]	; 0x24
	patterns[curr_pattern_ch[1]][curr_page_ch[1]][5][1] = 1;
  402d16:	62da      	str	r2, [r3, #44]	; 0x2c
	patterns[curr_pattern_ch[1]][curr_page_ch[1]][6][1] = 1;
  402d18:	635a      	str	r2, [r3, #52]	; 0x34
	patterns[curr_pattern_ch[1]][curr_page_ch[1]][7][1] = 0;
  402d1a:	63d9      	str	r1, [r3, #60]	; 0x3c

	patterns[curr_pattern_ch[1]][curr_page_ch[1]][8][1] = 1;
  402d1c:	645a      	str	r2, [r3, #68]	; 0x44
	patterns[curr_pattern_ch[1]][curr_page_ch[1]][9][1] = 0;
  402d1e:	64d9      	str	r1, [r3, #76]	; 0x4c
	patterns[curr_pattern_ch[1]][curr_page_ch[1]][10][1] = 0;
  402d20:	6559      	str	r1, [r3, #84]	; 0x54
	patterns[curr_pattern_ch[1]][curr_page_ch[1]][11][1] = 1;
  402d22:	65da      	str	r2, [r3, #92]	; 0x5c
	patterns[curr_pattern_ch[1]][curr_page_ch[1]][12][1] = 1;
  402d24:	665a      	str	r2, [r3, #100]	; 0x64
	patterns[curr_pattern_ch[1]][curr_page_ch[1]][13][1] = 1;
  402d26:	66da      	str	r2, [r3, #108]	; 0x6c
	patterns[curr_pattern_ch[1]][curr_page_ch[1]][14][1] = 0;
  402d28:	6759      	str	r1, [r3, #116]	; 0x74
	patterns[curr_pattern_ch[1]][curr_page_ch[1]][15][1] = 1;
  402d2a:	67da      	str	r2, [r3, #124]	; 0x7c
}
  402d2c:	bc30      	pop	{r4, r5}
  402d2e:	4770      	bx	lr
  402d30:	20008700 	.word	0x20008700
  402d34:	2000871c 	.word	0x2000871c
  402d38:	200006f4 	.word	0x200006f4
  402d3c:	20008714 	.word	0x20008714
  402d40:	2000870c 	.word	0x2000870c

00402d44 <timers_init>:

 uint8_t test = 0;

 void timers_init(void) {

	overflow_count = 0;
  402d44:	2300      	movs	r3, #0
  402d46:	4a2c      	ldr	r2, [pc, #176]	; (402df8 <timers_init+0xb4>)
  402d48:	8013      	strh	r3, [r2, #0]
	display_overflow_count = 0;
  402d4a:	4a2c      	ldr	r2, [pc, #176]	; (402dfc <timers_init+0xb8>)
  402d4c:	8013      	strh	r3, [r2, #0]
	resolution = 2;
  402d4e:	2102      	movs	r1, #2
  402d50:	4a2b      	ldr	r2, [pc, #172]	; (402e00 <timers_init+0xbc>)
  402d52:	6011      	str	r1, [r2, #0]
	display_page = 0;
  402d54:	4a2b      	ldr	r2, [pc, #172]	; (402e04 <timers_init+0xc0>)
  402d56:	7013      	strb	r3, [r2, #0]
	page_loop = 0;
  402d58:	4a2b      	ldr	r2, [pc, #172]	; (402e08 <timers_init+0xc4>)
  402d5a:	7013      	strb	r3, [r2, #0]
	curr_step = 0;
  402d5c:	4a2b      	ldr	r2, [pc, #172]	; (402e0c <timers_init+0xc8>)
  402d5e:	7013      	strb	r3, [r2, #0]
	curr_page = 0;
  402d60:	4a2b      	ldr	r2, [pc, #172]	; (402e10 <timers_init+0xcc>)
  402d62:	7013      	strb	r3, [r2, #0]
	curr_pattern = 0;
  402d64:	4a2b      	ldr	r2, [pc, #172]	; (402e14 <timers_init+0xd0>)
  402d66:	7013      	strb	r3, [r2, #0]

	curr_pattern_ch[0] = 0;
  402d68:	4a2b      	ldr	r2, [pc, #172]	; (402e18 <timers_init+0xd4>)
  402d6a:	7013      	strb	r3, [r2, #0]
	curr_pattern_ch[1] = 1;
  402d6c:	2001      	movs	r0, #1
  402d6e:	7050      	strb	r0, [r2, #1]
	curr_pattern_ch[2] = 2;
  402d70:	7091      	strb	r1, [r2, #2]
	curr_pattern_ch[3] = 3;
  402d72:	2103      	movs	r1, #3
  402d74:	70d1      	strb	r1, [r2, #3]

	curr_page_ch[0] = 0;
  402d76:	4a29      	ldr	r2, [pc, #164]	; (402e1c <timers_init+0xd8>)
  402d78:	7013      	strb	r3, [r2, #0]
	curr_page_ch[1] = 0;
  402d7a:	7053      	strb	r3, [r2, #1]
	curr_page_ch[2] = 0;
  402d7c:	7093      	strb	r3, [r2, #2]
	curr_page_ch[3] = 0;
  402d7e:	70d3      	strb	r3, [r2, #3]

	page_loop_ch[0] = 0;
  402d80:	4a27      	ldr	r2, [pc, #156]	; (402e20 <timers_init+0xdc>)
  402d82:	7013      	strb	r3, [r2, #0]
	page_loop_ch[1] = 0;
  402d84:	7053      	strb	r3, [r2, #1]
	page_loop_ch[2] = 0;
  402d86:	7093      	strb	r3, [r2, #2]
	page_loop_ch[3] = 0;
  402d88:	70d3      	strb	r3, [r2, #3]
  402d8a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  402d8e:	4b25      	ldr	r3, [pc, #148]	; (402e24 <timers_init+0xe0>)
  402d90:	601a      	str	r2, [r3, #0]
	NVIC_EnableIRQ(TC0_IRQn);
	//NVIC_EnableIRQ(TC1_IRQn);

	// Enable peripheral clock for TC0
	// Peripheral ID (PID) for TC0 is 23
	REG_PMC_PCER0 |= PMC_PCER0_PID23;
  402d92:	4b25      	ldr	r3, [pc, #148]	; (402e28 <timers_init+0xe4>)
  402d94:	681a      	ldr	r2, [r3, #0]
  402d96:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
  402d9a:	601a      	str	r2, [r3, #0]
	
	// Enable peripheral clock for TC1
	// Peripheral ID (PID) for TC1 is 24
	REG_PMC_PCER0 |= PMC_PCER0_PID24;
  402d9c:	681a      	ldr	r2, [r3, #0]
  402d9e:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
  402da2:	601a      	str	r2, [r3, #0]
	// TIMER_CLOCK1 = MCK/2
	// TIMER_CLOCK2 = MCK/8
	// TIMER_CLOCK3 = MCK/32
	// TIMER_CLOCK4 = MCK/128
	// TIMER_CLOCK5 = SCLK
	REG_TC0_CMR0 |= TC_CMR_TCCLKS_TIMER_CLOCK2 | TC_CMR_CPCTRG;
  402da4:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
  402da8:	f101 1101 	add.w	r1, r1, #65537	; 0x10001
  402dac:	680a      	ldr	r2, [r1, #0]
  402dae:	f244 0301 	movw	r3, #16385	; 0x4001
  402db2:	431a      	orrs	r2, r3
  402db4:	600a      	str	r2, [r1, #0]
	REG_TC0_CMR1 |= TC_CMR_TCCLKS_TIMER_CLOCK2 | TC_CMR_CPCTRG;
  402db6:	4a1d      	ldr	r2, [pc, #116]	; (402e2c <timers_init+0xe8>)
  402db8:	6811      	ldr	r1, [r2, #0]
  402dba:	430b      	orrs	r3, r1
  402dbc:	6013      	str	r3, [r2, #0]
	// Set interrupt on compare to RC value
	REG_TC0_IER0 |= TC_IER_CPCS;
  402dbe:	3a20      	subs	r2, #32
  402dc0:	6813      	ldr	r3, [r2, #0]
  402dc2:	f043 0310 	orr.w	r3, r3, #16
  402dc6:	6013      	str	r3, [r2, #0]
	REG_TC0_IER1 |= TC_IER_CPCS;
  402dc8:	3240      	adds	r2, #64	; 0x40
  402dca:	6813      	ldr	r3, [r2, #0]
  402dcc:	f043 0310 	orr.w	r3, r3, #16
  402dd0:	6013      	str	r3, [r2, #0]
// 	// 60 BPM = 1 Hz. SCK = 32 KHz. 16,000 counts per half second, 2 interrupts per cycle
// 	REG_TC0_RC0 = 16000;

	// 60 BPM = 1 Hz. MCK/8 = 12.5 MHz. 6.25 mil counts per half second, 2 interrupts per cycle
	// Anticipating 5000 overflows (5000*1250 is 6.25 mil)
	REG_TC0_RC0 = 1250;
  402dd2:	f240 42e2 	movw	r2, #1250	; 0x4e2
  402dd6:	4b16      	ldr	r3, [pc, #88]	; (402e30 <timers_init+0xec>)
  402dd8:	601a      	str	r2, [r3, #0]
	REG_TC0_RC1 = 2500;
  402dda:	f640 12c4 	movw	r2, #2500	; 0x9c4
  402dde:	3340      	adds	r3, #64	; 0x40
  402de0:	601a      	str	r2, [r3, #0]
// 	REG_PIOA_PER |= PIO_PER_P20; //enable PIO controller on PA11
// 	REG_PIOA_OER |= PIO_PER_P20; //enable output on pin PA11
	/*REG_PMC_PCER0 |= PMC_PCER0_PID11; //Enable PMC control for PA11*/

	// TC0 control register enables timer and triggers it to start
	REG_TC0_CCR0 |= TC_CCR_CLKEN | TC_CCR_SWTRG;
  402de2:	4a14      	ldr	r2, [pc, #80]	; (402e34 <timers_init+0xf0>)
  402de4:	6813      	ldr	r3, [r2, #0]
  402de6:	f043 0305 	orr.w	r3, r3, #5
  402dea:	6013      	str	r3, [r2, #0]
	REG_TC0_CCR1 |= TC_CCR_CLKEN | TC_CCR_SWTRG;
  402dec:	3240      	adds	r2, #64	; 0x40
  402dee:	6813      	ldr	r3, [r2, #0]
  402df0:	f043 0305 	orr.w	r3, r3, #5
  402df4:	6013      	str	r3, [r2, #0]
  402df6:	4770      	bx	lr
  402df8:	20008710 	.word	0x20008710
  402dfc:	2000871a 	.word	0x2000871a
  402e00:	20008704 	.word	0x20008704
  402e04:	2000871c 	.word	0x2000871c
  402e08:	20008708 	.word	0x20008708
  402e0c:	20008718 	.word	0x20008718
  402e10:	20008726 	.word	0x20008726
  402e14:	20008700 	.word	0x20008700
  402e18:	20008714 	.word	0x20008714
  402e1c:	2000870c 	.word	0x2000870c
  402e20:	20008720 	.word	0x20008720
  402e24:	e000e100 	.word	0xe000e100
  402e28:	400e0410 	.word	0x400e0410
  402e2c:	40010044 	.word	0x40010044
  402e30:	4001001c 	.word	0x4001001c
  402e34:	40010000 	.word	0x40010000

00402e38 <update_timers>:

 void update_timers(int bpm) {
// 	// (SCK/2) / (bpm/60); SCK*60/2 = 960000
// 	// Offset is needed, possible not with the crystals working
// 	REG_TC0_RC0 = (uint16_t)(960000/bpm - 420);
	if(bpm > 1) {
  402e38:	2801      	cmp	r0, #1
  402e3a:	dd0e      	ble.n	402e5a <update_timers+0x22>
	// TC0 control register enables timer and triggers it to start
	REG_TC0_CCR0 |= TC_CCR_CLKEN | TC_CCR_SWTRG;
	REG_TC0_CCR1 |= TC_CCR_CLKEN | TC_CCR_SWTRG;
 }

 void update_timers(int bpm) {
  402e3c:	b510      	push	{r4, lr}
  402e3e:	4604      	mov	r4, r0
// 	// (SCK/2) / (bpm/60); SCK*60/2 = 960000
// 	// Offset is needed, possible not with the crystals working
// 	REG_TC0_RC0 = (uint16_t)(960000/bpm - 420);
	if(bpm > 1) {
		REG_TC0_RC0 = (uint16_t)(75000/(bpm*res_to_int(resolution)));
  402e40:	4b06      	ldr	r3, [pc, #24]	; (402e5c <update_timers+0x24>)
  402e42:	7818      	ldrb	r0, [r3, #0]
  402e44:	4b06      	ldr	r3, [pc, #24]	; (402e60 <update_timers+0x28>)
  402e46:	4798      	blx	r3
  402e48:	fb04 f000 	mul.w	r0, r4, r0
  402e4c:	4c05      	ldr	r4, [pc, #20]	; (402e64 <update_timers+0x2c>)
  402e4e:	fb94 f0f0 	sdiv	r0, r4, r0
  402e52:	b280      	uxth	r0, r0
  402e54:	4b04      	ldr	r3, [pc, #16]	; (402e68 <update_timers+0x30>)
  402e56:	6018      	str	r0, [r3, #0]
  402e58:	bd10      	pop	{r4, pc}
  402e5a:	4770      	bx	lr
  402e5c:	20008704 	.word	0x20008704
  402e60:	00401fbd 	.word	0x00401fbd
  402e64:	000124f8 	.word	0x000124f8
  402e68:	4001001c 	.word	0x4001001c

00402e6c <TC0_Handler>:
	}

 }

 void TC0_Handler() {
  402e6c:	b570      	push	{r4, r5, r6, lr}
	 // Handling timer = RC

	 // Test code, normally trigger next step, output clock
	 if((REG_TC0_SR0 & TC_SR_CPCS) >= 1) {
  402e6e:	4b53      	ldr	r3, [pc, #332]	; (402fbc <TC0_Handler+0x150>)
  402e70:	681b      	ldr	r3, [r3, #0]
  402e72:	f013 0f10 	tst.w	r3, #16
  402e76:	d010      	beq.n	402e9a <TC0_Handler+0x2e>

		overflow_count += 1;
  402e78:	4a51      	ldr	r2, [pc, #324]	; (402fc0 <TC0_Handler+0x154>)
  402e7a:	8813      	ldrh	r3, [r2, #0]
  402e7c:	3301      	adds	r3, #1
  402e7e:	b29b      	uxth	r3, r3
  402e80:	8013      	strh	r3, [r2, #0]

		//turn off gates for each channel
		if (overflow_count == 2000){ //note_length
  402e82:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
  402e86:	d108      	bne.n	402e9a <TC0_Handler+0x2e>
			DAC_write_gate_off(CHANNEL_1);
  402e88:	2000      	movs	r0, #0
  402e8a:	4c4e      	ldr	r4, [pc, #312]	; (402fc4 <TC0_Handler+0x158>)
  402e8c:	47a0      	blx	r4
			DAC_write_gate_off(CHANNEL_2);
  402e8e:	2001      	movs	r0, #1
  402e90:	47a0      	blx	r4
			DAC_write_gate_off(CHANNEL_3);
  402e92:	2002      	movs	r0, #2
  402e94:	47a0      	blx	r4
			DAC_write_gate_off(CHANNEL_4);
  402e96:	2003      	movs	r0, #3
  402e98:	47a0      	blx	r4
		}
 }

	 if(overflow_count >= 10000) {
  402e9a:	4b49      	ldr	r3, [pc, #292]	; (402fc0 <TC0_Handler+0x154>)
  402e9c:	881a      	ldrh	r2, [r3, #0]
  402e9e:	f242 730f 	movw	r3, #9999	; 0x270f
  402ea2:	429a      	cmp	r2, r3
  402ea4:	d972      	bls.n	402f8c <TC0_Handler+0x120>

		 if (curr_step == 15){
  402ea6:	4b48      	ldr	r3, [pc, #288]	; (402fc8 <TC0_Handler+0x15c>)
  402ea8:	781b      	ldrb	r3, [r3, #0]
  402eaa:	2b0f      	cmp	r3, #15
  402eac:	d121      	bne.n	402ef2 <TC0_Handler+0x86>
			 //increment to next page or go back to first page

			 //update display page
			 if (curr_page < page_loop){
  402eae:	4b47      	ldr	r3, [pc, #284]	; (402fcc <TC0_Handler+0x160>)
  402eb0:	781b      	ldrb	r3, [r3, #0]
  402eb2:	4a47      	ldr	r2, [pc, #284]	; (402fd0 <TC0_Handler+0x164>)
  402eb4:	7812      	ldrb	r2, [r2, #0]
  402eb6:	429a      	cmp	r2, r3
  402eb8:	d903      	bls.n	402ec2 <TC0_Handler+0x56>
				curr_page++;
  402eba:	3301      	adds	r3, #1
  402ebc:	4a43      	ldr	r2, [pc, #268]	; (402fcc <TC0_Handler+0x160>)
  402ebe:	7013      	strb	r3, [r2, #0]
  402ec0:	e002      	b.n	402ec8 <TC0_Handler+0x5c>
			 }
			 else{
				curr_page = 0;
  402ec2:	2200      	movs	r2, #0
  402ec4:	4b41      	ldr	r3, [pc, #260]	; (402fcc <TC0_Handler+0x160>)
  402ec6:	701a      	strb	r2, [r3, #0]
  402ec8:	4b42      	ldr	r3, [pc, #264]	; (402fd4 <TC0_Handler+0x168>)
  402eca:	4943      	ldr	r1, [pc, #268]	; (402fd8 <TC0_Handler+0x16c>)
  402ecc:	1d1c      	adds	r4, r3, #4
			 for (int i = 0; i < 4; i++){
				if (curr_page_ch[i] < page_loop_ch[i]){
					curr_page_ch[i]++;
				}
				else{
					curr_page_ch[i] = 0;
  402ece:	2500      	movs	r5, #0
				curr_page = 0;
			 }

			 //update note / page for each channel output
			 for (int i = 0; i < 4; i++){
				if (curr_page_ch[i] < page_loop_ch[i]){
  402ed0:	f813 2b01 	ldrb.w	r2, [r3], #1
  402ed4:	f811 0b01 	ldrb.w	r0, [r1], #1
  402ed8:	4282      	cmp	r2, r0
					curr_page_ch[i]++;
  402eda:	bf3a      	itte	cc
  402edc:	3201      	addcc	r2, #1
  402ede:	f803 2c01 	strbcc.w	r2, [r3, #-1]
				}
				else{
					curr_page_ch[i] = 0;
  402ee2:	f803 5c01 	strbcs.w	r5, [r3, #-1]
			 else{
				curr_page = 0;
			 }

			 //update note / page for each channel output
			 for (int i = 0; i < 4; i++){
  402ee6:	42a3      	cmp	r3, r4
  402ee8:	d1f2      	bne.n	402ed0 <TC0_Handler+0x64>
				}
			 }


			 //return to first step on next page
			 curr_step = 0;
  402eea:	2200      	movs	r2, #0
  402eec:	4b36      	ldr	r3, [pc, #216]	; (402fc8 <TC0_Handler+0x15c>)
  402eee:	701a      	strb	r2, [r3, #0]
  402ef0:	e002      	b.n	402ef8 <TC0_Handler+0x8c>
		 }
		 else{
			 curr_step++;
  402ef2:	3301      	adds	r3, #1
  402ef4:	4a34      	ldr	r2, [pc, #208]	; (402fc8 <TC0_Handler+0x15c>)
  402ef6:	7013      	strb	r3, [r2, #0]
		 }

		 SPI_led_init();
  402ef8:	4b38      	ldr	r3, [pc, #224]	; (402fdc <TC0_Handler+0x170>)
  402efa:	4798      	blx	r3
		 leds_update_cursor(curr_step);
  402efc:	4c32      	ldr	r4, [pc, #200]	; (402fc8 <TC0_Handler+0x15c>)
  402efe:	7820      	ldrb	r0, [r4, #0]
  402f00:	4b37      	ldr	r3, [pc, #220]	; (402fe0 <TC0_Handler+0x174>)
  402f02:	4798      	blx	r3

		 //update the CVs for each channel
		 DAC_write_cv(notes_get(curr_step, CHANNEL_1), CHANNEL_1);
  402f04:	2100      	movs	r1, #0
  402f06:	7820      	ldrb	r0, [r4, #0]
  402f08:	4e36      	ldr	r6, [pc, #216]	; (402fe4 <TC0_Handler+0x178>)
  402f0a:	47b0      	blx	r6
  402f0c:	2100      	movs	r1, #0
  402f0e:	4d36      	ldr	r5, [pc, #216]	; (402fe8 <TC0_Handler+0x17c>)
  402f10:	47a8      	blx	r5
		 DAC_write_cv(notes_get(curr_step, CHANNEL_2), CHANNEL_2);
  402f12:	2101      	movs	r1, #1
  402f14:	7820      	ldrb	r0, [r4, #0]
  402f16:	47b0      	blx	r6
  402f18:	2101      	movs	r1, #1
  402f1a:	47a8      	blx	r5
		 DAC_write_cv(notes_get(curr_step, CHANNEL_3), CHANNEL_3);
  402f1c:	2102      	movs	r1, #2
  402f1e:	7820      	ldrb	r0, [r4, #0]
  402f20:	47b0      	blx	r6
  402f22:	2102      	movs	r1, #2
  402f24:	47a8      	blx	r5
		 DAC_write_cv(notes_get(curr_step, CHANNEL_4), CHANNEL_4);
  402f26:	2103      	movs	r1, #3
  402f28:	7820      	ldrb	r0, [r4, #0]
  402f2a:	47b0      	blx	r6
  402f2c:	2103      	movs	r1, #3
  402f2e:	47a8      	blx	r5

		 //update the gates for each channel
		 if (notes_status_get(curr_step, CHANNEL_1) == 1){
  402f30:	2100      	movs	r1, #0
  402f32:	7820      	ldrb	r0, [r4, #0]
  402f34:	4b2d      	ldr	r3, [pc, #180]	; (402fec <TC0_Handler+0x180>)
  402f36:	4798      	blx	r3
  402f38:	2801      	cmp	r0, #1
  402f3a:	d102      	bne.n	402f42 <TC0_Handler+0xd6>
			 DAC_write_gate_on(CHANNEL_1);
  402f3c:	2000      	movs	r0, #0
  402f3e:	4b2c      	ldr	r3, [pc, #176]	; (402ff0 <TC0_Handler+0x184>)
  402f40:	4798      	blx	r3
		 }
		 if (notes_status_get(curr_step, CHANNEL_2) == 1){
  402f42:	2101      	movs	r1, #1
  402f44:	4b20      	ldr	r3, [pc, #128]	; (402fc8 <TC0_Handler+0x15c>)
  402f46:	7818      	ldrb	r0, [r3, #0]
  402f48:	4b28      	ldr	r3, [pc, #160]	; (402fec <TC0_Handler+0x180>)
  402f4a:	4798      	blx	r3
  402f4c:	2801      	cmp	r0, #1
  402f4e:	d101      	bne.n	402f54 <TC0_Handler+0xe8>
			 DAC_write_gate_on(CHANNEL_2);
  402f50:	4b27      	ldr	r3, [pc, #156]	; (402ff0 <TC0_Handler+0x184>)
  402f52:	4798      	blx	r3
		 }
		 if (notes_status_get(curr_step, CHANNEL_3) == 1){
  402f54:	2102      	movs	r1, #2
  402f56:	4b1c      	ldr	r3, [pc, #112]	; (402fc8 <TC0_Handler+0x15c>)
  402f58:	7818      	ldrb	r0, [r3, #0]
  402f5a:	4b24      	ldr	r3, [pc, #144]	; (402fec <TC0_Handler+0x180>)
  402f5c:	4798      	blx	r3
  402f5e:	2801      	cmp	r0, #1
  402f60:	d102      	bne.n	402f68 <TC0_Handler+0xfc>
			 DAC_write_gate_on(CHANNEL_3);
  402f62:	2002      	movs	r0, #2
  402f64:	4b22      	ldr	r3, [pc, #136]	; (402ff0 <TC0_Handler+0x184>)
  402f66:	4798      	blx	r3
		 }
		 if (notes_status_get(curr_step, CHANNEL_4) == 1){
  402f68:	2103      	movs	r1, #3
  402f6a:	4b17      	ldr	r3, [pc, #92]	; (402fc8 <TC0_Handler+0x15c>)
  402f6c:	7818      	ldrb	r0, [r3, #0]
  402f6e:	4b1f      	ldr	r3, [pc, #124]	; (402fec <TC0_Handler+0x180>)
  402f70:	4798      	blx	r3
  402f72:	2801      	cmp	r0, #1
  402f74:	d102      	bne.n	402f7c <TC0_Handler+0x110>
			 DAC_write_gate_on(CHANNEL_4);
  402f76:	2003      	movs	r0, #3
  402f78:	4b1d      	ldr	r3, [pc, #116]	; (402ff0 <TC0_Handler+0x184>)
  402f7a:	4798      	blx	r3
		 }
	
		 REG_ADC_CR |= ADC_CR_START;
  402f7c:	4a1d      	ldr	r2, [pc, #116]	; (402ff4 <TC0_Handler+0x188>)
  402f7e:	6813      	ldr	r3, [r2, #0]
  402f80:	f043 0302 	orr.w	r3, r3, #2
  402f84:	6013      	str	r3, [r2, #0]
		 overflow_count = 0;
  402f86:	2200      	movs	r2, #0
  402f88:	4b0d      	ldr	r3, [pc, #52]	; (402fc0 <TC0_Handler+0x154>)
  402f8a:	801a      	strh	r2, [r3, #0]
	 }

	 if((REG_TC0_SR1 & TC_SR_CPCS) >= 1) {
  402f8c:	4b1a      	ldr	r3, [pc, #104]	; (402ff8 <TC0_Handler+0x18c>)
  402f8e:	681b      	ldr	r3, [r3, #0]
  402f90:	f013 0f10 	tst.w	r3, #16
  402f94:	d003      	beq.n	402f9e <TC0_Handler+0x132>
		display_overflow_count += 1;
  402f96:	4a19      	ldr	r2, [pc, #100]	; (402ffc <TC0_Handler+0x190>)
  402f98:	8813      	ldrh	r3, [r2, #0]
  402f9a:	3301      	adds	r3, #1
  402f9c:	8013      	strh	r3, [r2, #0]
	}

	if (display_overflow_count >= 10000){
  402f9e:	4b17      	ldr	r3, [pc, #92]	; (402ffc <TC0_Handler+0x190>)
  402fa0:	881a      	ldrh	r2, [r3, #0]
  402fa2:	f242 730f 	movw	r3, #9999	; 0x270f
  402fa6:	429a      	cmp	r2, r3
  402fa8:	d906      	bls.n	402fb8 <TC0_Handler+0x14c>
		display_overflow_count = 0;
  402faa:	2200      	movs	r2, #0
  402fac:	4b13      	ldr	r3, [pc, #76]	; (402ffc <TC0_Handler+0x190>)
  402fae:	801a      	strh	r2, [r3, #0]
		test++;
  402fb0:	4a13      	ldr	r2, [pc, #76]	; (403000 <TC0_Handler+0x194>)
  402fb2:	7813      	ldrb	r3, [r2, #0]
  402fb4:	3301      	adds	r3, #1
  402fb6:	7013      	strb	r3, [r2, #0]
  402fb8:	bd70      	pop	{r4, r5, r6, pc}
  402fba:	bf00      	nop
  402fbc:	40010020 	.word	0x40010020
  402fc0:	20008710 	.word	0x20008710
  402fc4:	00400471 	.word	0x00400471
  402fc8:	20008718 	.word	0x20008718
  402fcc:	20008726 	.word	0x20008726
  402fd0:	20008708 	.word	0x20008708
  402fd4:	2000870c 	.word	0x2000870c
  402fd8:	20008720 	.word	0x20008720
  402fdc:	0040287d 	.word	0x0040287d
  402fe0:	00401bfd 	.word	0x00401bfd
  402fe4:	00402a15 	.word	0x00402a15
  402fe8:	00400345 	.word	0x00400345
  402fec:	00402a99 	.word	0x00402a99
  402ff0:	00400439 	.word	0x00400439
  402ff4:	40038000 	.word	0x40038000
  402ff8:	40010060 	.word	0x40010060
  402ffc:	2000871a 	.word	0x2000871a
  403000:	200086f4 	.word	0x200086f4

00403004 <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
  403004:	4770      	bx	lr
  403006:	bf00      	nop

00403008 <sysclk_init>:

	SystemCoreClockUpdate();
}

void sysclk_init(void)
{
  403008:	b510      	push	{r4, lr}
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  40300a:	480e      	ldr	r0, [pc, #56]	; (403044 <sysclk_init+0x3c>)
  40300c:	4b0e      	ldr	r3, [pc, #56]	; (403048 <sysclk_init+0x40>)
  40300e:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
		break;

	case OSC_MAINCK_8M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
  403010:	2010      	movs	r0, #16
  403012:	4b0e      	ldr	r3, [pc, #56]	; (40304c <sysclk_init+0x44>)
  403014:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  403016:	4c0e      	ldr	r4, [pc, #56]	; (403050 <sysclk_init+0x48>)
  403018:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  40301a:	2800      	cmp	r0, #0
  40301c:	d0fc      	beq.n	403018 <sysclk_init+0x10>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  40301e:	4b0d      	ldr	r3, [pc, #52]	; (403054 <sysclk_init+0x4c>)
  403020:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  403022:	4a0d      	ldr	r2, [pc, #52]	; (403058 <sysclk_init+0x50>)
  403024:	4b0d      	ldr	r3, [pc, #52]	; (40305c <sysclk_init+0x54>)
  403026:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
  403028:	4c0d      	ldr	r4, [pc, #52]	; (403060 <sysclk_init+0x58>)
  40302a:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  40302c:	2800      	cmp	r0, #0
  40302e:	d0fc      	beq.n	40302a <sysclk_init+0x22>

		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  403030:	2010      	movs	r0, #16
  403032:	4b0c      	ldr	r3, [pc, #48]	; (403064 <sysclk_init+0x5c>)
  403034:	4798      	blx	r3
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  403036:	4b0c      	ldr	r3, [pc, #48]	; (403068 <sysclk_init+0x60>)
  403038:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  40303a:	4802      	ldr	r0, [pc, #8]	; (403044 <sysclk_init+0x3c>)
  40303c:	4b02      	ldr	r3, [pc, #8]	; (403048 <sysclk_init+0x40>)
  40303e:	4798      	blx	r3
  403040:	bd10      	pop	{r4, pc}
  403042:	bf00      	nop
  403044:	05f5e100 	.word	0x05f5e100
  403048:	004032fd 	.word	0x004032fd
  40304c:	004030d5 	.word	0x004030d5
  403050:	00403121 	.word	0x00403121
  403054:	00403131 	.word	0x00403131
  403058:	20183f01 	.word	0x20183f01
  40305c:	400e0400 	.word	0x400e0400
  403060:	00403141 	.word	0x00403141
  403064:	0040306d 	.word	0x0040306d
  403068:	004031ed 	.word	0x004031ed

0040306c <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  40306c:	4a18      	ldr	r2, [pc, #96]	; (4030d0 <pmc_switch_mck_to_pllack+0x64>)
  40306e:	6b13      	ldr	r3, [r2, #48]	; 0x30
  403070:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  403074:	4318      	orrs	r0, r3
  403076:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  403078:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40307a:	f013 0f08 	tst.w	r3, #8
  40307e:	d003      	beq.n	403088 <pmc_switch_mck_to_pllack+0x1c>
  403080:	e009      	b.n	403096 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  403082:	3b01      	subs	r3, #1
  403084:	d103      	bne.n	40308e <pmc_switch_mck_to_pllack+0x22>
  403086:	e01e      	b.n	4030c6 <pmc_switch_mck_to_pllack+0x5a>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  403088:	f44f 6300 	mov.w	r3, #2048	; 0x800
  40308c:	4910      	ldr	r1, [pc, #64]	; (4030d0 <pmc_switch_mck_to_pllack+0x64>)
  40308e:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  403090:	f012 0f08 	tst.w	r2, #8
  403094:	d0f5      	beq.n	403082 <pmc_switch_mck_to_pllack+0x16>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  403096:	4a0e      	ldr	r2, [pc, #56]	; (4030d0 <pmc_switch_mck_to_pllack+0x64>)
  403098:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40309a:	f023 0303 	bic.w	r3, r3, #3
  40309e:	f043 0302 	orr.w	r3, r3, #2
  4030a2:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4030a4:	6e90      	ldr	r0, [r2, #104]	; 0x68
  4030a6:	f010 0008 	ands.w	r0, r0, #8
  4030aa:	d004      	beq.n	4030b6 <pmc_switch_mck_to_pllack+0x4a>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
  4030ac:	2000      	movs	r0, #0
  4030ae:	4770      	bx	lr
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
  4030b0:	3b01      	subs	r3, #1
  4030b2:	d103      	bne.n	4030bc <pmc_switch_mck_to_pllack+0x50>
  4030b4:	e009      	b.n	4030ca <pmc_switch_mck_to_pllack+0x5e>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4030b6:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4030ba:	4905      	ldr	r1, [pc, #20]	; (4030d0 <pmc_switch_mck_to_pllack+0x64>)
  4030bc:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4030be:	f012 0f08 	tst.w	r2, #8
  4030c2:	d0f5      	beq.n	4030b0 <pmc_switch_mck_to_pllack+0x44>
  4030c4:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  4030c6:	2001      	movs	r0, #1
  4030c8:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  4030ca:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  4030cc:	4770      	bx	lr
  4030ce:	bf00      	nop
  4030d0:	400e0400 	.word	0x400e0400

004030d4 <pmc_switch_mainck_to_fastrc>:
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
  4030d4:	4b11      	ldr	r3, [pc, #68]	; (40311c <pmc_switch_mainck_to_fastrc+0x48>)
  4030d6:	6a1a      	ldr	r2, [r3, #32]
  4030d8:	f442 125c 	orr.w	r2, r2, #3604480	; 0x370000
  4030dc:	f042 0208 	orr.w	r2, r2, #8
  4030e0:	621a      	str	r2, [r3, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  4030e2:	461a      	mov	r2, r3
  4030e4:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4030e6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
  4030ea:	d0fb      	beq.n	4030e4 <pmc_switch_mainck_to_fastrc+0x10>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  4030ec:	4a0b      	ldr	r2, [pc, #44]	; (40311c <pmc_switch_mainck_to_fastrc+0x48>)
  4030ee:	6a13      	ldr	r3, [r2, #32]
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
  4030f0:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  4030f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  4030f8:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  4030fc:	4303      	orrs	r3, r0

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  4030fe:	6213      	str	r3, [r2, #32]
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  403100:	6e93      	ldr	r3, [r2, #104]	; 0x68
  403102:	f413 3f00 	tst.w	r3, #131072	; 0x20000
  403106:	d0fb      	beq.n	403100 <pmc_switch_mainck_to_fastrc+0x2c>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  403108:	4a04      	ldr	r2, [pc, #16]	; (40311c <pmc_switch_mainck_to_fastrc+0x48>)
  40310a:	6a13      	ldr	r3, [r2, #32]
  40310c:	f023 739b 	bic.w	r3, r3, #20316160	; 0x1360000
  403110:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  403114:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  403118:	6213      	str	r3, [r2, #32]
  40311a:	4770      	bx	lr
  40311c:	400e0400 	.word	0x400e0400

00403120 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  403120:	4b02      	ldr	r3, [pc, #8]	; (40312c <pmc_osc_is_ready_mainck+0xc>)
  403122:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  403124:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  403128:	4770      	bx	lr
  40312a:	bf00      	nop
  40312c:	400e0400 	.word	0x400e0400

00403130 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  403130:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  403134:	4b01      	ldr	r3, [pc, #4]	; (40313c <pmc_disable_pllack+0xc>)
  403136:	629a      	str	r2, [r3, #40]	; 0x28
  403138:	4770      	bx	lr
  40313a:	bf00      	nop
  40313c:	400e0400 	.word	0x400e0400

00403140 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  403140:	4b02      	ldr	r3, [pc, #8]	; (40314c <pmc_is_locked_pllack+0xc>)
  403142:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  403144:	f000 0002 	and.w	r0, r0, #2
  403148:	4770      	bx	lr
  40314a:	bf00      	nop
  40314c:	400e0400 	.word	0x400e0400

00403150 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  403150:	e7fe      	b.n	403150 <Dummy_Handler>
  403152:	bf00      	nop

00403154 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  403154:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
  403156:	4b19      	ldr	r3, [pc, #100]	; (4031bc <Reset_Handler+0x68>)
  403158:	4a19      	ldr	r2, [pc, #100]	; (4031c0 <Reset_Handler+0x6c>)
  40315a:	429a      	cmp	r2, r3
  40315c:	d003      	beq.n	403166 <Reset_Handler+0x12>
		for (; pDest < &_erelocate;) {
  40315e:	4b19      	ldr	r3, [pc, #100]	; (4031c4 <Reset_Handler+0x70>)
  403160:	4a16      	ldr	r2, [pc, #88]	; (4031bc <Reset_Handler+0x68>)
  403162:	429a      	cmp	r2, r3
  403164:	d304      	bcc.n	403170 <Reset_Handler+0x1c>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  403166:	4b18      	ldr	r3, [pc, #96]	; (4031c8 <Reset_Handler+0x74>)
  403168:	4a18      	ldr	r2, [pc, #96]	; (4031cc <Reset_Handler+0x78>)
  40316a:	429a      	cmp	r2, r3
  40316c:	d30f      	bcc.n	40318e <Reset_Handler+0x3a>
  40316e:	e01a      	b.n	4031a6 <Reset_Handler+0x52>
  403170:	4912      	ldr	r1, [pc, #72]	; (4031bc <Reset_Handler+0x68>)
  403172:	4b17      	ldr	r3, [pc, #92]	; (4031d0 <Reset_Handler+0x7c>)
  403174:	1a5b      	subs	r3, r3, r1
  403176:	f023 0303 	bic.w	r3, r3, #3
  40317a:	3304      	adds	r3, #4
  40317c:	4a10      	ldr	r2, [pc, #64]	; (4031c0 <Reset_Handler+0x6c>)
  40317e:	4413      	add	r3, r2
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
			*pDest++ = *pSrc++;
  403180:	f852 0b04 	ldr.w	r0, [r2], #4
  403184:	f841 0b04 	str.w	r0, [r1], #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
  403188:	429a      	cmp	r2, r3
  40318a:	d1f9      	bne.n	403180 <Reset_Handler+0x2c>
  40318c:	e7eb      	b.n	403166 <Reset_Handler+0x12>
  40318e:	4b11      	ldr	r3, [pc, #68]	; (4031d4 <Reset_Handler+0x80>)
  403190:	4a11      	ldr	r2, [pc, #68]	; (4031d8 <Reset_Handler+0x84>)
  403192:	1ad2      	subs	r2, r2, r3
  403194:	f022 0203 	bic.w	r2, r2, #3
  403198:	441a      	add	r2, r3
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  40319a:	3b04      	subs	r3, #4
		*pDest++ = 0;
  40319c:	2100      	movs	r1, #0
  40319e:	f843 1b04 	str.w	r1, [r3], #4
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  4031a2:	4293      	cmp	r3, r2
  4031a4:	d1fb      	bne.n	40319e <Reset_Handler+0x4a>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  4031a6:	4a0d      	ldr	r2, [pc, #52]	; (4031dc <Reset_Handler+0x88>)
  4031a8:	4b0d      	ldr	r3, [pc, #52]	; (4031e0 <Reset_Handler+0x8c>)
  4031aa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  4031ae:	6093      	str	r3, [r2, #8]

	/* Initialize the C library */
	__libc_init_array();
  4031b0:	4b0c      	ldr	r3, [pc, #48]	; (4031e4 <Reset_Handler+0x90>)
  4031b2:	4798      	blx	r3

	/* Branch to main function */
	main();
  4031b4:	4b0c      	ldr	r3, [pc, #48]	; (4031e8 <Reset_Handler+0x94>)
  4031b6:	4798      	blx	r3
  4031b8:	e7fe      	b.n	4031b8 <Reset_Handler+0x64>
  4031ba:	bf00      	nop
  4031bc:	20000000 	.word	0x20000000
  4031c0:	00404e24 	.word	0x00404e24
  4031c4:	20000628 	.word	0x20000628
  4031c8:	20008734 	.word	0x20008734
  4031cc:	20000628 	.word	0x20000628
  4031d0:	20000627 	.word	0x20000627
  4031d4:	2000062c 	.word	0x2000062c
  4031d8:	20008737 	.word	0x20008737
  4031dc:	e000ed00 	.word	0xe000ed00
  4031e0:	00400000 	.word	0x00400000
  4031e4:	00403b41 	.word	0x00403b41
  4031e8:	00403539 	.word	0x00403539

004031ec <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) {
  4031ec:	4b3c      	ldr	r3, [pc, #240]	; (4032e0 <SystemCoreClockUpdate+0xf4>)
  4031ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4031f0:	f003 0303 	and.w	r3, r3, #3
  4031f4:	2b01      	cmp	r3, #1
  4031f6:	d00f      	beq.n	403218 <SystemCoreClockUpdate+0x2c>
  4031f8:	b113      	cbz	r3, 403200 <SystemCoreClockUpdate+0x14>
  4031fa:	2b02      	cmp	r3, #2
  4031fc:	d029      	beq.n	403252 <SystemCoreClockUpdate+0x66>
  4031fe:	e057      	b.n	4032b0 <SystemCoreClockUpdate+0xc4>
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
  403200:	4b38      	ldr	r3, [pc, #224]	; (4032e4 <SystemCoreClockUpdate+0xf8>)
  403202:	695b      	ldr	r3, [r3, #20]
  403204:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
  403208:	bf14      	ite	ne
  40320a:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
  40320e:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  403212:	4b35      	ldr	r3, [pc, #212]	; (4032e8 <SystemCoreClockUpdate+0xfc>)
  403214:	601a      	str	r2, [r3, #0]
  403216:	e04b      	b.n	4032b0 <SystemCoreClockUpdate+0xc4>
		}
		break;

	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
  403218:	4b31      	ldr	r3, [pc, #196]	; (4032e0 <SystemCoreClockUpdate+0xf4>)
  40321a:	6a1b      	ldr	r3, [r3, #32]
  40321c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  403220:	d003      	beq.n	40322a <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
  403222:	4a32      	ldr	r2, [pc, #200]	; (4032ec <SystemCoreClockUpdate+0x100>)
  403224:	4b30      	ldr	r3, [pc, #192]	; (4032e8 <SystemCoreClockUpdate+0xfc>)
  403226:	601a      	str	r2, [r3, #0]
  403228:	e042      	b.n	4032b0 <SystemCoreClockUpdate+0xc4>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40322a:	4a31      	ldr	r2, [pc, #196]	; (4032f0 <SystemCoreClockUpdate+0x104>)
  40322c:	4b2e      	ldr	r3, [pc, #184]	; (4032e8 <SystemCoreClockUpdate+0xfc>)
  40322e:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
  403230:	4b2b      	ldr	r3, [pc, #172]	; (4032e0 <SystemCoreClockUpdate+0xf4>)
  403232:	6a1b      	ldr	r3, [r3, #32]
  403234:	f003 0370 	and.w	r3, r3, #112	; 0x70
  403238:	2b10      	cmp	r3, #16
  40323a:	d002      	beq.n	403242 <SystemCoreClockUpdate+0x56>
  40323c:	2b20      	cmp	r3, #32
  40323e:	d004      	beq.n	40324a <SystemCoreClockUpdate+0x5e>
  403240:	e036      	b.n	4032b0 <SystemCoreClockUpdate+0xc4>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;

			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
  403242:	4a2c      	ldr	r2, [pc, #176]	; (4032f4 <SystemCoreClockUpdate+0x108>)
  403244:	4b28      	ldr	r3, [pc, #160]	; (4032e8 <SystemCoreClockUpdate+0xfc>)
  403246:	601a      	str	r2, [r3, #0]
				break;
  403248:	e032      	b.n	4032b0 <SystemCoreClockUpdate+0xc4>

			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
  40324a:	4a28      	ldr	r2, [pc, #160]	; (4032ec <SystemCoreClockUpdate+0x100>)
  40324c:	4b26      	ldr	r3, [pc, #152]	; (4032e8 <SystemCoreClockUpdate+0xfc>)
  40324e:	601a      	str	r2, [r3, #0]
				break;
  403250:	e02e      	b.n	4032b0 <SystemCoreClockUpdate+0xc4>
			}
		}
		break;

	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
  403252:	4b23      	ldr	r3, [pc, #140]	; (4032e0 <SystemCoreClockUpdate+0xf4>)
  403254:	6a1b      	ldr	r3, [r3, #32]
  403256:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  40325a:	d003      	beq.n	403264 <SystemCoreClockUpdate+0x78>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
  40325c:	4a23      	ldr	r2, [pc, #140]	; (4032ec <SystemCoreClockUpdate+0x100>)
  40325e:	4b22      	ldr	r3, [pc, #136]	; (4032e8 <SystemCoreClockUpdate+0xfc>)
  403260:	601a      	str	r2, [r3, #0]
  403262:	e012      	b.n	40328a <SystemCoreClockUpdate+0x9e>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  403264:	4a22      	ldr	r2, [pc, #136]	; (4032f0 <SystemCoreClockUpdate+0x104>)
  403266:	4b20      	ldr	r3, [pc, #128]	; (4032e8 <SystemCoreClockUpdate+0xfc>)
  403268:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
  40326a:	4b1d      	ldr	r3, [pc, #116]	; (4032e0 <SystemCoreClockUpdate+0xf4>)
  40326c:	6a1b      	ldr	r3, [r3, #32]
  40326e:	f003 0370 	and.w	r3, r3, #112	; 0x70
  403272:	2b10      	cmp	r3, #16
  403274:	d002      	beq.n	40327c <SystemCoreClockUpdate+0x90>
  403276:	2b20      	cmp	r3, #32
  403278:	d004      	beq.n	403284 <SystemCoreClockUpdate+0x98>
  40327a:	e006      	b.n	40328a <SystemCoreClockUpdate+0x9e>
				/* So the 4MHz RC selection is forbidden */
				Assert(false);
				break;

			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
  40327c:	4a1d      	ldr	r2, [pc, #116]	; (4032f4 <SystemCoreClockUpdate+0x108>)
  40327e:	4b1a      	ldr	r3, [pc, #104]	; (4032e8 <SystemCoreClockUpdate+0xfc>)
  403280:	601a      	str	r2, [r3, #0]
				break;
  403282:	e002      	b.n	40328a <SystemCoreClockUpdate+0x9e>

			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
  403284:	4a19      	ldr	r2, [pc, #100]	; (4032ec <SystemCoreClockUpdate+0x100>)
  403286:	4b18      	ldr	r3, [pc, #96]	; (4032e8 <SystemCoreClockUpdate+0xfc>)
  403288:	601a      	str	r2, [r3, #0]
			default:
				break;
			}
		}

		if ((uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
  40328a:	4b15      	ldr	r3, [pc, #84]	; (4032e0 <SystemCoreClockUpdate+0xf4>)
  40328c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40328e:	f003 0303 	and.w	r3, r3, #3
  403292:	2b02      	cmp	r3, #2
  403294:	d10c      	bne.n	4032b0 <SystemCoreClockUpdate+0xc4>
				PMC_MCKR_CSS_PLLA_CLK) {
			SystemCoreClock *=
					((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  403296:	4a12      	ldr	r2, [pc, #72]	; (4032e0 <SystemCoreClockUpdate+0xf4>)
  403298:	6a93      	ldr	r3, [r2, #40]	; 0x28
					>> CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  40329a:	6a92      	ldr	r2, [r2, #40]	; 0x28
  40329c:	4812      	ldr	r0, [pc, #72]	; (4032e8 <SystemCoreClockUpdate+0xfc>)
  40329e:	f3c3 410a 	ubfx	r1, r3, #16, #11
  4032a2:	6803      	ldr	r3, [r0, #0]
  4032a4:	fb01 3303 	mla	r3, r1, r3, r3
  4032a8:	b2d2      	uxtb	r2, r2
  4032aa:	fbb3 f3f2 	udiv	r3, r3, r2
  4032ae:	6003      	str	r3, [r0, #0]

	default:
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
  4032b0:	4b0b      	ldr	r3, [pc, #44]	; (4032e0 <SystemCoreClockUpdate+0xf4>)
  4032b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4032b4:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4032b8:	2b70      	cmp	r3, #112	; 0x70
  4032ba:	d107      	bne.n	4032cc <SystemCoreClockUpdate+0xe0>
		SystemCoreClock /= 3U;
  4032bc:	4a0a      	ldr	r2, [pc, #40]	; (4032e8 <SystemCoreClockUpdate+0xfc>)
  4032be:	6813      	ldr	r3, [r2, #0]
  4032c0:	490d      	ldr	r1, [pc, #52]	; (4032f8 <SystemCoreClockUpdate+0x10c>)
  4032c2:	fba1 1303 	umull	r1, r3, r1, r3
  4032c6:	085b      	lsrs	r3, r3, #1
  4032c8:	6013      	str	r3, [r2, #0]
  4032ca:	4770      	bx	lr
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >>
  4032cc:	4b04      	ldr	r3, [pc, #16]	; (4032e0 <SystemCoreClockUpdate+0xf4>)
  4032ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4032d0:	4905      	ldr	r1, [pc, #20]	; (4032e8 <SystemCoreClockUpdate+0xfc>)
  4032d2:	f3c3 1202 	ubfx	r2, r3, #4, #3
  4032d6:	680b      	ldr	r3, [r1, #0]
  4032d8:	40d3      	lsrs	r3, r2
  4032da:	600b      	str	r3, [r1, #0]
  4032dc:	4770      	bx	lr
  4032de:	bf00      	nop
  4032e0:	400e0400 	.word	0x400e0400
  4032e4:	400e1410 	.word	0x400e1410
  4032e8:	200001f8 	.word	0x200001f8
  4032ec:	00b71b00 	.word	0x00b71b00
  4032f0:	003d0900 	.word	0x003d0900
  4032f4:	007a1200 	.word	0x007a1200
  4032f8:	aaaaaaab 	.word	0xaaaaaaab

004032fc <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
  4032fc:	4b0f      	ldr	r3, [pc, #60]	; (40333c <system_init_flash+0x40>)
  4032fe:	4298      	cmp	r0, r3
  403300:	d804      	bhi.n	40330c <system_init_flash+0x10>
		EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  403302:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  403306:	4b0e      	ldr	r3, [pc, #56]	; (403340 <system_init_flash+0x44>)
  403308:	601a      	str	r2, [r3, #0]
  40330a:	4770      	bx	lr
	} else {
		if (ul_clk < CHIP_FREQ_FWS_1) {
  40330c:	4b0d      	ldr	r3, [pc, #52]	; (403344 <system_init_flash+0x48>)
  40330e:	4298      	cmp	r0, r3
  403310:	d803      	bhi.n	40331a <system_init_flash+0x1e>
			EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  403312:	4a0d      	ldr	r2, [pc, #52]	; (403348 <system_init_flash+0x4c>)
  403314:	4b0a      	ldr	r3, [pc, #40]	; (403340 <system_init_flash+0x44>)
  403316:	601a      	str	r2, [r3, #0]
  403318:	4770      	bx	lr
		} else {
			if (ul_clk < CHIP_FREQ_FWS_2) {
  40331a:	4b0c      	ldr	r3, [pc, #48]	; (40334c <system_init_flash+0x50>)
  40331c:	4298      	cmp	r0, r3
  40331e:	d803      	bhi.n	403328 <system_init_flash+0x2c>
				EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  403320:	4a0b      	ldr	r2, [pc, #44]	; (403350 <system_init_flash+0x54>)
  403322:	4b07      	ldr	r3, [pc, #28]	; (403340 <system_init_flash+0x44>)
  403324:	601a      	str	r2, [r3, #0]
  403326:	4770      	bx	lr
			} else {
				if (ul_clk < CHIP_FREQ_FWS_3) {
  403328:	4b0a      	ldr	r3, [pc, #40]	; (403354 <system_init_flash+0x58>)
  40332a:	4298      	cmp	r0, r3
					EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  40332c:	bf94      	ite	ls
  40332e:	4a0a      	ldrls	r2, [pc, #40]	; (403358 <system_init_flash+0x5c>)
				} else {
					EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  403330:	f04f 2204 	movhi.w	r2, #67109888	; 0x4000400
  403334:	4b02      	ldr	r3, [pc, #8]	; (403340 <system_init_flash+0x44>)
  403336:	601a      	str	r2, [r3, #0]
  403338:	4770      	bx	lr
  40333a:	bf00      	nop
  40333c:	01312cff 	.word	0x01312cff
  403340:	400e0a00 	.word	0x400e0a00
  403344:	026259ff 	.word	0x026259ff
  403348:	04000100 	.word	0x04000100
  40334c:	039386ff 	.word	0x039386ff
  403350:	04000200 	.word	0x04000200
  403354:	04c4b3ff 	.word	0x04c4b3ff
  403358:	04000300 	.word	0x04000300

0040335c <init_IO_int>:
 #define MAX7314_inputPortLow 0x00
 #define MAX7314_inputPortHigh 0x01

 #define MAX7314_slaveAddress (uint8_t) 0b0100000 //7bit address when AD0 = GND

 void init_IO_int(){
  40335c:	b470      	push	{r4, r5, r6}

	//enable clock for PIOB
	REG_PMC_PCER0 |= PMC_PCER0_PID12;
  40335e:	4a2b      	ldr	r2, [pc, #172]	; (40340c <init_IO_int+0xb0>)
  403360:	6813      	ldr	r3, [r2, #0]
  403362:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  403366:	6013      	str	r3, [r2, #0]

	//Set up PB10 as Button IO Expander Input
	REG_PIOB_PER |= PIO_PER_P10; //enable PIO controller
  403368:	4d29      	ldr	r5, [pc, #164]	; (403410 <init_IO_int+0xb4>)
  40336a:	682b      	ldr	r3, [r5, #0]
  40336c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
  403370:	602b      	str	r3, [r5, #0]
	REG_PIOB_ODR |= PIO_ODR_P10; //disable output
  403372:	4c28      	ldr	r4, [pc, #160]	; (403414 <init_IO_int+0xb8>)
  403374:	6823      	ldr	r3, [r4, #0]
  403376:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
  40337a:	6023      	str	r3, [r4, #0]
	REG_PIOB_PPDDR |= PIO_PPDDR_P10; //disable pull-down resistor
  40337c:	4826      	ldr	r0, [pc, #152]	; (403418 <init_IO_int+0xbc>)
  40337e:	6803      	ldr	r3, [r0, #0]
  403380:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
  403384:	6003      	str	r3, [r0, #0]
	REG_PIOB_PUER |= PIO_PUER_P10;	//enable pull-up resistor
  403386:	4925      	ldr	r1, [pc, #148]	; (40341c <init_IO_int+0xc0>)
  403388:	680b      	ldr	r3, [r1, #0]
  40338a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
  40338e:	600b      	str	r3, [r1, #0]
	REG_PIOB_IFSCER |= PIO_IFSCER_P10; //turn on slow clock debounce
  403390:	f602 4274 	addw	r2, r2, #3188	; 0xc74
  403394:	6813      	ldr	r3, [r2, #0]
  403396:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
  40339a:	6013      	str	r3, [r2, #0]
	REG_PIOB_IFER |= PIO_IFER_P10;	//start debounce filter
  40339c:	4b20      	ldr	r3, [pc, #128]	; (403420 <init_IO_int+0xc4>)
  40339e:	681e      	ldr	r6, [r3, #0]
  4033a0:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
  4033a4:	601e      	str	r6, [r3, #0]

	//Set up PB11 as Encoder IO Expander Input
	REG_PIOB_PER |= PIO_PER_P11; //enable PIO controller
  4033a6:	682e      	ldr	r6, [r5, #0]
  4033a8:	f446 6600 	orr.w	r6, r6, #2048	; 0x800
  4033ac:	602e      	str	r6, [r5, #0]
	REG_PIOB_ODR |= PIO_ODR_P11; //disable output
  4033ae:	6825      	ldr	r5, [r4, #0]
  4033b0:	f445 6500 	orr.w	r5, r5, #2048	; 0x800
  4033b4:	6025      	str	r5, [r4, #0]
	REG_PIOB_PPDDR |= PIO_PPDDR_P11; //disable pull-down resistor
  4033b6:	6804      	ldr	r4, [r0, #0]
  4033b8:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
  4033bc:	6004      	str	r4, [r0, #0]
	REG_PIOB_PUER |= PIO_PUER_P11;	//enable pull-up resistor
  4033be:	6808      	ldr	r0, [r1, #0]
  4033c0:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
  4033c4:	6008      	str	r0, [r1, #0]
	REG_PIOB_IFSCER |= PIO_IFSCER_P11; //turn on slow clock debounce
  4033c6:	6811      	ldr	r1, [r2, #0]
  4033c8:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
  4033cc:	6011      	str	r1, [r2, #0]
	REG_PIOB_IFER |= PIO_IFER_P11;	//start debounce filter
  4033ce:	681a      	ldr	r2, [r3, #0]
  4033d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
  4033d4:	601a      	str	r2, [r3, #0]

	uint32_t flag_clear = REG_PIOB_ISR;	//clear left over interrupt flags
  4033d6:	332c      	adds	r3, #44	; 0x2c
  4033d8:	681b      	ldr	r3, [r3, #0]

	//Enable interrupts for PB10
	REG_PIOB_IER |= PIO_IER_P10;			//enable falling edge change interrupt
  4033da:	4a12      	ldr	r2, [pc, #72]	; (403424 <init_IO_int+0xc8>)
  4033dc:	6813      	ldr	r3, [r2, #0]
  4033de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
  4033e2:	6013      	str	r3, [r2, #0]
	REG_PIOB_FELLSR |= PIO_FELLSR_P10;
  4033e4:	4b10      	ldr	r3, [pc, #64]	; (403428 <init_IO_int+0xcc>)
  4033e6:	6819      	ldr	r1, [r3, #0]
  4033e8:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
  4033ec:	6019      	str	r1, [r3, #0]

	//Enable interrupts for PB10
	REG_PIOB_IER |= PIO_IER_P11;			//enable falling edge change interrupt
  4033ee:	6811      	ldr	r1, [r2, #0]
  4033f0:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
  4033f4:	6011      	str	r1, [r2, #0]
	REG_PIOB_FELLSR |= PIO_FELLSR_P11;
  4033f6:	681a      	ldr	r2, [r3, #0]
  4033f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
  4033fc:	601a      	str	r2, [r3, #0]
  4033fe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  403402:	4b0a      	ldr	r3, [pc, #40]	; (40342c <init_IO_int+0xd0>)
  403404:	601a      	str	r2, [r3, #0]

	NVIC_EnableIRQ(PIOB_IRQn);

 }
  403406:	bc70      	pop	{r4, r5, r6}
  403408:	4770      	bx	lr
  40340a:	bf00      	nop
  40340c:	400e0410 	.word	0x400e0410
  403410:	400e1000 	.word	0x400e1000
  403414:	400e1014 	.word	0x400e1014
  403418:	400e1090 	.word	0x400e1090
  40341c:	400e1064 	.word	0x400e1064
  403420:	400e1020 	.word	0x400e1020
  403424:	400e1040 	.word	0x400e1040
  403428:	400e10d0 	.word	0x400e10d0
  40342c:	e000e100 	.word	0xe000e100

00403430 <i2c_init>:

 void i2c_init(){

	REG_TWI0_CR = TWI_CR_SWRST;
  403430:	4b12      	ldr	r3, [pc, #72]	; (40347c <i2c_init+0x4c>)
  403432:	2280      	movs	r2, #128	; 0x80
  403434:	601a      	str	r2, [r3, #0]

	//enable peripheral clock for i2c using TWI0
	REG_PMC_PCER0 |= PMC_PCER0_PID19;
  403436:	4912      	ldr	r1, [pc, #72]	; (403480 <i2c_init+0x50>)
  403438:	680a      	ldr	r2, [r1, #0]
  40343a:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
  40343e:	600a      	str	r2, [r1, #0]

	//disable GPIO control of i2c pins
	REG_PIOA_PDR |= PIO_PDR_P3;
  403440:	4a10      	ldr	r2, [pc, #64]	; (403484 <i2c_init+0x54>)
  403442:	6811      	ldr	r1, [r2, #0]
  403444:	f041 0108 	orr.w	r1, r1, #8
  403448:	6011      	str	r1, [r2, #0]
	REG_PIOA_PDR |= PIO_PDR_P4;
  40344a:	6811      	ldr	r1, [r2, #0]
  40344c:	f041 0110 	orr.w	r1, r1, #16
  403450:	6011      	str	r1, [r2, #0]

	// tlow = ((CLDIV * 2^CKDIV) + 4) * Tper
	// thigh = ((CHDIV * 2^CKDIV) + 4) * Tper
	// thigh = tlow => 400kHz (supposedly...)
	//set TWI0 clock to 400kHz (supported by IO expander)
	REG_TWI0_CWGR |= TWI_CWGR_CLDIV(121);
  403452:	f5a2 2248 	sub.w	r2, r2, #819200	; 0xc8000
  403456:	f6a2 52f4 	subw	r2, r2, #3572	; 0xdf4
  40345a:	6811      	ldr	r1, [r2, #0]
  40345c:	f041 0179 	orr.w	r1, r1, #121	; 0x79
  403460:	6011      	str	r1, [r2, #0]
	REG_TWI0_CWGR |= TWI_CWGR_CHDIV(121);
  403462:	6811      	ldr	r1, [r2, #0]
  403464:	f441 41f2 	orr.w	r1, r1, #30976	; 0x7900
  403468:	6011      	str	r1, [r2, #0]

	//disable slave mode & enable master mode
	REG_TWI0_CR |= TWI_CR_SVDIS;
  40346a:	681a      	ldr	r2, [r3, #0]
  40346c:	f042 0220 	orr.w	r2, r2, #32
  403470:	601a      	str	r2, [r3, #0]
	REG_TWI0_CR |= TWI_CR_MSEN;
  403472:	681a      	ldr	r2, [r3, #0]
  403474:	f042 0204 	orr.w	r2, r2, #4
  403478:	601a      	str	r2, [r3, #0]
  40347a:	4770      	bx	lr
  40347c:	40018000 	.word	0x40018000
  403480:	400e0410 	.word	0x400e0410
  403484:	400e0e04 	.word	0x400e0e04

00403488 <config_MAX7314>:
		uint8_t test = 0;
	 }

 }

 void config_MAX7314(){
  403488:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40348c:	b088      	sub	sp, #32
	twi_packet_t packet_tx;
	uint8_t config_data[] = {MAX7314_configRegister, 0x08};
  40348e:	4c14      	ldr	r4, [pc, #80]	; (4034e0 <config_MAX7314+0x58>)
  403490:	8823      	ldrh	r3, [r4, #0]
  403492:	f8ad 3008 	strh.w	r3, [sp, #8]

	/* Configure the Chip Config Register */
	packet_tx.chip        = 0b0100000;
  403496:	f04f 0820 	mov.w	r8, #32
  40349a:	f88d 801c 	strb.w	r8, [sp, #28]
	packet_tx.addr_length = 0;
  40349e:	2700      	movs	r7, #0
  4034a0:	9704      	str	r7, [sp, #16]
	packet_tx.buffer      = (uint8_t *) config_data;
  4034a2:	ab02      	add	r3, sp, #8
  4034a4:	9305      	str	r3, [sp, #20]
	packet_tx.length      = 2;
  4034a6:	2302      	movs	r3, #2
  4034a8:	9306      	str	r3, [sp, #24]
	twi_master_write(BOARD_BASE_TWI, &packet_tx);
  4034aa:	4e0e      	ldr	r6, [pc, #56]	; (4034e4 <config_MAX7314+0x5c>)
  4034ac:	a903      	add	r1, sp, #12
  4034ae:	4630      	mov	r0, r6
  4034b0:	4d0d      	ldr	r5, [pc, #52]	; (4034e8 <config_MAX7314+0x60>)
  4034b2:	47a8      	blx	r5


	uint8_t port_data_write[] = {MAX7314_portConfigRegisterLow, 0xFF, 0xFF};
  4034b4:	aa01      	add	r2, sp, #4
  4034b6:	4623      	mov	r3, r4
  4034b8:	f833 1f04 	ldrh.w	r1, [r3, #4]!
  4034bc:	789b      	ldrb	r3, [r3, #2]
  4034be:	f8ad 1004 	strh.w	r1, [sp, #4]
  4034c2:	f88d 3006 	strb.w	r3, [sp, #6]

	/* Configure the Chip Ports as Inputs */
	packet_tx.chip        = 0b0100000;
  4034c6:	f88d 801c 	strb.w	r8, [sp, #28]
	packet_tx.addr_length = 0;
  4034ca:	9704      	str	r7, [sp, #16]
	packet_tx.buffer      = (uint8_t *) port_data_write;
  4034cc:	9205      	str	r2, [sp, #20]
	packet_tx.length      = 3;
  4034ce:	2303      	movs	r3, #3
  4034d0:	9306      	str	r3, [sp, #24]
	twi_master_write(BOARD_BASE_TWI, &packet_tx);
  4034d2:	a903      	add	r1, sp, #12
  4034d4:	4630      	mov	r0, r6
  4034d6:	47a8      	blx	r5
 }
  4034d8:	b008      	add	sp, #32
  4034da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4034de:	bf00      	nop
  4034e0:	00404df0 	.word	0x00404df0
  4034e4:	40018000 	.word	0x40018000
  4034e8:	004002c1 	.word	0x004002c1

004034ec <read_MAX7314>:

 void read_MAX7314(uint8_t *data){
  4034ec:	b5f0      	push	{r4, r5, r6, r7, lr}
  4034ee:	b08d      	sub	sp, #52	; 0x34
  4034f0:	4607      	mov	r7, r0
	/* Data Packets for tx/rx */
	twi_packet_t packet_rx, packet_tx;
	uint8_t port_addr[] = {MAX7314_inputPortLow};
  4034f2:	2400      	movs	r4, #0
  4034f4:	f88d 4004 	strb.w	r4, [sp, #4]

	
	/* Write the command byte address to be the Low byte of the Input Port */
	packet_tx.chip        = 0b0100000;
  4034f8:	2620      	movs	r6, #32
  4034fa:	f88d 6018 	strb.w	r6, [sp, #24]
	packet_tx.addr_length = 0;
  4034fe:	9403      	str	r4, [sp, #12]
	packet_tx.buffer      = (uint8_t *) port_addr;
  403500:	ab01      	add	r3, sp, #4
  403502:	9304      	str	r3, [sp, #16]
	packet_tx.length      = 1;
  403504:	2301      	movs	r3, #1
  403506:	9305      	str	r3, [sp, #20]
	twi_master_write(BOARD_BASE_TWI, &packet_tx);
  403508:	4d08      	ldr	r5, [pc, #32]	; (40352c <read_MAX7314+0x40>)
  40350a:	a902      	add	r1, sp, #8
  40350c:	4628      	mov	r0, r5
  40350e:	4b08      	ldr	r3, [pc, #32]	; (403530 <read_MAX7314+0x44>)
  403510:	4798      	blx	r3


	/* Read Data from the Low and High Input Ports */
	packet_rx.chip        = 0b0100000;
  403512:	f88d 602c 	strb.w	r6, [sp, #44]	; 0x2c
	packet_rx.addr_length = 0;
  403516:	9408      	str	r4, [sp, #32]
	packet_rx.buffer      = data;
  403518:	9709      	str	r7, [sp, #36]	; 0x24
	packet_rx.length      = 2;
  40351a:	2302      	movs	r3, #2
  40351c:	930a      	str	r3, [sp, #40]	; 0x28
	twi_master_read(BOARD_BASE_TWI, &packet_rx);
  40351e:	a907      	add	r1, sp, #28
  403520:	4628      	mov	r0, r5
  403522:	4b04      	ldr	r3, [pc, #16]	; (403534 <read_MAX7314+0x48>)
  403524:	4798      	blx	r3


 }
  403526:	b00d      	add	sp, #52	; 0x34
  403528:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40352a:	bf00      	nop
  40352c:	40018000 	.word	0x40018000
  403530:	004002c1 	.word	0x004002c1
  403534:	004001e1 	.word	0x004001e1

00403538 <main>:

void config_MAX7314(void);
void read_MAX7314(uint8_t *port_data);

int main (void)
{
  403538:	b508      	push	{r3, lr}
	sysclk_init();				//initialize system clock
  40353a:	4b14      	ldr	r3, [pc, #80]	; (40358c <main+0x54>)
  40353c:	4798      	blx	r3
	WDT->WDT_MR = WDT_MR_WDDIS; //disable watchdog timer
  40353e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  403542:	4b13      	ldr	r3, [pc, #76]	; (403590 <main+0x58>)
  403544:	605a      	str	r2, [r3, #4]

	board_init();				//board init (currently empty)
  403546:	4b13      	ldr	r3, [pc, #76]	; (403594 <main+0x5c>)
  403548:	4798      	blx	r3
	init_sequencer_controls();
  40354a:	4b13      	ldr	r3, [pc, #76]	; (403598 <main+0x60>)
  40354c:	4798      	blx	r3

	SPI_led_init();
  40354e:	4b13      	ldr	r3, [pc, #76]	; (40359c <main+0x64>)
  403550:	4798      	blx	r3
	leds_update_display();
  403552:	4b13      	ldr	r3, [pc, #76]	; (4035a0 <main+0x68>)
  403554:	4798      	blx	r3
	
	timers_init();				//initiate timer for Flashing LED on PA20
  403556:	4b13      	ldr	r3, [pc, #76]	; (4035a4 <main+0x6c>)
  403558:	4798      	blx	r3
	update_timers(bpm);
  40355a:	4b13      	ldr	r3, [pc, #76]	; (4035a8 <main+0x70>)
  40355c:	8818      	ldrh	r0, [r3, #0]
  40355e:	4b13      	ldr	r3, [pc, #76]	; (4035ac <main+0x74>)
  403560:	4798      	blx	r3
	
	ADC_init();
  403562:	4b13      	ldr	r3, [pc, #76]	; (4035b0 <main+0x78>)
  403564:	4798      	blx	r3
	Encoder_init();				//initialize encoders
  403566:	4b13      	ldr	r3, [pc, #76]	; (4035b4 <main+0x7c>)
  403568:	4798      	blx	r3

	i2c_init();
  40356a:	4b13      	ldr	r3, [pc, #76]	; (4035b8 <main+0x80>)
  40356c:	4798      	blx	r3
	//notes_inc(5);
	

	init_IO_int();
  40356e:	4b13      	ldr	r3, [pc, #76]	; (4035bc <main+0x84>)
  403570:	4798      	blx	r3
	config_MAX7314();
  403572:	4b13      	ldr	r3, [pc, #76]	; (4035c0 <main+0x88>)
  403574:	4798      	blx	r3
	read_MAX7314(port_data);
  403576:	4813      	ldr	r0, [pc, #76]	; (4035c4 <main+0x8c>)
  403578:	4b13      	ldr	r3, [pc, #76]	; (4035c8 <main+0x90>)
  40357a:	4798      	blx	r3
	all_displays_init();
  40357c:	4b13      	ldr	r3, [pc, #76]	; (4035cc <main+0x94>)
  40357e:	4798      	blx	r3
	//note_display(5);
	//bpm_display(bpm);
	page_display(display_page);
  403580:	4b13      	ldr	r3, [pc, #76]	; (4035d0 <main+0x98>)
  403582:	7818      	ldrb	r0, [r3, #0]
  403584:	4b13      	ldr	r3, [pc, #76]	; (4035d4 <main+0x9c>)
  403586:	4798      	blx	r3
  403588:	e7fe      	b.n	403588 <main+0x50>
  40358a:	bf00      	nop
  40358c:	00403009 	.word	0x00403009
  403590:	400e1450 	.word	0x400e1450
  403594:	00403005 	.word	0x00403005
  403598:	004022e1 	.word	0x004022e1
  40359c:	0040287d 	.word	0x0040287d
  4035a0:	00401995 	.word	0x00401995
  4035a4:	00402d45 	.word	0x00402d45
  4035a8:	20008728 	.word	0x20008728
  4035ac:	00402e39 	.word	0x00402e39
  4035b0:	0040011d 	.word	0x0040011d
  4035b4:	00400f0d 	.word	0x00400f0d
  4035b8:	00403431 	.word	0x00403431
  4035bc:	0040335d 	.word	0x0040335d
  4035c0:	00403489 	.word	0x00403489
  4035c4:	200086fc 	.word	0x200086fc
  4035c8:	004034ed 	.word	0x004034ed
  4035cc:	00400789 	.word	0x00400789
  4035d0:	2000871c 	.word	0x2000871c
  4035d4:	00400cc1 	.word	0x00400cc1

004035d8 <PIOB_Handler>:
	//delay_us(10);
	//note_display(5);
	}
}

 void PIOB_Handler(){
  4035d8:	b538      	push	{r3, r4, r5, lr}

	 uint32_t status = REG_PIOB_ISR;	//read PIOB interrupt status & clear interrupt flags
  4035da:	4b14      	ldr	r3, [pc, #80]	; (40362c <PIOB_Handler+0x54>)
  4035dc:	681b      	ldr	r3, [r3, #0]
 
	 //check if Io expander interrupt was driven
	 if (status & PIO_ISR_P10){
  4035de:	f413 6f80 	tst.w	r3, #1024	; 0x400
  4035e2:	d01b      	beq.n	40361c <PIOB_Handler+0x44>
		read_MAX7314(temp_data);
  4035e4:	4c12      	ldr	r4, [pc, #72]	; (403630 <PIOB_Handler+0x58>)
  4035e6:	4620      	mov	r0, r4
  4035e8:	4b12      	ldr	r3, [pc, #72]	; (403634 <PIOB_Handler+0x5c>)
  4035ea:	4798      	blx	r3

		if  ( !((temp_data[0] == 127) && (temp_data[1] == 255)) ){
  4035ec:	7820      	ldrb	r0, [r4, #0]
  4035ee:	287f      	cmp	r0, #127	; 0x7f
  4035f0:	d102      	bne.n	4035f8 <PIOB_Handler+0x20>
  4035f2:	7863      	ldrb	r3, [r4, #1]
  4035f4:	2bff      	cmp	r3, #255	; 0xff
  4035f6:	d017      	beq.n	403628 <PIOB_Handler+0x50>
			port_data[0] = temp_data[0];
  4035f8:	4b0f      	ldr	r3, [pc, #60]	; (403638 <PIOB_Handler+0x60>)
  4035fa:	7018      	strb	r0, [r3, #0]
			port_data[1] = temp_data[1];
  4035fc:	4a0c      	ldr	r2, [pc, #48]	; (403630 <PIOB_Handler+0x58>)
  4035fe:	7851      	ldrb	r1, [r2, #1]
  403600:	7059      	strb	r1, [r3, #1]

			count++;
  403602:	4a0e      	ldr	r2, [pc, #56]	; (40363c <PIOB_Handler+0x64>)
  403604:	7813      	ldrb	r3, [r2, #0]
  403606:	3301      	adds	r3, #1
  403608:	b2db      	uxtb	r3, r3
  40360a:	7013      	strb	r3, [r2, #0]
			if (count >= 2){
  40360c:	2b01      	cmp	r3, #1
  40360e:	d90b      	bls.n	403628 <PIOB_Handler+0x50>
				led_toggle(port_data[0], port_data[1]);
  403610:	4b0b      	ldr	r3, [pc, #44]	; (403640 <PIOB_Handler+0x68>)
  403612:	4798      	blx	r3
				count = 0;
  403614:	2200      	movs	r2, #0
  403616:	4b09      	ldr	r3, [pc, #36]	; (40363c <PIOB_Handler+0x64>)
  403618:	701a      	strb	r2, [r3, #0]
  40361a:	bd38      	pop	{r3, r4, r5, pc}
		}
		
	 }

	 else{
		read_MAX7314(temp_data);
  40361c:	4d04      	ldr	r5, [pc, #16]	; (403630 <PIOB_Handler+0x58>)
  40361e:	4628      	mov	r0, r5
  403620:	4c04      	ldr	r4, [pc, #16]	; (403634 <PIOB_Handler+0x5c>)
  403622:	47a0      	blx	r4
		read_MAX7314(temp_data);
  403624:	4628      	mov	r0, r5
  403626:	47a0      	blx	r4
  403628:	bd38      	pop	{r3, r4, r5, pc}
  40362a:	bf00      	nop
  40362c:	400e104c 	.word	0x400e104c
  403630:	200086f8 	.word	0x200086f8
  403634:	004034ed 	.word	0x004034ed
  403638:	200086fc 	.word	0x200086fc
  40363c:	200086fa 	.word	0x200086fa
  403640:	00401e3d 	.word	0x00401e3d

00403644 <__aeabi_frsub>:
  403644:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
  403648:	e002      	b.n	403650 <__addsf3>
  40364a:	bf00      	nop

0040364c <__aeabi_fsub>:
  40364c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00403650 <__addsf3>:
  403650:	0042      	lsls	r2, r0, #1
  403652:	bf1f      	itttt	ne
  403654:	ea5f 0341 	movsne.w	r3, r1, lsl #1
  403658:	ea92 0f03 	teqne	r2, r3
  40365c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
  403660:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
  403664:	d06a      	beq.n	40373c <__addsf3+0xec>
  403666:	ea4f 6212 	mov.w	r2, r2, lsr #24
  40366a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
  40366e:	bfc1      	itttt	gt
  403670:	18d2      	addgt	r2, r2, r3
  403672:	4041      	eorgt	r1, r0
  403674:	4048      	eorgt	r0, r1
  403676:	4041      	eorgt	r1, r0
  403678:	bfb8      	it	lt
  40367a:	425b      	neglt	r3, r3
  40367c:	2b19      	cmp	r3, #25
  40367e:	bf88      	it	hi
  403680:	4770      	bxhi	lr
  403682:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
  403686:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  40368a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
  40368e:	bf18      	it	ne
  403690:	4240      	negne	r0, r0
  403692:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  403696:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
  40369a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
  40369e:	bf18      	it	ne
  4036a0:	4249      	negne	r1, r1
  4036a2:	ea92 0f03 	teq	r2, r3
  4036a6:	d03f      	beq.n	403728 <__addsf3+0xd8>
  4036a8:	f1a2 0201 	sub.w	r2, r2, #1
  4036ac:	fa41 fc03 	asr.w	ip, r1, r3
  4036b0:	eb10 000c 	adds.w	r0, r0, ip
  4036b4:	f1c3 0320 	rsb	r3, r3, #32
  4036b8:	fa01 f103 	lsl.w	r1, r1, r3
  4036bc:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
  4036c0:	d502      	bpl.n	4036c8 <__addsf3+0x78>
  4036c2:	4249      	negs	r1, r1
  4036c4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
  4036c8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
  4036cc:	d313      	bcc.n	4036f6 <__addsf3+0xa6>
  4036ce:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
  4036d2:	d306      	bcc.n	4036e2 <__addsf3+0x92>
  4036d4:	0840      	lsrs	r0, r0, #1
  4036d6:	ea4f 0131 	mov.w	r1, r1, rrx
  4036da:	f102 0201 	add.w	r2, r2, #1
  4036de:	2afe      	cmp	r2, #254	; 0xfe
  4036e0:	d251      	bcs.n	403786 <__addsf3+0x136>
  4036e2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
  4036e6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
  4036ea:	bf08      	it	eq
  4036ec:	f020 0001 	biceq.w	r0, r0, #1
  4036f0:	ea40 0003 	orr.w	r0, r0, r3
  4036f4:	4770      	bx	lr
  4036f6:	0049      	lsls	r1, r1, #1
  4036f8:	eb40 0000 	adc.w	r0, r0, r0
  4036fc:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
  403700:	f1a2 0201 	sub.w	r2, r2, #1
  403704:	d1ed      	bne.n	4036e2 <__addsf3+0x92>
  403706:	fab0 fc80 	clz	ip, r0
  40370a:	f1ac 0c08 	sub.w	ip, ip, #8
  40370e:	ebb2 020c 	subs.w	r2, r2, ip
  403712:	fa00 f00c 	lsl.w	r0, r0, ip
  403716:	bfaa      	itet	ge
  403718:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
  40371c:	4252      	neglt	r2, r2
  40371e:	4318      	orrge	r0, r3
  403720:	bfbc      	itt	lt
  403722:	40d0      	lsrlt	r0, r2
  403724:	4318      	orrlt	r0, r3
  403726:	4770      	bx	lr
  403728:	f092 0f00 	teq	r2, #0
  40372c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
  403730:	bf06      	itte	eq
  403732:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
  403736:	3201      	addeq	r2, #1
  403738:	3b01      	subne	r3, #1
  40373a:	e7b5      	b.n	4036a8 <__addsf3+0x58>
  40373c:	ea4f 0341 	mov.w	r3, r1, lsl #1
  403740:	ea7f 6c22 	mvns.w	ip, r2, asr #24
  403744:	bf18      	it	ne
  403746:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
  40374a:	d021      	beq.n	403790 <__addsf3+0x140>
  40374c:	ea92 0f03 	teq	r2, r3
  403750:	d004      	beq.n	40375c <__addsf3+0x10c>
  403752:	f092 0f00 	teq	r2, #0
  403756:	bf08      	it	eq
  403758:	4608      	moveq	r0, r1
  40375a:	4770      	bx	lr
  40375c:	ea90 0f01 	teq	r0, r1
  403760:	bf1c      	itt	ne
  403762:	2000      	movne	r0, #0
  403764:	4770      	bxne	lr
  403766:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
  40376a:	d104      	bne.n	403776 <__addsf3+0x126>
  40376c:	0040      	lsls	r0, r0, #1
  40376e:	bf28      	it	cs
  403770:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
  403774:	4770      	bx	lr
  403776:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
  40377a:	bf3c      	itt	cc
  40377c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
  403780:	4770      	bxcc	lr
  403782:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
  403786:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
  40378a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  40378e:	4770      	bx	lr
  403790:	ea7f 6222 	mvns.w	r2, r2, asr #24
  403794:	bf16      	itet	ne
  403796:	4608      	movne	r0, r1
  403798:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
  40379c:	4601      	movne	r1, r0
  40379e:	0242      	lsls	r2, r0, #9
  4037a0:	bf06      	itte	eq
  4037a2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
  4037a6:	ea90 0f01 	teqeq	r0, r1
  4037aa:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
  4037ae:	4770      	bx	lr

004037b0 <__aeabi_ui2f>:
  4037b0:	f04f 0300 	mov.w	r3, #0
  4037b4:	e004      	b.n	4037c0 <__aeabi_i2f+0x8>
  4037b6:	bf00      	nop

004037b8 <__aeabi_i2f>:
  4037b8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
  4037bc:	bf48      	it	mi
  4037be:	4240      	negmi	r0, r0
  4037c0:	ea5f 0c00 	movs.w	ip, r0
  4037c4:	bf08      	it	eq
  4037c6:	4770      	bxeq	lr
  4037c8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
  4037cc:	4601      	mov	r1, r0
  4037ce:	f04f 0000 	mov.w	r0, #0
  4037d2:	e01c      	b.n	40380e <__aeabi_l2f+0x2a>

004037d4 <__aeabi_ul2f>:
  4037d4:	ea50 0201 	orrs.w	r2, r0, r1
  4037d8:	bf08      	it	eq
  4037da:	4770      	bxeq	lr
  4037dc:	f04f 0300 	mov.w	r3, #0
  4037e0:	e00a      	b.n	4037f8 <__aeabi_l2f+0x14>
  4037e2:	bf00      	nop

004037e4 <__aeabi_l2f>:
  4037e4:	ea50 0201 	orrs.w	r2, r0, r1
  4037e8:	bf08      	it	eq
  4037ea:	4770      	bxeq	lr
  4037ec:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
  4037f0:	d502      	bpl.n	4037f8 <__aeabi_l2f+0x14>
  4037f2:	4240      	negs	r0, r0
  4037f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  4037f8:	ea5f 0c01 	movs.w	ip, r1
  4037fc:	bf02      	ittt	eq
  4037fe:	4684      	moveq	ip, r0
  403800:	4601      	moveq	r1, r0
  403802:	2000      	moveq	r0, #0
  403804:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
  403808:	bf08      	it	eq
  40380a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
  40380e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
  403812:	fabc f28c 	clz	r2, ip
  403816:	3a08      	subs	r2, #8
  403818:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
  40381c:	db10      	blt.n	403840 <__aeabi_l2f+0x5c>
  40381e:	fa01 fc02 	lsl.w	ip, r1, r2
  403822:	4463      	add	r3, ip
  403824:	fa00 fc02 	lsl.w	ip, r0, r2
  403828:	f1c2 0220 	rsb	r2, r2, #32
  40382c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  403830:	fa20 f202 	lsr.w	r2, r0, r2
  403834:	eb43 0002 	adc.w	r0, r3, r2
  403838:	bf08      	it	eq
  40383a:	f020 0001 	biceq.w	r0, r0, #1
  40383e:	4770      	bx	lr
  403840:	f102 0220 	add.w	r2, r2, #32
  403844:	fa01 fc02 	lsl.w	ip, r1, r2
  403848:	f1c2 0220 	rsb	r2, r2, #32
  40384c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
  403850:	fa21 f202 	lsr.w	r2, r1, r2
  403854:	eb43 0002 	adc.w	r0, r3, r2
  403858:	bf08      	it	eq
  40385a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
  40385e:	4770      	bx	lr

00403860 <__aeabi_fmul>:
  403860:	f04f 0cff 	mov.w	ip, #255	; 0xff
  403864:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
  403868:	bf1e      	ittt	ne
  40386a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
  40386e:	ea92 0f0c 	teqne	r2, ip
  403872:	ea93 0f0c 	teqne	r3, ip
  403876:	d06f      	beq.n	403958 <__aeabi_fmul+0xf8>
  403878:	441a      	add	r2, r3
  40387a:	ea80 0c01 	eor.w	ip, r0, r1
  40387e:	0240      	lsls	r0, r0, #9
  403880:	bf18      	it	ne
  403882:	ea5f 2141 	movsne.w	r1, r1, lsl #9
  403886:	d01e      	beq.n	4038c6 <__aeabi_fmul+0x66>
  403888:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
  40388c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
  403890:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
  403894:	fba0 3101 	umull	r3, r1, r0, r1
  403898:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
  40389c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
  4038a0:	bf3e      	ittt	cc
  4038a2:	0049      	lslcc	r1, r1, #1
  4038a4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
  4038a8:	005b      	lslcc	r3, r3, #1
  4038aa:	ea40 0001 	orr.w	r0, r0, r1
  4038ae:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
  4038b2:	2afd      	cmp	r2, #253	; 0xfd
  4038b4:	d81d      	bhi.n	4038f2 <__aeabi_fmul+0x92>
  4038b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
  4038ba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
  4038be:	bf08      	it	eq
  4038c0:	f020 0001 	biceq.w	r0, r0, #1
  4038c4:	4770      	bx	lr
  4038c6:	f090 0f00 	teq	r0, #0
  4038ca:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
  4038ce:	bf08      	it	eq
  4038d0:	0249      	lsleq	r1, r1, #9
  4038d2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
  4038d6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
  4038da:	3a7f      	subs	r2, #127	; 0x7f
  4038dc:	bfc2      	ittt	gt
  4038de:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
  4038e2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
  4038e6:	4770      	bxgt	lr
  4038e8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  4038ec:	f04f 0300 	mov.w	r3, #0
  4038f0:	3a01      	subs	r2, #1
  4038f2:	dc5d      	bgt.n	4039b0 <__aeabi_fmul+0x150>
  4038f4:	f112 0f19 	cmn.w	r2, #25
  4038f8:	bfdc      	itt	le
  4038fa:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
  4038fe:	4770      	bxle	lr
  403900:	f1c2 0200 	rsb	r2, r2, #0
  403904:	0041      	lsls	r1, r0, #1
  403906:	fa21 f102 	lsr.w	r1, r1, r2
  40390a:	f1c2 0220 	rsb	r2, r2, #32
  40390e:	fa00 fc02 	lsl.w	ip, r0, r2
  403912:	ea5f 0031 	movs.w	r0, r1, rrx
  403916:	f140 0000 	adc.w	r0, r0, #0
  40391a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
  40391e:	bf08      	it	eq
  403920:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
  403924:	4770      	bx	lr
  403926:	f092 0f00 	teq	r2, #0
  40392a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
  40392e:	bf02      	ittt	eq
  403930:	0040      	lsleq	r0, r0, #1
  403932:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
  403936:	3a01      	subeq	r2, #1
  403938:	d0f9      	beq.n	40392e <__aeabi_fmul+0xce>
  40393a:	ea40 000c 	orr.w	r0, r0, ip
  40393e:	f093 0f00 	teq	r3, #0
  403942:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  403946:	bf02      	ittt	eq
  403948:	0049      	lsleq	r1, r1, #1
  40394a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
  40394e:	3b01      	subeq	r3, #1
  403950:	d0f9      	beq.n	403946 <__aeabi_fmul+0xe6>
  403952:	ea41 010c 	orr.w	r1, r1, ip
  403956:	e78f      	b.n	403878 <__aeabi_fmul+0x18>
  403958:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
  40395c:	ea92 0f0c 	teq	r2, ip
  403960:	bf18      	it	ne
  403962:	ea93 0f0c 	teqne	r3, ip
  403966:	d00a      	beq.n	40397e <__aeabi_fmul+0x11e>
  403968:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
  40396c:	bf18      	it	ne
  40396e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
  403972:	d1d8      	bne.n	403926 <__aeabi_fmul+0xc6>
  403974:	ea80 0001 	eor.w	r0, r0, r1
  403978:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
  40397c:	4770      	bx	lr
  40397e:	f090 0f00 	teq	r0, #0
  403982:	bf17      	itett	ne
  403984:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
  403988:	4608      	moveq	r0, r1
  40398a:	f091 0f00 	teqne	r1, #0
  40398e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
  403992:	d014      	beq.n	4039be <__aeabi_fmul+0x15e>
  403994:	ea92 0f0c 	teq	r2, ip
  403998:	d101      	bne.n	40399e <__aeabi_fmul+0x13e>
  40399a:	0242      	lsls	r2, r0, #9
  40399c:	d10f      	bne.n	4039be <__aeabi_fmul+0x15e>
  40399e:	ea93 0f0c 	teq	r3, ip
  4039a2:	d103      	bne.n	4039ac <__aeabi_fmul+0x14c>
  4039a4:	024b      	lsls	r3, r1, #9
  4039a6:	bf18      	it	ne
  4039a8:	4608      	movne	r0, r1
  4039aa:	d108      	bne.n	4039be <__aeabi_fmul+0x15e>
  4039ac:	ea80 0001 	eor.w	r0, r0, r1
  4039b0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
  4039b4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  4039b8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  4039bc:	4770      	bx	lr
  4039be:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  4039c2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
  4039c6:	4770      	bx	lr

004039c8 <__aeabi_fdiv>:
  4039c8:	f04f 0cff 	mov.w	ip, #255	; 0xff
  4039cc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
  4039d0:	bf1e      	ittt	ne
  4039d2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
  4039d6:	ea92 0f0c 	teqne	r2, ip
  4039da:	ea93 0f0c 	teqne	r3, ip
  4039de:	d069      	beq.n	403ab4 <__aeabi_fdiv+0xec>
  4039e0:	eba2 0203 	sub.w	r2, r2, r3
  4039e4:	ea80 0c01 	eor.w	ip, r0, r1
  4039e8:	0249      	lsls	r1, r1, #9
  4039ea:	ea4f 2040 	mov.w	r0, r0, lsl #9
  4039ee:	d037      	beq.n	403a60 <__aeabi_fdiv+0x98>
  4039f0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  4039f4:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
  4039f8:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
  4039fc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
  403a00:	428b      	cmp	r3, r1
  403a02:	bf38      	it	cc
  403a04:	005b      	lslcc	r3, r3, #1
  403a06:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
  403a0a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
  403a0e:	428b      	cmp	r3, r1
  403a10:	bf24      	itt	cs
  403a12:	1a5b      	subcs	r3, r3, r1
  403a14:	ea40 000c 	orrcs.w	r0, r0, ip
  403a18:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
  403a1c:	bf24      	itt	cs
  403a1e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
  403a22:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  403a26:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
  403a2a:	bf24      	itt	cs
  403a2c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
  403a30:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  403a34:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
  403a38:	bf24      	itt	cs
  403a3a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
  403a3e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  403a42:	011b      	lsls	r3, r3, #4
  403a44:	bf18      	it	ne
  403a46:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
  403a4a:	d1e0      	bne.n	403a0e <__aeabi_fdiv+0x46>
  403a4c:	2afd      	cmp	r2, #253	; 0xfd
  403a4e:	f63f af50 	bhi.w	4038f2 <__aeabi_fmul+0x92>
  403a52:	428b      	cmp	r3, r1
  403a54:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
  403a58:	bf08      	it	eq
  403a5a:	f020 0001 	biceq.w	r0, r0, #1
  403a5e:	4770      	bx	lr
  403a60:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
  403a64:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
  403a68:	327f      	adds	r2, #127	; 0x7f
  403a6a:	bfc2      	ittt	gt
  403a6c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
  403a70:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
  403a74:	4770      	bxgt	lr
  403a76:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  403a7a:	f04f 0300 	mov.w	r3, #0
  403a7e:	3a01      	subs	r2, #1
  403a80:	e737      	b.n	4038f2 <__aeabi_fmul+0x92>
  403a82:	f092 0f00 	teq	r2, #0
  403a86:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
  403a8a:	bf02      	ittt	eq
  403a8c:	0040      	lsleq	r0, r0, #1
  403a8e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
  403a92:	3a01      	subeq	r2, #1
  403a94:	d0f9      	beq.n	403a8a <__aeabi_fdiv+0xc2>
  403a96:	ea40 000c 	orr.w	r0, r0, ip
  403a9a:	f093 0f00 	teq	r3, #0
  403a9e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  403aa2:	bf02      	ittt	eq
  403aa4:	0049      	lsleq	r1, r1, #1
  403aa6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
  403aaa:	3b01      	subeq	r3, #1
  403aac:	d0f9      	beq.n	403aa2 <__aeabi_fdiv+0xda>
  403aae:	ea41 010c 	orr.w	r1, r1, ip
  403ab2:	e795      	b.n	4039e0 <__aeabi_fdiv+0x18>
  403ab4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
  403ab8:	ea92 0f0c 	teq	r2, ip
  403abc:	d108      	bne.n	403ad0 <__aeabi_fdiv+0x108>
  403abe:	0242      	lsls	r2, r0, #9
  403ac0:	f47f af7d 	bne.w	4039be <__aeabi_fmul+0x15e>
  403ac4:	ea93 0f0c 	teq	r3, ip
  403ac8:	f47f af70 	bne.w	4039ac <__aeabi_fmul+0x14c>
  403acc:	4608      	mov	r0, r1
  403ace:	e776      	b.n	4039be <__aeabi_fmul+0x15e>
  403ad0:	ea93 0f0c 	teq	r3, ip
  403ad4:	d104      	bne.n	403ae0 <__aeabi_fdiv+0x118>
  403ad6:	024b      	lsls	r3, r1, #9
  403ad8:	f43f af4c 	beq.w	403974 <__aeabi_fmul+0x114>
  403adc:	4608      	mov	r0, r1
  403ade:	e76e      	b.n	4039be <__aeabi_fmul+0x15e>
  403ae0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
  403ae4:	bf18      	it	ne
  403ae6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
  403aea:	d1ca      	bne.n	403a82 <__aeabi_fdiv+0xba>
  403aec:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
  403af0:	f47f af5c 	bne.w	4039ac <__aeabi_fmul+0x14c>
  403af4:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
  403af8:	f47f af3c 	bne.w	403974 <__aeabi_fmul+0x114>
  403afc:	e75f      	b.n	4039be <__aeabi_fmul+0x15e>
  403afe:	bf00      	nop

00403b00 <__aeabi_f2uiz>:
  403b00:	0042      	lsls	r2, r0, #1
  403b02:	d20e      	bcs.n	403b22 <__aeabi_f2uiz+0x22>
  403b04:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
  403b08:	d30b      	bcc.n	403b22 <__aeabi_f2uiz+0x22>
  403b0a:	f04f 039e 	mov.w	r3, #158	; 0x9e
  403b0e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
  403b12:	d409      	bmi.n	403b28 <__aeabi_f2uiz+0x28>
  403b14:	ea4f 2300 	mov.w	r3, r0, lsl #8
  403b18:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  403b1c:	fa23 f002 	lsr.w	r0, r3, r2
  403b20:	4770      	bx	lr
  403b22:	f04f 0000 	mov.w	r0, #0
  403b26:	4770      	bx	lr
  403b28:	f112 0f61 	cmn.w	r2, #97	; 0x61
  403b2c:	d101      	bne.n	403b32 <__aeabi_f2uiz+0x32>
  403b2e:	0242      	lsls	r2, r0, #9
  403b30:	d102      	bne.n	403b38 <__aeabi_f2uiz+0x38>
  403b32:	f04f 30ff 	mov.w	r0, #4294967295
  403b36:	4770      	bx	lr
  403b38:	f04f 0000 	mov.w	r0, #0
  403b3c:	4770      	bx	lr
  403b3e:	bf00      	nop

00403b40 <__libc_init_array>:
  403b40:	b570      	push	{r4, r5, r6, lr}
  403b42:	4e0f      	ldr	r6, [pc, #60]	; (403b80 <__libc_init_array+0x40>)
  403b44:	4d0f      	ldr	r5, [pc, #60]	; (403b84 <__libc_init_array+0x44>)
  403b46:	1b76      	subs	r6, r6, r5
  403b48:	10b6      	asrs	r6, r6, #2
  403b4a:	bf18      	it	ne
  403b4c:	2400      	movne	r4, #0
  403b4e:	d005      	beq.n	403b5c <__libc_init_array+0x1c>
  403b50:	3401      	adds	r4, #1
  403b52:	f855 3b04 	ldr.w	r3, [r5], #4
  403b56:	4798      	blx	r3
  403b58:	42a6      	cmp	r6, r4
  403b5a:	d1f9      	bne.n	403b50 <__libc_init_array+0x10>
  403b5c:	4e0a      	ldr	r6, [pc, #40]	; (403b88 <__libc_init_array+0x48>)
  403b5e:	4d0b      	ldr	r5, [pc, #44]	; (403b8c <__libc_init_array+0x4c>)
  403b60:	1b76      	subs	r6, r6, r5
  403b62:	f001 f94d 	bl	404e00 <_init>
  403b66:	10b6      	asrs	r6, r6, #2
  403b68:	bf18      	it	ne
  403b6a:	2400      	movne	r4, #0
  403b6c:	d006      	beq.n	403b7c <__libc_init_array+0x3c>
  403b6e:	3401      	adds	r4, #1
  403b70:	f855 3b04 	ldr.w	r3, [r5], #4
  403b74:	4798      	blx	r3
  403b76:	42a6      	cmp	r6, r4
  403b78:	d1f9      	bne.n	403b6e <__libc_init_array+0x2e>
  403b7a:	bd70      	pop	{r4, r5, r6, pc}
  403b7c:	bd70      	pop	{r4, r5, r6, pc}
  403b7e:	bf00      	nop
  403b80:	00404e0c 	.word	0x00404e0c
  403b84:	00404e0c 	.word	0x00404e0c
  403b88:	00404e14 	.word	0x00404e14
  403b8c:	00404e0c 	.word	0x00404e0c

00403b90 <register_fini>:
  403b90:	4b02      	ldr	r3, [pc, #8]	; (403b9c <register_fini+0xc>)
  403b92:	b113      	cbz	r3, 403b9a <register_fini+0xa>
  403b94:	4802      	ldr	r0, [pc, #8]	; (403ba0 <register_fini+0x10>)
  403b96:	f000 b805 	b.w	403ba4 <atexit>
  403b9a:	4770      	bx	lr
  403b9c:	00000000 	.word	0x00000000
  403ba0:	00403bb1 	.word	0x00403bb1

00403ba4 <atexit>:
  403ba4:	2300      	movs	r3, #0
  403ba6:	4601      	mov	r1, r0
  403ba8:	461a      	mov	r2, r3
  403baa:	4618      	mov	r0, r3
  403bac:	f000 b814 	b.w	403bd8 <__register_exitproc>

00403bb0 <__libc_fini_array>:
  403bb0:	b538      	push	{r3, r4, r5, lr}
  403bb2:	4d07      	ldr	r5, [pc, #28]	; (403bd0 <__libc_fini_array+0x20>)
  403bb4:	4c07      	ldr	r4, [pc, #28]	; (403bd4 <__libc_fini_array+0x24>)
  403bb6:	1b2c      	subs	r4, r5, r4
  403bb8:	10a4      	asrs	r4, r4, #2
  403bba:	d005      	beq.n	403bc8 <__libc_fini_array+0x18>
  403bbc:	3c01      	subs	r4, #1
  403bbe:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  403bc2:	4798      	blx	r3
  403bc4:	2c00      	cmp	r4, #0
  403bc6:	d1f9      	bne.n	403bbc <__libc_fini_array+0xc>
  403bc8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  403bcc:	f001 b922 	b.w	404e14 <_fini>
  403bd0:	00404e24 	.word	0x00404e24
  403bd4:	00404e20 	.word	0x00404e20

00403bd8 <__register_exitproc>:
  403bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  403bdc:	4c25      	ldr	r4, [pc, #148]	; (403c74 <__register_exitproc+0x9c>)
  403bde:	6825      	ldr	r5, [r4, #0]
  403be0:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
  403be4:	4606      	mov	r6, r0
  403be6:	4688      	mov	r8, r1
  403be8:	4692      	mov	sl, r2
  403bea:	4699      	mov	r9, r3
  403bec:	b3c4      	cbz	r4, 403c60 <__register_exitproc+0x88>
  403bee:	6860      	ldr	r0, [r4, #4]
  403bf0:	281f      	cmp	r0, #31
  403bf2:	dc17      	bgt.n	403c24 <__register_exitproc+0x4c>
  403bf4:	1c43      	adds	r3, r0, #1
  403bf6:	b176      	cbz	r6, 403c16 <__register_exitproc+0x3e>
  403bf8:	eb04 0580 	add.w	r5, r4, r0, lsl #2
  403bfc:	2201      	movs	r2, #1
  403bfe:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
  403c02:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
  403c06:	4082      	lsls	r2, r0
  403c08:	4311      	orrs	r1, r2
  403c0a:	2e02      	cmp	r6, #2
  403c0c:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
  403c10:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
  403c14:	d01e      	beq.n	403c54 <__register_exitproc+0x7c>
  403c16:	3002      	adds	r0, #2
  403c18:	6063      	str	r3, [r4, #4]
  403c1a:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
  403c1e:	2000      	movs	r0, #0
  403c20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403c24:	4b14      	ldr	r3, [pc, #80]	; (403c78 <__register_exitproc+0xa0>)
  403c26:	b303      	cbz	r3, 403c6a <__register_exitproc+0x92>
  403c28:	f44f 70c8 	mov.w	r0, #400	; 0x190
  403c2c:	f3af 8000 	nop.w
  403c30:	4604      	mov	r4, r0
  403c32:	b1d0      	cbz	r0, 403c6a <__register_exitproc+0x92>
  403c34:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
  403c38:	2700      	movs	r7, #0
  403c3a:	e880 0088 	stmia.w	r0, {r3, r7}
  403c3e:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  403c42:	4638      	mov	r0, r7
  403c44:	2301      	movs	r3, #1
  403c46:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  403c4a:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
  403c4e:	2e00      	cmp	r6, #0
  403c50:	d0e1      	beq.n	403c16 <__register_exitproc+0x3e>
  403c52:	e7d1      	b.n	403bf8 <__register_exitproc+0x20>
  403c54:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
  403c58:	430a      	orrs	r2, r1
  403c5a:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  403c5e:	e7da      	b.n	403c16 <__register_exitproc+0x3e>
  403c60:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
  403c64:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  403c68:	e7c1      	b.n	403bee <__register_exitproc+0x16>
  403c6a:	f04f 30ff 	mov.w	r0, #4294967295
  403c6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403c72:	bf00      	nop
  403c74:	00404dfc 	.word	0x00404dfc
  403c78:	00000000 	.word	0x00000000

00403c7c <oCRAExtended_22ptBitmaps>:
  403c7c:	ffff3030 30303030 3030ffff ffff0c0c     00..0000..00....
  403c8c:	0c0c0c0c 0c0cffff 00000000 00000000     ................
	...
  403ca4:	e0800000 030f3c70 70e08000 01030f3c     ....p<.....p<...
  403cb4:	00000000 00010706 00000000 00000000     ................
  403cc4:	0303fffe 03030303 feff0303 0000ffff     ................
  403cd4:	00000000 ffff0000 06060703 06060606     ................
  403ce4:	03070606 03030303 00ffff03 00000000     ................
  403cf4:	00000000 00ffff00 f8f80000 06060606     ................
  403d04:	06070706 07070606 03030303 03030303     ................
  403d14:	feff0303 0303fffe 03030303 01030303     ................
  403d24:	06060707 06060606 06060606 03030303     ................
  403d34:	03030303 feff0303 03030000 03030303     ................
  403d44:	fcff0303 06060606 06060606 03070606     ................
  403d54:	00ffff00 00000000 00fcfc00 0c0f0f00     ................
  403d64:	0c0c0c0c 0cffff0c 00000000 00000000     ................
  403d74:	00070700 ffff0000 03030303 03030303     ................
  403d84:	03030000 03030303 feff0303 06070303     ................
  403d94:	06060606 03070606 0003ffff 00000000     ................
  403da4:	00000000 0c0cffff 0c0c0c0c fcfc0c0c     ................
  403db4:	06060707 06060606 07070606 03030707     ................
  403dc4:	03030303 ffff0303 00000000 0efcf800     ................
  403dd4:	00010306 00000000 00070700 00000000     ................
  403de4:	ffff0000 03030303 0000ffff 0303fffe     ................
  403df4:	03030303 feff0303 06060703 06060606     ................
  403e04:	03070606 8383ffff 83838383 ffff8383     ................
  403e14:	01010101 01010101 ffff0101 00000000     ................
  403e24:	00000000 07070600 00000000 78787878     ............xxxx
	...
  403e3c:	78787878 00000000 00000000 00000000     xxxx............
  403e4c:	00000000 c0000000 f87f7ff8 000000c0     ................
  403e5c:	3ffce000 33303033 00e0fc3f 00000707     ...?3003?.......
  403e6c:	00000000 07070000 0303ffff 03030303     ................
  403e7c:	f8fe8603 0303ffff 03030303 fcff0703     ................
  403e8c:	06060707 06060606 00030306 1e78e080     ..............x.
  403e9c:	03030307 03030303 c0f03f0f 00000000     .........?......
  403eac:	00000000 03000000 06060607 06060606     ................
  403ebc:	ffff0303 07030303 80e0781e ffff0000     .........x......
  403ecc:	00000000 0f3ff0c0 07070606 07060606     ......?.........
  403edc:	00000003 0303ffff 03030303 03030303     ................
  403eec:	0303ffff 00030303 00000000 06060707     ................
  403efc:	06060606 06060606 c3c3ffff c3c3c3c3     ................
  403f0c:	0303c3c3 0000ffff 00000000 00000000     ................
  403f1c:	00000707 00000000 00000000 1c38e0c0     ..............8.
  403f2c:	0303070e 03030303 0000ffff 0c0c0000     ................
  403f3c:	fcfc0c0c 06060301 06060606 01030606     ................
  403f4c:	0000ffff 00000000 ffff0000 0303ffff     ................
  403f5c:	03030303 ffff0303 00000707 00000000     ................
  403f6c:	07070000 03030303 03ffff03 03030303     ................
  403f7c:	00000000 00ffff00 00000000 06060606     ................
  403f8c:	06070706 06060606 00000000 00000000     ................
  403f9c:	00ffff00 00fcfc00 00000000 00ffff00     ................
  403fac:	06030100 06060606 00010306 8000ffff     ................
  403fbc:	183060c0 0103060c 0d0fffff c0603018     .`0..........0`.
  403fcc:	00000080 00000707 00000000 04060301     ................
  403fdc:	0000ffff 00000000 00000000 0000ffff     ................
	...
  403ff4:	06060707 06060606 06060606 1c0fffff     ................
  404004:	78e0e078 ffff0e1c 0000ffff 00010100     x..x............
  404014:	ffff0000 00000707 00000000 07070000     ................
  404024:	7c1effff 0000c0f0 ffff0000 0000ffff     ...|............
  404034:	7c1f0701 ffffc0f0 00000707 00000000     ...|............
  404044:	07070301 3ef8e080 0f03030f 80e0f83e     .......>....>...
  404054:	e0f83f0f 80000080 0f3ff8e0 03000000     .?........?.....
  404064:	07060607 00000003 0303ffff 03030303     ................
  404074:	fcfe0303 0c0cffff 0c0c0c0c 03070c0c     ................
  404084:	00000707 00000000 00000000 8383ffff     ................
  404094:	83838383 7cfe8383 0101ffff 3d0f0301     .......|.......=
  4040a4:	0080e171 00000707 00000000 06070100     q...............
  4040b4:	e3731f0e 030383c3 0e0f0303 00008080     ..s.............
  4040c4:	1c0e0301 80c07038 06060703 06060606     ....8p..........
  4040d4:	03070606 03030f0f 03ffff03 0f0f0303     ................
  4040e4:	00000000 00ffff00 00000000 00000000     ................
  4040f4:	00070700 00000000 c080ffff 60606060     ............````
  404104:	0080c060 0081ffff 00000000 ffff0000     `...............
  404114:	03030707 06060606 00010306 fefe6060     ............``..
  404124:	60606060 00606060 ffff0000 00000000     ```````.........
  404134:	80800000 03010000 06060606 01030706     ................

00404144 <oCRAExtended_22ptDescriptors>:
  404144:	0000030c 00000000 00000000 00000000     ................
	...
  404174:	0024030c 0048030c 006c030c 0090030c     ..$...H...l.....
  404184:	00b4030c 00d8030c 00fc030c 0120030c     .............. .
  404194:	0144030c 0168030c 018c030c 01b0030c     ..D...h.........
	...
  4041bc:	01d4030c 01f8030c 021c030c 0240030c     ..............@.
  4041cc:	0264030c 0288030c 02ac030c 02d0030c     ..d.............
  4041dc:	02f4030c 0318030c 033c030c 0360030c     ..........<...`.
  4041ec:	0384030c 03a8030c 03cc030c 03f0030c     ................
  4041fc:	00000000 0414030c 0438030c 045c030c     ..........8...\.
	...
  404240:	0480030c 00000000 00000000 00000000     ................
	...
  404288:	04a4030c                                ....

0040428c <oCRAExtended_18ptBitmaps>:
  40428c:	ffff1818 ff181818 031818ff 031f1f03     ................
  40429c:	1f1f0303 00000303 c0000000 0f1c78e0     .............x..
  4042ac:	3870c003 0003071e 00000000 0303fffe     ..p8............
  4042bc:	03030303 7ffeff03 c0c0c0ff c0c0c0c0     ................
  4042cc:	03007fff ff030303 000000ff c0c00000     ................
  4042dc:	ffffc0c0 fefec0c0 83838303 83838383     ................
  4042ec:	fffeff83 c1c1c1ff c1c1c1c1 0303c0c1     ................
  4042fc:	83838383 7eff8383 c1c0c000 c1c1c1c1     .......~........
  40430c:	007effc1 00ffff00 fc000000 000000fc     ..~.............
  40431c:	06060707 ffff0606 00000006 8383ffff     ................
  40432c:	83838383 e1606003 c1c1c1c1 7fffc1c1     .....``.........
  40433c:	0003ffff 00000000 ff000000 c6c6c6ff     ................
  40434c:	c6c6c6c6 0700fefe 03030307 ff830303     ................
  40435c:	0000007f fefe0000 00000103 ffff8000     ................
  40436c:	ff838383 7f0080ff c1c1c1ff c1c1c1c1     ................
  40437c:	7f7f7fff 63636363 ff636363 000000ff     ....ccccccc.....
  40438c:	00000000 ffffc000 00000000 00707070     ............ppp.
  40439c:	00000000 1c000000 00001c1c 00000000     ................
  4043ac:	1ffce000 0000e0fc 3ff8e000 0c0c0c0f     ...........?....
  4043bc:	e0f83f0f 8383ffff c7838383 ff007cfe     .?...........|..
  4043cc:	c1c1c1ff 7fe3c1c1 f0c0003e 03030e3c     ........>...<...
  4043dc:	03030303 3c0f0300 c0c0c070 00c0c0c0     .......<p.......
  4043ec:	ffff0303 3c0e0303 c000c0f0 c0ffffc0     .......<........
  4043fc:	0f3c70c0 ffff0003 83838383 03030303     .p<.............
  40440c:	c1ffff00 c0c1c1c1 00c0c0c0 6363ffff     ..............cc
  40441c:	63636363 ff000303 000000ff 00000000     cccc............
  40442c:	f0e00000 03060c18 03030303 c0ff7f03     ................
  40443c:	c6c6c0c0 7efec6c6 8080ffff 80808080     .......~........
  40444c:	ffffff80 010101ff 01010101 0303ffff     ................
  40445c:	ffff0303 03030303 c0c0c000 c0ffffc0     ................
  40446c:	00c0c0c0 00000000 ff000000 000000ff     ................
  40447c:	c0c0fe7e 7fffc0c0 ffff0000 183060c0     ~............`0.
  40448c:	0103060c 01ffff00 380c0603 0080c060     ...........8`...
  40449c:	0000ffff 00000000 ff000000 c0c0c0ff     ................
  4044ac:	c0c0c0c0 ffffc0c0 70701c0e ffff0e1c     ..........pp....
  4044bc:	00ffff00 00000000 00ffff00 3c0fffff     ...............<
  4044cc:	0080c0f0 ffffff00 000000ff 781e0701     ...............x
  4044dc:	f0c0ffff 03071e3c f03c1e07 3c0f03c0     ....<.....<....<
  4044ec:	e0c0e078 030f3c78 0303ffff 03030303     x...x<..........
  4044fc:	fffeff03 030303ff 03030303 ffff0101     ................
  40450c:	e3636363 7f6363e3 00ffff3e 07010000     ccc..cc.>.......
  40451c:	c0f0380e 63331f0e 030383c3 700e0f03     .8....3c.......p
  40452c:	c0c0c0f0 ccc6c3c1 0f0070f8 ff03030f     .........p......
  40453c:	0f0303ff 0000000f ffff0000 00000000     ................
  40454c:	3060ffff 30303030 ffc0e070 c0c060ff     ..`00000p....`..
  40455c:	e0c0c0c0 30303f7f 3030fefe 00303030     .....?00..00000.
  40456c:	7f000000 c0c0c0ff 0070f0c0              ..........p.

00404578 <oCRAExtended_28ptBitmaps>:
  404578:	e0e0e000 e0ffffff ffffffe0 00e0e0e0     ................
  404588:	70707000 70ffffff ffffff70 00707070     .ppp...pp...ppp.
  404598:	00000000 000f0f0f 0f0f0f00 00000000     ................
	...
  4045b0:	fcf0c000 00071f7f 00000000 fcf0c080     ................
  4045c0:	01030f3f 00000000 fef8e000 00030f3f     ?...........?...
	...
  4045d8:	fffffe00 07070707 07070707 00feffff     ................
  4045e8:	ffffff00 00000000 00000000 00ffffff     ................
  4045f8:	ffff7f00 e0e0e0e0 e0e0e0e0 007fffff     ................
  404608:	07070700 ff070707 0000ffff 00000000     ................
  404618:	00000000 ff000000 0000ffff e0e0e000     ................
  404628:	e0e0e000 ffe0e0e0 e0e0ffff ffffffe0     ................
  404638:	07070700 07070707 07070707 00feffff     ................
  404648:	fcfcf800 1c1c1c1c 1c1c1c1c 000f1f1f     ................
  404658:	ffffff00 e0e0e0e0 e0e0e0e0 00e0e0e0     ................
  404668:	07070700 07070707 07070707 feffff07     ................
  404678:	00000000 1c1c1c1c 1c1c1c1c e7ffff1c     ................
  404688:	e0e0e000 e0e0e0e0 e0e0e0e0 7fffffe0     ................
  404698:	ffff0000 000000ff f8000000 0000f8f8     ................
  4046a8:	ffff0000 e0e0e0ff ffe0e0e0 e0e0ffff     ................
	...
  4046c0:	ff000000 0000ffff 00000000 07ffffff     ................
  4046d0:	07070707 00070707 00000000 1c1f1f1f     ................
  4046e0:	1c1c1c1c 00f8fcfc 70707000 e0e0e0e0     .........ppp....
  4046f0:	e0e0e0e0 007fffff ffffff00 00000707     ................
	...
  404708:	ffffff00 e0e0e0e0 e0e0e0e0 00e0e0e0     ................
  404718:	ffffff00 e0e0e0e0 e0e0e0e0 00ffffff     ................
  404728:	0f0f0f00 07070707 07070707 ffffff07     ................
  404738:	00000000 c0000000 3c78f0e0 07070f1e     ..........x<....
  404748:	00000000 ff000000 0000ffff 00000000     ................
  404758:	00000000 07ffffff ffffff07 00000000     ................
  404768:	fcfcf800 1c1f1f1f 1f1f1f1c 00f8fcfc     ................
  404778:	ffff7f00 e0e0e0e0 e0e0e0e0 007fffff     ................
  404788:	ffffff00 07070707 07070707 00ffffff     ................
  404798:	07070700 07070707 07070707 00ffffff     ................
	...
  4047b0:	e0c00000 00ffffff 00000000 f0f0f000     ................
  4047c0:	0000f0f0 00000000 00000000 c1c1c100     ................
  4047d0:	0000c1c1 00000000 00000000 07070700     ................
  4047e0:	00000707 00000000 00000000 fffee000     ................
  4047f0:	00e0feff 00000000 f0000000 011ffffe     ................
  404800:	feff1f01 000000e0 fffff000 0707071f     ................
  404810:	1f070707 00f0ffff ffffff00 07070707     ................
  404820:	07070707 f8fcfe0f ffffff00 1c1c1c1c     ................
  404830:	1c1c1c1c c1f7ff3e ffffff00 e0e0e0e0     ....>...........
  404840:	e0e0e0e0 0f3f7f70 e0800000 0f3efcf8     ....p.?.......>.
  404850:	07070707 07070707 ffff7e00 000000c3     .........~......
	...
  404868:	07010000 f07c3f1f e0e0e0e0 e0e0e0e0     .....?|.........
  404878:	07070700 07ffffff fe3e0f07 0080e0f8     ..........>.....
  404888:	00000000 00ffffff 00000000 7effffc3     ...............~
  404898:	e0e0e000 e0ffffff 3f7cf0e0 0001071f     ..........|?....
  4048a8:	ffffff00 07070707 07070707 07070707     ................
  4048b8:	ffffff00 1c1c1c1c 00001c1c 00000000     ................
  4048c8:	ffffff00 e0e0e0e0 e0e0e0e0 e0e0e0e0     ................
  4048d8:	ffffff00 07070707 07070707 07070707     ................
  4048e8:	ffffff00 07070707 07070707 00000007     ................
  4048f8:	ffffff00 00000000 00000000 00000000     ................
  404908:	e0800000 1f3e78f0 07070707 00070707     .....x>.........
  404918:	ffffff00 00000001 e0e0e0e0 00e0e0e0     ................
  404928:	ff7f3f00 e0e0e0e0 e0e0e0e0 003f7fff     .?............?.
  404938:	fefffe00 00000000 00000000 00fefffe     ................
  404948:	ffffff00 1c1c1c1c 1c1c1c1c 00ffffff     ................
  404958:	7fff7f00 00000000 00000000 007fff7f     ................
  404968:	07070702 ffff0707 070707ff 00020707     ................
  404978:	00000000 ffff0000 000000ff 00000000     ................
  404988:	e0e0e040 ffffe0e0 e0e0e0ff 0040e0e0     @.............@.
	...
  4049a0:	ff000000 0000ffff e0e00000 000000e0     ................
  4049b0:	ff000000 0000ffff 7f1f0000 e0e0e0ff     ................
  4049c0:	ffe0e0e0 00003f7f ffffff00 c0808000     .....?..........
  4049d0:	3c78f0e0 03070f1e ffffff00 c1e3f77f     ..x<............
  4049e0:	00000080 00000000 ffffff00 03010000     ................
  4049f0:	3c1e0f07 c0e0f078 ffffff00 00000000     ...<x...........
	...
  404a08:	ffffff00 00000000 00000000 00000000     ................
  404a18:	ffffff00 e0e0e0e0 e0e0e0e0 00e0e0e0     ................
  404a28:	ffffff00 e0fc7f1f ff1f7ffc 0000ffff     ................
  404a38:	ffffff00 07070000 ff000007 0000ffff     ................
  404a48:	ffffff00 00000000 ff000000 0000ffff     ................
  404a58:	ffffff00 c0f8fe3f 00000000 00ffffff     ....?...........
  404a68:	ffffff00 7f0f0100 0080f0fe 00ffffff     ................
  404a78:	ffffff00 00000000 fc7f1f03 00ffffff     ................
  404a88:	e0800000 071f7ef8 f8fe1f07 000080e0     .....~..........
  404a98:	ffff7e00 000000c3 c3000000 007effff     .~............~.
  404aa8:	07010000 e0f87f1f 1f7ff8e0 00000107     ................
  404ab8:	ffffff00 07070707 07070707 00fcfeff     ................
  404ac8:	ffffff00 70707070 70707070 001f3f7f     ....pppppppp.?..
  404ad8:	ffffff00 00000000 00000000 00000000     ................
  404ae8:	ffffff00 07070707 07070707 00fcfeff     ................
  404af8:	ffffff00 3f1f0707 07c7f7ff 00010307     .......?........
  404b08:	ffffff00 00000000 3f0f0300 00e0f87e     ...........?~...
  404b18:	ff7e1c00 0787c7e7 07070707 003c3e3f     ..~.........?><.
  404b28:	00000000 3e0f0703 c0e0f07c 00000000     .......>|.......
  404b38:	fc7c3c00 e0e0e0e0 e7e3e1e0 0038feff     .<|...........8.
  404b48:	3f3f3f00 ff070707 0707ffff 3f3f3f07     .???.........???
  404b58:	00000000 ff000000 0000ffff 00000000     ................
  404b68:	00000000 ff000000 0000ffff 00000000     ................
  404b78:	ffffff00 80800000 80808080 00000000     ................
  404b88:	ffffff00 0303070e 07030303 00fcfeff     ................
  404b98:	ffffff00 e0e07038 f0e0e0e0 001f3f7f     ....8p.......?..

00404ba8 <oCRAExtended_28ptDescriptors>:
  404ba8:	00000310 00000000 00000000 00000000     ................
	...
  404bd8:	00300310 00600310 00900310 00c00310     ..0...`.........
  404be8:	00f00310 01200310 01500310 01800310     ...... ...P.....
  404bf8:	01b00310 01e00310 02100310 02400310     ..............@.
	...
  404c20:	02700310 02a00310 02d00310 03000310     ..p.............
  404c30:	03300310 03600310 03900310 03c00310     ..0...`.........
  404c40:	03f00310 04200310 04500310 04800310     ...... ...P.....
  404c50:	04b00310 04e00310 05100310 05400310     ..............@.
  404c60:	00000000 05700310 05a00310 05d00310     ......p.........
	...
  404ca4:	06000310                                ....

00404ca8 <oCRAExtended_18ptDescriptors>:
  404ca8:	0000020b 00000000 00000000 00000000     ................
	...
  404cd8:	0016020b 002c020b 0042020b 0058020b     ......,...B...X.
  404ce8:	006e020b 0084020b 009a020b 00b0020b     ..n.............
  404cf8:	00c6020b 00dc020b 00f2020b 0108020b     ................
	...
  404d20:	011e020b 0134020b 014a020b 0160020b     ......4...J...`.
  404d30:	0176020b 018c020b 01a2020b 01b8020b     ..v.............
  404d40:	01ce020b 01e4020b 01fa020b 0210020b     ................
  404d50:	0226020b 023c020b 0252020b 0268020b     ..&...<...R...h.
  404d60:	00000000 027e020b 0294020b 02aa020b     ......~.........
	...
  404da4:	02c0020b 00000000 00000000 00000000     ................
	...
  404dec:	02d6020b 0000080f 00ffff06 00000043     ............C...

00404dfc <_global_impure_ptr>:
  404dfc:	20000200                                ... 

00404e00 <_init>:
  404e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  404e02:	bf00      	nop
  404e04:	bcf8      	pop	{r3, r4, r5, r6, r7}
  404e06:	bc08      	pop	{r3}
  404e08:	469e      	mov	lr, r3
  404e0a:	4770      	bx	lr

00404e0c <__init_array_start>:
  404e0c:	00403b91 	.word	0x00403b91

00404e10 <__frame_dummy_init_array_entry>:
  404e10:	004000e5                                ..@.

00404e14 <_fini>:
  404e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  404e16:	bf00      	nop
  404e18:	bcf8      	pop	{r3, r4, r5, r6, r7}
  404e1a:	bc08      	pop	{r3}
  404e1c:	469e      	mov	lr, r3
  404e1e:	4770      	bx	lr

00404e20 <__fini_array_start>:
  404e20:	004000c1 	.word	0x004000c1

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	d1fb      	bne.n	20000000 <portable_delay_cycles>
20000008:	4770      	bx	lr
2000000a:	bf00      	nop

2000000c <curr_display>:
2000000c:	0007 0000                                   ....

20000010 <notes_lookup>:
20000010:	0000 4040 54ca 4045 a993 404a fe5d 404f     ..@@.TE@..J@].O@
20000020:	5326 4055 a7f0 405a fcb9 405f 5183 4065     &SU@..Z@.._@.Qe@
20000030:	a64c 406a fb16 406f 4fdf 4075 a4a9 407a     L.j@..o@.Ou@..z@
20000040:	0000 4080 aa65 4082 54ca 4085 ff2e 4087     ...@e..@.T.@...@
20000050:	a993 408a 53f8 408d fe5d 408f a8c1 4092     ...@.S.@]..@...@
20000060:	5326 4095 fd8b 4097 a7f0 409a 5254 409d     &S.@...@...@TR.@
20000070:	0000 40a0 aa65 40a2 54ca 40a5 ff2e 40a7     ...@e..@.T.@...@
20000080:	a993 40aa 53f8 40ad fe5d 40af a8c1 40b2     ...@.S.@]..@...@
20000090:	5326 40b5 fd8b 40b7 a7f0 40ba 5254 40bd     &S.@...@...@TR.@
200000a0:	0000 40c0 aa65 40c2 54ca 40c5 ff2e 40c7     ...@e..@.T.@...@
200000b0:	a993 40ca 53f8 40cd fe5d 40cf a8c1 40d2     ...@.S.@]..@...@
200000c0:	5326 40d5 fd8b 40d7 a7f0 40da 5254 40dd     &S.@...@...@TR.@
200000d0:	0000 40e0 aa65 40e2 54ca 40e5 ff2e 40e7     ...@e..@.T.@...@
200000e0:	a993 40ea 53f8 40ed fe5d 40ef a8c1 40f2     ...@.S.@]..@...@
200000f0:	5326 40f5 fd8b 40f7 a7f0 40fa 5254 40fd     &S.@...@...@TR.@
20000100:	0000 4100 5532 4101 aa65 4102 ff97 4103     ...A2U.Ae..A...A
20000110:	54ca 4105 a9fc 4106 ff2e 4107 5461 4109     .T.A...A...AaT.A
20000120:	a993 410a fec5 410b 53f8 410d a92a 410e     ...A...A.S.A*..A
20000130:	0000 4110 5532 4111 aa65 4112 ff97 4113     ...A2U.Ae..A...A
20000140:	54ca 4115 a9fc 4116 ff2e 4117 5461 4119     .T.A...A...AaT.A
20000150:	a993 411a fec5 411b 53f8 411d a92a 411e     ...A...A.S.A*..A
20000160:	0000 4120 5532 4121 aa65 4122 ff97 4123     .. A2U!Ae."A..#A
20000170:	54ca 4125 a9fc 4126 ff2e 4127 5461 4129     .T%A..&A..'AaT)A
20000180:	a993 412a fec5 412b 53f8 412d a92a 412e     ..*A..+A.S-A*..A
20000190:	0000 4130 5532 4131 aa65 4132 ff97 4133     ..0A2U1Ae.2A..3A
200001a0:	54ca 4135 a9fc 4136 ff2e 4137 5461 4139     .T5A..6A..7AaT9A
200001b0:	a993 413a fec5 413b 53f8 413d a92a 413e     ..:A..;A.S=A*.>A
200001c0:	0000 4140 5532 4141 aa65 4142 ff97 4143     ..@A2UAAe.BA..CA
200001d0:	54ca 4145 a9fc 4146 ff2e 4147 5461 4149     .TEA..FA..GAaTIA
200001e0:	a993 414a fec5 414b 53f8 414d a92a 414e     ..JA..KA.SMA*.NA
200001f0:	0000 4150                                   ..PA

200001f4 <g_interrupt_enabled>:
200001f4:	0001 0000                                   ....

200001f8 <SystemCoreClock>:
200001f8:	0900 003d 0000 0000                         ..=.....

20000200 <impure_data>:
20000200:	0000 0000 04ec 2000 0554 2000 05bc 2000     ....... T.. ... 
	...
20000234:	4df8 0040 0000 0000 0000 0000 0000 0000     .M@.............
	...
200002a8:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
200002b8:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...
