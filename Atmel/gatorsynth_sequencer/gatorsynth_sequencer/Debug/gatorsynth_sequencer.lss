
gatorsynth_sequencer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002584  00400000  00400000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000660  20000000  00402584  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  2 .bss          000000d0  20000660  00402be4  00020660  2**2
                  ALLOC
  3 .stack        00003000  20000730  00402cb4  00020660  2**0
                  ALLOC
  4 .ARM.attributes 0000002a  00000000  00000000  00020660  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0002068a  2**0
                  CONTENTS, READONLY
  6 .debug_info   0000632d  00000000  00000000  000206e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001bff  00000000  00000000  00026a10  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00001f0a  00000000  00000000  0002860f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000005d0  00000000  00000000  0002a519  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000004a0  00000000  00000000  0002aae9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00011824  00000000  00000000  0002af89  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000dd09  00000000  00000000  0003c7ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0003cfda  00000000  00000000  0004a4b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000c38  00000000  00000000  00087490  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <_sfixed>:
  400000:	20003730 	.word	0x20003730
  400004:	00401a8d 	.word	0x00401a8d
  400008:	00401a89 	.word	0x00401a89
  40000c:	00401a89 	.word	0x00401a89
  400010:	00401a89 	.word	0x00401a89
  400014:	00401a89 	.word	0x00401a89
  400018:	00401a89 	.word	0x00401a89
	...
  40002c:	00401a89 	.word	0x00401a89
  400030:	00401a89 	.word	0x00401a89
  400034:	00000000 	.word	0x00000000
  400038:	00401a89 	.word	0x00401a89
  40003c:	00401a89 	.word	0x00401a89
  400040:	00401a89 	.word	0x00401a89
  400044:	00401a89 	.word	0x00401a89
  400048:	00401a89 	.word	0x00401a89
  40004c:	00401a89 	.word	0x00401a89
  400050:	00401a89 	.word	0x00401a89
  400054:	00401a89 	.word	0x00401a89
  400058:	00401a89 	.word	0x00401a89
  40005c:	00000000 	.word	0x00000000
  400060:	00401a89 	.word	0x00401a89
  400064:	00401a89 	.word	0x00401a89
  400068:	00401a89 	.word	0x00401a89
  40006c:	00401625 	.word	0x00401625
  400070:	00401ebd 	.word	0x00401ebd
  400074:	00400d4d 	.word	0x00400d4d
  400078:	00401a89 	.word	0x00401a89
  40007c:	00401a89 	.word	0x00401a89
  400080:	00401a89 	.word	0x00401a89
  400084:	00401a89 	.word	0x00401a89
  400088:	00000000 	.word	0x00000000
  40008c:	00401a89 	.word	0x00401a89
  400090:	00401a89 	.word	0x00401a89
  400094:	00401a89 	.word	0x00401a89
  400098:	00401a89 	.word	0x00401a89
  40009c:	00401899 	.word	0x00401899
  4000a0:	00401a89 	.word	0x00401a89
  4000a4:	00401a89 	.word	0x00401a89
  4000a8:	00401a89 	.word	0x00401a89
  4000ac:	00401a89 	.word	0x00401a89
  4000b0:	00401a89 	.word	0x00401a89
  4000b4:	004001bd 	.word	0x004001bd
  4000b8:	00401a89 	.word	0x00401a89
  4000bc:	00401a89 	.word	0x00401a89

004000c0 <__do_global_dtors_aux>:
  4000c0:	b510      	push	{r4, lr}
  4000c2:	4c05      	ldr	r4, [pc, #20]	; (4000d8 <__do_global_dtors_aux+0x18>)
  4000c4:	7823      	ldrb	r3, [r4, #0]
  4000c6:	b933      	cbnz	r3, 4000d6 <__do_global_dtors_aux+0x16>
  4000c8:	4b04      	ldr	r3, [pc, #16]	; (4000dc <__do_global_dtors_aux+0x1c>)
  4000ca:	b113      	cbz	r3, 4000d2 <__do_global_dtors_aux+0x12>
  4000cc:	4804      	ldr	r0, [pc, #16]	; (4000e0 <__do_global_dtors_aux+0x20>)
  4000ce:	f3af 8000 	nop.w
  4000d2:	2301      	movs	r3, #1
  4000d4:	7023      	strb	r3, [r4, #0]
  4000d6:	bd10      	pop	{r4, pc}
  4000d8:	20000660 	.word	0x20000660
  4000dc:	00000000 	.word	0x00000000
  4000e0:	00402584 	.word	0x00402584

004000e4 <frame_dummy>:
  4000e4:	4b08      	ldr	r3, [pc, #32]	; (400108 <frame_dummy+0x24>)
  4000e6:	b510      	push	{r4, lr}
  4000e8:	b11b      	cbz	r3, 4000f2 <frame_dummy+0xe>
  4000ea:	4908      	ldr	r1, [pc, #32]	; (40010c <frame_dummy+0x28>)
  4000ec:	4808      	ldr	r0, [pc, #32]	; (400110 <frame_dummy+0x2c>)
  4000ee:	f3af 8000 	nop.w
  4000f2:	4808      	ldr	r0, [pc, #32]	; (400114 <frame_dummy+0x30>)
  4000f4:	6803      	ldr	r3, [r0, #0]
  4000f6:	b903      	cbnz	r3, 4000fa <frame_dummy+0x16>
  4000f8:	bd10      	pop	{r4, pc}
  4000fa:	4b07      	ldr	r3, [pc, #28]	; (400118 <frame_dummy+0x34>)
  4000fc:	2b00      	cmp	r3, #0
  4000fe:	d0fb      	beq.n	4000f8 <frame_dummy+0x14>
  400100:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400104:	4718      	bx	r3
  400106:	bf00      	nop
  400108:	00000000 	.word	0x00000000
  40010c:	20000664 	.word	0x20000664
  400110:	00402584 	.word	0x00402584
  400114:	00402584 	.word	0x00402584
  400118:	00000000 	.word	0x00000000

0040011c <ADC_init>:
 //define register to read CH2 conversion from
#define REG_ADC_CDR2     (*(__I  uint32_t*)0x40038058U) /**< \brief (ADC) Channel Data Register */ 

 void ADC_init(){

	note_length = 5000;
  40011c:	f241 3288 	movw	r2, #5000	; 0x1388
  400120:	4b0f      	ldr	r3, [pc, #60]	; (400160 <ADC_init+0x44>)
  400122:	801a      	strh	r2, [r3, #0]

	//enable peripheral clock for ADC
	REG_PMC_PCER0 |= PMC_PCER0_PID29;
  400124:	4a0f      	ldr	r2, [pc, #60]	; (400164 <ADC_init+0x48>)
  400126:	6813      	ldr	r3, [r2, #0]
  400128:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  40012c:	6013      	str	r3, [r2, #0]
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  40012e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400132:	4b0d      	ldr	r3, [pc, #52]	; (400168 <ADC_init+0x4c>)
  400134:	601a      	str	r2, [r3, #0]

	//enable interrupts for ADC
	NVIC_EnableIRQ(ADC_IRQn);

	//enable Channel 2 of ADC (PORTA 19)
	REG_ADC_CHER |= ADC_CHER_CH2;
  400136:	4a0d      	ldr	r2, [pc, #52]	; (40016c <ADC_init+0x50>)
  400138:	6813      	ldr	r3, [r2, #0]
  40013a:	f043 0304 	orr.w	r3, r3, #4
  40013e:	6013      	str	r3, [r2, #0]

	//configure ADC clock to 5MHz
	REG_ADC_MR |= ADC_MR_PRESCAL(1);
  400140:	3a0c      	subs	r2, #12
  400142:	6813      	ldr	r3, [r2, #0]
  400144:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  400148:	6013      	str	r3, [r2, #0]

	//enable interrupt for end of ADC conversion on CH2
	REG_ADC_IER |= ADC_IER_EOC2;
  40014a:	3220      	adds	r2, #32
  40014c:	6813      	ldr	r3, [r2, #0]
  40014e:	f043 0304 	orr.w	r3, r3, #4
  400152:	6013      	str	r3, [r2, #0]

	//start initial conversion
	REG_ADC_CR |= ADC_CR_START;
  400154:	3a24      	subs	r2, #36	; 0x24
  400156:	6813      	ldr	r3, [r2, #0]
  400158:	f043 0302 	orr.w	r3, r3, #2
  40015c:	6013      	str	r3, [r2, #0]
  40015e:	4770      	bx	lr
  400160:	20000726 	.word	0x20000726
  400164:	400e0410 	.word	0x400e0410
  400168:	e000e100 	.word	0xe000e100
  40016c:	40038010 	.word	0x40038010

00400170 <convert_NoteLength>:

 }

  void convert_NoteLength(uint32_t DAC_data){
  400170:	b508      	push	{r3, lr}

	  //get note length as a proportion of the overflow count of the timer
	  float note_float = 10000*(((float)DAC_data)/1023);
	  note_length = (uint16_t) note_float;
  400172:	4b0d      	ldr	r3, [pc, #52]	; (4001a8 <convert_NoteLength+0x38>)
  400174:	4798      	blx	r3
  400176:	490d      	ldr	r1, [pc, #52]	; (4001ac <convert_NoteLength+0x3c>)
  400178:	4b0d      	ldr	r3, [pc, #52]	; (4001b0 <convert_NoteLength+0x40>)
  40017a:	4798      	blx	r3
  40017c:	4b0d      	ldr	r3, [pc, #52]	; (4001b4 <convert_NoteLength+0x44>)
  40017e:	4798      	blx	r3
  400180:	b280      	uxth	r0, r0

	  //in case of over flow from offset
	  if (note_length > 9000){
  400182:	f242 3328 	movw	r3, #9000	; 0x2328
  400186:	4298      	cmp	r0, r3
  400188:	d903      	bls.n	400192 <convert_NoteLength+0x22>
		note_length = 9000;
  40018a:	461a      	mov	r2, r3
  40018c:	4b0a      	ldr	r3, [pc, #40]	; (4001b8 <convert_NoteLength+0x48>)
  40018e:	801a      	strh	r2, [r3, #0]
  400190:	bd08      	pop	{r3, pc}
	  }
	  else if (note_length < 1000){
  400192:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
  400196:	d302      	bcc.n	40019e <convert_NoteLength+0x2e>

  void convert_NoteLength(uint32_t DAC_data){

	  //get note length as a proportion of the overflow count of the timer
	  float note_float = 10000*(((float)DAC_data)/1023);
	  note_length = (uint16_t) note_float;
  400198:	4b07      	ldr	r3, [pc, #28]	; (4001b8 <convert_NoteLength+0x48>)
  40019a:	8018      	strh	r0, [r3, #0]
  40019c:	bd08      	pop	{r3, pc}
	  //in case of over flow from offset
	  if (note_length > 9000){
		note_length = 9000;
	  }
	  else if (note_length < 1000){
		note_length = 1000;
  40019e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  4001a2:	4b05      	ldr	r3, [pc, #20]	; (4001b8 <convert_NoteLength+0x48>)
  4001a4:	801a      	strh	r2, [r3, #0]
  4001a6:	bd08      	pop	{r3, pc}
  4001a8:	00402085 	.word	0x00402085
  4001ac:	411c671a 	.word	0x411c671a
  4001b0:	00402135 	.word	0x00402135
  4001b4:	004023d5 	.word	0x004023d5
  4001b8:	20000726 	.word	0x20000726

004001bc <ADC_Handler>:
	  }

  }

 void ADC_Handler(){
  4001bc:	b508      	push	{r3, lr}

	//read the interrupt flag and clear it
	uint32_t status = REG_ADC_ISR;
  4001be:	4b05      	ldr	r3, [pc, #20]	; (4001d4 <ADC_Handler+0x18>)
  4001c0:	681b      	ldr	r3, [r3, #0]

	//store the data
	uint32_t data;

	//check for CH2 interrupt
	if ((status & ADC_IMR_EOC2) > 0){
  4001c2:	f013 0f04 	tst.w	r3, #4
		data = REG_ADC_CDR2;	//read ADC data off CH2
  4001c6:	bf1c      	itt	ne
  4001c8:	4b03      	ldrne	r3, [pc, #12]	; (4001d8 <ADC_Handler+0x1c>)
  4001ca:	6818      	ldrne	r0, [r3, #0]
	}

	convert_NoteLength(data);
  4001cc:	4b03      	ldr	r3, [pc, #12]	; (4001dc <ADC_Handler+0x20>)
  4001ce:	4798      	blx	r3
  4001d0:	bd08      	pop	{r3, pc}
  4001d2:	bf00      	nop
  4001d4:	40038030 	.word	0x40038030
  4001d8:	40038058 	.word	0x40038058
  4001dc:	00400171 	.word	0x00400171

004001e0 <twi_master_read>:
 * \param p_packet Packet information and data (see \ref twi_packet_t).
 *
 * \return TWI_SUCCESS if all bytes were read, error code otherwise.
 */
uint32_t twi_master_read(Twi *p_twi, twi_packet_t *p_packet)
{
  4001e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	//cpu_irq_disable();
	
	uint32_t status;
	uint32_t cnt = p_packet->length;
  4001e4:	68cb      	ldr	r3, [r1, #12]
	uint8_t *buffer = p_packet->buffer;
	uint8_t stop_sent = 0;
	uint32_t timeout = TWI_TIMEOUT;;
	
	/* Check argument */
	if (cnt == 0) {
  4001e6:	2b00      	cmp	r3, #0
  4001e8:	d049      	beq.n	40027e <twi_master_read+0x9e>
{
	//cpu_irq_disable();
	
	uint32_t status;
	uint32_t cnt = p_packet->length;
	uint8_t *buffer = p_packet->buffer;
  4001ea:	688c      	ldr	r4, [r1, #8]
	if (cnt == 0) {
		return TWI_INVALID_ARGUMENT;
	}

	/* Set read mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
  4001ec:	2600      	movs	r6, #0
  4001ee:	6046      	str	r6, [r0, #4]
	p_twi->TWI_MMR = TWI_MMR_MREAD | TWI_MMR_DADR(p_packet->chip) |
  4001f0:	684a      	ldr	r2, [r1, #4]
  4001f2:	0212      	lsls	r2, r2, #8
  4001f4:	f402 7240 	and.w	r2, r2, #768	; 0x300
  4001f8:	f442 5580 	orr.w	r5, r2, #4096	; 0x1000
  4001fc:	7c0a      	ldrb	r2, [r1, #16]
  4001fe:	0412      	lsls	r2, r2, #16
  400200:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
  400204:	432a      	orrs	r2, r5
  400206:	6042      	str	r2, [r0, #4]
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
  400208:	60c6      	str	r6, [r0, #12]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
  40020a:	684d      	ldr	r5, [r1, #4]
 */
static uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
	uint32_t val;

	if (len == 0)
  40020c:	b15d      	cbz	r5, 400226 <twi_master_read+0x46>
		return 0;

	val = addr[0];
  40020e:	780a      	ldrb	r2, [r1, #0]
	if (len > 1) {
  400210:	2d01      	cmp	r5, #1
		val <<= 8;
		val |= addr[1];
  400212:	bfc4      	itt	gt
  400214:	784e      	ldrbgt	r6, [r1, #1]
  400216:	ea46 2202 	orrgt.w	r2, r6, r2, lsl #8
	}
	if (len > 2) {
  40021a:	2d02      	cmp	r5, #2
  40021c:	dd04      	ble.n	400228 <twi_master_read+0x48>
		val <<= 8;
		val |= addr[2];
  40021e:	7889      	ldrb	r1, [r1, #2]
  400220:	ea41 2202 	orr.w	r2, r1, r2, lsl #8
  400224:	e000      	b.n	400228 <twi_master_read+0x48>
static uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
	uint32_t val;

	if (len == 0)
		return 0;
  400226:	2200      	movs	r2, #0
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
  400228:	60c2      	str	r2, [r0, #12]

	/* Send a START condition */
	if (cnt == 1) {
  40022a:	2b01      	cmp	r3, #1
  40022c:	d103      	bne.n	400236 <twi_master_read+0x56>
		p_twi->TWI_CR = TWI_CR_START | TWI_CR_STOP;
  40022e:	2203      	movs	r2, #3
  400230:	6002      	str	r2, [r0, #0]
		stop_sent = 1;
  400232:	2701      	movs	r7, #1
  400234:	e02f      	b.n	400296 <twi_master_read+0xb6>
	} else {
		p_twi->TWI_CR = TWI_CR_START;
  400236:	2201      	movs	r2, #1
  400238:	6002      	str	r2, [r0, #0]
		stop_sent = 0;
  40023a:	2700      	movs	r7, #0
  40023c:	e02b      	b.n	400296 <twi_master_read+0xb6>
		if (cnt == 1  && !stop_sent) {
			p_twi->TWI_CR = TWI_CR_STOP;
			stop_sent = 1;
		}

		if (!(status & TWI_SR_RXRDY)) {
  40023e:	4629      	mov	r1, r5
		p_twi->TWI_CR = TWI_CR_START;
		stop_sent = 0;
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
  400240:	6a02      	ldr	r2, [r0, #32]
		if (status & TWI_SR_NACK) {
  400242:	f412 7f80 	tst.w	r2, #256	; 0x100
  400246:	d11d      	bne.n	400284 <twi_master_read+0xa4>
			return TWI_RECEIVE_NACK;
		}

		if (!timeout--) {
  400248:	1e4d      	subs	r5, r1, #1
  40024a:	b1f1      	cbz	r1, 40028a <twi_master_read+0xaa>
			return TWI_ERROR_TIMEOUT;
		}
				
		/* Last byte ? */
		if (cnt == 1  && !stop_sent) {
  40024c:	2b01      	cmp	r3, #1
  40024e:	d104      	bne.n	40025a <twi_master_read+0x7a>
  400250:	bb77      	cbnz	r7, 4002b0 <twi_master_read+0xd0>
			p_twi->TWI_CR = TWI_CR_STOP;
  400252:	f8c0 8000 	str.w	r8, [r0]
			stop_sent = 1;
  400256:	4667      	mov	r7, ip
  400258:	e02a      	b.n	4002b0 <twi_master_read+0xd0>
		}

		if (!(status & TWI_SR_RXRDY)) {
  40025a:	f012 0f02 	tst.w	r2, #2
  40025e:	d005      	beq.n	40026c <twi_master_read+0x8c>
			continue;
		}
		*buffer++ = p_twi->TWI_RHR;
  400260:	6b02      	ldr	r2, [r0, #48]	; 0x30
  400262:	7022      	strb	r2, [r4, #0]

		cnt--;
  400264:	3b01      	subs	r3, #1
		}

		if (!(status & TWI_SR_RXRDY)) {
			continue;
		}
		*buffer++ = p_twi->TWI_RHR;
  400266:	3401      	adds	r4, #1

		cnt--;
		timeout = TWI_TIMEOUT;
  400268:	4631      	mov	r1, r6
  40026a:	e000      	b.n	40026e <twi_master_read+0x8e>
  40026c:	4629      	mov	r1, r5
	} else {
		p_twi->TWI_CR = TWI_CR_START;
		stop_sent = 0;
	}

	while (cnt > 0) {
  40026e:	2b00      	cmp	r3, #0
  400270:	d1e6      	bne.n	400240 <twi_master_read+0x60>

		cnt--;
		timeout = TWI_TIMEOUT;
	}

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
  400272:	6a03      	ldr	r3, [r0, #32]
  400274:	f013 0f01 	tst.w	r3, #1
  400278:	d0fb      	beq.n	400272 <twi_master_read+0x92>
	}

	p_twi->TWI_SR;
  40027a:	6a03      	ldr	r3, [r0, #32]

	//cpu_irq_enable();

	return TWI_SUCCESS;
  40027c:	e01c      	b.n	4002b8 <twi_master_read+0xd8>
	uint8_t stop_sent = 0;
	uint32_t timeout = TWI_TIMEOUT;;
	
	/* Check argument */
	if (cnt == 0) {
		return TWI_INVALID_ARGUMENT;
  40027e:	f04f 0e01 	mov.w	lr, #1
  400282:	e019      	b.n	4002b8 <twi_master_read+0xd8>
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
  400284:	f04f 0e05 	mov.w	lr, #5
  400288:	e016      	b.n	4002b8 <twi_master_read+0xd8>
		}

		if (!timeout--) {
			return TWI_ERROR_TIMEOUT;
  40028a:	f04f 0e09 	mov.w	lr, #9
  40028e:	e013      	b.n	4002b8 <twi_master_read+0xd8>
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
  400290:	f04f 0e05 	mov.w	lr, #5
  400294:	e010      	b.n	4002b8 <twi_master_read+0xd8>
		p_twi->TWI_CR = TWI_CR_START;
		stop_sent = 0;
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
  400296:	6a02      	ldr	r2, [r0, #32]
		if (status & TWI_SR_NACK) {
  400298:	f412 7e80 	ands.w	lr, r2, #256	; 0x100
  40029c:	d1f8      	bne.n	400290 <twi_master_read+0xb0>
  40029e:	f643 2597 	movw	r5, #14999	; 0x3a97
			continue;
		}
		*buffer++ = p_twi->TWI_RHR;

		cnt--;
		timeout = TWI_TIMEOUT;
  4002a2:	f643 2698 	movw	r6, #15000	; 0x3a98
			return TWI_ERROR_TIMEOUT;
		}
				
		/* Last byte ? */
		if (cnt == 1  && !stop_sent) {
			p_twi->TWI_CR = TWI_CR_STOP;
  4002a6:	f04f 0802 	mov.w	r8, #2
			stop_sent = 1;
  4002aa:	f04f 0c01 	mov.w	ip, #1
  4002ae:	e7cd      	b.n	40024c <twi_master_read+0x6c>
		}

		if (!(status & TWI_SR_RXRDY)) {
  4002b0:	f012 0f02 	tst.w	r2, #2
  4002b4:	d0c3      	beq.n	40023e <twi_master_read+0x5e>
  4002b6:	e7d3      	b.n	400260 <twi_master_read+0x80>
	p_twi->TWI_SR;

	//cpu_irq_enable();

	return TWI_SUCCESS;
}
  4002b8:	4670      	mov	r0, lr
  4002ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4002be:	bf00      	nop

004002c0 <twi_master_write>:
 * \param p_packet Packet information and data (see \ref twi_packet_t).
 *
 * \return TWI_SUCCESS if all bytes were written, error code otherwise.
 */
uint32_t twi_master_write(Twi *p_twi, twi_packet_t *p_packet)
{
  4002c0:	4602      	mov	r2, r0
	//cpu_irq_disable();

	uint32_t status;
	uint32_t cnt = p_packet->length;
  4002c2:	68c8      	ldr	r0, [r1, #12]
	uint8_t *buffer = p_packet->buffer;

	/* Check argument */
	if (cnt == 0) {
  4002c4:	b330      	cbz	r0, 400314 <twi_master_write+0x54>
 * \param p_packet Packet information and data (see \ref twi_packet_t).
 *
 * \return TWI_SUCCESS if all bytes were written, error code otherwise.
 */
uint32_t twi_master_write(Twi *p_twi, twi_packet_t *p_packet)
{
  4002c6:	b410      	push	{r4}
	//cpu_irq_disable();

	uint32_t status;
	uint32_t cnt = p_packet->length;
	uint8_t *buffer = p_packet->buffer;
  4002c8:	688c      	ldr	r4, [r1, #8]
		return TWI_INVALID_ARGUMENT;
	}

	/* Set write mode, slave address and 3 internal address byte lengths */
	//p_twi->TWI_MMR = 0;
	p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip);
  4002ca:	7c0b      	ldrb	r3, [r1, #16]
  4002cc:	041b      	lsls	r3, r3, #16
  4002ce:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
  4002d2:	6053      	str	r3, [r2, #4]
	//p_twi->TWI_IADR = 0;
	//p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);

	/* Send all bytes */
	while (cnt > 0) {
		status = p_twi->TWI_SR;
  4002d4:	6a13      	ldr	r3, [r2, #32]
		if (status & TWI_SR_NACK) {
  4002d6:	f413 7f80 	tst.w	r3, #256	; 0x100
  4002da:	d004      	beq.n	4002e6 <twi_master_write+0x26>
  4002dc:	e01c      	b.n	400318 <twi_master_write+0x58>
	//p_twi->TWI_IADR = 0;
	//p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);

	/* Send all bytes */
	while (cnt > 0) {
		status = p_twi->TWI_SR;
  4002de:	6a13      	ldr	r3, [r2, #32]
		if (status & TWI_SR_NACK) {
  4002e0:	f413 7f80 	tst.w	r3, #256	; 0x100
  4002e4:	d11a      	bne.n	40031c <twi_master_write+0x5c>
			return TWI_RECEIVE_NACK;
		}

		if (!(status & TWI_SR_TXRDY)) {
  4002e6:	f013 0f04 	tst.w	r3, #4
  4002ea:	d003      	beq.n	4002f4 <twi_master_write+0x34>
			continue;
		}
		p_twi->TWI_THR = *buffer++;
  4002ec:	7823      	ldrb	r3, [r4, #0]
  4002ee:	6353      	str	r3, [r2, #52]	; 0x34

		cnt--;
  4002f0:	3801      	subs	r0, #1
		}

		if (!(status & TWI_SR_TXRDY)) {
			continue;
		}
		p_twi->TWI_THR = *buffer++;
  4002f2:	3401      	adds	r4, #1
	/* Set internal address for remote chip */
	//p_twi->TWI_IADR = 0;
	//p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);

	/* Send all bytes */
	while (cnt > 0) {
  4002f4:	2800      	cmp	r0, #0
  4002f6:	d1f2      	bne.n	4002de <twi_master_write+0x1e>

		cnt--;
	}

	while (1) {
		status = p_twi->TWI_SR;
  4002f8:	6a13      	ldr	r3, [r2, #32]
		if (status & TWI_SR_NACK) {
  4002fa:	f413 7080 	ands.w	r0, r3, #256	; 0x100
  4002fe:	d10f      	bne.n	400320 <twi_master_write+0x60>
			return TWI_RECEIVE_NACK;
		}

		if (status & TWI_SR_TXRDY) {
  400300:	f013 0f04 	tst.w	r3, #4
  400304:	d0f8      	beq.n	4002f8 <twi_master_write+0x38>
			break;
		}
	}

	p_twi->TWI_CR = TWI_CR_STOP;
  400306:	2302      	movs	r3, #2
  400308:	6013      	str	r3, [r2, #0]

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
  40030a:	6a13      	ldr	r3, [r2, #32]
  40030c:	f013 0f01 	tst.w	r3, #1
  400310:	d0fb      	beq.n	40030a <twi_master_write+0x4a>
  400312:	e006      	b.n	400322 <twi_master_write+0x62>
	uint32_t cnt = p_packet->length;
	uint8_t *buffer = p_packet->buffer;

	/* Check argument */
	if (cnt == 0) {
		return TWI_INVALID_ARGUMENT;
  400314:	2001      	movs	r0, #1
	}

	//cpu_irq_enable();

	return TWI_SUCCESS;
}
  400316:	4770      	bx	lr

	/* Send all bytes */
	while (cnt > 0) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
  400318:	2005      	movs	r0, #5
  40031a:	e002      	b.n	400322 <twi_master_write+0x62>
  40031c:	2005      	movs	r0, #5
  40031e:	e000      	b.n	400322 <twi_master_write+0x62>
	}

	while (1) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
  400320:	2005      	movs	r0, #5
	}

	//cpu_irq_enable();

	return TWI_SUCCESS;
}
  400322:	bc10      	pop	{r4}
  400324:	4770      	bx	lr
  400326:	bf00      	nop

00400328 <DAC_write_cv>:


#define VREF 10
#define max 1023

void DAC_write_cv(float voltage){
  400328:	b570      	push	{r4, r5, r6, lr}
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  40032a:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  40032c:	f3bf 8f5f 	dmb	sy

	cpu_irq_disable();
  400330:	4d13      	ldr	r5, [pc, #76]	; (400380 <DAC_write_cv+0x58>)
  400332:	2300      	movs	r3, #0
  400334:	702b      	strb	r3, [r5, #0]

	float float_voltage = (max*(voltage))/VREF;
	uint16_t dac_voltage = (uint16_t) float_voltage;
  400336:	4913      	ldr	r1, [pc, #76]	; (400384 <DAC_write_cv+0x5c>)
  400338:	4b13      	ldr	r3, [pc, #76]	; (400388 <DAC_write_cv+0x60>)
  40033a:	4798      	blx	r3
  40033c:	4b13      	ldr	r3, [pc, #76]	; (40038c <DAC_write_cv+0x64>)
  40033e:	4798      	blx	r3
  400340:	b284      	uxth	r4, r0

	uint8_t low_byte = (uint8_t) (dac_voltage << 2);
	uint8_t high_byte = ((uint8_t) (dac_voltage >> 6)) | (0x90);

	
	SPI_dac_init();
  400342:	4b13      	ldr	r3, [pc, #76]	; (400390 <DAC_write_cv+0x68>)
  400344:	4798      	blx	r3
	REG_PIOB_CODR |=  PIO_PER_P13;
  400346:	4a13      	ldr	r2, [pc, #76]	; (400394 <DAC_write_cv+0x6c>)
  400348:	6813      	ldr	r3, [r2, #0]
  40034a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  40034e:	6013      	str	r3, [r2, #0]
	SPI_byteSend(high_byte);
  400350:	09a0      	lsrs	r0, r4, #6
  400352:	f060 006f 	orn	r0, r0, #111	; 0x6f
  400356:	b2c0      	uxtb	r0, r0
  400358:	4e0f      	ldr	r6, [pc, #60]	; (400398 <DAC_write_cv+0x70>)
  40035a:	47b0      	blx	r6
	SPI_byteSend(low_byte);
  40035c:	00a0      	lsls	r0, r4, #2
  40035e:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
  400362:	47b0      	blx	r6
	delay_us(3);
  400364:	2016      	movs	r0, #22
  400366:	4b0d      	ldr	r3, [pc, #52]	; (40039c <DAC_write_cv+0x74>)
  400368:	4798      	blx	r3
	REG_PIOB_SODR |=  PIO_PER_P13;
  40036a:	4a0d      	ldr	r2, [pc, #52]	; (4003a0 <DAC_write_cv+0x78>)
  40036c:	6813      	ldr	r3, [r2, #0]
  40036e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  400372:	6013      	str	r3, [r2, #0]

	cpu_irq_enable();
  400374:	2301      	movs	r3, #1
  400376:	702b      	strb	r3, [r5, #0]
  400378:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  40037c:	b662      	cpsie	i
  40037e:	bd70      	pop	{r4, r5, r6, pc}
  400380:	20000230 	.word	0x20000230
  400384:	42cc999a 	.word	0x42cc999a
  400388:	00402135 	.word	0x00402135
  40038c:	004023d5 	.word	0x004023d5
  400390:	00401725 	.word	0x00401725
  400394:	400e1034 	.word	0x400e1034
  400398:	004017b1 	.word	0x004017b1
  40039c:	20000001 	.word	0x20000001
  4003a0:	400e1030 	.word	0x400e1030

004003a4 <DAC_write_gate_on>:
	

}

void DAC_write_gate_on(){
  4003a4:	b538      	push	{r3, r4, r5, lr}
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  4003a6:	b672      	cpsid	i
  4003a8:	f3bf 8f5f 	dmb	sy

	cpu_irq_disable();
  4003ac:	4c0e      	ldr	r4, [pc, #56]	; (4003e8 <DAC_write_gate_on+0x44>)
  4003ae:	2300      	movs	r3, #0
  4003b0:	7023      	strb	r3, [r4, #0]
	uint16_t dac_voltage = (uint16_t) float_voltage;

	uint8_t low_byte = (uint8_t) (dac_voltage << 2);
	uint8_t high_byte = ((uint8_t) (dac_voltage >> 6)) | (0xA0);

	SPI_dac_init();
  4003b2:	4b0e      	ldr	r3, [pc, #56]	; (4003ec <DAC_write_gate_on+0x48>)
  4003b4:	4798      	blx	r3
	REG_PIOB_CODR |=  PIO_PER_P13;
  4003b6:	4a0e      	ldr	r2, [pc, #56]	; (4003f0 <DAC_write_gate_on+0x4c>)
  4003b8:	6813      	ldr	r3, [r2, #0]
  4003ba:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  4003be:	6013      	str	r3, [r2, #0]
	SPI_byteSend(high_byte);
  4003c0:	20af      	movs	r0, #175	; 0xaf
  4003c2:	4d0c      	ldr	r5, [pc, #48]	; (4003f4 <DAC_write_gate_on+0x50>)
  4003c4:	47a8      	blx	r5
	SPI_byteSend(low_byte);
  4003c6:	20fc      	movs	r0, #252	; 0xfc
  4003c8:	47a8      	blx	r5
	delay_us(3);
  4003ca:	2016      	movs	r0, #22
  4003cc:	4b0a      	ldr	r3, [pc, #40]	; (4003f8 <DAC_write_gate_on+0x54>)
  4003ce:	4798      	blx	r3
	REG_PIOB_SODR |=  PIO_PER_P13;
  4003d0:	4a0a      	ldr	r2, [pc, #40]	; (4003fc <DAC_write_gate_on+0x58>)
  4003d2:	6813      	ldr	r3, [r2, #0]
  4003d4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  4003d8:	6013      	str	r3, [r2, #0]

	cpu_irq_enable();
  4003da:	2301      	movs	r3, #1
  4003dc:	7023      	strb	r3, [r4, #0]
  4003de:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  4003e2:	b662      	cpsie	i
  4003e4:	bd38      	pop	{r3, r4, r5, pc}
  4003e6:	bf00      	nop
  4003e8:	20000230 	.word	0x20000230
  4003ec:	00401725 	.word	0x00401725
  4003f0:	400e1034 	.word	0x400e1034
  4003f4:	004017b1 	.word	0x004017b1
  4003f8:	20000001 	.word	0x20000001
  4003fc:	400e1030 	.word	0x400e1030

00400400 <DAC_write_gate_off>:
}

void DAC_write_gate_off(){
  400400:	b570      	push	{r4, r5, r6, lr}
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  400402:	b672      	cpsid	i
  400404:	f3bf 8f5f 	dmb	sy

	cpu_irq_disable();
  400408:	4c0e      	ldr	r4, [pc, #56]	; (400444 <DAC_write_gate_off+0x44>)
  40040a:	2600      	movs	r6, #0
  40040c:	7026      	strb	r6, [r4, #0]
	uint16_t dac_voltage = (uint16_t) float_voltage;

	uint8_t low_byte = (uint8_t) (dac_voltage << 2);
	uint8_t high_byte = ((uint8_t) (dac_voltage >> 6)) | (0xA0);

	SPI_dac_init();
  40040e:	4b0e      	ldr	r3, [pc, #56]	; (400448 <DAC_write_gate_off+0x48>)
  400410:	4798      	blx	r3
	REG_PIOB_CODR |=  PIO_PER_P13;
  400412:	4a0e      	ldr	r2, [pc, #56]	; (40044c <DAC_write_gate_off+0x4c>)
  400414:	6813      	ldr	r3, [r2, #0]
  400416:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  40041a:	6013      	str	r3, [r2, #0]
	SPI_byteSend(high_byte);
  40041c:	20a0      	movs	r0, #160	; 0xa0
  40041e:	4d0c      	ldr	r5, [pc, #48]	; (400450 <DAC_write_gate_off+0x50>)
  400420:	47a8      	blx	r5
	SPI_byteSend(low_byte);
  400422:	4630      	mov	r0, r6
  400424:	47a8      	blx	r5
	delay_us(3);
  400426:	2016      	movs	r0, #22
  400428:	4b0a      	ldr	r3, [pc, #40]	; (400454 <DAC_write_gate_off+0x54>)
  40042a:	4798      	blx	r3
	REG_PIOB_SODR |=  PIO_PER_P13;
  40042c:	4a0a      	ldr	r2, [pc, #40]	; (400458 <DAC_write_gate_off+0x58>)
  40042e:	6813      	ldr	r3, [r2, #0]
  400430:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  400434:	6013      	str	r3, [r2, #0]

	cpu_irq_enable();
  400436:	2301      	movs	r3, #1
  400438:	7023      	strb	r3, [r4, #0]
  40043a:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  40043e:	b662      	cpsie	i
  400440:	bd70      	pop	{r4, r5, r6, pc}
  400442:	bf00      	nop
  400444:	20000230 	.word	0x20000230
  400448:	00401725 	.word	0x00401725
  40044c:	400e1034 	.word	0x400e1034
  400450:	004017b1 	.word	0x004017b1
  400454:	20000001 	.word	0x20000001
  400458:	400e1030 	.word	0x400e1030

0040045c <encoder_direction>:
#include "timers.h"

uint8_t A_seq;
uint8_t B_seq;

 void encoder_direction(uint32_t A, uint32_t B, uint8_t step){
  40045c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	//read Encoder input A
	bool A_in = REG_PIOC_PDSR & A;
  40045e:	4b19      	ldr	r3, [pc, #100]	; (4004c4 <encoder_direction+0x68>)
  400460:	681f      	ldr	r7, [r3, #0]
	//read Encoder input B
	bool B_in = REG_PIOC_PDSR & B;
  400462:	681d      	ldr	r5, [r3, #0]
	
	A_seq = A_seq << 1;
	A_seq |= A_in;
	
	B_seq = B_seq << 1;
  400464:	4c18      	ldr	r4, [pc, #96]	; (4004c8 <encoder_direction+0x6c>)
	B_seq |= B_in;
  400466:	7823      	ldrb	r3, [r4, #0]
  400468:	420d      	tst	r5, r1
  40046a:	bf14      	ite	ne
  40046c:	2101      	movne	r1, #1
  40046e:	2100      	moveq	r1, #0
  400470:	ea41 0143 	orr.w	r1, r1, r3, lsl #1
	//read Encoder input A
	bool A_in = REG_PIOC_PDSR & A;
	//read Encoder input B
	bool B_in = REG_PIOC_PDSR & B;
	
	A_seq = A_seq << 1;
  400474:	4d15      	ldr	r5, [pc, #84]	; (4004cc <encoder_direction+0x70>)
	A_seq |= A_in;
	
	B_seq = B_seq << 1;
	B_seq |= B_in;
	
	A_seq &= 0b00001111;
  400476:	782e      	ldrb	r6, [r5, #0]
  400478:	4207      	tst	r7, r0
  40047a:	bf14      	ite	ne
  40047c:	2301      	movne	r3, #1
  40047e:	2300      	moveq	r3, #0
  400480:	ea43 0346 	orr.w	r3, r3, r6, lsl #1
  400484:	f003 030f 	and.w	r3, r3, #15
  400488:	702b      	strb	r3, [r5, #0]
	B_seq &= 0b00001111;
  40048a:	f001 010f 	and.w	r1, r1, #15
  40048e:	7021      	strb	r1, [r4, #0]


	//return true if turned right
	if ((A_seq == 0b00001001) && (B_seq == 0b00000011)){
  400490:	2b09      	cmp	r3, #9
  400492:	d10a      	bne.n	4004aa <encoder_direction+0x4e>
  400494:	2903      	cmp	r1, #3
  400496:	d114      	bne.n	4004c2 <encoder_direction+0x66>
		REG_PIOB_SODR |= PIO_PER_P3; //set output high on PB3
  400498:	490d      	ldr	r1, [pc, #52]	; (4004d0 <encoder_direction+0x74>)
  40049a:	680b      	ldr	r3, [r1, #0]
  40049c:	f043 0308 	orr.w	r3, r3, #8
  4004a0:	600b      	str	r3, [r1, #0]
		notes_inc(step);
  4004a2:	4610      	mov	r0, r2
  4004a4:	4b0b      	ldr	r3, [pc, #44]	; (4004d4 <encoder_direction+0x78>)
  4004a6:	4798      	blx	r3
  4004a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

	}

	else if ((A_seq == 0b00000011) && (B_seq == 0b00001001)){
  4004aa:	2b03      	cmp	r3, #3
  4004ac:	d109      	bne.n	4004c2 <encoder_direction+0x66>
  4004ae:	2909      	cmp	r1, #9
  4004b0:	d107      	bne.n	4004c2 <encoder_direction+0x66>
		REG_PIOB_CODR |= PIO_PER_P3; //set output low on PB3
  4004b2:	4909      	ldr	r1, [pc, #36]	; (4004d8 <encoder_direction+0x7c>)
  4004b4:	680b      	ldr	r3, [r1, #0]
  4004b6:	f043 0308 	orr.w	r3, r3, #8
  4004ba:	600b      	str	r3, [r1, #0]
		notes_dec(step);
  4004bc:	4610      	mov	r0, r2
  4004be:	4b07      	ldr	r3, [pc, #28]	; (4004dc <encoder_direction+0x80>)
  4004c0:	4798      	blx	r3
  4004c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4004c4:	400e123c 	.word	0x400e123c
  4004c8:	20000729 	.word	0x20000729
  4004cc:	20000728 	.word	0x20000728
  4004d0:	400e1030 	.word	0x400e1030
  4004d4:	004017e5 	.word	0x004017e5
  4004d8:	400e1034 	.word	0x400e1034
  4004dc:	004017fd 	.word	0x004017fd

004004e0 <Encoder_init>:

}



void Encoder_init(){
  4004e0:	b470      	push	{r4, r5, r6}

	A_seq = 0;
  4004e2:	2300      	movs	r3, #0
  4004e4:	4aa8      	ldr	r2, [pc, #672]	; (400788 <Encoder_init+0x2a8>)
  4004e6:	7013      	strb	r3, [r2, #0]
	B_seq = 0;
  4004e8:	4aa8      	ldr	r2, [pc, #672]	; (40078c <Encoder_init+0x2ac>)
  4004ea:	7013      	strb	r3, [r2, #0]

	//enable clock for PIOC
	REG_PMC_PCER0 |= PMC_PCER0_PID13;
  4004ec:	4aa8      	ldr	r2, [pc, #672]	; (400790 <Encoder_init+0x2b0>)
  4004ee:	6813      	ldr	r3, [r2, #0]
  4004f0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  4004f4:	6013      	str	r3, [r2, #0]


	/**************			CONFIGURE 16 STEP ENCODERS			**************/

	//Set up PC0 as ENCODER 1 INPUT A
	REG_PIOC_PER |= PIO_PER_P0; //enable PIO controller
  4004f6:	4da7      	ldr	r5, [pc, #668]	; (400794 <Encoder_init+0x2b4>)
  4004f8:	682b      	ldr	r3, [r5, #0]
  4004fa:	f043 0301 	orr.w	r3, r3, #1
  4004fe:	602b      	str	r3, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P0; //disable output
  400500:	4ca5      	ldr	r4, [pc, #660]	; (400798 <Encoder_init+0x2b8>)
  400502:	6823      	ldr	r3, [r4, #0]
  400504:	f043 0301 	orr.w	r3, r3, #1
  400508:	6023      	str	r3, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P0; //disable pull-down resistor
  40050a:	48a4      	ldr	r0, [pc, #656]	; (40079c <Encoder_init+0x2bc>)
  40050c:	6803      	ldr	r3, [r0, #0]
  40050e:	f043 0301 	orr.w	r3, r3, #1
  400512:	6003      	str	r3, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P0;	//enable pull-up resistor
  400514:	49a2      	ldr	r1, [pc, #648]	; (4007a0 <Encoder_init+0x2c0>)
  400516:	680b      	ldr	r3, [r1, #0]
  400518:	f043 0301 	orr.w	r3, r3, #1
  40051c:	600b      	str	r3, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P0; //turn on slow clock debounce
  40051e:	f602 6274 	addw	r2, r2, #3700	; 0xe74
  400522:	6813      	ldr	r3, [r2, #0]
  400524:	f043 0301 	orr.w	r3, r3, #1
  400528:	6013      	str	r3, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P0;	//start debounce filter
  40052a:	4b9e      	ldr	r3, [pc, #632]	; (4007a4 <Encoder_init+0x2c4>)
  40052c:	681e      	ldr	r6, [r3, #0]
  40052e:	f046 0601 	orr.w	r6, r6, #1
  400532:	601e      	str	r6, [r3, #0]

	//Set up PC1 as ENCODER 1 INPUT B
	REG_PIOC_PER |= PIO_PER_P1; //enable PIO controller
  400534:	682e      	ldr	r6, [r5, #0]
  400536:	f046 0602 	orr.w	r6, r6, #2
  40053a:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P1; //disable output
  40053c:	6826      	ldr	r6, [r4, #0]
  40053e:	f046 0602 	orr.w	r6, r6, #2
  400542:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P1; //disable pull-down resistor
  400544:	6806      	ldr	r6, [r0, #0]
  400546:	f046 0602 	orr.w	r6, r6, #2
  40054a:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P1;	//enable pull-up resistor
  40054c:	680e      	ldr	r6, [r1, #0]
  40054e:	f046 0602 	orr.w	r6, r6, #2
  400552:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P1; //turn on slow clock debounce
  400554:	6816      	ldr	r6, [r2, #0]
  400556:	f046 0602 	orr.w	r6, r6, #2
  40055a:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P1;	//start debounce filter
  40055c:	681e      	ldr	r6, [r3, #0]
  40055e:	f046 0602 	orr.w	r6, r6, #2
  400562:	601e      	str	r6, [r3, #0]


	
	//Set up PC2 as ENCODER 2 INPUT A
	REG_PIOC_PER |= PIO_PER_P2; //enable PIO controller
  400564:	682e      	ldr	r6, [r5, #0]
  400566:	f046 0604 	orr.w	r6, r6, #4
  40056a:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P2; //disable output
  40056c:	6826      	ldr	r6, [r4, #0]
  40056e:	f046 0604 	orr.w	r6, r6, #4
  400572:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P2; //disable pull-down resistor
  400574:	6806      	ldr	r6, [r0, #0]
  400576:	f046 0604 	orr.w	r6, r6, #4
  40057a:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P2;	//enable pull-up resistor
  40057c:	680e      	ldr	r6, [r1, #0]
  40057e:	f046 0604 	orr.w	r6, r6, #4
  400582:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P2; //turn on slow clock debounce
  400584:	6816      	ldr	r6, [r2, #0]
  400586:	f046 0604 	orr.w	r6, r6, #4
  40058a:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P2;	//start debounce filter
  40058c:	681e      	ldr	r6, [r3, #0]
  40058e:	f046 0604 	orr.w	r6, r6, #4
  400592:	601e      	str	r6, [r3, #0]

	//Set up PC3 as ENCODER 2 INPUT B
	REG_PIOC_PER |= PIO_PER_P3; //enable PIO controller
  400594:	682e      	ldr	r6, [r5, #0]
  400596:	f046 0608 	orr.w	r6, r6, #8
  40059a:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P3; //disable output
  40059c:	6826      	ldr	r6, [r4, #0]
  40059e:	f046 0608 	orr.w	r6, r6, #8
  4005a2:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P3; //disable pull-down resistor
  4005a4:	6806      	ldr	r6, [r0, #0]
  4005a6:	f046 0608 	orr.w	r6, r6, #8
  4005aa:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P3;	//enable pull-up resistor
  4005ac:	680e      	ldr	r6, [r1, #0]
  4005ae:	f046 0608 	orr.w	r6, r6, #8
  4005b2:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P3; //turn on slow clock debounce
  4005b4:	6816      	ldr	r6, [r2, #0]
  4005b6:	f046 0608 	orr.w	r6, r6, #8
  4005ba:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P3;	//start debounce filter
  4005bc:	681e      	ldr	r6, [r3, #0]
  4005be:	f046 0608 	orr.w	r6, r6, #8
  4005c2:	601e      	str	r6, [r3, #0]



	//Set up PC4 as ENCODER 3 INPUT A
	REG_PIOC_PER |= PIO_PER_P4; //enable PIO controller
  4005c4:	682e      	ldr	r6, [r5, #0]
  4005c6:	f046 0610 	orr.w	r6, r6, #16
  4005ca:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P4; //disable output
  4005cc:	6826      	ldr	r6, [r4, #0]
  4005ce:	f046 0610 	orr.w	r6, r6, #16
  4005d2:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P4; //disable pull-down resistor
  4005d4:	6806      	ldr	r6, [r0, #0]
  4005d6:	f046 0610 	orr.w	r6, r6, #16
  4005da:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P4;	//enable pull-up resistor
  4005dc:	680e      	ldr	r6, [r1, #0]
  4005de:	f046 0610 	orr.w	r6, r6, #16
  4005e2:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P4; //turn on slow clock debounce
  4005e4:	6816      	ldr	r6, [r2, #0]
  4005e6:	f046 0610 	orr.w	r6, r6, #16
  4005ea:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P4;	//start debounce filter
  4005ec:	681e      	ldr	r6, [r3, #0]
  4005ee:	f046 0610 	orr.w	r6, r6, #16
  4005f2:	601e      	str	r6, [r3, #0]

	//Set up PC5 as ENCODER 3 INPUT B
	REG_PIOC_PER |= PIO_PER_P5; //enable PIO controller
  4005f4:	682e      	ldr	r6, [r5, #0]
  4005f6:	f046 0620 	orr.w	r6, r6, #32
  4005fa:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P5; //disable output
  4005fc:	6826      	ldr	r6, [r4, #0]
  4005fe:	f046 0620 	orr.w	r6, r6, #32
  400602:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P5; //disable pull-down resistor
  400604:	6806      	ldr	r6, [r0, #0]
  400606:	f046 0620 	orr.w	r6, r6, #32
  40060a:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P5;	//enable pull-up resistor
  40060c:	680e      	ldr	r6, [r1, #0]
  40060e:	f046 0620 	orr.w	r6, r6, #32
  400612:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P5; //turn on slow clock debounce
  400614:	6816      	ldr	r6, [r2, #0]
  400616:	f046 0620 	orr.w	r6, r6, #32
  40061a:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P5;	//start debounce filter
  40061c:	681e      	ldr	r6, [r3, #0]
  40061e:	f046 0620 	orr.w	r6, r6, #32
  400622:	601e      	str	r6, [r3, #0]



	//Set up PC6 as ENCODER 4 INPUT A
	REG_PIOC_PER |= PIO_PER_P6; //enable PIO controller
  400624:	682e      	ldr	r6, [r5, #0]
  400626:	f046 0640 	orr.w	r6, r6, #64	; 0x40
  40062a:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P6; //disable output
  40062c:	6826      	ldr	r6, [r4, #0]
  40062e:	f046 0640 	orr.w	r6, r6, #64	; 0x40
  400632:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P6; //disable pull-down resistor
  400634:	6806      	ldr	r6, [r0, #0]
  400636:	f046 0640 	orr.w	r6, r6, #64	; 0x40
  40063a:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P6;	//enable pull-up resistor
  40063c:	680e      	ldr	r6, [r1, #0]
  40063e:	f046 0640 	orr.w	r6, r6, #64	; 0x40
  400642:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P6; //turn on slow clock debounce
  400644:	6816      	ldr	r6, [r2, #0]
  400646:	f046 0640 	orr.w	r6, r6, #64	; 0x40
  40064a:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P6;	//start debounce filter
  40064c:	681e      	ldr	r6, [r3, #0]
  40064e:	f046 0640 	orr.w	r6, r6, #64	; 0x40
  400652:	601e      	str	r6, [r3, #0]

	//Set up PC7 as ENCODER 4 INPUT B
	REG_PIOC_PER |= PIO_PER_P7; //enable PIO controller
  400654:	682e      	ldr	r6, [r5, #0]
  400656:	f046 0680 	orr.w	r6, r6, #128	; 0x80
  40065a:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P7; //disable output
  40065c:	6826      	ldr	r6, [r4, #0]
  40065e:	f046 0680 	orr.w	r6, r6, #128	; 0x80
  400662:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P7; //disable pull-down resistor
  400664:	6806      	ldr	r6, [r0, #0]
  400666:	f046 0680 	orr.w	r6, r6, #128	; 0x80
  40066a:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P7;	//enable pull-up resistor
  40066c:	680e      	ldr	r6, [r1, #0]
  40066e:	f046 0680 	orr.w	r6, r6, #128	; 0x80
  400672:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P7; //turn on slow clock debounce
  400674:	6816      	ldr	r6, [r2, #0]
  400676:	f046 0680 	orr.w	r6, r6, #128	; 0x80
  40067a:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P7;	//start debounce filter
  40067c:	681e      	ldr	r6, [r3, #0]
  40067e:	f046 0680 	orr.w	r6, r6, #128	; 0x80
  400682:	601e      	str	r6, [r3, #0]



	//Set up PC8 as ENCODER 5 INPUT A
	REG_PIOC_PER |= PIO_PER_P8; //enable PIO controller
  400684:	682e      	ldr	r6, [r5, #0]
  400686:	f446 7680 	orr.w	r6, r6, #256	; 0x100
  40068a:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P8; //disable output
  40068c:	6826      	ldr	r6, [r4, #0]
  40068e:	f446 7680 	orr.w	r6, r6, #256	; 0x100
  400692:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P8; //disable pull-down resistor
  400694:	6806      	ldr	r6, [r0, #0]
  400696:	f446 7680 	orr.w	r6, r6, #256	; 0x100
  40069a:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P8;	//enable pull-up resistor
  40069c:	680e      	ldr	r6, [r1, #0]
  40069e:	f446 7680 	orr.w	r6, r6, #256	; 0x100
  4006a2:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P8; //turn on slow clock debounce
  4006a4:	6816      	ldr	r6, [r2, #0]
  4006a6:	f446 7680 	orr.w	r6, r6, #256	; 0x100
  4006aa:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P8;	//start debounce filter
  4006ac:	681e      	ldr	r6, [r3, #0]
  4006ae:	f446 7680 	orr.w	r6, r6, #256	; 0x100
  4006b2:	601e      	str	r6, [r3, #0]

	//Set up PC9 as ENCODER 5 INPUT B
	REG_PIOC_PER |= PIO_PER_P9; //enable PIO controller
  4006b4:	682e      	ldr	r6, [r5, #0]
  4006b6:	f446 7600 	orr.w	r6, r6, #512	; 0x200
  4006ba:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P9; //disable output
  4006bc:	6826      	ldr	r6, [r4, #0]
  4006be:	f446 7600 	orr.w	r6, r6, #512	; 0x200
  4006c2:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P9; //disable pull-down resistor
  4006c4:	6806      	ldr	r6, [r0, #0]
  4006c6:	f446 7600 	orr.w	r6, r6, #512	; 0x200
  4006ca:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P9;	//enable pull-up resistor
  4006cc:	680e      	ldr	r6, [r1, #0]
  4006ce:	f446 7600 	orr.w	r6, r6, #512	; 0x200
  4006d2:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P9; //turn on slow clock debounce
  4006d4:	6816      	ldr	r6, [r2, #0]
  4006d6:	f446 7600 	orr.w	r6, r6, #512	; 0x200
  4006da:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P9;	//start debounce filter
  4006dc:	681e      	ldr	r6, [r3, #0]
  4006de:	f446 7600 	orr.w	r6, r6, #512	; 0x200
  4006e2:	601e      	str	r6, [r3, #0]



	//Set up PC10 as ENCODER 6 INPUT A
	REG_PIOC_PER |= PIO_PER_P10; //enable PIO controller
  4006e4:	682e      	ldr	r6, [r5, #0]
  4006e6:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
  4006ea:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P10; //disable output
  4006ec:	6826      	ldr	r6, [r4, #0]
  4006ee:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
  4006f2:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P10; //disable pull-down resistor
  4006f4:	6806      	ldr	r6, [r0, #0]
  4006f6:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
  4006fa:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P10;	//enable pull-up resistor
  4006fc:	680e      	ldr	r6, [r1, #0]
  4006fe:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
  400702:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P10; //turn on slow clock debounce
  400704:	6816      	ldr	r6, [r2, #0]
  400706:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
  40070a:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P10;	//start debounce filter
  40070c:	681e      	ldr	r6, [r3, #0]
  40070e:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
  400712:	601e      	str	r6, [r3, #0]

	//Set up PC11 as ENCODER 6 INPUT B
	REG_PIOC_PER |= PIO_PER_P11; //enable PIO controller
  400714:	682e      	ldr	r6, [r5, #0]
  400716:	f446 6600 	orr.w	r6, r6, #2048	; 0x800
  40071a:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P11; //disable output
  40071c:	6826      	ldr	r6, [r4, #0]
  40071e:	f446 6600 	orr.w	r6, r6, #2048	; 0x800
  400722:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P11; //disable pull-down resistor
  400724:	6806      	ldr	r6, [r0, #0]
  400726:	f446 6600 	orr.w	r6, r6, #2048	; 0x800
  40072a:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P11;	//enable pull-up resistor
  40072c:	680e      	ldr	r6, [r1, #0]
  40072e:	f446 6600 	orr.w	r6, r6, #2048	; 0x800
  400732:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P11; //turn on slow clock debounce
  400734:	6816      	ldr	r6, [r2, #0]
  400736:	f446 6600 	orr.w	r6, r6, #2048	; 0x800
  40073a:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P11;	//start debounce filter
  40073c:	681e      	ldr	r6, [r3, #0]
  40073e:	f446 6600 	orr.w	r6, r6, #2048	; 0x800
  400742:	601e      	str	r6, [r3, #0]



	//Set up PC12 as ENCODER 7 INPUT A
	REG_PIOC_PER |= PIO_PER_P3; //enable PIO controller
  400744:	682e      	ldr	r6, [r5, #0]
  400746:	f046 0608 	orr.w	r6, r6, #8
  40074a:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P3; //disable output
  40074c:	6826      	ldr	r6, [r4, #0]
  40074e:	f046 0608 	orr.w	r6, r6, #8
  400752:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P3; //disable pull-down resistor
  400754:	6806      	ldr	r6, [r0, #0]
  400756:	f046 0608 	orr.w	r6, r6, #8
  40075a:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P3;	//enable pull-up resistor
  40075c:	680e      	ldr	r6, [r1, #0]
  40075e:	f046 0608 	orr.w	r6, r6, #8
  400762:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P3; //turn on slow clock debounce
  400764:	6816      	ldr	r6, [r2, #0]
  400766:	f046 0608 	orr.w	r6, r6, #8
  40076a:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P3;	//start debounce filter
  40076c:	681e      	ldr	r6, [r3, #0]
  40076e:	f046 0608 	orr.w	r6, r6, #8
  400772:	601e      	str	r6, [r3, #0]

	//Set up PC13 as ENCODER 7 INPUT B
	REG_PIOC_PER |= PIO_PER_P13; //enable PIO controller
  400774:	682e      	ldr	r6, [r5, #0]
  400776:	f446 5600 	orr.w	r6, r6, #8192	; 0x2000
  40077a:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P13; //disable output
  40077c:	6826      	ldr	r6, [r4, #0]
  40077e:	f446 5600 	orr.w	r6, r6, #8192	; 0x2000
  400782:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P13; //disable pull-down resistor
  400784:	6806      	ldr	r6, [r0, #0]
  400786:	e00f      	b.n	4007a8 <Encoder_init+0x2c8>
  400788:	20000728 	.word	0x20000728
  40078c:	20000729 	.word	0x20000729
  400790:	400e0410 	.word	0x400e0410
  400794:	400e1200 	.word	0x400e1200
  400798:	400e1214 	.word	0x400e1214
  40079c:	400e1290 	.word	0x400e1290
  4007a0:	400e1264 	.word	0x400e1264
  4007a4:	400e1220 	.word	0x400e1220
  4007a8:	f446 5600 	orr.w	r6, r6, #8192	; 0x2000
  4007ac:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P13;	//enable pull-up resistor
  4007ae:	680e      	ldr	r6, [r1, #0]
  4007b0:	f446 5600 	orr.w	r6, r6, #8192	; 0x2000
  4007b4:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P13; //turn on slow clock debounce
  4007b6:	6816      	ldr	r6, [r2, #0]
  4007b8:	f446 5600 	orr.w	r6, r6, #8192	; 0x2000
  4007bc:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P13;	//start debounce filter
  4007be:	681e      	ldr	r6, [r3, #0]
  4007c0:	f446 5600 	orr.w	r6, r6, #8192	; 0x2000
  4007c4:	601e      	str	r6, [r3, #0]



	//Set up PC14 as ENCODER 8 INPUT A
	REG_PIOC_PER |= PIO_PER_P14; //enable PIO controller
  4007c6:	682e      	ldr	r6, [r5, #0]
  4007c8:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
  4007cc:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P14; //disable output
  4007ce:	6826      	ldr	r6, [r4, #0]
  4007d0:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
  4007d4:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P14; //disable pull-down resistor
  4007d6:	6806      	ldr	r6, [r0, #0]
  4007d8:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
  4007dc:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P14;	//enable pull-up resistor
  4007de:	680e      	ldr	r6, [r1, #0]
  4007e0:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
  4007e4:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P14; //turn on slow clock debounce
  4007e6:	6816      	ldr	r6, [r2, #0]
  4007e8:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
  4007ec:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P14;	//start debounce filter
  4007ee:	681e      	ldr	r6, [r3, #0]
  4007f0:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
  4007f4:	601e      	str	r6, [r3, #0]

	//Set up PC15 as ENCODER 8 INPUT B
	REG_PIOC_PER |= PIO_PER_P15; //enable PIO controller
  4007f6:	682e      	ldr	r6, [r5, #0]
  4007f8:	f446 4600 	orr.w	r6, r6, #32768	; 0x8000
  4007fc:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P15; //disable output
  4007fe:	6826      	ldr	r6, [r4, #0]
  400800:	f446 4600 	orr.w	r6, r6, #32768	; 0x8000
  400804:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P15; //disable pull-down resistor
  400806:	6806      	ldr	r6, [r0, #0]
  400808:	f446 4600 	orr.w	r6, r6, #32768	; 0x8000
  40080c:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P15;	//enable pull-up resistor
  40080e:	680e      	ldr	r6, [r1, #0]
  400810:	f446 4600 	orr.w	r6, r6, #32768	; 0x8000
  400814:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P15; //turn on slow clock debounce
  400816:	6816      	ldr	r6, [r2, #0]
  400818:	f446 4600 	orr.w	r6, r6, #32768	; 0x8000
  40081c:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P15;	//start debounce filter
  40081e:	681e      	ldr	r6, [r3, #0]
  400820:	f446 4600 	orr.w	r6, r6, #32768	; 0x8000
  400824:	601e      	str	r6, [r3, #0]



	//Set up PC16 as ENCODER 9 INPUT A
	REG_PIOC_PER |= PIO_PER_P16; //enable PIO controller
  400826:	682e      	ldr	r6, [r5, #0]
  400828:	f446 3680 	orr.w	r6, r6, #65536	; 0x10000
  40082c:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P16; //disable output
  40082e:	6826      	ldr	r6, [r4, #0]
  400830:	f446 3680 	orr.w	r6, r6, #65536	; 0x10000
  400834:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P16; //disable pull-down resistor
  400836:	6806      	ldr	r6, [r0, #0]
  400838:	f446 3680 	orr.w	r6, r6, #65536	; 0x10000
  40083c:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P16;	//enable pull-up resistor
  40083e:	680e      	ldr	r6, [r1, #0]
  400840:	f446 3680 	orr.w	r6, r6, #65536	; 0x10000
  400844:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P16; //turn on slow clock debounce
  400846:	6816      	ldr	r6, [r2, #0]
  400848:	f446 3680 	orr.w	r6, r6, #65536	; 0x10000
  40084c:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P16;	//start debounce filter
  40084e:	681e      	ldr	r6, [r3, #0]
  400850:	f446 3680 	orr.w	r6, r6, #65536	; 0x10000
  400854:	601e      	str	r6, [r3, #0]

	//Set up PC17 as ENCODER 9 INPUT B
	REG_PIOC_PER |= PIO_PER_P17; //enable PIO controller
  400856:	682e      	ldr	r6, [r5, #0]
  400858:	f446 3600 	orr.w	r6, r6, #131072	; 0x20000
  40085c:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P17; //disable output
  40085e:	6826      	ldr	r6, [r4, #0]
  400860:	f446 3600 	orr.w	r6, r6, #131072	; 0x20000
  400864:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P17; //disable pull-down resistor
  400866:	6806      	ldr	r6, [r0, #0]
  400868:	f446 3600 	orr.w	r6, r6, #131072	; 0x20000
  40086c:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P17;	//enable pull-up resistor
  40086e:	680e      	ldr	r6, [r1, #0]
  400870:	f446 3600 	orr.w	r6, r6, #131072	; 0x20000
  400874:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P17; //turn on slow clock debounce
  400876:	6816      	ldr	r6, [r2, #0]
  400878:	f446 3600 	orr.w	r6, r6, #131072	; 0x20000
  40087c:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P17;	//start debounce filter
  40087e:	681e      	ldr	r6, [r3, #0]
  400880:	f446 3600 	orr.w	r6, r6, #131072	; 0x20000
  400884:	601e      	str	r6, [r3, #0]



	
	//Set up PC18 as ENCODER 10 INPUT A
	REG_PIOC_PER |= PIO_PER_P18; //enable PIO controller
  400886:	682e      	ldr	r6, [r5, #0]
  400888:	f446 2680 	orr.w	r6, r6, #262144	; 0x40000
  40088c:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P18; //disable output
  40088e:	6826      	ldr	r6, [r4, #0]
  400890:	f446 2680 	orr.w	r6, r6, #262144	; 0x40000
  400894:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P18; //disable pull-down resistor
  400896:	6806      	ldr	r6, [r0, #0]
  400898:	f446 2680 	orr.w	r6, r6, #262144	; 0x40000
  40089c:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P18;	//enable pull-up resistor
  40089e:	680e      	ldr	r6, [r1, #0]
  4008a0:	f446 2680 	orr.w	r6, r6, #262144	; 0x40000
  4008a4:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P18; //turn on slow clock debounce
  4008a6:	6816      	ldr	r6, [r2, #0]
  4008a8:	f446 2680 	orr.w	r6, r6, #262144	; 0x40000
  4008ac:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P18;	//start debounce filter
  4008ae:	681e      	ldr	r6, [r3, #0]
  4008b0:	f446 2680 	orr.w	r6, r6, #262144	; 0x40000
  4008b4:	601e      	str	r6, [r3, #0]

	//Set up PC19 as ENCODER 10 INPUT B
	REG_PIOC_PER |= PIO_PER_P19; //enable PIO controller
  4008b6:	682e      	ldr	r6, [r5, #0]
  4008b8:	f446 2600 	orr.w	r6, r6, #524288	; 0x80000
  4008bc:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P19; //disable output
  4008be:	6826      	ldr	r6, [r4, #0]
  4008c0:	f446 2600 	orr.w	r6, r6, #524288	; 0x80000
  4008c4:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P19; //disable pull-down resistor
  4008c6:	6806      	ldr	r6, [r0, #0]
  4008c8:	f446 2600 	orr.w	r6, r6, #524288	; 0x80000
  4008cc:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P19;	//enable pull-up resistor
  4008ce:	680e      	ldr	r6, [r1, #0]
  4008d0:	f446 2600 	orr.w	r6, r6, #524288	; 0x80000
  4008d4:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P19; //turn on slow clock debounce
  4008d6:	6816      	ldr	r6, [r2, #0]
  4008d8:	f446 2600 	orr.w	r6, r6, #524288	; 0x80000
  4008dc:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P19;	//start debounce filter
  4008de:	681e      	ldr	r6, [r3, #0]
  4008e0:	f446 2600 	orr.w	r6, r6, #524288	; 0x80000
  4008e4:	601e      	str	r6, [r3, #0]



	//Set up PC20 as ENCODER 11 INPUT A
	REG_PIOC_PER |= PIO_PER_P20; //enable PIO controller
  4008e6:	682e      	ldr	r6, [r5, #0]
  4008e8:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
  4008ec:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P20; //disable output
  4008ee:	6826      	ldr	r6, [r4, #0]
  4008f0:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
  4008f4:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P20; //disable pull-down resistor
  4008f6:	6806      	ldr	r6, [r0, #0]
  4008f8:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
  4008fc:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P20;	//enable pull-up resistor
  4008fe:	680e      	ldr	r6, [r1, #0]
  400900:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
  400904:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P20; //turn on slow clock debounce
  400906:	6816      	ldr	r6, [r2, #0]
  400908:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
  40090c:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P20;	//start debounce filter
  40090e:	681e      	ldr	r6, [r3, #0]
  400910:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
  400914:	601e      	str	r6, [r3, #0]

	//Set up PC21 as ENCODER 11 INPUT B
	REG_PIOC_PER |= PIO_PER_P21; //enable PIO controller
  400916:	682e      	ldr	r6, [r5, #0]
  400918:	f446 1600 	orr.w	r6, r6, #2097152	; 0x200000
  40091c:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P21; //disable output
  40091e:	6826      	ldr	r6, [r4, #0]
  400920:	f446 1600 	orr.w	r6, r6, #2097152	; 0x200000
  400924:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P21; //disable pull-down resistor
  400926:	6806      	ldr	r6, [r0, #0]
  400928:	f446 1600 	orr.w	r6, r6, #2097152	; 0x200000
  40092c:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P21;	//enable pull-up resistor
  40092e:	680e      	ldr	r6, [r1, #0]
  400930:	f446 1600 	orr.w	r6, r6, #2097152	; 0x200000
  400934:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P21; //turn on slow clock debounce
  400936:	6816      	ldr	r6, [r2, #0]
  400938:	f446 1600 	orr.w	r6, r6, #2097152	; 0x200000
  40093c:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P21;	//start debounce filter
  40093e:	681e      	ldr	r6, [r3, #0]
  400940:	f446 1600 	orr.w	r6, r6, #2097152	; 0x200000
  400944:	601e      	str	r6, [r3, #0]



	//Set up PC22 as ENCODER 12 INPUT A
	REG_PIOC_PER |= PIO_PER_P22; //enable PIO controller
  400946:	682e      	ldr	r6, [r5, #0]
  400948:	f446 0680 	orr.w	r6, r6, #4194304	; 0x400000
  40094c:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P22; //disable output
  40094e:	6826      	ldr	r6, [r4, #0]
  400950:	f446 0680 	orr.w	r6, r6, #4194304	; 0x400000
  400954:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P22; //disable pull-down resistor
  400956:	6806      	ldr	r6, [r0, #0]
  400958:	f446 0680 	orr.w	r6, r6, #4194304	; 0x400000
  40095c:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P22;	//enable pull-up resistor
  40095e:	680e      	ldr	r6, [r1, #0]
  400960:	f446 0680 	orr.w	r6, r6, #4194304	; 0x400000
  400964:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P22; //turn on slow clock debounce
  400966:	6816      	ldr	r6, [r2, #0]
  400968:	f446 0680 	orr.w	r6, r6, #4194304	; 0x400000
  40096c:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P22;	//start debounce filter
  40096e:	681e      	ldr	r6, [r3, #0]
  400970:	f446 0680 	orr.w	r6, r6, #4194304	; 0x400000
  400974:	601e      	str	r6, [r3, #0]

	//Set up PC23 as ENCODER 12 INPUT B
	REG_PIOC_PER |= PIO_PER_P23; //enable PIO controller
  400976:	682e      	ldr	r6, [r5, #0]
  400978:	f446 0600 	orr.w	r6, r6, #8388608	; 0x800000
  40097c:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P23; //disable output
  40097e:	6826      	ldr	r6, [r4, #0]
  400980:	f446 0600 	orr.w	r6, r6, #8388608	; 0x800000
  400984:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P23; //disable pull-down resistor
  400986:	6806      	ldr	r6, [r0, #0]
  400988:	f446 0600 	orr.w	r6, r6, #8388608	; 0x800000
  40098c:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P23;	//enable pull-up resistor
  40098e:	680e      	ldr	r6, [r1, #0]
  400990:	f446 0600 	orr.w	r6, r6, #8388608	; 0x800000
  400994:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P23; //turn on slow clock debounce
  400996:	6816      	ldr	r6, [r2, #0]
  400998:	f446 0600 	orr.w	r6, r6, #8388608	; 0x800000
  40099c:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P23;	//start debounce filter
  40099e:	681e      	ldr	r6, [r3, #0]
  4009a0:	f446 0600 	orr.w	r6, r6, #8388608	; 0x800000
  4009a4:	601e      	str	r6, [r3, #0]



	//Set up PC24 as ENCODER 13 INPUT A
	REG_PIOC_PER |= PIO_PER_P24; //enable PIO controller
  4009a6:	682e      	ldr	r6, [r5, #0]
  4009a8:	f046 7680 	orr.w	r6, r6, #16777216	; 0x1000000
  4009ac:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P24; //disable output
  4009ae:	6826      	ldr	r6, [r4, #0]
  4009b0:	f046 7680 	orr.w	r6, r6, #16777216	; 0x1000000
  4009b4:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P24; //disable pull-down resistor
  4009b6:	6806      	ldr	r6, [r0, #0]
  4009b8:	f046 7680 	orr.w	r6, r6, #16777216	; 0x1000000
  4009bc:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P24;	//enable pull-up resistor
  4009be:	680e      	ldr	r6, [r1, #0]
  4009c0:	f046 7680 	orr.w	r6, r6, #16777216	; 0x1000000
  4009c4:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P24; //turn on slow clock debounce
  4009c6:	6816      	ldr	r6, [r2, #0]
  4009c8:	f046 7680 	orr.w	r6, r6, #16777216	; 0x1000000
  4009cc:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P24;	//start debounce filter
  4009ce:	681e      	ldr	r6, [r3, #0]
  4009d0:	f046 7680 	orr.w	r6, r6, #16777216	; 0x1000000
  4009d4:	601e      	str	r6, [r3, #0]

	//Set up PC25 as ENCODER 13 INPUT B
	REG_PIOC_PER |= PIO_PER_P25; //enable PIO controller
  4009d6:	682e      	ldr	r6, [r5, #0]
  4009d8:	f046 7600 	orr.w	r6, r6, #33554432	; 0x2000000
  4009dc:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P25; //disable output
  4009de:	6826      	ldr	r6, [r4, #0]
  4009e0:	f046 7600 	orr.w	r6, r6, #33554432	; 0x2000000
  4009e4:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P25; //disable pull-down resistor
  4009e6:	6806      	ldr	r6, [r0, #0]
  4009e8:	f046 7600 	orr.w	r6, r6, #33554432	; 0x2000000
  4009ec:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P25;	//enable pull-up resistor
  4009ee:	680e      	ldr	r6, [r1, #0]
  4009f0:	f046 7600 	orr.w	r6, r6, #33554432	; 0x2000000
  4009f4:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P25; //turn on slow clock debounce
  4009f6:	6816      	ldr	r6, [r2, #0]
  4009f8:	f046 7600 	orr.w	r6, r6, #33554432	; 0x2000000
  4009fc:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P25;	//start debounce filter
  4009fe:	681e      	ldr	r6, [r3, #0]
  400a00:	f046 7600 	orr.w	r6, r6, #33554432	; 0x2000000
  400a04:	601e      	str	r6, [r3, #0]



	//Set up PC26 as ENCODER 14 INPUT A
	REG_PIOC_PER |= PIO_PER_P26; //enable PIO controller
  400a06:	682e      	ldr	r6, [r5, #0]
  400a08:	f046 6680 	orr.w	r6, r6, #67108864	; 0x4000000
  400a0c:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P26; //disable output
  400a0e:	6826      	ldr	r6, [r4, #0]
  400a10:	f046 6680 	orr.w	r6, r6, #67108864	; 0x4000000
  400a14:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P26; //disable pull-down resistor
  400a16:	6806      	ldr	r6, [r0, #0]
  400a18:	f046 6680 	orr.w	r6, r6, #67108864	; 0x4000000
  400a1c:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P26;	//enable pull-up resistor
  400a1e:	680e      	ldr	r6, [r1, #0]
  400a20:	f046 6680 	orr.w	r6, r6, #67108864	; 0x4000000
  400a24:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P26; //turn on slow clock debounce
  400a26:	6816      	ldr	r6, [r2, #0]
  400a28:	f046 6680 	orr.w	r6, r6, #67108864	; 0x4000000
  400a2c:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P26;	//start debounce filter
  400a2e:	681e      	ldr	r6, [r3, #0]
  400a30:	f046 6680 	orr.w	r6, r6, #67108864	; 0x4000000
  400a34:	601e      	str	r6, [r3, #0]

	//Set up PC27 as ENCODER 14 INPUT B
	REG_PIOC_PER |= PIO_PER_P27; //enable PIO controller
  400a36:	682e      	ldr	r6, [r5, #0]
  400a38:	f046 6600 	orr.w	r6, r6, #134217728	; 0x8000000
  400a3c:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P27; //disable output
  400a3e:	6826      	ldr	r6, [r4, #0]
  400a40:	f046 6600 	orr.w	r6, r6, #134217728	; 0x8000000
  400a44:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P27; //disable pull-down resistor
  400a46:	6806      	ldr	r6, [r0, #0]
  400a48:	f046 6600 	orr.w	r6, r6, #134217728	; 0x8000000
  400a4c:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P27;	//enable pull-up resistor
  400a4e:	680e      	ldr	r6, [r1, #0]
  400a50:	f046 6600 	orr.w	r6, r6, #134217728	; 0x8000000
  400a54:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P27; //turn on slow clock debounce
  400a56:	6816      	ldr	r6, [r2, #0]
  400a58:	f046 6600 	orr.w	r6, r6, #134217728	; 0x8000000
  400a5c:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P27;	//start debounce filter
  400a5e:	681e      	ldr	r6, [r3, #0]
  400a60:	f046 6600 	orr.w	r6, r6, #134217728	; 0x8000000
  400a64:	601e      	str	r6, [r3, #0]



	//Set up PC28 as ENCODER 15 INPUT A
	REG_PIOC_PER |= PIO_PER_P28; //enable PIO controller
  400a66:	682e      	ldr	r6, [r5, #0]
  400a68:	f046 5680 	orr.w	r6, r6, #268435456	; 0x10000000
  400a6c:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P28; //disable output
  400a6e:	6826      	ldr	r6, [r4, #0]
  400a70:	f046 5680 	orr.w	r6, r6, #268435456	; 0x10000000
  400a74:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P28; //disable pull-down resistor
  400a76:	6806      	ldr	r6, [r0, #0]
  400a78:	f046 5680 	orr.w	r6, r6, #268435456	; 0x10000000
  400a7c:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P28;	//enable pull-up resistor
  400a7e:	680e      	ldr	r6, [r1, #0]
  400a80:	f046 5680 	orr.w	r6, r6, #268435456	; 0x10000000
  400a84:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P28; //turn on slow clock debounce
  400a86:	6816      	ldr	r6, [r2, #0]
  400a88:	f046 5680 	orr.w	r6, r6, #268435456	; 0x10000000
  400a8c:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P28;	//start debounce filter
  400a8e:	681e      	ldr	r6, [r3, #0]
  400a90:	f046 5680 	orr.w	r6, r6, #268435456	; 0x10000000
  400a94:	601e      	str	r6, [r3, #0]

	//Set up PC29 as ENCODER 15 INPUT B
	REG_PIOC_PER |= PIO_PER_P29; //enable PIO controller
  400a96:	682e      	ldr	r6, [r5, #0]
  400a98:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
  400a9c:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P29; //disable output
  400a9e:	6826      	ldr	r6, [r4, #0]
  400aa0:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
  400aa4:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P29; //disable pull-down resistor
  400aa6:	6806      	ldr	r6, [r0, #0]
  400aa8:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
  400aac:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P29;	//enable pull-up resistor
  400aae:	680e      	ldr	r6, [r1, #0]
  400ab0:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
  400ab4:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P29; //turn on slow clock debounce
  400ab6:	6816      	ldr	r6, [r2, #0]
  400ab8:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
  400abc:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P29;	//start debounce filter
  400abe:	681e      	ldr	r6, [r3, #0]
  400ac0:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
  400ac4:	601e      	str	r6, [r3, #0]



	//Set up PC30 as ENCODER 16 INPUT A
	REG_PIOC_PER |= PIO_PER_P30; //enable PIO controller
  400ac6:	682e      	ldr	r6, [r5, #0]
  400ac8:	f046 4680 	orr.w	r6, r6, #1073741824	; 0x40000000
  400acc:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P30; //disable output
  400ace:	6826      	ldr	r6, [r4, #0]
  400ad0:	f046 4680 	orr.w	r6, r6, #1073741824	; 0x40000000
  400ad4:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P30; //disable pull-down resistor
  400ad6:	6806      	ldr	r6, [r0, #0]
  400ad8:	f046 4680 	orr.w	r6, r6, #1073741824	; 0x40000000
  400adc:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P30;	//enable pull-up resistor
  400ade:	680e      	ldr	r6, [r1, #0]
  400ae0:	f046 4680 	orr.w	r6, r6, #1073741824	; 0x40000000
  400ae4:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P30; //turn on slow clock debounce
  400ae6:	6816      	ldr	r6, [r2, #0]
  400ae8:	f046 4680 	orr.w	r6, r6, #1073741824	; 0x40000000
  400aec:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P30;	//start debounce filter
  400aee:	681e      	ldr	r6, [r3, #0]
  400af0:	f046 4680 	orr.w	r6, r6, #1073741824	; 0x40000000
  400af4:	601e      	str	r6, [r3, #0]

	//Set up PC31 as ENCODER 16 INPUT B
	REG_PIOC_PER |= PIO_PER_P31; //enable PIO controller
  400af6:	682e      	ldr	r6, [r5, #0]
  400af8:	f046 4600 	orr.w	r6, r6, #2147483648	; 0x80000000
  400afc:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P31; //disable output
  400afe:	6825      	ldr	r5, [r4, #0]
  400b00:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
  400b04:	6025      	str	r5, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P31; //disable pull-down resistor
  400b06:	6804      	ldr	r4, [r0, #0]
  400b08:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
  400b0c:	6004      	str	r4, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P31;	//enable pull-up resistor
  400b0e:	6808      	ldr	r0, [r1, #0]
  400b10:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
  400b14:	6008      	str	r0, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P31; //turn on slow clock debounce
  400b16:	6811      	ldr	r1, [r2, #0]
  400b18:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
  400b1c:	6011      	str	r1, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P31;	//start debounce filter
  400b1e:	681a      	ldr	r2, [r3, #0]
  400b20:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
  400b24:	601a      	str	r2, [r3, #0]
	 


	/**************			CONFIGURE ENCODER INTERRUPTS			**************/

	uint32_t flag_clear = REG_PIOC_ISR;	//clear left over interrupt flags
  400b26:	332c      	adds	r3, #44	; 0x2c
  400b28:	681b      	ldr	r3, [r3, #0]

	//Enable interrupts for Encoder 1
	REG_PIOC_IER |= PIO_IER_P0;			//enable input rising edge interrupt
  400b2a:	4b85      	ldr	r3, [pc, #532]	; (400d40 <Encoder_init+0x860>)
  400b2c:	681a      	ldr	r2, [r3, #0]
  400b2e:	f042 0201 	orr.w	r2, r2, #1
  400b32:	601a      	str	r2, [r3, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P0;
  400b34:	4a83      	ldr	r2, [pc, #524]	; (400d44 <Encoder_init+0x864>)
  400b36:	6811      	ldr	r1, [r2, #0]
  400b38:	f041 0101 	orr.w	r1, r1, #1
  400b3c:	6011      	str	r1, [r2, #0]
	REG_PIOC_IER |= PIO_IER_P1;			//enable input rising edge interrupt
  400b3e:	6819      	ldr	r1, [r3, #0]
  400b40:	f041 0102 	orr.w	r1, r1, #2
  400b44:	6019      	str	r1, [r3, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P1;
  400b46:	6811      	ldr	r1, [r2, #0]
  400b48:	f041 0102 	orr.w	r1, r1, #2
  400b4c:	6011      	str	r1, [r2, #0]

	//Enable interrupts for Encoder 2
	REG_PIOC_IER |= PIO_IER_P2;			//enable input rising edge interrupt
  400b4e:	6819      	ldr	r1, [r3, #0]
  400b50:	f041 0104 	orr.w	r1, r1, #4
  400b54:	6019      	str	r1, [r3, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P2;
  400b56:	6812      	ldr	r2, [r2, #0]
  400b58:	f042 0204 	orr.w	r2, r2, #4
  400b5c:	3394      	adds	r3, #148	; 0x94
  400b5e:	601a      	str	r2, [r3, #0]
	REG_PIOC_IER |= PIO_IER_P3;			//enable input rising edge interrupt
  400b60:	4a77      	ldr	r2, [pc, #476]	; (400d40 <Encoder_init+0x860>)
  400b62:	6811      	ldr	r1, [r2, #0]
  400b64:	f041 0108 	orr.w	r1, r1, #8
  400b68:	6011      	str	r1, [r2, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P3;
  400b6a:	6819      	ldr	r1, [r3, #0]
  400b6c:	f041 0108 	orr.w	r1, r1, #8
  400b70:	6019      	str	r1, [r3, #0]

	//Enable interrupts for Encoder 3
	REG_PIOC_IER |= PIO_IER_P4;			//enable input rising edge interrupt
  400b72:	6811      	ldr	r1, [r2, #0]
  400b74:	f041 0110 	orr.w	r1, r1, #16
  400b78:	6011      	str	r1, [r2, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P4;
  400b7a:	6819      	ldr	r1, [r3, #0]
  400b7c:	f041 0110 	orr.w	r1, r1, #16
  400b80:	6019      	str	r1, [r3, #0]
	REG_PIOC_IER |= PIO_IER_P5;			//enable input rising edge interrupt
  400b82:	6811      	ldr	r1, [r2, #0]
  400b84:	f041 0120 	orr.w	r1, r1, #32
  400b88:	6011      	str	r1, [r2, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P5;
  400b8a:	6819      	ldr	r1, [r3, #0]
  400b8c:	f041 0120 	orr.w	r1, r1, #32
  400b90:	6019      	str	r1, [r3, #0]

	//Enable interrupts for Encoder 4
	REG_PIOC_IER |= PIO_IER_P6;			//enable input rising edge interrupt
  400b92:	6811      	ldr	r1, [r2, #0]
  400b94:	f041 0140 	orr.w	r1, r1, #64	; 0x40
  400b98:	6011      	str	r1, [r2, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P6;
  400b9a:	6819      	ldr	r1, [r3, #0]
  400b9c:	f041 0140 	orr.w	r1, r1, #64	; 0x40
  400ba0:	6019      	str	r1, [r3, #0]
	REG_PIOC_IER |= PIO_IER_P7;			//enable input rising edge interrupt
  400ba2:	6811      	ldr	r1, [r2, #0]
  400ba4:	f041 0180 	orr.w	r1, r1, #128	; 0x80
  400ba8:	6011      	str	r1, [r2, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P7;
  400baa:	6819      	ldr	r1, [r3, #0]
  400bac:	f041 0180 	orr.w	r1, r1, #128	; 0x80
  400bb0:	6019      	str	r1, [r3, #0]

	//Enable interrupts for Encoder 5
	REG_PIOC_IER |= PIO_IER_P8;			//enable input rising edge interrupt
  400bb2:	6811      	ldr	r1, [r2, #0]
  400bb4:	f441 7180 	orr.w	r1, r1, #256	; 0x100
  400bb8:	6011      	str	r1, [r2, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P8;
  400bba:	6819      	ldr	r1, [r3, #0]
  400bbc:	f441 7180 	orr.w	r1, r1, #256	; 0x100
  400bc0:	6019      	str	r1, [r3, #0]
	REG_PIOC_IER |= PIO_IER_P9;			//enable input rising edge interrupt
  400bc2:	6811      	ldr	r1, [r2, #0]
  400bc4:	f441 7100 	orr.w	r1, r1, #512	; 0x200
  400bc8:	6011      	str	r1, [r2, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P9;
  400bca:	6819      	ldr	r1, [r3, #0]
  400bcc:	f441 7100 	orr.w	r1, r1, #512	; 0x200
  400bd0:	6019      	str	r1, [r3, #0]

	//Enable interrupts for Encoder 6
	REG_PIOC_IER |= PIO_IER_P10;			//enable input rising edge interrupt
  400bd2:	6811      	ldr	r1, [r2, #0]
  400bd4:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
  400bd8:	6011      	str	r1, [r2, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P10;
  400bda:	6819      	ldr	r1, [r3, #0]
  400bdc:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
  400be0:	6019      	str	r1, [r3, #0]
	REG_PIOC_IER |= PIO_IER_P11;			//enable input rising edge interrupt
  400be2:	6811      	ldr	r1, [r2, #0]
  400be4:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
  400be8:	6011      	str	r1, [r2, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P11;
  400bea:	6819      	ldr	r1, [r3, #0]
  400bec:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
  400bf0:	6019      	str	r1, [r3, #0]

	//Enable interrupts for Encoder 7
	REG_PIOC_IER |= PIO_IER_P3;			//enable input rising edge interrupt
  400bf2:	6811      	ldr	r1, [r2, #0]
  400bf4:	f041 0108 	orr.w	r1, r1, #8
  400bf8:	6011      	str	r1, [r2, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P3;
  400bfa:	6819      	ldr	r1, [r3, #0]
  400bfc:	f041 0108 	orr.w	r1, r1, #8
  400c00:	6019      	str	r1, [r3, #0]
	REG_PIOC_IER |= PIO_IER_P13;			//enable input rising edge interrupt
  400c02:	6811      	ldr	r1, [r2, #0]
  400c04:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
  400c08:	6011      	str	r1, [r2, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P13;
  400c0a:	6819      	ldr	r1, [r3, #0]
  400c0c:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
  400c10:	6019      	str	r1, [r3, #0]

	//Enable interrupts for Encoder 8
	REG_PIOC_IER |= PIO_IER_P14;			//enable input rising edge interrupt
  400c12:	6811      	ldr	r1, [r2, #0]
  400c14:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
  400c18:	6011      	str	r1, [r2, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P14;
  400c1a:	6819      	ldr	r1, [r3, #0]
  400c1c:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
  400c20:	6019      	str	r1, [r3, #0]
	REG_PIOC_IER |= PIO_IER_P15;			//enable input rising edge interrupt
  400c22:	6811      	ldr	r1, [r2, #0]
  400c24:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
  400c28:	6011      	str	r1, [r2, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P15;
  400c2a:	6819      	ldr	r1, [r3, #0]
  400c2c:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
  400c30:	6019      	str	r1, [r3, #0]

	//Enable interrupts for Encoder 9
	REG_PIOC_IER |= PIO_IER_P16;			//enable input rising edge interrupt
  400c32:	6811      	ldr	r1, [r2, #0]
  400c34:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
  400c38:	6011      	str	r1, [r2, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P16;
  400c3a:	6819      	ldr	r1, [r3, #0]
  400c3c:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
  400c40:	6019      	str	r1, [r3, #0]
	REG_PIOC_IER |= PIO_IER_P17;			//enable input rising edge interrupt
  400c42:	6811      	ldr	r1, [r2, #0]
  400c44:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
  400c48:	6011      	str	r1, [r2, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P17;
  400c4a:	6819      	ldr	r1, [r3, #0]
  400c4c:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
  400c50:	6019      	str	r1, [r3, #0]

	//Enable interrupts for Encoder 10
	REG_PIOC_IER |= PIO_IER_P18;			//enable input rising edge interrupt
  400c52:	6811      	ldr	r1, [r2, #0]
  400c54:	f441 2180 	orr.w	r1, r1, #262144	; 0x40000
  400c58:	6011      	str	r1, [r2, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P18;
  400c5a:	6819      	ldr	r1, [r3, #0]
  400c5c:	f441 2180 	orr.w	r1, r1, #262144	; 0x40000
  400c60:	6019      	str	r1, [r3, #0]
	REG_PIOC_IER |= PIO_IER_P19;			//enable input rising edge interrupt
  400c62:	6811      	ldr	r1, [r2, #0]
  400c64:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
  400c68:	6011      	str	r1, [r2, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P19;
  400c6a:	6819      	ldr	r1, [r3, #0]
  400c6c:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
  400c70:	6019      	str	r1, [r3, #0]

	//Enable interrupts for Encoder 11
	REG_PIOC_IER |= PIO_IER_P20;			//enable input rising edge interrupt
  400c72:	6811      	ldr	r1, [r2, #0]
  400c74:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  400c78:	6011      	str	r1, [r2, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P20;
  400c7a:	6819      	ldr	r1, [r3, #0]
  400c7c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  400c80:	6019      	str	r1, [r3, #0]
	REG_PIOC_IER |= PIO_IER_P21;			//enable input rising edge interrupt
  400c82:	6811      	ldr	r1, [r2, #0]
  400c84:	f441 1100 	orr.w	r1, r1, #2097152	; 0x200000
  400c88:	6011      	str	r1, [r2, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P21;
  400c8a:	6819      	ldr	r1, [r3, #0]
  400c8c:	f441 1100 	orr.w	r1, r1, #2097152	; 0x200000
  400c90:	6019      	str	r1, [r3, #0]

	//Enable interrupts for Encoder 12
	REG_PIOC_IER |= PIO_IER_P22;			//enable input rising edge interrupt
  400c92:	6811      	ldr	r1, [r2, #0]
  400c94:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
  400c98:	6011      	str	r1, [r2, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P22;
  400c9a:	6819      	ldr	r1, [r3, #0]
  400c9c:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
  400ca0:	6019      	str	r1, [r3, #0]
	REG_PIOC_IER |= PIO_IER_P23;			//enable input rising edge interrupt
  400ca2:	6811      	ldr	r1, [r2, #0]
  400ca4:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
  400ca8:	6011      	str	r1, [r2, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P23;
  400caa:	6819      	ldr	r1, [r3, #0]
  400cac:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
  400cb0:	6019      	str	r1, [r3, #0]

	//Enable interrupts for Encoder 13
	REG_PIOC_IER |= PIO_IER_P24;			//enable input rising edge interrupt
  400cb2:	6811      	ldr	r1, [r2, #0]
  400cb4:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
  400cb8:	6011      	str	r1, [r2, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P24;
  400cba:	6819      	ldr	r1, [r3, #0]
  400cbc:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
  400cc0:	6019      	str	r1, [r3, #0]
	REG_PIOC_IER |= PIO_IER_P25;			//enable input rising edge interrupt
  400cc2:	6811      	ldr	r1, [r2, #0]
  400cc4:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
  400cc8:	6011      	str	r1, [r2, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P25;
  400cca:	6819      	ldr	r1, [r3, #0]
  400ccc:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
  400cd0:	6019      	str	r1, [r3, #0]

	//Enable interrupts for Encoder 14
	REG_PIOC_IER |= PIO_IER_P26;			//enable input rising edge interrupt
  400cd2:	6811      	ldr	r1, [r2, #0]
  400cd4:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
  400cd8:	6011      	str	r1, [r2, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P26;
  400cda:	6819      	ldr	r1, [r3, #0]
  400cdc:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
  400ce0:	6019      	str	r1, [r3, #0]
	REG_PIOC_IER |= PIO_IER_P27;			//enable input rising edge interrupt
  400ce2:	6811      	ldr	r1, [r2, #0]
  400ce4:	f041 6100 	orr.w	r1, r1, #134217728	; 0x8000000
  400ce8:	6011      	str	r1, [r2, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P27;
  400cea:	6819      	ldr	r1, [r3, #0]
  400cec:	f041 6100 	orr.w	r1, r1, #134217728	; 0x8000000
  400cf0:	6019      	str	r1, [r3, #0]

	//Enable interrupts for Encoder 15
	REG_PIOC_IER |= PIO_IER_P28;			//enable input rising edge interrupt
  400cf2:	6811      	ldr	r1, [r2, #0]
  400cf4:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
  400cf8:	6011      	str	r1, [r2, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P28;
  400cfa:	6819      	ldr	r1, [r3, #0]
  400cfc:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
  400d00:	6019      	str	r1, [r3, #0]
	REG_PIOC_IER |= PIO_IER_P29;			//enable input rising edge interrupt
  400d02:	6811      	ldr	r1, [r2, #0]
  400d04:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
  400d08:	6011      	str	r1, [r2, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P29;
  400d0a:	6819      	ldr	r1, [r3, #0]
  400d0c:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
  400d10:	6019      	str	r1, [r3, #0]

	//Enable interrupts for Encoder 16
	REG_PIOC_IER |= PIO_IER_P30;			//enable input rising edge interrupt
  400d12:	6811      	ldr	r1, [r2, #0]
  400d14:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
  400d18:	6011      	str	r1, [r2, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P30;
  400d1a:	6819      	ldr	r1, [r3, #0]
  400d1c:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
  400d20:	6019      	str	r1, [r3, #0]
	REG_PIOC_IER |= PIO_IER_P31;			//enable input rising edge interrupt
  400d22:	6811      	ldr	r1, [r2, #0]
  400d24:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
  400d28:	6011      	str	r1, [r2, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P31;
  400d2a:	681a      	ldr	r2, [r3, #0]
  400d2c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
  400d30:	601a      	str	r2, [r3, #0]
  400d32:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  400d36:	4b04      	ldr	r3, [pc, #16]	; (400d48 <Encoder_init+0x868>)
  400d38:	601a      	str	r2, [r3, #0]

	NVIC_EnableIRQ(PIOC_IRQn);			//enable PORT C interrupts
}
  400d3a:	bc70      	pop	{r4, r5, r6}
  400d3c:	4770      	bx	lr
  400d3e:	bf00      	nop
  400d40:	400e1240 	.word	0x400e1240
  400d44:	400e12d4 	.word	0x400e12d4
  400d48:	e000e100 	.word	0xe000e100

00400d4c <PIOC_Handler>:



void PIOC_Handler(){
  400d4c:	b508      	push	{r3, lr}

	uint32_t status = REG_PIOC_ISR;	//read PIOC interrupt status & clear interrupt flags
  400d4e:	4b56      	ldr	r3, [pc, #344]	; (400ea8 <PIOC_Handler+0x15c>)
  400d50:	681b      	ldr	r3, [r3, #0]

	//check if Encoder 1 was rotated
	if ( (status & PIO_ISR_P0) || (status & PIO_ISR_P1) ){	
  400d52:	f013 0f03 	tst.w	r3, #3
  400d56:	d005      	beq.n	400d64 <PIOC_Handler+0x18>
		encoder_direction(PIO_ODSR_P0, PIO_ODSR_P1, 0);
  400d58:	2200      	movs	r2, #0
  400d5a:	2102      	movs	r1, #2
  400d5c:	2001      	movs	r0, #1
  400d5e:	4b53      	ldr	r3, [pc, #332]	; (400eac <PIOC_Handler+0x160>)
  400d60:	4798      	blx	r3
  400d62:	bd08      	pop	{r3, pc}
	}

	//check if Encoder 2 was rotated
	else if ( (status & PIO_ISR_P2) || (status & PIO_ISR_P3) ){
  400d64:	f013 0f0c 	tst.w	r3, #12
  400d68:	d005      	beq.n	400d76 <PIOC_Handler+0x2a>
		encoder_direction(PIO_ODSR_P2, PIO_ODSR_P3, 1);
  400d6a:	2201      	movs	r2, #1
  400d6c:	2108      	movs	r1, #8
  400d6e:	2004      	movs	r0, #4
  400d70:	4b4e      	ldr	r3, [pc, #312]	; (400eac <PIOC_Handler+0x160>)
  400d72:	4798      	blx	r3
  400d74:	bd08      	pop	{r3, pc}
	}

	//check if Encoder 3 was rotated
	else if ( (status & PIO_ISR_P4) || (status & PIO_ISR_P5) ){
  400d76:	f013 0f30 	tst.w	r3, #48	; 0x30
  400d7a:	d005      	beq.n	400d88 <PIOC_Handler+0x3c>
		encoder_direction(PIO_ODSR_P4, PIO_ODSR_P5, 2);
  400d7c:	2202      	movs	r2, #2
  400d7e:	2120      	movs	r1, #32
  400d80:	2010      	movs	r0, #16
  400d82:	4b4a      	ldr	r3, [pc, #296]	; (400eac <PIOC_Handler+0x160>)
  400d84:	4798      	blx	r3
  400d86:	bd08      	pop	{r3, pc}
	}

	//check if Encoder 4 was rotated
	else if ( (status & PIO_ISR_P6) || (status & PIO_ISR_P7) ){
  400d88:	f013 0fc0 	tst.w	r3, #192	; 0xc0
  400d8c:	d005      	beq.n	400d9a <PIOC_Handler+0x4e>
		encoder_direction(PIO_ODSR_P6, PIO_ODSR_P7, 3);
  400d8e:	2203      	movs	r2, #3
  400d90:	2180      	movs	r1, #128	; 0x80
  400d92:	2040      	movs	r0, #64	; 0x40
  400d94:	4b45      	ldr	r3, [pc, #276]	; (400eac <PIOC_Handler+0x160>)
  400d96:	4798      	blx	r3
  400d98:	bd08      	pop	{r3, pc}
	}

	//check if Encoder 5 was rotated
	else if ( (status & PIO_ISR_P8) || (status & PIO_ISR_P9) ){
  400d9a:	f413 7f40 	tst.w	r3, #768	; 0x300
  400d9e:	d007      	beq.n	400db0 <PIOC_Handler+0x64>
		encoder_direction(PIO_ODSR_P8, PIO_ODSR_P9, 4);
  400da0:	2204      	movs	r2, #4
  400da2:	f44f 7100 	mov.w	r1, #512	; 0x200
  400da6:	f44f 7080 	mov.w	r0, #256	; 0x100
  400daa:	4b40      	ldr	r3, [pc, #256]	; (400eac <PIOC_Handler+0x160>)
  400dac:	4798      	blx	r3
  400dae:	bd08      	pop	{r3, pc}
	}

	//check if Encoder 6 was rotated
	else if ( (status & PIO_ISR_P10) || (status & PIO_ISR_P11) ){
  400db0:	f413 6f40 	tst.w	r3, #3072	; 0xc00
  400db4:	d007      	beq.n	400dc6 <PIOC_Handler+0x7a>
		encoder_direction(PIO_ODSR_P10, PIO_ODSR_P11, 5);
  400db6:	2205      	movs	r2, #5
  400db8:	f44f 6100 	mov.w	r1, #2048	; 0x800
  400dbc:	f44f 6080 	mov.w	r0, #1024	; 0x400
  400dc0:	4b3a      	ldr	r3, [pc, #232]	; (400eac <PIOC_Handler+0x160>)
  400dc2:	4798      	blx	r3
  400dc4:	bd08      	pop	{r3, pc}
	}

	//check if Encoder 7 was rotated
	else if ( (status & PIO_ISR_P12) || (status & PIO_ISR_P13) ){
  400dc6:	f413 5f40 	tst.w	r3, #12288	; 0x3000
  400dca:	d007      	beq.n	400ddc <PIOC_Handler+0x90>
		encoder_direction(PIO_ODSR_P12, PIO_ODSR_P13, 6);
  400dcc:	2206      	movs	r2, #6
  400dce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  400dd2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  400dd6:	4b35      	ldr	r3, [pc, #212]	; (400eac <PIOC_Handler+0x160>)
  400dd8:	4798      	blx	r3
  400dda:	bd08      	pop	{r3, pc}
	}

	//check if Encoder 8 was rotated
	else if ( (status & PIO_ISR_P14) || (status & PIO_ISR_P15) ){
  400ddc:	f413 4f40 	tst.w	r3, #49152	; 0xc000
  400de0:	d007      	beq.n	400df2 <PIOC_Handler+0xa6>
		encoder_direction(PIO_ODSR_P14, PIO_ODSR_P15, 7);
  400de2:	2207      	movs	r2, #7
  400de4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
  400de8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  400dec:	4b2f      	ldr	r3, [pc, #188]	; (400eac <PIOC_Handler+0x160>)
  400dee:	4798      	blx	r3
  400df0:	bd08      	pop	{r3, pc}
	}

	//check if Encoder 9 was rotated
	else if ( (status & PIO_ISR_P16) || (status & PIO_ISR_P17) ){
  400df2:	f413 3f40 	tst.w	r3, #196608	; 0x30000
  400df6:	d007      	beq.n	400e08 <PIOC_Handler+0xbc>
		encoder_direction(PIO_ODSR_P16, PIO_ODSR_P17, 8);
  400df8:	2208      	movs	r2, #8
  400dfa:	f44f 3100 	mov.w	r1, #131072	; 0x20000
  400dfe:	f44f 3080 	mov.w	r0, #65536	; 0x10000
  400e02:	4b2a      	ldr	r3, [pc, #168]	; (400eac <PIOC_Handler+0x160>)
  400e04:	4798      	blx	r3
  400e06:	bd08      	pop	{r3, pc}
	}

	//check if Encoder 10 was rotated
	else if ( (status & PIO_ISR_P18) || (status & PIO_ISR_P19) ){
  400e08:	f413 2f40 	tst.w	r3, #786432	; 0xc0000
  400e0c:	d007      	beq.n	400e1e <PIOC_Handler+0xd2>
		encoder_direction(PIO_ODSR_P18, PIO_ODSR_P19, 9);
  400e0e:	2209      	movs	r2, #9
  400e10:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  400e14:	f44f 2080 	mov.w	r0, #262144	; 0x40000
  400e18:	4b24      	ldr	r3, [pc, #144]	; (400eac <PIOC_Handler+0x160>)
  400e1a:	4798      	blx	r3
  400e1c:	bd08      	pop	{r3, pc}
	}

	//check if Encoder 11 was rotated
	else if ( (status & PIO_ISR_P20) || (status & PIO_ISR_P21) ){
  400e1e:	f413 1f40 	tst.w	r3, #3145728	; 0x300000
  400e22:	d007      	beq.n	400e34 <PIOC_Handler+0xe8>
		encoder_direction(PIO_ODSR_P20, PIO_ODSR_P21, 10);
  400e24:	220a      	movs	r2, #10
  400e26:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
  400e2a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  400e2e:	4b1f      	ldr	r3, [pc, #124]	; (400eac <PIOC_Handler+0x160>)
  400e30:	4798      	blx	r3
  400e32:	bd08      	pop	{r3, pc}
	}

	//check if Encoder 12 was rotated
	else if ( (status & PIO_ISR_P22) || (status & PIO_ISR_P23) ){
  400e34:	f413 0f40 	tst.w	r3, #12582912	; 0xc00000
  400e38:	d007      	beq.n	400e4a <PIOC_Handler+0xfe>
		encoder_direction(PIO_ODSR_P22, PIO_ODSR_P23, 11);
  400e3a:	220b      	movs	r2, #11
  400e3c:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
  400e40:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
  400e44:	4b19      	ldr	r3, [pc, #100]	; (400eac <PIOC_Handler+0x160>)
  400e46:	4798      	blx	r3
  400e48:	bd08      	pop	{r3, pc}
	}

	//check if Encoder 13 was rotated
	else if ( (status & PIO_ISR_P24) || (status & PIO_ISR_P25) ){
  400e4a:	f013 7f40 	tst.w	r3, #50331648	; 0x3000000
  400e4e:	d007      	beq.n	400e60 <PIOC_Handler+0x114>
		encoder_direction(PIO_ODSR_P24, PIO_ODSR_P25, 12);
  400e50:	220c      	movs	r2, #12
  400e52:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
  400e56:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
  400e5a:	4b14      	ldr	r3, [pc, #80]	; (400eac <PIOC_Handler+0x160>)
  400e5c:	4798      	blx	r3
  400e5e:	bd08      	pop	{r3, pc}
	}
	
	//check if Encoder 14 was rotated
	else if ( (status & PIO_ISR_P26) || (status & PIO_ISR_P27) ){
  400e60:	f013 6f40 	tst.w	r3, #201326592	; 0xc000000
  400e64:	d007      	beq.n	400e76 <PIOC_Handler+0x12a>
		encoder_direction(PIO_ODSR_P26, PIO_ODSR_P27, 13);
  400e66:	220d      	movs	r2, #13
  400e68:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400e6c:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
  400e70:	4b0e      	ldr	r3, [pc, #56]	; (400eac <PIOC_Handler+0x160>)
  400e72:	4798      	blx	r3
  400e74:	bd08      	pop	{r3, pc}
	}

	//check if Encoder 15 was rotated
	else if ( (status & PIO_ISR_P28) || (status & PIO_ISR_P29) ){
  400e76:	f013 5f40 	tst.w	r3, #805306368	; 0x30000000
  400e7a:	d007      	beq.n	400e8c <PIOC_Handler+0x140>
		encoder_direction(PIO_ODSR_P28, PIO_ODSR_P29, 14);
  400e7c:	220e      	movs	r2, #14
  400e7e:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  400e82:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
  400e86:	4b09      	ldr	r3, [pc, #36]	; (400eac <PIOC_Handler+0x160>)
  400e88:	4798      	blx	r3
  400e8a:	bd08      	pop	{r3, pc}
	}

	//check if Encoder 16 was rotated
	else if ( (status & PIO_ISR_P30) || (status & PIO_ISR_P31) ){
  400e8c:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
  400e90:	d101      	bne.n	400e96 <PIOC_Handler+0x14a>
  400e92:	2b00      	cmp	r3, #0
  400e94:	da06      	bge.n	400ea4 <PIOC_Handler+0x158>
		encoder_direction(PIO_ODSR_P30, PIO_ODSR_P31, 15);
  400e96:	220f      	movs	r2, #15
  400e98:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  400e9c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  400ea0:	4b02      	ldr	r3, [pc, #8]	; (400eac <PIOC_Handler+0x160>)
  400ea2:	4798      	blx	r3
  400ea4:	bd08      	pop	{r3, pc}
  400ea6:	bf00      	nop
  400ea8:	400e124c 	.word	0x400e124c
  400eac:	0040045d 	.word	0x0040045d

00400eb0 <leds_status_get>:
void led_toggle(uint8_t top_row, uint8_t bottom_row);
int leds_status_get(uint8_t curr_step);

int leds_status_get(uint8_t curr_step){
	return leds_status[curr_step];
}
  400eb0:	4b01      	ldr	r3, [pc, #4]	; (400eb8 <leds_status_get+0x8>)
  400eb2:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
  400eb6:	4770      	bx	lr
  400eb8:	2000067c 	.word	0x2000067c

00400ebc <leds_update_display>:
void leds_update_note(uint8_t led_pos){

	leds_update_display();
}

 void leds_update_display(){
  400ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  400ebe:	b672      	cpsid	i
  400ec0:	f3bf 8f5f 	dmb	sy

	cpu_irq_disable();
  400ec4:	4f90      	ldr	r7, [pc, #576]	; (401108 <leds_update_display+0x24c>)
  400ec6:	2300      	movs	r3, #0
  400ec8:	703b      	strb	r3, [r7, #0]

	//Set Write Command, Function, and BC Bits
	SPI_byteSend(0x94);
  400eca:	2094      	movs	r0, #148	; 0x94
  400ecc:	4c8f      	ldr	r4, [pc, #572]	; (40110c <leds_update_display+0x250>)
  400ece:	47a0      	blx	r4
	SPI_byteSend(0x5F);
  400ed0:	205f      	movs	r0, #95	; 0x5f
  400ed2:	47a0      	blx	r4
	SPI_byteSend(0xFF);
  400ed4:	20ff      	movs	r0, #255	; 0xff
  400ed6:	47a0      	blx	r4
	SPI_byteSend(0xFF);
  400ed8:	20ff      	movs	r0, #255	; 0xff
  400eda:	47a0      	blx	r4
// 	for (int i = 11; i > -1; i--){
// 		SPI_byteSend( (uint8_t) (leds_data_1[i] >> 8) );
// 		SPI_byteSend( (uint8_t) (leds_data_1[i]) );
// 	}

	SPI_byteSend( (uint8_t) (leds_data_1[2] >> 8) );
  400edc:	4d8c      	ldr	r5, [pc, #560]	; (401110 <leds_update_display+0x254>)
  400ede:	88a8      	ldrh	r0, [r5, #4]
  400ee0:	0a00      	lsrs	r0, r0, #8
  400ee2:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_1[2]) );
  400ee4:	7928      	ldrb	r0, [r5, #4]
  400ee6:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_1[1] >> 8) );
  400ee8:	8868      	ldrh	r0, [r5, #2]
  400eea:	0a00      	lsrs	r0, r0, #8
  400eec:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_1[1]) );
  400eee:	78a8      	ldrb	r0, [r5, #2]
  400ef0:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_1[0] >> 8) );
  400ef2:	8828      	ldrh	r0, [r5, #0]
  400ef4:	0a00      	lsrs	r0, r0, #8
  400ef6:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_1[0]) );
  400ef8:	7828      	ldrb	r0, [r5, #0]
  400efa:	47a0      	blx	r4

	SPI_byteSend( (uint8_t) (leds_data_3[2] >> 8) );
  400efc:	4e85      	ldr	r6, [pc, #532]	; (401114 <leds_update_display+0x258>)
  400efe:	88b0      	ldrh	r0, [r6, #4]
  400f00:	0a00      	lsrs	r0, r0, #8
  400f02:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_3[2]) );
  400f04:	7930      	ldrb	r0, [r6, #4]
  400f06:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_3[1] >> 8) );
  400f08:	8870      	ldrh	r0, [r6, #2]
  400f0a:	0a00      	lsrs	r0, r0, #8
  400f0c:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_3[1]) );
  400f0e:	78b0      	ldrb	r0, [r6, #2]
  400f10:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_3[0] >> 8) );
  400f12:	8830      	ldrh	r0, [r6, #0]
  400f14:	0a00      	lsrs	r0, r0, #8
  400f16:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_3[0]) );
  400f18:	7830      	ldrb	r0, [r6, #0]
  400f1a:	47a0      	blx	r4

	SPI_byteSend( (uint8_t) (leds_data_3[5] >> 8) );
  400f1c:	8970      	ldrh	r0, [r6, #10]
  400f1e:	0a00      	lsrs	r0, r0, #8
  400f20:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_3[5]) );
  400f22:	7ab0      	ldrb	r0, [r6, #10]
  400f24:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_3[4] >> 8) );
  400f26:	8930      	ldrh	r0, [r6, #8]
  400f28:	0a00      	lsrs	r0, r0, #8
  400f2a:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_3[4]) );
  400f2c:	7a30      	ldrb	r0, [r6, #8]
  400f2e:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_3[3] >> 8) );
  400f30:	88f0      	ldrh	r0, [r6, #6]
  400f32:	0a00      	lsrs	r0, r0, #8
  400f34:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_3[3]) );
  400f36:	79b0      	ldrb	r0, [r6, #6]
  400f38:	47a0      	blx	r4

	SPI_byteSend( (uint8_t) (leds_data_1[5] >> 8) );
  400f3a:	8968      	ldrh	r0, [r5, #10]
  400f3c:	0a00      	lsrs	r0, r0, #8
  400f3e:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_1[5]) );
  400f40:	7aa8      	ldrb	r0, [r5, #10]
  400f42:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_1[4] >> 8) );
  400f44:	8928      	ldrh	r0, [r5, #8]
  400f46:	0a00      	lsrs	r0, r0, #8
  400f48:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_1[4]) );
  400f4a:	7a28      	ldrb	r0, [r5, #8]
  400f4c:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_1[3] >> 8) );
  400f4e:	88e8      	ldrh	r0, [r5, #6]
  400f50:	0a00      	lsrs	r0, r0, #8
  400f52:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_1[3]) );
  400f54:	79a8      	ldrb	r0, [r5, #6]
  400f56:	47a0      	blx	r4

	//Set Write Command, Function, and BC Bits
	SPI_byteSend(0x94);
  400f58:	2094      	movs	r0, #148	; 0x94
  400f5a:	47a0      	blx	r4
	SPI_byteSend(0x5F);
  400f5c:	205f      	movs	r0, #95	; 0x5f
  400f5e:	47a0      	blx	r4
	SPI_byteSend(0xFF);
  400f60:	20ff      	movs	r0, #255	; 0xff
  400f62:	47a0      	blx	r4
	SPI_byteSend(0xFF);
  400f64:	20ff      	movs	r0, #255	; 0xff
  400f66:	47a0      	blx	r4
// 	for (int i = 11; i > -1; i--){
// 		SPI_byteSend( (uint8_t) (leds_data_2[i] >> 8) );
// 		SPI_byteSend( (uint8_t) (leds_data_2[i]) );
// 	}

	SPI_byteSend( (uint8_t) (leds_data_1[8] >> 8) );
  400f68:	8a28      	ldrh	r0, [r5, #16]
  400f6a:	0a00      	lsrs	r0, r0, #8
  400f6c:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_1[8]) );
  400f6e:	7c28      	ldrb	r0, [r5, #16]
  400f70:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_1[7] >> 8) );
  400f72:	89e8      	ldrh	r0, [r5, #14]
  400f74:	0a00      	lsrs	r0, r0, #8
  400f76:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_1[7]) );
  400f78:	7ba8      	ldrb	r0, [r5, #14]
  400f7a:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_1[6] >> 8) );
  400f7c:	89a8      	ldrh	r0, [r5, #12]
  400f7e:	0a00      	lsrs	r0, r0, #8
  400f80:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_1[6]) );
  400f82:	7b28      	ldrb	r0, [r5, #12]
  400f84:	47a0      	blx	r4

	SPI_byteSend( (uint8_t) (leds_data_3[8] >> 8) );
  400f86:	8a30      	ldrh	r0, [r6, #16]
  400f88:	0a00      	lsrs	r0, r0, #8
  400f8a:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_3[8]) );
  400f8c:	7c30      	ldrb	r0, [r6, #16]
  400f8e:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_3[7] >> 8) );
  400f90:	89f0      	ldrh	r0, [r6, #14]
  400f92:	0a00      	lsrs	r0, r0, #8
  400f94:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_3[7]) );
  400f96:	7bb0      	ldrb	r0, [r6, #14]
  400f98:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_3[6] >> 8) );
  400f9a:	89b0      	ldrh	r0, [r6, #12]
  400f9c:	0a00      	lsrs	r0, r0, #8
  400f9e:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_3[6]) );
  400fa0:	7b30      	ldrb	r0, [r6, #12]
  400fa2:	47a0      	blx	r4

	SPI_byteSend( (uint8_t) (leds_data_3[11] >> 8) );
  400fa4:	8af0      	ldrh	r0, [r6, #22]
  400fa6:	0a00      	lsrs	r0, r0, #8
  400fa8:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_3[11]) );
  400faa:	7db0      	ldrb	r0, [r6, #22]
  400fac:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_3[10] >> 8) );
  400fae:	8ab0      	ldrh	r0, [r6, #20]
  400fb0:	0a00      	lsrs	r0, r0, #8
  400fb2:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_3[10]) );
  400fb4:	7d30      	ldrb	r0, [r6, #20]
  400fb6:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_3[9] >> 8) );
  400fb8:	8a70      	ldrh	r0, [r6, #18]
  400fba:	0a00      	lsrs	r0, r0, #8
  400fbc:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_3[9]) );
  400fbe:	7cb0      	ldrb	r0, [r6, #18]
  400fc0:	47a0      	blx	r4

	SPI_byteSend( (uint8_t) (leds_data_1[11] >> 8) );
  400fc2:	8ae8      	ldrh	r0, [r5, #22]
  400fc4:	0a00      	lsrs	r0, r0, #8
  400fc6:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_1[11]) );
  400fc8:	7da8      	ldrb	r0, [r5, #22]
  400fca:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_1[10] >> 8) );
  400fcc:	8aa8      	ldrh	r0, [r5, #20]
  400fce:	0a00      	lsrs	r0, r0, #8
  400fd0:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_1[10]) );
  400fd2:	7d28      	ldrb	r0, [r5, #20]
  400fd4:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_1[9] >> 8) );
  400fd6:	8a68      	ldrh	r0, [r5, #18]
  400fd8:	0a00      	lsrs	r0, r0, #8
  400fda:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_1[9]) );
  400fdc:	7ca8      	ldrb	r0, [r5, #18]
  400fde:	47a0      	blx	r4

	//Set Write Command, Function, and BC Bits
	SPI_byteSend(0x94);
  400fe0:	2094      	movs	r0, #148	; 0x94
  400fe2:	47a0      	blx	r4
	SPI_byteSend(0x5F);
  400fe4:	205f      	movs	r0, #95	; 0x5f
  400fe6:	47a0      	blx	r4
	SPI_byteSend(0xFF);
  400fe8:	20ff      	movs	r0, #255	; 0xff
  400fea:	47a0      	blx	r4
	SPI_byteSend(0xFF);
  400fec:	20ff      	movs	r0, #255	; 0xff
  400fee:	47a0      	blx	r4
// 	for (int i = 11; i > -1; i--){
// 		SPI_byteSend( (uint8_t) (leds_data_3[i] >> 8) );
// 		SPI_byteSend( (uint8_t) (leds_data_3[i]) );
// 	}

	SPI_byteSend( (uint8_t) (leds_data_2[2] >> 8) );
  400ff0:	4d49      	ldr	r5, [pc, #292]	; (401118 <leds_update_display+0x25c>)
  400ff2:	88a8      	ldrh	r0, [r5, #4]
  400ff4:	0a00      	lsrs	r0, r0, #8
  400ff6:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_2[2]) );
  400ff8:	7928      	ldrb	r0, [r5, #4]
  400ffa:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_2[1] >> 8) );
  400ffc:	8868      	ldrh	r0, [r5, #2]
  400ffe:	0a00      	lsrs	r0, r0, #8
  401000:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_2[1]) );
  401002:	78a8      	ldrb	r0, [r5, #2]
  401004:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_2[0] >> 8) );
  401006:	8828      	ldrh	r0, [r5, #0]
  401008:	0a00      	lsrs	r0, r0, #8
  40100a:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_2[0]) );
  40100c:	7828      	ldrb	r0, [r5, #0]
  40100e:	47a0      	blx	r4

	SPI_byteSend( (uint8_t) (leds_data_4[2] >> 8) );
  401010:	4e42      	ldr	r6, [pc, #264]	; (40111c <leds_update_display+0x260>)
  401012:	88b0      	ldrh	r0, [r6, #4]
  401014:	0a00      	lsrs	r0, r0, #8
  401016:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_4[2]) );
  401018:	7930      	ldrb	r0, [r6, #4]
  40101a:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_4[1] >> 8) );
  40101c:	8870      	ldrh	r0, [r6, #2]
  40101e:	0a00      	lsrs	r0, r0, #8
  401020:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_4[1]) );
  401022:	78b0      	ldrb	r0, [r6, #2]
  401024:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_4[0] >> 8) );
  401026:	8830      	ldrh	r0, [r6, #0]
  401028:	0a00      	lsrs	r0, r0, #8
  40102a:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_4[0]) );
  40102c:	7830      	ldrb	r0, [r6, #0]
  40102e:	47a0      	blx	r4

	SPI_byteSend( (uint8_t) (leds_data_4[5] >> 8) );
  401030:	8970      	ldrh	r0, [r6, #10]
  401032:	0a00      	lsrs	r0, r0, #8
  401034:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_4[5]) );
  401036:	7ab0      	ldrb	r0, [r6, #10]
  401038:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_4[4] >> 8) );
  40103a:	8930      	ldrh	r0, [r6, #8]
  40103c:	0a00      	lsrs	r0, r0, #8
  40103e:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_4[4]) );
  401040:	7a30      	ldrb	r0, [r6, #8]
  401042:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_4[3] >> 8) );
  401044:	88f0      	ldrh	r0, [r6, #6]
  401046:	0a00      	lsrs	r0, r0, #8
  401048:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_4[3]) );
  40104a:	79b0      	ldrb	r0, [r6, #6]
  40104c:	47a0      	blx	r4

	SPI_byteSend( (uint8_t) (leds_data_2[5] >> 8) );
  40104e:	8968      	ldrh	r0, [r5, #10]
  401050:	0a00      	lsrs	r0, r0, #8
  401052:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_2[5]) );
  401054:	7aa8      	ldrb	r0, [r5, #10]
  401056:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_2[4] >> 8) );
  401058:	8928      	ldrh	r0, [r5, #8]
  40105a:	0a00      	lsrs	r0, r0, #8
  40105c:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_2[4]) );
  40105e:	7a28      	ldrb	r0, [r5, #8]
  401060:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_2[3] >> 8) );
  401062:	88e8      	ldrh	r0, [r5, #6]
  401064:	0a00      	lsrs	r0, r0, #8
  401066:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_2[3]) );
  401068:	79a8      	ldrb	r0, [r5, #6]
  40106a:	47a0      	blx	r4

	//Set Write Command, Function, and BC Bits
	SPI_byteSend(0x94);
  40106c:	2094      	movs	r0, #148	; 0x94
  40106e:	47a0      	blx	r4
	SPI_byteSend(0x5F);
  401070:	205f      	movs	r0, #95	; 0x5f
  401072:	47a0      	blx	r4
	SPI_byteSend(0xFF);
  401074:	20ff      	movs	r0, #255	; 0xff
  401076:	47a0      	blx	r4
	SPI_byteSend(0xFF);
  401078:	20ff      	movs	r0, #255	; 0xff
  40107a:	47a0      	blx	r4
// 	for (int i = 11; i > -1; i--){
// 		SPI_byteSend( (uint8_t) (leds_data_4[i] >> 8) );
// 		SPI_byteSend( (uint8_t) (leds_data_4[i]) );
// 	}

	SPI_byteSend( (uint8_t) (leds_data_2[8] >> 8) );
  40107c:	8a28      	ldrh	r0, [r5, #16]
  40107e:	0a00      	lsrs	r0, r0, #8
  401080:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_2[8]) );
  401082:	7c28      	ldrb	r0, [r5, #16]
  401084:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_2[7] >> 8) );
  401086:	89e8      	ldrh	r0, [r5, #14]
  401088:	0a00      	lsrs	r0, r0, #8
  40108a:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_2[7]) );
  40108c:	7ba8      	ldrb	r0, [r5, #14]
  40108e:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_2[6] >> 8) );
  401090:	89a8      	ldrh	r0, [r5, #12]
  401092:	0a00      	lsrs	r0, r0, #8
  401094:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_2[6]) );
  401096:	7b28      	ldrb	r0, [r5, #12]
  401098:	47a0      	blx	r4

	SPI_byteSend( (uint8_t) (leds_data_4[8] >> 8) );
  40109a:	8a30      	ldrh	r0, [r6, #16]
  40109c:	0a00      	lsrs	r0, r0, #8
  40109e:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_4[8]) );
  4010a0:	7c30      	ldrb	r0, [r6, #16]
  4010a2:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_4[7] >> 8) );
  4010a4:	89f0      	ldrh	r0, [r6, #14]
  4010a6:	0a00      	lsrs	r0, r0, #8
  4010a8:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_4[7]) );
  4010aa:	7bb0      	ldrb	r0, [r6, #14]
  4010ac:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_4[6] >> 8) );
  4010ae:	89b0      	ldrh	r0, [r6, #12]
  4010b0:	0a00      	lsrs	r0, r0, #8
  4010b2:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_4[6]) );
  4010b4:	7b30      	ldrb	r0, [r6, #12]
  4010b6:	47a0      	blx	r4

	SPI_byteSend( (uint8_t) (leds_data_4[11] >> 8) );
  4010b8:	8af0      	ldrh	r0, [r6, #22]
  4010ba:	0a00      	lsrs	r0, r0, #8
  4010bc:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_4[11]) );
  4010be:	7db0      	ldrb	r0, [r6, #22]
  4010c0:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_4[10] >> 8) );
  4010c2:	8ab0      	ldrh	r0, [r6, #20]
  4010c4:	0a00      	lsrs	r0, r0, #8
  4010c6:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_4[10]) );
  4010c8:	7d30      	ldrb	r0, [r6, #20]
  4010ca:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_4[9] >> 8) );
  4010cc:	8a70      	ldrh	r0, [r6, #18]
  4010ce:	0a00      	lsrs	r0, r0, #8
  4010d0:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_4[9]) );
  4010d2:	7cb0      	ldrb	r0, [r6, #18]
  4010d4:	47a0      	blx	r4

	SPI_byteSend( (uint8_t) (leds_data_2[11] >> 8) );
  4010d6:	8ae8      	ldrh	r0, [r5, #22]
  4010d8:	0a00      	lsrs	r0, r0, #8
  4010da:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_2[11]) );
  4010dc:	7da8      	ldrb	r0, [r5, #22]
  4010de:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_2[10] >> 8) );
  4010e0:	8aa8      	ldrh	r0, [r5, #20]
  4010e2:	0a00      	lsrs	r0, r0, #8
  4010e4:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_2[10]) );
  4010e6:	7d28      	ldrb	r0, [r5, #20]
  4010e8:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_2[9] >> 8) );
  4010ea:	8a68      	ldrh	r0, [r5, #18]
  4010ec:	0a00      	lsrs	r0, r0, #8
  4010ee:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_2[9]) );
  4010f0:	7ca8      	ldrb	r0, [r5, #18]
  4010f2:	47a0      	blx	r4


	delay_ms(2.74);
  4010f4:	f243 70ce 	movw	r0, #14286	; 0x37ce
  4010f8:	4b09      	ldr	r3, [pc, #36]	; (401120 <leds_update_display+0x264>)
  4010fa:	4798      	blx	r3
	cpu_irq_enable();
  4010fc:	2301      	movs	r3, #1
  4010fe:	703b      	strb	r3, [r7, #0]
  401100:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  401104:	b662      	cpsie	i
  401106:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401108:	20000230 	.word	0x20000230
  40110c:	004017b1 	.word	0x004017b1
  401110:	200006bc 	.word	0x200006bc
  401114:	200006ec 	.word	0x200006ec
  401118:	200006d4 	.word	0x200006d4
  40111c:	20000704 	.word	0x20000704
  401120:	20000001 	.word	0x20000001

00401124 <led_toggle>:

int leds_status_get(uint8_t curr_step){
	return leds_status[curr_step];
}

void led_toggle(uint8_t top_row, uint8_t bottom_row){
  401124:	b508      	push	{r3, lr}

	switch(bottom_row) {
  401126:	29ef      	cmp	r1, #239	; 0xef
  401128:	d031      	beq.n	40118e <led_toggle+0x6a>
  40112a:	d806      	bhi.n	40113a <led_toggle+0x16>
  40112c:	29bf      	cmp	r1, #191	; 0xbf
  40112e:	d03e      	beq.n	4011ae <led_toggle+0x8a>
  401130:	29df      	cmp	r1, #223	; 0xdf
  401132:	d034      	beq.n	40119e <led_toggle+0x7a>
  401134:	297f      	cmp	r1, #127	; 0x7f
  401136:	d149      	bne.n	4011cc <led_toggle+0xa8>
  401138:	e041      	b.n	4011be <led_toggle+0x9a>
  40113a:	29fb      	cmp	r1, #251	; 0xfb
  40113c:	d017      	beq.n	40116e <led_toggle+0x4a>
  40113e:	d802      	bhi.n	401146 <led_toggle+0x22>
  401140:	29f7      	cmp	r1, #247	; 0xf7
  401142:	d01c      	beq.n	40117e <led_toggle+0x5a>
  401144:	e042      	b.n	4011cc <led_toggle+0xa8>
  401146:	29fd      	cmp	r1, #253	; 0xfd
  401148:	d009      	beq.n	40115e <led_toggle+0x3a>
  40114a:	29fe      	cmp	r1, #254	; 0xfe
  40114c:	d13e      	bne.n	4011cc <led_toggle+0xa8>
		case 254 :
			leds_status[15] = abs(leds_status[15] - 1);
  40114e:	4a4a      	ldr	r2, [pc, #296]	; (401278 <led_toggle+0x154>)
  401150:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
  401152:	3b01      	subs	r3, #1
  401154:	2b00      	cmp	r3, #0
  401156:	bfb8      	it	lt
  401158:	425b      	neglt	r3, r3
  40115a:	63d3      	str	r3, [r2, #60]	; 0x3c
			break;
  40115c:	e036      	b.n	4011cc <led_toggle+0xa8>
		case 253 :
			leds_status[14] = abs(leds_status[14] - 1);
  40115e:	4a46      	ldr	r2, [pc, #280]	; (401278 <led_toggle+0x154>)
  401160:	6b93      	ldr	r3, [r2, #56]	; 0x38
  401162:	3b01      	subs	r3, #1
  401164:	2b00      	cmp	r3, #0
  401166:	bfb8      	it	lt
  401168:	425b      	neglt	r3, r3
  40116a:	6393      	str	r3, [r2, #56]	; 0x38
			break;
  40116c:	e02e      	b.n	4011cc <led_toggle+0xa8>
		case 251 :
			leds_status[13] = abs(leds_status[13] - 1);
  40116e:	4a42      	ldr	r2, [pc, #264]	; (401278 <led_toggle+0x154>)
  401170:	6b53      	ldr	r3, [r2, #52]	; 0x34
  401172:	3b01      	subs	r3, #1
  401174:	2b00      	cmp	r3, #0
  401176:	bfb8      	it	lt
  401178:	425b      	neglt	r3, r3
  40117a:	6353      	str	r3, [r2, #52]	; 0x34
			break;
  40117c:	e026      	b.n	4011cc <led_toggle+0xa8>
		case 247 :
			leds_status[12] = abs(leds_status[12] - 1);
  40117e:	4a3e      	ldr	r2, [pc, #248]	; (401278 <led_toggle+0x154>)
  401180:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401182:	3b01      	subs	r3, #1
  401184:	2b00      	cmp	r3, #0
  401186:	bfb8      	it	lt
  401188:	425b      	neglt	r3, r3
  40118a:	6313      	str	r3, [r2, #48]	; 0x30
			break;
  40118c:	e01e      	b.n	4011cc <led_toggle+0xa8>
		case 239 :
			leds_status[11] = abs(leds_status[11] - 1);
  40118e:	4a3a      	ldr	r2, [pc, #232]	; (401278 <led_toggle+0x154>)
  401190:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
  401192:	3b01      	subs	r3, #1
  401194:	2b00      	cmp	r3, #0
  401196:	bfb8      	it	lt
  401198:	425b      	neglt	r3, r3
  40119a:	62d3      	str	r3, [r2, #44]	; 0x2c
			break;
  40119c:	e016      	b.n	4011cc <led_toggle+0xa8>
		case 223 :
			leds_status[10] = abs(leds_status[10] - 1);
  40119e:	4a36      	ldr	r2, [pc, #216]	; (401278 <led_toggle+0x154>)
  4011a0:	6a93      	ldr	r3, [r2, #40]	; 0x28
  4011a2:	3b01      	subs	r3, #1
  4011a4:	2b00      	cmp	r3, #0
  4011a6:	bfb8      	it	lt
  4011a8:	425b      	neglt	r3, r3
  4011aa:	6293      	str	r3, [r2, #40]	; 0x28
			break;
  4011ac:	e00e      	b.n	4011cc <led_toggle+0xa8>
		case 191 :
			leds_status[9] = abs(leds_status[9] - 1);
  4011ae:	4a32      	ldr	r2, [pc, #200]	; (401278 <led_toggle+0x154>)
  4011b0:	6a53      	ldr	r3, [r2, #36]	; 0x24
  4011b2:	3b01      	subs	r3, #1
  4011b4:	2b00      	cmp	r3, #0
  4011b6:	bfb8      	it	lt
  4011b8:	425b      	neglt	r3, r3
  4011ba:	6253      	str	r3, [r2, #36]	; 0x24
			break;
  4011bc:	e006      	b.n	4011cc <led_toggle+0xa8>
		case 127 :
			leds_status[8] = abs(leds_status[8] - 1);
  4011be:	4a2e      	ldr	r2, [pc, #184]	; (401278 <led_toggle+0x154>)
  4011c0:	6a13      	ldr	r3, [r2, #32]
  4011c2:	3b01      	subs	r3, #1
  4011c4:	2b00      	cmp	r3, #0
  4011c6:	bfb8      	it	lt
  4011c8:	425b      	neglt	r3, r3
  4011ca:	6213      	str	r3, [r2, #32]
			break;
		default :
			break;
	}

	switch(top_row) {
  4011cc:	286f      	cmp	r0, #111	; 0x6f
  4011ce:	d031      	beq.n	401234 <led_toggle+0x110>
  4011d0:	d806      	bhi.n	4011e0 <led_toggle+0xbc>
  4011d2:	283f      	cmp	r0, #63	; 0x3f
  4011d4:	d03e      	beq.n	401254 <led_toggle+0x130>
  4011d6:	285f      	cmp	r0, #95	; 0x5f
  4011d8:	d034      	beq.n	401244 <led_toggle+0x120>
  4011da:	2802      	cmp	r0, #2
  4011dc:	d149      	bne.n	401272 <led_toggle+0x14e>
  4011de:	e041      	b.n	401264 <led_toggle+0x140>
  4011e0:	287b      	cmp	r0, #123	; 0x7b
  4011e2:	d017      	beq.n	401214 <led_toggle+0xf0>
  4011e4:	d802      	bhi.n	4011ec <led_toggle+0xc8>
  4011e6:	2877      	cmp	r0, #119	; 0x77
  4011e8:	d01c      	beq.n	401224 <led_toggle+0x100>
  4011ea:	e042      	b.n	401272 <led_toggle+0x14e>
  4011ec:	287d      	cmp	r0, #125	; 0x7d
  4011ee:	d009      	beq.n	401204 <led_toggle+0xe0>
  4011f0:	287e      	cmp	r0, #126	; 0x7e
  4011f2:	d13e      	bne.n	401272 <led_toggle+0x14e>
		case 126 :
			leds_status[7] = abs(leds_status[7] - 1);
  4011f4:	4a20      	ldr	r2, [pc, #128]	; (401278 <led_toggle+0x154>)
  4011f6:	69d3      	ldr	r3, [r2, #28]
  4011f8:	3b01      	subs	r3, #1
  4011fa:	2b00      	cmp	r3, #0
  4011fc:	bfb8      	it	lt
  4011fe:	425b      	neglt	r3, r3
  401200:	61d3      	str	r3, [r2, #28]
			break;
  401202:	e036      	b.n	401272 <led_toggle+0x14e>
		case 125 :
			leds_status[6] = abs(leds_status[6] - 1);
  401204:	4a1c      	ldr	r2, [pc, #112]	; (401278 <led_toggle+0x154>)
  401206:	6993      	ldr	r3, [r2, #24]
  401208:	3b01      	subs	r3, #1
  40120a:	2b00      	cmp	r3, #0
  40120c:	bfb8      	it	lt
  40120e:	425b      	neglt	r3, r3
  401210:	6193      	str	r3, [r2, #24]
			break;
  401212:	e02e      	b.n	401272 <led_toggle+0x14e>
		case 123 :
			leds_status[5] = abs(leds_status[5] - 1);
  401214:	4a18      	ldr	r2, [pc, #96]	; (401278 <led_toggle+0x154>)
  401216:	6953      	ldr	r3, [r2, #20]
  401218:	3b01      	subs	r3, #1
  40121a:	2b00      	cmp	r3, #0
  40121c:	bfb8      	it	lt
  40121e:	425b      	neglt	r3, r3
  401220:	6153      	str	r3, [r2, #20]
			break;
  401222:	e026      	b.n	401272 <led_toggle+0x14e>
		case 119 :
			leds_status[4] = abs(leds_status[4] - 1);
  401224:	4a14      	ldr	r2, [pc, #80]	; (401278 <led_toggle+0x154>)
  401226:	6913      	ldr	r3, [r2, #16]
  401228:	3b01      	subs	r3, #1
  40122a:	2b00      	cmp	r3, #0
  40122c:	bfb8      	it	lt
  40122e:	425b      	neglt	r3, r3
  401230:	6113      	str	r3, [r2, #16]
			break;
  401232:	e01e      	b.n	401272 <led_toggle+0x14e>
		case 111 :
			leds_status[3] = abs(leds_status[3] - 1);
  401234:	4a10      	ldr	r2, [pc, #64]	; (401278 <led_toggle+0x154>)
  401236:	68d3      	ldr	r3, [r2, #12]
  401238:	3b01      	subs	r3, #1
  40123a:	2b00      	cmp	r3, #0
  40123c:	bfb8      	it	lt
  40123e:	425b      	neglt	r3, r3
  401240:	60d3      	str	r3, [r2, #12]
			break;
  401242:	e016      	b.n	401272 <led_toggle+0x14e>
		case 95 :
			leds_status[2] = abs(leds_status[2] - 1);
  401244:	4a0c      	ldr	r2, [pc, #48]	; (401278 <led_toggle+0x154>)
  401246:	6893      	ldr	r3, [r2, #8]
  401248:	3b01      	subs	r3, #1
  40124a:	2b00      	cmp	r3, #0
  40124c:	bfb8      	it	lt
  40124e:	425b      	neglt	r3, r3
  401250:	6093      	str	r3, [r2, #8]
			break;
  401252:	e00e      	b.n	401272 <led_toggle+0x14e>
		case 63 :
			leds_status[1] = abs(leds_status[1] - 1);
  401254:	4a08      	ldr	r2, [pc, #32]	; (401278 <led_toggle+0x154>)
  401256:	6853      	ldr	r3, [r2, #4]
  401258:	3b01      	subs	r3, #1
  40125a:	2b00      	cmp	r3, #0
  40125c:	bfb8      	it	lt
  40125e:	425b      	neglt	r3, r3
  401260:	6053      	str	r3, [r2, #4]
			break;
  401262:	e006      	b.n	401272 <led_toggle+0x14e>
		case 2 :
			leds_status[0] = abs(leds_status[0] - 1);
  401264:	4a04      	ldr	r2, [pc, #16]	; (401278 <led_toggle+0x154>)
  401266:	6813      	ldr	r3, [r2, #0]
  401268:	3b01      	subs	r3, #1
  40126a:	2b00      	cmp	r3, #0
  40126c:	bfb8      	it	lt
  40126e:	425b      	neglt	r3, r3
  401270:	6013      	str	r3, [r2, #0]
			break;
		default : 
			break;
	}

	leds_update_display();
  401272:	4b02      	ldr	r3, [pc, #8]	; (40127c <led_toggle+0x158>)
  401274:	4798      	blx	r3
  401276:	bd08      	pop	{r3, pc}
  401278:	2000067c 	.word	0x2000067c
  40127c:	00400ebd 	.word	0x00400ebd

00401280 <leds_update_cursor>:

}

void leds_update_cursor(uint8_t curr_step){
  401280:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401284:	4d7c      	ldr	r5, [pc, #496]	; (401478 <leds_update_cursor+0x1f8>)
  401286:	1cae      	adds	r6, r5, #2
  401288:	497c      	ldr	r1, [pc, #496]	; (40147c <leds_update_cursor+0x1fc>)
  40128a:	2200      	movs	r2, #0

/* Initialize the Notes that are Enabled as Blue */
	for (int i = 0; i < 16; i++){
  40128c:	4613      	mov	r3, r2
					leds_data_3[toffset+1] = 0x0000;
					leds_data_3[toffset+2] = 0x0000;
				}
			}
			else {
				toffset = (i % 12)*3;
  40128e:	f8df e214 	ldr.w	lr, [pc, #532]	; 4014a4 <leds_update_cursor+0x224>
					leds_data_4[toffset] = 0x0000;
					leds_data_4[toffset+1] = 0x0000;
					leds_data_4[toffset+2] = 0xFFFF;
				}
				else{
					leds_data_4[toffset] = 0x0000;
  401292:	4f7b      	ldr	r7, [pc, #492]	; (401480 <leds_update_cursor+0x200>)
  401294:	4614      	mov	r4, r2
			else {
				toffset = (i % 12)*3;
				if(leds_status[i] == 1){
					leds_data_4[toffset] = 0x0000;
					leds_data_4[toffset+1] = 0x0000;
					leds_data_4[toffset+2] = 0xFFFF;
  401296:	f64f 7cff 	movw	ip, #65535	; 0xffff
					leds_data_3[toffset] = 0x0000;
					leds_data_3[toffset+1] = 0x0000;
					leds_data_3[toffset+2] = 0xFFFF;
				}
				else{
					leds_data_3[toffset] = 0x0000;
  40129a:	f8df 91fc 	ldr.w	r9, [pc, #508]	; 401498 <leds_update_cursor+0x218>
					leds_data_2[toffset] = 0x0000;
					leds_data_2[toffset+1] = 0x0000;
					leds_data_2[toffset+2] = 0xFFFF;
				}
				else{
					leds_data_2[toffset] = 0x0000;
  40129e:	f8df a1f4 	ldr.w	sl, [pc, #500]	; 401494 <leds_update_cursor+0x214>
  4012a2:	4683      	mov	fp, r0
  4012a4:	4610      	mov	r0, r2

void leds_update_cursor(uint8_t curr_step){

/* Initialize the Notes that are Enabled as Blue */
	for (int i = 0; i < 16; i++){
			if ( (i >= 0) && (i < 4) ){
  4012a6:	2b03      	cmp	r3, #3
  4012a8:	d80a      	bhi.n	4012c0 <leds_update_cursor+0x40>
				toffset = (i)*3;
				if(leds_status[i] == 1){
  4012aa:	680a      	ldr	r2, [r1, #0]
  4012ac:	2a01      	cmp	r2, #1
					leds_data_1[toffset] = 0x0000;
  4012ae:	f826 4c02 	strh.w	r4, [r6, #-2]
					leds_data_1[toffset+1] = 0x0000;
  4012b2:	806c      	strh	r4, [r5, #2]
					leds_data_1[toffset+2] = 0xFFFF;
  4012b4:	bf0c      	ite	eq
  4012b6:	f8a5 c004 	strheq.w	ip, [r5, #4]
				}
				else{
					leds_data_1[toffset] = 0x0000;
					leds_data_1[toffset+1] = 0x0000;
					leds_data_1[toffset+2] = 0x0000;
  4012ba:	80ac      	strhne	r4, [r5, #4]
void leds_update_cursor(uint8_t curr_step){

/* Initialize the Notes that are Enabled as Blue */
	for (int i = 0; i < 16; i++){
			if ( (i >= 0) && (i < 4) ){
				toffset = (i)*3;
  4012bc:	4680      	mov	r8, r0
  4012be:	e060      	b.n	401382 <leds_update_cursor+0x102>
					leds_data_1[toffset] = 0x0000;
					leds_data_1[toffset+1] = 0x0000;
					leds_data_1[toffset+2] = 0x0000;
				}
			}
			else if ( (i >= 4) && (i < 8) ){
  4012c0:	f1a3 0804 	sub.w	r8, r3, #4
  4012c4:	f1b8 0f03 	cmp.w	r8, #3
  4012c8:	d81d      	bhi.n	401306 <leds_update_cursor+0x86>
				toffset = (i % 4)*3;
  4012ca:	4a6e      	ldr	r2, [pc, #440]	; (401484 <leds_update_cursor+0x204>)
  4012cc:	ea13 0802 	ands.w	r8, r3, r2
  4012d0:	d505      	bpl.n	4012de <leds_update_cursor+0x5e>
  4012d2:	f108 38ff 	add.w	r8, r8, #4294967295
  4012d6:	f068 0803 	orn	r8, r8, #3
  4012da:	f108 0801 	add.w	r8, r8, #1
  4012de:	eb08 0848 	add.w	r8, r8, r8, lsl #1
  4012e2:	fa5f f888 	uxtb.w	r8, r8
				if(leds_status[i] == 1){
  4012e6:	680a      	ldr	r2, [r1, #0]
  4012e8:	2a01      	cmp	r2, #1
					leds_data_2[toffset] = 0x0000;
  4012ea:	f82a 4018 	strh.w	r4, [sl, r8, lsl #1]
					leds_data_2[toffset+1] = 0x0000;
  4012ee:	f108 0201 	add.w	r2, r8, #1
  4012f2:	f82a 4012 	strh.w	r4, [sl, r2, lsl #1]
					leds_data_2[toffset+2] = 0xFFFF;
  4012f6:	f108 0202 	add.w	r2, r8, #2
  4012fa:	bf0c      	ite	eq
  4012fc:	f82a c012 	strheq.w	ip, [sl, r2, lsl #1]
				}
				else{
					leds_data_2[toffset] = 0x0000;
					leds_data_2[toffset+1] = 0x0000;
					leds_data_2[toffset+2] = 0x0000;
  401300:	f82a 4012 	strhne.w	r4, [sl, r2, lsl #1]
  401304:	e03d      	b.n	401382 <leds_update_cursor+0x102>
				}
			}
			else if ( (i >= 8) && (i < 12) ){
  401306:	f1a3 0208 	sub.w	r2, r3, #8
  40130a:	2a03      	cmp	r2, #3
  40130c:	d81d      	bhi.n	40134a <leds_update_cursor+0xca>
				toffset = (i % 8)*3;
  40130e:	4a5e      	ldr	r2, [pc, #376]	; (401488 <leds_update_cursor+0x208>)
  401310:	ea13 0802 	ands.w	r8, r3, r2
  401314:	d505      	bpl.n	401322 <leds_update_cursor+0xa2>
  401316:	f108 38ff 	add.w	r8, r8, #4294967295
  40131a:	f068 0807 	orn	r8, r8, #7
  40131e:	f108 0801 	add.w	r8, r8, #1
  401322:	eb08 0848 	add.w	r8, r8, r8, lsl #1
  401326:	fa5f f888 	uxtb.w	r8, r8
				if(leds_status[i] == 1){
  40132a:	680a      	ldr	r2, [r1, #0]
  40132c:	2a01      	cmp	r2, #1
					leds_data_3[toffset] = 0x0000;
  40132e:	f829 4018 	strh.w	r4, [r9, r8, lsl #1]
					leds_data_3[toffset+1] = 0x0000;
  401332:	f108 0201 	add.w	r2, r8, #1
  401336:	f829 4012 	strh.w	r4, [r9, r2, lsl #1]
					leds_data_3[toffset+2] = 0xFFFF;
  40133a:	f108 0202 	add.w	r2, r8, #2
  40133e:	bf0c      	ite	eq
  401340:	f829 c012 	strheq.w	ip, [r9, r2, lsl #1]
				}
				else{
					leds_data_3[toffset] = 0x0000;
					leds_data_3[toffset+1] = 0x0000;
					leds_data_3[toffset+2] = 0x0000;
  401344:	f829 4012 	strhne.w	r4, [r9, r2, lsl #1]
  401348:	e01b      	b.n	401382 <leds_update_cursor+0x102>
				}
			}
			else {
				toffset = (i % 12)*3;
  40134a:	fb8e 2803 	smull	r2, r8, lr, r3
  40134e:	17da      	asrs	r2, r3, #31
  401350:	ebc2 0868 	rsb	r8, r2, r8, asr #1
  401354:	eb08 0848 	add.w	r8, r8, r8, lsl #1
  401358:	eba3 0888 	sub.w	r8, r3, r8, lsl #2
  40135c:	eb08 0848 	add.w	r8, r8, r8, lsl #1
  401360:	fa5f f888 	uxtb.w	r8, r8
				if(leds_status[i] == 1){
  401364:	680a      	ldr	r2, [r1, #0]
  401366:	2a01      	cmp	r2, #1
					leds_data_4[toffset] = 0x0000;
  401368:	f827 4018 	strh.w	r4, [r7, r8, lsl #1]
					leds_data_4[toffset+1] = 0x0000;
  40136c:	f108 0201 	add.w	r2, r8, #1
  401370:	f827 4012 	strh.w	r4, [r7, r2, lsl #1]
					leds_data_4[toffset+2] = 0xFFFF;
  401374:	f108 0202 	add.w	r2, r8, #2
  401378:	bf0c      	ite	eq
  40137a:	f827 c012 	strheq.w	ip, [r7, r2, lsl #1]
				}
				else{
					leds_data_4[toffset] = 0x0000;
					leds_data_4[toffset+1] = 0x0000;
					leds_data_4[toffset+2] = 0x0000;
  40137e:	f827 4012 	strhne.w	r4, [r7, r2, lsl #1]
}

void leds_update_cursor(uint8_t curr_step){

/* Initialize the Notes that are Enabled as Blue */
	for (int i = 0; i < 16; i++){
  401382:	3301      	adds	r3, #1
  401384:	3003      	adds	r0, #3
  401386:	b2c0      	uxtb	r0, r0
  401388:	3506      	adds	r5, #6
  40138a:	3606      	adds	r6, #6
  40138c:	3104      	adds	r1, #4
  40138e:	2b10      	cmp	r3, #16
  401390:	d189      	bne.n	4012a6 <leds_update_cursor+0x26>
  401392:	4658      	mov	r0, fp
  401394:	4b3d      	ldr	r3, [pc, #244]	; (40148c <leds_update_cursor+0x20c>)
  401396:	f883 8000 	strb.w	r8, [r3]
			}
	}


/* Update Cursor to correct position */
	if ( (curr_step >= 0) && (curr_step < 4) ){
  40139a:	2803      	cmp	r0, #3
  40139c:	d813      	bhi.n	4013c6 <leds_update_cursor+0x146>
		offset = (curr_step)*3;
  40139e:	eb0b 004b 	add.w	r0, fp, fp, lsl #1
  4013a2:	b2c0      	uxtb	r0, r0
  4013a4:	4b3a      	ldr	r3, [pc, #232]	; (401490 <leds_update_cursor+0x210>)
  4013a6:	7018      	strb	r0, [r3, #0]
		leds_data_1[offset] = 0xFFFF;
  4013a8:	4b33      	ldr	r3, [pc, #204]	; (401478 <leds_update_cursor+0x1f8>)
  4013aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
  4013ae:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
		leds_data_1[offset+1] = 0x0FFF;
  4013b2:	1c42      	adds	r2, r0, #1
  4013b4:	f640 71ff 	movw	r1, #4095	; 0xfff
  4013b8:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		leds_data_1[offset+2] = 0x0000;
  4013bc:	3002      	adds	r0, #2
  4013be:	2200      	movs	r2, #0
  4013c0:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
  4013c4:	e053      	b.n	40146e <leds_update_cursor+0x1ee>
	}
	else if ( (curr_step >= 4) && (curr_step < 8) ){
  4013c6:	f1ab 0304 	sub.w	r3, fp, #4
  4013ca:	b2db      	uxtb	r3, r3
  4013cc:	2b03      	cmp	r3, #3
  4013ce:	d814      	bhi.n	4013fa <leds_update_cursor+0x17a>
		offset = (curr_step % 4)*3;
  4013d0:	f00b 0003 	and.w	r0, fp, #3
  4013d4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  4013d8:	4b2d      	ldr	r3, [pc, #180]	; (401490 <leds_update_cursor+0x210>)
  4013da:	7018      	strb	r0, [r3, #0]
		leds_data_2[offset] = 0xFFFF;
  4013dc:	4b2d      	ldr	r3, [pc, #180]	; (401494 <leds_update_cursor+0x214>)
  4013de:	f64f 72ff 	movw	r2, #65535	; 0xffff
  4013e2:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
		leds_data_2[offset+1] = 0x0FFF;
  4013e6:	1c42      	adds	r2, r0, #1
  4013e8:	f640 71ff 	movw	r1, #4095	; 0xfff
  4013ec:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		leds_data_2[offset+2] = 0x0000;
  4013f0:	3002      	adds	r0, #2
  4013f2:	2200      	movs	r2, #0
  4013f4:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
  4013f8:	e039      	b.n	40146e <leds_update_cursor+0x1ee>
	}
	else if ( (curr_step >= 8) && (curr_step < 12) ){
  4013fa:	f1ab 0308 	sub.w	r3, fp, #8
  4013fe:	b2db      	uxtb	r3, r3
  401400:	2b03      	cmp	r3, #3
  401402:	d814      	bhi.n	40142e <leds_update_cursor+0x1ae>
		offset = (curr_step % 8)*3;
  401404:	f00b 0007 	and.w	r0, fp, #7
  401408:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  40140c:	4b20      	ldr	r3, [pc, #128]	; (401490 <leds_update_cursor+0x210>)
  40140e:	7018      	strb	r0, [r3, #0]
		leds_data_3[offset] = 0xFFFF;
  401410:	4b21      	ldr	r3, [pc, #132]	; (401498 <leds_update_cursor+0x218>)
  401412:	f64f 72ff 	movw	r2, #65535	; 0xffff
  401416:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
		leds_data_3[offset+1] = 0x0FFF;
  40141a:	1c42      	adds	r2, r0, #1
  40141c:	f640 71ff 	movw	r1, #4095	; 0xfff
  401420:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		leds_data_3[offset+2] = 0x0000;
  401424:	3002      	adds	r0, #2
  401426:	2200      	movs	r2, #0
  401428:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
  40142c:	e01f      	b.n	40146e <leds_update_cursor+0x1ee>
	}
	else if ( (curr_step >= 12) && (curr_step < 16) ){
  40142e:	f1ab 030c 	sub.w	r3, fp, #12
  401432:	b2db      	uxtb	r3, r3
  401434:	2b03      	cmp	r3, #3
  401436:	d81a      	bhi.n	40146e <leds_update_cursor+0x1ee>
		offset = (curr_step % 12)*3;
  401438:	4b18      	ldr	r3, [pc, #96]	; (40149c <leds_update_cursor+0x21c>)
  40143a:	fba3 230b 	umull	r2, r3, r3, fp
  40143e:	08db      	lsrs	r3, r3, #3
  401440:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  401444:	ebab 0083 	sub.w	r0, fp, r3, lsl #2
  401448:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  40144c:	b2c3      	uxtb	r3, r0
  40144e:	4a10      	ldr	r2, [pc, #64]	; (401490 <leds_update_cursor+0x210>)
  401450:	7013      	strb	r3, [r2, #0]
		leds_data_4[offset] = 0xFFFF;
  401452:	4a0b      	ldr	r2, [pc, #44]	; (401480 <leds_update_cursor+0x200>)
  401454:	f64f 71ff 	movw	r1, #65535	; 0xffff
  401458:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		leds_data_4[offset+1] = 0x0FFF;
  40145c:	1c59      	adds	r1, r3, #1
  40145e:	f640 70ff 	movw	r0, #4095	; 0xfff
  401462:	f822 0011 	strh.w	r0, [r2, r1, lsl #1]
		leds_data_4[offset+2] = 0x0000;
  401466:	3302      	adds	r3, #2
  401468:	2100      	movs	r1, #0
  40146a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	}


	leds_update_display();
  40146e:	4b0c      	ldr	r3, [pc, #48]	; (4014a0 <leds_update_cursor+0x220>)
  401470:	4798      	blx	r3
  401472:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401476:	bf00      	nop
  401478:	200006bc 	.word	0x200006bc
  40147c:	2000067c 	.word	0x2000067c
  401480:	20000704 	.word	0x20000704
  401484:	80000003 	.word	0x80000003
  401488:	80000007 	.word	0x80000007
  40148c:	2000072a 	.word	0x2000072a
  401490:	2000072b 	.word	0x2000072b
  401494:	200006d4 	.word	0x200006d4
  401498:	200006ec 	.word	0x200006ec
  40149c:	aaaaaaab 	.word	0xaaaaaaab
  4014a0:	00400ebd 	.word	0x00400ebd
  4014a4:	2aaaaaab 	.word	0x2aaaaaab

004014a8 <bpm_inc>:


}

 void bpm_inc(){
	bpm++;
  4014a8:	4a02      	ldr	r2, [pc, #8]	; (4014b4 <bpm_inc+0xc>)
  4014aa:	8813      	ldrh	r3, [r2, #0]
  4014ac:	3301      	adds	r3, #1
  4014ae:	8013      	strh	r3, [r2, #0]
  4014b0:	4770      	bx	lr
  4014b2:	bf00      	nop
  4014b4:	2000072c 	.word	0x2000072c

004014b8 <bpm_dec>:
 }

 void bpm_dec(){
	 bpm--;
  4014b8:	4a02      	ldr	r2, [pc, #8]	; (4014c4 <bpm_dec+0xc>)
  4014ba:	8813      	ldrh	r3, [r2, #0]
  4014bc:	3b01      	subs	r3, #1
  4014be:	8013      	strh	r3, [r2, #0]
  4014c0:	4770      	bx	lr
  4014c2:	bf00      	nop
  4014c4:	2000072c 	.word	0x2000072c

004014c8 <bpm_direction>:

 uint8_t A_seq;
 uint8_t B_seq;


 void bpm_direction(uint32_t A, uint32_t B){
  4014c8:	b570      	push	{r4, r5, r6, lr}

	//read Encoder input A
	bool A_in = REG_PIOA_PDSR & A;
  4014ca:	4b18      	ldr	r3, [pc, #96]	; (40152c <bpm_direction+0x64>)
  4014cc:	681e      	ldr	r6, [r3, #0]
	//read Encoder input B
	bool B_in = REG_PIOA_PDSR & B;
  4014ce:	681b      	ldr	r3, [r3, #0]
	
	A_seq = A_seq << 1;
	A_seq |= A_in;
	
	B_seq = B_seq << 1;
  4014d0:	4c17      	ldr	r4, [pc, #92]	; (401530 <bpm_direction+0x68>)
	B_seq |= B_in;
  4014d2:	7822      	ldrb	r2, [r4, #0]
  4014d4:	420b      	tst	r3, r1
  4014d6:	bf14      	ite	ne
  4014d8:	2301      	movne	r3, #1
  4014da:	2300      	moveq	r3, #0
  4014dc:	ea43 0242 	orr.w	r2, r3, r2, lsl #1
	//read Encoder input A
	bool A_in = REG_PIOA_PDSR & A;
	//read Encoder input B
	bool B_in = REG_PIOA_PDSR & B;
	
	A_seq = A_seq << 1;
  4014e0:	4914      	ldr	r1, [pc, #80]	; (401534 <bpm_direction+0x6c>)
	A_seq |= A_in;
	
	B_seq = B_seq << 1;
	B_seq |= B_in;
	
	A_seq &= 0b00001111;
  4014e2:	780d      	ldrb	r5, [r1, #0]
  4014e4:	4206      	tst	r6, r0
  4014e6:	bf14      	ite	ne
  4014e8:	2301      	movne	r3, #1
  4014ea:	2300      	moveq	r3, #0
  4014ec:	ea43 0345 	orr.w	r3, r3, r5, lsl #1
  4014f0:	f003 030f 	and.w	r3, r3, #15
  4014f4:	700b      	strb	r3, [r1, #0]
	B_seq &= 0b00001111;
  4014f6:	f002 020f 	and.w	r2, r2, #15
  4014fa:	7022      	strb	r2, [r4, #0]


	//return true if turned right
	if ((A_seq == 0b00001001) && (B_seq == 0b00000011)){
  4014fc:	2b09      	cmp	r3, #9
  4014fe:	d109      	bne.n	401514 <bpm_direction+0x4c>
  401500:	2a03      	cmp	r2, #3
  401502:	d112      	bne.n	40152a <bpm_direction+0x62>
		REG_PIOB_SODR |= PIO_PER_P3; //set output high on PB3
  401504:	4a0c      	ldr	r2, [pc, #48]	; (401538 <bpm_direction+0x70>)
  401506:	6813      	ldr	r3, [r2, #0]
  401508:	f043 0308 	orr.w	r3, r3, #8
  40150c:	6013      	str	r3, [r2, #0]
		bpm_inc();
  40150e:	4b0b      	ldr	r3, [pc, #44]	; (40153c <bpm_direction+0x74>)
  401510:	4798      	blx	r3
  401512:	bd70      	pop	{r4, r5, r6, pc}

	}

	else if ((A_seq == 0b00000011) && (B_seq == 0b00001001)){
  401514:	2b03      	cmp	r3, #3
  401516:	d108      	bne.n	40152a <bpm_direction+0x62>
  401518:	2a09      	cmp	r2, #9
  40151a:	d106      	bne.n	40152a <bpm_direction+0x62>
		REG_PIOB_CODR |= PIO_PER_P3; //set output low on PB3
  40151c:	4a08      	ldr	r2, [pc, #32]	; (401540 <bpm_direction+0x78>)
  40151e:	6813      	ldr	r3, [r2, #0]
  401520:	f043 0308 	orr.w	r3, r3, #8
  401524:	6013      	str	r3, [r2, #0]
		bpm_dec();
  401526:	4b07      	ldr	r3, [pc, #28]	; (401544 <bpm_direction+0x7c>)
  401528:	4798      	blx	r3
  40152a:	bd70      	pop	{r4, r5, r6, pc}
  40152c:	400e0e3c 	.word	0x400e0e3c
  401530:	20000729 	.word	0x20000729
  401534:	20000728 	.word	0x20000728
  401538:	400e1030 	.word	0x400e1030
  40153c:	004014a9 	.word	0x004014a9
  401540:	400e1034 	.word	0x400e1034
  401544:	004014b9 	.word	0x004014b9

00401548 <init_sequencer_controls>:
 void bpm_dec(){
	 bpm--;
 }


 void init_sequencer_controls(){
  401548:	b470      	push	{r4, r5, r6}

	bpm = 120;
  40154a:	2278      	movs	r2, #120	; 0x78
  40154c:	4b2b      	ldr	r3, [pc, #172]	; (4015fc <init_sequencer_controls+0xb4>)
  40154e:	801a      	strh	r2, [r3, #0]

	//enable clock for PIOA
	REG_PMC_PCER0 |= PMC_PCER0_PID11;
  401550:	4a2b      	ldr	r2, [pc, #172]	; (401600 <init_sequencer_controls+0xb8>)
  401552:	6813      	ldr	r3, [r2, #0]
  401554:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  401558:	6013      	str	r3, [r2, #0]

	/**************			CONFIGURE CONTROL ENCODERS			**************/

	//Set up PA0 as BPM INPUT A
	REG_PIOA_PER |= PIO_PER_P0; //enable PIO controller
  40155a:	4d2a      	ldr	r5, [pc, #168]	; (401604 <init_sequencer_controls+0xbc>)
  40155c:	682b      	ldr	r3, [r5, #0]
  40155e:	f043 0301 	orr.w	r3, r3, #1
  401562:	602b      	str	r3, [r5, #0]
	REG_PIOA_ODR |= PIO_ODR_P0; //disable output
  401564:	4c28      	ldr	r4, [pc, #160]	; (401608 <init_sequencer_controls+0xc0>)
  401566:	6823      	ldr	r3, [r4, #0]
  401568:	f043 0301 	orr.w	r3, r3, #1
  40156c:	6023      	str	r3, [r4, #0]
	REG_PIOA_PPDDR |= PIO_PPDDR_P0; //disable pull-down resistor
  40156e:	4827      	ldr	r0, [pc, #156]	; (40160c <init_sequencer_controls+0xc4>)
  401570:	6803      	ldr	r3, [r0, #0]
  401572:	f043 0301 	orr.w	r3, r3, #1
  401576:	6003      	str	r3, [r0, #0]
	REG_PIOA_PUER |= PIO_PUER_P0;	//enable pull-up resistor
  401578:	4925      	ldr	r1, [pc, #148]	; (401610 <init_sequencer_controls+0xc8>)
  40157a:	680b      	ldr	r3, [r1, #0]
  40157c:	f043 0301 	orr.w	r3, r3, #1
  401580:	600b      	str	r3, [r1, #0]
	REG_PIOA_IFSCER |= PIO_IFSCER_P0; //turn on slow clock debounce
  401582:	f602 2274 	addw	r2, r2, #2676	; 0xa74
  401586:	6813      	ldr	r3, [r2, #0]
  401588:	f043 0301 	orr.w	r3, r3, #1
  40158c:	6013      	str	r3, [r2, #0]
	REG_PIOA_IFER |= PIO_IFER_P0;	//start debounce filter
  40158e:	4b21      	ldr	r3, [pc, #132]	; (401614 <init_sequencer_controls+0xcc>)
  401590:	681e      	ldr	r6, [r3, #0]
  401592:	f046 0601 	orr.w	r6, r6, #1
  401596:	601e      	str	r6, [r3, #0]

	//Set up PA1 as BPM INPUT B
	REG_PIOA_PER |= PIO_PER_P1; //enable PIO controller
  401598:	682e      	ldr	r6, [r5, #0]
  40159a:	f046 0602 	orr.w	r6, r6, #2
  40159e:	602e      	str	r6, [r5, #0]
	REG_PIOA_ODR |= PIO_ODR_P1; //disable output
  4015a0:	6825      	ldr	r5, [r4, #0]
  4015a2:	f045 0502 	orr.w	r5, r5, #2
  4015a6:	6025      	str	r5, [r4, #0]
	REG_PIOA_PPDDR |= PIO_PPDDR_P1; //disable pull-down resistor
  4015a8:	6804      	ldr	r4, [r0, #0]
  4015aa:	f044 0402 	orr.w	r4, r4, #2
  4015ae:	6004      	str	r4, [r0, #0]
	REG_PIOA_PUER |= PIO_PUER_P1;	//enable pull-up resistor
  4015b0:	6808      	ldr	r0, [r1, #0]
  4015b2:	f040 0002 	orr.w	r0, r0, #2
  4015b6:	6008      	str	r0, [r1, #0]
	REG_PIOA_IFSCER |= PIO_IFSCER_P1; //turn on slow clock debounce
  4015b8:	6811      	ldr	r1, [r2, #0]
  4015ba:	f041 0102 	orr.w	r1, r1, #2
  4015be:	6011      	str	r1, [r2, #0]
	REG_PIOA_IFER |= PIO_IFER_P1;	//start debounce filter
  4015c0:	681a      	ldr	r2, [r3, #0]
  4015c2:	f042 0202 	orr.w	r2, r2, #2
  4015c6:	601a      	str	r2, [r3, #0]



	/**************			CONFIGURE ENCODER INTERRUPTS			**************/

	uint32_t flag_clear = REG_PIOA_ISR;	//clear left over interrupt flags
  4015c8:	332c      	adds	r3, #44	; 0x2c
  4015ca:	681b      	ldr	r3, [r3, #0]

	//Enable interrupts for Encoder 1
	REG_PIOA_IER |= PIO_IER_P0;			//enable input rising edge interrupt
  4015cc:	4a12      	ldr	r2, [pc, #72]	; (401618 <init_sequencer_controls+0xd0>)
  4015ce:	6813      	ldr	r3, [r2, #0]
  4015d0:	f043 0301 	orr.w	r3, r3, #1
  4015d4:	6013      	str	r3, [r2, #0]
	REG_PIOA_REHLSR |= PIO_REHLSR_P0;
  4015d6:	4b11      	ldr	r3, [pc, #68]	; (40161c <init_sequencer_controls+0xd4>)
  4015d8:	6819      	ldr	r1, [r3, #0]
  4015da:	f041 0101 	orr.w	r1, r1, #1
  4015de:	6019      	str	r1, [r3, #0]
	REG_PIOA_IER |= PIO_IER_P1;			//enable input rising edge interrupt
  4015e0:	6811      	ldr	r1, [r2, #0]
  4015e2:	f041 0102 	orr.w	r1, r1, #2
  4015e6:	6011      	str	r1, [r2, #0]
	REG_PIOA_REHLSR |= PIO_REHLSR_P1;
  4015e8:	681a      	ldr	r2, [r3, #0]
  4015ea:	f042 0202 	orr.w	r2, r2, #2
  4015ee:	601a      	str	r2, [r3, #0]
  4015f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
  4015f4:	4b0a      	ldr	r3, [pc, #40]	; (401620 <init_sequencer_controls+0xd8>)
  4015f6:	601a      	str	r2, [r3, #0]

	NVIC_EnableIRQ(PIOA_IRQn);			//enable PORT A interrupts


 }
  4015f8:	bc70      	pop	{r4, r5, r6}
  4015fa:	4770      	bx	lr
  4015fc:	2000072c 	.word	0x2000072c
  401600:	400e0410 	.word	0x400e0410
  401604:	400e0e00 	.word	0x400e0e00
  401608:	400e0e14 	.word	0x400e0e14
  40160c:	400e0e90 	.word	0x400e0e90
  401610:	400e0e64 	.word	0x400e0e64
  401614:	400e0e20 	.word	0x400e0e20
  401618:	400e0e40 	.word	0x400e0e40
  40161c:	400e0ed4 	.word	0x400e0ed4
  401620:	e000e100 	.word	0xe000e100

00401624 <PIOA_Handler>:

 void PIOA_Handler(){
  401624:	b508      	push	{r3, lr}

	uint32_t status = REG_PIOA_ISR;	//read PIOC interrupt status & clear interrupt flags
  401626:	4b07      	ldr	r3, [pc, #28]	; (401644 <PIOA_Handler+0x20>)
  401628:	681b      	ldr	r3, [r3, #0]

	//check if Encoder 1 was rotated
	if ( (status & PIO_ISR_P0) || (status & PIO_ISR_P1) ){
  40162a:	f013 0f03 	tst.w	r3, #3
  40162e:	d007      	beq.n	401640 <PIOA_Handler+0x1c>
		bpm_direction(PIO_ODSR_P0, PIO_ODSR_P1);
  401630:	2102      	movs	r1, #2
  401632:	2001      	movs	r0, #1
  401634:	4b04      	ldr	r3, [pc, #16]	; (401648 <PIOA_Handler+0x24>)
  401636:	4798      	blx	r3
		update_timers(bpm);
  401638:	4b04      	ldr	r3, [pc, #16]	; (40164c <PIOA_Handler+0x28>)
  40163a:	8818      	ldrh	r0, [r3, #0]
  40163c:	4b04      	ldr	r3, [pc, #16]	; (401650 <PIOA_Handler+0x2c>)
  40163e:	4798      	blx	r3
  401640:	bd08      	pop	{r3, pc}
  401642:	bf00      	nop
  401644:	400e0e4c 	.word	0x400e0e4c
  401648:	004014c9 	.word	0x004014c9
  40164c:	2000072c 	.word	0x2000072c
  401650:	0040187d 	.word	0x0040187d

00401654 <SPI_modeSelect>:
    Mode0		0		1
    Mode1		0		0
    Mode2		1		1
    Mode3		1		0
    */
    if (mode == 0){
  401654:	b948      	cbnz	r0, 40166a <SPI_modeSelect+0x16>
        REG_SPI_CSR &= ~SPI_CSR_CPOL;
  401656:	4b17      	ldr	r3, [pc, #92]	; (4016b4 <SPI_modeSelect+0x60>)
  401658:	681a      	ldr	r2, [r3, #0]
  40165a:	f022 0201 	bic.w	r2, r2, #1
  40165e:	601a      	str	r2, [r3, #0]
        REG_SPI_CSR |= SPI_CSR_NCPHA;
  401660:	681a      	ldr	r2, [r3, #0]
  401662:	f042 0202 	orr.w	r2, r2, #2
  401666:	601a      	str	r2, [r3, #0]
  401668:	4770      	bx	lr
    }
    else if (mode == 1){
  40166a:	2801      	cmp	r0, #1
  40166c:	d109      	bne.n	401682 <SPI_modeSelect+0x2e>
        REG_SPI_CSR &= ~SPI_CSR_CPOL;
  40166e:	4b11      	ldr	r3, [pc, #68]	; (4016b4 <SPI_modeSelect+0x60>)
  401670:	681a      	ldr	r2, [r3, #0]
  401672:	f022 0201 	bic.w	r2, r2, #1
  401676:	601a      	str	r2, [r3, #0]
        REG_SPI_CSR &= ~SPI_CSR_NCPHA;
  401678:	681a      	ldr	r2, [r3, #0]
  40167a:	f022 0202 	bic.w	r2, r2, #2
  40167e:	601a      	str	r2, [r3, #0]
  401680:	4770      	bx	lr
    }
    else if (mode == 2){
  401682:	2802      	cmp	r0, #2
  401684:	d109      	bne.n	40169a <SPI_modeSelect+0x46>
        REG_SPI_CSR |= SPI_CSR_CPOL;
  401686:	4b0b      	ldr	r3, [pc, #44]	; (4016b4 <SPI_modeSelect+0x60>)
  401688:	681a      	ldr	r2, [r3, #0]
  40168a:	f042 0201 	orr.w	r2, r2, #1
  40168e:	601a      	str	r2, [r3, #0]
        REG_SPI_CSR |= SPI_CSR_NCPHA;
  401690:	681a      	ldr	r2, [r3, #0]
  401692:	f042 0202 	orr.w	r2, r2, #2
  401696:	601a      	str	r2, [r3, #0]
  401698:	4770      	bx	lr
    }
    else if (mode == 3){
  40169a:	2803      	cmp	r0, #3
  40169c:	d108      	bne.n	4016b0 <SPI_modeSelect+0x5c>
        REG_SPI_CSR |= SPI_CSR_CPOL;
  40169e:	4b05      	ldr	r3, [pc, #20]	; (4016b4 <SPI_modeSelect+0x60>)
  4016a0:	681a      	ldr	r2, [r3, #0]
  4016a2:	f042 0201 	orr.w	r2, r2, #1
  4016a6:	601a      	str	r2, [r3, #0]
        REG_SPI_CSR &= ~SPI_CSR_NCPHA;
  4016a8:	681a      	ldr	r2, [r3, #0]
  4016aa:	f022 0202 	bic.w	r2, r2, #2
  4016ae:	601a      	str	r2, [r3, #0]
  4016b0:	4770      	bx	lr
  4016b2:	bf00      	nop
  4016b4:	40008030 	.word	0x40008030

004016b8 <SPI_led_init>:
    }
}

void SPI_led_init(){
  4016b8:	b508      	push	{r3, lr}

	//enable peripheral clock
	REG_PMC_PCER0 |= PMC_PCER0_PID21;
  4016ba:	4a14      	ldr	r2, [pc, #80]	; (40170c <SPI_led_init+0x54>)
  4016bc:	6813      	ldr	r3, [r2, #0]
  4016be:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
  4016c2:	6013      	str	r3, [r2, #0]

	//set spi master mode
	REG_SPI_MR |= SPI_MR_MSTR;
  4016c4:	4b12      	ldr	r3, [pc, #72]	; (401710 <SPI_led_init+0x58>)
  4016c6:	681a      	ldr	r2, [r3, #0]
  4016c8:	f042 0201 	orr.w	r2, r2, #1
  4016cc:	601a      	str	r2, [r3, #0]

	//set fixed peripheral select(peripheral chosen in SP_MR.PCS instead of SPI_THR.PCS)
	REG_SPI_MR &= ~SPI_MR_PS;
  4016ce:	681a      	ldr	r2, [r3, #0]
  4016d0:	f022 0202 	bic.w	r2, r2, #2
  4016d4:	601a      	str	r2, [r3, #0]
	//REG_SPI_MR |= SPI_MR_PCS(0b1110);

	//set polarity and clock phase to rising edge sample, falling edge shift
	SPI_modeSelect(0);
  4016d6:	2000      	movs	r0, #0
  4016d8:	4b0e      	ldr	r3, [pc, #56]	; (401714 <SPI_led_init+0x5c>)
  4016da:	4798      	blx	r3

	//set clock generator (1 = peripheral clock rate), otherwise a divisor
	//SCBR = fperipheral clock / SPCK Bit Rate
	REG_SPI_CSR |= SPI_CSR_SCBR(5);
  4016dc:	4a0e      	ldr	r2, [pc, #56]	; (401718 <SPI_led_init+0x60>)
  4016de:	6813      	ldr	r3, [r2, #0]
  4016e0:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
  4016e4:	6013      	str	r3, [r2, #0]

	//chip select remains low after transfer
	//REG_SPI_CSR |= SPI_CSR_CSNAAT;

	//give peripheral control of pins 
	REG_PIOA_PDR |= PIO_PDR_P11; //NPCS0
  4016e6:	4b0d      	ldr	r3, [pc, #52]	; (40171c <SPI_led_init+0x64>)
  4016e8:	681a      	ldr	r2, [r3, #0]
  4016ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
  4016ee:	601a      	str	r2, [r3, #0]
	REG_PIOA_PDR |= PIO_PDR_P13; //MOSI
  4016f0:	681a      	ldr	r2, [r3, #0]
  4016f2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  4016f6:	601a      	str	r2, [r3, #0]
	REG_PIOA_PDR |= PIO_PDR_P14; //SSCK
  4016f8:	681a      	ldr	r2, [r3, #0]
  4016fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
  4016fe:	601a      	str	r2, [r3, #0]

	//enable SPI
	REG_SPI_CR |= SPI_CR_SPIEN;
  401700:	4a07      	ldr	r2, [pc, #28]	; (401720 <SPI_led_init+0x68>)
  401702:	6813      	ldr	r3, [r2, #0]
  401704:	f043 0301 	orr.w	r3, r3, #1
  401708:	6013      	str	r3, [r2, #0]
  40170a:	bd08      	pop	{r3, pc}
  40170c:	400e0410 	.word	0x400e0410
  401710:	40008004 	.word	0x40008004
  401714:	00401655 	.word	0x00401655
  401718:	40008030 	.word	0x40008030
  40171c:	400e0e04 	.word	0x400e0e04
  401720:	40008000 	.word	0x40008000

00401724 <SPI_dac_init>:


}

void SPI_dac_init(){
  401724:	b508      	push	{r3, lr}

	REG_PIOB_PER |= PIO_PER_P13; //enable PIO controller on PB14
  401726:	4a1c      	ldr	r2, [pc, #112]	; (401798 <SPI_dac_init+0x74>)
  401728:	6813      	ldr	r3, [r2, #0]
  40172a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  40172e:	6013      	str	r3, [r2, #0]
	REG_PIOB_OER |= PIO_PER_P13; //enable output on pin PB14
  401730:	3210      	adds	r2, #16
  401732:	6813      	ldr	r3, [r2, #0]
  401734:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  401738:	6013      	str	r3, [r2, #0]
	REG_PIOB_SODR |=  PIO_PER_P13;
  40173a:	3220      	adds	r2, #32
  40173c:	6813      	ldr	r3, [r2, #0]
  40173e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  401742:	6013      	str	r3, [r2, #0]

	//enable peripheral clock
	REG_PMC_PCER0 |= PMC_PCER0_PID21;
  401744:	f5a2 6242 	sub.w	r2, r2, #3104	; 0xc20
  401748:	6813      	ldr	r3, [r2, #0]
  40174a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
  40174e:	6013      	str	r3, [r2, #0]

	//set spi master mode
	REG_SPI_MR |= SPI_MR_MSTR;
  401750:	4b12      	ldr	r3, [pc, #72]	; (40179c <SPI_dac_init+0x78>)
  401752:	681a      	ldr	r2, [r3, #0]
  401754:	f042 0201 	orr.w	r2, r2, #1
  401758:	601a      	str	r2, [r3, #0]

	//set fixed peripheral select(peripheral chosen in SP_MR.PCS instead of SPI_THR.PCS)
	REG_SPI_MR &= ~SPI_MR_PS;
  40175a:	681a      	ldr	r2, [r3, #0]
  40175c:	f022 0202 	bic.w	r2, r2, #2
  401760:	601a      	str	r2, [r3, #0]
	//REG_SPI_MR |= SPI_MR_PCS(0b1101);

	//set polarity and clock phase to rising edge sample, falling edge shift
	SPI_modeSelect(0);
  401762:	2000      	movs	r0, #0
  401764:	4b0e      	ldr	r3, [pc, #56]	; (4017a0 <SPI_dac_init+0x7c>)
  401766:	4798      	blx	r3

	//set clock generator (1 = peripheral clock rate), otherwise a divisor
	//SCBR = fperipheral clock / SPCK Bit Rate
	REG_SPI_CSR |= SPI_CSR_SCBR(20);
  401768:	4a0e      	ldr	r2, [pc, #56]	; (4017a4 <SPI_dac_init+0x80>)
  40176a:	6813      	ldr	r3, [r2, #0]
  40176c:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
  401770:	6013      	str	r3, [r2, #0]

	//chip select remains low after transfer
	//REG_SPI_CSR |= SPI_CSR_CSNAAT;

	//give peripheral control of pins
	REG_PIOA_PDR |= PIO_PDR_P11; //NPCS1
  401772:	4b0d      	ldr	r3, [pc, #52]	; (4017a8 <SPI_dac_init+0x84>)
  401774:	681a      	ldr	r2, [r3, #0]
  401776:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
  40177a:	601a      	str	r2, [r3, #0]
	REG_PIOA_PDR |= PIO_PDR_P13; //MOSI
  40177c:	681a      	ldr	r2, [r3, #0]
  40177e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  401782:	601a      	str	r2, [r3, #0]
	REG_PIOA_PDR |= PIO_PDR_P14; //SSCK
  401784:	681a      	ldr	r2, [r3, #0]
  401786:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
  40178a:	601a      	str	r2, [r3, #0]

	//enable SPI
	REG_SPI_CR |= SPI_CR_SPIEN;
  40178c:	4a07      	ldr	r2, [pc, #28]	; (4017ac <SPI_dac_init+0x88>)
  40178e:	6813      	ldr	r3, [r2, #0]
  401790:	f043 0301 	orr.w	r3, r3, #1
  401794:	6013      	str	r3, [r2, #0]
  401796:	bd08      	pop	{r3, pc}
  401798:	400e1000 	.word	0x400e1000
  40179c:	40008004 	.word	0x40008004
  4017a0:	00401655 	.word	0x00401655
  4017a4:	40008030 	.word	0x40008030
  4017a8:	400e0e04 	.word	0x400e0e04
  4017ac:	40008000 	.word	0x40008000

004017b0 <SPI_byteSend>:

}

void SPI_byteSend(uint8_t data){
	//wait for transmit register to be empty
	while (!(REG_SPI_SR & SPI_SR_TDRE));
  4017b0:	4a04      	ldr	r2, [pc, #16]	; (4017c4 <SPI_byteSend+0x14>)
  4017b2:	6813      	ldr	r3, [r2, #0]
  4017b4:	f013 0f02 	tst.w	r3, #2
  4017b8:	d0fb      	beq.n	4017b2 <SPI_byteSend+0x2>
	//send data to transmit register
	REG_SPI_TDR |= (data);
  4017ba:	4a03      	ldr	r2, [pc, #12]	; (4017c8 <SPI_byteSend+0x18>)
  4017bc:	6813      	ldr	r3, [r2, #0]
  4017be:	4318      	orrs	r0, r3
  4017c0:	6010      	str	r0, [r2, #0]
  4017c2:	4770      	bx	lr
  4017c4:	40008010 	.word	0x40008010
  4017c8:	4000800c 	.word	0x4000800c

004017cc <notes_get>:
						 48, 48, 48, 48, 48, 48, 48, 48};



 float notes_get(uint8_t curr_step){
	int lookup_index = notes_index[curr_step];
  4017cc:	4b03      	ldr	r3, [pc, #12]	; (4017dc <notes_get+0x10>)
	return notes_lookup[lookup_index];
  4017ce:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
 }
  4017d2:	4b03      	ldr	r3, [pc, #12]	; (4017e0 <notes_get+0x14>)
  4017d4:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
  4017d8:	4770      	bx	lr
  4017da:	bf00      	nop
  4017dc:	2000000c 	.word	0x2000000c
  4017e0:	2000004c 	.word	0x2000004c

004017e4 <notes_inc>:

  void notes_inc(uint8_t step){
	if (notes_index[step] < 120){
  4017e4:	4b04      	ldr	r3, [pc, #16]	; (4017f8 <notes_inc+0x14>)
  4017e6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
  4017ea:	2b77      	cmp	r3, #119	; 0x77
  4017ec:	dc03      	bgt.n	4017f6 <notes_inc+0x12>
		notes_index[step]++;
  4017ee:	3301      	adds	r3, #1
  4017f0:	4a01      	ldr	r2, [pc, #4]	; (4017f8 <notes_inc+0x14>)
  4017f2:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  4017f6:	4770      	bx	lr
  4017f8:	2000000c 	.word	0x2000000c

004017fc <notes_dec>:
	}
 }

 void notes_dec(uint8_t step){
	if (notes_index[step] > 0){
  4017fc:	4b04      	ldr	r3, [pc, #16]	; (401810 <notes_dec+0x14>)
  4017fe:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
  401802:	2b00      	cmp	r3, #0
  401804:	dd03      	ble.n	40180e <notes_dec+0x12>
		notes_index[step]--;
  401806:	3b01      	subs	r3, #1
  401808:	4a01      	ldr	r2, [pc, #4]	; (401810 <notes_dec+0x14>)
  40180a:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  40180e:	4770      	bx	lr
  401810:	2000000c 	.word	0x2000000c

00401814 <timers_init>:
 #include "sequencer.h"
 #include "adc.h"

 void timers_init(void) {

	overflow_count = 0;
  401814:	2300      	movs	r3, #0
  401816:	4a13      	ldr	r2, [pc, #76]	; (401864 <timers_init+0x50>)
  401818:	8013      	strh	r3, [r2, #0]
	curr_step = 0;
  40181a:	4a13      	ldr	r2, [pc, #76]	; (401868 <timers_init+0x54>)
  40181c:	7013      	strb	r3, [r2, #0]
  40181e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  401822:	4b12      	ldr	r3, [pc, #72]	; (40186c <timers_init+0x58>)
  401824:	601a      	str	r2, [r3, #0]

	NVIC_EnableIRQ(TC0_IRQn);

	// Enable peripheral clock for TC0
	// Peripheral ID (PID) for TC0 is 23
	REG_PMC_PCER0 |= PMC_PCER0_PID23;
  401826:	4a12      	ldr	r2, [pc, #72]	; (401870 <timers_init+0x5c>)
  401828:	6813      	ldr	r3, [r2, #0]
  40182a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
  40182e:	6013      	str	r3, [r2, #0]
	// TIMER_CLOCK1 = MCK/2
	// TIMER_CLOCK2 = MCK/8
	// TIMER_CLOCK3 = MCK/32
	// TIMER_CLOCK4 = MCK/128
	// TIMER_CLOCK5 = SCLK
	REG_TC0_CMR0 |= TC_CMR_TCCLKS_TIMER_CLOCK2 | TC_CMR_CPCTRG;
  401830:	f5a2 2250 	sub.w	r2, r2, #851968	; 0xd0000
  401834:	f2a2 420c 	subw	r2, r2, #1036	; 0x40c
  401838:	6813      	ldr	r3, [r2, #0]
  40183a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  40183e:	f043 0301 	orr.w	r3, r3, #1
  401842:	6013      	str	r3, [r2, #0]
	// Set interrupt on compare to RC value
	REG_TC0_IER0 |= TC_IER_CPCS;
  401844:	3220      	adds	r2, #32
  401846:	6813      	ldr	r3, [r2, #0]
  401848:	f043 0310 	orr.w	r3, r3, #16
  40184c:	6013      	str	r3, [r2, #0]
// 	// 60 BPM = 1 Hz. SCK = 32 KHz. 16,000 counts per half second, 2 interrupts per cycle
// 	REG_TC0_RC0 = 16000;

	// 60 BPM = 1 Hz. MCK/8 = 12.5 MHz. 6.25 mil counts per half second, 2 interrupts per cycle
	// Anticipating 5000 overflows (5000*1250 is 6.25 mil)
	REG_TC0_RC0 = 1250;
  40184e:	f240 42e2 	movw	r2, #1250	; 0x4e2
  401852:	4b08      	ldr	r3, [pc, #32]	; (401874 <timers_init+0x60>)
  401854:	601a      	str	r2, [r3, #0]
// 	REG_PIOA_PER |= PIO_PER_P20; //enable PIO controller on PA11
// 	REG_PIOA_OER |= PIO_PER_P20; //enable output on pin PA11
	/*REG_PMC_PCER0 |= PMC_PCER0_PID11; //Enable PMC control for PA11*/

	// TC0 control register enables timer and triggers it to start
	REG_TC0_CCR0 |= TC_CCR_CLKEN | TC_CCR_SWTRG;
  401856:	4a08      	ldr	r2, [pc, #32]	; (401878 <timers_init+0x64>)
  401858:	6813      	ldr	r3, [r2, #0]
  40185a:	f043 0305 	orr.w	r3, r3, #5
  40185e:	6013      	str	r3, [r2, #0]
  401860:	4770      	bx	lr
  401862:	bf00      	nop
  401864:	20000722 	.word	0x20000722
  401868:	20000724 	.word	0x20000724
  40186c:	e000e100 	.word	0xe000e100
  401870:	400e0410 	.word	0x400e0410
  401874:	4001001c 	.word	0x4001001c
  401878:	40010000 	.word	0x40010000

0040187c <update_timers>:

 void update_timers(int bpm) {
// 	// (SCK/2) / (bpm/60); SCK*60/2 = 960000
// 	// Offset is needed, possible not with the crystals working
// 	REG_TC0_RC0 = (uint16_t)(960000/bpm - 420);
	if(bpm > 1) {
  40187c:	2801      	cmp	r0, #1
  40187e:	dd05      	ble.n	40188c <update_timers+0x10>
		REG_TC0_RC0 = (uint16_t)(75000/bpm);
  401880:	4b03      	ldr	r3, [pc, #12]	; (401890 <update_timers+0x14>)
  401882:	fb93 f0f0 	sdiv	r0, r3, r0
  401886:	b280      	uxth	r0, r0
  401888:	4b02      	ldr	r3, [pc, #8]	; (401894 <update_timers+0x18>)
  40188a:	6018      	str	r0, [r3, #0]
  40188c:	4770      	bx	lr
  40188e:	bf00      	nop
  401890:	000124f8 	.word	0x000124f8
  401894:	4001001c 	.word	0x4001001c

00401898 <TC0_Handler>:
	}
 }

 void TC0_Handler() {
  401898:	b510      	push	{r4, lr}
	 // Handling timer = RC

	 // Test code, normally trigger next step, output clock
	 if((REG_TC0_SR0 & TC_SR_CPCS) >= 0) {
  40189a:	4b1c      	ldr	r3, [pc, #112]	; (40190c <TC0_Handler+0x74>)
  40189c:	681b      	ldr	r3, [r3, #0]

		overflow_count += 1;
  40189e:	4a1c      	ldr	r2, [pc, #112]	; (401910 <TC0_Handler+0x78>)
  4018a0:	8813      	ldrh	r3, [r2, #0]
  4018a2:	3301      	adds	r3, #1
  4018a4:	b29b      	uxth	r3, r3
  4018a6:	8013      	strh	r3, [r2, #0]

		//base this off a ADC pot results
		if (overflow_count == note_length){
  4018a8:	4a1a      	ldr	r2, [pc, #104]	; (401914 <TC0_Handler+0x7c>)
  4018aa:	8812      	ldrh	r2, [r2, #0]
  4018ac:	429a      	cmp	r2, r3
  4018ae:	d101      	bne.n	4018b4 <TC0_Handler+0x1c>
			DAC_write_gate_off();
  4018b0:	4b19      	ldr	r3, [pc, #100]	; (401918 <TC0_Handler+0x80>)
  4018b2:	4798      	blx	r3
		}
	 }

	 if(overflow_count >= 10000) {
  4018b4:	4b16      	ldr	r3, [pc, #88]	; (401910 <TC0_Handler+0x78>)
  4018b6:	881a      	ldrh	r2, [r3, #0]
  4018b8:	f242 730f 	movw	r3, #9999	; 0x270f
  4018bc:	429a      	cmp	r2, r3
  4018be:	d924      	bls.n	40190a <TC0_Handler+0x72>

		SPI_led_init();
  4018c0:	4b16      	ldr	r3, [pc, #88]	; (40191c <TC0_Handler+0x84>)
  4018c2:	4798      	blx	r3
		leds_update_cursor(curr_step);
  4018c4:	4c16      	ldr	r4, [pc, #88]	; (401920 <TC0_Handler+0x88>)
  4018c6:	7820      	ldrb	r0, [r4, #0]
  4018c8:	4b16      	ldr	r3, [pc, #88]	; (401924 <TC0_Handler+0x8c>)
  4018ca:	4798      	blx	r3

 		DAC_write_cv(notes_get(curr_step));
  4018cc:	7820      	ldrb	r0, [r4, #0]
  4018ce:	4b16      	ldr	r3, [pc, #88]	; (401928 <TC0_Handler+0x90>)
  4018d0:	4798      	blx	r3
  4018d2:	4b16      	ldr	r3, [pc, #88]	; (40192c <TC0_Handler+0x94>)
  4018d4:	4798      	blx	r3
		if (leds_status_get(curr_step) == 1){
  4018d6:	7820      	ldrb	r0, [r4, #0]
  4018d8:	4b15      	ldr	r3, [pc, #84]	; (401930 <TC0_Handler+0x98>)
  4018da:	4798      	blx	r3
  4018dc:	2801      	cmp	r0, #1
  4018de:	d101      	bne.n	4018e4 <TC0_Handler+0x4c>
			DAC_write_gate_on();
  4018e0:	4b14      	ldr	r3, [pc, #80]	; (401934 <TC0_Handler+0x9c>)
  4018e2:	4798      	blx	r3
		}

		REG_ADC_CR |= ADC_CR_START;
  4018e4:	4a14      	ldr	r2, [pc, #80]	; (401938 <TC0_Handler+0xa0>)
  4018e6:	6813      	ldr	r3, [r2, #0]
  4018e8:	f043 0302 	orr.w	r3, r3, #2
  4018ec:	6013      	str	r3, [r2, #0]
		
		if (curr_step == 15){
  4018ee:	4b0c      	ldr	r3, [pc, #48]	; (401920 <TC0_Handler+0x88>)
  4018f0:	781b      	ldrb	r3, [r3, #0]
  4018f2:	2b0f      	cmp	r3, #15
  4018f4:	d103      	bne.n	4018fe <TC0_Handler+0x66>
			curr_step = 0;
  4018f6:	2200      	movs	r2, #0
  4018f8:	4b09      	ldr	r3, [pc, #36]	; (401920 <TC0_Handler+0x88>)
  4018fa:	701a      	strb	r2, [r3, #0]
  4018fc:	e002      	b.n	401904 <TC0_Handler+0x6c>
		}
		else{
			curr_step++;
  4018fe:	3301      	adds	r3, #1
  401900:	4a07      	ldr	r2, [pc, #28]	; (401920 <TC0_Handler+0x88>)
  401902:	7013      	strb	r3, [r2, #0]
		}

		overflow_count = 0;
  401904:	2200      	movs	r2, #0
  401906:	4b02      	ldr	r3, [pc, #8]	; (401910 <TC0_Handler+0x78>)
  401908:	801a      	strh	r2, [r3, #0]
  40190a:	bd10      	pop	{r4, pc}
  40190c:	40010020 	.word	0x40010020
  401910:	20000722 	.word	0x20000722
  401914:	20000726 	.word	0x20000726
  401918:	00400401 	.word	0x00400401
  40191c:	004016b9 	.word	0x004016b9
  401920:	20000724 	.word	0x20000724
  401924:	00401281 	.word	0x00401281
  401928:	004017cd 	.word	0x004017cd
  40192c:	00400329 	.word	0x00400329
  401930:	00400eb1 	.word	0x00400eb1
  401934:	004003a5 	.word	0x004003a5
  401938:	40038000 	.word	0x40038000

0040193c <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
  40193c:	4770      	bx	lr
  40193e:	bf00      	nop

00401940 <sysclk_init>:

	SystemCoreClockUpdate();
}

void sysclk_init(void)
{
  401940:	b510      	push	{r4, lr}
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  401942:	480e      	ldr	r0, [pc, #56]	; (40197c <sysclk_init+0x3c>)
  401944:	4b0e      	ldr	r3, [pc, #56]	; (401980 <sysclk_init+0x40>)
  401946:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
		break;

	case OSC_MAINCK_8M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
  401948:	2010      	movs	r0, #16
  40194a:	4b0e      	ldr	r3, [pc, #56]	; (401984 <sysclk_init+0x44>)
  40194c:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  40194e:	4c0e      	ldr	r4, [pc, #56]	; (401988 <sysclk_init+0x48>)
  401950:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  401952:	2800      	cmp	r0, #0
  401954:	d0fc      	beq.n	401950 <sysclk_init+0x10>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  401956:	4b0d      	ldr	r3, [pc, #52]	; (40198c <sysclk_init+0x4c>)
  401958:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  40195a:	4a0d      	ldr	r2, [pc, #52]	; (401990 <sysclk_init+0x50>)
  40195c:	4b0d      	ldr	r3, [pc, #52]	; (401994 <sysclk_init+0x54>)
  40195e:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
  401960:	4c0d      	ldr	r4, [pc, #52]	; (401998 <sysclk_init+0x58>)
  401962:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  401964:	2800      	cmp	r0, #0
  401966:	d0fc      	beq.n	401962 <sysclk_init+0x22>

		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  401968:	2010      	movs	r0, #16
  40196a:	4b0c      	ldr	r3, [pc, #48]	; (40199c <sysclk_init+0x5c>)
  40196c:	4798      	blx	r3
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  40196e:	4b0c      	ldr	r3, [pc, #48]	; (4019a0 <sysclk_init+0x60>)
  401970:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  401972:	4802      	ldr	r0, [pc, #8]	; (40197c <sysclk_init+0x3c>)
  401974:	4b02      	ldr	r3, [pc, #8]	; (401980 <sysclk_init+0x40>)
  401976:	4798      	blx	r3
  401978:	bd10      	pop	{r4, pc}
  40197a:	bf00      	nop
  40197c:	05f5e100 	.word	0x05f5e100
  401980:	00401c35 	.word	0x00401c35
  401984:	00401a0d 	.word	0x00401a0d
  401988:	00401a59 	.word	0x00401a59
  40198c:	00401a69 	.word	0x00401a69
  401990:	20183f01 	.word	0x20183f01
  401994:	400e0400 	.word	0x400e0400
  401998:	00401a79 	.word	0x00401a79
  40199c:	004019a5 	.word	0x004019a5
  4019a0:	00401b25 	.word	0x00401b25

004019a4 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  4019a4:	4a18      	ldr	r2, [pc, #96]	; (401a08 <pmc_switch_mck_to_pllack+0x64>)
  4019a6:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4019a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  4019ac:	4318      	orrs	r0, r3
  4019ae:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4019b0:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4019b2:	f013 0f08 	tst.w	r3, #8
  4019b6:	d003      	beq.n	4019c0 <pmc_switch_mck_to_pllack+0x1c>
  4019b8:	e009      	b.n	4019ce <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4019ba:	3b01      	subs	r3, #1
  4019bc:	d103      	bne.n	4019c6 <pmc_switch_mck_to_pllack+0x22>
  4019be:	e01e      	b.n	4019fe <pmc_switch_mck_to_pllack+0x5a>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4019c0:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4019c4:	4910      	ldr	r1, [pc, #64]	; (401a08 <pmc_switch_mck_to_pllack+0x64>)
  4019c6:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4019c8:	f012 0f08 	tst.w	r2, #8
  4019cc:	d0f5      	beq.n	4019ba <pmc_switch_mck_to_pllack+0x16>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  4019ce:	4a0e      	ldr	r2, [pc, #56]	; (401a08 <pmc_switch_mck_to_pllack+0x64>)
  4019d0:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4019d2:	f023 0303 	bic.w	r3, r3, #3
  4019d6:	f043 0302 	orr.w	r3, r3, #2
  4019da:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4019dc:	6e90      	ldr	r0, [r2, #104]	; 0x68
  4019de:	f010 0008 	ands.w	r0, r0, #8
  4019e2:	d004      	beq.n	4019ee <pmc_switch_mck_to_pllack+0x4a>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
  4019e4:	2000      	movs	r0, #0
  4019e6:	4770      	bx	lr
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
  4019e8:	3b01      	subs	r3, #1
  4019ea:	d103      	bne.n	4019f4 <pmc_switch_mck_to_pllack+0x50>
  4019ec:	e009      	b.n	401a02 <pmc_switch_mck_to_pllack+0x5e>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4019ee:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4019f2:	4905      	ldr	r1, [pc, #20]	; (401a08 <pmc_switch_mck_to_pllack+0x64>)
  4019f4:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4019f6:	f012 0f08 	tst.w	r2, #8
  4019fa:	d0f5      	beq.n	4019e8 <pmc_switch_mck_to_pllack+0x44>
  4019fc:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  4019fe:	2001      	movs	r0, #1
  401a00:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  401a02:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  401a04:	4770      	bx	lr
  401a06:	bf00      	nop
  401a08:	400e0400 	.word	0x400e0400

00401a0c <pmc_switch_mainck_to_fastrc>:
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
  401a0c:	4b11      	ldr	r3, [pc, #68]	; (401a54 <pmc_switch_mainck_to_fastrc+0x48>)
  401a0e:	6a1a      	ldr	r2, [r3, #32]
  401a10:	f442 125c 	orr.w	r2, r2, #3604480	; 0x370000
  401a14:	f042 0208 	orr.w	r2, r2, #8
  401a18:	621a      	str	r2, [r3, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  401a1a:	461a      	mov	r2, r3
  401a1c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401a1e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
  401a22:	d0fb      	beq.n	401a1c <pmc_switch_mainck_to_fastrc+0x10>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  401a24:	4a0b      	ldr	r2, [pc, #44]	; (401a54 <pmc_switch_mainck_to_fastrc+0x48>)
  401a26:	6a13      	ldr	r3, [r2, #32]
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
  401a28:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  401a2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  401a30:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  401a34:	4303      	orrs	r3, r0

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  401a36:	6213      	str	r3, [r2, #32]
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  401a38:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401a3a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
  401a3e:	d0fb      	beq.n	401a38 <pmc_switch_mainck_to_fastrc+0x2c>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  401a40:	4a04      	ldr	r2, [pc, #16]	; (401a54 <pmc_switch_mainck_to_fastrc+0x48>)
  401a42:	6a13      	ldr	r3, [r2, #32]
  401a44:	f023 739b 	bic.w	r3, r3, #20316160	; 0x1360000
  401a48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  401a4c:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  401a50:	6213      	str	r3, [r2, #32]
  401a52:	4770      	bx	lr
  401a54:	400e0400 	.word	0x400e0400

00401a58 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  401a58:	4b02      	ldr	r3, [pc, #8]	; (401a64 <pmc_osc_is_ready_mainck+0xc>)
  401a5a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  401a5c:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  401a60:	4770      	bx	lr
  401a62:	bf00      	nop
  401a64:	400e0400 	.word	0x400e0400

00401a68 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  401a68:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  401a6c:	4b01      	ldr	r3, [pc, #4]	; (401a74 <pmc_disable_pllack+0xc>)
  401a6e:	629a      	str	r2, [r3, #40]	; 0x28
  401a70:	4770      	bx	lr
  401a72:	bf00      	nop
  401a74:	400e0400 	.word	0x400e0400

00401a78 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  401a78:	4b02      	ldr	r3, [pc, #8]	; (401a84 <pmc_is_locked_pllack+0xc>)
  401a7a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  401a7c:	f000 0002 	and.w	r0, r0, #2
  401a80:	4770      	bx	lr
  401a82:	bf00      	nop
  401a84:	400e0400 	.word	0x400e0400

00401a88 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  401a88:	e7fe      	b.n	401a88 <Dummy_Handler>
  401a8a:	bf00      	nop

00401a8c <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  401a8c:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
  401a8e:	4b19      	ldr	r3, [pc, #100]	; (401af4 <Reset_Handler+0x68>)
  401a90:	4a19      	ldr	r2, [pc, #100]	; (401af8 <Reset_Handler+0x6c>)
  401a92:	429a      	cmp	r2, r3
  401a94:	d003      	beq.n	401a9e <Reset_Handler+0x12>
		for (; pDest < &_erelocate;) {
  401a96:	4b19      	ldr	r3, [pc, #100]	; (401afc <Reset_Handler+0x70>)
  401a98:	4a16      	ldr	r2, [pc, #88]	; (401af4 <Reset_Handler+0x68>)
  401a9a:	429a      	cmp	r2, r3
  401a9c:	d304      	bcc.n	401aa8 <Reset_Handler+0x1c>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  401a9e:	4b18      	ldr	r3, [pc, #96]	; (401b00 <Reset_Handler+0x74>)
  401aa0:	4a18      	ldr	r2, [pc, #96]	; (401b04 <Reset_Handler+0x78>)
  401aa2:	429a      	cmp	r2, r3
  401aa4:	d30f      	bcc.n	401ac6 <Reset_Handler+0x3a>
  401aa6:	e01a      	b.n	401ade <Reset_Handler+0x52>
  401aa8:	4912      	ldr	r1, [pc, #72]	; (401af4 <Reset_Handler+0x68>)
  401aaa:	4b17      	ldr	r3, [pc, #92]	; (401b08 <Reset_Handler+0x7c>)
  401aac:	1a5b      	subs	r3, r3, r1
  401aae:	f023 0303 	bic.w	r3, r3, #3
  401ab2:	3304      	adds	r3, #4
  401ab4:	4a10      	ldr	r2, [pc, #64]	; (401af8 <Reset_Handler+0x6c>)
  401ab6:	4413      	add	r3, r2
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
			*pDest++ = *pSrc++;
  401ab8:	f852 0b04 	ldr.w	r0, [r2], #4
  401abc:	f841 0b04 	str.w	r0, [r1], #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
  401ac0:	429a      	cmp	r2, r3
  401ac2:	d1f9      	bne.n	401ab8 <Reset_Handler+0x2c>
  401ac4:	e7eb      	b.n	401a9e <Reset_Handler+0x12>
  401ac6:	4b11      	ldr	r3, [pc, #68]	; (401b0c <Reset_Handler+0x80>)
  401ac8:	4a11      	ldr	r2, [pc, #68]	; (401b10 <Reset_Handler+0x84>)
  401aca:	1ad2      	subs	r2, r2, r3
  401acc:	f022 0203 	bic.w	r2, r2, #3
  401ad0:	441a      	add	r2, r3
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  401ad2:	3b04      	subs	r3, #4
		*pDest++ = 0;
  401ad4:	2100      	movs	r1, #0
  401ad6:	f843 1b04 	str.w	r1, [r3], #4
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  401ada:	4293      	cmp	r3, r2
  401adc:	d1fb      	bne.n	401ad6 <Reset_Handler+0x4a>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  401ade:	4a0d      	ldr	r2, [pc, #52]	; (401b14 <Reset_Handler+0x88>)
  401ae0:	4b0d      	ldr	r3, [pc, #52]	; (401b18 <Reset_Handler+0x8c>)
  401ae2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  401ae6:	6093      	str	r3, [r2, #8]

	/* Initialize the C library */
	__libc_init_array();
  401ae8:	4b0c      	ldr	r3, [pc, #48]	; (401b1c <Reset_Handler+0x90>)
  401aea:	4798      	blx	r3

	/* Branch to main function */
	main();
  401aec:	4b0c      	ldr	r3, [pc, #48]	; (401b20 <Reset_Handler+0x94>)
  401aee:	4798      	blx	r3
  401af0:	e7fe      	b.n	401af0 <Reset_Handler+0x64>
  401af2:	bf00      	nop
  401af4:	20000000 	.word	0x20000000
  401af8:	00402584 	.word	0x00402584
  401afc:	20000660 	.word	0x20000660
  401b00:	20000730 	.word	0x20000730
  401b04:	20000660 	.word	0x20000660
  401b08:	2000065f 	.word	0x2000065f
  401b0c:	20000664 	.word	0x20000664
  401b10:	20000733 	.word	0x20000733
  401b14:	e000ed00 	.word	0xe000ed00
  401b18:	00400000 	.word	0x00400000
  401b1c:	00402415 	.word	0x00402415
  401b20:	00401e15 	.word	0x00401e15

00401b24 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) {
  401b24:	4b3c      	ldr	r3, [pc, #240]	; (401c18 <SystemCoreClockUpdate+0xf4>)
  401b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401b28:	f003 0303 	and.w	r3, r3, #3
  401b2c:	2b01      	cmp	r3, #1
  401b2e:	d00f      	beq.n	401b50 <SystemCoreClockUpdate+0x2c>
  401b30:	b113      	cbz	r3, 401b38 <SystemCoreClockUpdate+0x14>
  401b32:	2b02      	cmp	r3, #2
  401b34:	d029      	beq.n	401b8a <SystemCoreClockUpdate+0x66>
  401b36:	e057      	b.n	401be8 <SystemCoreClockUpdate+0xc4>
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
  401b38:	4b38      	ldr	r3, [pc, #224]	; (401c1c <SystemCoreClockUpdate+0xf8>)
  401b3a:	695b      	ldr	r3, [r3, #20]
  401b3c:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
  401b40:	bf14      	ite	ne
  401b42:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
  401b46:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  401b4a:	4b35      	ldr	r3, [pc, #212]	; (401c20 <SystemCoreClockUpdate+0xfc>)
  401b4c:	601a      	str	r2, [r3, #0]
  401b4e:	e04b      	b.n	401be8 <SystemCoreClockUpdate+0xc4>
		}
		break;

	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
  401b50:	4b31      	ldr	r3, [pc, #196]	; (401c18 <SystemCoreClockUpdate+0xf4>)
  401b52:	6a1b      	ldr	r3, [r3, #32]
  401b54:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  401b58:	d003      	beq.n	401b62 <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
  401b5a:	4a32      	ldr	r2, [pc, #200]	; (401c24 <SystemCoreClockUpdate+0x100>)
  401b5c:	4b30      	ldr	r3, [pc, #192]	; (401c20 <SystemCoreClockUpdate+0xfc>)
  401b5e:	601a      	str	r2, [r3, #0]
  401b60:	e042      	b.n	401be8 <SystemCoreClockUpdate+0xc4>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401b62:	4a31      	ldr	r2, [pc, #196]	; (401c28 <SystemCoreClockUpdate+0x104>)
  401b64:	4b2e      	ldr	r3, [pc, #184]	; (401c20 <SystemCoreClockUpdate+0xfc>)
  401b66:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
  401b68:	4b2b      	ldr	r3, [pc, #172]	; (401c18 <SystemCoreClockUpdate+0xf4>)
  401b6a:	6a1b      	ldr	r3, [r3, #32]
  401b6c:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401b70:	2b10      	cmp	r3, #16
  401b72:	d002      	beq.n	401b7a <SystemCoreClockUpdate+0x56>
  401b74:	2b20      	cmp	r3, #32
  401b76:	d004      	beq.n	401b82 <SystemCoreClockUpdate+0x5e>
  401b78:	e036      	b.n	401be8 <SystemCoreClockUpdate+0xc4>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;

			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
  401b7a:	4a2c      	ldr	r2, [pc, #176]	; (401c2c <SystemCoreClockUpdate+0x108>)
  401b7c:	4b28      	ldr	r3, [pc, #160]	; (401c20 <SystemCoreClockUpdate+0xfc>)
  401b7e:	601a      	str	r2, [r3, #0]
				break;
  401b80:	e032      	b.n	401be8 <SystemCoreClockUpdate+0xc4>

			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
  401b82:	4a28      	ldr	r2, [pc, #160]	; (401c24 <SystemCoreClockUpdate+0x100>)
  401b84:	4b26      	ldr	r3, [pc, #152]	; (401c20 <SystemCoreClockUpdate+0xfc>)
  401b86:	601a      	str	r2, [r3, #0]
				break;
  401b88:	e02e      	b.n	401be8 <SystemCoreClockUpdate+0xc4>
			}
		}
		break;

	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
  401b8a:	4b23      	ldr	r3, [pc, #140]	; (401c18 <SystemCoreClockUpdate+0xf4>)
  401b8c:	6a1b      	ldr	r3, [r3, #32]
  401b8e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  401b92:	d003      	beq.n	401b9c <SystemCoreClockUpdate+0x78>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
  401b94:	4a23      	ldr	r2, [pc, #140]	; (401c24 <SystemCoreClockUpdate+0x100>)
  401b96:	4b22      	ldr	r3, [pc, #136]	; (401c20 <SystemCoreClockUpdate+0xfc>)
  401b98:	601a      	str	r2, [r3, #0]
  401b9a:	e012      	b.n	401bc2 <SystemCoreClockUpdate+0x9e>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401b9c:	4a22      	ldr	r2, [pc, #136]	; (401c28 <SystemCoreClockUpdate+0x104>)
  401b9e:	4b20      	ldr	r3, [pc, #128]	; (401c20 <SystemCoreClockUpdate+0xfc>)
  401ba0:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
  401ba2:	4b1d      	ldr	r3, [pc, #116]	; (401c18 <SystemCoreClockUpdate+0xf4>)
  401ba4:	6a1b      	ldr	r3, [r3, #32]
  401ba6:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401baa:	2b10      	cmp	r3, #16
  401bac:	d002      	beq.n	401bb4 <SystemCoreClockUpdate+0x90>
  401bae:	2b20      	cmp	r3, #32
  401bb0:	d004      	beq.n	401bbc <SystemCoreClockUpdate+0x98>
  401bb2:	e006      	b.n	401bc2 <SystemCoreClockUpdate+0x9e>
				/* So the 4MHz RC selection is forbidden */
				Assert(false);
				break;

			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
  401bb4:	4a1d      	ldr	r2, [pc, #116]	; (401c2c <SystemCoreClockUpdate+0x108>)
  401bb6:	4b1a      	ldr	r3, [pc, #104]	; (401c20 <SystemCoreClockUpdate+0xfc>)
  401bb8:	601a      	str	r2, [r3, #0]
				break;
  401bba:	e002      	b.n	401bc2 <SystemCoreClockUpdate+0x9e>

			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
  401bbc:	4a19      	ldr	r2, [pc, #100]	; (401c24 <SystemCoreClockUpdate+0x100>)
  401bbe:	4b18      	ldr	r3, [pc, #96]	; (401c20 <SystemCoreClockUpdate+0xfc>)
  401bc0:	601a      	str	r2, [r3, #0]
			default:
				break;
			}
		}

		if ((uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
  401bc2:	4b15      	ldr	r3, [pc, #84]	; (401c18 <SystemCoreClockUpdate+0xf4>)
  401bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401bc6:	f003 0303 	and.w	r3, r3, #3
  401bca:	2b02      	cmp	r3, #2
  401bcc:	d10c      	bne.n	401be8 <SystemCoreClockUpdate+0xc4>
				PMC_MCKR_CSS_PLLA_CLK) {
			SystemCoreClock *=
					((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  401bce:	4a12      	ldr	r2, [pc, #72]	; (401c18 <SystemCoreClockUpdate+0xf4>)
  401bd0:	6a93      	ldr	r3, [r2, #40]	; 0x28
					>> CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  401bd2:	6a92      	ldr	r2, [r2, #40]	; 0x28
  401bd4:	4812      	ldr	r0, [pc, #72]	; (401c20 <SystemCoreClockUpdate+0xfc>)
  401bd6:	f3c3 410a 	ubfx	r1, r3, #16, #11
  401bda:	6803      	ldr	r3, [r0, #0]
  401bdc:	fb01 3303 	mla	r3, r1, r3, r3
  401be0:	b2d2      	uxtb	r2, r2
  401be2:	fbb3 f3f2 	udiv	r3, r3, r2
  401be6:	6003      	str	r3, [r0, #0]

	default:
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
  401be8:	4b0b      	ldr	r3, [pc, #44]	; (401c18 <SystemCoreClockUpdate+0xf4>)
  401bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401bec:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401bf0:	2b70      	cmp	r3, #112	; 0x70
  401bf2:	d107      	bne.n	401c04 <SystemCoreClockUpdate+0xe0>
		SystemCoreClock /= 3U;
  401bf4:	4a0a      	ldr	r2, [pc, #40]	; (401c20 <SystemCoreClockUpdate+0xfc>)
  401bf6:	6813      	ldr	r3, [r2, #0]
  401bf8:	490d      	ldr	r1, [pc, #52]	; (401c30 <SystemCoreClockUpdate+0x10c>)
  401bfa:	fba1 1303 	umull	r1, r3, r1, r3
  401bfe:	085b      	lsrs	r3, r3, #1
  401c00:	6013      	str	r3, [r2, #0]
  401c02:	4770      	bx	lr
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >>
  401c04:	4b04      	ldr	r3, [pc, #16]	; (401c18 <SystemCoreClockUpdate+0xf4>)
  401c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401c08:	4905      	ldr	r1, [pc, #20]	; (401c20 <SystemCoreClockUpdate+0xfc>)
  401c0a:	f3c3 1202 	ubfx	r2, r3, #4, #3
  401c0e:	680b      	ldr	r3, [r1, #0]
  401c10:	40d3      	lsrs	r3, r2
  401c12:	600b      	str	r3, [r1, #0]
  401c14:	4770      	bx	lr
  401c16:	bf00      	nop
  401c18:	400e0400 	.word	0x400e0400
  401c1c:	400e1410 	.word	0x400e1410
  401c20:	20000234 	.word	0x20000234
  401c24:	00b71b00 	.word	0x00b71b00
  401c28:	003d0900 	.word	0x003d0900
  401c2c:	007a1200 	.word	0x007a1200
  401c30:	aaaaaaab 	.word	0xaaaaaaab

00401c34 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
  401c34:	4b0f      	ldr	r3, [pc, #60]	; (401c74 <system_init_flash+0x40>)
  401c36:	4298      	cmp	r0, r3
  401c38:	d804      	bhi.n	401c44 <system_init_flash+0x10>
		EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  401c3a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  401c3e:	4b0e      	ldr	r3, [pc, #56]	; (401c78 <system_init_flash+0x44>)
  401c40:	601a      	str	r2, [r3, #0]
  401c42:	4770      	bx	lr
	} else {
		if (ul_clk < CHIP_FREQ_FWS_1) {
  401c44:	4b0d      	ldr	r3, [pc, #52]	; (401c7c <system_init_flash+0x48>)
  401c46:	4298      	cmp	r0, r3
  401c48:	d803      	bhi.n	401c52 <system_init_flash+0x1e>
			EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  401c4a:	4a0d      	ldr	r2, [pc, #52]	; (401c80 <system_init_flash+0x4c>)
  401c4c:	4b0a      	ldr	r3, [pc, #40]	; (401c78 <system_init_flash+0x44>)
  401c4e:	601a      	str	r2, [r3, #0]
  401c50:	4770      	bx	lr
		} else {
			if (ul_clk < CHIP_FREQ_FWS_2) {
  401c52:	4b0c      	ldr	r3, [pc, #48]	; (401c84 <system_init_flash+0x50>)
  401c54:	4298      	cmp	r0, r3
  401c56:	d803      	bhi.n	401c60 <system_init_flash+0x2c>
				EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  401c58:	4a0b      	ldr	r2, [pc, #44]	; (401c88 <system_init_flash+0x54>)
  401c5a:	4b07      	ldr	r3, [pc, #28]	; (401c78 <system_init_flash+0x44>)
  401c5c:	601a      	str	r2, [r3, #0]
  401c5e:	4770      	bx	lr
			} else {
				if (ul_clk < CHIP_FREQ_FWS_3) {
  401c60:	4b0a      	ldr	r3, [pc, #40]	; (401c8c <system_init_flash+0x58>)
  401c62:	4298      	cmp	r0, r3
					EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  401c64:	bf94      	ite	ls
  401c66:	4a0a      	ldrls	r2, [pc, #40]	; (401c90 <system_init_flash+0x5c>)
				} else {
					EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  401c68:	f04f 2204 	movhi.w	r2, #67109888	; 0x4000400
  401c6c:	4b02      	ldr	r3, [pc, #8]	; (401c78 <system_init_flash+0x44>)
  401c6e:	601a      	str	r2, [r3, #0]
  401c70:	4770      	bx	lr
  401c72:	bf00      	nop
  401c74:	01312cff 	.word	0x01312cff
  401c78:	400e0a00 	.word	0x400e0a00
  401c7c:	026259ff 	.word	0x026259ff
  401c80:	04000100 	.word	0x04000100
  401c84:	039386ff 	.word	0x039386ff
  401c88:	04000200 	.word	0x04000200
  401c8c:	04c4b3ff 	.word	0x04c4b3ff
  401c90:	04000300 	.word	0x04000300

00401c94 <init_IO_int>:
 #define MAX7314_slaveAddress (uint8_t) 0b0100000 //7bit address when AD0 = GND

 void init_IO_int(){

	//enable clock for PIOB
	REG_PMC_PCER0 |= PMC_PCER0_PID12;
  401c94:	4a1a      	ldr	r2, [pc, #104]	; (401d00 <init_IO_int+0x6c>)
  401c96:	6813      	ldr	r3, [r2, #0]
  401c98:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  401c9c:	6013      	str	r3, [r2, #0]

	//Set up PB10 as Button IO Expander Input
	REG_PIOB_PER |= PIO_PER_P10; //enable PIO controller
  401c9e:	f502 623f 	add.w	r2, r2, #3056	; 0xbf0
  401ca2:	6813      	ldr	r3, [r2, #0]
  401ca4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
  401ca8:	6013      	str	r3, [r2, #0]
	REG_PIOB_ODR |= PIO_ODR_P10; //disable output
  401caa:	3214      	adds	r2, #20
  401cac:	6813      	ldr	r3, [r2, #0]
  401cae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
  401cb2:	6013      	str	r3, [r2, #0]
	REG_PIOB_PPDDR |= PIO_PPDDR_P10; //disable pull-down resistor
  401cb4:	327c      	adds	r2, #124	; 0x7c
  401cb6:	6813      	ldr	r3, [r2, #0]
  401cb8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
  401cbc:	6013      	str	r3, [r2, #0]
	REG_PIOB_PUER |= PIO_PUER_P10;	//enable pull-up resistor
  401cbe:	3a2c      	subs	r2, #44	; 0x2c
  401cc0:	6813      	ldr	r3, [r2, #0]
  401cc2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
  401cc6:	6013      	str	r3, [r2, #0]
	REG_PIOB_IFSCER |= PIO_IFSCER_P10; //turn on slow clock debounce
  401cc8:	3220      	adds	r2, #32
  401cca:	6813      	ldr	r3, [r2, #0]
  401ccc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
  401cd0:	6013      	str	r3, [r2, #0]
	REG_PIOB_IFER |= PIO_IFER_P10;	//start debounce filter
  401cd2:	3a64      	subs	r2, #100	; 0x64
  401cd4:	6813      	ldr	r3, [r2, #0]
  401cd6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
  401cda:	6013      	str	r3, [r2, #0]

	uint32_t flag_clear = REG_PIOB_ISR;	//clear left over interrupt flags
  401cdc:	4b09      	ldr	r3, [pc, #36]	; (401d04 <init_IO_int+0x70>)
  401cde:	681b      	ldr	r3, [r3, #0]

	//Enable interrupts for PB10
	REG_PIOB_IER |= PIO_IER_P10;			//enable falling edge change interrupt
  401ce0:	3220      	adds	r2, #32
  401ce2:	6813      	ldr	r3, [r2, #0]
  401ce4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
  401ce8:	6013      	str	r3, [r2, #0]
	REG_PIOB_FELLSR |= PIO_FELLSR_P10;
  401cea:	3290      	adds	r2, #144	; 0x90
  401cec:	6813      	ldr	r3, [r2, #0]
  401cee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
  401cf2:	6013      	str	r3, [r2, #0]
  401cf4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  401cf8:	4b03      	ldr	r3, [pc, #12]	; (401d08 <init_IO_int+0x74>)
  401cfa:	601a      	str	r2, [r3, #0]
  401cfc:	4770      	bx	lr
  401cfe:	bf00      	nop
  401d00:	400e0410 	.word	0x400e0410
  401d04:	400e104c 	.word	0x400e104c
  401d08:	e000e100 	.word	0xe000e100

00401d0c <i2c_init>:

 }

 void i2c_init(){

	REG_TWI0_CR = TWI_CR_SWRST;
  401d0c:	4b12      	ldr	r3, [pc, #72]	; (401d58 <i2c_init+0x4c>)
  401d0e:	2280      	movs	r2, #128	; 0x80
  401d10:	601a      	str	r2, [r3, #0]

	//enable peripheral clock for i2c using TWI0
	REG_PMC_PCER0 |= PMC_PCER0_PID19;
  401d12:	4912      	ldr	r1, [pc, #72]	; (401d5c <i2c_init+0x50>)
  401d14:	680a      	ldr	r2, [r1, #0]
  401d16:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
  401d1a:	600a      	str	r2, [r1, #0]

	//disable GPIO control of i2c pins
	REG_PIOA_PDR |= PIO_PDR_P3;
  401d1c:	4a10      	ldr	r2, [pc, #64]	; (401d60 <i2c_init+0x54>)
  401d1e:	6811      	ldr	r1, [r2, #0]
  401d20:	f041 0108 	orr.w	r1, r1, #8
  401d24:	6011      	str	r1, [r2, #0]
	REG_PIOA_PDR |= PIO_PDR_P4;
  401d26:	6811      	ldr	r1, [r2, #0]
  401d28:	f041 0110 	orr.w	r1, r1, #16
  401d2c:	6011      	str	r1, [r2, #0]

	// tlow = ((CLDIV * 2^CKDIV) + 4) * Tper
	// thigh = ((CHDIV * 2^CKDIV) + 4) * Tper
	// thigh = tlow => 400kHz (supposedly...)
	//set TWI0 clock to 400kHz (supported by IO expander)
	REG_TWI0_CWGR |= TWI_CWGR_CLDIV(121);
  401d2e:	f5a2 2248 	sub.w	r2, r2, #819200	; 0xc8000
  401d32:	f6a2 52f4 	subw	r2, r2, #3572	; 0xdf4
  401d36:	6811      	ldr	r1, [r2, #0]
  401d38:	f041 0179 	orr.w	r1, r1, #121	; 0x79
  401d3c:	6011      	str	r1, [r2, #0]
	REG_TWI0_CWGR |= TWI_CWGR_CHDIV(121);
  401d3e:	6811      	ldr	r1, [r2, #0]
  401d40:	f441 41f2 	orr.w	r1, r1, #30976	; 0x7900
  401d44:	6011      	str	r1, [r2, #0]

	//disable slave mode & enable master mode
	REG_TWI0_CR |= TWI_CR_SVDIS;
  401d46:	681a      	ldr	r2, [r3, #0]
  401d48:	f042 0220 	orr.w	r2, r2, #32
  401d4c:	601a      	str	r2, [r3, #0]
	REG_TWI0_CR |= TWI_CR_MSEN;
  401d4e:	681a      	ldr	r2, [r3, #0]
  401d50:	f042 0204 	orr.w	r2, r2, #4
  401d54:	601a      	str	r2, [r3, #0]
  401d56:	4770      	bx	lr
  401d58:	40018000 	.word	0x40018000
  401d5c:	400e0410 	.word	0x400e0410
  401d60:	400e0e04 	.word	0x400e0e04

00401d64 <config_MAX7314>:
		
	 }

 }

 void config_MAX7314(){
  401d64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401d68:	b088      	sub	sp, #32
	twi_packet_t packet_tx;
	uint8_t config_data[] = {MAX7314_configRegister, 0x08};
  401d6a:	4c14      	ldr	r4, [pc, #80]	; (401dbc <config_MAX7314+0x58>)
  401d6c:	8823      	ldrh	r3, [r4, #0]
  401d6e:	f8ad 3008 	strh.w	r3, [sp, #8]

	/* Configure the Chip Config Register */
	packet_tx.chip        = 0b0100000;
  401d72:	f04f 0820 	mov.w	r8, #32
  401d76:	f88d 801c 	strb.w	r8, [sp, #28]
	packet_tx.addr_length = 0;
  401d7a:	2700      	movs	r7, #0
  401d7c:	9704      	str	r7, [sp, #16]
	packet_tx.buffer      = (uint8_t *) config_data;
  401d7e:	ab02      	add	r3, sp, #8
  401d80:	9305      	str	r3, [sp, #20]
	packet_tx.length      = 2;
  401d82:	2302      	movs	r3, #2
  401d84:	9306      	str	r3, [sp, #24]
	twi_master_write(BOARD_BASE_TWI, &packet_tx);
  401d86:	4e0e      	ldr	r6, [pc, #56]	; (401dc0 <config_MAX7314+0x5c>)
  401d88:	a903      	add	r1, sp, #12
  401d8a:	4630      	mov	r0, r6
  401d8c:	4d0d      	ldr	r5, [pc, #52]	; (401dc4 <config_MAX7314+0x60>)
  401d8e:	47a8      	blx	r5


	uint8_t port_data_write[] = {MAX7314_portConfigRegisterLow, 0xFF, 0xFF};
  401d90:	aa01      	add	r2, sp, #4
  401d92:	4623      	mov	r3, r4
  401d94:	f833 1f04 	ldrh.w	r1, [r3, #4]!
  401d98:	789b      	ldrb	r3, [r3, #2]
  401d9a:	f8ad 1004 	strh.w	r1, [sp, #4]
  401d9e:	f88d 3006 	strb.w	r3, [sp, #6]

	/* Configure the Chip Ports as Inputs */
	packet_tx.chip        = 0b0100000;
  401da2:	f88d 801c 	strb.w	r8, [sp, #28]
	packet_tx.addr_length = 0;
  401da6:	9704      	str	r7, [sp, #16]
	packet_tx.buffer      = (uint8_t *) port_data_write;
  401da8:	9205      	str	r2, [sp, #20]
	packet_tx.length      = 3;
  401daa:	2303      	movs	r3, #3
  401dac:	9306      	str	r3, [sp, #24]
	twi_master_write(BOARD_BASE_TWI, &packet_tx);
  401dae:	a903      	add	r1, sp, #12
  401db0:	4630      	mov	r0, r6
  401db2:	47a8      	blx	r5
 }
  401db4:	b008      	add	sp, #32
  401db6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401dba:	bf00      	nop
  401dbc:	00402550 	.word	0x00402550
  401dc0:	40018000 	.word	0x40018000
  401dc4:	004002c1 	.word	0x004002c1

00401dc8 <read_MAX7314>:

 void read_MAX7314(uint8_t *data){
  401dc8:	b5f0      	push	{r4, r5, r6, r7, lr}
  401dca:	b08d      	sub	sp, #52	; 0x34
  401dcc:	4607      	mov	r7, r0
	/* Data Packets for tx/rx */
	twi_packet_t packet_rx, packet_tx;
	uint8_t port_addr[] = {MAX7314_inputPortLow};
  401dce:	2400      	movs	r4, #0
  401dd0:	f88d 4004 	strb.w	r4, [sp, #4]

	
	/* Write the command byte address to be the Low byte of the Input Port */
	packet_tx.chip        = 0b0100000;
  401dd4:	2620      	movs	r6, #32
  401dd6:	f88d 6018 	strb.w	r6, [sp, #24]
	packet_tx.addr_length = 0;
  401dda:	9403      	str	r4, [sp, #12]
	packet_tx.buffer      = (uint8_t *) port_addr;
  401ddc:	ab01      	add	r3, sp, #4
  401dde:	9304      	str	r3, [sp, #16]
	packet_tx.length      = 1;
  401de0:	2301      	movs	r3, #1
  401de2:	9305      	str	r3, [sp, #20]
	twi_master_write(BOARD_BASE_TWI, &packet_tx);
  401de4:	4d08      	ldr	r5, [pc, #32]	; (401e08 <read_MAX7314+0x40>)
  401de6:	a902      	add	r1, sp, #8
  401de8:	4628      	mov	r0, r5
  401dea:	4b08      	ldr	r3, [pc, #32]	; (401e0c <read_MAX7314+0x44>)
  401dec:	4798      	blx	r3


	/* Read Data from the Low and High Input Ports */
	packet_rx.chip        = 0b0100000;
  401dee:	f88d 602c 	strb.w	r6, [sp, #44]	; 0x2c
	packet_rx.addr_length = 0;
  401df2:	9408      	str	r4, [sp, #32]
	packet_rx.buffer      = data;
  401df4:	9709      	str	r7, [sp, #36]	; 0x24
	packet_rx.length      = 2;
  401df6:	2302      	movs	r3, #2
  401df8:	930a      	str	r3, [sp, #40]	; 0x28
	twi_master_read(BOARD_BASE_TWI, &packet_rx);
  401dfa:	a907      	add	r1, sp, #28
  401dfc:	4628      	mov	r0, r5
  401dfe:	4b04      	ldr	r3, [pc, #16]	; (401e10 <read_MAX7314+0x48>)
  401e00:	4798      	blx	r3


 }
  401e02:	b00d      	add	sp, #52	; 0x34
  401e04:	bdf0      	pop	{r4, r5, r6, r7, pc}
  401e06:	bf00      	nop
  401e08:	40018000 	.word	0x40018000
  401e0c:	004002c1 	.word	0x004002c1
  401e10:	004001e1 	.word	0x004001e1

00401e14 <main>:

void config_MAX7314(void);
void read_MAX7314(uint8_t *port_data);

int main (void)
{
  401e14:	b508      	push	{r3, lr}
	sysclk_init();				//initialize system clock
  401e16:	4b18      	ldr	r3, [pc, #96]	; (401e78 <main+0x64>)
  401e18:	4798      	blx	r3
	WDT->WDT_MR = WDT_MR_WDDIS; //disable watchdog timer
  401e1a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  401e1e:	4b17      	ldr	r3, [pc, #92]	; (401e7c <main+0x68>)
  401e20:	605a      	str	r2, [r3, #4]

	board_init();				//board init (currently empty)
  401e22:	4b17      	ldr	r3, [pc, #92]	; (401e80 <main+0x6c>)
  401e24:	4798      	blx	r3
	init_sequencer_controls();
  401e26:	4b17      	ldr	r3, [pc, #92]	; (401e84 <main+0x70>)
  401e28:	4798      	blx	r3

	SPI_led_init();
  401e2a:	4b17      	ldr	r3, [pc, #92]	; (401e88 <main+0x74>)
  401e2c:	4798      	blx	r3
	leds_update_display();
  401e2e:	4b17      	ldr	r3, [pc, #92]	; (401e8c <main+0x78>)
  401e30:	4798      	blx	r3

	timers_init();				//initiate timer for Flashing LED on PA20
  401e32:	4b17      	ldr	r3, [pc, #92]	; (401e90 <main+0x7c>)
  401e34:	4798      	blx	r3
	update_timers(bpm);
  401e36:	4b17      	ldr	r3, [pc, #92]	; (401e94 <main+0x80>)
  401e38:	8818      	ldrh	r0, [r3, #0]
  401e3a:	4b17      	ldr	r3, [pc, #92]	; (401e98 <main+0x84>)
  401e3c:	4798      	blx	r3

	ADC_init();
  401e3e:	4b17      	ldr	r3, [pc, #92]	; (401e9c <main+0x88>)
  401e40:	4798      	blx	r3

	REG_PIOB_PER |= PIO_PER_P3; //enable PIO controller on PB3
  401e42:	4a17      	ldr	r2, [pc, #92]	; (401ea0 <main+0x8c>)
  401e44:	6813      	ldr	r3, [r2, #0]
  401e46:	f043 0308 	orr.w	r3, r3, #8
  401e4a:	6013      	str	r3, [r2, #0]
	REG_PIOB_OER |= PIO_PER_P3; //enable output on pin PB3
  401e4c:	3210      	adds	r2, #16
  401e4e:	6813      	ldr	r3, [r2, #0]
  401e50:	f043 0308 	orr.w	r3, r3, #8
  401e54:	6013      	str	r3, [r2, #0]
	REG_PIOB_SODR |= PIO_PER_P3; //set output high on PB3 as default
  401e56:	3220      	adds	r2, #32
  401e58:	6813      	ldr	r3, [r2, #0]
  401e5a:	f043 0308 	orr.w	r3, r3, #8
  401e5e:	6013      	str	r3, [r2, #0]
	Encoder_init();				//initialize encoders
  401e60:	4b10      	ldr	r3, [pc, #64]	; (401ea4 <main+0x90>)
  401e62:	4798      	blx	r3

	i2c_init();
  401e64:	4b10      	ldr	r3, [pc, #64]	; (401ea8 <main+0x94>)
  401e66:	4798      	blx	r3
	init_IO_int();
  401e68:	4b10      	ldr	r3, [pc, #64]	; (401eac <main+0x98>)
  401e6a:	4798      	blx	r3
	config_MAX7314();
  401e6c:	4b10      	ldr	r3, [pc, #64]	; (401eb0 <main+0x9c>)
  401e6e:	4798      	blx	r3
	read_MAX7314(port_data);
  401e70:	4810      	ldr	r0, [pc, #64]	; (401eb4 <main+0xa0>)
  401e72:	4b11      	ldr	r3, [pc, #68]	; (401eb8 <main+0xa4>)
  401e74:	4798      	blx	r3
  401e76:	e7fe      	b.n	401e76 <main+0x62>
  401e78:	00401941 	.word	0x00401941
  401e7c:	400e1450 	.word	0x400e1450
  401e80:	0040193d 	.word	0x0040193d
  401e84:	00401549 	.word	0x00401549
  401e88:	004016b9 	.word	0x004016b9
  401e8c:	00400ebd 	.word	0x00400ebd
  401e90:	00401815 	.word	0x00401815
  401e94:	2000072c 	.word	0x2000072c
  401e98:	0040187d 	.word	0x0040187d
  401e9c:	0040011d 	.word	0x0040011d
  401ea0:	400e1000 	.word	0x400e1000
  401ea4:	004004e1 	.word	0x004004e1
  401ea8:	00401d0d 	.word	0x00401d0d
  401eac:	00401c95 	.word	0x00401c95
  401eb0:	00401d65 	.word	0x00401d65
  401eb4:	20000720 	.word	0x20000720
  401eb8:	00401dc9 	.word	0x00401dc9

00401ebc <PIOB_Handler>:
	}
}

 void PIOB_Handler(){

	 uint32_t status = REG_PIOB_ISR;	//read PIOB interrupt status & clear interrupt flags
  401ebc:	4b10      	ldr	r3, [pc, #64]	; (401f00 <PIOB_Handler+0x44>)
  401ebe:	681b      	ldr	r3, [r3, #0]
 
	 //check if Io expander interrupt was driven
	 if (status & PIO_ISR_P10){
  401ec0:	f413 6f80 	tst.w	r3, #1024	; 0x400
  401ec4:	d01b      	beq.n	401efe <PIOB_Handler+0x42>
	while (1)
	{
	}
}

 void PIOB_Handler(){
  401ec6:	b510      	push	{r4, lr}

	 uint32_t status = REG_PIOB_ISR;	//read PIOB interrupt status & clear interrupt flags
 
	 //check if Io expander interrupt was driven
	 if (status & PIO_ISR_P10){
		read_MAX7314(temp_data);
  401ec8:	4c0e      	ldr	r4, [pc, #56]	; (401f04 <PIOB_Handler+0x48>)
  401eca:	4620      	mov	r0, r4
  401ecc:	4b0e      	ldr	r3, [pc, #56]	; (401f08 <PIOB_Handler+0x4c>)
  401ece:	4798      	blx	r3

		if  ( !((temp_data[0] = 127) && (temp_data[1] == 255)) ){
  401ed0:	237f      	movs	r3, #127	; 0x7f
  401ed2:	7023      	strb	r3, [r4, #0]
  401ed4:	7861      	ldrb	r1, [r4, #1]
  401ed6:	29ff      	cmp	r1, #255	; 0xff
  401ed8:	d010      	beq.n	401efc <PIOB_Handler+0x40>
			port_data[0] = temp_data[0];
  401eda:	4b0c      	ldr	r3, [pc, #48]	; (401f0c <PIOB_Handler+0x50>)
  401edc:	227f      	movs	r2, #127	; 0x7f
  401ede:	701a      	strb	r2, [r3, #0]
			port_data[1] = temp_data[1];
  401ee0:	7059      	strb	r1, [r3, #1]

			count++;
  401ee2:	4a0b      	ldr	r2, [pc, #44]	; (401f10 <PIOB_Handler+0x54>)
  401ee4:	7813      	ldrb	r3, [r2, #0]
  401ee6:	3301      	adds	r3, #1
  401ee8:	b2db      	uxtb	r3, r3
  401eea:	7013      	strb	r3, [r2, #0]
			if (count >= 2){
  401eec:	2b01      	cmp	r3, #1
  401eee:	d905      	bls.n	401efc <PIOB_Handler+0x40>
				led_toggle(port_data[0], port_data[1]);
  401ef0:	207f      	movs	r0, #127	; 0x7f
  401ef2:	4b08      	ldr	r3, [pc, #32]	; (401f14 <PIOB_Handler+0x58>)
  401ef4:	4798      	blx	r3
				count = 0;
  401ef6:	2200      	movs	r2, #0
  401ef8:	4b05      	ldr	r3, [pc, #20]	; (401f10 <PIOB_Handler+0x54>)
  401efa:	701a      	strb	r2, [r3, #0]
  401efc:	bd10      	pop	{r4, pc}
  401efe:	4770      	bx	lr
  401f00:	400e104c 	.word	0x400e104c
  401f04:	2000071c 	.word	0x2000071c
  401f08:	00401dc9 	.word	0x00401dc9
  401f0c:	20000720 	.word	0x20000720
  401f10:	2000071e 	.word	0x2000071e
  401f14:	00401125 	.word	0x00401125

00401f18 <__aeabi_frsub>:
  401f18:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
  401f1c:	e002      	b.n	401f24 <__addsf3>
  401f1e:	bf00      	nop

00401f20 <__aeabi_fsub>:
  401f20:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00401f24 <__addsf3>:
  401f24:	0042      	lsls	r2, r0, #1
  401f26:	bf1f      	itttt	ne
  401f28:	ea5f 0341 	movsne.w	r3, r1, lsl #1
  401f2c:	ea92 0f03 	teqne	r2, r3
  401f30:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
  401f34:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
  401f38:	d06a      	beq.n	402010 <__addsf3+0xec>
  401f3a:	ea4f 6212 	mov.w	r2, r2, lsr #24
  401f3e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
  401f42:	bfc1      	itttt	gt
  401f44:	18d2      	addgt	r2, r2, r3
  401f46:	4041      	eorgt	r1, r0
  401f48:	4048      	eorgt	r0, r1
  401f4a:	4041      	eorgt	r1, r0
  401f4c:	bfb8      	it	lt
  401f4e:	425b      	neglt	r3, r3
  401f50:	2b19      	cmp	r3, #25
  401f52:	bf88      	it	hi
  401f54:	4770      	bxhi	lr
  401f56:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
  401f5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  401f5e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
  401f62:	bf18      	it	ne
  401f64:	4240      	negne	r0, r0
  401f66:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  401f6a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
  401f6e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
  401f72:	bf18      	it	ne
  401f74:	4249      	negne	r1, r1
  401f76:	ea92 0f03 	teq	r2, r3
  401f7a:	d03f      	beq.n	401ffc <__addsf3+0xd8>
  401f7c:	f1a2 0201 	sub.w	r2, r2, #1
  401f80:	fa41 fc03 	asr.w	ip, r1, r3
  401f84:	eb10 000c 	adds.w	r0, r0, ip
  401f88:	f1c3 0320 	rsb	r3, r3, #32
  401f8c:	fa01 f103 	lsl.w	r1, r1, r3
  401f90:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
  401f94:	d502      	bpl.n	401f9c <__addsf3+0x78>
  401f96:	4249      	negs	r1, r1
  401f98:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
  401f9c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
  401fa0:	d313      	bcc.n	401fca <__addsf3+0xa6>
  401fa2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
  401fa6:	d306      	bcc.n	401fb6 <__addsf3+0x92>
  401fa8:	0840      	lsrs	r0, r0, #1
  401faa:	ea4f 0131 	mov.w	r1, r1, rrx
  401fae:	f102 0201 	add.w	r2, r2, #1
  401fb2:	2afe      	cmp	r2, #254	; 0xfe
  401fb4:	d251      	bcs.n	40205a <__addsf3+0x136>
  401fb6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
  401fba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
  401fbe:	bf08      	it	eq
  401fc0:	f020 0001 	biceq.w	r0, r0, #1
  401fc4:	ea40 0003 	orr.w	r0, r0, r3
  401fc8:	4770      	bx	lr
  401fca:	0049      	lsls	r1, r1, #1
  401fcc:	eb40 0000 	adc.w	r0, r0, r0
  401fd0:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
  401fd4:	f1a2 0201 	sub.w	r2, r2, #1
  401fd8:	d1ed      	bne.n	401fb6 <__addsf3+0x92>
  401fda:	fab0 fc80 	clz	ip, r0
  401fde:	f1ac 0c08 	sub.w	ip, ip, #8
  401fe2:	ebb2 020c 	subs.w	r2, r2, ip
  401fe6:	fa00 f00c 	lsl.w	r0, r0, ip
  401fea:	bfaa      	itet	ge
  401fec:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
  401ff0:	4252      	neglt	r2, r2
  401ff2:	4318      	orrge	r0, r3
  401ff4:	bfbc      	itt	lt
  401ff6:	40d0      	lsrlt	r0, r2
  401ff8:	4318      	orrlt	r0, r3
  401ffa:	4770      	bx	lr
  401ffc:	f092 0f00 	teq	r2, #0
  402000:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
  402004:	bf06      	itte	eq
  402006:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
  40200a:	3201      	addeq	r2, #1
  40200c:	3b01      	subne	r3, #1
  40200e:	e7b5      	b.n	401f7c <__addsf3+0x58>
  402010:	ea4f 0341 	mov.w	r3, r1, lsl #1
  402014:	ea7f 6c22 	mvns.w	ip, r2, asr #24
  402018:	bf18      	it	ne
  40201a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
  40201e:	d021      	beq.n	402064 <__addsf3+0x140>
  402020:	ea92 0f03 	teq	r2, r3
  402024:	d004      	beq.n	402030 <__addsf3+0x10c>
  402026:	f092 0f00 	teq	r2, #0
  40202a:	bf08      	it	eq
  40202c:	4608      	moveq	r0, r1
  40202e:	4770      	bx	lr
  402030:	ea90 0f01 	teq	r0, r1
  402034:	bf1c      	itt	ne
  402036:	2000      	movne	r0, #0
  402038:	4770      	bxne	lr
  40203a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
  40203e:	d104      	bne.n	40204a <__addsf3+0x126>
  402040:	0040      	lsls	r0, r0, #1
  402042:	bf28      	it	cs
  402044:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
  402048:	4770      	bx	lr
  40204a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
  40204e:	bf3c      	itt	cc
  402050:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
  402054:	4770      	bxcc	lr
  402056:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
  40205a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
  40205e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  402062:	4770      	bx	lr
  402064:	ea7f 6222 	mvns.w	r2, r2, asr #24
  402068:	bf16      	itet	ne
  40206a:	4608      	movne	r0, r1
  40206c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
  402070:	4601      	movne	r1, r0
  402072:	0242      	lsls	r2, r0, #9
  402074:	bf06      	itte	eq
  402076:	ea5f 2341 	movseq.w	r3, r1, lsl #9
  40207a:	ea90 0f01 	teqeq	r0, r1
  40207e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
  402082:	4770      	bx	lr

00402084 <__aeabi_ui2f>:
  402084:	f04f 0300 	mov.w	r3, #0
  402088:	e004      	b.n	402094 <__aeabi_i2f+0x8>
  40208a:	bf00      	nop

0040208c <__aeabi_i2f>:
  40208c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
  402090:	bf48      	it	mi
  402092:	4240      	negmi	r0, r0
  402094:	ea5f 0c00 	movs.w	ip, r0
  402098:	bf08      	it	eq
  40209a:	4770      	bxeq	lr
  40209c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
  4020a0:	4601      	mov	r1, r0
  4020a2:	f04f 0000 	mov.w	r0, #0
  4020a6:	e01c      	b.n	4020e2 <__aeabi_l2f+0x2a>

004020a8 <__aeabi_ul2f>:
  4020a8:	ea50 0201 	orrs.w	r2, r0, r1
  4020ac:	bf08      	it	eq
  4020ae:	4770      	bxeq	lr
  4020b0:	f04f 0300 	mov.w	r3, #0
  4020b4:	e00a      	b.n	4020cc <__aeabi_l2f+0x14>
  4020b6:	bf00      	nop

004020b8 <__aeabi_l2f>:
  4020b8:	ea50 0201 	orrs.w	r2, r0, r1
  4020bc:	bf08      	it	eq
  4020be:	4770      	bxeq	lr
  4020c0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
  4020c4:	d502      	bpl.n	4020cc <__aeabi_l2f+0x14>
  4020c6:	4240      	negs	r0, r0
  4020c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  4020cc:	ea5f 0c01 	movs.w	ip, r1
  4020d0:	bf02      	ittt	eq
  4020d2:	4684      	moveq	ip, r0
  4020d4:	4601      	moveq	r1, r0
  4020d6:	2000      	moveq	r0, #0
  4020d8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
  4020dc:	bf08      	it	eq
  4020de:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
  4020e2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
  4020e6:	fabc f28c 	clz	r2, ip
  4020ea:	3a08      	subs	r2, #8
  4020ec:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
  4020f0:	db10      	blt.n	402114 <__aeabi_l2f+0x5c>
  4020f2:	fa01 fc02 	lsl.w	ip, r1, r2
  4020f6:	4463      	add	r3, ip
  4020f8:	fa00 fc02 	lsl.w	ip, r0, r2
  4020fc:	f1c2 0220 	rsb	r2, r2, #32
  402100:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  402104:	fa20 f202 	lsr.w	r2, r0, r2
  402108:	eb43 0002 	adc.w	r0, r3, r2
  40210c:	bf08      	it	eq
  40210e:	f020 0001 	biceq.w	r0, r0, #1
  402112:	4770      	bx	lr
  402114:	f102 0220 	add.w	r2, r2, #32
  402118:	fa01 fc02 	lsl.w	ip, r1, r2
  40211c:	f1c2 0220 	rsb	r2, r2, #32
  402120:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
  402124:	fa21 f202 	lsr.w	r2, r1, r2
  402128:	eb43 0002 	adc.w	r0, r3, r2
  40212c:	bf08      	it	eq
  40212e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
  402132:	4770      	bx	lr

00402134 <__aeabi_fmul>:
  402134:	f04f 0cff 	mov.w	ip, #255	; 0xff
  402138:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
  40213c:	bf1e      	ittt	ne
  40213e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
  402142:	ea92 0f0c 	teqne	r2, ip
  402146:	ea93 0f0c 	teqne	r3, ip
  40214a:	d06f      	beq.n	40222c <__aeabi_fmul+0xf8>
  40214c:	441a      	add	r2, r3
  40214e:	ea80 0c01 	eor.w	ip, r0, r1
  402152:	0240      	lsls	r0, r0, #9
  402154:	bf18      	it	ne
  402156:	ea5f 2141 	movsne.w	r1, r1, lsl #9
  40215a:	d01e      	beq.n	40219a <__aeabi_fmul+0x66>
  40215c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
  402160:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
  402164:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
  402168:	fba0 3101 	umull	r3, r1, r0, r1
  40216c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
  402170:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
  402174:	bf3e      	ittt	cc
  402176:	0049      	lslcc	r1, r1, #1
  402178:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
  40217c:	005b      	lslcc	r3, r3, #1
  40217e:	ea40 0001 	orr.w	r0, r0, r1
  402182:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
  402186:	2afd      	cmp	r2, #253	; 0xfd
  402188:	d81d      	bhi.n	4021c6 <__aeabi_fmul+0x92>
  40218a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
  40218e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
  402192:	bf08      	it	eq
  402194:	f020 0001 	biceq.w	r0, r0, #1
  402198:	4770      	bx	lr
  40219a:	f090 0f00 	teq	r0, #0
  40219e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
  4021a2:	bf08      	it	eq
  4021a4:	0249      	lsleq	r1, r1, #9
  4021a6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
  4021aa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
  4021ae:	3a7f      	subs	r2, #127	; 0x7f
  4021b0:	bfc2      	ittt	gt
  4021b2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
  4021b6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
  4021ba:	4770      	bxgt	lr
  4021bc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  4021c0:	f04f 0300 	mov.w	r3, #0
  4021c4:	3a01      	subs	r2, #1
  4021c6:	dc5d      	bgt.n	402284 <__aeabi_fmul+0x150>
  4021c8:	f112 0f19 	cmn.w	r2, #25
  4021cc:	bfdc      	itt	le
  4021ce:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
  4021d2:	4770      	bxle	lr
  4021d4:	f1c2 0200 	rsb	r2, r2, #0
  4021d8:	0041      	lsls	r1, r0, #1
  4021da:	fa21 f102 	lsr.w	r1, r1, r2
  4021de:	f1c2 0220 	rsb	r2, r2, #32
  4021e2:	fa00 fc02 	lsl.w	ip, r0, r2
  4021e6:	ea5f 0031 	movs.w	r0, r1, rrx
  4021ea:	f140 0000 	adc.w	r0, r0, #0
  4021ee:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
  4021f2:	bf08      	it	eq
  4021f4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
  4021f8:	4770      	bx	lr
  4021fa:	f092 0f00 	teq	r2, #0
  4021fe:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
  402202:	bf02      	ittt	eq
  402204:	0040      	lsleq	r0, r0, #1
  402206:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
  40220a:	3a01      	subeq	r2, #1
  40220c:	d0f9      	beq.n	402202 <__aeabi_fmul+0xce>
  40220e:	ea40 000c 	orr.w	r0, r0, ip
  402212:	f093 0f00 	teq	r3, #0
  402216:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  40221a:	bf02      	ittt	eq
  40221c:	0049      	lsleq	r1, r1, #1
  40221e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
  402222:	3b01      	subeq	r3, #1
  402224:	d0f9      	beq.n	40221a <__aeabi_fmul+0xe6>
  402226:	ea41 010c 	orr.w	r1, r1, ip
  40222a:	e78f      	b.n	40214c <__aeabi_fmul+0x18>
  40222c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
  402230:	ea92 0f0c 	teq	r2, ip
  402234:	bf18      	it	ne
  402236:	ea93 0f0c 	teqne	r3, ip
  40223a:	d00a      	beq.n	402252 <__aeabi_fmul+0x11e>
  40223c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
  402240:	bf18      	it	ne
  402242:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
  402246:	d1d8      	bne.n	4021fa <__aeabi_fmul+0xc6>
  402248:	ea80 0001 	eor.w	r0, r0, r1
  40224c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
  402250:	4770      	bx	lr
  402252:	f090 0f00 	teq	r0, #0
  402256:	bf17      	itett	ne
  402258:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
  40225c:	4608      	moveq	r0, r1
  40225e:	f091 0f00 	teqne	r1, #0
  402262:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
  402266:	d014      	beq.n	402292 <__aeabi_fmul+0x15e>
  402268:	ea92 0f0c 	teq	r2, ip
  40226c:	d101      	bne.n	402272 <__aeabi_fmul+0x13e>
  40226e:	0242      	lsls	r2, r0, #9
  402270:	d10f      	bne.n	402292 <__aeabi_fmul+0x15e>
  402272:	ea93 0f0c 	teq	r3, ip
  402276:	d103      	bne.n	402280 <__aeabi_fmul+0x14c>
  402278:	024b      	lsls	r3, r1, #9
  40227a:	bf18      	it	ne
  40227c:	4608      	movne	r0, r1
  40227e:	d108      	bne.n	402292 <__aeabi_fmul+0x15e>
  402280:	ea80 0001 	eor.w	r0, r0, r1
  402284:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
  402288:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  40228c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  402290:	4770      	bx	lr
  402292:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  402296:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
  40229a:	4770      	bx	lr

0040229c <__aeabi_fdiv>:
  40229c:	f04f 0cff 	mov.w	ip, #255	; 0xff
  4022a0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
  4022a4:	bf1e      	ittt	ne
  4022a6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
  4022aa:	ea92 0f0c 	teqne	r2, ip
  4022ae:	ea93 0f0c 	teqne	r3, ip
  4022b2:	d069      	beq.n	402388 <__aeabi_fdiv+0xec>
  4022b4:	eba2 0203 	sub.w	r2, r2, r3
  4022b8:	ea80 0c01 	eor.w	ip, r0, r1
  4022bc:	0249      	lsls	r1, r1, #9
  4022be:	ea4f 2040 	mov.w	r0, r0, lsl #9
  4022c2:	d037      	beq.n	402334 <__aeabi_fdiv+0x98>
  4022c4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  4022c8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
  4022cc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
  4022d0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
  4022d4:	428b      	cmp	r3, r1
  4022d6:	bf38      	it	cc
  4022d8:	005b      	lslcc	r3, r3, #1
  4022da:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
  4022de:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
  4022e2:	428b      	cmp	r3, r1
  4022e4:	bf24      	itt	cs
  4022e6:	1a5b      	subcs	r3, r3, r1
  4022e8:	ea40 000c 	orrcs.w	r0, r0, ip
  4022ec:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
  4022f0:	bf24      	itt	cs
  4022f2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
  4022f6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  4022fa:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
  4022fe:	bf24      	itt	cs
  402300:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
  402304:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  402308:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
  40230c:	bf24      	itt	cs
  40230e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
  402312:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  402316:	011b      	lsls	r3, r3, #4
  402318:	bf18      	it	ne
  40231a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
  40231e:	d1e0      	bne.n	4022e2 <__aeabi_fdiv+0x46>
  402320:	2afd      	cmp	r2, #253	; 0xfd
  402322:	f63f af50 	bhi.w	4021c6 <__aeabi_fmul+0x92>
  402326:	428b      	cmp	r3, r1
  402328:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
  40232c:	bf08      	it	eq
  40232e:	f020 0001 	biceq.w	r0, r0, #1
  402332:	4770      	bx	lr
  402334:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
  402338:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
  40233c:	327f      	adds	r2, #127	; 0x7f
  40233e:	bfc2      	ittt	gt
  402340:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
  402344:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
  402348:	4770      	bxgt	lr
  40234a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  40234e:	f04f 0300 	mov.w	r3, #0
  402352:	3a01      	subs	r2, #1
  402354:	e737      	b.n	4021c6 <__aeabi_fmul+0x92>
  402356:	f092 0f00 	teq	r2, #0
  40235a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
  40235e:	bf02      	ittt	eq
  402360:	0040      	lsleq	r0, r0, #1
  402362:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
  402366:	3a01      	subeq	r2, #1
  402368:	d0f9      	beq.n	40235e <__aeabi_fdiv+0xc2>
  40236a:	ea40 000c 	orr.w	r0, r0, ip
  40236e:	f093 0f00 	teq	r3, #0
  402372:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  402376:	bf02      	ittt	eq
  402378:	0049      	lsleq	r1, r1, #1
  40237a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
  40237e:	3b01      	subeq	r3, #1
  402380:	d0f9      	beq.n	402376 <__aeabi_fdiv+0xda>
  402382:	ea41 010c 	orr.w	r1, r1, ip
  402386:	e795      	b.n	4022b4 <__aeabi_fdiv+0x18>
  402388:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
  40238c:	ea92 0f0c 	teq	r2, ip
  402390:	d108      	bne.n	4023a4 <__aeabi_fdiv+0x108>
  402392:	0242      	lsls	r2, r0, #9
  402394:	f47f af7d 	bne.w	402292 <__aeabi_fmul+0x15e>
  402398:	ea93 0f0c 	teq	r3, ip
  40239c:	f47f af70 	bne.w	402280 <__aeabi_fmul+0x14c>
  4023a0:	4608      	mov	r0, r1
  4023a2:	e776      	b.n	402292 <__aeabi_fmul+0x15e>
  4023a4:	ea93 0f0c 	teq	r3, ip
  4023a8:	d104      	bne.n	4023b4 <__aeabi_fdiv+0x118>
  4023aa:	024b      	lsls	r3, r1, #9
  4023ac:	f43f af4c 	beq.w	402248 <__aeabi_fmul+0x114>
  4023b0:	4608      	mov	r0, r1
  4023b2:	e76e      	b.n	402292 <__aeabi_fmul+0x15e>
  4023b4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
  4023b8:	bf18      	it	ne
  4023ba:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
  4023be:	d1ca      	bne.n	402356 <__aeabi_fdiv+0xba>
  4023c0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
  4023c4:	f47f af5c 	bne.w	402280 <__aeabi_fmul+0x14c>
  4023c8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
  4023cc:	f47f af3c 	bne.w	402248 <__aeabi_fmul+0x114>
  4023d0:	e75f      	b.n	402292 <__aeabi_fmul+0x15e>
  4023d2:	bf00      	nop

004023d4 <__aeabi_f2uiz>:
  4023d4:	0042      	lsls	r2, r0, #1
  4023d6:	d20e      	bcs.n	4023f6 <__aeabi_f2uiz+0x22>
  4023d8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
  4023dc:	d30b      	bcc.n	4023f6 <__aeabi_f2uiz+0x22>
  4023de:	f04f 039e 	mov.w	r3, #158	; 0x9e
  4023e2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
  4023e6:	d409      	bmi.n	4023fc <__aeabi_f2uiz+0x28>
  4023e8:	ea4f 2300 	mov.w	r3, r0, lsl #8
  4023ec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  4023f0:	fa23 f002 	lsr.w	r0, r3, r2
  4023f4:	4770      	bx	lr
  4023f6:	f04f 0000 	mov.w	r0, #0
  4023fa:	4770      	bx	lr
  4023fc:	f112 0f61 	cmn.w	r2, #97	; 0x61
  402400:	d101      	bne.n	402406 <__aeabi_f2uiz+0x32>
  402402:	0242      	lsls	r2, r0, #9
  402404:	d102      	bne.n	40240c <__aeabi_f2uiz+0x38>
  402406:	f04f 30ff 	mov.w	r0, #4294967295
  40240a:	4770      	bx	lr
  40240c:	f04f 0000 	mov.w	r0, #0
  402410:	4770      	bx	lr
  402412:	bf00      	nop

00402414 <__libc_init_array>:
  402414:	b570      	push	{r4, r5, r6, lr}
  402416:	4e0f      	ldr	r6, [pc, #60]	; (402454 <__libc_init_array+0x40>)
  402418:	4d0f      	ldr	r5, [pc, #60]	; (402458 <__libc_init_array+0x44>)
  40241a:	1b76      	subs	r6, r6, r5
  40241c:	10b6      	asrs	r6, r6, #2
  40241e:	bf18      	it	ne
  402420:	2400      	movne	r4, #0
  402422:	d005      	beq.n	402430 <__libc_init_array+0x1c>
  402424:	3401      	adds	r4, #1
  402426:	f855 3b04 	ldr.w	r3, [r5], #4
  40242a:	4798      	blx	r3
  40242c:	42a6      	cmp	r6, r4
  40242e:	d1f9      	bne.n	402424 <__libc_init_array+0x10>
  402430:	4e0a      	ldr	r6, [pc, #40]	; (40245c <__libc_init_array+0x48>)
  402432:	4d0b      	ldr	r5, [pc, #44]	; (402460 <__libc_init_array+0x4c>)
  402434:	1b76      	subs	r6, r6, r5
  402436:	f000 f893 	bl	402560 <_init>
  40243a:	10b6      	asrs	r6, r6, #2
  40243c:	bf18      	it	ne
  40243e:	2400      	movne	r4, #0
  402440:	d006      	beq.n	402450 <__libc_init_array+0x3c>
  402442:	3401      	adds	r4, #1
  402444:	f855 3b04 	ldr.w	r3, [r5], #4
  402448:	4798      	blx	r3
  40244a:	42a6      	cmp	r6, r4
  40244c:	d1f9      	bne.n	402442 <__libc_init_array+0x2e>
  40244e:	bd70      	pop	{r4, r5, r6, pc}
  402450:	bd70      	pop	{r4, r5, r6, pc}
  402452:	bf00      	nop
  402454:	0040256c 	.word	0x0040256c
  402458:	0040256c 	.word	0x0040256c
  40245c:	00402574 	.word	0x00402574
  402460:	0040256c 	.word	0x0040256c

00402464 <register_fini>:
  402464:	4b02      	ldr	r3, [pc, #8]	; (402470 <register_fini+0xc>)
  402466:	b113      	cbz	r3, 40246e <register_fini+0xa>
  402468:	4802      	ldr	r0, [pc, #8]	; (402474 <register_fini+0x10>)
  40246a:	f000 b805 	b.w	402478 <atexit>
  40246e:	4770      	bx	lr
  402470:	00000000 	.word	0x00000000
  402474:	00402485 	.word	0x00402485

00402478 <atexit>:
  402478:	2300      	movs	r3, #0
  40247a:	4601      	mov	r1, r0
  40247c:	461a      	mov	r2, r3
  40247e:	4618      	mov	r0, r3
  402480:	f000 b814 	b.w	4024ac <__register_exitproc>

00402484 <__libc_fini_array>:
  402484:	b538      	push	{r3, r4, r5, lr}
  402486:	4d07      	ldr	r5, [pc, #28]	; (4024a4 <__libc_fini_array+0x20>)
  402488:	4c07      	ldr	r4, [pc, #28]	; (4024a8 <__libc_fini_array+0x24>)
  40248a:	1b2c      	subs	r4, r5, r4
  40248c:	10a4      	asrs	r4, r4, #2
  40248e:	d005      	beq.n	40249c <__libc_fini_array+0x18>
  402490:	3c01      	subs	r4, #1
  402492:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  402496:	4798      	blx	r3
  402498:	2c00      	cmp	r4, #0
  40249a:	d1f9      	bne.n	402490 <__libc_fini_array+0xc>
  40249c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  4024a0:	f000 b868 	b.w	402574 <_fini>
  4024a4:	00402584 	.word	0x00402584
  4024a8:	00402580 	.word	0x00402580

004024ac <__register_exitproc>:
  4024ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4024b0:	4c25      	ldr	r4, [pc, #148]	; (402548 <__register_exitproc+0x9c>)
  4024b2:	6825      	ldr	r5, [r4, #0]
  4024b4:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
  4024b8:	4606      	mov	r6, r0
  4024ba:	4688      	mov	r8, r1
  4024bc:	4692      	mov	sl, r2
  4024be:	4699      	mov	r9, r3
  4024c0:	b3c4      	cbz	r4, 402534 <__register_exitproc+0x88>
  4024c2:	6860      	ldr	r0, [r4, #4]
  4024c4:	281f      	cmp	r0, #31
  4024c6:	dc17      	bgt.n	4024f8 <__register_exitproc+0x4c>
  4024c8:	1c43      	adds	r3, r0, #1
  4024ca:	b176      	cbz	r6, 4024ea <__register_exitproc+0x3e>
  4024cc:	eb04 0580 	add.w	r5, r4, r0, lsl #2
  4024d0:	2201      	movs	r2, #1
  4024d2:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
  4024d6:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
  4024da:	4082      	lsls	r2, r0
  4024dc:	4311      	orrs	r1, r2
  4024de:	2e02      	cmp	r6, #2
  4024e0:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
  4024e4:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
  4024e8:	d01e      	beq.n	402528 <__register_exitproc+0x7c>
  4024ea:	3002      	adds	r0, #2
  4024ec:	6063      	str	r3, [r4, #4]
  4024ee:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
  4024f2:	2000      	movs	r0, #0
  4024f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4024f8:	4b14      	ldr	r3, [pc, #80]	; (40254c <__register_exitproc+0xa0>)
  4024fa:	b303      	cbz	r3, 40253e <__register_exitproc+0x92>
  4024fc:	f44f 70c8 	mov.w	r0, #400	; 0x190
  402500:	f3af 8000 	nop.w
  402504:	4604      	mov	r4, r0
  402506:	b1d0      	cbz	r0, 40253e <__register_exitproc+0x92>
  402508:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
  40250c:	2700      	movs	r7, #0
  40250e:	e880 0088 	stmia.w	r0, {r3, r7}
  402512:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  402516:	4638      	mov	r0, r7
  402518:	2301      	movs	r3, #1
  40251a:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  40251e:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
  402522:	2e00      	cmp	r6, #0
  402524:	d0e1      	beq.n	4024ea <__register_exitproc+0x3e>
  402526:	e7d1      	b.n	4024cc <__register_exitproc+0x20>
  402528:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
  40252c:	430a      	orrs	r2, r1
  40252e:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  402532:	e7da      	b.n	4024ea <__register_exitproc+0x3e>
  402534:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
  402538:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  40253c:	e7c1      	b.n	4024c2 <__register_exitproc+0x16>
  40253e:	f04f 30ff 	mov.w	r0, #4294967295
  402542:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402546:	bf00      	nop
  402548:	0040255c 	.word	0x0040255c
  40254c:	00000000 	.word	0x00000000
  402550:	0000080f 	.word	0x0000080f
  402554:	00ffff06 	.word	0x00ffff06
  402558:	00000043 	.word	0x00000043

0040255c <_global_impure_ptr>:
  40255c:	20000238                                8.. 

00402560 <_init>:
  402560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402562:	bf00      	nop
  402564:	bcf8      	pop	{r3, r4, r5, r6, r7}
  402566:	bc08      	pop	{r3}
  402568:	469e      	mov	lr, r3
  40256a:	4770      	bx	lr

0040256c <__init_array_start>:
  40256c:	00402465 	.word	0x00402465

00402570 <__frame_dummy_init_array_entry>:
  402570:	004000e5                                ..@.

00402574 <_fini>:
  402574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402576:	bf00      	nop
  402578:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40257a:	bc08      	pop	{r3}
  40257c:	469e      	mov	lr, r3
  40257e:	4770      	bx	lr

00402580 <__fini_array_start>:
  402580:	004000c1 	.word	0x004000c1

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	d1fb      	bne.n	20000000 <portable_delay_cycles>
20000008:	4770      	bx	lr
2000000a:	bf00      	nop

2000000c <notes_index>:
2000000c:	0030 0000 0030 0000 0030 0000 0030 0000     0...0...0...0...
2000001c:	0030 0000 0030 0000 0030 0000 0030 0000     0...0...0...0...
2000002c:	0030 0000 0030 0000 0030 0000 0030 0000     0...0...0...0...
2000003c:	0030 0000 0030 0000 0030 0000 0030 0000     0...0...0...0...

2000004c <notes_lookup>:
2000004c:	0000 0000 9931 3daa 9931 3e2a e5c9 3e7f     ....1..=1.*>...>
2000005c:	9931 3eaa 3f7d 3ed5 e5c9 3eff 460b 3f15     1..>}?.>...>.F.?
2000006c:	9931 3f2a ec57 3f3f 3f7d 3f55 92a3 3f6a     1.*?W.??}?U?..j?
2000007c:	0000 3f80 a993 3f8a 5326 3f95 fcb9 3f9f     ...?...?&S.?...?
2000008c:	a64c 3faa 4fdf 3fb5 f972 3fbf a305 3fca     L..?.O.?r..?...?
2000009c:	4c98 3fd5 f62b 3fdf 9fbe 3fea 4952 3ff5     .L.?+..?...?RI.?
200000ac:	0000 4000 54ca 4005 a993 400a fe5d 400f     ...@.T.@...@]..@
200000bc:	5326 4015 a7f0 401a fcb9 401f 5183 4025     &S.@...@...@.Q%@
200000cc:	a64c 402a fb16 402f 4fdf 4035 a4a9 403a     L.*@../@.O5@..:@
200000dc:	0000 4040 54ca 4045 a993 404a fe5d 404f     ..@@.TE@..J@].O@
200000ec:	5326 4055 a7f0 405a fcb9 405f 5183 4065     &SU@..Z@.._@.Qe@
200000fc:	a64c 406a fb16 406f 4fdf 4075 a4a9 407a     L.j@..o@.Ou@..z@
2000010c:	0000 4080 aa65 4082 54ca 4085 ff2e 4087     ...@e..@.T.@...@
2000011c:	a993 408a 53f8 408d fe5d 408f a8c1 4092     ...@.S.@]..@...@
2000012c:	5326 4095 fd8b 4097 a7f0 409a 5254 409d     &S.@...@...@TR.@
2000013c:	0000 40a0 aa65 40a2 54ca 40a5 ff2e 40a7     ...@e..@.T.@...@
2000014c:	a993 40aa 53f8 40ad fe5d 40af a8c1 40b2     ...@.S.@]..@...@
2000015c:	5326 40b5 fd8b 40b7 a7f0 40ba 5254 40bd     &S.@...@...@TR.@
2000016c:	0000 40c0 aa65 40c2 54ca 40c5 ff2e 40c7     ...@e..@.T.@...@
2000017c:	a993 40ca 53f8 40cd fe5d 40cf a8c1 40d2     ...@.S.@]..@...@
2000018c:	5326 40d5 fd8b 40d7 a7f0 40da 5254 40dd     &S.@...@...@TR.@
2000019c:	0000 40e0 aa65 40e2 54ca 40e5 ff2e 40e7     ...@e..@.T.@...@
200001ac:	a993 40ea 53f8 40ed fe5d 40ef a8c1 40f2     ...@.S.@]..@...@
200001bc:	5326 40f5 fd8b 40f7 a7f0 40fa 5254 40fd     &S.@...@...@TR.@
200001cc:	0000 4100 5532 4101 aa65 4102 ff97 4103     ...A2U.Ae..A...A
200001dc:	54ca 4105 a9fc 4106 ff2e 4107 5461 4109     .T.A...A...AaT.A
200001ec:	a993 410a fec5 410b 53f8 410d a92a 410e     ...A...A.S.A*..A
200001fc:	0000 4110 5532 4111 aa65 4112 ff97 4113     ...A2U.Ae..A...A
2000020c:	54ca 4115 a9fc 4116 ff2e 4117 5461 4119     .T.A...A...AaT.A
2000021c:	a993 411a fec5 411b 53f8 411d a92a 411e     ...A...A.S.A*..A
2000022c:	0000 4120                                   .. A

20000230 <g_interrupt_enabled>:
20000230:	0001 0000                                   ....

20000234 <SystemCoreClock>:
20000234:	0900 003d                                   ..=.

20000238 <impure_data>:
20000238:	0000 0000 0524 2000 058c 2000 05f4 2000     ....$.. ... ... 
	...
2000026c:	2558 0040 0000 0000 0000 0000 0000 0000     X%@.............
	...
200002e0:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
200002f0:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...
