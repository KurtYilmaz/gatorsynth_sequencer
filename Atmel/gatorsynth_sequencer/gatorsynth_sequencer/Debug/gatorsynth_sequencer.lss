
gatorsynth_sequencer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005160  00400000  00400000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000628  20000000  00405160  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  2 .bss          00008118  20000628  00405788  00020628  2**2
                  ALLOC
  3 .stack        00003000  20008740  0040d8a0  00020628  2**0
                  ALLOC
  4 .ARM.attributes 0000002a  00000000  00000000  00020628  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020652  2**0
                  CONTENTS, READONLY
  6 .debug_info   000095b3  00000000  00000000  000206ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000216e  00000000  00000000  00029c5e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00003853  00000000  00000000  0002bdcc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000770  00000000  00000000  0002f61f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000668  00000000  00000000  0002fd8f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00012756  00000000  00000000  000303f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000fba6  00000000  00000000  00042b4d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0003da01  00000000  00000000  000526f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000010cc  00000000  00000000  000900f4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <_sfixed>:
  400000:	2000b740 	.word	0x2000b740
  400004:	004033d9 	.word	0x004033d9
  400008:	004033d5 	.word	0x004033d5
  40000c:	004033d5 	.word	0x004033d5
  400010:	004033d5 	.word	0x004033d5
  400014:	004033d5 	.word	0x004033d5
  400018:	004033d5 	.word	0x004033d5
	...
  40002c:	004033d5 	.word	0x004033d5
  400030:	004033d5 	.word	0x004033d5
  400034:	00000000 	.word	0x00000000
  400038:	004033d5 	.word	0x004033d5
  40003c:	004033d5 	.word	0x004033d5
  400040:	004033d5 	.word	0x004033d5
  400044:	004033d5 	.word	0x004033d5
  400048:	004033d5 	.word	0x004033d5
  40004c:	004033d5 	.word	0x004033d5
  400050:	004033d5 	.word	0x004033d5
  400054:	004033d5 	.word	0x004033d5
  400058:	004033d5 	.word	0x004033d5
  40005c:	00000000 	.word	0x00000000
  400060:	004033d5 	.word	0x004033d5
  400064:	004033d5 	.word	0x004033d5
  400068:	004033d5 	.word	0x004033d5
  40006c:	00402a25 	.word	0x00402a25
  400070:	004038d5 	.word	0x004038d5
  400074:	004017dd 	.word	0x004017dd
  400078:	004033d5 	.word	0x004033d5
  40007c:	004033d5 	.word	0x004033d5
  400080:	004033d5 	.word	0x004033d5
  400084:	004033d5 	.word	0x004033d5
  400088:	00000000 	.word	0x00000000
  40008c:	004033d5 	.word	0x004033d5
  400090:	004033d5 	.word	0x004033d5
  400094:	004033d5 	.word	0x004033d5
  400098:	004033d5 	.word	0x004033d5
  40009c:	004030b5 	.word	0x004030b5
  4000a0:	004033d5 	.word	0x004033d5
  4000a4:	004033d5 	.word	0x004033d5
  4000a8:	004033d5 	.word	0x004033d5
  4000ac:	004033d5 	.word	0x004033d5
  4000b0:	004033d5 	.word	0x004033d5
  4000b4:	0040019d 	.word	0x0040019d
  4000b8:	004033d5 	.word	0x004033d5
  4000bc:	004033d5 	.word	0x004033d5

004000c0 <__do_global_dtors_aux>:
  4000c0:	b510      	push	{r4, lr}
  4000c2:	4c05      	ldr	r4, [pc, #20]	; (4000d8 <__do_global_dtors_aux+0x18>)
  4000c4:	7823      	ldrb	r3, [r4, #0]
  4000c6:	b933      	cbnz	r3, 4000d6 <__do_global_dtors_aux+0x16>
  4000c8:	4b04      	ldr	r3, [pc, #16]	; (4000dc <__do_global_dtors_aux+0x1c>)
  4000ca:	b113      	cbz	r3, 4000d2 <__do_global_dtors_aux+0x12>
  4000cc:	4804      	ldr	r0, [pc, #16]	; (4000e0 <__do_global_dtors_aux+0x20>)
  4000ce:	f3af 8000 	nop.w
  4000d2:	2301      	movs	r3, #1
  4000d4:	7023      	strb	r3, [r4, #0]
  4000d6:	bd10      	pop	{r4, pc}
  4000d8:	20000628 	.word	0x20000628
  4000dc:	00000000 	.word	0x00000000
  4000e0:	00405160 	.word	0x00405160

004000e4 <frame_dummy>:
  4000e4:	4b08      	ldr	r3, [pc, #32]	; (400108 <frame_dummy+0x24>)
  4000e6:	b510      	push	{r4, lr}
  4000e8:	b11b      	cbz	r3, 4000f2 <frame_dummy+0xe>
  4000ea:	4908      	ldr	r1, [pc, #32]	; (40010c <frame_dummy+0x28>)
  4000ec:	4808      	ldr	r0, [pc, #32]	; (400110 <frame_dummy+0x2c>)
  4000ee:	f3af 8000 	nop.w
  4000f2:	4808      	ldr	r0, [pc, #32]	; (400114 <frame_dummy+0x30>)
  4000f4:	6803      	ldr	r3, [r0, #0]
  4000f6:	b903      	cbnz	r3, 4000fa <frame_dummy+0x16>
  4000f8:	bd10      	pop	{r4, pc}
  4000fa:	4b07      	ldr	r3, [pc, #28]	; (400118 <frame_dummy+0x34>)
  4000fc:	2b00      	cmp	r3, #0
  4000fe:	d0fb      	beq.n	4000f8 <frame_dummy+0x14>
  400100:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400104:	4718      	bx	r3
  400106:	bf00      	nop
  400108:	00000000 	.word	0x00000000
  40010c:	2000062c 	.word	0x2000062c
  400110:	00405160 	.word	0x00405160
  400114:	00405160 	.word	0x00405160
  400118:	00000000 	.word	0x00000000

0040011c <ADC_init>:
 //define register to read CH2 conversion from
#define REG_ADC_CDR2     (*(__I  uint32_t*)0x40038058U) /**< \brief (ADC) Channel Data Register */ 

 void ADC_init(){

	note_length = 20000;
  40011c:	f644 6220 	movw	r2, #20000	; 0x4e20
  400120:	4b0f      	ldr	r3, [pc, #60]	; (400160 <ADC_init+0x44>)
  400122:	801a      	strh	r2, [r3, #0]

	//enable peripheral clock for ADC
	REG_PMC_PCER0 |= PMC_PCER0_PID29;
  400124:	4a0f      	ldr	r2, [pc, #60]	; (400164 <ADC_init+0x48>)
  400126:	6813      	ldr	r3, [r2, #0]
  400128:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  40012c:	6013      	str	r3, [r2, #0]
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  40012e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400132:	4b0d      	ldr	r3, [pc, #52]	; (400168 <ADC_init+0x4c>)
  400134:	601a      	str	r2, [r3, #0]

	//enable interrupts for ADC
	NVIC_EnableIRQ(ADC_IRQn);

	//enable Channel 2 of ADC (PORTA 19)
	REG_ADC_CHER |= ADC_CHER_CH2;
  400136:	4a0d      	ldr	r2, [pc, #52]	; (40016c <ADC_init+0x50>)
  400138:	6813      	ldr	r3, [r2, #0]
  40013a:	f043 0304 	orr.w	r3, r3, #4
  40013e:	6013      	str	r3, [r2, #0]

	//configure ADC clock to 5MHz
	REG_ADC_MR |= ADC_MR_PRESCAL(9);
  400140:	3a0c      	subs	r2, #12
  400142:	6813      	ldr	r3, [r2, #0]
  400144:	f443 6310 	orr.w	r3, r3, #2304	; 0x900
  400148:	6013      	str	r3, [r2, #0]

	//enable interrupt for end of ADC conversion on CH2
	REG_ADC_IER |= ADC_IER_EOC2;
  40014a:	3220      	adds	r2, #32
  40014c:	6813      	ldr	r3, [r2, #0]
  40014e:	f043 0304 	orr.w	r3, r3, #4
  400152:	6013      	str	r3, [r2, #0]

	//start initial conversion
	REG_ADC_CR |= ADC_CR_START;
  400154:	3a24      	subs	r2, #36	; 0x24
  400156:	6813      	ldr	r3, [r2, #0]
  400158:	f043 0302 	orr.w	r3, r3, #2
  40015c:	6013      	str	r3, [r2, #0]
  40015e:	4770      	bx	lr
  400160:	2000872c 	.word	0x2000872c
  400164:	400e0410 	.word	0x400e0410
  400168:	e000e100 	.word	0xe000e100
  40016c:	40038010 	.word	0x40038010

00400170 <convert_NoteLength>:

 }

  void convert_NoteLength(uint32_t DAC_data){
  400170:	b508      	push	{r3, lr}

	  //get note length as a proportion of the overflow count of the timer
	  float note_float = 40000*(((float)DAC_data)/1023);
	  note_length = (uint16_t) note_float;
  400172:	4b05      	ldr	r3, [pc, #20]	; (400188 <convert_NoteLength+0x18>)
  400174:	4798      	blx	r3
  400176:	4905      	ldr	r1, [pc, #20]	; (40018c <convert_NoteLength+0x1c>)
  400178:	4b05      	ldr	r3, [pc, #20]	; (400190 <convert_NoteLength+0x20>)
  40017a:	4798      	blx	r3
  40017c:	4b05      	ldr	r3, [pc, #20]	; (400194 <convert_NoteLength+0x24>)
  40017e:	4798      	blx	r3
  400180:	4b05      	ldr	r3, [pc, #20]	; (400198 <convert_NoteLength+0x28>)
  400182:	8018      	strh	r0, [r3, #0]
  400184:	bd08      	pop	{r3, pc}
  400186:	bf00      	nop
  400188:	00403aed 	.word	0x00403aed
  40018c:	421c671a 	.word	0x421c671a
  400190:	00403b9d 	.word	0x00403b9d
  400194:	00403e3d 	.word	0x00403e3d
  400198:	2000872c 	.word	0x2000872c

0040019c <ADC_Handler>:
// 		note_length = 1000;
// 	  }

  }

 void ADC_Handler(){
  40019c:	b508      	push	{r3, lr}

	//read the interrupt flag and clear it
	uint32_t status = REG_ADC_ISR;
  40019e:	4b05      	ldr	r3, [pc, #20]	; (4001b4 <ADC_Handler+0x18>)
  4001a0:	681b      	ldr	r3, [r3, #0]

	//store the data
	uint32_t data;

	//check for CH2 interrupt
	if ((status & ADC_IMR_EOC2) > 0){
  4001a2:	f013 0f04 	tst.w	r3, #4
		data = REG_ADC_CDR2;	//read ADC data off CH2
  4001a6:	bf1c      	itt	ne
  4001a8:	4b03      	ldrne	r3, [pc, #12]	; (4001b8 <ADC_Handler+0x1c>)
  4001aa:	6818      	ldrne	r0, [r3, #0]
	}

	convert_NoteLength(data);
  4001ac:	4b03      	ldr	r3, [pc, #12]	; (4001bc <ADC_Handler+0x20>)
  4001ae:	4798      	blx	r3
  4001b0:	bd08      	pop	{r3, pc}
  4001b2:	bf00      	nop
  4001b4:	40038030 	.word	0x40038030
  4001b8:	40038058 	.word	0x40038058
  4001bc:	00400171 	.word	0x00400171

004001c0 <twi_master_read>:
 * \param p_packet Packet information and data (see \ref twi_packet_t).
 *
 * \return TWI_SUCCESS if all bytes were read, error code otherwise.
 */
uint32_t twi_master_read(Twi *p_twi, twi_packet_t *p_packet)
{
  4001c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	//cpu_irq_disable();
	
	uint32_t status;
	uint32_t cnt = p_packet->length;
  4001c4:	68cb      	ldr	r3, [r1, #12]
	uint8_t *buffer = p_packet->buffer;
	uint8_t stop_sent = 0;
	uint32_t timeout = TWI_TIMEOUT;;
	
	/* Check argument */
	if (cnt == 0) {
  4001c6:	2b00      	cmp	r3, #0
  4001c8:	d049      	beq.n	40025e <twi_master_read+0x9e>
{
	//cpu_irq_disable();
	
	uint32_t status;
	uint32_t cnt = p_packet->length;
	uint8_t *buffer = p_packet->buffer;
  4001ca:	688c      	ldr	r4, [r1, #8]
	if (cnt == 0) {
		return TWI_INVALID_ARGUMENT;
	}

	/* Set read mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
  4001cc:	2600      	movs	r6, #0
  4001ce:	6046      	str	r6, [r0, #4]
	p_twi->TWI_MMR = TWI_MMR_MREAD | TWI_MMR_DADR(p_packet->chip) |
  4001d0:	684a      	ldr	r2, [r1, #4]
  4001d2:	0212      	lsls	r2, r2, #8
  4001d4:	f402 7240 	and.w	r2, r2, #768	; 0x300
  4001d8:	f442 5580 	orr.w	r5, r2, #4096	; 0x1000
  4001dc:	7c0a      	ldrb	r2, [r1, #16]
  4001de:	0412      	lsls	r2, r2, #16
  4001e0:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
  4001e4:	432a      	orrs	r2, r5
  4001e6:	6042      	str	r2, [r0, #4]
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
  4001e8:	60c6      	str	r6, [r0, #12]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
  4001ea:	684d      	ldr	r5, [r1, #4]
 */
static uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
	uint32_t val;

	if (len == 0)
  4001ec:	b15d      	cbz	r5, 400206 <twi_master_read+0x46>
		return 0;

	val = addr[0];
  4001ee:	780a      	ldrb	r2, [r1, #0]
	if (len > 1) {
  4001f0:	2d01      	cmp	r5, #1
		val <<= 8;
		val |= addr[1];
  4001f2:	bfc4      	itt	gt
  4001f4:	784e      	ldrbgt	r6, [r1, #1]
  4001f6:	ea46 2202 	orrgt.w	r2, r6, r2, lsl #8
	}
	if (len > 2) {
  4001fa:	2d02      	cmp	r5, #2
  4001fc:	dd04      	ble.n	400208 <twi_master_read+0x48>
		val <<= 8;
		val |= addr[2];
  4001fe:	7889      	ldrb	r1, [r1, #2]
  400200:	ea41 2202 	orr.w	r2, r1, r2, lsl #8
  400204:	e000      	b.n	400208 <twi_master_read+0x48>
static uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
	uint32_t val;

	if (len == 0)
		return 0;
  400206:	2200      	movs	r2, #0
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
  400208:	60c2      	str	r2, [r0, #12]

	/* Send a START condition */
	if (cnt == 1) {
  40020a:	2b01      	cmp	r3, #1
  40020c:	d103      	bne.n	400216 <twi_master_read+0x56>
		p_twi->TWI_CR = TWI_CR_START | TWI_CR_STOP;
  40020e:	2203      	movs	r2, #3
  400210:	6002      	str	r2, [r0, #0]
		stop_sent = 1;
  400212:	2701      	movs	r7, #1
  400214:	e02f      	b.n	400276 <twi_master_read+0xb6>
	} else {
		p_twi->TWI_CR = TWI_CR_START;
  400216:	2201      	movs	r2, #1
  400218:	6002      	str	r2, [r0, #0]
		stop_sent = 0;
  40021a:	2700      	movs	r7, #0
  40021c:	e02b      	b.n	400276 <twi_master_read+0xb6>
		if (cnt == 1  && !stop_sent) {
			p_twi->TWI_CR = TWI_CR_STOP;
			stop_sent = 1;
		}

		if (!(status & TWI_SR_RXRDY)) {
  40021e:	4629      	mov	r1, r5
		p_twi->TWI_CR = TWI_CR_START;
		stop_sent = 0;
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
  400220:	6a02      	ldr	r2, [r0, #32]
		if (status & TWI_SR_NACK) {
  400222:	f412 7f80 	tst.w	r2, #256	; 0x100
  400226:	d11d      	bne.n	400264 <twi_master_read+0xa4>
			return TWI_RECEIVE_NACK;
		}

		if (!timeout--) {
  400228:	1e4d      	subs	r5, r1, #1
  40022a:	b1f1      	cbz	r1, 40026a <twi_master_read+0xaa>
			return TWI_ERROR_TIMEOUT;
		}
				
		/* Last byte ? */
		if (cnt == 1  && !stop_sent) {
  40022c:	2b01      	cmp	r3, #1
  40022e:	d104      	bne.n	40023a <twi_master_read+0x7a>
  400230:	bb77      	cbnz	r7, 400290 <twi_master_read+0xd0>
			p_twi->TWI_CR = TWI_CR_STOP;
  400232:	f8c0 8000 	str.w	r8, [r0]
			stop_sent = 1;
  400236:	4667      	mov	r7, ip
  400238:	e02a      	b.n	400290 <twi_master_read+0xd0>
		}

		if (!(status & TWI_SR_RXRDY)) {
  40023a:	f012 0f02 	tst.w	r2, #2
  40023e:	d005      	beq.n	40024c <twi_master_read+0x8c>
			continue;
		}
		*buffer++ = p_twi->TWI_RHR;
  400240:	6b02      	ldr	r2, [r0, #48]	; 0x30
  400242:	7022      	strb	r2, [r4, #0]

		cnt--;
  400244:	3b01      	subs	r3, #1
		}

		if (!(status & TWI_SR_RXRDY)) {
			continue;
		}
		*buffer++ = p_twi->TWI_RHR;
  400246:	3401      	adds	r4, #1

		cnt--;
		timeout = TWI_TIMEOUT;
  400248:	4631      	mov	r1, r6
  40024a:	e000      	b.n	40024e <twi_master_read+0x8e>
  40024c:	4629      	mov	r1, r5
	} else {
		p_twi->TWI_CR = TWI_CR_START;
		stop_sent = 0;
	}

	while (cnt > 0) {
  40024e:	2b00      	cmp	r3, #0
  400250:	d1e6      	bne.n	400220 <twi_master_read+0x60>

		cnt--;
		timeout = TWI_TIMEOUT;
	}

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
  400252:	6a03      	ldr	r3, [r0, #32]
  400254:	f013 0f01 	tst.w	r3, #1
  400258:	d0fb      	beq.n	400252 <twi_master_read+0x92>
	}

	p_twi->TWI_SR;
  40025a:	6a03      	ldr	r3, [r0, #32]

	//cpu_irq_enable();

	return TWI_SUCCESS;
  40025c:	e01c      	b.n	400298 <twi_master_read+0xd8>
	uint8_t stop_sent = 0;
	uint32_t timeout = TWI_TIMEOUT;;
	
	/* Check argument */
	if (cnt == 0) {
		return TWI_INVALID_ARGUMENT;
  40025e:	f04f 0e01 	mov.w	lr, #1
  400262:	e019      	b.n	400298 <twi_master_read+0xd8>
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
  400264:	f04f 0e05 	mov.w	lr, #5
  400268:	e016      	b.n	400298 <twi_master_read+0xd8>
		}

		if (!timeout--) {
			return TWI_ERROR_TIMEOUT;
  40026a:	f04f 0e09 	mov.w	lr, #9
  40026e:	e013      	b.n	400298 <twi_master_read+0xd8>
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
  400270:	f04f 0e05 	mov.w	lr, #5
  400274:	e010      	b.n	400298 <twi_master_read+0xd8>
		p_twi->TWI_CR = TWI_CR_START;
		stop_sent = 0;
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
  400276:	6a02      	ldr	r2, [r0, #32]
		if (status & TWI_SR_NACK) {
  400278:	f412 7e80 	ands.w	lr, r2, #256	; 0x100
  40027c:	d1f8      	bne.n	400270 <twi_master_read+0xb0>
  40027e:	f643 2597 	movw	r5, #14999	; 0x3a97
			continue;
		}
		*buffer++ = p_twi->TWI_RHR;

		cnt--;
		timeout = TWI_TIMEOUT;
  400282:	f643 2698 	movw	r6, #15000	; 0x3a98
			return TWI_ERROR_TIMEOUT;
		}
				
		/* Last byte ? */
		if (cnt == 1  && !stop_sent) {
			p_twi->TWI_CR = TWI_CR_STOP;
  400286:	f04f 0802 	mov.w	r8, #2
			stop_sent = 1;
  40028a:	f04f 0c01 	mov.w	ip, #1
  40028e:	e7cd      	b.n	40022c <twi_master_read+0x6c>
		}

		if (!(status & TWI_SR_RXRDY)) {
  400290:	f012 0f02 	tst.w	r2, #2
  400294:	d0c3      	beq.n	40021e <twi_master_read+0x5e>
  400296:	e7d3      	b.n	400240 <twi_master_read+0x80>
	p_twi->TWI_SR;

	//cpu_irq_enable();

	return TWI_SUCCESS;
}
  400298:	4670      	mov	r0, lr
  40029a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40029e:	bf00      	nop

004002a0 <twi_master_write>:
 * \param p_packet Packet information and data (see \ref twi_packet_t).
 *
 * \return TWI_SUCCESS if all bytes were written, error code otherwise.
 */
uint32_t twi_master_write(Twi *p_twi, twi_packet_t *p_packet)
{
  4002a0:	4602      	mov	r2, r0
	//cpu_irq_disable();

	uint32_t status;
	uint32_t cnt = p_packet->length;
  4002a2:	68c8      	ldr	r0, [r1, #12]
	uint8_t *buffer = p_packet->buffer;

	/* Check argument */
	if (cnt == 0) {
  4002a4:	b330      	cbz	r0, 4002f4 <twi_master_write+0x54>
 * \param p_packet Packet information and data (see \ref twi_packet_t).
 *
 * \return TWI_SUCCESS if all bytes were written, error code otherwise.
 */
uint32_t twi_master_write(Twi *p_twi, twi_packet_t *p_packet)
{
  4002a6:	b410      	push	{r4}
	//cpu_irq_disable();

	uint32_t status;
	uint32_t cnt = p_packet->length;
	uint8_t *buffer = p_packet->buffer;
  4002a8:	688c      	ldr	r4, [r1, #8]
		return TWI_INVALID_ARGUMENT;
	}

	/* Set write mode, slave address and 3 internal address byte lengths */
	//p_twi->TWI_MMR = 0;
	p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip);
  4002aa:	7c0b      	ldrb	r3, [r1, #16]
  4002ac:	041b      	lsls	r3, r3, #16
  4002ae:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
  4002b2:	6053      	str	r3, [r2, #4]
	//p_twi->TWI_IADR = 0;
	//p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);

	/* Send all bytes */
	while (cnt > 0) {
		status = p_twi->TWI_SR;
  4002b4:	6a13      	ldr	r3, [r2, #32]
		if (status & TWI_SR_NACK) {
  4002b6:	f413 7f80 	tst.w	r3, #256	; 0x100
  4002ba:	d004      	beq.n	4002c6 <twi_master_write+0x26>
  4002bc:	e01c      	b.n	4002f8 <twi_master_write+0x58>
	//p_twi->TWI_IADR = 0;
	//p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);

	/* Send all bytes */
	while (cnt > 0) {
		status = p_twi->TWI_SR;
  4002be:	6a13      	ldr	r3, [r2, #32]
		if (status & TWI_SR_NACK) {
  4002c0:	f413 7f80 	tst.w	r3, #256	; 0x100
  4002c4:	d11a      	bne.n	4002fc <twi_master_write+0x5c>
 			return TWI_RECEIVE_NACK;
 		}

		if (!(status & TWI_SR_TXRDY)) {
  4002c6:	f013 0f04 	tst.w	r3, #4
  4002ca:	d003      	beq.n	4002d4 <twi_master_write+0x34>
 			continue;
 		}
		p_twi->TWI_THR = *buffer++;
  4002cc:	7823      	ldrb	r3, [r4, #0]
  4002ce:	6353      	str	r3, [r2, #52]	; 0x34

		cnt--;
  4002d0:	3801      	subs	r0, #1
 		}

		if (!(status & TWI_SR_TXRDY)) {
 			continue;
 		}
		p_twi->TWI_THR = *buffer++;
  4002d2:	3401      	adds	r4, #1
	/* Set internal address for remote chip */
	//p_twi->TWI_IADR = 0;
	//p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);

	/* Send all bytes */
	while (cnt > 0) {
  4002d4:	2800      	cmp	r0, #0
  4002d6:	d1f2      	bne.n	4002be <twi_master_write+0x1e>

		cnt--;
	}

	while (1) {
		status = p_twi->TWI_SR;
  4002d8:	6a13      	ldr	r3, [r2, #32]
		if (status & TWI_SR_NACK) {
  4002da:	f413 7080 	ands.w	r0, r3, #256	; 0x100
  4002de:	d10f      	bne.n	400300 <twi_master_write+0x60>
			return TWI_RECEIVE_NACK;
		}

		if (status & TWI_SR_TXRDY) {
  4002e0:	f013 0f04 	tst.w	r3, #4
  4002e4:	d0f8      	beq.n	4002d8 <twi_master_write+0x38>
			break;
		}

	}

	p_twi->TWI_CR = TWI_CR_STOP;
  4002e6:	2302      	movs	r3, #2
  4002e8:	6013      	str	r3, [r2, #0]

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
  4002ea:	6a13      	ldr	r3, [r2, #32]
  4002ec:	f013 0f01 	tst.w	r3, #1
  4002f0:	d0fb      	beq.n	4002ea <twi_master_write+0x4a>
  4002f2:	e006      	b.n	400302 <twi_master_write+0x62>
	uint32_t cnt = p_packet->length;
	uint8_t *buffer = p_packet->buffer;

	/* Check argument */
	if (cnt == 0) {
		return TWI_INVALID_ARGUMENT;
  4002f4:	2001      	movs	r0, #1
	}

	//cpu_irq_enable();

	return TWI_SUCCESS;
}
  4002f6:	4770      	bx	lr

	/* Send all bytes */
	while (cnt > 0) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
 			return TWI_RECEIVE_NACK;
  4002f8:	2005      	movs	r0, #5
  4002fa:	e002      	b.n	400302 <twi_master_write+0x62>
  4002fc:	2005      	movs	r0, #5
  4002fe:	e000      	b.n	400302 <twi_master_write+0x62>
	}

	while (1) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
  400300:	2005      	movs	r0, #5
	}

	//cpu_irq_enable();

	return TWI_SUCCESS;
}
  400302:	bc10      	pop	{r4}
  400304:	4770      	bx	lr
  400306:	bf00      	nop

00400308 <DAC_write_cv>:


#define VREF 10
#define max 1023

void DAC_write_cv(float voltage, uint8_t channel){
  400308:	b538      	push	{r3, r4, r5, lr}
  40030a:	4604      	mov	r4, r0
  40030c:	460d      	mov	r5, r1
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  40030e:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  400310:	f3bf 8f5f 	dmb	sy

	cpu_irq_disable();
  400314:	2200      	movs	r2, #0
  400316:	4b30      	ldr	r3, [pc, #192]	; (4003d8 <DAC_write_cv+0xd0>)
  400318:	701a      	strb	r2, [r3, #0]
	SPI_dac_init();
  40031a:	4b30      	ldr	r3, [pc, #192]	; (4003dc <DAC_write_cv+0xd4>)
  40031c:	4798      	blx	r3

	float float_voltage = (max*(voltage))/VREF;
	uint16_t dac_voltage = (uint16_t) float_voltage;
  40031e:	4930      	ldr	r1, [pc, #192]	; (4003e0 <DAC_write_cv+0xd8>)
  400320:	4620      	mov	r0, r4
  400322:	4b30      	ldr	r3, [pc, #192]	; (4003e4 <DAC_write_cv+0xdc>)
  400324:	4798      	blx	r3
  400326:	4b30      	ldr	r3, [pc, #192]	; (4003e8 <DAC_write_cv+0xe0>)
  400328:	4798      	blx	r3
  40032a:	b284      	uxth	r4, r0

	uint8_t low_byte;
	uint8_t high_byte;

	if (channel == CHANNEL_1){
  40032c:	b9bd      	cbnz	r5, 40035e <DAC_write_cv+0x56>
		low_byte = (uint8_t) (dac_voltage << 2);
		high_byte = ((uint8_t) (dac_voltage >> 6)) | (0x90);
		REG_PIOB_CODR |=  PIO_PER_P13;
  40032e:	4a2f      	ldr	r2, [pc, #188]	; (4003ec <DAC_write_cv+0xe4>)
  400330:	6813      	ldr	r3, [r2, #0]
  400332:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  400336:	6013      	str	r3, [r2, #0]
		low_byte = (uint8_t) (dac_voltage << 2);
		high_byte = ((uint8_t) (dac_voltage >> 6)) | (0xA0);
		REG_PIOB_CODR |=  PIO_PER_P14;
	}
	
	SPI_byteSend(high_byte);
  400338:	09a0      	lsrs	r0, r4, #6
  40033a:	f060 006f 	orn	r0, r0, #111	; 0x6f
  40033e:	b2c0      	uxtb	r0, r0
  400340:	4d2b      	ldr	r5, [pc, #172]	; (4003f0 <DAC_write_cv+0xe8>)
  400342:	47a8      	blx	r5
	SPI_byteSend(low_byte);
  400344:	00a0      	lsls	r0, r4, #2
  400346:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
  40034a:	47a8      	blx	r5
	delay_us(3);
  40034c:	2016      	movs	r0, #22
  40034e:	4b29      	ldr	r3, [pc, #164]	; (4003f4 <DAC_write_cv+0xec>)
  400350:	4798      	blx	r3

	if (channel == CHANNEL_1){
		REG_PIOB_SODR |=  PIO_PER_P13;
  400352:	4a29      	ldr	r2, [pc, #164]	; (4003f8 <DAC_write_cv+0xf0>)
  400354:	6813      	ldr	r3, [r2, #0]
  400356:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  40035a:	6013      	str	r3, [r2, #0]
  40035c:	e035      	b.n	4003ca <DAC_write_cv+0xc2>
	if (channel == CHANNEL_1){
		low_byte = (uint8_t) (dac_voltage << 2);
		high_byte = ((uint8_t) (dac_voltage >> 6)) | (0x90);
		REG_PIOB_CODR |=  PIO_PER_P13;
	}
	else if (channel == CHANNEL_2){
  40035e:	2d01      	cmp	r5, #1
  400360:	d117      	bne.n	400392 <DAC_write_cv+0x8a>
		low_byte = (uint8_t) (dac_voltage << 2);
		high_byte = ((uint8_t) (dac_voltage >> 6)) | (0xA0);
		REG_PIOB_CODR |=  PIO_PER_P13;
  400362:	4a22      	ldr	r2, [pc, #136]	; (4003ec <DAC_write_cv+0xe4>)
  400364:	6813      	ldr	r3, [r2, #0]
  400366:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  40036a:	6013      	str	r3, [r2, #0]
		low_byte = (uint8_t) (dac_voltage << 2);
		high_byte = ((uint8_t) (dac_voltage >> 6)) | (0xA0);
		REG_PIOB_CODR |=  PIO_PER_P14;
	}
	
	SPI_byteSend(high_byte);
  40036c:	09a0      	lsrs	r0, r4, #6
  40036e:	f060 005f 	orn	r0, r0, #95	; 0x5f
  400372:	b2c0      	uxtb	r0, r0
  400374:	4d1e      	ldr	r5, [pc, #120]	; (4003f0 <DAC_write_cv+0xe8>)
  400376:	47a8      	blx	r5
	SPI_byteSend(low_byte);
  400378:	00a0      	lsls	r0, r4, #2
  40037a:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
  40037e:	47a8      	blx	r5
	delay_us(3);
  400380:	2016      	movs	r0, #22
  400382:	4b1c      	ldr	r3, [pc, #112]	; (4003f4 <DAC_write_cv+0xec>)
  400384:	4798      	blx	r3

	if (channel == CHANNEL_1){
		REG_PIOB_SODR |=  PIO_PER_P13;
	}
	else if (channel == CHANNEL_2){
		REG_PIOB_SODR |=  PIO_PER_P13;
  400386:	4a1c      	ldr	r2, [pc, #112]	; (4003f8 <DAC_write_cv+0xf0>)
  400388:	6813      	ldr	r3, [r2, #0]
  40038a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  40038e:	6013      	str	r3, [r2, #0]
  400390:	e01b      	b.n	4003ca <DAC_write_cv+0xc2>
	else if (channel == CHANNEL_2){
		low_byte = (uint8_t) (dac_voltage << 2);
		high_byte = ((uint8_t) (dac_voltage >> 6)) | (0xA0);
		REG_PIOB_CODR |=  PIO_PER_P13;
	}
	else if (channel == CHANNEL_3){
  400392:	2d02      	cmp	r5, #2
		low_byte = (uint8_t) (dac_voltage << 2);
		high_byte = ((uint8_t) (dac_voltage >> 6)) | (0x90);
		REG_PIOB_CODR |=  PIO_PER_P14;
  400394:	4a15      	ldr	r2, [pc, #84]	; (4003ec <DAC_write_cv+0xe4>)
  400396:	6813      	ldr	r3, [r2, #0]
  400398:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  40039c:	6013      	str	r3, [r2, #0]
		low_byte = (uint8_t) (dac_voltage << 2);
		high_byte = ((uint8_t) (dac_voltage >> 6)) | (0xA0);
		REG_PIOB_CODR |=  PIO_PER_P14;
	}
	
	SPI_byteSend(high_byte);
  40039e:	ea4f 1094 	mov.w	r0, r4, lsr #6
  4003a2:	bf0c      	ite	eq
  4003a4:	f060 006f 	orneq	r0, r0, #111	; 0x6f
  4003a8:	f060 005f 	ornne	r0, r0, #95	; 0x5f
  4003ac:	b2c0      	uxtb	r0, r0
  4003ae:	4d10      	ldr	r5, [pc, #64]	; (4003f0 <DAC_write_cv+0xe8>)
  4003b0:	47a8      	blx	r5
	SPI_byteSend(low_byte);
  4003b2:	00a0      	lsls	r0, r4, #2
  4003b4:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
  4003b8:	47a8      	blx	r5
	delay_us(3);
  4003ba:	2016      	movs	r0, #22
  4003bc:	4b0d      	ldr	r3, [pc, #52]	; (4003f4 <DAC_write_cv+0xec>)
  4003be:	4798      	blx	r3
	}
	else if (channel == CHANNEL_3){
		REG_PIOB_SODR |=  PIO_PER_P14;
	}
	else{
		REG_PIOB_SODR |=  PIO_PER_P14;
  4003c0:	4a0d      	ldr	r2, [pc, #52]	; (4003f8 <DAC_write_cv+0xf0>)
  4003c2:	6813      	ldr	r3, [r2, #0]
  4003c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  4003c8:	6013      	str	r3, [r2, #0]
	}

	cpu_irq_enable();
  4003ca:	2201      	movs	r2, #1
  4003cc:	4b02      	ldr	r3, [pc, #8]	; (4003d8 <DAC_write_cv+0xd0>)
  4003ce:	701a      	strb	r2, [r3, #0]
  4003d0:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  4003d4:	b662      	cpsie	i
  4003d6:	bd38      	pop	{r3, r4, r5, pc}
  4003d8:	200001f4 	.word	0x200001f4
  4003dc:	00402c41 	.word	0x00402c41
  4003e0:	42cc999a 	.word	0x42cc999a
  4003e4:	00403b9d 	.word	0x00403b9d
  4003e8:	00403e3d 	.word	0x00403e3d
  4003ec:	400e1034 	.word	0x400e1034
  4003f0:	00402d51 	.word	0x00402d51
  4003f4:	20000001 	.word	0x20000001
  4003f8:	400e1030 	.word	0x400e1030

004003fc <DAC_write_gate_on>:

}

void DAC_write_gate_on(uint8_t channel){

	if (channel == CHANNEL_1){
  4003fc:	b928      	cbnz	r0, 40040a <DAC_write_gate_on+0xe>
		REG_PIOB_CODR |=  PIO_PER_P0;
  4003fe:	4a0c      	ldr	r2, [pc, #48]	; (400430 <DAC_write_gate_on+0x34>)
  400400:	6813      	ldr	r3, [r2, #0]
  400402:	f043 0301 	orr.w	r3, r3, #1
  400406:	6013      	str	r3, [r2, #0]
  400408:	4770      	bx	lr
	}
	else if (channel == CHANNEL_2){
  40040a:	2801      	cmp	r0, #1
  40040c:	d105      	bne.n	40041a <DAC_write_gate_on+0x1e>
		REG_PIOB_CODR |=  PIO_PER_P1;
  40040e:	4a08      	ldr	r2, [pc, #32]	; (400430 <DAC_write_gate_on+0x34>)
  400410:	6813      	ldr	r3, [r2, #0]
  400412:	f043 0302 	orr.w	r3, r3, #2
  400416:	6013      	str	r3, [r2, #0]
  400418:	4770      	bx	lr
	}
	else if (channel == CHANNEL_3){
  40041a:	2802      	cmp	r0, #2
		REG_PIOB_CODR |=  PIO_PER_P2;
  40041c:	4a04      	ldr	r2, [pc, #16]	; (400430 <DAC_write_gate_on+0x34>)
  40041e:	6813      	ldr	r3, [r2, #0]
  400420:	bf0c      	ite	eq
  400422:	f043 0304 	orreq.w	r3, r3, #4
	}
	else{
		REG_PIOB_CODR |=  PIO_PER_P3;
  400426:	f043 0308 	orrne.w	r3, r3, #8
  40042a:	6013      	str	r3, [r2, #0]
  40042c:	4770      	bx	lr
  40042e:	bf00      	nop
  400430:	400e1034 	.word	0x400e1034

00400434 <DAC_write_gate_off>:
// 	cpu_irq_enable();
}

void DAC_write_gate_off(uint8_t channel){

	if (channel == CHANNEL_1){
  400434:	b928      	cbnz	r0, 400442 <DAC_write_gate_off+0xe>
		REG_PIOB_SODR |=  PIO_PER_P0;
  400436:	4a0c      	ldr	r2, [pc, #48]	; (400468 <DAC_write_gate_off+0x34>)
  400438:	6813      	ldr	r3, [r2, #0]
  40043a:	f043 0301 	orr.w	r3, r3, #1
  40043e:	6013      	str	r3, [r2, #0]
  400440:	4770      	bx	lr
	}
	else if (channel == CHANNEL_2){
  400442:	2801      	cmp	r0, #1
  400444:	d105      	bne.n	400452 <DAC_write_gate_off+0x1e>
		REG_PIOB_SODR |=  PIO_PER_P1;
  400446:	4a08      	ldr	r2, [pc, #32]	; (400468 <DAC_write_gate_off+0x34>)
  400448:	6813      	ldr	r3, [r2, #0]
  40044a:	f043 0302 	orr.w	r3, r3, #2
  40044e:	6013      	str	r3, [r2, #0]
  400450:	4770      	bx	lr
	}
	else if (channel == CHANNEL_3){
  400452:	2802      	cmp	r0, #2
		REG_PIOB_SODR |=  PIO_PER_P2;
  400454:	4a04      	ldr	r2, [pc, #16]	; (400468 <DAC_write_gate_off+0x34>)
  400456:	6813      	ldr	r3, [r2, #0]
  400458:	bf0c      	ite	eq
  40045a:	f043 0304 	orreq.w	r3, r3, #4
	}
	else{
		REG_PIOB_SODR |=  PIO_PER_P3;
  40045e:	f043 0308 	orrne.w	r3, r3, #8
  400462:	6013      	str	r3, [r2, #0]
  400464:	4770      	bx	lr
  400466:	bf00      	nop
  400468:	400e1030 	.word	0x400e1030

0040046c <display_select>:
bool inverted[7] = {0,0,0,0,0,0,0};
uint16_t disp_ptr_location[7] = {0,0,0,0,0,0,0};
uint8_t curr_display = 7;

 void display_select(uint8_t d_id) {
	if(curr_display != d_id) {
  40046c:	4b4d      	ldr	r3, [pc, #308]	; (4005a4 <display_select+0x138>)
  40046e:	781b      	ldrb	r3, [r3, #0]
  400470:	4283      	cmp	r3, r0
  400472:	f000 8096 	beq.w	4005a2 <display_select+0x136>
		switch (d_id) {
  400476:	2806      	cmp	r0, #6
  400478:	f200 8083 	bhi.w	400582 <display_select+0x116>
  40047c:	e8df f000 	tbb	[pc, r0]
  400480:	39271504 	.word	0x39271504
  400484:	5d4b      	.short	0x5d4b
  400486:	6f          	.byte	0x6f
  400487:	00          	.byte	0x00
			case 0:
				REG_PIOA_CODR |= disp_sel_0;
  400488:	4b47      	ldr	r3, [pc, #284]	; (4005a8 <display_select+0x13c>)
  40048a:	681a      	ldr	r2, [r3, #0]
  40048c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
  400490:	601a      	str	r2, [r3, #0]
				REG_PIOA_CODR |= disp_sel_1;
  400492:	681a      	ldr	r2, [r3, #0]
  400494:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
  400498:	601a      	str	r2, [r3, #0]
				REG_PIOA_CODR |= disp_sel_2;
  40049a:	681a      	ldr	r2, [r3, #0]
  40049c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
  4004a0:	601a      	str	r2, [r3, #0]
				curr_display = 0;
  4004a2:	2200      	movs	r2, #0
  4004a4:	4b3f      	ldr	r3, [pc, #252]	; (4005a4 <display_select+0x138>)
  4004a6:	701a      	strb	r2, [r3, #0]
				break;
  4004a8:	4770      	bx	lr
			case 1:
				REG_PIOA_SODR |= disp_sel_0;
  4004aa:	4a40      	ldr	r2, [pc, #256]	; (4005ac <display_select+0x140>)
  4004ac:	6813      	ldr	r3, [r2, #0]
  4004ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
  4004b2:	6013      	str	r3, [r2, #0]
				REG_PIOA_CODR |= disp_sel_1;
  4004b4:	4b3c      	ldr	r3, [pc, #240]	; (4005a8 <display_select+0x13c>)
  4004b6:	681a      	ldr	r2, [r3, #0]
  4004b8:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
  4004bc:	601a      	str	r2, [r3, #0]
				REG_PIOA_CODR |= disp_sel_2;
  4004be:	681a      	ldr	r2, [r3, #0]
  4004c0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
  4004c4:	601a      	str	r2, [r3, #0]
				curr_display = 1;
  4004c6:	2201      	movs	r2, #1
  4004c8:	4b36      	ldr	r3, [pc, #216]	; (4005a4 <display_select+0x138>)
  4004ca:	701a      	strb	r2, [r3, #0]
				break;
  4004cc:	4770      	bx	lr
			case 2:
				REG_PIOA_CODR |= disp_sel_0;
  4004ce:	4b36      	ldr	r3, [pc, #216]	; (4005a8 <display_select+0x13c>)
  4004d0:	681a      	ldr	r2, [r3, #0]
  4004d2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
  4004d6:	601a      	str	r2, [r3, #0]
				REG_PIOA_SODR |= disp_sel_1;
  4004d8:	4934      	ldr	r1, [pc, #208]	; (4005ac <display_select+0x140>)
  4004da:	680a      	ldr	r2, [r1, #0]
  4004dc:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
  4004e0:	600a      	str	r2, [r1, #0]
				REG_PIOA_CODR |= disp_sel_2;
  4004e2:	681a      	ldr	r2, [r3, #0]
  4004e4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
  4004e8:	601a      	str	r2, [r3, #0]
				curr_display = 2;
  4004ea:	2202      	movs	r2, #2
  4004ec:	4b2d      	ldr	r3, [pc, #180]	; (4005a4 <display_select+0x138>)
  4004ee:	701a      	strb	r2, [r3, #0]
				break;
  4004f0:	4770      	bx	lr
			case 3:
				REG_PIOA_SODR |= disp_sel_0;
  4004f2:	4b2e      	ldr	r3, [pc, #184]	; (4005ac <display_select+0x140>)
  4004f4:	681a      	ldr	r2, [r3, #0]
  4004f6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
  4004fa:	601a      	str	r2, [r3, #0]
				REG_PIOA_SODR |= disp_sel_1;
  4004fc:	681a      	ldr	r2, [r3, #0]
  4004fe:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
  400502:	601a      	str	r2, [r3, #0]
				REG_PIOA_CODR |= disp_sel_2;
  400504:	4a28      	ldr	r2, [pc, #160]	; (4005a8 <display_select+0x13c>)
  400506:	6813      	ldr	r3, [r2, #0]
  400508:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
  40050c:	6013      	str	r3, [r2, #0]
				curr_display = 3;
  40050e:	2203      	movs	r2, #3
  400510:	4b24      	ldr	r3, [pc, #144]	; (4005a4 <display_select+0x138>)
  400512:	701a      	strb	r2, [r3, #0]
				break;
  400514:	4770      	bx	lr
			case 4:
				REG_PIOA_CODR |= disp_sel_0;
  400516:	4b24      	ldr	r3, [pc, #144]	; (4005a8 <display_select+0x13c>)
  400518:	681a      	ldr	r2, [r3, #0]
  40051a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
  40051e:	601a      	str	r2, [r3, #0]
				REG_PIOA_CODR |= disp_sel_1;
  400520:	681a      	ldr	r2, [r3, #0]
  400522:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
  400526:	601a      	str	r2, [r3, #0]
				REG_PIOA_SODR |= disp_sel_2;
  400528:	4a20      	ldr	r2, [pc, #128]	; (4005ac <display_select+0x140>)
  40052a:	6813      	ldr	r3, [r2, #0]
  40052c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
  400530:	6013      	str	r3, [r2, #0]
				curr_display = 4;
  400532:	2204      	movs	r2, #4
  400534:	4b1b      	ldr	r3, [pc, #108]	; (4005a4 <display_select+0x138>)
  400536:	701a      	strb	r2, [r3, #0]
				break;
  400538:	4770      	bx	lr
			case 5:
				REG_PIOA_SODR |= disp_sel_0;
  40053a:	4b1c      	ldr	r3, [pc, #112]	; (4005ac <display_select+0x140>)
  40053c:	681a      	ldr	r2, [r3, #0]
  40053e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
  400542:	601a      	str	r2, [r3, #0]
				REG_PIOA_CODR |= disp_sel_1;
  400544:	4918      	ldr	r1, [pc, #96]	; (4005a8 <display_select+0x13c>)
  400546:	680a      	ldr	r2, [r1, #0]
  400548:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
  40054c:	600a      	str	r2, [r1, #0]
				REG_PIOA_SODR |= disp_sel_2;
  40054e:	681a      	ldr	r2, [r3, #0]
  400550:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
  400554:	601a      	str	r2, [r3, #0]
				curr_display = 5;
  400556:	2205      	movs	r2, #5
  400558:	4b12      	ldr	r3, [pc, #72]	; (4005a4 <display_select+0x138>)
  40055a:	701a      	strb	r2, [r3, #0]
				break;
  40055c:	4770      	bx	lr
			case 6:
				REG_PIOA_CODR |= disp_sel_0;
  40055e:	4a12      	ldr	r2, [pc, #72]	; (4005a8 <display_select+0x13c>)
  400560:	6813      	ldr	r3, [r2, #0]
  400562:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
  400566:	6013      	str	r3, [r2, #0]
				REG_PIOA_SODR |= disp_sel_1;
  400568:	4b10      	ldr	r3, [pc, #64]	; (4005ac <display_select+0x140>)
  40056a:	681a      	ldr	r2, [r3, #0]
  40056c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
  400570:	601a      	str	r2, [r3, #0]
				REG_PIOA_SODR |= disp_sel_2;
  400572:	681a      	ldr	r2, [r3, #0]
  400574:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
  400578:	601a      	str	r2, [r3, #0]
				curr_display = 6;
  40057a:	2206      	movs	r2, #6
  40057c:	4b09      	ldr	r3, [pc, #36]	; (4005a4 <display_select+0x138>)
  40057e:	701a      	strb	r2, [r3, #0]
				break;
  400580:	4770      	bx	lr
			default:
				REG_PIOA_SODR |= disp_sel_0;
  400582:	4b0a      	ldr	r3, [pc, #40]	; (4005ac <display_select+0x140>)
  400584:	681a      	ldr	r2, [r3, #0]
  400586:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
  40058a:	601a      	str	r2, [r3, #0]
				REG_PIOA_SODR |= disp_sel_1;
  40058c:	681a      	ldr	r2, [r3, #0]
  40058e:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
  400592:	601a      	str	r2, [r3, #0]
				REG_PIOA_SODR |= disp_sel_2;
  400594:	681a      	ldr	r2, [r3, #0]
  400596:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
  40059a:	601a      	str	r2, [r3, #0]
				curr_display = 7;
  40059c:	2207      	movs	r2, #7
  40059e:	4b01      	ldr	r3, [pc, #4]	; (4005a4 <display_select+0x138>)
  4005a0:	701a      	strb	r2, [r3, #0]
  4005a2:	4770      	bx	lr
  4005a4:	2000000c 	.word	0x2000000c
  4005a8:	400e0e34 	.word	0x400e0e34
  4005ac:	400e0e30 	.word	0x400e0e30

004005b0 <display_command>:
		}
	}
 }

 //Used to send command to the display during operation
 void display_command(uint8_t data, uint8_t d_id){
  4005b0:	b510      	push	{r4, lr}
  4005b2:	b086      	sub	sp, #24
  4005b4:	4604      	mov	r4, r0
	 display_select(d_id);
  4005b6:	4608      	mov	r0, r1
  4005b8:	4b0a      	ldr	r3, [pc, #40]	; (4005e4 <display_command+0x34>)
  4005ba:	4798      	blx	r3

	 twi_packet_t packet_tx;
	 uint8_t command_buffer[] = {control_command, data};
  4005bc:	2300      	movs	r3, #0
  4005be:	f88d 3000 	strb.w	r3, [sp]
  4005c2:	f88d 4001 	strb.w	r4, [sp, #1]

	 packet_tx.chip        = 0x3C;		// 0x3C is slave address for display
  4005c6:	223c      	movs	r2, #60	; 0x3c
  4005c8:	f88d 2014 	strb.w	r2, [sp, #20]
	 packet_tx.addr_length = 0;
  4005cc:	9302      	str	r3, [sp, #8]
	 packet_tx.buffer      = (uint8_t *) command_buffer;
  4005ce:	f8cd d00c 	str.w	sp, [sp, #12]
	 packet_tx.length      = 2;
  4005d2:	2302      	movs	r3, #2
  4005d4:	9304      	str	r3, [sp, #16]
	 twi_master_write(BOARD_BASE_TWI, &packet_tx);
  4005d6:	a901      	add	r1, sp, #4
  4005d8:	4803      	ldr	r0, [pc, #12]	; (4005e8 <display_command+0x38>)
  4005da:	4b04      	ldr	r3, [pc, #16]	; (4005ec <display_command+0x3c>)
  4005dc:	4798      	blx	r3

 }
  4005de:	b006      	add	sp, #24
  4005e0:	bd10      	pop	{r4, pc}
  4005e2:	bf00      	nop
  4005e4:	0040046d 	.word	0x0040046d
  4005e8:	40018000 	.word	0x40018000
  4005ec:	004002a1 	.word	0x004002a1

004005f0 <display_data>:

 //used to send data to the display during operation
 void display_data(uint8_t data, uint8_t d_id){
  4005f0:	b530      	push	{r4, r5, lr}
  4005f2:	b087      	sub	sp, #28
  4005f4:	4605      	mov	r5, r0
  4005f6:	460c      	mov	r4, r1
	display_select(d_id);
  4005f8:	4608      	mov	r0, r1
  4005fa:	4b13      	ldr	r3, [pc, #76]	; (400648 <display_data+0x58>)
  4005fc:	4798      	blx	r3
	
	twi_packet_t packet_tx;
	uint8_t data_buffer[] = {control_data, data};
  4005fe:	2340      	movs	r3, #64	; 0x40
  400600:	f88d 3000 	strb.w	r3, [sp]
  400604:	f88d 5001 	strb.w	r5, [sp, #1]
	packet_tx.chip        = 0x3C;		// 0x3C is slave address for display
  400608:	233c      	movs	r3, #60	; 0x3c
  40060a:	f88d 3014 	strb.w	r3, [sp, #20]
	packet_tx.addr_length = 0;
  40060e:	2300      	movs	r3, #0
  400610:	9302      	str	r3, [sp, #8]
	packet_tx.buffer      = (uint8_t *) data_buffer;
  400612:	f8cd d00c 	str.w	sp, [sp, #12]
	packet_tx.length      = 2;
  400616:	2302      	movs	r3, #2
  400618:	9304      	str	r3, [sp, #16]
	twi_master_write(BOARD_BASE_TWI, &packet_tx);
  40061a:	a901      	add	r1, sp, #4
  40061c:	480b      	ldr	r0, [pc, #44]	; (40064c <display_data+0x5c>)
  40061e:	4b0c      	ldr	r3, [pc, #48]	; (400650 <display_data+0x60>)
  400620:	4798      	blx	r3
	disp_ptr_location[d_id] += 8;
  400622:	4b0c      	ldr	r3, [pc, #48]	; (400654 <display_data+0x64>)
  400624:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
  400628:	3308      	adds	r3, #8
  40062a:	b29b      	uxth	r3, r3
	if(disp_ptr_location[d_id] >= 4096) {
  40062c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
  400630:	d203      	bcs.n	40063a <display_data+0x4a>
	packet_tx.chip        = 0x3C;		// 0x3C is slave address for display
	packet_tx.addr_length = 0;
	packet_tx.buffer      = (uint8_t *) data_buffer;
	packet_tx.length      = 2;
	twi_master_write(BOARD_BASE_TWI, &packet_tx);
	disp_ptr_location[d_id] += 8;
  400632:	4a08      	ldr	r2, [pc, #32]	; (400654 <display_data+0x64>)
  400634:	f822 3014 	strh.w	r3, [r2, r4, lsl #1]
  400638:	e003      	b.n	400642 <display_data+0x52>
	if(disp_ptr_location[d_id] >= 4096) {
		disp_ptr_location[d_id] = 0;
  40063a:	2200      	movs	r2, #0
  40063c:	4b05      	ldr	r3, [pc, #20]	; (400654 <display_data+0x64>)
  40063e:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
	}
 }
  400642:	b007      	add	sp, #28
  400644:	bd30      	pop	{r4, r5, pc}
  400646:	bf00      	nop
  400648:	0040046d 	.word	0x0040046d
  40064c:	40018000 	.word	0x40018000
  400650:	004002a1 	.word	0x004002a1
  400654:	20000644 	.word	0x20000644

00400658 <display_reset>:

 void display_reset(uint8_t d_id){
  400658:	b538      	push	{r3, r4, r5, lr}
	display_select(d_id);
  40065a:	4b0b      	ldr	r3, [pc, #44]	; (400688 <display_reset+0x30>)
  40065c:	4798      	blx	r3
	REG_PIOA_SODR |= disp_reset; //set high
  40065e:	4c0b      	ldr	r4, [pc, #44]	; (40068c <display_reset+0x34>)
  400660:	6823      	ldr	r3, [r4, #0]
  400662:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  400666:	6023      	str	r3, [r4, #0]
	delay_ms(1);
  400668:	f641 30e7 	movw	r0, #7143	; 0x1be7
  40066c:	4d08      	ldr	r5, [pc, #32]	; (400690 <display_reset+0x38>)
  40066e:	47a8      	blx	r5
	REG_PIOA_CODR |= disp_reset; //set low
  400670:	4a08      	ldr	r2, [pc, #32]	; (400694 <display_reset+0x3c>)
  400672:	6813      	ldr	r3, [r2, #0]
  400674:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  400678:	6013      	str	r3, [r2, #0]
	delay_ms(10);
  40067a:	4807      	ldr	r0, [pc, #28]	; (400698 <display_reset+0x40>)
  40067c:	47a8      	blx	r5
	REG_PIOA_SODR |= disp_reset; //set high and hold for normal operation
  40067e:	6823      	ldr	r3, [r4, #0]
  400680:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  400684:	6023      	str	r3, [r4, #0]
  400686:	bd38      	pop	{r3, r4, r5, pc}
  400688:	0040046d 	.word	0x0040046d
  40068c:	400e0e30 	.word	0x400e0e30
  400690:	20000001 	.word	0x20000001
  400694:	400e0e34 	.word	0x400e0e34
  400698:	00011705 	.word	0x00011705

0040069c <display_init>:
 }

 void display_init(uint8_t d_id) {
  40069c:	b538      	push	{r3, r4, r5, lr}
  40069e:	4605      	mov	r5, r0
	// Reset display to begin
	display_reset(d_id);
  4006a0:	4b28      	ldr	r3, [pc, #160]	; (400744 <display_init+0xa8>)
  4006a2:	4798      	blx	r3

	// Init settings for OLED
	display_command(SSD1306_DISPLAYOFF, d_id);
  4006a4:	4629      	mov	r1, r5
  4006a6:	20ae      	movs	r0, #174	; 0xae
  4006a8:	4c27      	ldr	r4, [pc, #156]	; (400748 <display_init+0xac>)
  4006aa:	47a0      	blx	r4

	display_command(SSD1306_SETDISPLAYCLOCKDIV, d_id);
  4006ac:	4629      	mov	r1, r5
  4006ae:	20d5      	movs	r0, #213	; 0xd5
  4006b0:	47a0      	blx	r4
	display_command(0x80, d_id);
  4006b2:	4629      	mov	r1, r5
  4006b4:	2080      	movs	r0, #128	; 0x80
  4006b6:	47a0      	blx	r4

	// Set no display offset
	display_command(SSD1306_SETDISPLAYOFFSET, d_id);
  4006b8:	4629      	mov	r1, r5
  4006ba:	20d3      	movs	r0, #211	; 0xd3
  4006bc:	47a0      	blx	r4
	display_command(0x00, d_id);
  4006be:	4629      	mov	r1, r5
  4006c0:	2000      	movs	r0, #0
  4006c2:	47a0      	blx	r4

	// Start at line 0
	display_command(SSD1306_SETSTARTLINE, d_id);
  4006c4:	4629      	mov	r1, r5
  4006c6:	2040      	movs	r0, #64	; 0x40
  4006c8:	47a0      	blx	r4

	display_command(SSD1306_CHARGEPUMP, d_id);
  4006ca:	4629      	mov	r1, r5
  4006cc:	208d      	movs	r0, #141	; 0x8d
  4006ce:	47a0      	blx	r4
	display_command(0x14, d_id);	//internal VCC from charge pump
  4006d0:	4629      	mov	r1, r5
  4006d2:	2014      	movs	r0, #20
  4006d4:	47a0      	blx	r4

	// Set segment remap
	display_command(0xA0, d_id);
  4006d6:	4629      	mov	r1, r5
  4006d8:	20a0      	movs	r0, #160	; 0xa0
  4006da:	47a0      	blx	r4

	display_command(SSD1306_SETCOMPINS, d_id);
  4006dc:	4629      	mov	r1, r5
  4006de:	20da      	movs	r0, #218	; 0xda
  4006e0:	47a0      	blx	r4
	display_command(0x02, d_id);
  4006e2:	4629      	mov	r1, r5
  4006e4:	2002      	movs	r0, #2
  4006e6:	47a0      	blx	r4

	display_command(SSD1306_SETCONTRAST, d_id);
  4006e8:	4629      	mov	r1, r5
  4006ea:	2081      	movs	r0, #129	; 0x81
  4006ec:	47a0      	blx	r4
	display_command(0xCF, d_id);
  4006ee:	4629      	mov	r1, r5
  4006f0:	20cf      	movs	r0, #207	; 0xcf
  4006f2:	47a0      	blx	r4

	display_command(SSD1306_SETPRECHARGE, d_id);
  4006f4:	4629      	mov	r1, r5
  4006f6:	20d9      	movs	r0, #217	; 0xd9
  4006f8:	47a0      	blx	r4
	display_command(0xF1, d_id);
  4006fa:	4629      	mov	r1, r5
  4006fc:	20f1      	movs	r0, #241	; 0xf1
  4006fe:	47a0      	blx	r4

	display_command(SSD1306_SETVCOMDETECT, d_id);
  400700:	4629      	mov	r1, r5
  400702:	20db      	movs	r0, #219	; 0xdb
  400704:	47a0      	blx	r4
	display_command(0x40, d_id);
  400706:	4629      	mov	r1, r5
  400708:	2040      	movs	r0, #64	; 0x40
  40070a:	47a0      	blx	r4

	display_command(SSD1306_NORMALDISPLAY, d_id);
  40070c:	4629      	mov	r1, r5
  40070e:	20a6      	movs	r0, #166	; 0xa6
  400710:	47a0      	blx	r4
	display_command(SSD1306_DISPLAYON, d_id);
  400712:	4629      	mov	r1, r5
  400714:	20af      	movs	r0, #175	; 0xaf
  400716:	47a0      	blx	r4
	display_command(SSD1306_MEMORYMODE, d_id);
  400718:	4629      	mov	r1, r5
  40071a:	2020      	movs	r0, #32
  40071c:	47a0      	blx	r4
	display_command(SSD1306_VERTADDR, d_id);
  40071e:	4629      	mov	r1, r5
  400720:	2001      	movs	r0, #1
  400722:	47a0      	blx	r4

	// Adjusting for 32 height display
	display_command(SSD1306_EDITPAGEADDR, d_id);
  400724:	4629      	mov	r1, r5
  400726:	2022      	movs	r0, #34	; 0x22
  400728:	47a0      	blx	r4
	display_command(0, d_id);
  40072a:	4629      	mov	r1, r5
  40072c:	2000      	movs	r0, #0
  40072e:	47a0      	blx	r4
	display_command(3, d_id);
  400730:	4629      	mov	r1, r5
  400732:	2003      	movs	r0, #3
  400734:	47a0      	blx	r4

	display_command(SSD1306_SETMULTIPLEX, d_id);
  400736:	4629      	mov	r1, r5
  400738:	20a8      	movs	r0, #168	; 0xa8
  40073a:	47a0      	blx	r4
	display_command(31, d_id);
  40073c:	4629      	mov	r1, r5
  40073e:	201f      	movs	r0, #31
  400740:	47a0      	blx	r4
  400742:	bd38      	pop	{r3, r4, r5, pc}
  400744:	00400659 	.word	0x00400659
  400748:	004005b1 	.word	0x004005b1

0040074c <all_displays_init>:
 }

 void all_displays_init(void) {
  40074c:	b508      	push	{r3, lr}

	// Configure registers used for display mux lines
	REG_PIOA_PER |= disp_sel_0; //enable PIO controller on PA28
  40074e:	4a13      	ldr	r2, [pc, #76]	; (40079c <all_displays_init+0x50>)
  400750:	6813      	ldr	r3, [r2, #0]
  400752:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
  400756:	6013      	str	r3, [r2, #0]
	REG_PIOA_OER |= disp_sel_0; //enable output on pin PA28
  400758:	4b11      	ldr	r3, [pc, #68]	; (4007a0 <all_displays_init+0x54>)
  40075a:	6819      	ldr	r1, [r3, #0]
  40075c:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
  400760:	6019      	str	r1, [r3, #0]
	REG_PIOA_PER |= disp_sel_1; //enable PIO controller on PA29
  400762:	6811      	ldr	r1, [r2, #0]
  400764:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
  400768:	6011      	str	r1, [r2, #0]
	REG_PIOA_OER |= disp_sel_1; //enable output on pin PA29
  40076a:	6819      	ldr	r1, [r3, #0]
  40076c:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
  400770:	6019      	str	r1, [r3, #0]
	REG_PIOA_PER |= disp_sel_2; //enable PIO controller on PA30
  400772:	6811      	ldr	r1, [r2, #0]
  400774:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
  400778:	6011      	str	r1, [r2, #0]
	REG_PIOA_OER |= disp_sel_2; //enable output on pin PA30
  40077a:	6819      	ldr	r1, [r3, #0]
  40077c:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
  400780:	6019      	str	r1, [r3, #0]

	// Configure register used for display reset
	REG_PIOA_PER |= disp_reset; //enable PIO controller on PA31
  400782:	6811      	ldr	r1, [r2, #0]
  400784:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
  400788:	6011      	str	r1, [r2, #0]
	REG_PIOA_OER |= disp_reset; //enable output on pin PA31
  40078a:	681a      	ldr	r2, [r3, #0]
  40078c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
  400790:	601a      	str	r2, [r3, #0]

// 	display_init(0);
//   display_init(1);
 	display_init(2);
  400792:	2002      	movs	r0, #2
  400794:	4b03      	ldr	r3, [pc, #12]	; (4007a4 <all_displays_init+0x58>)
  400796:	4798      	blx	r3
  400798:	bd08      	pop	{r3, pc}
  40079a:	bf00      	nop
  40079c:	400e0e00 	.word	0x400e0e00
  4007a0:	400e0e10 	.word	0x400e0e10
  4007a4:	0040069d 	.word	0x0040069d

004007a8 <finish_display>:
		inverted[d_id] = 0;
	}
 }

 void finish_display(uint8_t d_id) {
	while(disp_ptr_location[d_id] > 0 && disp_ptr_location[d_id] <= 4096) {
  4007a8:	4b0e      	ldr	r3, [pc, #56]	; (4007e4 <finish_display+0x3c>)
  4007aa:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
  4007ae:	3b01      	subs	r3, #1
  4007b0:	b29b      	uxth	r3, r3
  4007b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
  4007b6:	d213      	bcs.n	4007e0 <finish_display+0x38>
		display_command(SSD1306_NORMALDISPLAY, d_id);
		inverted[d_id] = 0;
	}
 }

 void finish_display(uint8_t d_id) {
  4007b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4007bc:	4605      	mov	r5, r0
  4007be:	4604      	mov	r4, r0
	while(disp_ptr_location[d_id] > 0 && disp_ptr_location[d_id] <= 4096) {
		display_data(0, d_id);
  4007c0:	f04f 0800 	mov.w	r8, #0
  4007c4:	4f08      	ldr	r7, [pc, #32]	; (4007e8 <finish_display+0x40>)
		inverted[d_id] = 0;
	}
 }

 void finish_display(uint8_t d_id) {
	while(disp_ptr_location[d_id] > 0 && disp_ptr_location[d_id] <= 4096) {
  4007c6:	4e07      	ldr	r6, [pc, #28]	; (4007e4 <finish_display+0x3c>)
		display_data(0, d_id);
  4007c8:	4621      	mov	r1, r4
  4007ca:	4640      	mov	r0, r8
  4007cc:	47b8      	blx	r7
		inverted[d_id] = 0;
	}
 }

 void finish_display(uint8_t d_id) {
	while(disp_ptr_location[d_id] > 0 && disp_ptr_location[d_id] <= 4096) {
  4007ce:	f836 3015 	ldrh.w	r3, [r6, r5, lsl #1]
  4007d2:	3b01      	subs	r3, #1
  4007d4:	b29b      	uxth	r3, r3
  4007d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
  4007da:	d3f5      	bcc.n	4007c8 <finish_display+0x20>
  4007dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4007e0:	4770      	bx	lr
  4007e2:	bf00      	nop
  4007e4:	20000644 	.word	0x20000644
  4007e8:	004005f1 	.word	0x004005f1

004007ec <display_char>:
	finish_display(d_id);
	finish_display(d_id);
 }

  // Displays 1 byte of space and 3 bytes of character at a time
 void display_char(char input, uint8_t font_size, uint8_t d_id) {
  4007ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4007f0:	b085      	sub	sp, #20
  4007f2:	9201      	str	r2, [sp, #4]
	  // Lets us customize our space width, input parameter can be added if needed
	if(input == ' ') {
  4007f4:	2820      	cmp	r0, #32
  4007f6:	d108      	bne.n	40080a <display_char+0x1e>
  4007f8:	2408      	movs	r4, #8
		int i;
		for(i = 8; i > 0; i--) {
			display_data(0, d_id);
  4007fa:	2600      	movs	r6, #0
  4007fc:	4da6      	ldr	r5, [pc, #664]	; (400a98 <display_char+0x2ac>)
  4007fe:	9901      	ldr	r1, [sp, #4]
  400800:	4630      	mov	r0, r6
  400802:	47a8      	blx	r5
  // Displays 1 byte of space and 3 bytes of character at a time
 void display_char(char input, uint8_t font_size, uint8_t d_id) {
	  // Lets us customize our space width, input parameter can be added if needed
	if(input == ' ') {
		int i;
		for(i = 8; i > 0; i--) {
  400804:	3c01      	subs	r4, #1
  400806:	d1fa      	bne.n	4007fe <display_char+0x12>
  400808:	e142      	b.n	400a90 <display_char+0x2a4>
  40080a:	4682      	mov	sl, r0
	else {
		uint16_t font_index = 0;
		uint8_t byte_1;
		uint8_t byte_2;
		uint8_t byte_3;
		if(font_size == 28) {
  40080c:	291c      	cmp	r1, #28
  40080e:	d141      	bne.n	400894 <display_char+0xa8>
			uint16_t width = getWidth_28();
  400810:	4ba2      	ldr	r3, [pc, #648]	; (400a9c <display_char+0x2b0>)
  400812:	4798      	blx	r3
  400814:	fa1f fb80 	uxth.w	fp, r0
			while (font_index < width) {
  400818:	f1bb 0f00 	cmp.w	fp, #0
  40081c:	f000 8138 	beq.w	400a90 <display_char+0x2a4>
				if(input != '#' && input != 'b') {
					display_data(0, d_id);
				}
				byte_1 = getByte_28(input, font_index);
				byte_2 = getByte_28(input, font_index + width);
				byte_3 = getByte_28(input, font_index + 2*width);
  400820:	ea4f 034b 	mov.w	r3, fp, lsl #1
  400824:	fa1f f983 	uxth.w	r9, r3
  400828:	465c      	mov	r4, fp
  40082a:	2600      	movs	r6, #0
			while (font_index < width) {
				//Sharps and flats are elevated, rest of characters are not
				if(input != '#' && input != 'b') {
					display_data(0, d_id);
				}
				byte_1 = getByte_28(input, font_index);
  40082c:	f8df 827c 	ldr.w	r8, [pc, #636]	; 400aac <display_char+0x2c0>
				byte_2 = getByte_28(input, font_index + width);
				byte_3 = getByte_28(input, font_index + 2*width);
				display_data(byte_1, d_id);
  400830:	4f99      	ldr	r7, [pc, #612]	; (400a98 <display_char+0x2ac>)
  400832:	464b      	mov	r3, r9
  400834:	46d9      	mov	r9, fp
  400836:	469b      	mov	fp, r3
  400838:	b2b5      	uxth	r5, r6
		uint8_t byte_3;
		if(font_size == 28) {
			uint16_t width = getWidth_28();
			while (font_index < width) {
				//Sharps and flats are elevated, rest of characters are not
				if(input != '#' && input != 'b') {
  40083a:	f1ba 0f23 	cmp.w	sl, #35	; 0x23
  40083e:	f000 80bb 	beq.w	4009b8 <display_char+0x1cc>
  400842:	f1ba 0f62 	cmp.w	sl, #98	; 0x62
  400846:	f000 809f 	beq.w	400988 <display_char+0x19c>
					display_data(0, d_id);
  40084a:	9901      	ldr	r1, [sp, #4]
  40084c:	2000      	movs	r0, #0
  40084e:	47b8      	blx	r7
				}
				byte_1 = getByte_28(input, font_index);
  400850:	4629      	mov	r1, r5
  400852:	4650      	mov	r0, sl
  400854:	47c0      	blx	r8
  400856:	9002      	str	r0, [sp, #8]
				byte_2 = getByte_28(input, font_index + width);
  400858:	4621      	mov	r1, r4
  40085a:	4650      	mov	r0, sl
  40085c:	47c0      	blx	r8
  40085e:	9003      	str	r0, [sp, #12]
				byte_3 = getByte_28(input, font_index + 2*width);
  400860:	eb05 010b 	add.w	r1, r5, fp
  400864:	b289      	uxth	r1, r1
  400866:	4650      	mov	r0, sl
  400868:	47c0      	blx	r8
  40086a:	4605      	mov	r5, r0
				display_data(byte_1, d_id);
  40086c:	9901      	ldr	r1, [sp, #4]
  40086e:	9802      	ldr	r0, [sp, #8]
  400870:	47b8      	blx	r7
				display_data(byte_2, d_id);
  400872:	9901      	ldr	r1, [sp, #4]
  400874:	9803      	ldr	r0, [sp, #12]
  400876:	47b8      	blx	r7
				display_data(byte_3, d_id);
  400878:	9901      	ldr	r1, [sp, #4]
  40087a:	4628      	mov	r0, r5
  40087c:	47b8      	blx	r7
  40087e:	e002      	b.n	400886 <display_char+0x9a>
				//Sharps and flats are elevated, rest of characters are not
				if(input == '#' || input == 'b') {
					display_data(0, d_id);
  400880:	9901      	ldr	r1, [sp, #4]
  400882:	2000      	movs	r0, #0
  400884:	47b8      	blx	r7
  400886:	3601      	adds	r6, #1
  400888:	3401      	adds	r4, #1
  40088a:	b2a4      	uxth	r4, r4
		uint8_t byte_1;
		uint8_t byte_2;
		uint8_t byte_3;
		if(font_size == 28) {
			uint16_t width = getWidth_28();
			while (font_index < width) {
  40088c:	b2b3      	uxth	r3, r6
  40088e:	454b      	cmp	r3, r9
  400890:	d3d2      	bcc.n	400838 <display_char+0x4c>
  400892:	e0fd      	b.n	400a90 <display_char+0x2a4>
				}
				font_index++;
			}
		}

		else if(font_size == 22) {
  400894:	2916      	cmp	r1, #22
  400896:	d141      	bne.n	40091c <display_char+0x130>
			uint16_t width = getWidth_22();
  400898:	4b81      	ldr	r3, [pc, #516]	; (400aa0 <display_char+0x2b4>)
  40089a:	4798      	blx	r3
  40089c:	fa1f fb80 	uxth.w	fp, r0
			while (font_index < width) {
  4008a0:	f1bb 0f00 	cmp.w	fp, #0
  4008a4:	f000 80f4 	beq.w	400a90 <display_char+0x2a4>
				if(input != '#' && input != 'b') {
					display_data(0, d_id);
				}
				byte_1 = getByte_22(input, font_index);
				byte_2 = getByte_22(input, font_index + width);
				byte_3 = getByte_22(input, font_index + 2*width);
  4008a8:	ea4f 034b 	mov.w	r3, fp, lsl #1
  4008ac:	fa1f f983 	uxth.w	r9, r3
  4008b0:	465c      	mov	r4, fp
  4008b2:	2600      	movs	r6, #0
			while (font_index < width) {
				//Sharps and flats are elevated, rest of characters are not
				if(input != '#' && input != 'b') {
					display_data(0, d_id);
				}
				byte_1 = getByte_22(input, font_index);
  4008b4:	f8df 81f8 	ldr.w	r8, [pc, #504]	; 400ab0 <display_char+0x2c4>
				byte_2 = getByte_22(input, font_index + width);
				byte_3 = getByte_22(input, font_index + 2*width);
				display_data(byte_1, d_id);
  4008b8:	4f77      	ldr	r7, [pc, #476]	; (400a98 <display_char+0x2ac>)
  4008ba:	464b      	mov	r3, r9
  4008bc:	46d9      	mov	r9, fp
  4008be:	469b      	mov	fp, r3
  4008c0:	b2b5      	uxth	r5, r6

		else if(font_size == 22) {
			uint16_t width = getWidth_22();
			while (font_index < width) {
				//Sharps and flats are elevated, rest of characters are not
				if(input != '#' && input != 'b') {
  4008c2:	f1ba 0f23 	cmp.w	sl, #35	; 0x23
  4008c6:	f000 808f 	beq.w	4009e8 <display_char+0x1fc>
  4008ca:	f1ba 0f62 	cmp.w	sl, #98	; 0x62
  4008ce:	f000 80a3 	beq.w	400a18 <display_char+0x22c>
					display_data(0, d_id);
  4008d2:	9901      	ldr	r1, [sp, #4]
  4008d4:	2000      	movs	r0, #0
  4008d6:	47b8      	blx	r7
				}
				byte_1 = getByte_22(input, font_index);
  4008d8:	4629      	mov	r1, r5
  4008da:	4650      	mov	r0, sl
  4008dc:	47c0      	blx	r8
  4008de:	9002      	str	r0, [sp, #8]
				byte_2 = getByte_22(input, font_index + width);
  4008e0:	4621      	mov	r1, r4
  4008e2:	4650      	mov	r0, sl
  4008e4:	47c0      	blx	r8
  4008e6:	9003      	str	r0, [sp, #12]
				byte_3 = getByte_22(input, font_index + 2*width);
  4008e8:	eb05 010b 	add.w	r1, r5, fp
  4008ec:	b289      	uxth	r1, r1
  4008ee:	4650      	mov	r0, sl
  4008f0:	47c0      	blx	r8
  4008f2:	4605      	mov	r5, r0
				display_data(byte_1, d_id);
  4008f4:	9901      	ldr	r1, [sp, #4]
  4008f6:	9802      	ldr	r0, [sp, #8]
  4008f8:	47b8      	blx	r7
				display_data(byte_2, d_id);
  4008fa:	9901      	ldr	r1, [sp, #4]
  4008fc:	9803      	ldr	r0, [sp, #12]
  4008fe:	47b8      	blx	r7
				display_data(byte_3, d_id);
  400900:	9901      	ldr	r1, [sp, #4]
  400902:	4628      	mov	r0, r5
  400904:	47b8      	blx	r7
  400906:	e002      	b.n	40090e <display_char+0x122>
				//Sharps and flats are elevated, rest of characters are not
				if(input == '#' || input == 'b') {
					display_data(0, d_id);
  400908:	9901      	ldr	r1, [sp, #4]
  40090a:	2000      	movs	r0, #0
  40090c:	47b8      	blx	r7
  40090e:	3601      	adds	r6, #1
  400910:	3401      	adds	r4, #1
  400912:	b2a4      	uxth	r4, r4
			}
		}

		else if(font_size == 22) {
			uint16_t width = getWidth_22();
			while (font_index < width) {
  400914:	b2b3      	uxth	r3, r6
  400916:	4599      	cmp	r9, r3
  400918:	d8d2      	bhi.n	4008c0 <display_char+0xd4>
  40091a:	e0b9      	b.n	400a90 <display_char+0x2a4>
			}
		}

		// Defaults to 18 to reduce errors.
		else {
			uint16_t width = getWidth_18();
  40091c:	4b61      	ldr	r3, [pc, #388]	; (400aa4 <display_char+0x2b8>)
  40091e:	4798      	blx	r3
  400920:	fa1f f980 	uxth.w	r9, r0
			while (font_index < width) {
  400924:	f1b9 0f00 	cmp.w	r9, #0
  400928:	f000 80b2 	beq.w	400a90 <display_char+0x2a4>
  40092c:	464d      	mov	r5, r9
  40092e:	2400      	movs	r4, #0
				//Sharps and flats are elevated, rest of characters are not
				if(input != '#' && input != 'b') {
					display_data(0, d_id);
				}
				display_data(0, d_id);
  400930:	46a0      	mov	r8, r4
  400932:	4e59      	ldr	r6, [pc, #356]	; (400a98 <display_char+0x2ac>)
				byte_1 = getByte_18(input, font_index);
  400934:	4f5c      	ldr	r7, [pc, #368]	; (400aa8 <display_char+0x2bc>)
  400936:	f8dd b004 	ldr.w	fp, [sp, #4]
		// Defaults to 18 to reduce errors.
		else {
			uint16_t width = getWidth_18();
			while (font_index < width) {
				//Sharps and flats are elevated, rest of characters are not
				if(input != '#' && input != 'b') {
  40093a:	f1ba 0f23 	cmp.w	sl, #35	; 0x23
  40093e:	f000 8083 	beq.w	400a48 <display_char+0x25c>
  400942:	f1ba 0f62 	cmp.w	sl, #98	; 0x62
  400946:	f000 8091 	beq.w	400a6c <display_char+0x280>
					display_data(0, d_id);
  40094a:	4659      	mov	r1, fp
  40094c:	4640      	mov	r0, r8
  40094e:	47b0      	blx	r6
				}
				display_data(0, d_id);
  400950:	4659      	mov	r1, fp
  400952:	4640      	mov	r0, r8
  400954:	47b0      	blx	r6
				byte_1 = getByte_18(input, font_index);
  400956:	4621      	mov	r1, r4
  400958:	4650      	mov	r0, sl
  40095a:	47b8      	blx	r7
  40095c:	9001      	str	r0, [sp, #4]
				byte_2 = getByte_18(input, font_index + width);
  40095e:	4629      	mov	r1, r5
  400960:	4650      	mov	r0, sl
  400962:	47b8      	blx	r7
  400964:	9002      	str	r0, [sp, #8]
				display_data(byte_1, d_id);
  400966:	4659      	mov	r1, fp
  400968:	9801      	ldr	r0, [sp, #4]
  40096a:	47b0      	blx	r6
				display_data(byte_2, d_id);
  40096c:	4659      	mov	r1, fp
  40096e:	9802      	ldr	r0, [sp, #8]
  400970:	47b0      	blx	r6
  400972:	e002      	b.n	40097a <display_char+0x18e>
				//Sharps and flats are elevated, rest of characters are not
				if(input == '#' || input == 'b') {
					display_data(0, d_id);
  400974:	4659      	mov	r1, fp
  400976:	4640      	mov	r0, r8
  400978:	47b0      	blx	r6
				}
				font_index++;
  40097a:	3401      	adds	r4, #1
  40097c:	b2a4      	uxth	r4, r4
  40097e:	3501      	adds	r5, #1
  400980:	b2ad      	uxth	r5, r5
		}

		// Defaults to 18 to reduce errors.
		else {
			uint16_t width = getWidth_18();
			while (font_index < width) {
  400982:	45a1      	cmp	r9, r4
  400984:	d1d9      	bne.n	40093a <display_char+0x14e>
  400986:	e083      	b.n	400a90 <display_char+0x2a4>
			while (font_index < width) {
				//Sharps and flats are elevated, rest of characters are not
				if(input != '#' && input != 'b') {
					display_data(0, d_id);
				}
				byte_1 = getByte_28(input, font_index);
  400988:	4629      	mov	r1, r5
  40098a:	2062      	movs	r0, #98	; 0x62
  40098c:	47c0      	blx	r8
  40098e:	9002      	str	r0, [sp, #8]
				byte_2 = getByte_28(input, font_index + width);
  400990:	4621      	mov	r1, r4
  400992:	2062      	movs	r0, #98	; 0x62
  400994:	47c0      	blx	r8
  400996:	9003      	str	r0, [sp, #12]
				byte_3 = getByte_28(input, font_index + 2*width);
  400998:	eb05 010b 	add.w	r1, r5, fp
  40099c:	b289      	uxth	r1, r1
  40099e:	2062      	movs	r0, #98	; 0x62
  4009a0:	47c0      	blx	r8
  4009a2:	4605      	mov	r5, r0
				display_data(byte_1, d_id);
  4009a4:	9901      	ldr	r1, [sp, #4]
  4009a6:	9802      	ldr	r0, [sp, #8]
  4009a8:	47b8      	blx	r7
				display_data(byte_2, d_id);
  4009aa:	9901      	ldr	r1, [sp, #4]
  4009ac:	9803      	ldr	r0, [sp, #12]
  4009ae:	47b8      	blx	r7
				display_data(byte_3, d_id);
  4009b0:	9901      	ldr	r1, [sp, #4]
  4009b2:	4628      	mov	r0, r5
  4009b4:	47b8      	blx	r7
  4009b6:	e763      	b.n	400880 <display_char+0x94>
			while (font_index < width) {
				//Sharps and flats are elevated, rest of characters are not
				if(input != '#' && input != 'b') {
					display_data(0, d_id);
				}
				byte_1 = getByte_28(input, font_index);
  4009b8:	4629      	mov	r1, r5
  4009ba:	2023      	movs	r0, #35	; 0x23
  4009bc:	47c0      	blx	r8
  4009be:	9002      	str	r0, [sp, #8]
				byte_2 = getByte_28(input, font_index + width);
  4009c0:	4621      	mov	r1, r4
  4009c2:	2023      	movs	r0, #35	; 0x23
  4009c4:	47c0      	blx	r8
  4009c6:	9003      	str	r0, [sp, #12]
				byte_3 = getByte_28(input, font_index + 2*width);
  4009c8:	eb05 010b 	add.w	r1, r5, fp
  4009cc:	b289      	uxth	r1, r1
  4009ce:	2023      	movs	r0, #35	; 0x23
  4009d0:	47c0      	blx	r8
  4009d2:	4605      	mov	r5, r0
				display_data(byte_1, d_id);
  4009d4:	9901      	ldr	r1, [sp, #4]
  4009d6:	9802      	ldr	r0, [sp, #8]
  4009d8:	47b8      	blx	r7
				display_data(byte_2, d_id);
  4009da:	9901      	ldr	r1, [sp, #4]
  4009dc:	9803      	ldr	r0, [sp, #12]
  4009de:	47b8      	blx	r7
				display_data(byte_3, d_id);
  4009e0:	9901      	ldr	r1, [sp, #4]
  4009e2:	4628      	mov	r0, r5
  4009e4:	47b8      	blx	r7
  4009e6:	e74b      	b.n	400880 <display_char+0x94>
			while (font_index < width) {
				//Sharps and flats are elevated, rest of characters are not
				if(input != '#' && input != 'b') {
					display_data(0, d_id);
				}
				byte_1 = getByte_22(input, font_index);
  4009e8:	4629      	mov	r1, r5
  4009ea:	2023      	movs	r0, #35	; 0x23
  4009ec:	47c0      	blx	r8
  4009ee:	9002      	str	r0, [sp, #8]
				byte_2 = getByte_22(input, font_index + width);
  4009f0:	4621      	mov	r1, r4
  4009f2:	2023      	movs	r0, #35	; 0x23
  4009f4:	47c0      	blx	r8
  4009f6:	9003      	str	r0, [sp, #12]
				byte_3 = getByte_22(input, font_index + 2*width);
  4009f8:	eb05 010b 	add.w	r1, r5, fp
  4009fc:	b289      	uxth	r1, r1
  4009fe:	2023      	movs	r0, #35	; 0x23
  400a00:	47c0      	blx	r8
  400a02:	4605      	mov	r5, r0
				display_data(byte_1, d_id);
  400a04:	9901      	ldr	r1, [sp, #4]
  400a06:	9802      	ldr	r0, [sp, #8]
  400a08:	47b8      	blx	r7
				display_data(byte_2, d_id);
  400a0a:	9901      	ldr	r1, [sp, #4]
  400a0c:	9803      	ldr	r0, [sp, #12]
  400a0e:	47b8      	blx	r7
				display_data(byte_3, d_id);
  400a10:	9901      	ldr	r1, [sp, #4]
  400a12:	4628      	mov	r0, r5
  400a14:	47b8      	blx	r7
  400a16:	e777      	b.n	400908 <display_char+0x11c>
			while (font_index < width) {
				//Sharps and flats are elevated, rest of characters are not
				if(input != '#' && input != 'b') {
					display_data(0, d_id);
				}
				byte_1 = getByte_22(input, font_index);
  400a18:	4629      	mov	r1, r5
  400a1a:	2062      	movs	r0, #98	; 0x62
  400a1c:	47c0      	blx	r8
  400a1e:	9002      	str	r0, [sp, #8]
				byte_2 = getByte_22(input, font_index + width);
  400a20:	4621      	mov	r1, r4
  400a22:	2062      	movs	r0, #98	; 0x62
  400a24:	47c0      	blx	r8
  400a26:	9003      	str	r0, [sp, #12]
				byte_3 = getByte_22(input, font_index + 2*width);
  400a28:	eb05 010b 	add.w	r1, r5, fp
  400a2c:	b289      	uxth	r1, r1
  400a2e:	2062      	movs	r0, #98	; 0x62
  400a30:	47c0      	blx	r8
  400a32:	4605      	mov	r5, r0
				display_data(byte_1, d_id);
  400a34:	9901      	ldr	r1, [sp, #4]
  400a36:	9802      	ldr	r0, [sp, #8]
  400a38:	47b8      	blx	r7
				display_data(byte_2, d_id);
  400a3a:	9901      	ldr	r1, [sp, #4]
  400a3c:	9803      	ldr	r0, [sp, #12]
  400a3e:	47b8      	blx	r7
				display_data(byte_3, d_id);
  400a40:	9901      	ldr	r1, [sp, #4]
  400a42:	4628      	mov	r0, r5
  400a44:	47b8      	blx	r7
  400a46:	e75f      	b.n	400908 <display_char+0x11c>
			while (font_index < width) {
				//Sharps and flats are elevated, rest of characters are not
				if(input != '#' && input != 'b') {
					display_data(0, d_id);
				}
				display_data(0, d_id);
  400a48:	4659      	mov	r1, fp
  400a4a:	4640      	mov	r0, r8
  400a4c:	47b0      	blx	r6
				byte_1 = getByte_18(input, font_index);
  400a4e:	4621      	mov	r1, r4
  400a50:	2023      	movs	r0, #35	; 0x23
  400a52:	47b8      	blx	r7
  400a54:	9001      	str	r0, [sp, #4]
				byte_2 = getByte_18(input, font_index + width);
  400a56:	4629      	mov	r1, r5
  400a58:	2023      	movs	r0, #35	; 0x23
  400a5a:	47b8      	blx	r7
  400a5c:	9002      	str	r0, [sp, #8]
				display_data(byte_1, d_id);
  400a5e:	4659      	mov	r1, fp
  400a60:	9801      	ldr	r0, [sp, #4]
  400a62:	47b0      	blx	r6
				display_data(byte_2, d_id);
  400a64:	4659      	mov	r1, fp
  400a66:	9802      	ldr	r0, [sp, #8]
  400a68:	47b0      	blx	r6
  400a6a:	e783      	b.n	400974 <display_char+0x188>
			while (font_index < width) {
				//Sharps and flats are elevated, rest of characters are not
				if(input != '#' && input != 'b') {
					display_data(0, d_id);
				}
				display_data(0, d_id);
  400a6c:	4659      	mov	r1, fp
  400a6e:	4640      	mov	r0, r8
  400a70:	47b0      	blx	r6
				byte_1 = getByte_18(input, font_index);
  400a72:	4621      	mov	r1, r4
  400a74:	2062      	movs	r0, #98	; 0x62
  400a76:	47b8      	blx	r7
  400a78:	9001      	str	r0, [sp, #4]
				byte_2 = getByte_18(input, font_index + width);
  400a7a:	4629      	mov	r1, r5
  400a7c:	2062      	movs	r0, #98	; 0x62
  400a7e:	47b8      	blx	r7
  400a80:	9002      	str	r0, [sp, #8]
				display_data(byte_1, d_id);
  400a82:	4659      	mov	r1, fp
  400a84:	9801      	ldr	r0, [sp, #4]
  400a86:	47b0      	blx	r6
				display_data(byte_2, d_id);
  400a88:	4659      	mov	r1, fp
  400a8a:	9802      	ldr	r0, [sp, #8]
  400a8c:	47b0      	blx	r6
  400a8e:	e771      	b.n	400974 <display_char+0x188>
				}
				font_index++;
			}
		}
	}
 }
  400a90:	b005      	add	sp, #20
  400a92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  400a96:	bf00      	nop
  400a98:	004005f1 	.word	0x004005f1
  400a9c:	00401941 	.word	0x00401941
  400aa0:	00401945 	.word	0x00401945
  400aa4:	00401949 	.word	0x00401949
  400aa8:	0040199d 	.word	0x0040199d
  400aac:	0040194d 	.word	0x0040194d
  400ab0:	00401969 	.word	0x00401969

00400ab4 <display_number>:

 void display_number(uint16_t input, uint8_t font_size, uint8_t d_id) {
  400ab4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  400ab8:	b083      	sub	sp, #12
  400aba:	460c      	mov	r4, r1
  400abc:	4615      	mov	r5, r2
	int buffersize = 0;
    char buffer[8];

	if(input==0) {
  400abe:	b938      	cbnz	r0, 400ad0 <display_number+0x1c>
		display_char('0', font_size, d_id);
  400ac0:	2030      	movs	r0, #48	; 0x30
  400ac2:	4e28      	ldr	r6, [pc, #160]	; (400b64 <display_number+0xb0>)
  400ac4:	47b0      	blx	r6
		display_char(' ', font_size, d_id);
  400ac6:	462a      	mov	r2, r5
  400ac8:	4621      	mov	r1, r4
  400aca:	2020      	movs	r0, #32
  400acc:	47b0      	blx	r6
  400ace:	e045      	b.n	400b5c <display_number+0xa8>
  400ad0:	4603      	mov	r3, r0
        buffersize = 7;
    }
    else if (input > 99999) {
        buffersize = 6;
    }
    else if (input > 9999) {
  400ad2:	f242 720f 	movw	r2, #9999	; 0x270f
  400ad6:	4290      	cmp	r0, r2
  400ad8:	d830      	bhi.n	400b3c <display_number+0x88>
        buffersize = 5;
    }
    else if (input > 999) {
  400ada:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
  400ade:	d230      	bcs.n	400b42 <display_number+0x8e>
        buffersize = 4;
    }
    else if(input > 99) {
  400ae0:	2863      	cmp	r0, #99	; 0x63
  400ae2:	d831      	bhi.n	400b48 <display_number+0x94>
    }
    else if(input > 9) {
        buffersize = 2;
    }
    else {
        buffersize = 1;
  400ae4:	2809      	cmp	r0, #9
  400ae6:	bf8c      	ite	hi
  400ae8:	f04f 0c02 	movhi.w	ip, #2
  400aec:	f04f 0c01 	movls.w	ip, #1
  400af0:	e02c      	b.n	400b4c <display_number+0x98>
	// Does this to reverse the order it's output in
    int i = buffersize - 1;
    uint32_t temp;
    while(input > 0) {
        temp = input;
        buffer[i] = (char)(input%10 + '0');
  400af2:	fbae 7203 	umull	r7, r2, lr, r3
  400af6:	08d2      	lsrs	r2, r2, #3
  400af8:	eb02 0782 	add.w	r7, r2, r2, lsl #2
  400afc:	eba3 0347 	sub.w	r3, r3, r7, lsl #1
  400b00:	3330      	adds	r3, #48	; 0x30
  400b02:	f800 3d01 	strb.w	r3, [r0, #-1]!
        input = temp;
        input = input/10;
  400b06:	b293      	uxth	r3, r2
        i--;
  400b08:	3901      	subs	r1, #1

    // Grabs each digit at a time from integer and stores in array
	// Does this to reverse the order it's output in
    int i = buffersize - 1;
    uint32_t temp;
    while(input > 0) {
  400b0a:	2b00      	cmp	r3, #0
  400b0c:	d1f1      	bne.n	400af2 <display_number+0x3e>
        buffer[i] = (char)(input%10 + '0');
        input = temp;
        input = input/10;
        i--;
    }
	while(i > 0) {
  400b0e:	2900      	cmp	r1, #0
  400b10:	dd00      	ble.n	400b14 <display_number+0x60>
  400b12:	e7fe      	b.n	400b12 <display_number+0x5e>
		buffer[i] = '1';
	}

    i = 0;
    while(i < buffersize) {
  400b14:	f1bc 0f00 	cmp.w	ip, #0
  400b18:	d020      	beq.n	400b5c <display_number+0xa8>
  400b1a:	466f      	mov	r7, sp
		display_char(buffer[i], font_size, d_id);
  400b1c:	f8df 8044 	ldr.w	r8, [pc, #68]	; 400b64 <display_number+0xb0>
		display_char(' ', font_size, d_id);
  400b20:	f04f 0920 	mov.w	r9, #32
		buffer[i] = '1';
	}

    i = 0;
    while(i < buffersize) {
		display_char(buffer[i], font_size, d_id);
  400b24:	462a      	mov	r2, r5
  400b26:	4621      	mov	r1, r4
  400b28:	f817 0b01 	ldrb.w	r0, [r7], #1
  400b2c:	47c0      	blx	r8
		display_char(' ', font_size, d_id);
  400b2e:	462a      	mov	r2, r5
  400b30:	4621      	mov	r1, r4
  400b32:	4648      	mov	r0, r9
  400b34:	47c0      	blx	r8
	while(i > 0) {
		buffer[i] = '1';
	}

    i = 0;
    while(i < buffersize) {
  400b36:	42be      	cmp	r6, r7
  400b38:	d1f4      	bne.n	400b24 <display_number+0x70>
  400b3a:	e00f      	b.n	400b5c <display_number+0xa8>
    }
    else if (input > 99999) {
        buffersize = 6;
    }
    else if (input > 9999) {
        buffersize = 5;
  400b3c:	f04f 0c05 	mov.w	ip, #5
  400b40:	e004      	b.n	400b4c <display_number+0x98>
    }
    else if (input > 999) {
        buffersize = 4;
  400b42:	f04f 0c04 	mov.w	ip, #4
  400b46:	e001      	b.n	400b4c <display_number+0x98>
    }
    else if(input > 99) {
        buffersize = 3;
  400b48:	f04f 0c03 	mov.w	ip, #3
        buffersize = 1;
    }

    // Grabs each digit at a time from integer and stores in array
	// Does this to reverse the order it's output in
    int i = buffersize - 1;
  400b4c:	f10c 31ff 	add.w	r1, ip, #4294967295
  400b50:	eb0d 060c 	add.w	r6, sp, ip
  400b54:	4630      	mov	r0, r6
    uint32_t temp;
    while(input > 0) {
        temp = input;
        buffer[i] = (char)(input%10 + '0');
  400b56:	f8df e010 	ldr.w	lr, [pc, #16]	; 400b68 <display_number+0xb4>
  400b5a:	e7ca      	b.n	400af2 <display_number+0x3e>
    while(i < buffersize) {
		display_char(buffer[i], font_size, d_id);
		display_char(' ', font_size, d_id);
		i++;
	}
 }
  400b5c:	b003      	add	sp, #12
  400b5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  400b62:	bf00      	nop
  400b64:	004007ed 	.word	0x004007ed
  400b68:	cccccccd 	.word	0xcccccccd

00400b6c <bpm_display>:
	display_char('3', 18, 0);
	finish_display(0);
}

// Display 1
void bpm_display(uint16_t bpm) {
  400b6c:	b538      	push	{r3, r4, r5, lr}
  400b6e:	4605      	mov	r5, r0
	display_char('B', 28, 1);
  400b70:	2201      	movs	r2, #1
  400b72:	211c      	movs	r1, #28
  400b74:	2042      	movs	r0, #66	; 0x42
  400b76:	4c13      	ldr	r4, [pc, #76]	; (400bc4 <bpm_display+0x58>)
  400b78:	47a0      	blx	r4
	display_char(' ', 28, 1);
  400b7a:	2201      	movs	r2, #1
  400b7c:	211c      	movs	r1, #28
  400b7e:	2020      	movs	r0, #32
  400b80:	47a0      	blx	r4
	display_char('P', 28, 1);
  400b82:	2201      	movs	r2, #1
  400b84:	211c      	movs	r1, #28
  400b86:	2050      	movs	r0, #80	; 0x50
  400b88:	47a0      	blx	r4
	display_char(' ', 28, 1);
  400b8a:	2201      	movs	r2, #1
  400b8c:	211c      	movs	r1, #28
  400b8e:	2020      	movs	r0, #32
  400b90:	47a0      	blx	r4
	display_char('M', 28, 1);
  400b92:	2201      	movs	r2, #1
  400b94:	211c      	movs	r1, #28
  400b96:	204d      	movs	r0, #77	; 0x4d
  400b98:	47a0      	blx	r4
	display_char(' ', 28, 1);
  400b9a:	2201      	movs	r2, #1
  400b9c:	211c      	movs	r1, #28
  400b9e:	2020      	movs	r0, #32
  400ba0:	47a0      	blx	r4
	display_char(':', 28, 1);
  400ba2:	2201      	movs	r2, #1
  400ba4:	211c      	movs	r1, #28
  400ba6:	203a      	movs	r0, #58	; 0x3a
  400ba8:	47a0      	blx	r4
	display_char(' ', 28, 1);
  400baa:	2201      	movs	r2, #1
  400bac:	211c      	movs	r1, #28
  400bae:	2020      	movs	r0, #32
  400bb0:	47a0      	blx	r4
	display_number(bpm, 28, 1);
  400bb2:	2201      	movs	r2, #1
  400bb4:	211c      	movs	r1, #28
  400bb6:	4628      	mov	r0, r5
  400bb8:	4b03      	ldr	r3, [pc, #12]	; (400bc8 <bpm_display+0x5c>)
  400bba:	4798      	blx	r3
	finish_display(1);
  400bbc:	2001      	movs	r0, #1
  400bbe:	4b03      	ldr	r3, [pc, #12]	; (400bcc <bpm_display+0x60>)
  400bc0:	4798      	blx	r3
  400bc2:	bd38      	pop	{r3, r4, r5, pc}
  400bc4:	004007ed 	.word	0x004007ed
  400bc8:	00400ab5 	.word	0x00400ab5
  400bcc:	004007a9 	.word	0x004007a9

00400bd0 <res_display>:
}

// Display 2
void res_display(uint8_t res) {
  400bd0:	b538      	push	{r3, r4, r5, lr}
  400bd2:	4605      	mov	r5, r0
	display_char('R', 22, 2);
  400bd4:	2202      	movs	r2, #2
  400bd6:	2116      	movs	r1, #22
  400bd8:	2052      	movs	r0, #82	; 0x52
  400bda:	4c2e      	ldr	r4, [pc, #184]	; (400c94 <res_display+0xc4>)
  400bdc:	47a0      	blx	r4
	display_char(' ', 28, 2);
  400bde:	2202      	movs	r2, #2
  400be0:	211c      	movs	r1, #28
  400be2:	2020      	movs	r0, #32
  400be4:	47a0      	blx	r4
	display_char('E', 22, 2);
  400be6:	2202      	movs	r2, #2
  400be8:	2116      	movs	r1, #22
  400bea:	2045      	movs	r0, #69	; 0x45
  400bec:	47a0      	blx	r4
	display_char(' ', 28, 2);
  400bee:	2202      	movs	r2, #2
  400bf0:	211c      	movs	r1, #28
  400bf2:	2020      	movs	r0, #32
  400bf4:	47a0      	blx	r4
	display_char('S', 22, 2);
  400bf6:	2202      	movs	r2, #2
  400bf8:	2116      	movs	r1, #22
  400bfa:	2053      	movs	r0, #83	; 0x53
  400bfc:	47a0      	blx	r4
	display_char(' ', 28, 2);
  400bfe:	2202      	movs	r2, #2
  400c00:	211c      	movs	r1, #28
  400c02:	2020      	movs	r0, #32
  400c04:	47a0      	blx	r4
	display_char(':', 22, 2);
  400c06:	2202      	movs	r2, #2
  400c08:	2116      	movs	r1, #22
  400c0a:	203a      	movs	r0, #58	; 0x3a
  400c0c:	47a0      	blx	r4
	display_char(' ', 28, 2);
  400c0e:	2202      	movs	r2, #2
  400c10:	211c      	movs	r1, #28
  400c12:	2020      	movs	r0, #32
  400c14:	47a0      	blx	r4
	display_char('1', 22, 2);
  400c16:	2202      	movs	r2, #2
  400c18:	2116      	movs	r1, #22
  400c1a:	2031      	movs	r0, #49	; 0x31
  400c1c:	47a0      	blx	r4
	display_char(' ', 28, 2);
  400c1e:	2202      	movs	r2, #2
  400c20:	211c      	movs	r1, #28
  400c22:	2020      	movs	r0, #32
  400c24:	47a0      	blx	r4
	display_char('/', 22, 2); 
  400c26:	2202      	movs	r2, #2
  400c28:	2116      	movs	r1, #22
  400c2a:	202f      	movs	r0, #47	; 0x2f
  400c2c:	47a0      	blx	r4
	display_char(' ', 28, 2);
  400c2e:	2202      	movs	r2, #2
  400c30:	211c      	movs	r1, #28
  400c32:	2020      	movs	r0, #32
  400c34:	47a0      	blx	r4
	if(res == 6) {
  400c36:	2d06      	cmp	r5, #6
  400c38:	d109      	bne.n	400c4e <res_display+0x7e>
		display_number(4, 22, 2);
  400c3a:	2202      	movs	r2, #2
  400c3c:	2116      	movs	r1, #22
  400c3e:	2004      	movs	r0, #4
  400c40:	4b15      	ldr	r3, [pc, #84]	; (400c98 <res_display+0xc8>)
  400c42:	4798      	blx	r3
		display_char('t', 22, 2);
  400c44:	2202      	movs	r2, #2
  400c46:	2116      	movs	r1, #22
  400c48:	2074      	movs	r0, #116	; 0x74
  400c4a:	47a0      	blx	r4
  400c4c:	e01e      	b.n	400c8c <res_display+0xbc>
	}
	else if(res == 12) {
  400c4e:	2d0c      	cmp	r5, #12
  400c50:	d10a      	bne.n	400c68 <res_display+0x98>
		display_number(8, 22, 2);
  400c52:	2202      	movs	r2, #2
  400c54:	2116      	movs	r1, #22
  400c56:	2008      	movs	r0, #8
  400c58:	4b0f      	ldr	r3, [pc, #60]	; (400c98 <res_display+0xc8>)
  400c5a:	4798      	blx	r3
		display_char('t', 22, 2);
  400c5c:	2202      	movs	r2, #2
  400c5e:	2116      	movs	r1, #22
  400c60:	2074      	movs	r0, #116	; 0x74
  400c62:	4b0c      	ldr	r3, [pc, #48]	; (400c94 <res_display+0xc4>)
  400c64:	4798      	blx	r3
  400c66:	e011      	b.n	400c8c <res_display+0xbc>
	}
	else if(res == 24) {
  400c68:	2d18      	cmp	r5, #24
  400c6a:	d10a      	bne.n	400c82 <res_display+0xb2>
		display_number(16, 22, 2);
  400c6c:	2202      	movs	r2, #2
  400c6e:	2116      	movs	r1, #22
  400c70:	2010      	movs	r0, #16
  400c72:	4b09      	ldr	r3, [pc, #36]	; (400c98 <res_display+0xc8>)
  400c74:	4798      	blx	r3
		display_char('t', 22, 2);
  400c76:	2202      	movs	r2, #2
  400c78:	2116      	movs	r1, #22
  400c7a:	2074      	movs	r0, #116	; 0x74
  400c7c:	4b05      	ldr	r3, [pc, #20]	; (400c94 <res_display+0xc4>)
  400c7e:	4798      	blx	r3
  400c80:	e004      	b.n	400c8c <res_display+0xbc>
	}
	else {
		display_number(res, 22, 2);
  400c82:	2202      	movs	r2, #2
  400c84:	2116      	movs	r1, #22
  400c86:	4628      	mov	r0, r5
  400c88:	4b03      	ldr	r3, [pc, #12]	; (400c98 <res_display+0xc8>)
  400c8a:	4798      	blx	r3
	}
	finish_display(2);  
  400c8c:	2002      	movs	r0, #2
  400c8e:	4b03      	ldr	r3, [pc, #12]	; (400c9c <res_display+0xcc>)
  400c90:	4798      	blx	r3
  400c92:	bd38      	pop	{r3, r4, r5, pc}
  400c94:	004007ed 	.word	0x004007ed
  400c98:	00400ab5 	.word	0x00400ab5
  400c9c:	004007a9 	.word	0x004007a9

00400ca0 <page_display>:
}

// Display 3
void page_display(uint8_t page) {
  400ca0:	b538      	push	{r3, r4, r5, lr}
  400ca2:	4605      	mov	r5, r0
	display_char('P', 28, 3);
  400ca4:	2203      	movs	r2, #3
  400ca6:	211c      	movs	r1, #28
  400ca8:	2050      	movs	r0, #80	; 0x50
  400caa:	4c0d      	ldr	r4, [pc, #52]	; (400ce0 <page_display+0x40>)
  400cac:	47a0      	blx	r4
	display_char('A', 28, 3);
  400cae:	2203      	movs	r2, #3
  400cb0:	211c      	movs	r1, #28
  400cb2:	2041      	movs	r0, #65	; 0x41
  400cb4:	47a0      	blx	r4
	display_char('G', 28, 3);
  400cb6:	2203      	movs	r2, #3
  400cb8:	211c      	movs	r1, #28
  400cba:	2047      	movs	r0, #71	; 0x47
  400cbc:	47a0      	blx	r4
	display_char('E', 28, 3);
  400cbe:	2203      	movs	r2, #3
  400cc0:	211c      	movs	r1, #28
  400cc2:	2045      	movs	r0, #69	; 0x45
  400cc4:	47a0      	blx	r4
	display_char(':', 28, 3);
  400cc6:	2203      	movs	r2, #3
  400cc8:	211c      	movs	r1, #28
  400cca:	203a      	movs	r0, #58	; 0x3a
  400ccc:	47a0      	blx	r4
	display_number(page, 28, 3);
  400cce:	2203      	movs	r2, #3
  400cd0:	211c      	movs	r1, #28
  400cd2:	4628      	mov	r0, r5
  400cd4:	4b03      	ldr	r3, [pc, #12]	; (400ce4 <page_display+0x44>)
  400cd6:	4798      	blx	r3
	finish_display(3);
  400cd8:	2003      	movs	r0, #3
  400cda:	4b03      	ldr	r3, [pc, #12]	; (400ce8 <page_display+0x48>)
  400cdc:	4798      	blx	r3
  400cde:	bd38      	pop	{r3, r4, r5, pc}
  400ce0:	004007ed 	.word	0x004007ed
  400ce4:	00400ab5 	.word	0x00400ab5
  400ce8:	004007a9 	.word	0x004007a9

00400cec <loop_display>:
}

void loop_display(uint8_t page_loop) {
  400cec:	b538      	push	{r3, r4, r5, lr}
  400cee:	4605      	mov	r5, r0
	display_char('L', 28, 3);
  400cf0:	2203      	movs	r2, #3
  400cf2:	211c      	movs	r1, #28
  400cf4:	204c      	movs	r0, #76	; 0x4c
  400cf6:	4c0d      	ldr	r4, [pc, #52]	; (400d2c <loop_display+0x40>)
  400cf8:	47a0      	blx	r4
	display_char('O', 28, 3);
  400cfa:	2203      	movs	r2, #3
  400cfc:	211c      	movs	r1, #28
  400cfe:	204f      	movs	r0, #79	; 0x4f
  400d00:	47a0      	blx	r4
	display_char('O', 28, 3);
  400d02:	2203      	movs	r2, #3
  400d04:	211c      	movs	r1, #28
  400d06:	204f      	movs	r0, #79	; 0x4f
  400d08:	47a0      	blx	r4
	display_char('P', 28, 3);
  400d0a:	2203      	movs	r2, #3
  400d0c:	211c      	movs	r1, #28
  400d0e:	2050      	movs	r0, #80	; 0x50
  400d10:	47a0      	blx	r4
	display_char(':', 28, 3);
  400d12:	2203      	movs	r2, #3
  400d14:	211c      	movs	r1, #28
  400d16:	203a      	movs	r0, #58	; 0x3a
  400d18:	47a0      	blx	r4
	display_number(page_loop, 28, 3);
  400d1a:	2203      	movs	r2, #3
  400d1c:	211c      	movs	r1, #28
  400d1e:	4628      	mov	r0, r5
  400d20:	4b03      	ldr	r3, [pc, #12]	; (400d30 <loop_display+0x44>)
  400d22:	4798      	blx	r3
	finish_display(3);
  400d24:	2003      	movs	r0, #3
  400d26:	4b03      	ldr	r3, [pc, #12]	; (400d34 <loop_display+0x48>)
  400d28:	4798      	blx	r3
  400d2a:	bd38      	pop	{r3, r4, r5, pc}
  400d2c:	004007ed 	.word	0x004007ed
  400d30:	00400ab5 	.word	0x00400ab5
  400d34:	004007a9 	.word	0x004007a9

00400d38 <pattern_display>:
}

// Display 4
void pattern_display(uint8_t pattern) {
  400d38:	b538      	push	{r3, r4, r5, lr}
  400d3a:	4605      	mov	r5, r0
	display_char('P', 28, 4);
  400d3c:	2204      	movs	r2, #4
  400d3e:	211c      	movs	r1, #28
  400d40:	2050      	movs	r0, #80	; 0x50
  400d42:	4c0d      	ldr	r4, [pc, #52]	; (400d78 <pattern_display+0x40>)
  400d44:	47a0      	blx	r4
	display_char('T', 28, 4);
  400d46:	2204      	movs	r2, #4
  400d48:	211c      	movs	r1, #28
  400d4a:	2054      	movs	r0, #84	; 0x54
  400d4c:	47a0      	blx	r4
	display_char('R', 28, 4);
  400d4e:	2204      	movs	r2, #4
  400d50:	211c      	movs	r1, #28
  400d52:	2052      	movs	r0, #82	; 0x52
  400d54:	47a0      	blx	r4
	display_char('N', 28, 4);
  400d56:	2204      	movs	r2, #4
  400d58:	211c      	movs	r1, #28
  400d5a:	204e      	movs	r0, #78	; 0x4e
  400d5c:	47a0      	blx	r4
	display_char(':', 28, 4);
  400d5e:	2204      	movs	r2, #4
  400d60:	211c      	movs	r1, #28
  400d62:	203a      	movs	r0, #58	; 0x3a
  400d64:	47a0      	blx	r4
	display_number(pattern, 28, 4);
  400d66:	2204      	movs	r2, #4
  400d68:	211c      	movs	r1, #28
  400d6a:	4628      	mov	r0, r5
  400d6c:	4b03      	ldr	r3, [pc, #12]	; (400d7c <pattern_display+0x44>)
  400d6e:	4798      	blx	r3
	finish_display(4);
  400d70:	2004      	movs	r0, #4
  400d72:	4b03      	ldr	r3, [pc, #12]	; (400d80 <pattern_display+0x48>)
  400d74:	4798      	blx	r3
  400d76:	bd38      	pop	{r3, r4, r5, pc}
  400d78:	004007ed 	.word	0x004007ed
  400d7c:	00400ab5 	.word	0x00400ab5
  400d80:	004007a9 	.word	0x004007a9

00400d84 <clr_pattern_display>:
}

void clr_pattern_display(uint8_t pattern) {
  400d84:	b538      	push	{r3, r4, r5, lr}
  400d86:	4605      	mov	r5, r0
	display_char('C', 28, 4);
  400d88:	2204      	movs	r2, #4
  400d8a:	211c      	movs	r1, #28
  400d8c:	2043      	movs	r0, #67	; 0x43
  400d8e:	4c0d      	ldr	r4, [pc, #52]	; (400dc4 <clr_pattern_display+0x40>)
  400d90:	47a0      	blx	r4
	display_char('L', 28, 4);
  400d92:	2204      	movs	r2, #4
  400d94:	211c      	movs	r1, #28
  400d96:	204c      	movs	r0, #76	; 0x4c
  400d98:	47a0      	blx	r4
	display_char('R', 28, 4);
  400d9a:	2204      	movs	r2, #4
  400d9c:	211c      	movs	r1, #28
  400d9e:	2052      	movs	r0, #82	; 0x52
  400da0:	47a0      	blx	r4
	display_char(':', 28, 4);
  400da2:	2204      	movs	r2, #4
  400da4:	211c      	movs	r1, #28
  400da6:	203a      	movs	r0, #58	; 0x3a
  400da8:	47a0      	blx	r4
	display_number(pattern, 28, 4);
  400daa:	2204      	movs	r2, #4
  400dac:	211c      	movs	r1, #28
  400dae:	4628      	mov	r0, r5
  400db0:	4b05      	ldr	r3, [pc, #20]	; (400dc8 <clr_pattern_display+0x44>)
  400db2:	4798      	blx	r3
	display_char('?', 28, 4);
  400db4:	2204      	movs	r2, #4
  400db6:	211c      	movs	r1, #28
  400db8:	203f      	movs	r0, #63	; 0x3f
  400dba:	47a0      	blx	r4
	finish_display(4);
  400dbc:	2004      	movs	r0, #4
  400dbe:	4b03      	ldr	r3, [pc, #12]	; (400dcc <clr_pattern_display+0x48>)
  400dc0:	4798      	blx	r3
  400dc2:	bd38      	pop	{r3, r4, r5, pc}
  400dc4:	004007ed 	.word	0x004007ed
  400dc8:	00400ab5 	.word	0x00400ab5
  400dcc:	004007a9 	.word	0x004007a9

00400dd0 <output_display_1>:
}

// Display 5
void output_display_1(uint8_t out1, uint8_t out2) {
  400dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400dd2:	4605      	mov	r5, r0
  400dd4:	460f      	mov	r7, r1
	display_char('0', 22, 5);
  400dd6:	2205      	movs	r2, #5
  400dd8:	2116      	movs	r1, #22
  400dda:	2030      	movs	r0, #48	; 0x30
  400ddc:	4c1d      	ldr	r4, [pc, #116]	; (400e54 <output_display_1+0x84>)
  400dde:	47a0      	blx	r4
	display_char(' ', 22, 5);
  400de0:	2205      	movs	r2, #5
  400de2:	2116      	movs	r1, #22
  400de4:	2020      	movs	r0, #32
  400de6:	47a0      	blx	r4
	display_char('1', 18, 5);
  400de8:	2205      	movs	r2, #5
  400dea:	2112      	movs	r1, #18
  400dec:	2031      	movs	r0, #49	; 0x31
  400dee:	47a0      	blx	r4
	display_char(':', 18, 5);
  400df0:	2205      	movs	r2, #5
  400df2:	2112      	movs	r1, #18
  400df4:	203a      	movs	r0, #58	; 0x3a
  400df6:	47a0      	blx	r4
	display_number(out1, 18, 5);
  400df8:	2205      	movs	r2, #5
  400dfa:	2112      	movs	r1, #18
  400dfc:	4628      	mov	r0, r5
  400dfe:	4b16      	ldr	r3, [pc, #88]	; (400e58 <output_display_1+0x88>)
  400e00:	4798      	blx	r3

	while(disp_ptr_location[5] < 1920) {
  400e02:	4b16      	ldr	r3, [pc, #88]	; (400e5c <output_display_1+0x8c>)
  400e04:	895b      	ldrh	r3, [r3, #10]
  400e06:	f5b3 6ff0 	cmp.w	r3, #1920	; 0x780
  400e0a:	d209      	bcs.n	400e20 <output_display_1+0x50>
		display_data(0, 5);
  400e0c:	2605      	movs	r6, #5
  400e0e:	4d14      	ldr	r5, [pc, #80]	; (400e60 <output_display_1+0x90>)
	display_char(' ', 22, 5);
	display_char('1', 18, 5);
	display_char(':', 18, 5);
	display_number(out1, 18, 5);

	while(disp_ptr_location[5] < 1920) {
  400e10:	4c12      	ldr	r4, [pc, #72]	; (400e5c <output_display_1+0x8c>)
		display_data(0, 5);
  400e12:	4631      	mov	r1, r6
  400e14:	2000      	movs	r0, #0
  400e16:	47a8      	blx	r5
	display_char(' ', 22, 5);
	display_char('1', 18, 5);
	display_char(':', 18, 5);
	display_number(out1, 18, 5);

	while(disp_ptr_location[5] < 1920) {
  400e18:	8963      	ldrh	r3, [r4, #10]
  400e1a:	f5b3 6ff0 	cmp.w	r3, #1920	; 0x780
  400e1e:	d3f8      	bcc.n	400e12 <output_display_1+0x42>
		display_data(0, 5);
	}

	display_char('0', 22, 5);
  400e20:	2205      	movs	r2, #5
  400e22:	2116      	movs	r1, #22
  400e24:	2030      	movs	r0, #48	; 0x30
  400e26:	4c0b      	ldr	r4, [pc, #44]	; (400e54 <output_display_1+0x84>)
  400e28:	47a0      	blx	r4
	display_char(' ', 22, 5);
  400e2a:	2205      	movs	r2, #5
  400e2c:	2116      	movs	r1, #22
  400e2e:	2020      	movs	r0, #32
  400e30:	47a0      	blx	r4
	display_char('2', 18, 5);
  400e32:	2205      	movs	r2, #5
  400e34:	2112      	movs	r1, #18
  400e36:	2032      	movs	r0, #50	; 0x32
  400e38:	47a0      	blx	r4
	display_char(':', 18, 5);
  400e3a:	2205      	movs	r2, #5
  400e3c:	2112      	movs	r1, #18
  400e3e:	203a      	movs	r0, #58	; 0x3a
  400e40:	47a0      	blx	r4
	display_number(out2, 18, 5);
  400e42:	2205      	movs	r2, #5
  400e44:	2112      	movs	r1, #18
  400e46:	4638      	mov	r0, r7
  400e48:	4b03      	ldr	r3, [pc, #12]	; (400e58 <output_display_1+0x88>)
  400e4a:	4798      	blx	r3
	
	finish_display(5);
  400e4c:	2005      	movs	r0, #5
  400e4e:	4b05      	ldr	r3, [pc, #20]	; (400e64 <output_display_1+0x94>)
  400e50:	4798      	blx	r3
  400e52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400e54:	004007ed 	.word	0x004007ed
  400e58:	00400ab5 	.word	0x00400ab5
  400e5c:	20000644 	.word	0x20000644
  400e60:	004005f1 	.word	0x004005f1
  400e64:	004007a9 	.word	0x004007a9

00400e68 <output_display_2>:
}

// Display 6
void output_display_2(uint8_t out3, uint8_t out4) {
  400e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400e6a:	4605      	mov	r5, r0
  400e6c:	460f      	mov	r7, r1
	display_char('0', 22, 6);
  400e6e:	2206      	movs	r2, #6
  400e70:	2116      	movs	r1, #22
  400e72:	2030      	movs	r0, #48	; 0x30
  400e74:	4c1d      	ldr	r4, [pc, #116]	; (400eec <output_display_2+0x84>)
  400e76:	47a0      	blx	r4
	display_char(' ', 22, 6);
  400e78:	2206      	movs	r2, #6
  400e7a:	2116      	movs	r1, #22
  400e7c:	2020      	movs	r0, #32
  400e7e:	47a0      	blx	r4
	display_char('3', 18, 6);
  400e80:	2206      	movs	r2, #6
  400e82:	2112      	movs	r1, #18
  400e84:	2033      	movs	r0, #51	; 0x33
  400e86:	47a0      	blx	r4
	display_char(':', 18, 6);
  400e88:	2206      	movs	r2, #6
  400e8a:	2112      	movs	r1, #18
  400e8c:	203a      	movs	r0, #58	; 0x3a
  400e8e:	47a0      	blx	r4
	display_number(out3, 18, 6);
  400e90:	2206      	movs	r2, #6
  400e92:	2112      	movs	r1, #18
  400e94:	4628      	mov	r0, r5
  400e96:	4b16      	ldr	r3, [pc, #88]	; (400ef0 <output_display_2+0x88>)
  400e98:	4798      	blx	r3

	while(disp_ptr_location[6] < 1920) {
  400e9a:	4b16      	ldr	r3, [pc, #88]	; (400ef4 <output_display_2+0x8c>)
  400e9c:	899b      	ldrh	r3, [r3, #12]
  400e9e:	f5b3 6ff0 	cmp.w	r3, #1920	; 0x780
  400ea2:	d209      	bcs.n	400eb8 <output_display_2+0x50>
		display_data(0, 6);
  400ea4:	2606      	movs	r6, #6
  400ea6:	4d14      	ldr	r5, [pc, #80]	; (400ef8 <output_display_2+0x90>)
	display_char(' ', 22, 6);
	display_char('3', 18, 6);
	display_char(':', 18, 6);
	display_number(out3, 18, 6);

	while(disp_ptr_location[6] < 1920) {
  400ea8:	4c12      	ldr	r4, [pc, #72]	; (400ef4 <output_display_2+0x8c>)
		display_data(0, 6);
  400eaa:	4631      	mov	r1, r6
  400eac:	2000      	movs	r0, #0
  400eae:	47a8      	blx	r5
	display_char(' ', 22, 6);
	display_char('3', 18, 6);
	display_char(':', 18, 6);
	display_number(out3, 18, 6);

	while(disp_ptr_location[6] < 1920) {
  400eb0:	89a3      	ldrh	r3, [r4, #12]
  400eb2:	f5b3 6ff0 	cmp.w	r3, #1920	; 0x780
  400eb6:	d3f8      	bcc.n	400eaa <output_display_2+0x42>
		display_data(0, 6);
	}

	display_char('0', 22, 6);
  400eb8:	2206      	movs	r2, #6
  400eba:	2116      	movs	r1, #22
  400ebc:	2030      	movs	r0, #48	; 0x30
  400ebe:	4c0b      	ldr	r4, [pc, #44]	; (400eec <output_display_2+0x84>)
  400ec0:	47a0      	blx	r4
	display_char(' ', 22, 6);
  400ec2:	2206      	movs	r2, #6
  400ec4:	2116      	movs	r1, #22
  400ec6:	2020      	movs	r0, #32
  400ec8:	47a0      	blx	r4
	display_char('4', 18, 6);
  400eca:	2206      	movs	r2, #6
  400ecc:	2112      	movs	r1, #18
  400ece:	2034      	movs	r0, #52	; 0x34
  400ed0:	47a0      	blx	r4
	display_char(':', 18, 6);
  400ed2:	2206      	movs	r2, #6
  400ed4:	2112      	movs	r1, #18
  400ed6:	203a      	movs	r0, #58	; 0x3a
  400ed8:	47a0      	blx	r4
	display_number(out4, 18, 6);
  400eda:	2206      	movs	r2, #6
  400edc:	2112      	movs	r1, #18
  400ede:	4638      	mov	r0, r7
  400ee0:	4b03      	ldr	r3, [pc, #12]	; (400ef0 <output_display_2+0x88>)
  400ee2:	4798      	blx	r3
	
	finish_display(6);
  400ee4:	2006      	movs	r0, #6
  400ee6:	4b05      	ldr	r3, [pc, #20]	; (400efc <output_display_2+0x94>)
  400ee8:	4798      	blx	r3
  400eea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400eec:	004007ed 	.word	0x004007ed
  400ef0:	00400ab5 	.word	0x00400ab5
  400ef4:	20000644 	.word	0x20000644
  400ef8:	004005f1 	.word	0x004005f1
  400efc:	004007a9 	.word	0x004007a9

00400f00 <encoder_direction>:
#include "sequencer.h"

// uint8_t A_seq;
// uint8_t B_seq;

 void encoder_direction(uint32_t A, uint32_t B, uint8_t step){
  400f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	//read Encoder input A
	bool A_in = REG_PIOC_PDSR & A;
  400f02:	4b19      	ldr	r3, [pc, #100]	; (400f68 <encoder_direction+0x68>)
  400f04:	681f      	ldr	r7, [r3, #0]
	//read Encoder input B
	bool B_in = REG_PIOC_PDSR & B;
  400f06:	681d      	ldr	r5, [r3, #0]
	
	A_seq = A_seq << 1;
	A_seq |= A_in;
	
	B_seq = B_seq << 1;
  400f08:	4c18      	ldr	r4, [pc, #96]	; (400f6c <encoder_direction+0x6c>)
	B_seq |= B_in;
  400f0a:	7823      	ldrb	r3, [r4, #0]
  400f0c:	420d      	tst	r5, r1
  400f0e:	bf14      	ite	ne
  400f10:	2101      	movne	r1, #1
  400f12:	2100      	moveq	r1, #0
  400f14:	ea41 0143 	orr.w	r1, r1, r3, lsl #1
	//read Encoder input A
	bool A_in = REG_PIOC_PDSR & A;
	//read Encoder input B
	bool B_in = REG_PIOC_PDSR & B;
	
	A_seq = A_seq << 1;
  400f18:	4d15      	ldr	r5, [pc, #84]	; (400f70 <encoder_direction+0x70>)
	A_seq |= A_in;
	
	B_seq = B_seq << 1;
	B_seq |= B_in;
	
	A_seq &= 0b00001111;
  400f1a:	782e      	ldrb	r6, [r5, #0]
  400f1c:	4207      	tst	r7, r0
  400f1e:	bf14      	ite	ne
  400f20:	2301      	movne	r3, #1
  400f22:	2300      	moveq	r3, #0
  400f24:	ea43 0346 	orr.w	r3, r3, r6, lsl #1
  400f28:	f003 030f 	and.w	r3, r3, #15
  400f2c:	702b      	strb	r3, [r5, #0]
	B_seq &= 0b00001111;
  400f2e:	f001 010f 	and.w	r1, r1, #15
  400f32:	7021      	strb	r1, [r4, #0]


	//return true if turned right
	if ((A_seq == 0b00001001) && (B_seq == 0b00000011)){
  400f34:	2b09      	cmp	r3, #9
  400f36:	d10a      	bne.n	400f4e <encoder_direction+0x4e>
  400f38:	2903      	cmp	r1, #3
  400f3a:	d114      	bne.n	400f66 <encoder_direction+0x66>
		REG_PIOB_SODR |= PIO_PER_P3; //set output high on PB3
  400f3c:	490d      	ldr	r1, [pc, #52]	; (400f74 <encoder_direction+0x74>)
  400f3e:	680b      	ldr	r3, [r1, #0]
  400f40:	f043 0308 	orr.w	r3, r3, #8
  400f44:	600b      	str	r3, [r1, #0]
		notes_inc(step);
  400f46:	4610      	mov	r0, r2
  400f48:	4b0b      	ldr	r3, [pc, #44]	; (400f78 <encoder_direction+0x78>)
  400f4a:	4798      	blx	r3
  400f4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}

	else if ((A_seq == 0b00000011) && (B_seq == 0b00001001)){
  400f4e:	2b03      	cmp	r3, #3
  400f50:	d109      	bne.n	400f66 <encoder_direction+0x66>
  400f52:	2909      	cmp	r1, #9
  400f54:	d107      	bne.n	400f66 <encoder_direction+0x66>
		REG_PIOB_CODR |= PIO_PER_P3; //set output low on PB3
  400f56:	4909      	ldr	r1, [pc, #36]	; (400f7c <encoder_direction+0x7c>)
  400f58:	680b      	ldr	r3, [r1, #0]
  400f5a:	f043 0308 	orr.w	r3, r3, #8
  400f5e:	600b      	str	r3, [r1, #0]
		notes_dec(step);
  400f60:	4610      	mov	r0, r2
  400f62:	4b07      	ldr	r3, [pc, #28]	; (400f80 <encoder_direction+0x80>)
  400f64:	4798      	blx	r3
  400f66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400f68:	400e123c 	.word	0x400e123c
  400f6c:	2000873d 	.word	0x2000873d
  400f70:	20008733 	.word	0x20008733
  400f74:	400e1030 	.word	0x400e1030
  400f78:	00402f09 	.word	0x00402f09
  400f7c:	400e1034 	.word	0x400e1034
  400f80:	00402f45 	.word	0x00402f45

00400f84 <Encoder_init>:
	}
}


void Encoder_init(){
  400f84:	b470      	push	{r4, r5, r6}
	A_seq = 0;
  400f86:	2300      	movs	r3, #0
  400f88:	4aa8      	ldr	r2, [pc, #672]	; (40122c <Encoder_init+0x2a8>)
  400f8a:	7013      	strb	r3, [r2, #0]
	B_seq = 0;
  400f8c:	4aa8      	ldr	r2, [pc, #672]	; (401230 <Encoder_init+0x2ac>)
  400f8e:	7013      	strb	r3, [r2, #0]

	//enable clock for PIOC
	REG_PMC_PCER0 |= PMC_PCER0_PID13;
  400f90:	4aa8      	ldr	r2, [pc, #672]	; (401234 <Encoder_init+0x2b0>)
  400f92:	6813      	ldr	r3, [r2, #0]
  400f94:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  400f98:	6013      	str	r3, [r2, #0]


	/**************			CONFIGURE 16 STEP ENCODERS			**************/

	//Set up PC0 as ENCODER 1 INPUT A
	REG_PIOC_PER |= PIO_PER_P0; //enable PIO controller
  400f9a:	4da7      	ldr	r5, [pc, #668]	; (401238 <Encoder_init+0x2b4>)
  400f9c:	682b      	ldr	r3, [r5, #0]
  400f9e:	f043 0301 	orr.w	r3, r3, #1
  400fa2:	602b      	str	r3, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P0; //disable output
  400fa4:	4ca5      	ldr	r4, [pc, #660]	; (40123c <Encoder_init+0x2b8>)
  400fa6:	6823      	ldr	r3, [r4, #0]
  400fa8:	f043 0301 	orr.w	r3, r3, #1
  400fac:	6023      	str	r3, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P0; //disable pull-down resistor
  400fae:	48a4      	ldr	r0, [pc, #656]	; (401240 <Encoder_init+0x2bc>)
  400fb0:	6803      	ldr	r3, [r0, #0]
  400fb2:	f043 0301 	orr.w	r3, r3, #1
  400fb6:	6003      	str	r3, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P0;	//enable pull-up resistor
  400fb8:	49a2      	ldr	r1, [pc, #648]	; (401244 <Encoder_init+0x2c0>)
  400fba:	680b      	ldr	r3, [r1, #0]
  400fbc:	f043 0301 	orr.w	r3, r3, #1
  400fc0:	600b      	str	r3, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P0; //turn on slow clock debounce
  400fc2:	f602 6274 	addw	r2, r2, #3700	; 0xe74
  400fc6:	6813      	ldr	r3, [r2, #0]
  400fc8:	f043 0301 	orr.w	r3, r3, #1
  400fcc:	6013      	str	r3, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P0;	//start debounce filter
  400fce:	4b9e      	ldr	r3, [pc, #632]	; (401248 <Encoder_init+0x2c4>)
  400fd0:	681e      	ldr	r6, [r3, #0]
  400fd2:	f046 0601 	orr.w	r6, r6, #1
  400fd6:	601e      	str	r6, [r3, #0]

	//Set up PC1 as ENCODER 1 INPUT B
	REG_PIOC_PER |= PIO_PER_P1; //enable PIO controller
  400fd8:	682e      	ldr	r6, [r5, #0]
  400fda:	f046 0602 	orr.w	r6, r6, #2
  400fde:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P1; //disable output
  400fe0:	6826      	ldr	r6, [r4, #0]
  400fe2:	f046 0602 	orr.w	r6, r6, #2
  400fe6:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P1; //disable pull-down resistor
  400fe8:	6806      	ldr	r6, [r0, #0]
  400fea:	f046 0602 	orr.w	r6, r6, #2
  400fee:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P1;	//enable pull-up resistor
  400ff0:	680e      	ldr	r6, [r1, #0]
  400ff2:	f046 0602 	orr.w	r6, r6, #2
  400ff6:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P1; //turn on slow clock debounce
  400ff8:	6816      	ldr	r6, [r2, #0]
  400ffa:	f046 0602 	orr.w	r6, r6, #2
  400ffe:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P1;	//start debounce filter
  401000:	681e      	ldr	r6, [r3, #0]
  401002:	f046 0602 	orr.w	r6, r6, #2
  401006:	601e      	str	r6, [r3, #0]


	
	//Set up PC2 as ENCODER 2 INPUT A
	REG_PIOC_PER |= PIO_PER_P2; //enable PIO controller
  401008:	682e      	ldr	r6, [r5, #0]
  40100a:	f046 0604 	orr.w	r6, r6, #4
  40100e:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P2; //disable output
  401010:	6826      	ldr	r6, [r4, #0]
  401012:	f046 0604 	orr.w	r6, r6, #4
  401016:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P2; //disable pull-down resistor
  401018:	6806      	ldr	r6, [r0, #0]
  40101a:	f046 0604 	orr.w	r6, r6, #4
  40101e:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P2;	//enable pull-up resistor
  401020:	680e      	ldr	r6, [r1, #0]
  401022:	f046 0604 	orr.w	r6, r6, #4
  401026:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P2; //turn on slow clock debounce
  401028:	6816      	ldr	r6, [r2, #0]
  40102a:	f046 0604 	orr.w	r6, r6, #4
  40102e:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P2;	//start debounce filter
  401030:	681e      	ldr	r6, [r3, #0]
  401032:	f046 0604 	orr.w	r6, r6, #4
  401036:	601e      	str	r6, [r3, #0]

	//Set up PC3 as ENCODER 2 INPUT B
	REG_PIOC_PER |= PIO_PER_P3; //enable PIO controller
  401038:	682e      	ldr	r6, [r5, #0]
  40103a:	f046 0608 	orr.w	r6, r6, #8
  40103e:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P3; //disable output
  401040:	6826      	ldr	r6, [r4, #0]
  401042:	f046 0608 	orr.w	r6, r6, #8
  401046:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P3; //disable pull-down resistor
  401048:	6806      	ldr	r6, [r0, #0]
  40104a:	f046 0608 	orr.w	r6, r6, #8
  40104e:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P3;	//enable pull-up resistor
  401050:	680e      	ldr	r6, [r1, #0]
  401052:	f046 0608 	orr.w	r6, r6, #8
  401056:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P3; //turn on slow clock debounce
  401058:	6816      	ldr	r6, [r2, #0]
  40105a:	f046 0608 	orr.w	r6, r6, #8
  40105e:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P3;	//start debounce filter
  401060:	681e      	ldr	r6, [r3, #0]
  401062:	f046 0608 	orr.w	r6, r6, #8
  401066:	601e      	str	r6, [r3, #0]



	//Set up PC4 as ENCODER 3 INPUT A
	REG_PIOC_PER |= PIO_PER_P4; //enable PIO controller
  401068:	682e      	ldr	r6, [r5, #0]
  40106a:	f046 0610 	orr.w	r6, r6, #16
  40106e:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P4; //disable output
  401070:	6826      	ldr	r6, [r4, #0]
  401072:	f046 0610 	orr.w	r6, r6, #16
  401076:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P4; //disable pull-down resistor
  401078:	6806      	ldr	r6, [r0, #0]
  40107a:	f046 0610 	orr.w	r6, r6, #16
  40107e:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P4;	//enable pull-up resistor
  401080:	680e      	ldr	r6, [r1, #0]
  401082:	f046 0610 	orr.w	r6, r6, #16
  401086:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P4; //turn on slow clock debounce
  401088:	6816      	ldr	r6, [r2, #0]
  40108a:	f046 0610 	orr.w	r6, r6, #16
  40108e:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P4;	//start debounce filter
  401090:	681e      	ldr	r6, [r3, #0]
  401092:	f046 0610 	orr.w	r6, r6, #16
  401096:	601e      	str	r6, [r3, #0]

	//Set up PC5 as ENCODER 3 INPUT B
	REG_PIOC_PER |= PIO_PER_P5; //enable PIO controller
  401098:	682e      	ldr	r6, [r5, #0]
  40109a:	f046 0620 	orr.w	r6, r6, #32
  40109e:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P5; //disable output
  4010a0:	6826      	ldr	r6, [r4, #0]
  4010a2:	f046 0620 	orr.w	r6, r6, #32
  4010a6:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P5; //disable pull-down resistor
  4010a8:	6806      	ldr	r6, [r0, #0]
  4010aa:	f046 0620 	orr.w	r6, r6, #32
  4010ae:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P5;	//enable pull-up resistor
  4010b0:	680e      	ldr	r6, [r1, #0]
  4010b2:	f046 0620 	orr.w	r6, r6, #32
  4010b6:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P5; //turn on slow clock debounce
  4010b8:	6816      	ldr	r6, [r2, #0]
  4010ba:	f046 0620 	orr.w	r6, r6, #32
  4010be:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P5;	//start debounce filter
  4010c0:	681e      	ldr	r6, [r3, #0]
  4010c2:	f046 0620 	orr.w	r6, r6, #32
  4010c6:	601e      	str	r6, [r3, #0]



	//Set up PC6 as ENCODER 4 INPUT A
	REG_PIOC_PER |= PIO_PER_P6; //enable PIO controller
  4010c8:	682e      	ldr	r6, [r5, #0]
  4010ca:	f046 0640 	orr.w	r6, r6, #64	; 0x40
  4010ce:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P6; //disable output
  4010d0:	6826      	ldr	r6, [r4, #0]
  4010d2:	f046 0640 	orr.w	r6, r6, #64	; 0x40
  4010d6:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P6; //disable pull-down resistor
  4010d8:	6806      	ldr	r6, [r0, #0]
  4010da:	f046 0640 	orr.w	r6, r6, #64	; 0x40
  4010de:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P6;	//enable pull-up resistor
  4010e0:	680e      	ldr	r6, [r1, #0]
  4010e2:	f046 0640 	orr.w	r6, r6, #64	; 0x40
  4010e6:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P6; //turn on slow clock debounce
  4010e8:	6816      	ldr	r6, [r2, #0]
  4010ea:	f046 0640 	orr.w	r6, r6, #64	; 0x40
  4010ee:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P6;	//start debounce filter
  4010f0:	681e      	ldr	r6, [r3, #0]
  4010f2:	f046 0640 	orr.w	r6, r6, #64	; 0x40
  4010f6:	601e      	str	r6, [r3, #0]

	//Set up PC7 as ENCODER 4 INPUT B
	REG_PIOC_PER |= PIO_PER_P7; //enable PIO controller
  4010f8:	682e      	ldr	r6, [r5, #0]
  4010fa:	f046 0680 	orr.w	r6, r6, #128	; 0x80
  4010fe:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P7; //disable output
  401100:	6826      	ldr	r6, [r4, #0]
  401102:	f046 0680 	orr.w	r6, r6, #128	; 0x80
  401106:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P7; //disable pull-down resistor
  401108:	6806      	ldr	r6, [r0, #0]
  40110a:	f046 0680 	orr.w	r6, r6, #128	; 0x80
  40110e:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P7;	//enable pull-up resistor
  401110:	680e      	ldr	r6, [r1, #0]
  401112:	f046 0680 	orr.w	r6, r6, #128	; 0x80
  401116:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P7; //turn on slow clock debounce
  401118:	6816      	ldr	r6, [r2, #0]
  40111a:	f046 0680 	orr.w	r6, r6, #128	; 0x80
  40111e:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P7;	//start debounce filter
  401120:	681e      	ldr	r6, [r3, #0]
  401122:	f046 0680 	orr.w	r6, r6, #128	; 0x80
  401126:	601e      	str	r6, [r3, #0]



	//Set up PC8 as ENCODER 5 INPUT A
	REG_PIOC_PER |= PIO_PER_P8; //enable PIO controller
  401128:	682e      	ldr	r6, [r5, #0]
  40112a:	f446 7680 	orr.w	r6, r6, #256	; 0x100
  40112e:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P8; //disable output
  401130:	6826      	ldr	r6, [r4, #0]
  401132:	f446 7680 	orr.w	r6, r6, #256	; 0x100
  401136:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P8; //disable pull-down resistor
  401138:	6806      	ldr	r6, [r0, #0]
  40113a:	f446 7680 	orr.w	r6, r6, #256	; 0x100
  40113e:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P8;	//enable pull-up resistor
  401140:	680e      	ldr	r6, [r1, #0]
  401142:	f446 7680 	orr.w	r6, r6, #256	; 0x100
  401146:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P8; //turn on slow clock debounce
  401148:	6816      	ldr	r6, [r2, #0]
  40114a:	f446 7680 	orr.w	r6, r6, #256	; 0x100
  40114e:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P8;	//start debounce filter
  401150:	681e      	ldr	r6, [r3, #0]
  401152:	f446 7680 	orr.w	r6, r6, #256	; 0x100
  401156:	601e      	str	r6, [r3, #0]

	//Set up PC9 as ENCODER 5 INPUT B
	REG_PIOC_PER |= PIO_PER_P9; //enable PIO controller
  401158:	682e      	ldr	r6, [r5, #0]
  40115a:	f446 7600 	orr.w	r6, r6, #512	; 0x200
  40115e:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P9; //disable output
  401160:	6826      	ldr	r6, [r4, #0]
  401162:	f446 7600 	orr.w	r6, r6, #512	; 0x200
  401166:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P9; //disable pull-down resistor
  401168:	6806      	ldr	r6, [r0, #0]
  40116a:	f446 7600 	orr.w	r6, r6, #512	; 0x200
  40116e:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P9;	//enable pull-up resistor
  401170:	680e      	ldr	r6, [r1, #0]
  401172:	f446 7600 	orr.w	r6, r6, #512	; 0x200
  401176:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P9; //turn on slow clock debounce
  401178:	6816      	ldr	r6, [r2, #0]
  40117a:	f446 7600 	orr.w	r6, r6, #512	; 0x200
  40117e:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P9;	//start debounce filter
  401180:	681e      	ldr	r6, [r3, #0]
  401182:	f446 7600 	orr.w	r6, r6, #512	; 0x200
  401186:	601e      	str	r6, [r3, #0]



	//Set up PC10 as ENCODER 6 INPUT A
	REG_PIOC_PER |= PIO_PER_P10; //enable PIO controller
  401188:	682e      	ldr	r6, [r5, #0]
  40118a:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
  40118e:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P10; //disable output
  401190:	6826      	ldr	r6, [r4, #0]
  401192:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
  401196:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P10; //disable pull-down resistor
  401198:	6806      	ldr	r6, [r0, #0]
  40119a:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
  40119e:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P10;	//enable pull-up resistor
  4011a0:	680e      	ldr	r6, [r1, #0]
  4011a2:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
  4011a6:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P10; //turn on slow clock debounce
  4011a8:	6816      	ldr	r6, [r2, #0]
  4011aa:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
  4011ae:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P10;	//start debounce filter
  4011b0:	681e      	ldr	r6, [r3, #0]
  4011b2:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
  4011b6:	601e      	str	r6, [r3, #0]

	//Set up PC11 as ENCODER 6 INPUT B
	REG_PIOC_PER |= PIO_PER_P11; //enable PIO controller
  4011b8:	682e      	ldr	r6, [r5, #0]
  4011ba:	f446 6600 	orr.w	r6, r6, #2048	; 0x800
  4011be:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P11; //disable output
  4011c0:	6826      	ldr	r6, [r4, #0]
  4011c2:	f446 6600 	orr.w	r6, r6, #2048	; 0x800
  4011c6:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P11; //disable pull-down resistor
  4011c8:	6806      	ldr	r6, [r0, #0]
  4011ca:	f446 6600 	orr.w	r6, r6, #2048	; 0x800
  4011ce:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P11;	//enable pull-up resistor
  4011d0:	680e      	ldr	r6, [r1, #0]
  4011d2:	f446 6600 	orr.w	r6, r6, #2048	; 0x800
  4011d6:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P11; //turn on slow clock debounce
  4011d8:	6816      	ldr	r6, [r2, #0]
  4011da:	f446 6600 	orr.w	r6, r6, #2048	; 0x800
  4011de:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P11;	//start debounce filter
  4011e0:	681e      	ldr	r6, [r3, #0]
  4011e2:	f446 6600 	orr.w	r6, r6, #2048	; 0x800
  4011e6:	601e      	str	r6, [r3, #0]



	//Set up PC12 as ENCODER 7 INPUT A
	REG_PIOC_PER |= PIO_PER_P3; //enable PIO controller
  4011e8:	682e      	ldr	r6, [r5, #0]
  4011ea:	f046 0608 	orr.w	r6, r6, #8
  4011ee:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P3; //disable output
  4011f0:	6826      	ldr	r6, [r4, #0]
  4011f2:	f046 0608 	orr.w	r6, r6, #8
  4011f6:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P3; //disable pull-down resistor
  4011f8:	6806      	ldr	r6, [r0, #0]
  4011fa:	f046 0608 	orr.w	r6, r6, #8
  4011fe:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P3;	//enable pull-up resistor
  401200:	680e      	ldr	r6, [r1, #0]
  401202:	f046 0608 	orr.w	r6, r6, #8
  401206:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P3; //turn on slow clock debounce
  401208:	6816      	ldr	r6, [r2, #0]
  40120a:	f046 0608 	orr.w	r6, r6, #8
  40120e:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P3;	//start debounce filter
  401210:	681e      	ldr	r6, [r3, #0]
  401212:	f046 0608 	orr.w	r6, r6, #8
  401216:	601e      	str	r6, [r3, #0]

	//Set up PC13 as ENCODER 7 INPUT B
	REG_PIOC_PER |= PIO_PER_P13; //enable PIO controller
  401218:	682e      	ldr	r6, [r5, #0]
  40121a:	f446 5600 	orr.w	r6, r6, #8192	; 0x2000
  40121e:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P13; //disable output
  401220:	6826      	ldr	r6, [r4, #0]
  401222:	f446 5600 	orr.w	r6, r6, #8192	; 0x2000
  401226:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P13; //disable pull-down resistor
  401228:	6806      	ldr	r6, [r0, #0]
  40122a:	e00f      	b.n	40124c <Encoder_init+0x2c8>
  40122c:	20008733 	.word	0x20008733
  401230:	2000873d 	.word	0x2000873d
  401234:	400e0410 	.word	0x400e0410
  401238:	400e1200 	.word	0x400e1200
  40123c:	400e1214 	.word	0x400e1214
  401240:	400e1290 	.word	0x400e1290
  401244:	400e1264 	.word	0x400e1264
  401248:	400e1220 	.word	0x400e1220
  40124c:	f446 5600 	orr.w	r6, r6, #8192	; 0x2000
  401250:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P13;	//enable pull-up resistor
  401252:	680e      	ldr	r6, [r1, #0]
  401254:	f446 5600 	orr.w	r6, r6, #8192	; 0x2000
  401258:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P13; //turn on slow clock debounce
  40125a:	6816      	ldr	r6, [r2, #0]
  40125c:	f446 5600 	orr.w	r6, r6, #8192	; 0x2000
  401260:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P13;	//start debounce filter
  401262:	681e      	ldr	r6, [r3, #0]
  401264:	f446 5600 	orr.w	r6, r6, #8192	; 0x2000
  401268:	601e      	str	r6, [r3, #0]



	//Set up PC14 as ENCODER 8 INPUT A
	REG_PIOC_PER |= PIO_PER_P14; //enable PIO controller
  40126a:	682e      	ldr	r6, [r5, #0]
  40126c:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
  401270:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P14; //disable output
  401272:	6826      	ldr	r6, [r4, #0]
  401274:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
  401278:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P14; //disable pull-down resistor
  40127a:	6806      	ldr	r6, [r0, #0]
  40127c:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
  401280:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P14;	//enable pull-up resistor
  401282:	680e      	ldr	r6, [r1, #0]
  401284:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
  401288:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P14; //turn on slow clock debounce
  40128a:	6816      	ldr	r6, [r2, #0]
  40128c:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
  401290:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P14;	//start debounce filter
  401292:	681e      	ldr	r6, [r3, #0]
  401294:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
  401298:	601e      	str	r6, [r3, #0]

	//Set up PC15 as ENCODER 8 INPUT B
	REG_PIOC_PER |= PIO_PER_P15; //enable PIO controller
  40129a:	682e      	ldr	r6, [r5, #0]
  40129c:	f446 4600 	orr.w	r6, r6, #32768	; 0x8000
  4012a0:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P15; //disable output
  4012a2:	6826      	ldr	r6, [r4, #0]
  4012a4:	f446 4600 	orr.w	r6, r6, #32768	; 0x8000
  4012a8:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P15; //disable pull-down resistor
  4012aa:	6806      	ldr	r6, [r0, #0]
  4012ac:	f446 4600 	orr.w	r6, r6, #32768	; 0x8000
  4012b0:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P15;	//enable pull-up resistor
  4012b2:	680e      	ldr	r6, [r1, #0]
  4012b4:	f446 4600 	orr.w	r6, r6, #32768	; 0x8000
  4012b8:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P15; //turn on slow clock debounce
  4012ba:	6816      	ldr	r6, [r2, #0]
  4012bc:	f446 4600 	orr.w	r6, r6, #32768	; 0x8000
  4012c0:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P15;	//start debounce filter
  4012c2:	681e      	ldr	r6, [r3, #0]
  4012c4:	f446 4600 	orr.w	r6, r6, #32768	; 0x8000
  4012c8:	601e      	str	r6, [r3, #0]



	//Set up PC16 as ENCODER 9 INPUT A
	REG_PIOC_PER |= PIO_PER_P16; //enable PIO controller
  4012ca:	682e      	ldr	r6, [r5, #0]
  4012cc:	f446 3680 	orr.w	r6, r6, #65536	; 0x10000
  4012d0:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P16; //disable output
  4012d2:	6826      	ldr	r6, [r4, #0]
  4012d4:	f446 3680 	orr.w	r6, r6, #65536	; 0x10000
  4012d8:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P16; //disable pull-down resistor
  4012da:	6806      	ldr	r6, [r0, #0]
  4012dc:	f446 3680 	orr.w	r6, r6, #65536	; 0x10000
  4012e0:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P16;	//enable pull-up resistor
  4012e2:	680e      	ldr	r6, [r1, #0]
  4012e4:	f446 3680 	orr.w	r6, r6, #65536	; 0x10000
  4012e8:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P16; //turn on slow clock debounce
  4012ea:	6816      	ldr	r6, [r2, #0]
  4012ec:	f446 3680 	orr.w	r6, r6, #65536	; 0x10000
  4012f0:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P16;	//start debounce filter
  4012f2:	681e      	ldr	r6, [r3, #0]
  4012f4:	f446 3680 	orr.w	r6, r6, #65536	; 0x10000
  4012f8:	601e      	str	r6, [r3, #0]

	//Set up PC17 as ENCODER 9 INPUT B
	REG_PIOC_PER |= PIO_PER_P17; //enable PIO controller
  4012fa:	682e      	ldr	r6, [r5, #0]
  4012fc:	f446 3600 	orr.w	r6, r6, #131072	; 0x20000
  401300:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P17; //disable output
  401302:	6826      	ldr	r6, [r4, #0]
  401304:	f446 3600 	orr.w	r6, r6, #131072	; 0x20000
  401308:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P17; //disable pull-down resistor
  40130a:	6806      	ldr	r6, [r0, #0]
  40130c:	f446 3600 	orr.w	r6, r6, #131072	; 0x20000
  401310:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P17;	//enable pull-up resistor
  401312:	680e      	ldr	r6, [r1, #0]
  401314:	f446 3600 	orr.w	r6, r6, #131072	; 0x20000
  401318:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P17; //turn on slow clock debounce
  40131a:	6816      	ldr	r6, [r2, #0]
  40131c:	f446 3600 	orr.w	r6, r6, #131072	; 0x20000
  401320:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P17;	//start debounce filter
  401322:	681e      	ldr	r6, [r3, #0]
  401324:	f446 3600 	orr.w	r6, r6, #131072	; 0x20000
  401328:	601e      	str	r6, [r3, #0]



	
	//Set up PC18 as ENCODER 10 INPUT A
	REG_PIOC_PER |= PIO_PER_P18; //enable PIO controller
  40132a:	682e      	ldr	r6, [r5, #0]
  40132c:	f446 2680 	orr.w	r6, r6, #262144	; 0x40000
  401330:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P18; //disable output
  401332:	6826      	ldr	r6, [r4, #0]
  401334:	f446 2680 	orr.w	r6, r6, #262144	; 0x40000
  401338:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P18; //disable pull-down resistor
  40133a:	6806      	ldr	r6, [r0, #0]
  40133c:	f446 2680 	orr.w	r6, r6, #262144	; 0x40000
  401340:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P18;	//enable pull-up resistor
  401342:	680e      	ldr	r6, [r1, #0]
  401344:	f446 2680 	orr.w	r6, r6, #262144	; 0x40000
  401348:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P18; //turn on slow clock debounce
  40134a:	6816      	ldr	r6, [r2, #0]
  40134c:	f446 2680 	orr.w	r6, r6, #262144	; 0x40000
  401350:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P18;	//start debounce filter
  401352:	681e      	ldr	r6, [r3, #0]
  401354:	f446 2680 	orr.w	r6, r6, #262144	; 0x40000
  401358:	601e      	str	r6, [r3, #0]

	//Set up PC19 as ENCODER 10 INPUT B
	REG_PIOC_PER |= PIO_PER_P19; //enable PIO controller
  40135a:	682e      	ldr	r6, [r5, #0]
  40135c:	f446 2600 	orr.w	r6, r6, #524288	; 0x80000
  401360:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P19; //disable output
  401362:	6826      	ldr	r6, [r4, #0]
  401364:	f446 2600 	orr.w	r6, r6, #524288	; 0x80000
  401368:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P19; //disable pull-down resistor
  40136a:	6806      	ldr	r6, [r0, #0]
  40136c:	f446 2600 	orr.w	r6, r6, #524288	; 0x80000
  401370:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P19;	//enable pull-up resistor
  401372:	680e      	ldr	r6, [r1, #0]
  401374:	f446 2600 	orr.w	r6, r6, #524288	; 0x80000
  401378:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P19; //turn on slow clock debounce
  40137a:	6816      	ldr	r6, [r2, #0]
  40137c:	f446 2600 	orr.w	r6, r6, #524288	; 0x80000
  401380:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P19;	//start debounce filter
  401382:	681e      	ldr	r6, [r3, #0]
  401384:	f446 2600 	orr.w	r6, r6, #524288	; 0x80000
  401388:	601e      	str	r6, [r3, #0]



	//Set up PC20 as ENCODER 11 INPUT A
	REG_PIOC_PER |= PIO_PER_P20; //enable PIO controller
  40138a:	682e      	ldr	r6, [r5, #0]
  40138c:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
  401390:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P20; //disable output
  401392:	6826      	ldr	r6, [r4, #0]
  401394:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
  401398:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P20; //disable pull-down resistor
  40139a:	6806      	ldr	r6, [r0, #0]
  40139c:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
  4013a0:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P20;	//enable pull-up resistor
  4013a2:	680e      	ldr	r6, [r1, #0]
  4013a4:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
  4013a8:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P20; //turn on slow clock debounce
  4013aa:	6816      	ldr	r6, [r2, #0]
  4013ac:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
  4013b0:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P20;	//start debounce filter
  4013b2:	681e      	ldr	r6, [r3, #0]
  4013b4:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
  4013b8:	601e      	str	r6, [r3, #0]

	//Set up PC21 as ENCODER 11 INPUT B
	REG_PIOC_PER |= PIO_PER_P21; //enable PIO controller
  4013ba:	682e      	ldr	r6, [r5, #0]
  4013bc:	f446 1600 	orr.w	r6, r6, #2097152	; 0x200000
  4013c0:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P21; //disable output
  4013c2:	6826      	ldr	r6, [r4, #0]
  4013c4:	f446 1600 	orr.w	r6, r6, #2097152	; 0x200000
  4013c8:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P21; //disable pull-down resistor
  4013ca:	6806      	ldr	r6, [r0, #0]
  4013cc:	f446 1600 	orr.w	r6, r6, #2097152	; 0x200000
  4013d0:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P21;	//enable pull-up resistor
  4013d2:	680e      	ldr	r6, [r1, #0]
  4013d4:	f446 1600 	orr.w	r6, r6, #2097152	; 0x200000
  4013d8:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P21; //turn on slow clock debounce
  4013da:	6816      	ldr	r6, [r2, #0]
  4013dc:	f446 1600 	orr.w	r6, r6, #2097152	; 0x200000
  4013e0:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P21;	//start debounce filter
  4013e2:	681e      	ldr	r6, [r3, #0]
  4013e4:	f446 1600 	orr.w	r6, r6, #2097152	; 0x200000
  4013e8:	601e      	str	r6, [r3, #0]



	//Set up PC22 as ENCODER 12 INPUT A
	REG_PIOC_PER |= PIO_PER_P22; //enable PIO controller
  4013ea:	682e      	ldr	r6, [r5, #0]
  4013ec:	f446 0680 	orr.w	r6, r6, #4194304	; 0x400000
  4013f0:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P22; //disable output
  4013f2:	6826      	ldr	r6, [r4, #0]
  4013f4:	f446 0680 	orr.w	r6, r6, #4194304	; 0x400000
  4013f8:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P22; //disable pull-down resistor
  4013fa:	6806      	ldr	r6, [r0, #0]
  4013fc:	f446 0680 	orr.w	r6, r6, #4194304	; 0x400000
  401400:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P22;	//enable pull-up resistor
  401402:	680e      	ldr	r6, [r1, #0]
  401404:	f446 0680 	orr.w	r6, r6, #4194304	; 0x400000
  401408:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P22; //turn on slow clock debounce
  40140a:	6816      	ldr	r6, [r2, #0]
  40140c:	f446 0680 	orr.w	r6, r6, #4194304	; 0x400000
  401410:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P22;	//start debounce filter
  401412:	681e      	ldr	r6, [r3, #0]
  401414:	f446 0680 	orr.w	r6, r6, #4194304	; 0x400000
  401418:	601e      	str	r6, [r3, #0]

	//Set up PC23 as ENCODER 12 INPUT B
	REG_PIOC_PER |= PIO_PER_P23; //enable PIO controller
  40141a:	682e      	ldr	r6, [r5, #0]
  40141c:	f446 0600 	orr.w	r6, r6, #8388608	; 0x800000
  401420:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P23; //disable output
  401422:	6826      	ldr	r6, [r4, #0]
  401424:	f446 0600 	orr.w	r6, r6, #8388608	; 0x800000
  401428:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P23; //disable pull-down resistor
  40142a:	6806      	ldr	r6, [r0, #0]
  40142c:	f446 0600 	orr.w	r6, r6, #8388608	; 0x800000
  401430:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P23;	//enable pull-up resistor
  401432:	680e      	ldr	r6, [r1, #0]
  401434:	f446 0600 	orr.w	r6, r6, #8388608	; 0x800000
  401438:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P23; //turn on slow clock debounce
  40143a:	6816      	ldr	r6, [r2, #0]
  40143c:	f446 0600 	orr.w	r6, r6, #8388608	; 0x800000
  401440:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P23;	//start debounce filter
  401442:	681e      	ldr	r6, [r3, #0]
  401444:	f446 0600 	orr.w	r6, r6, #8388608	; 0x800000
  401448:	601e      	str	r6, [r3, #0]



	//Set up PC24 as ENCODER 13 INPUT A
	REG_PIOC_PER |= PIO_PER_P24; //enable PIO controller
  40144a:	682e      	ldr	r6, [r5, #0]
  40144c:	f046 7680 	orr.w	r6, r6, #16777216	; 0x1000000
  401450:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P24; //disable output
  401452:	6826      	ldr	r6, [r4, #0]
  401454:	f046 7680 	orr.w	r6, r6, #16777216	; 0x1000000
  401458:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P24; //disable pull-down resistor
  40145a:	6806      	ldr	r6, [r0, #0]
  40145c:	f046 7680 	orr.w	r6, r6, #16777216	; 0x1000000
  401460:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P24;	//enable pull-up resistor
  401462:	680e      	ldr	r6, [r1, #0]
  401464:	f046 7680 	orr.w	r6, r6, #16777216	; 0x1000000
  401468:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P24; //turn on slow clock debounce
  40146a:	6816      	ldr	r6, [r2, #0]
  40146c:	f046 7680 	orr.w	r6, r6, #16777216	; 0x1000000
  401470:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P24;	//start debounce filter
  401472:	681e      	ldr	r6, [r3, #0]
  401474:	f046 7680 	orr.w	r6, r6, #16777216	; 0x1000000
  401478:	601e      	str	r6, [r3, #0]

	//Set up PC25 as ENCODER 13 INPUT B
	REG_PIOC_PER |= PIO_PER_P25; //enable PIO controller
  40147a:	682e      	ldr	r6, [r5, #0]
  40147c:	f046 7600 	orr.w	r6, r6, #33554432	; 0x2000000
  401480:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P25; //disable output
  401482:	6826      	ldr	r6, [r4, #0]
  401484:	f046 7600 	orr.w	r6, r6, #33554432	; 0x2000000
  401488:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P25; //disable pull-down resistor
  40148a:	6806      	ldr	r6, [r0, #0]
  40148c:	f046 7600 	orr.w	r6, r6, #33554432	; 0x2000000
  401490:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P25;	//enable pull-up resistor
  401492:	680e      	ldr	r6, [r1, #0]
  401494:	f046 7600 	orr.w	r6, r6, #33554432	; 0x2000000
  401498:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P25; //turn on slow clock debounce
  40149a:	6816      	ldr	r6, [r2, #0]
  40149c:	f046 7600 	orr.w	r6, r6, #33554432	; 0x2000000
  4014a0:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P25;	//start debounce filter
  4014a2:	681e      	ldr	r6, [r3, #0]
  4014a4:	f046 7600 	orr.w	r6, r6, #33554432	; 0x2000000
  4014a8:	601e      	str	r6, [r3, #0]



	//Set up PC26 as ENCODER 14 INPUT A
	REG_PIOC_PER |= PIO_PER_P26; //enable PIO controller
  4014aa:	682e      	ldr	r6, [r5, #0]
  4014ac:	f046 6680 	orr.w	r6, r6, #67108864	; 0x4000000
  4014b0:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P26; //disable output
  4014b2:	6826      	ldr	r6, [r4, #0]
  4014b4:	f046 6680 	orr.w	r6, r6, #67108864	; 0x4000000
  4014b8:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P26; //disable pull-down resistor
  4014ba:	6806      	ldr	r6, [r0, #0]
  4014bc:	f046 6680 	orr.w	r6, r6, #67108864	; 0x4000000
  4014c0:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P26;	//enable pull-up resistor
  4014c2:	680e      	ldr	r6, [r1, #0]
  4014c4:	f046 6680 	orr.w	r6, r6, #67108864	; 0x4000000
  4014c8:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P26; //turn on slow clock debounce
  4014ca:	6816      	ldr	r6, [r2, #0]
  4014cc:	f046 6680 	orr.w	r6, r6, #67108864	; 0x4000000
  4014d0:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P26;	//start debounce filter
  4014d2:	681e      	ldr	r6, [r3, #0]
  4014d4:	f046 6680 	orr.w	r6, r6, #67108864	; 0x4000000
  4014d8:	601e      	str	r6, [r3, #0]

	//Set up PC27 as ENCODER 14 INPUT B
	REG_PIOC_PER |= PIO_PER_P27; //enable PIO controller
  4014da:	682e      	ldr	r6, [r5, #0]
  4014dc:	f046 6600 	orr.w	r6, r6, #134217728	; 0x8000000
  4014e0:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P27; //disable output
  4014e2:	6826      	ldr	r6, [r4, #0]
  4014e4:	f046 6600 	orr.w	r6, r6, #134217728	; 0x8000000
  4014e8:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P27; //disable pull-down resistor
  4014ea:	6806      	ldr	r6, [r0, #0]
  4014ec:	f046 6600 	orr.w	r6, r6, #134217728	; 0x8000000
  4014f0:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P27;	//enable pull-up resistor
  4014f2:	680e      	ldr	r6, [r1, #0]
  4014f4:	f046 6600 	orr.w	r6, r6, #134217728	; 0x8000000
  4014f8:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P27; //turn on slow clock debounce
  4014fa:	6816      	ldr	r6, [r2, #0]
  4014fc:	f046 6600 	orr.w	r6, r6, #134217728	; 0x8000000
  401500:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P27;	//start debounce filter
  401502:	681e      	ldr	r6, [r3, #0]
  401504:	f046 6600 	orr.w	r6, r6, #134217728	; 0x8000000
  401508:	601e      	str	r6, [r3, #0]



	//Set up PC28 as ENCODER 15 INPUT A
	REG_PIOC_PER |= PIO_PER_P28; //enable PIO controller
  40150a:	682e      	ldr	r6, [r5, #0]
  40150c:	f046 5680 	orr.w	r6, r6, #268435456	; 0x10000000
  401510:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P28; //disable output
  401512:	6826      	ldr	r6, [r4, #0]
  401514:	f046 5680 	orr.w	r6, r6, #268435456	; 0x10000000
  401518:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P28; //disable pull-down resistor
  40151a:	6806      	ldr	r6, [r0, #0]
  40151c:	f046 5680 	orr.w	r6, r6, #268435456	; 0x10000000
  401520:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P28;	//enable pull-up resistor
  401522:	680e      	ldr	r6, [r1, #0]
  401524:	f046 5680 	orr.w	r6, r6, #268435456	; 0x10000000
  401528:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P28; //turn on slow clock debounce
  40152a:	6816      	ldr	r6, [r2, #0]
  40152c:	f046 5680 	orr.w	r6, r6, #268435456	; 0x10000000
  401530:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P28;	//start debounce filter
  401532:	681e      	ldr	r6, [r3, #0]
  401534:	f046 5680 	orr.w	r6, r6, #268435456	; 0x10000000
  401538:	601e      	str	r6, [r3, #0]

	//Set up PC29 as ENCODER 15 INPUT B
	REG_PIOC_PER |= PIO_PER_P29; //enable PIO controller
  40153a:	682e      	ldr	r6, [r5, #0]
  40153c:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
  401540:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P29; //disable output
  401542:	6826      	ldr	r6, [r4, #0]
  401544:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
  401548:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P29; //disable pull-down resistor
  40154a:	6806      	ldr	r6, [r0, #0]
  40154c:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
  401550:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P29;	//enable pull-up resistor
  401552:	680e      	ldr	r6, [r1, #0]
  401554:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
  401558:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P29; //turn on slow clock debounce
  40155a:	6816      	ldr	r6, [r2, #0]
  40155c:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
  401560:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P29;	//start debounce filter
  401562:	681e      	ldr	r6, [r3, #0]
  401564:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
  401568:	601e      	str	r6, [r3, #0]



	//Set up PC30 as ENCODER 16 INPUT A
	REG_PIOC_PER |= PIO_PER_P30; //enable PIO controller
  40156a:	682e      	ldr	r6, [r5, #0]
  40156c:	f046 4680 	orr.w	r6, r6, #1073741824	; 0x40000000
  401570:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P30; //disable output
  401572:	6826      	ldr	r6, [r4, #0]
  401574:	f046 4680 	orr.w	r6, r6, #1073741824	; 0x40000000
  401578:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P30; //disable pull-down resistor
  40157a:	6806      	ldr	r6, [r0, #0]
  40157c:	f046 4680 	orr.w	r6, r6, #1073741824	; 0x40000000
  401580:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P30;	//enable pull-up resistor
  401582:	680e      	ldr	r6, [r1, #0]
  401584:	f046 4680 	orr.w	r6, r6, #1073741824	; 0x40000000
  401588:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P30; //turn on slow clock debounce
  40158a:	6816      	ldr	r6, [r2, #0]
  40158c:	f046 4680 	orr.w	r6, r6, #1073741824	; 0x40000000
  401590:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P30;	//start debounce filter
  401592:	681e      	ldr	r6, [r3, #0]
  401594:	f046 4680 	orr.w	r6, r6, #1073741824	; 0x40000000
  401598:	601e      	str	r6, [r3, #0]

	//Set up PC31 as ENCODER 16 INPUT B
	REG_PIOC_PER |= PIO_PER_P31; //enable PIO controller
  40159a:	682e      	ldr	r6, [r5, #0]
  40159c:	f046 4600 	orr.w	r6, r6, #2147483648	; 0x80000000
  4015a0:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P31; //disable output
  4015a2:	6825      	ldr	r5, [r4, #0]
  4015a4:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
  4015a8:	6025      	str	r5, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P31; //disable pull-down resistor
  4015aa:	6804      	ldr	r4, [r0, #0]
  4015ac:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
  4015b0:	6004      	str	r4, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P31;	//enable pull-up resistor
  4015b2:	6808      	ldr	r0, [r1, #0]
  4015b4:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
  4015b8:	6008      	str	r0, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P31; //turn on slow clock debounce
  4015ba:	6811      	ldr	r1, [r2, #0]
  4015bc:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
  4015c0:	6011      	str	r1, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P31;	//start debounce filter
  4015c2:	681a      	ldr	r2, [r3, #0]
  4015c4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
  4015c8:	601a      	str	r2, [r3, #0]
	


	/**************			CONFIGURE ENCODER INTERRUPTS			**************/

	uint32_t flag_clear = REG_PIOC_ISR;	//clear left over interrupt flags
  4015ca:	332c      	adds	r3, #44	; 0x2c
  4015cc:	681b      	ldr	r3, [r3, #0]

	//Enable interrupts for Encoder 1
	REG_PIOC_IER |= PIO_IER_P0;			//enable input rising edge interrupt
  4015ce:	4b80      	ldr	r3, [pc, #512]	; (4017d0 <Encoder_init+0x84c>)
  4015d0:	681a      	ldr	r2, [r3, #0]
  4015d2:	f042 0201 	orr.w	r2, r2, #1
  4015d6:	601a      	str	r2, [r3, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P0;
  4015d8:	4a7e      	ldr	r2, [pc, #504]	; (4017d4 <Encoder_init+0x850>)
  4015da:	6811      	ldr	r1, [r2, #0]
  4015dc:	f041 0101 	orr.w	r1, r1, #1
  4015e0:	6011      	str	r1, [r2, #0]
	REG_PIOC_IER |= PIO_IER_P1;			//enable input rising edge interrupt
  4015e2:	6819      	ldr	r1, [r3, #0]
  4015e4:	f041 0102 	orr.w	r1, r1, #2
  4015e8:	6019      	str	r1, [r3, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P1;
  4015ea:	6811      	ldr	r1, [r2, #0]
  4015ec:	f041 0102 	orr.w	r1, r1, #2
  4015f0:	6011      	str	r1, [r2, #0]

	//Enable interrupts for Encoder 2
	REG_PIOC_IER |= PIO_IER_P2;			//enable input rising edge interrupt
  4015f2:	6819      	ldr	r1, [r3, #0]
  4015f4:	f041 0104 	orr.w	r1, r1, #4
  4015f8:	6019      	str	r1, [r3, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P2;
  4015fa:	6813      	ldr	r3, [r2, #0]
  4015fc:	f043 0304 	orr.w	r3, r3, #4
  401600:	6013      	str	r3, [r2, #0]
	REG_PIOC_IER |= PIO_IER_P3;			//enable input rising edge interrupt
  401602:	4b73      	ldr	r3, [pc, #460]	; (4017d0 <Encoder_init+0x84c>)
  401604:	6819      	ldr	r1, [r3, #0]
  401606:	f041 0108 	orr.w	r1, r1, #8
  40160a:	6019      	str	r1, [r3, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P3;
  40160c:	6811      	ldr	r1, [r2, #0]
  40160e:	f041 0108 	orr.w	r1, r1, #8
  401612:	6011      	str	r1, [r2, #0]

	//Enable interrupts for Encoder 3
	REG_PIOC_IER |= PIO_IER_P4;			//enable input rising edge interrupt
  401614:	6819      	ldr	r1, [r3, #0]
  401616:	f041 0110 	orr.w	r1, r1, #16
  40161a:	6019      	str	r1, [r3, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P4;
  40161c:	6811      	ldr	r1, [r2, #0]
  40161e:	f041 0110 	orr.w	r1, r1, #16
  401622:	6011      	str	r1, [r2, #0]
	REG_PIOC_IER |= PIO_IER_P5;			//enable input rising edge interrupt
  401624:	6819      	ldr	r1, [r3, #0]
  401626:	f041 0120 	orr.w	r1, r1, #32
  40162a:	6019      	str	r1, [r3, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P5;
  40162c:	6811      	ldr	r1, [r2, #0]
  40162e:	f041 0120 	orr.w	r1, r1, #32
  401632:	6011      	str	r1, [r2, #0]

	//Enable interrupts for Encoder 4
	REG_PIOC_IER |= PIO_IER_P6;			//enable input rising edge interrupt
  401634:	6819      	ldr	r1, [r3, #0]
  401636:	f041 0140 	orr.w	r1, r1, #64	; 0x40
  40163a:	6019      	str	r1, [r3, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P6;
  40163c:	6811      	ldr	r1, [r2, #0]
  40163e:	f041 0140 	orr.w	r1, r1, #64	; 0x40
  401642:	6011      	str	r1, [r2, #0]
	REG_PIOC_IER |= PIO_IER_P7;			//enable input rising edge interrupt
  401644:	6819      	ldr	r1, [r3, #0]
  401646:	f041 0180 	orr.w	r1, r1, #128	; 0x80
  40164a:	6019      	str	r1, [r3, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P7;
  40164c:	6811      	ldr	r1, [r2, #0]
  40164e:	f041 0180 	orr.w	r1, r1, #128	; 0x80
  401652:	6011      	str	r1, [r2, #0]

	//Enable interrupts for Encoder 5
	REG_PIOC_IER |= PIO_IER_P8;			//enable input rising edge interrupt
  401654:	6819      	ldr	r1, [r3, #0]
  401656:	f441 7180 	orr.w	r1, r1, #256	; 0x100
  40165a:	6019      	str	r1, [r3, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P8;
  40165c:	6811      	ldr	r1, [r2, #0]
  40165e:	f441 7180 	orr.w	r1, r1, #256	; 0x100
  401662:	6011      	str	r1, [r2, #0]
	REG_PIOC_IER |= PIO_IER_P9;			//enable input rising edge interrupt
  401664:	6819      	ldr	r1, [r3, #0]
  401666:	f441 7100 	orr.w	r1, r1, #512	; 0x200
  40166a:	6019      	str	r1, [r3, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P9;
  40166c:	6811      	ldr	r1, [r2, #0]
  40166e:	f441 7100 	orr.w	r1, r1, #512	; 0x200
  401672:	6011      	str	r1, [r2, #0]

	//Enable interrupts for Encoder 6
	REG_PIOC_IER |= PIO_IER_P10;			//enable input rising edge interrupt
  401674:	6819      	ldr	r1, [r3, #0]
  401676:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
  40167a:	6019      	str	r1, [r3, #0]
	//REG_PIOC_REHLSR |= PIO_REHLSR_P10;
	REG_PIOC_IER |= PIO_IER_P11;			//enable input rising edge interrupt
  40167c:	6819      	ldr	r1, [r3, #0]
  40167e:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
  401682:	6019      	str	r1, [r3, #0]
	//REG_PIOC_REHLSR |= PIO_REHLSR_P11;

	//Enable interrupts for Encoder 7
	REG_PIOC_IER |= PIO_IER_P3;			//enable input rising edge interrupt
  401684:	6819      	ldr	r1, [r3, #0]
  401686:	f041 0108 	orr.w	r1, r1, #8
  40168a:	6019      	str	r1, [r3, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P3;
  40168c:	6811      	ldr	r1, [r2, #0]
  40168e:	f041 0108 	orr.w	r1, r1, #8
  401692:	6011      	str	r1, [r2, #0]
	REG_PIOC_IER |= PIO_IER_P13;			//enable input rising edge interrupt
  401694:	6819      	ldr	r1, [r3, #0]
  401696:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
  40169a:	6019      	str	r1, [r3, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P13;
  40169c:	6811      	ldr	r1, [r2, #0]
  40169e:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
  4016a2:	6011      	str	r1, [r2, #0]

	//Enable interrupts for Encoder 8
	REG_PIOC_IER |= PIO_IER_P14;			//enable input rising edge interrupt
  4016a4:	6819      	ldr	r1, [r3, #0]
  4016a6:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
  4016aa:	6019      	str	r1, [r3, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P14;
  4016ac:	6811      	ldr	r1, [r2, #0]
  4016ae:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
  4016b2:	6011      	str	r1, [r2, #0]
	REG_PIOC_IER |= PIO_IER_P15;			//enable input rising edge interrupt
  4016b4:	6819      	ldr	r1, [r3, #0]
  4016b6:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
  4016ba:	6019      	str	r1, [r3, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P15;
  4016bc:	6811      	ldr	r1, [r2, #0]
  4016be:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
  4016c2:	6011      	str	r1, [r2, #0]

	//Enable interrupts for Encoder 9
	REG_PIOC_IER |= PIO_IER_P16;			//enable input rising edge interrupt
  4016c4:	6819      	ldr	r1, [r3, #0]
  4016c6:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
  4016ca:	6019      	str	r1, [r3, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P16;
  4016cc:	6811      	ldr	r1, [r2, #0]
  4016ce:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
  4016d2:	6011      	str	r1, [r2, #0]
	REG_PIOC_IER |= PIO_IER_P17;			//enable input rising edge interrupt
  4016d4:	6819      	ldr	r1, [r3, #0]
  4016d6:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
  4016da:	6019      	str	r1, [r3, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P17;
  4016dc:	6811      	ldr	r1, [r2, #0]
  4016de:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
  4016e2:	6011      	str	r1, [r2, #0]

	//Enable interrupts for Encoder 10
	REG_PIOC_IER |= PIO_IER_P18;			//enable input rising edge interrupt
  4016e4:	6819      	ldr	r1, [r3, #0]
  4016e6:	f441 2180 	orr.w	r1, r1, #262144	; 0x40000
  4016ea:	6019      	str	r1, [r3, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P18;
  4016ec:	6811      	ldr	r1, [r2, #0]
  4016ee:	f441 2180 	orr.w	r1, r1, #262144	; 0x40000
  4016f2:	6011      	str	r1, [r2, #0]
	REG_PIOC_IER |= PIO_IER_P19;			//enable input rising edge interrupt
  4016f4:	6819      	ldr	r1, [r3, #0]
  4016f6:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
  4016fa:	6019      	str	r1, [r3, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P19;
  4016fc:	6811      	ldr	r1, [r2, #0]
  4016fe:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
  401702:	6011      	str	r1, [r2, #0]

	//Enable interrupts for Encoder 11
	REG_PIOC_IER |= PIO_IER_P20;			//enable input rising edge interrupt
  401704:	6819      	ldr	r1, [r3, #0]
  401706:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40170a:	6019      	str	r1, [r3, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P20;
  40170c:	6811      	ldr	r1, [r2, #0]
  40170e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  401712:	6011      	str	r1, [r2, #0]
	REG_PIOC_IER |= PIO_IER_P21;			//enable input rising edge interrupt
  401714:	6819      	ldr	r1, [r3, #0]
  401716:	f441 1100 	orr.w	r1, r1, #2097152	; 0x200000
  40171a:	6019      	str	r1, [r3, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P21;
  40171c:	6811      	ldr	r1, [r2, #0]
  40171e:	f441 1100 	orr.w	r1, r1, #2097152	; 0x200000
  401722:	6011      	str	r1, [r2, #0]

	//Enable interrupts for Encoder 12
	REG_PIOC_IER |= PIO_IER_P22;			//enable input rising edge interrupt
  401724:	6819      	ldr	r1, [r3, #0]
  401726:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
  40172a:	6019      	str	r1, [r3, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P22;
  40172c:	6811      	ldr	r1, [r2, #0]
  40172e:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
  401732:	6011      	str	r1, [r2, #0]
	REG_PIOC_IER |= PIO_IER_P23;			//enable input rising edge interrupt
  401734:	6819      	ldr	r1, [r3, #0]
  401736:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
  40173a:	6019      	str	r1, [r3, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P23;
  40173c:	6811      	ldr	r1, [r2, #0]
  40173e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
  401742:	6011      	str	r1, [r2, #0]

	//Enable interrupts for Encoder 13
	REG_PIOC_IER |= PIO_IER_P24;			//enable input rising edge interrupt
  401744:	6819      	ldr	r1, [r3, #0]
  401746:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
  40174a:	6019      	str	r1, [r3, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P24;
  40174c:	6811      	ldr	r1, [r2, #0]
  40174e:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
  401752:	6011      	str	r1, [r2, #0]
	REG_PIOC_IER |= PIO_IER_P25;			//enable input rising edge interrupt
  401754:	6819      	ldr	r1, [r3, #0]
  401756:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
  40175a:	6019      	str	r1, [r3, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P25;
  40175c:	6811      	ldr	r1, [r2, #0]
  40175e:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
  401762:	6011      	str	r1, [r2, #0]

	//Enable interrupts for Encoder 14
	REG_PIOC_IER |= PIO_IER_P26;			//enable input rising edge interrupt
  401764:	6819      	ldr	r1, [r3, #0]
  401766:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
  40176a:	6019      	str	r1, [r3, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P26;
  40176c:	6811      	ldr	r1, [r2, #0]
  40176e:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
  401772:	6011      	str	r1, [r2, #0]
	REG_PIOC_IER |= PIO_IER_P27;			//enable input rising edge interrupt
  401774:	6819      	ldr	r1, [r3, #0]
  401776:	f041 6100 	orr.w	r1, r1, #134217728	; 0x8000000
  40177a:	6019      	str	r1, [r3, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P27;
  40177c:	6811      	ldr	r1, [r2, #0]
  40177e:	f041 6100 	orr.w	r1, r1, #134217728	; 0x8000000
  401782:	6011      	str	r1, [r2, #0]

	//Enable interrupts for Encoder 15
	REG_PIOC_IER |= PIO_IER_P28;			//enable input rising edge interrupt
  401784:	6819      	ldr	r1, [r3, #0]
  401786:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
  40178a:	6019      	str	r1, [r3, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P28;
  40178c:	6811      	ldr	r1, [r2, #0]
  40178e:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
  401792:	6011      	str	r1, [r2, #0]
	REG_PIOC_IER |= PIO_IER_P29;			//enable input rising edge interrupt
  401794:	6819      	ldr	r1, [r3, #0]
  401796:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
  40179a:	6019      	str	r1, [r3, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P29;
  40179c:	6811      	ldr	r1, [r2, #0]
  40179e:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
  4017a2:	6011      	str	r1, [r2, #0]

	//Enable interrupts for Encoder 16
	REG_PIOC_IER |= PIO_IER_P30;			//enable input rising edge interrupt
  4017a4:	6819      	ldr	r1, [r3, #0]
  4017a6:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
  4017aa:	6019      	str	r1, [r3, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P30;
  4017ac:	6811      	ldr	r1, [r2, #0]
  4017ae:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
  4017b2:	6011      	str	r1, [r2, #0]
	REG_PIOC_IER |= PIO_IER_P31;			//enable input rising edge interrupt
  4017b4:	6819      	ldr	r1, [r3, #0]
  4017b6:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
  4017ba:	6019      	str	r1, [r3, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P31;
  4017bc:	6813      	ldr	r3, [r2, #0]
  4017be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  4017c2:	6013      	str	r3, [r2, #0]
  4017c4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  4017c8:	4b03      	ldr	r3, [pc, #12]	; (4017d8 <Encoder_init+0x854>)
  4017ca:	601a      	str	r2, [r3, #0]

	NVIC_EnableIRQ(PIOC_IRQn);			//enable PORT C interrupts


}
  4017cc:	bc70      	pop	{r4, r5, r6}
  4017ce:	4770      	bx	lr
  4017d0:	400e1240 	.word	0x400e1240
  4017d4:	400e12d4 	.word	0x400e12d4
  4017d8:	e000e100 	.word	0xe000e100

004017dc <PIOC_Handler>:



void PIOC_Handler(){
  4017dc:	b508      	push	{r3, lr}

	uint32_t status = REG_PIOC_ISR;	//read PIOC interrupt status & clear interrupt flags
  4017de:	4b56      	ldr	r3, [pc, #344]	; (401938 <PIOC_Handler+0x15c>)
  4017e0:	681b      	ldr	r3, [r3, #0]

	//check if Encoder 1 was rotated
	if ( (status & PIO_ISR_P0) || (status & PIO_ISR_P1) ){	
  4017e2:	f013 0f03 	tst.w	r3, #3
  4017e6:	d005      	beq.n	4017f4 <PIOC_Handler+0x18>
		encoder_direction(PIO_ODSR_P0, PIO_ODSR_P1, 0);
  4017e8:	2200      	movs	r2, #0
  4017ea:	2102      	movs	r1, #2
  4017ec:	2001      	movs	r0, #1
  4017ee:	4b53      	ldr	r3, [pc, #332]	; (40193c <PIOC_Handler+0x160>)
  4017f0:	4798      	blx	r3
  4017f2:	bd08      	pop	{r3, pc}
	}

	//check if Encoder 2 was rotated
	else if ( (status & PIO_ISR_P2) || (status & PIO_ISR_P3) ){
  4017f4:	f013 0f0c 	tst.w	r3, #12
  4017f8:	d005      	beq.n	401806 <PIOC_Handler+0x2a>
		encoder_direction(PIO_ODSR_P2, PIO_ODSR_P3, 1);
  4017fa:	2201      	movs	r2, #1
  4017fc:	2108      	movs	r1, #8
  4017fe:	2004      	movs	r0, #4
  401800:	4b4e      	ldr	r3, [pc, #312]	; (40193c <PIOC_Handler+0x160>)
  401802:	4798      	blx	r3
  401804:	bd08      	pop	{r3, pc}
	}

	//check if Encoder 3 was rotated
	else if ( (status & PIO_ISR_P4) || (status & PIO_ISR_P5) ){
  401806:	f013 0f30 	tst.w	r3, #48	; 0x30
  40180a:	d005      	beq.n	401818 <PIOC_Handler+0x3c>
		encoder_direction(PIO_ODSR_P4, PIO_ODSR_P5, 2);
  40180c:	2202      	movs	r2, #2
  40180e:	2120      	movs	r1, #32
  401810:	2010      	movs	r0, #16
  401812:	4b4a      	ldr	r3, [pc, #296]	; (40193c <PIOC_Handler+0x160>)
  401814:	4798      	blx	r3
  401816:	bd08      	pop	{r3, pc}
	}

	//check if Encoder 4 was rotated
	else if ( (status & PIO_ISR_P6) || (status & PIO_ISR_P7) ){
  401818:	f013 0fc0 	tst.w	r3, #192	; 0xc0
  40181c:	d005      	beq.n	40182a <PIOC_Handler+0x4e>
		encoder_direction(PIO_ODSR_P6, PIO_ODSR_P7, 3);
  40181e:	2203      	movs	r2, #3
  401820:	2180      	movs	r1, #128	; 0x80
  401822:	2040      	movs	r0, #64	; 0x40
  401824:	4b45      	ldr	r3, [pc, #276]	; (40193c <PIOC_Handler+0x160>)
  401826:	4798      	blx	r3
  401828:	bd08      	pop	{r3, pc}
	}

	//check if Encoder 5 was rotated
	else if ( (status & PIO_ISR_P8) || (status & PIO_ISR_P9) ){
  40182a:	f413 7f40 	tst.w	r3, #768	; 0x300
  40182e:	d007      	beq.n	401840 <PIOC_Handler+0x64>
		encoder_direction(PIO_ODSR_P8, PIO_ODSR_P9, 4);
  401830:	2204      	movs	r2, #4
  401832:	f44f 7100 	mov.w	r1, #512	; 0x200
  401836:	f44f 7080 	mov.w	r0, #256	; 0x100
  40183a:	4b40      	ldr	r3, [pc, #256]	; (40193c <PIOC_Handler+0x160>)
  40183c:	4798      	blx	r3
  40183e:	bd08      	pop	{r3, pc}
	}

	//check if Encoder 6 was rotated
	else if ( (status & PIO_ISR_P10) || (status & PIO_ISR_P11) ){
  401840:	f413 6f40 	tst.w	r3, #3072	; 0xc00
  401844:	d007      	beq.n	401856 <PIOC_Handler+0x7a>
		encoder_direction(PIO_ODSR_P10, PIO_ODSR_P11, 5);
  401846:	2205      	movs	r2, #5
  401848:	f44f 6100 	mov.w	r1, #2048	; 0x800
  40184c:	f44f 6080 	mov.w	r0, #1024	; 0x400
  401850:	4b3a      	ldr	r3, [pc, #232]	; (40193c <PIOC_Handler+0x160>)
  401852:	4798      	blx	r3
  401854:	bd08      	pop	{r3, pc}
	}

	//check if Encoder 7 was rotated
	else if ( (status & PIO_ISR_P12) || (status & PIO_ISR_P13) ){
  401856:	f413 5f40 	tst.w	r3, #12288	; 0x3000
  40185a:	d007      	beq.n	40186c <PIOC_Handler+0x90>
		encoder_direction(PIO_ODSR_P12, PIO_ODSR_P13, 6);
  40185c:	2206      	movs	r2, #6
  40185e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  401862:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  401866:	4b35      	ldr	r3, [pc, #212]	; (40193c <PIOC_Handler+0x160>)
  401868:	4798      	blx	r3
  40186a:	bd08      	pop	{r3, pc}
	}

	//check if Encoder 8 was rotated
	else if ( (status & PIO_ISR_P14) || (status & PIO_ISR_P15) ){
  40186c:	f413 4f40 	tst.w	r3, #49152	; 0xc000
  401870:	d007      	beq.n	401882 <PIOC_Handler+0xa6>
		encoder_direction(PIO_ODSR_P14, PIO_ODSR_P15, 7);
  401872:	2207      	movs	r2, #7
  401874:	f44f 4100 	mov.w	r1, #32768	; 0x8000
  401878:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  40187c:	4b2f      	ldr	r3, [pc, #188]	; (40193c <PIOC_Handler+0x160>)
  40187e:	4798      	blx	r3
  401880:	bd08      	pop	{r3, pc}
	}

	//check if Encoder 9 was rotated
	else if ( (status & PIO_ISR_P16) || (status & PIO_ISR_P17) ){
  401882:	f413 3f40 	tst.w	r3, #196608	; 0x30000
  401886:	d007      	beq.n	401898 <PIOC_Handler+0xbc>
		encoder_direction(PIO_ODSR_P16, PIO_ODSR_P17, 8);
  401888:	2208      	movs	r2, #8
  40188a:	f44f 3100 	mov.w	r1, #131072	; 0x20000
  40188e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
  401892:	4b2a      	ldr	r3, [pc, #168]	; (40193c <PIOC_Handler+0x160>)
  401894:	4798      	blx	r3
  401896:	bd08      	pop	{r3, pc}
	}

	//check if Encoder 10 was rotated
	else if ( (status & PIO_ISR_P18) || (status & PIO_ISR_P19) ){
  401898:	f413 2f40 	tst.w	r3, #786432	; 0xc0000
  40189c:	d007      	beq.n	4018ae <PIOC_Handler+0xd2>
		encoder_direction(PIO_ODSR_P18, PIO_ODSR_P19, 9);
  40189e:	2209      	movs	r2, #9
  4018a0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  4018a4:	f44f 2080 	mov.w	r0, #262144	; 0x40000
  4018a8:	4b24      	ldr	r3, [pc, #144]	; (40193c <PIOC_Handler+0x160>)
  4018aa:	4798      	blx	r3
  4018ac:	bd08      	pop	{r3, pc}
	}

	//check if Encoder 11 was rotated
	else if ( (status & PIO_ISR_P20) || (status & PIO_ISR_P21) ){
  4018ae:	f413 1f40 	tst.w	r3, #3145728	; 0x300000
  4018b2:	d007      	beq.n	4018c4 <PIOC_Handler+0xe8>
		encoder_direction(PIO_ODSR_P20, PIO_ODSR_P21, 10);
  4018b4:	220a      	movs	r2, #10
  4018b6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
  4018ba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  4018be:	4b1f      	ldr	r3, [pc, #124]	; (40193c <PIOC_Handler+0x160>)
  4018c0:	4798      	blx	r3
  4018c2:	bd08      	pop	{r3, pc}
	}

	//check if Encoder 12 was rotated
	else if ( (status & PIO_ISR_P22) || (status & PIO_ISR_P23) ){
  4018c4:	f413 0f40 	tst.w	r3, #12582912	; 0xc00000
  4018c8:	d007      	beq.n	4018da <PIOC_Handler+0xfe>
		encoder_direction(PIO_ODSR_P22, PIO_ODSR_P23, 11);
  4018ca:	220b      	movs	r2, #11
  4018cc:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
  4018d0:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
  4018d4:	4b19      	ldr	r3, [pc, #100]	; (40193c <PIOC_Handler+0x160>)
  4018d6:	4798      	blx	r3
  4018d8:	bd08      	pop	{r3, pc}
	}

	//check if Encoder 13 was rotated
	else if ( (status & PIO_ISR_P24) || (status & PIO_ISR_P25) ){
  4018da:	f013 7f40 	tst.w	r3, #50331648	; 0x3000000
  4018de:	d007      	beq.n	4018f0 <PIOC_Handler+0x114>
		encoder_direction(PIO_ODSR_P24, PIO_ODSR_P25, 12);
  4018e0:	220c      	movs	r2, #12
  4018e2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
  4018e6:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
  4018ea:	4b14      	ldr	r3, [pc, #80]	; (40193c <PIOC_Handler+0x160>)
  4018ec:	4798      	blx	r3
  4018ee:	bd08      	pop	{r3, pc}
	}
	
	//check if Encoder 14 was rotated
	else if ( (status & PIO_ISR_P26) || (status & PIO_ISR_P27) ){
  4018f0:	f013 6f40 	tst.w	r3, #201326592	; 0xc000000
  4018f4:	d007      	beq.n	401906 <PIOC_Handler+0x12a>
		encoder_direction(PIO_ODSR_P26, PIO_ODSR_P27, 13);
  4018f6:	220d      	movs	r2, #13
  4018f8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4018fc:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
  401900:	4b0e      	ldr	r3, [pc, #56]	; (40193c <PIOC_Handler+0x160>)
  401902:	4798      	blx	r3
  401904:	bd08      	pop	{r3, pc}
	}

	//check if Encoder 15 was rotated
	else if ( (status & PIO_ISR_P28) || (status & PIO_ISR_P29) ){
  401906:	f013 5f40 	tst.w	r3, #805306368	; 0x30000000
  40190a:	d007      	beq.n	40191c <PIOC_Handler+0x140>
		encoder_direction(PIO_ODSR_P28, PIO_ODSR_P29, 14);
  40190c:	220e      	movs	r2, #14
  40190e:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  401912:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
  401916:	4b09      	ldr	r3, [pc, #36]	; (40193c <PIOC_Handler+0x160>)
  401918:	4798      	blx	r3
  40191a:	bd08      	pop	{r3, pc}
	}

	//check if Encoder 16 was rotated
	else if ( (status & PIO_ISR_P30) || (status & PIO_ISR_P31) ){
  40191c:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
  401920:	d101      	bne.n	401926 <PIOC_Handler+0x14a>
  401922:	2b00      	cmp	r3, #0
  401924:	da06      	bge.n	401934 <PIOC_Handler+0x158>
		encoder_direction(PIO_ODSR_P30, PIO_ODSR_P31, 15);
  401926:	220f      	movs	r2, #15
  401928:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  40192c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  401930:	4b02      	ldr	r3, [pc, #8]	; (40193c <PIOC_Handler+0x160>)
  401932:	4798      	blx	r3
  401934:	bd08      	pop	{r3, pc}
  401936:	bf00      	nop
  401938:	400e124c 	.word	0x400e124c
  40193c:	00400f01 	.word	0x00400f01

00401940 <getWidth_28>:

//______________________________________________________________________________________________________

uint8_t getWidth_28() {
	return 16;
}
  401940:	2010      	movs	r0, #16
  401942:	4770      	bx	lr

00401944 <getWidth_22>:

uint8_t getWidth_22() {
	return 12;
}
  401944:	200c      	movs	r0, #12
  401946:	4770      	bx	lr

00401948 <getWidth_18>:

uint8_t getWidth_18() {
	return 11;
}
  401948:	200b      	movs	r0, #11
  40194a:	4770      	bx	lr

0040194c <getByte_28>:

uint8_t getByte_28(char input, uint16_t byte_offset) {
	// Finds which descriptor to use
	uint16_t index_value = input - oCRAExtended_28ptFontInfo.StartCharacter;
	// Finds the start of the character in the main array using the descriptor
	uint16_t lookup = oCRAExtended_28ptDescriptors[index_value].Offset;
  40194c:	3823      	subs	r0, #35	; 0x23
  40194e:	b280      	uxth	r0, r0
  401950:	4b03      	ldr	r3, [pc, #12]	; (401960 <getByte_28+0x14>)
  401952:	eb03 0080 	add.w	r0, r3, r0, lsl #2
	// Accesses the intended byte in the character
	return oCRAExtended_28ptBitmaps[lookup + byte_offset];
  401956:	8842      	ldrh	r2, [r0, #2]
  401958:	4b02      	ldr	r3, [pc, #8]	; (401964 <getByte_28+0x18>)
  40195a:	4419      	add	r1, r3
}
  40195c:	5c88      	ldrb	r0, [r1, r2]
  40195e:	4770      	bx	lr
  401960:	00404ee4 	.word	0x00404ee4
  401964:	004048b4 	.word	0x004048b4

00401968 <getByte_22>:

uint8_t getByte_22(char input, uint16_t byte_offset) {
  401968:	b082      	sub	sp, #8
	// Finds which descriptor to use
	volatile uint16_t index_value = input - oCRAExtended_22ptFontInfo.StartCharacter;
  40196a:	3823      	subs	r0, #35	; 0x23
  40196c:	b280      	uxth	r0, r0
  40196e:	f8ad 0006 	strh.w	r0, [sp, #6]
	// Finds the start of the character in the main array using the descriptor
	volatile uint16_t lookup = oCRAExtended_22ptDescriptors[index_value].Offset;
  401972:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  401976:	b29a      	uxth	r2, r3
  401978:	4b06      	ldr	r3, [pc, #24]	; (401994 <getByte_22+0x2c>)
  40197a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  40197e:	885b      	ldrh	r3, [r3, #2]
  401980:	f8ad 3004 	strh.w	r3, [sp, #4]
	// Accesses the intended byte in the character
	return oCRAExtended_22ptBitmaps[lookup + byte_offset];
  401984:	f8bd 3004 	ldrh.w	r3, [sp, #4]
  401988:	4a03      	ldr	r2, [pc, #12]	; (401998 <getByte_22+0x30>)
  40198a:	fa12 f383 	uxtah	r3, r2, r3
}
  40198e:	5c58      	ldrb	r0, [r3, r1]
  401990:	b002      	add	sp, #8
  401992:	4770      	bx	lr
  401994:	00404480 	.word	0x00404480
  401998:	00403fb8 	.word	0x00403fb8

0040199c <getByte_18>:

uint8_t getByte_18(char input, uint16_t byte_offset) {
  40199c:	b082      	sub	sp, #8
	// Finds which descriptor to use
	volatile uint16_t index_value = input - oCRAExtended_18ptFontInfo.StartCharacter;
  40199e:	3823      	subs	r0, #35	; 0x23
  4019a0:	b280      	uxth	r0, r0
  4019a2:	f8ad 0006 	strh.w	r0, [sp, #6]
	// Finds the start of the character in the main array using the descriptor
	volatile uint16_t lookup = oCRAExtended_18ptDescriptors[index_value].Offset;
  4019a6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  4019aa:	b29a      	uxth	r2, r3
  4019ac:	4b06      	ldr	r3, [pc, #24]	; (4019c8 <getByte_18+0x2c>)
  4019ae:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  4019b2:	885b      	ldrh	r3, [r3, #2]
  4019b4:	f8ad 3004 	strh.w	r3, [sp, #4]
	// Accesses the intended byte in the character
	return oCRAExtended_18ptBitmaps[lookup + byte_offset];
  4019b8:	f8bd 3004 	ldrh.w	r3, [sp, #4]
  4019bc:	4a03      	ldr	r2, [pc, #12]	; (4019cc <getByte_18+0x30>)
  4019be:	fa12 f383 	uxtah	r3, r2, r3
  4019c2:	5c58      	ldrb	r0, [r3, r1]
  4019c4:	b002      	add	sp, #8
  4019c6:	4770      	bx	lr
  4019c8:	00404fe4 	.word	0x00404fe4
  4019cc:	004045c8 	.word	0x004045c8

004019d0 <leds_update_status>:
	SPI_led_init();
	leds_update_cursor(curr_step);
}

/* updates LED statuses for current page being displayed */
void leds_update_status(){
  4019d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4019d2:	4d06      	ldr	r5, [pc, #24]	; (4019ec <leds_update_status+0x1c>)

	/* match LED status to current display page status */
	for (int i = 0; i < 16; i++){
  4019d4:	2400      	movs	r4, #0
		leds_status[i] = notes_display_get(display_page, i);
  4019d6:	4f06      	ldr	r7, [pc, #24]	; (4019f0 <leds_update_status+0x20>)
  4019d8:	4e06      	ldr	r6, [pc, #24]	; (4019f4 <leds_update_status+0x24>)
  4019da:	b2e1      	uxtb	r1, r4
  4019dc:	7838      	ldrb	r0, [r7, #0]
  4019de:	47b0      	blx	r6
  4019e0:	f845 0f04 	str.w	r0, [r5, #4]!

/* updates LED statuses for current page being displayed */
void leds_update_status(){

	/* match LED status to current display page status */
	for (int i = 0; i < 16; i++){
  4019e4:	3401      	adds	r4, #1
  4019e6:	2c10      	cmp	r4, #16
  4019e8:	d1f7      	bne.n	4019da <leds_update_status+0xa>
		leds_status[i] = notes_display_get(display_page, i);
	}

}
  4019ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4019ec:	20000650 	.word	0x20000650
  4019f0:	20008724 	.word	0x20008724
  4019f4:	00402e8d 	.word	0x00402e8d

004019f8 <leds_update_display>:
void leds_update_note(uint8_t led_pos){

	leds_update_display();
}

 void leds_update_display(){
  4019f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  4019fa:	b672      	cpsid	i
  4019fc:	f3bf 8f5f 	dmb	sy

	cpu_irq_disable();
  401a00:	4f90      	ldr	r7, [pc, #576]	; (401c44 <leds_update_display+0x24c>)
  401a02:	2300      	movs	r3, #0
  401a04:	703b      	strb	r3, [r7, #0]

	//Set Write Command, Function, and BC Bits
	SPI_byteSend(0x94);
  401a06:	2094      	movs	r0, #148	; 0x94
  401a08:	4c8f      	ldr	r4, [pc, #572]	; (401c48 <leds_update_display+0x250>)
  401a0a:	47a0      	blx	r4
	SPI_byteSend(0x5F);
  401a0c:	205f      	movs	r0, #95	; 0x5f
  401a0e:	47a0      	blx	r4
	SPI_byteSend(0xFF);
  401a10:	20ff      	movs	r0, #255	; 0xff
  401a12:	47a0      	blx	r4
	SPI_byteSend(0xFF);
  401a14:	20ff      	movs	r0, #255	; 0xff
  401a16:	47a0      	blx	r4
// 	for (int i = 11; i > -1; i--){
// 		SPI_byteSend( (uint8_t) (leds_data_1[i] >> 8) );
// 		SPI_byteSend( (uint8_t) (leds_data_1[i]) );
// 	}

	SPI_byteSend( (uint8_t) (leds_data_1[2] >> 8) );
  401a18:	4d8c      	ldr	r5, [pc, #560]	; (401c4c <leds_update_display+0x254>)
  401a1a:	88a8      	ldrh	r0, [r5, #4]
  401a1c:	0a00      	lsrs	r0, r0, #8
  401a1e:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_1[2]) );
  401a20:	7928      	ldrb	r0, [r5, #4]
  401a22:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_1[1] >> 8) );
  401a24:	8868      	ldrh	r0, [r5, #2]
  401a26:	0a00      	lsrs	r0, r0, #8
  401a28:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_1[1]) );
  401a2a:	78a8      	ldrb	r0, [r5, #2]
  401a2c:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_1[0] >> 8) );
  401a2e:	8828      	ldrh	r0, [r5, #0]
  401a30:	0a00      	lsrs	r0, r0, #8
  401a32:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_1[0]) );
  401a34:	7828      	ldrb	r0, [r5, #0]
  401a36:	47a0      	blx	r4

	SPI_byteSend( (uint8_t) (leds_data_3[2] >> 8) );
  401a38:	4e85      	ldr	r6, [pc, #532]	; (401c50 <leds_update_display+0x258>)
  401a3a:	88b0      	ldrh	r0, [r6, #4]
  401a3c:	0a00      	lsrs	r0, r0, #8
  401a3e:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_3[2]) );
  401a40:	7930      	ldrb	r0, [r6, #4]
  401a42:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_3[1] >> 8) );
  401a44:	8870      	ldrh	r0, [r6, #2]
  401a46:	0a00      	lsrs	r0, r0, #8
  401a48:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_3[1]) );
  401a4a:	78b0      	ldrb	r0, [r6, #2]
  401a4c:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_3[0] >> 8) );
  401a4e:	8830      	ldrh	r0, [r6, #0]
  401a50:	0a00      	lsrs	r0, r0, #8
  401a52:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_3[0]) );
  401a54:	7830      	ldrb	r0, [r6, #0]
  401a56:	47a0      	blx	r4

	SPI_byteSend( (uint8_t) (leds_data_3[5] >> 8) );
  401a58:	8970      	ldrh	r0, [r6, #10]
  401a5a:	0a00      	lsrs	r0, r0, #8
  401a5c:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_3[5]) );
  401a5e:	7ab0      	ldrb	r0, [r6, #10]
  401a60:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_3[4] >> 8) );
  401a62:	8930      	ldrh	r0, [r6, #8]
  401a64:	0a00      	lsrs	r0, r0, #8
  401a66:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_3[4]) );
  401a68:	7a30      	ldrb	r0, [r6, #8]
  401a6a:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_3[3] >> 8) );
  401a6c:	88f0      	ldrh	r0, [r6, #6]
  401a6e:	0a00      	lsrs	r0, r0, #8
  401a70:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_3[3]) );
  401a72:	79b0      	ldrb	r0, [r6, #6]
  401a74:	47a0      	blx	r4

	SPI_byteSend( (uint8_t) (leds_data_1[5] >> 8) );
  401a76:	8968      	ldrh	r0, [r5, #10]
  401a78:	0a00      	lsrs	r0, r0, #8
  401a7a:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_1[5]) );
  401a7c:	7aa8      	ldrb	r0, [r5, #10]
  401a7e:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_1[4] >> 8) );
  401a80:	8928      	ldrh	r0, [r5, #8]
  401a82:	0a00      	lsrs	r0, r0, #8
  401a84:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_1[4]) );
  401a86:	7a28      	ldrb	r0, [r5, #8]
  401a88:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_1[3] >> 8) );
  401a8a:	88e8      	ldrh	r0, [r5, #6]
  401a8c:	0a00      	lsrs	r0, r0, #8
  401a8e:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_1[3]) );
  401a90:	79a8      	ldrb	r0, [r5, #6]
  401a92:	47a0      	blx	r4

	//Set Write Command, Function, and BC Bits
	SPI_byteSend(0x94);
  401a94:	2094      	movs	r0, #148	; 0x94
  401a96:	47a0      	blx	r4
	SPI_byteSend(0x5F);
  401a98:	205f      	movs	r0, #95	; 0x5f
  401a9a:	47a0      	blx	r4
	SPI_byteSend(0xFF);
  401a9c:	20ff      	movs	r0, #255	; 0xff
  401a9e:	47a0      	blx	r4
	SPI_byteSend(0xFF);
  401aa0:	20ff      	movs	r0, #255	; 0xff
  401aa2:	47a0      	blx	r4
// 	for (int i = 11; i > -1; i--){
// 		SPI_byteSend( (uint8_t) (leds_data_2[i] >> 8) );
// 		SPI_byteSend( (uint8_t) (leds_data_2[i]) );
// 	}

	SPI_byteSend( (uint8_t) (leds_data_1[8] >> 8) );
  401aa4:	8a28      	ldrh	r0, [r5, #16]
  401aa6:	0a00      	lsrs	r0, r0, #8
  401aa8:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_1[8]) );
  401aaa:	7c28      	ldrb	r0, [r5, #16]
  401aac:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_1[7] >> 8) );
  401aae:	89e8      	ldrh	r0, [r5, #14]
  401ab0:	0a00      	lsrs	r0, r0, #8
  401ab2:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_1[7]) );
  401ab4:	7ba8      	ldrb	r0, [r5, #14]
  401ab6:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_1[6] >> 8) );
  401ab8:	89a8      	ldrh	r0, [r5, #12]
  401aba:	0a00      	lsrs	r0, r0, #8
  401abc:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_1[6]) );
  401abe:	7b28      	ldrb	r0, [r5, #12]
  401ac0:	47a0      	blx	r4

	SPI_byteSend( (uint8_t) (leds_data_3[8] >> 8) );
  401ac2:	8a30      	ldrh	r0, [r6, #16]
  401ac4:	0a00      	lsrs	r0, r0, #8
  401ac6:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_3[8]) );
  401ac8:	7c30      	ldrb	r0, [r6, #16]
  401aca:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_3[7] >> 8) );
  401acc:	89f0      	ldrh	r0, [r6, #14]
  401ace:	0a00      	lsrs	r0, r0, #8
  401ad0:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_3[7]) );
  401ad2:	7bb0      	ldrb	r0, [r6, #14]
  401ad4:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_3[6] >> 8) );
  401ad6:	89b0      	ldrh	r0, [r6, #12]
  401ad8:	0a00      	lsrs	r0, r0, #8
  401ada:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_3[6]) );
  401adc:	7b30      	ldrb	r0, [r6, #12]
  401ade:	47a0      	blx	r4

	SPI_byteSend( (uint8_t) (leds_data_3[11] >> 8) );
  401ae0:	8af0      	ldrh	r0, [r6, #22]
  401ae2:	0a00      	lsrs	r0, r0, #8
  401ae4:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_3[11]) );
  401ae6:	7db0      	ldrb	r0, [r6, #22]
  401ae8:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_3[10] >> 8) );
  401aea:	8ab0      	ldrh	r0, [r6, #20]
  401aec:	0a00      	lsrs	r0, r0, #8
  401aee:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_3[10]) );
  401af0:	7d30      	ldrb	r0, [r6, #20]
  401af2:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_3[9] >> 8) );
  401af4:	8a70      	ldrh	r0, [r6, #18]
  401af6:	0a00      	lsrs	r0, r0, #8
  401af8:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_3[9]) );
  401afa:	7cb0      	ldrb	r0, [r6, #18]
  401afc:	47a0      	blx	r4

	SPI_byteSend( (uint8_t) (leds_data_1[11] >> 8) );
  401afe:	8ae8      	ldrh	r0, [r5, #22]
  401b00:	0a00      	lsrs	r0, r0, #8
  401b02:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_1[11]) );
  401b04:	7da8      	ldrb	r0, [r5, #22]
  401b06:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_1[10] >> 8) );
  401b08:	8aa8      	ldrh	r0, [r5, #20]
  401b0a:	0a00      	lsrs	r0, r0, #8
  401b0c:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_1[10]) );
  401b0e:	7d28      	ldrb	r0, [r5, #20]
  401b10:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_1[9] >> 8) );
  401b12:	8a68      	ldrh	r0, [r5, #18]
  401b14:	0a00      	lsrs	r0, r0, #8
  401b16:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_1[9]) );
  401b18:	7ca8      	ldrb	r0, [r5, #18]
  401b1a:	47a0      	blx	r4

	//Set Write Command, Function, and BC Bits
	SPI_byteSend(0x94);
  401b1c:	2094      	movs	r0, #148	; 0x94
  401b1e:	47a0      	blx	r4
	SPI_byteSend(0x5F);
  401b20:	205f      	movs	r0, #95	; 0x5f
  401b22:	47a0      	blx	r4
	SPI_byteSend(0xFF);
  401b24:	20ff      	movs	r0, #255	; 0xff
  401b26:	47a0      	blx	r4
	SPI_byteSend(0xFF);
  401b28:	20ff      	movs	r0, #255	; 0xff
  401b2a:	47a0      	blx	r4
// 	for (int i = 11; i > -1; i--){
// 		SPI_byteSend( (uint8_t) (leds_data_3[i] >> 8) );
// 		SPI_byteSend( (uint8_t) (leds_data_3[i]) );
// 	}

	SPI_byteSend( (uint8_t) (leds_data_2[2] >> 8) );
  401b2c:	4d49      	ldr	r5, [pc, #292]	; (401c54 <leds_update_display+0x25c>)
  401b2e:	88a8      	ldrh	r0, [r5, #4]
  401b30:	0a00      	lsrs	r0, r0, #8
  401b32:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_2[2]) );
  401b34:	7928      	ldrb	r0, [r5, #4]
  401b36:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_2[1] >> 8) );
  401b38:	8868      	ldrh	r0, [r5, #2]
  401b3a:	0a00      	lsrs	r0, r0, #8
  401b3c:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_2[1]) );
  401b3e:	78a8      	ldrb	r0, [r5, #2]
  401b40:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_2[0] >> 8) );
  401b42:	8828      	ldrh	r0, [r5, #0]
  401b44:	0a00      	lsrs	r0, r0, #8
  401b46:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_2[0]) );
  401b48:	7828      	ldrb	r0, [r5, #0]
  401b4a:	47a0      	blx	r4

	SPI_byteSend( (uint8_t) (leds_data_4[2] >> 8) );
  401b4c:	4e42      	ldr	r6, [pc, #264]	; (401c58 <leds_update_display+0x260>)
  401b4e:	88b0      	ldrh	r0, [r6, #4]
  401b50:	0a00      	lsrs	r0, r0, #8
  401b52:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_4[2]) );
  401b54:	7930      	ldrb	r0, [r6, #4]
  401b56:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_4[1] >> 8) );
  401b58:	8870      	ldrh	r0, [r6, #2]
  401b5a:	0a00      	lsrs	r0, r0, #8
  401b5c:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_4[1]) );
  401b5e:	78b0      	ldrb	r0, [r6, #2]
  401b60:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_4[0] >> 8) );
  401b62:	8830      	ldrh	r0, [r6, #0]
  401b64:	0a00      	lsrs	r0, r0, #8
  401b66:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_4[0]) );
  401b68:	7830      	ldrb	r0, [r6, #0]
  401b6a:	47a0      	blx	r4

	SPI_byteSend( (uint8_t) (leds_data_4[5] >> 8) );
  401b6c:	8970      	ldrh	r0, [r6, #10]
  401b6e:	0a00      	lsrs	r0, r0, #8
  401b70:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_4[5]) );
  401b72:	7ab0      	ldrb	r0, [r6, #10]
  401b74:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_4[4] >> 8) );
  401b76:	8930      	ldrh	r0, [r6, #8]
  401b78:	0a00      	lsrs	r0, r0, #8
  401b7a:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_4[4]) );
  401b7c:	7a30      	ldrb	r0, [r6, #8]
  401b7e:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_4[3] >> 8) );
  401b80:	88f0      	ldrh	r0, [r6, #6]
  401b82:	0a00      	lsrs	r0, r0, #8
  401b84:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_4[3]) );
  401b86:	79b0      	ldrb	r0, [r6, #6]
  401b88:	47a0      	blx	r4

	SPI_byteSend( (uint8_t) (leds_data_2[5] >> 8) );
  401b8a:	8968      	ldrh	r0, [r5, #10]
  401b8c:	0a00      	lsrs	r0, r0, #8
  401b8e:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_2[5]) );
  401b90:	7aa8      	ldrb	r0, [r5, #10]
  401b92:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_2[4] >> 8) );
  401b94:	8928      	ldrh	r0, [r5, #8]
  401b96:	0a00      	lsrs	r0, r0, #8
  401b98:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_2[4]) );
  401b9a:	7a28      	ldrb	r0, [r5, #8]
  401b9c:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_2[3] >> 8) );
  401b9e:	88e8      	ldrh	r0, [r5, #6]
  401ba0:	0a00      	lsrs	r0, r0, #8
  401ba2:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_2[3]) );
  401ba4:	79a8      	ldrb	r0, [r5, #6]
  401ba6:	47a0      	blx	r4

	//Set Write Command, Function, and BC Bits
	SPI_byteSend(0x94);
  401ba8:	2094      	movs	r0, #148	; 0x94
  401baa:	47a0      	blx	r4
	SPI_byteSend(0x5F);
  401bac:	205f      	movs	r0, #95	; 0x5f
  401bae:	47a0      	blx	r4
	SPI_byteSend(0xFF);
  401bb0:	20ff      	movs	r0, #255	; 0xff
  401bb2:	47a0      	blx	r4
	SPI_byteSend(0xFF);
  401bb4:	20ff      	movs	r0, #255	; 0xff
  401bb6:	47a0      	blx	r4
// 	for (int i = 11; i > -1; i--){
// 		SPI_byteSend( (uint8_t) (leds_data_4[i] >> 8) );
// 		SPI_byteSend( (uint8_t) (leds_data_4[i]) );
// 	}

	SPI_byteSend( (uint8_t) (leds_data_2[8] >> 8) );
  401bb8:	8a28      	ldrh	r0, [r5, #16]
  401bba:	0a00      	lsrs	r0, r0, #8
  401bbc:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_2[8]) );
  401bbe:	7c28      	ldrb	r0, [r5, #16]
  401bc0:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_2[7] >> 8) );
  401bc2:	89e8      	ldrh	r0, [r5, #14]
  401bc4:	0a00      	lsrs	r0, r0, #8
  401bc6:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_2[7]) );
  401bc8:	7ba8      	ldrb	r0, [r5, #14]
  401bca:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_2[6] >> 8) );
  401bcc:	89a8      	ldrh	r0, [r5, #12]
  401bce:	0a00      	lsrs	r0, r0, #8
  401bd0:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_2[6]) );
  401bd2:	7b28      	ldrb	r0, [r5, #12]
  401bd4:	47a0      	blx	r4

	SPI_byteSend( (uint8_t) (leds_data_4[8] >> 8) );
  401bd6:	8a30      	ldrh	r0, [r6, #16]
  401bd8:	0a00      	lsrs	r0, r0, #8
  401bda:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_4[8]) );
  401bdc:	7c30      	ldrb	r0, [r6, #16]
  401bde:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_4[7] >> 8) );
  401be0:	89f0      	ldrh	r0, [r6, #14]
  401be2:	0a00      	lsrs	r0, r0, #8
  401be4:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_4[7]) );
  401be6:	7bb0      	ldrb	r0, [r6, #14]
  401be8:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_4[6] >> 8) );
  401bea:	89b0      	ldrh	r0, [r6, #12]
  401bec:	0a00      	lsrs	r0, r0, #8
  401bee:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_4[6]) );
  401bf0:	7b30      	ldrb	r0, [r6, #12]
  401bf2:	47a0      	blx	r4

	SPI_byteSend( (uint8_t) (leds_data_4[11] >> 8) );
  401bf4:	8af0      	ldrh	r0, [r6, #22]
  401bf6:	0a00      	lsrs	r0, r0, #8
  401bf8:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_4[11]) );
  401bfa:	7db0      	ldrb	r0, [r6, #22]
  401bfc:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_4[10] >> 8) );
  401bfe:	8ab0      	ldrh	r0, [r6, #20]
  401c00:	0a00      	lsrs	r0, r0, #8
  401c02:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_4[10]) );
  401c04:	7d30      	ldrb	r0, [r6, #20]
  401c06:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_4[9] >> 8) );
  401c08:	8a70      	ldrh	r0, [r6, #18]
  401c0a:	0a00      	lsrs	r0, r0, #8
  401c0c:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_4[9]) );
  401c0e:	7cb0      	ldrb	r0, [r6, #18]
  401c10:	47a0      	blx	r4

	SPI_byteSend( (uint8_t) (leds_data_2[11] >> 8) );
  401c12:	8ae8      	ldrh	r0, [r5, #22]
  401c14:	0a00      	lsrs	r0, r0, #8
  401c16:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_2[11]) );
  401c18:	7da8      	ldrb	r0, [r5, #22]
  401c1a:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_2[10] >> 8) );
  401c1c:	8aa8      	ldrh	r0, [r5, #20]
  401c1e:	0a00      	lsrs	r0, r0, #8
  401c20:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_2[10]) );
  401c22:	7d28      	ldrb	r0, [r5, #20]
  401c24:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_2[9] >> 8) );
  401c26:	8a68      	ldrh	r0, [r5, #18]
  401c28:	0a00      	lsrs	r0, r0, #8
  401c2a:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_2[9]) );
  401c2c:	7ca8      	ldrb	r0, [r5, #18]
  401c2e:	47a0      	blx	r4


	delay_ms(2.74);
  401c30:	f243 70ce 	movw	r0, #14286	; 0x37ce
  401c34:	4b09      	ldr	r3, [pc, #36]	; (401c5c <leds_update_display+0x264>)
  401c36:	4798      	blx	r3
	cpu_irq_enable();
  401c38:	2301      	movs	r3, #1
  401c3a:	703b      	strb	r3, [r7, #0]
  401c3c:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  401c40:	b662      	cpsie	i
  401c42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401c44:	200001f4 	.word	0x200001f4
  401c48:	00402d51 	.word	0x00402d51
  401c4c:	20000694 	.word	0x20000694
  401c50:	200006c4 	.word	0x200006c4
  401c54:	200006ac 	.word	0x200006ac
  401c58:	200006dc 	.word	0x200006dc
  401c5c:	20000001 	.word	0x20000001

00401c60 <leds_update_cursor>:

	/* update note status if button was pressed on current page */
		notes_status_set(display_page, leds_status);
}

void leds_update_cursor(uint8_t curr_step){
  401c60:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401c64:	4607      	mov	r7, r0

	/* update LEDs status for current page being displayed */
	leds_update_status();
  401c66:	4b7f      	ldr	r3, [pc, #508]	; (401e64 <leds_update_cursor+0x204>)
  401c68:	4798      	blx	r3
  401c6a:	4c7f      	ldr	r4, [pc, #508]	; (401e68 <leds_update_cursor+0x208>)
  401c6c:	1ca5      	adds	r5, r4, #2
  401c6e:	497f      	ldr	r1, [pc, #508]	; (401e6c <leds_update_cursor+0x20c>)
  401c70:	2200      	movs	r2, #0

/* Initialize the Notes that are Enabled as Blue */
	for (int i = 0; i < 16; i++){
  401c72:	4613      	mov	r3, r2
					leds_data_3[toffset+1] = 0x0000;
					leds_data_3[toffset+2] = 0x0000;
				}
			}
			else {
				toffset = (i % 12)*3;
  401c74:	f8df c224 	ldr.w	ip, [pc, #548]	; 401e9c <leds_update_cursor+0x23c>
					leds_data_4[toffset] = 0x0000;
					leds_data_4[toffset+1] = 0x0000;
					leds_data_4[toffset+2] = 0xFFFF;
				}
				else{
					leds_data_4[toffset] = 0x0000;
  401c78:	f8df e218 	ldr.w	lr, [pc, #536]	; 401e94 <leds_update_cursor+0x234>
  401c7c:	4610      	mov	r0, r2
			else {
				toffset = (i % 12)*3;
				if(leds_status[i] == 1){
					leds_data_4[toffset] = 0x0000;
					leds_data_4[toffset+1] = 0x0000;
					leds_data_4[toffset+2] = 0xFFFF;
  401c7e:	f64f 78ff 	movw	r8, #65535	; 0xffff
					leds_data_3[toffset] = 0x0000;
					leds_data_3[toffset+1] = 0x0000;
					leds_data_3[toffset+2] = 0xFFFF;
				}
				else{
					leds_data_3[toffset] = 0x0000;
  401c82:	f8df a208 	ldr.w	sl, [pc, #520]	; 401e8c <leds_update_cursor+0x22c>
					leds_data_2[toffset] = 0x0000;
					leds_data_2[toffset+1] = 0x0000;
					leds_data_2[toffset+2] = 0xFFFF;
				}
				else{
					leds_data_2[toffset] = 0x0000;
  401c86:	f8df b200 	ldr.w	fp, [pc, #512]	; 401e88 <leds_update_cursor+0x228>
	/* update LEDs status for current page being displayed */
	leds_update_status();

/* Initialize the Notes that are Enabled as Blue */
	for (int i = 0; i < 16; i++){
			if ( (i >= 0) && (i < 4) ){
  401c8a:	2b03      	cmp	r3, #3
  401c8c:	d80a      	bhi.n	401ca4 <leds_update_cursor+0x44>
				toffset = (i)*3;
				if(leds_status[i] == 1){
  401c8e:	680e      	ldr	r6, [r1, #0]
  401c90:	2e01      	cmp	r6, #1
					leds_data_1[toffset] = 0x0000;
  401c92:	f825 0c02 	strh.w	r0, [r5, #-2]
					leds_data_1[toffset+1] = 0x0000;
  401c96:	8060      	strh	r0, [r4, #2]
					leds_data_1[toffset+2] = 0xFFFF;
  401c98:	bf0c      	ite	eq
  401c9a:	f8a4 8004 	strheq.w	r8, [r4, #4]
				}
				else{
					leds_data_1[toffset] = 0x0000;
					leds_data_1[toffset+1] = 0x0000;
					leds_data_1[toffset+2] = 0x0000;
  401c9e:	80a0      	strhne	r0, [r4, #4]
	leds_update_status();

/* Initialize the Notes that are Enabled as Blue */
	for (int i = 0; i < 16; i++){
			if ( (i >= 0) && (i < 4) ){
				toffset = (i)*3;
  401ca0:	4691      	mov	r9, r2
  401ca2:	e060      	b.n	401d66 <leds_update_cursor+0x106>
					leds_data_1[toffset] = 0x0000;
					leds_data_1[toffset+1] = 0x0000;
					leds_data_1[toffset+2] = 0x0000;
				}
			}
			else if ( (i >= 4) && (i < 8) ){
  401ca4:	f1a3 0904 	sub.w	r9, r3, #4
  401ca8:	f1b9 0f03 	cmp.w	r9, #3
  401cac:	d81d      	bhi.n	401cea <leds_update_cursor+0x8a>
				toffset = (i % 4)*3;
  401cae:	4e70      	ldr	r6, [pc, #448]	; (401e70 <leds_update_cursor+0x210>)
  401cb0:	ea13 0906 	ands.w	r9, r3, r6
  401cb4:	d505      	bpl.n	401cc2 <leds_update_cursor+0x62>
  401cb6:	f109 39ff 	add.w	r9, r9, #4294967295
  401cba:	f069 0903 	orn	r9, r9, #3
  401cbe:	f109 0901 	add.w	r9, r9, #1
  401cc2:	eb09 0949 	add.w	r9, r9, r9, lsl #1
  401cc6:	fa5f f989 	uxtb.w	r9, r9
				if(leds_status[i] == 1){
  401cca:	680e      	ldr	r6, [r1, #0]
  401ccc:	2e01      	cmp	r6, #1
					leds_data_2[toffset] = 0x0000;
  401cce:	f82b 0019 	strh.w	r0, [fp, r9, lsl #1]
					leds_data_2[toffset+1] = 0x0000;
  401cd2:	f109 0601 	add.w	r6, r9, #1
  401cd6:	f82b 0016 	strh.w	r0, [fp, r6, lsl #1]
					leds_data_2[toffset+2] = 0xFFFF;
  401cda:	f109 0602 	add.w	r6, r9, #2
  401cde:	bf0c      	ite	eq
  401ce0:	f82b 8016 	strheq.w	r8, [fp, r6, lsl #1]
				}
				else{
					leds_data_2[toffset] = 0x0000;
					leds_data_2[toffset+1] = 0x0000;
					leds_data_2[toffset+2] = 0x0000;
  401ce4:	f82b 0016 	strhne.w	r0, [fp, r6, lsl #1]
  401ce8:	e03d      	b.n	401d66 <leds_update_cursor+0x106>
				}
			}
			else if ( (i >= 8) && (i < 12) ){
  401cea:	f1a3 0608 	sub.w	r6, r3, #8
  401cee:	2e03      	cmp	r6, #3
  401cf0:	d81d      	bhi.n	401d2e <leds_update_cursor+0xce>
				toffset = (i % 8)*3;
  401cf2:	4e60      	ldr	r6, [pc, #384]	; (401e74 <leds_update_cursor+0x214>)
  401cf4:	ea13 0906 	ands.w	r9, r3, r6
  401cf8:	d505      	bpl.n	401d06 <leds_update_cursor+0xa6>
  401cfa:	f109 39ff 	add.w	r9, r9, #4294967295
  401cfe:	f069 0907 	orn	r9, r9, #7
  401d02:	f109 0901 	add.w	r9, r9, #1
  401d06:	eb09 0949 	add.w	r9, r9, r9, lsl #1
  401d0a:	fa5f f989 	uxtb.w	r9, r9
				if(leds_status[i] == 1){
  401d0e:	680e      	ldr	r6, [r1, #0]
  401d10:	2e01      	cmp	r6, #1
					leds_data_3[toffset] = 0x0000;
  401d12:	f82a 0019 	strh.w	r0, [sl, r9, lsl #1]
					leds_data_3[toffset+1] = 0x0000;
  401d16:	f109 0601 	add.w	r6, r9, #1
  401d1a:	f82a 0016 	strh.w	r0, [sl, r6, lsl #1]
					leds_data_3[toffset+2] = 0xFFFF;
  401d1e:	f109 0602 	add.w	r6, r9, #2
  401d22:	bf0c      	ite	eq
  401d24:	f82a 8016 	strheq.w	r8, [sl, r6, lsl #1]
				}
				else{
					leds_data_3[toffset] = 0x0000;
					leds_data_3[toffset+1] = 0x0000;
					leds_data_3[toffset+2] = 0x0000;
  401d28:	f82a 0016 	strhne.w	r0, [sl, r6, lsl #1]
  401d2c:	e01b      	b.n	401d66 <leds_update_cursor+0x106>
				}
			}
			else {
				toffset = (i % 12)*3;
  401d2e:	fb8c 6903 	smull	r6, r9, ip, r3
  401d32:	17de      	asrs	r6, r3, #31
  401d34:	ebc6 0969 	rsb	r9, r6, r9, asr #1
  401d38:	eb09 0949 	add.w	r9, r9, r9, lsl #1
  401d3c:	eba3 0989 	sub.w	r9, r3, r9, lsl #2
  401d40:	eb09 0949 	add.w	r9, r9, r9, lsl #1
  401d44:	fa5f f989 	uxtb.w	r9, r9
				if(leds_status[i] == 1){
  401d48:	680e      	ldr	r6, [r1, #0]
  401d4a:	2e01      	cmp	r6, #1
					leds_data_4[toffset] = 0x0000;
  401d4c:	f82e 0019 	strh.w	r0, [lr, r9, lsl #1]
					leds_data_4[toffset+1] = 0x0000;
  401d50:	f109 0601 	add.w	r6, r9, #1
  401d54:	f82e 0016 	strh.w	r0, [lr, r6, lsl #1]
					leds_data_4[toffset+2] = 0xFFFF;
  401d58:	f109 0602 	add.w	r6, r9, #2
  401d5c:	bf0c      	ite	eq
  401d5e:	f82e 8016 	strheq.w	r8, [lr, r6, lsl #1]
				}
				else{
					leds_data_4[toffset] = 0x0000;
					leds_data_4[toffset+1] = 0x0000;
					leds_data_4[toffset+2] = 0x0000;
  401d62:	f82e 0016 	strhne.w	r0, [lr, r6, lsl #1]

	/* update LEDs status for current page being displayed */
	leds_update_status();

/* Initialize the Notes that are Enabled as Blue */
	for (int i = 0; i < 16; i++){
  401d66:	3301      	adds	r3, #1
  401d68:	3203      	adds	r2, #3
  401d6a:	b2d2      	uxtb	r2, r2
  401d6c:	3406      	adds	r4, #6
  401d6e:	3506      	adds	r5, #6
  401d70:	3104      	adds	r1, #4
  401d72:	2b10      	cmp	r3, #16
  401d74:	d189      	bne.n	401c8a <leds_update_cursor+0x2a>
  401d76:	4b40      	ldr	r3, [pc, #256]	; (401e78 <leds_update_cursor+0x218>)
  401d78:	f883 9000 	strb.w	r9, [r3]
				}
			}
	}

	/*check if page being displayed is the current page being output to synth before updating cursor*/
	if (curr_page == display_page){
  401d7c:	4b3f      	ldr	r3, [pc, #252]	; (401e7c <leds_update_cursor+0x21c>)
  401d7e:	781a      	ldrb	r2, [r3, #0]
  401d80:	4b3f      	ldr	r3, [pc, #252]	; (401e80 <leds_update_cursor+0x220>)
  401d82:	781b      	ldrb	r3, [r3, #0]
  401d84:	429a      	cmp	r2, r3
  401d86:	d168      	bne.n	401e5a <leds_update_cursor+0x1fa>
		/* Update Cursor to correct position */
			if ( (curr_step >= 0) && (curr_step < 4) ){
  401d88:	2f03      	cmp	r7, #3
  401d8a:	d813      	bhi.n	401db4 <leds_update_cursor+0x154>
				offset = (curr_step)*3;
  401d8c:	eb07 0747 	add.w	r7, r7, r7, lsl #1
  401d90:	b2fb      	uxtb	r3, r7
  401d92:	4a3c      	ldr	r2, [pc, #240]	; (401e84 <leds_update_cursor+0x224>)
  401d94:	7013      	strb	r3, [r2, #0]
				leds_data_1[offset] = 0xFFFF;
  401d96:	4a34      	ldr	r2, [pc, #208]	; (401e68 <leds_update_cursor+0x208>)
  401d98:	f64f 71ff 	movw	r1, #65535	; 0xffff
  401d9c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				leds_data_1[offset+1] = 0x0FFF;
  401da0:	1c59      	adds	r1, r3, #1
  401da2:	f640 70ff 	movw	r0, #4095	; 0xfff
  401da6:	f822 0011 	strh.w	r0, [r2, r1, lsl #1]
				leds_data_1[offset+2] = 0x0000;
  401daa:	3302      	adds	r3, #2
  401dac:	2100      	movs	r1, #0
  401dae:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  401db2:	e052      	b.n	401e5a <leds_update_cursor+0x1fa>
			}
			else if ( (curr_step >= 4) && (curr_step < 8) ){
  401db4:	1f3b      	subs	r3, r7, #4
  401db6:	b2db      	uxtb	r3, r3
  401db8:	2b03      	cmp	r3, #3
  401dba:	d814      	bhi.n	401de6 <leds_update_cursor+0x186>
				offset = (curr_step % 4)*3;
  401dbc:	f007 0703 	and.w	r7, r7, #3
  401dc0:	eb07 0747 	add.w	r7, r7, r7, lsl #1
  401dc4:	4b2f      	ldr	r3, [pc, #188]	; (401e84 <leds_update_cursor+0x224>)
  401dc6:	701f      	strb	r7, [r3, #0]
				leds_data_2[offset] = 0xFFFF;
  401dc8:	4b2f      	ldr	r3, [pc, #188]	; (401e88 <leds_update_cursor+0x228>)
  401dca:	f64f 72ff 	movw	r2, #65535	; 0xffff
  401dce:	f823 2017 	strh.w	r2, [r3, r7, lsl #1]
				leds_data_2[offset+1] = 0x0FFF;
  401dd2:	1c7a      	adds	r2, r7, #1
  401dd4:	f640 71ff 	movw	r1, #4095	; 0xfff
  401dd8:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				leds_data_2[offset+2] = 0x0000;
  401ddc:	3702      	adds	r7, #2
  401dde:	2200      	movs	r2, #0
  401de0:	f823 2017 	strh.w	r2, [r3, r7, lsl #1]
  401de4:	e039      	b.n	401e5a <leds_update_cursor+0x1fa>
			}
			else if ( (curr_step >= 8) && (curr_step < 12) ){
  401de6:	f1a7 0308 	sub.w	r3, r7, #8
  401dea:	b2db      	uxtb	r3, r3
  401dec:	2b03      	cmp	r3, #3
  401dee:	d814      	bhi.n	401e1a <leds_update_cursor+0x1ba>
				offset = (curr_step % 8)*3;
  401df0:	f007 0707 	and.w	r7, r7, #7
  401df4:	eb07 0747 	add.w	r7, r7, r7, lsl #1
  401df8:	4b22      	ldr	r3, [pc, #136]	; (401e84 <leds_update_cursor+0x224>)
  401dfa:	701f      	strb	r7, [r3, #0]
				leds_data_3[offset] = 0xFFFF;
  401dfc:	4b23      	ldr	r3, [pc, #140]	; (401e8c <leds_update_cursor+0x22c>)
  401dfe:	f64f 72ff 	movw	r2, #65535	; 0xffff
  401e02:	f823 2017 	strh.w	r2, [r3, r7, lsl #1]
				leds_data_3[offset+1] = 0x0FFF;
  401e06:	1c7a      	adds	r2, r7, #1
  401e08:	f640 71ff 	movw	r1, #4095	; 0xfff
  401e0c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				leds_data_3[offset+2] = 0x0000;
  401e10:	3702      	adds	r7, #2
  401e12:	2200      	movs	r2, #0
  401e14:	f823 2017 	strh.w	r2, [r3, r7, lsl #1]
  401e18:	e01f      	b.n	401e5a <leds_update_cursor+0x1fa>
			}
			else if ( (curr_step >= 12) && (curr_step < 16) ){
  401e1a:	f1a7 030c 	sub.w	r3, r7, #12
  401e1e:	b2db      	uxtb	r3, r3
  401e20:	2b03      	cmp	r3, #3
  401e22:	d81a      	bhi.n	401e5a <leds_update_cursor+0x1fa>
				offset = (curr_step % 12)*3;
  401e24:	4b1a      	ldr	r3, [pc, #104]	; (401e90 <leds_update_cursor+0x230>)
  401e26:	fba3 2307 	umull	r2, r3, r3, r7
  401e2a:	08db      	lsrs	r3, r3, #3
  401e2c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  401e30:	eba7 0783 	sub.w	r7, r7, r3, lsl #2
  401e34:	eb07 0747 	add.w	r7, r7, r7, lsl #1
  401e38:	b2fb      	uxtb	r3, r7
  401e3a:	4a12      	ldr	r2, [pc, #72]	; (401e84 <leds_update_cursor+0x224>)
  401e3c:	7013      	strb	r3, [r2, #0]
				leds_data_4[offset] = 0xFFFF;
  401e3e:	4a15      	ldr	r2, [pc, #84]	; (401e94 <leds_update_cursor+0x234>)
  401e40:	f64f 71ff 	movw	r1, #65535	; 0xffff
  401e44:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				leds_data_4[offset+1] = 0x0FFF;
  401e48:	1c59      	adds	r1, r3, #1
  401e4a:	f640 70ff 	movw	r0, #4095	; 0xfff
  401e4e:	f822 0011 	strh.w	r0, [r2, r1, lsl #1]
				leds_data_4[offset+2] = 0x0000;
  401e52:	3302      	adds	r3, #2
  401e54:	2100      	movs	r1, #0
  401e56:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			}
	}

	leds_update_display();
  401e5a:	4b0f      	ldr	r3, [pc, #60]	; (401e98 <leds_update_cursor+0x238>)
  401e5c:	4798      	blx	r3
  401e5e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401e62:	bf00      	nop
  401e64:	004019d1 	.word	0x004019d1
  401e68:	20000694 	.word	0x20000694
  401e6c:	20000654 	.word	0x20000654
  401e70:	80000003 	.word	0x80000003
  401e74:	80000007 	.word	0x80000007
  401e78:	2000873e 	.word	0x2000873e
  401e7c:	2000872e 	.word	0x2000872e
  401e80:	20008724 	.word	0x20008724
  401e84:	2000873f 	.word	0x2000873f
  401e88:	200006ac 	.word	0x200006ac
  401e8c:	200006c4 	.word	0x200006c4
  401e90:	aaaaaaab 	.word	0xaaaaaaab
  401e94:	200006dc 	.word	0x200006dc
  401e98:	004019f9 	.word	0x004019f9
  401e9c:	2aaaaaab 	.word	0x2aaaaaab

00401ea0 <led_toggle>:

int leds_status_get(uint8_t curr_step){
	return leds_status[curr_step];
}

void led_toggle(uint8_t top_row, uint8_t bottom_row){
  401ea0:	b508      	push	{r3, lr}

	switch(bottom_row) {
  401ea2:	29ef      	cmp	r1, #239	; 0xef
  401ea4:	d031      	beq.n	401f0a <led_toggle+0x6a>
  401ea6:	d806      	bhi.n	401eb6 <led_toggle+0x16>
  401ea8:	29bf      	cmp	r1, #191	; 0xbf
  401eaa:	d03e      	beq.n	401f2a <led_toggle+0x8a>
  401eac:	29df      	cmp	r1, #223	; 0xdf
  401eae:	d034      	beq.n	401f1a <led_toggle+0x7a>
  401eb0:	297f      	cmp	r1, #127	; 0x7f
  401eb2:	d149      	bne.n	401f48 <led_toggle+0xa8>
  401eb4:	e041      	b.n	401f3a <led_toggle+0x9a>
  401eb6:	29fb      	cmp	r1, #251	; 0xfb
  401eb8:	d017      	beq.n	401eea <led_toggle+0x4a>
  401eba:	d802      	bhi.n	401ec2 <led_toggle+0x22>
  401ebc:	29f7      	cmp	r1, #247	; 0xf7
  401ebe:	d01c      	beq.n	401efa <led_toggle+0x5a>
  401ec0:	e042      	b.n	401f48 <led_toggle+0xa8>
  401ec2:	29fd      	cmp	r1, #253	; 0xfd
  401ec4:	d009      	beq.n	401eda <led_toggle+0x3a>
  401ec6:	29fe      	cmp	r1, #254	; 0xfe
  401ec8:	d13e      	bne.n	401f48 <led_toggle+0xa8>
		case 254 :
			leds_status[15] = abs(leds_status[15] - 1);
  401eca:	4a4f      	ldr	r2, [pc, #316]	; (402008 <led_toggle+0x168>)
  401ecc:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
  401ece:	3b01      	subs	r3, #1
  401ed0:	2b00      	cmp	r3, #0
  401ed2:	bfb8      	it	lt
  401ed4:	425b      	neglt	r3, r3
  401ed6:	63d3      	str	r3, [r2, #60]	; 0x3c
			break;
  401ed8:	e036      	b.n	401f48 <led_toggle+0xa8>
		case 253 :
			leds_status[14] = abs(leds_status[14] - 1);
  401eda:	4a4b      	ldr	r2, [pc, #300]	; (402008 <led_toggle+0x168>)
  401edc:	6b93      	ldr	r3, [r2, #56]	; 0x38
  401ede:	3b01      	subs	r3, #1
  401ee0:	2b00      	cmp	r3, #0
  401ee2:	bfb8      	it	lt
  401ee4:	425b      	neglt	r3, r3
  401ee6:	6393      	str	r3, [r2, #56]	; 0x38
			break;
  401ee8:	e02e      	b.n	401f48 <led_toggle+0xa8>
		case 251 :
			leds_status[13] = abs(leds_status[13] - 1);
  401eea:	4a47      	ldr	r2, [pc, #284]	; (402008 <led_toggle+0x168>)
  401eec:	6b53      	ldr	r3, [r2, #52]	; 0x34
  401eee:	3b01      	subs	r3, #1
  401ef0:	2b00      	cmp	r3, #0
  401ef2:	bfb8      	it	lt
  401ef4:	425b      	neglt	r3, r3
  401ef6:	6353      	str	r3, [r2, #52]	; 0x34
			break;
  401ef8:	e026      	b.n	401f48 <led_toggle+0xa8>
		case 247 :
			leds_status[12] = abs(leds_status[12] - 1);
  401efa:	4a43      	ldr	r2, [pc, #268]	; (402008 <led_toggle+0x168>)
  401efc:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401efe:	3b01      	subs	r3, #1
  401f00:	2b00      	cmp	r3, #0
  401f02:	bfb8      	it	lt
  401f04:	425b      	neglt	r3, r3
  401f06:	6313      	str	r3, [r2, #48]	; 0x30
			break;
  401f08:	e01e      	b.n	401f48 <led_toggle+0xa8>
		case 239 :
			leds_status[11] = abs(leds_status[11] - 1);
  401f0a:	4a3f      	ldr	r2, [pc, #252]	; (402008 <led_toggle+0x168>)
  401f0c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
  401f0e:	3b01      	subs	r3, #1
  401f10:	2b00      	cmp	r3, #0
  401f12:	bfb8      	it	lt
  401f14:	425b      	neglt	r3, r3
  401f16:	62d3      	str	r3, [r2, #44]	; 0x2c
			break;
  401f18:	e016      	b.n	401f48 <led_toggle+0xa8>
		case 223 :
			leds_status[10] = abs(leds_status[10] - 1);
  401f1a:	4a3b      	ldr	r2, [pc, #236]	; (402008 <led_toggle+0x168>)
  401f1c:	6a93      	ldr	r3, [r2, #40]	; 0x28
  401f1e:	3b01      	subs	r3, #1
  401f20:	2b00      	cmp	r3, #0
  401f22:	bfb8      	it	lt
  401f24:	425b      	neglt	r3, r3
  401f26:	6293      	str	r3, [r2, #40]	; 0x28
			break;
  401f28:	e00e      	b.n	401f48 <led_toggle+0xa8>
		case 191 :
			leds_status[9] = abs(leds_status[9] - 1);
  401f2a:	4a37      	ldr	r2, [pc, #220]	; (402008 <led_toggle+0x168>)
  401f2c:	6a53      	ldr	r3, [r2, #36]	; 0x24
  401f2e:	3b01      	subs	r3, #1
  401f30:	2b00      	cmp	r3, #0
  401f32:	bfb8      	it	lt
  401f34:	425b      	neglt	r3, r3
  401f36:	6253      	str	r3, [r2, #36]	; 0x24
			break;
  401f38:	e006      	b.n	401f48 <led_toggle+0xa8>
		case 127 :
			leds_status[8] = abs(leds_status[8] - 1);
  401f3a:	4a33      	ldr	r2, [pc, #204]	; (402008 <led_toggle+0x168>)
  401f3c:	6a13      	ldr	r3, [r2, #32]
  401f3e:	3b01      	subs	r3, #1
  401f40:	2b00      	cmp	r3, #0
  401f42:	bfb8      	it	lt
  401f44:	425b      	neglt	r3, r3
  401f46:	6213      	str	r3, [r2, #32]
			break;
		default :
			break;
	}

	switch(top_row) {
  401f48:	28ef      	cmp	r0, #239	; 0xef
  401f4a:	d031      	beq.n	401fb0 <led_toggle+0x110>
  401f4c:	d806      	bhi.n	401f5c <led_toggle+0xbc>
  401f4e:	28bf      	cmp	r0, #191	; 0xbf
  401f50:	d03e      	beq.n	401fd0 <led_toggle+0x130>
  401f52:	28df      	cmp	r0, #223	; 0xdf
  401f54:	d034      	beq.n	401fc0 <led_toggle+0x120>
  401f56:	287f      	cmp	r0, #127	; 0x7f
  401f58:	d149      	bne.n	401fee <led_toggle+0x14e>
  401f5a:	e041      	b.n	401fe0 <led_toggle+0x140>
  401f5c:	28fb      	cmp	r0, #251	; 0xfb
  401f5e:	d017      	beq.n	401f90 <led_toggle+0xf0>
  401f60:	d802      	bhi.n	401f68 <led_toggle+0xc8>
  401f62:	28f7      	cmp	r0, #247	; 0xf7
  401f64:	d01c      	beq.n	401fa0 <led_toggle+0x100>
  401f66:	e042      	b.n	401fee <led_toggle+0x14e>
  401f68:	28fd      	cmp	r0, #253	; 0xfd
  401f6a:	d009      	beq.n	401f80 <led_toggle+0xe0>
  401f6c:	28fe      	cmp	r0, #254	; 0xfe
  401f6e:	d13e      	bne.n	401fee <led_toggle+0x14e>
		case 254 :
			leds_status[7] = abs(leds_status[7] - 1);
  401f70:	4a25      	ldr	r2, [pc, #148]	; (402008 <led_toggle+0x168>)
  401f72:	69d3      	ldr	r3, [r2, #28]
  401f74:	3b01      	subs	r3, #1
  401f76:	2b00      	cmp	r3, #0
  401f78:	bfb8      	it	lt
  401f7a:	425b      	neglt	r3, r3
  401f7c:	61d3      	str	r3, [r2, #28]
			break;
  401f7e:	e036      	b.n	401fee <led_toggle+0x14e>
		case 253 :
			leds_status[6] = abs(leds_status[6] - 1);
  401f80:	4a21      	ldr	r2, [pc, #132]	; (402008 <led_toggle+0x168>)
  401f82:	6993      	ldr	r3, [r2, #24]
  401f84:	3b01      	subs	r3, #1
  401f86:	2b00      	cmp	r3, #0
  401f88:	bfb8      	it	lt
  401f8a:	425b      	neglt	r3, r3
  401f8c:	6193      	str	r3, [r2, #24]
			break;
  401f8e:	e02e      	b.n	401fee <led_toggle+0x14e>
		case 251 :
			leds_status[5] = abs(leds_status[5] - 1);
  401f90:	4a1d      	ldr	r2, [pc, #116]	; (402008 <led_toggle+0x168>)
  401f92:	6953      	ldr	r3, [r2, #20]
  401f94:	3b01      	subs	r3, #1
  401f96:	2b00      	cmp	r3, #0
  401f98:	bfb8      	it	lt
  401f9a:	425b      	neglt	r3, r3
  401f9c:	6153      	str	r3, [r2, #20]
			break;
  401f9e:	e026      	b.n	401fee <led_toggle+0x14e>
		case 247 :
			leds_status[4] = abs(leds_status[4] - 1);
  401fa0:	4a19      	ldr	r2, [pc, #100]	; (402008 <led_toggle+0x168>)
  401fa2:	6913      	ldr	r3, [r2, #16]
  401fa4:	3b01      	subs	r3, #1
  401fa6:	2b00      	cmp	r3, #0
  401fa8:	bfb8      	it	lt
  401faa:	425b      	neglt	r3, r3
  401fac:	6113      	str	r3, [r2, #16]
			break;
  401fae:	e01e      	b.n	401fee <led_toggle+0x14e>
		case 239 :
			leds_status[3] = abs(leds_status[3] - 1);
  401fb0:	4a15      	ldr	r2, [pc, #84]	; (402008 <led_toggle+0x168>)
  401fb2:	68d3      	ldr	r3, [r2, #12]
  401fb4:	3b01      	subs	r3, #1
  401fb6:	2b00      	cmp	r3, #0
  401fb8:	bfb8      	it	lt
  401fba:	425b      	neglt	r3, r3
  401fbc:	60d3      	str	r3, [r2, #12]
			break;
  401fbe:	e016      	b.n	401fee <led_toggle+0x14e>
		case 223 :
			leds_status[2] = abs(leds_status[2] - 1);
  401fc0:	4a11      	ldr	r2, [pc, #68]	; (402008 <led_toggle+0x168>)
  401fc2:	6893      	ldr	r3, [r2, #8]
  401fc4:	3b01      	subs	r3, #1
  401fc6:	2b00      	cmp	r3, #0
  401fc8:	bfb8      	it	lt
  401fca:	425b      	neglt	r3, r3
  401fcc:	6093      	str	r3, [r2, #8]
			break;
  401fce:	e00e      	b.n	401fee <led_toggle+0x14e>
		case 191 :
			leds_status[1] = abs(leds_status[1] - 1);
  401fd0:	4a0d      	ldr	r2, [pc, #52]	; (402008 <led_toggle+0x168>)
  401fd2:	6853      	ldr	r3, [r2, #4]
  401fd4:	3b01      	subs	r3, #1
  401fd6:	2b00      	cmp	r3, #0
  401fd8:	bfb8      	it	lt
  401fda:	425b      	neglt	r3, r3
  401fdc:	6053      	str	r3, [r2, #4]
			break;
  401fde:	e006      	b.n	401fee <led_toggle+0x14e>
		case 127 :
			leds_status[0] = abs(leds_status[0] - 1);
  401fe0:	4a09      	ldr	r2, [pc, #36]	; (402008 <led_toggle+0x168>)
  401fe2:	6813      	ldr	r3, [r2, #0]
  401fe4:	3b01      	subs	r3, #1
  401fe6:	2b00      	cmp	r3, #0
  401fe8:	bfb8      	it	lt
  401fea:	425b      	neglt	r3, r3
  401fec:	6013      	str	r3, [r2, #0]
		default : 
			break;
	}

	/* match note status to display status if changed*/
	notes_status_set(display_page, leds_status);
  401fee:	4906      	ldr	r1, [pc, #24]	; (402008 <led_toggle+0x168>)
  401ff0:	4b06      	ldr	r3, [pc, #24]	; (40200c <led_toggle+0x16c>)
  401ff2:	7818      	ldrb	r0, [r3, #0]
  401ff4:	4b06      	ldr	r3, [pc, #24]	; (402010 <led_toggle+0x170>)
  401ff6:	4798      	blx	r3
	
	SPI_led_init();
  401ff8:	4b06      	ldr	r3, [pc, #24]	; (402014 <led_toggle+0x174>)
  401ffa:	4798      	blx	r3
	leds_update_cursor(curr_step);
  401ffc:	4b06      	ldr	r3, [pc, #24]	; (402018 <led_toggle+0x178>)
  401ffe:	7818      	ldrb	r0, [r3, #0]
  402000:	4b06      	ldr	r3, [pc, #24]	; (40201c <led_toggle+0x17c>)
  402002:	4798      	blx	r3
  402004:	bd08      	pop	{r3, pc}
  402006:	bf00      	nop
  402008:	20000654 	.word	0x20000654
  40200c:	20008724 	.word	0x20008724
  402010:	00402ead 	.word	0x00402ead
  402014:	00402bd5 	.word	0x00402bd5
  402018:	2000871c 	.word	0x2000871c
  40201c:	00401c61 	.word	0x00401c61

00402020 <res_to_int>:


}

uint8_t res_to_int(uint8_t res){
	if (res == 0){
  402020:	b190      	cbz	r0, 402048 <res_to_int+0x28>
		return 1;
	}
	else if (res == 1){
  402022:	2801      	cmp	r0, #1
  402024:	d012      	beq.n	40204c <res_to_int+0x2c>
		return 2;
	}
	else if (res == 2){
  402026:	2802      	cmp	r0, #2
  402028:	d012      	beq.n	402050 <res_to_int+0x30>
		return 4;
	}
	else if (res == 3){
  40202a:	2803      	cmp	r0, #3
  40202c:	d012      	beq.n	402054 <res_to_int+0x34>
		return 6;
	}
	else if (res == 4){
  40202e:	2804      	cmp	r0, #4
  402030:	d012      	beq.n	402058 <res_to_int+0x38>
		return 8;
	}
	else if (res == 5){
  402032:	2805      	cmp	r0, #5
  402034:	d012      	beq.n	40205c <res_to_int+0x3c>
		return 12;
	}
	else if (res == 6){
  402036:	2806      	cmp	r0, #6
  402038:	d012      	beq.n	402060 <res_to_int+0x40>
		return 16;
	}
	else if (res == 7){
  40203a:	2807      	cmp	r0, #7
  40203c:	d012      	beq.n	402064 <res_to_int+0x44>
	else if (res == 8){
		return 32;
	}

	//default
	return 1;
  40203e:	2808      	cmp	r0, #8
  402040:	bf0c      	ite	eq
  402042:	2020      	moveq	r0, #32
  402044:	2001      	movne	r0, #1
  402046:	4770      	bx	lr

}

uint8_t res_to_int(uint8_t res){
	if (res == 0){
		return 1;
  402048:	2001      	movs	r0, #1
  40204a:	4770      	bx	lr
	}
	else if (res == 1){
		return 2;
  40204c:	2002      	movs	r0, #2
  40204e:	4770      	bx	lr
	}
	else if (res == 2){
		return 4;
  402050:	2004      	movs	r0, #4
  402052:	4770      	bx	lr
	}
	else if (res == 3){
		return 6;
  402054:	2006      	movs	r0, #6
  402056:	4770      	bx	lr
	}
	else if (res == 4){
		return 8;
  402058:	2008      	movs	r0, #8
  40205a:	4770      	bx	lr
	}
	else if (res == 5){
		return 12;
  40205c:	200c      	movs	r0, #12
  40205e:	4770      	bx	lr
	}
	else if (res == 6){
		return 16;
  402060:	2010      	movs	r0, #16
  402062:	4770      	bx	lr
	}
	else if (res == 7){
		return 24;
  402064:	2018      	movs	r0, #24
		return 32;
	}

	//default
	return 1;
}
  402066:	4770      	bx	lr

00402068 <res_inc>:

void res_inc(){
	if (resolution < 8){
  402068:	4b03      	ldr	r3, [pc, #12]	; (402078 <res_inc+0x10>)
  40206a:	681b      	ldr	r3, [r3, #0]
  40206c:	2b07      	cmp	r3, #7
  40206e:	dc02      	bgt.n	402076 <res_inc+0xe>
		resolution++;
  402070:	3301      	adds	r3, #1
  402072:	4a01      	ldr	r2, [pc, #4]	; (402078 <res_inc+0x10>)
  402074:	6013      	str	r3, [r2, #0]
  402076:	4770      	bx	lr
  402078:	20008708 	.word	0x20008708

0040207c <res_dec>:
	}
}

void res_dec(){
	if (resolution > 0){
  40207c:	4b03      	ldr	r3, [pc, #12]	; (40208c <res_dec+0x10>)
  40207e:	681b      	ldr	r3, [r3, #0]
  402080:	2b00      	cmp	r3, #0
  402082:	dd02      	ble.n	40208a <res_dec+0xe>
		resolution--;
  402084:	3b01      	subs	r3, #1
  402086:	4a01      	ldr	r2, [pc, #4]	; (40208c <res_dec+0x10>)
  402088:	6013      	str	r3, [r2, #0]
  40208a:	4770      	bx	lr
  40208c:	20008708 	.word	0x20008708

00402090 <bpm_inc>:
	}
}

 void bpm_inc(){
	if ( (bpm + bpm_adjust) <= 999){
  402090:	4b05      	ldr	r3, [pc, #20]	; (4020a8 <bpm_inc+0x18>)
  402092:	881a      	ldrh	r2, [r3, #0]
  402094:	4b05      	ldr	r3, [pc, #20]	; (4020ac <bpm_inc+0x1c>)
  402096:	781b      	ldrb	r3, [r3, #0]
  402098:	18d1      	adds	r1, r2, r3
  40209a:	f5b1 7f7a 	cmp.w	r1, #1000	; 0x3e8
  40209e:	da01      	bge.n	4020a4 <bpm_inc+0x14>
		bpm = bpm + bpm_adjust;
  4020a0:	4a01      	ldr	r2, [pc, #4]	; (4020a8 <bpm_inc+0x18>)
  4020a2:	8011      	strh	r1, [r2, #0]
  4020a4:	4770      	bx	lr
  4020a6:	bf00      	nop
  4020a8:	20008736 	.word	0x20008736
  4020ac:	20008732 	.word	0x20008732

004020b0 <bpm_dec>:
	}
}

 void bpm_dec(){
	if ( (bpm - bpm_adjust) >= 20){
  4020b0:	4b04      	ldr	r3, [pc, #16]	; (4020c4 <bpm_dec+0x14>)
  4020b2:	881b      	ldrh	r3, [r3, #0]
  4020b4:	4a04      	ldr	r2, [pc, #16]	; (4020c8 <bpm_dec+0x18>)
  4020b6:	7812      	ldrb	r2, [r2, #0]
  4020b8:	1a99      	subs	r1, r3, r2
  4020ba:	2913      	cmp	r1, #19
  4020bc:	dd01      	ble.n	4020c2 <bpm_dec+0x12>
		bpm = bpm - bpm_adjust;
  4020be:	4a01      	ldr	r2, [pc, #4]	; (4020c4 <bpm_dec+0x14>)
  4020c0:	8011      	strh	r1, [r2, #0]
  4020c2:	4770      	bx	lr
  4020c4:	20008736 	.word	0x20008736
  4020c8:	20008732 	.word	0x20008732

004020cc <bpm_toggle>:
	}
}

void bpm_toggle(){
	if (bpm_adjust == 1){
  4020cc:	4b0c      	ldr	r3, [pc, #48]	; (402100 <bpm_toggle+0x34>)
  4020ce:	781b      	ldrb	r3, [r3, #0]
  4020d0:	2b01      	cmp	r3, #1
  4020d2:	d103      	bne.n	4020dc <bpm_toggle+0x10>
		bpm_adjust = 5;
  4020d4:	2205      	movs	r2, #5
  4020d6:	4b0a      	ldr	r3, [pc, #40]	; (402100 <bpm_toggle+0x34>)
  4020d8:	701a      	strb	r2, [r3, #0]
  4020da:	4770      	bx	lr
	}
	else if (bpm_adjust == 5){
  4020dc:	2b05      	cmp	r3, #5
  4020de:	d103      	bne.n	4020e8 <bpm_toggle+0x1c>
		bpm_adjust = 10;
  4020e0:	220a      	movs	r2, #10
  4020e2:	4b07      	ldr	r3, [pc, #28]	; (402100 <bpm_toggle+0x34>)
  4020e4:	701a      	strb	r2, [r3, #0]
  4020e6:	4770      	bx	lr
	}
	else if (bpm_adjust == 10){
  4020e8:	2b0a      	cmp	r3, #10
  4020ea:	d103      	bne.n	4020f4 <bpm_toggle+0x28>
		bpm_adjust = 20;
  4020ec:	2214      	movs	r2, #20
  4020ee:	4b04      	ldr	r3, [pc, #16]	; (402100 <bpm_toggle+0x34>)
  4020f0:	701a      	strb	r2, [r3, #0]
  4020f2:	4770      	bx	lr
	}
	else if (bpm_adjust == 20){
  4020f4:	2b14      	cmp	r3, #20
  4020f6:	d102      	bne.n	4020fe <bpm_toggle+0x32>
		bpm_adjust = 1;
  4020f8:	2201      	movs	r2, #1
  4020fa:	4b01      	ldr	r3, [pc, #4]	; (402100 <bpm_toggle+0x34>)
  4020fc:	701a      	strb	r2, [r3, #0]
  4020fe:	4770      	bx	lr
  402100:	20008732 	.word	0x20008732

00402104 <display_page_inc>:
	}
}

 void display_page_inc(){
	if (display_page < 15){
  402104:	4b03      	ldr	r3, [pc, #12]	; (402114 <display_page_inc+0x10>)
  402106:	781b      	ldrb	r3, [r3, #0]
  402108:	2b0e      	cmp	r3, #14
  40210a:	d802      	bhi.n	402112 <display_page_inc+0xe>
		display_page++;
  40210c:	3301      	adds	r3, #1
  40210e:	4a01      	ldr	r2, [pc, #4]	; (402114 <display_page_inc+0x10>)
  402110:	7013      	strb	r3, [r2, #0]
  402112:	4770      	bx	lr
  402114:	20008724 	.word	0x20008724

00402118 <display_page_dec>:
	}
}

 void display_page_dec(){
	if (display_page > 0){
  402118:	4b03      	ldr	r3, [pc, #12]	; (402128 <display_page_dec+0x10>)
  40211a:	781b      	ldrb	r3, [r3, #0]
  40211c:	b113      	cbz	r3, 402124 <display_page_dec+0xc>
		display_page--;
  40211e:	3b01      	subs	r3, #1
  402120:	4a01      	ldr	r2, [pc, #4]	; (402128 <display_page_dec+0x10>)
  402122:	7013      	strb	r3, [r2, #0]
  402124:	4770      	bx	lr
  402126:	bf00      	nop
  402128:	20008724 	.word	0x20008724

0040212c <pattern_inc>:
	}
}

 void pattern_inc(){
	  if (curr_pattern < 15){
  40212c:	4b03      	ldr	r3, [pc, #12]	; (40213c <pattern_inc+0x10>)
  40212e:	781b      	ldrb	r3, [r3, #0]
  402130:	2b0e      	cmp	r3, #14
  402132:	d802      	bhi.n	40213a <pattern_inc+0xe>
		  curr_pattern++;
  402134:	3301      	adds	r3, #1
  402136:	4a01      	ldr	r2, [pc, #4]	; (40213c <pattern_inc+0x10>)
  402138:	7013      	strb	r3, [r2, #0]
  40213a:	4770      	bx	lr
  40213c:	20008700 	.word	0x20008700

00402140 <pattern_dec>:
	  }
 }

 void pattern_dec(){
	  if (curr_pattern > 0){
  402140:	4b03      	ldr	r3, [pc, #12]	; (402150 <pattern_dec+0x10>)
  402142:	781b      	ldrb	r3, [r3, #0]
  402144:	b113      	cbz	r3, 40214c <pattern_dec+0xc>
		  curr_pattern--;
  402146:	3b01      	subs	r3, #1
  402148:	4a01      	ldr	r2, [pc, #4]	; (402150 <pattern_dec+0x10>)
  40214a:	7013      	strb	r3, [r2, #0]
  40214c:	4770      	bx	lr
  40214e:	bf00      	nop
  402150:	20008700 	.word	0x20008700

00402154 <pattern_up>:
	  }
 }

void pattern_up(uint8_t channel){
	if (curr_pattern_ch[channel] < 15){
  402154:	4b03      	ldr	r3, [pc, #12]	; (402164 <pattern_up+0x10>)
  402156:	5c1b      	ldrb	r3, [r3, r0]
  402158:	2b0e      	cmp	r3, #14
  40215a:	d802      	bhi.n	402162 <pattern_up+0xe>
		curr_pattern_ch[channel]++;
  40215c:	3301      	adds	r3, #1
  40215e:	4a01      	ldr	r2, [pc, #4]	; (402164 <pattern_up+0x10>)
  402160:	5413      	strb	r3, [r2, r0]
  402162:	4770      	bx	lr
  402164:	20008718 	.word	0x20008718

00402168 <pattern_down>:
	}
}

void pattern_down(uint8_t channel){
	  if (curr_pattern_ch[channel] > 0){
  402168:	4b03      	ldr	r3, [pc, #12]	; (402178 <pattern_down+0x10>)
  40216a:	5c1b      	ldrb	r3, [r3, r0]
  40216c:	b113      	cbz	r3, 402174 <pattern_down+0xc>
		  curr_pattern_ch[channel]--;
  40216e:	3b01      	subs	r3, #1
  402170:	4a01      	ldr	r2, [pc, #4]	; (402178 <pattern_down+0x10>)
  402172:	5413      	strb	r3, [r2, r0]
  402174:	4770      	bx	lr
  402176:	bf00      	nop
  402178:	20008718 	.word	0x20008718

0040217c <page_loop_inc>:
	  }
}

void page_loop_inc(){
	if (page_loop < 15){
  40217c:	4b03      	ldr	r3, [pc, #12]	; (40218c <page_loop_inc+0x10>)
  40217e:	781b      	ldrb	r3, [r3, #0]
  402180:	2b0e      	cmp	r3, #14
  402182:	d802      	bhi.n	40218a <page_loop_inc+0xe>
		page_loop++;
  402184:	3301      	adds	r3, #1
  402186:	4a01      	ldr	r2, [pc, #4]	; (40218c <page_loop_inc+0x10>)
  402188:	7013      	strb	r3, [r2, #0]
  40218a:	4770      	bx	lr
  40218c:	2000870c 	.word	0x2000870c

00402190 <page_loop_dec>:
	}
}

void page_loop_dec(){
	if (page_loop > 0){
  402190:	4b03      	ldr	r3, [pc, #12]	; (4021a0 <page_loop_dec+0x10>)
  402192:	781b      	ldrb	r3, [r3, #0]
  402194:	b113      	cbz	r3, 40219c <page_loop_dec+0xc>
		page_loop--;
  402196:	3b01      	subs	r3, #1
  402198:	4a01      	ldr	r2, [pc, #4]	; (4021a0 <page_loop_dec+0x10>)
  40219a:	7013      	strb	r3, [r2, #0]
  40219c:	4770      	bx	lr
  40219e:	bf00      	nop
  4021a0:	2000870c 	.word	0x2000870c

004021a4 <control_direction>:
 #include "displays.h"
 #include "notes.h"
 #include "dac.h"


 void control_direction(uint32_t A, uint32_t B, uint8_t aux_control){
  4021a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	//read Encoder input A
	bool A_in = REG_PIOA_PDSR & A;
  4021a6:	4b75      	ldr	r3, [pc, #468]	; (40237c <control_direction+0x1d8>)
  4021a8:	681f      	ldr	r7, [r3, #0]
	//read Encoder input B
	bool B_in = REG_PIOA_PDSR & B;
  4021aa:	681d      	ldr	r5, [r3, #0]
	
	A_seq = A_seq << 1;
	A_seq |= A_in;
	
	B_seq = B_seq << 1;
  4021ac:	4c74      	ldr	r4, [pc, #464]	; (402380 <control_direction+0x1dc>)
	B_seq |= B_in;
  4021ae:	7823      	ldrb	r3, [r4, #0]
  4021b0:	420d      	tst	r5, r1
  4021b2:	bf14      	ite	ne
  4021b4:	2101      	movne	r1, #1
  4021b6:	2100      	moveq	r1, #0
  4021b8:	ea41 0143 	orr.w	r1, r1, r3, lsl #1
	//read Encoder input A
	bool A_in = REG_PIOA_PDSR & A;
	//read Encoder input B
	bool B_in = REG_PIOA_PDSR & B;
	
	A_seq = A_seq << 1;
  4021bc:	4d71      	ldr	r5, [pc, #452]	; (402384 <control_direction+0x1e0>)
	A_seq |= A_in;
	
	B_seq = B_seq << 1;
	B_seq |= B_in;
	
	A_seq &= 0b00001111;
  4021be:	782e      	ldrb	r6, [r5, #0]
  4021c0:	4207      	tst	r7, r0
  4021c2:	bf14      	ite	ne
  4021c4:	2301      	movne	r3, #1
  4021c6:	2300      	moveq	r3, #0
  4021c8:	ea43 0346 	orr.w	r3, r3, r6, lsl #1
  4021cc:	f003 030f 	and.w	r3, r3, #15
  4021d0:	702b      	strb	r3, [r5, #0]
	B_seq &= 0b00001111;
  4021d2:	f001 010f 	and.w	r1, r1, #15
  4021d6:	7021      	strb	r1, [r4, #0]


	//return true if turned right
	if ((A_seq == 0b00001001) && (B_seq == 0b00000011)){
  4021d8:	2b09      	cmp	r3, #9
  4021da:	d167      	bne.n	4022ac <control_direction+0x108>
  4021dc:	2903      	cmp	r1, #3
  4021de:	f040 80cc 	bne.w	40237a <control_direction+0x1d6>
		if (aux_control == 0){
  4021e2:	b94a      	cbnz	r2, 4021f8 <control_direction+0x54>
			bpm_inc();
  4021e4:	4b68      	ldr	r3, [pc, #416]	; (402388 <control_direction+0x1e4>)
  4021e6:	4798      	blx	r3
			update_timers(bpm);
  4021e8:	4c68      	ldr	r4, [pc, #416]	; (40238c <control_direction+0x1e8>)
  4021ea:	8820      	ldrh	r0, [r4, #0]
  4021ec:	4b68      	ldr	r3, [pc, #416]	; (402390 <control_direction+0x1ec>)
  4021ee:	4798      	blx	r3
			bpm_display(bpm);
  4021f0:	7820      	ldrb	r0, [r4, #0]
  4021f2:	4b68      	ldr	r3, [pc, #416]	; (402394 <control_direction+0x1f0>)
  4021f4:	4798      	blx	r3
  4021f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		}
		else if (aux_control == 1){
  4021f8:	2a01      	cmp	r2, #1
  4021fa:	d10c      	bne.n	402216 <control_direction+0x72>
			res_inc();
  4021fc:	4b66      	ldr	r3, [pc, #408]	; (402398 <control_direction+0x1f4>)
  4021fe:	4798      	blx	r3
			update_timers(bpm);
  402200:	4b62      	ldr	r3, [pc, #392]	; (40238c <control_direction+0x1e8>)
  402202:	8818      	ldrh	r0, [r3, #0]
  402204:	4b62      	ldr	r3, [pc, #392]	; (402390 <control_direction+0x1ec>)
  402206:	4798      	blx	r3
			res_display(res_to_int(resolution));
  402208:	4b64      	ldr	r3, [pc, #400]	; (40239c <control_direction+0x1f8>)
  40220a:	7818      	ldrb	r0, [r3, #0]
  40220c:	4b64      	ldr	r3, [pc, #400]	; (4023a0 <control_direction+0x1fc>)
  40220e:	4798      	blx	r3
  402210:	4b64      	ldr	r3, [pc, #400]	; (4023a4 <control_direction+0x200>)
  402212:	4798      	blx	r3
  402214:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		}
		else if (aux_control == 2){
  402216:	2a02      	cmp	r2, #2
  402218:	d113      	bne.n	402242 <control_direction+0x9e>
			if (page_or_loop == 0){
  40221a:	4b63      	ldr	r3, [pc, #396]	; (4023a8 <control_direction+0x204>)
  40221c:	781b      	ldrb	r3, [r3, #0]
  40221e:	b933      	cbnz	r3, 40222e <control_direction+0x8a>
				display_page_inc();
  402220:	4b62      	ldr	r3, [pc, #392]	; (4023ac <control_direction+0x208>)
  402222:	4798      	blx	r3
				page_display(display_page);
  402224:	4b62      	ldr	r3, [pc, #392]	; (4023b0 <control_direction+0x20c>)
  402226:	7818      	ldrb	r0, [r3, #0]
  402228:	4b62      	ldr	r3, [pc, #392]	; (4023b4 <control_direction+0x210>)
  40222a:	4798      	blx	r3
  40222c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			}
			else if (page_or_loop == 1){
  40222e:	2b01      	cmp	r3, #1
  402230:	f040 80a3 	bne.w	40237a <control_direction+0x1d6>
				page_loop_inc();
  402234:	4b60      	ldr	r3, [pc, #384]	; (4023b8 <control_direction+0x214>)
  402236:	4798      	blx	r3
				loop_display(page_loop);
  402238:	4b60      	ldr	r3, [pc, #384]	; (4023bc <control_direction+0x218>)
  40223a:	7818      	ldrb	r0, [r3, #0]
  40223c:	4b60      	ldr	r3, [pc, #384]	; (4023c0 <control_direction+0x21c>)
  40223e:	4798      	blx	r3
  402240:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			}
		}
		else if (aux_control == 3){
  402242:	2a03      	cmp	r2, #3
  402244:	d106      	bne.n	402254 <control_direction+0xb0>
			pattern_inc();
  402246:	4b5f      	ldr	r3, [pc, #380]	; (4023c4 <control_direction+0x220>)
  402248:	4798      	blx	r3
			pattern_display(curr_pattern);
  40224a:	4b5f      	ldr	r3, [pc, #380]	; (4023c8 <control_direction+0x224>)
  40224c:	7818      	ldrb	r0, [r3, #0]
  40224e:	4b5f      	ldr	r3, [pc, #380]	; (4023cc <control_direction+0x228>)
  402250:	4798      	blx	r3
  402252:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		}
		else if (aux_control == 4){
  402254:	2a04      	cmp	r2, #4
  402256:	d108      	bne.n	40226a <control_direction+0xc6>
			pattern_up(CHANNEL_1);
  402258:	2000      	movs	r0, #0
  40225a:	4b5d      	ldr	r3, [pc, #372]	; (4023d0 <control_direction+0x22c>)
  40225c:	4798      	blx	r3
			output_display_1(curr_pattern_ch[0], curr_pattern_ch[1]);
  40225e:	4b5d      	ldr	r3, [pc, #372]	; (4023d4 <control_direction+0x230>)
  402260:	7859      	ldrb	r1, [r3, #1]
  402262:	7818      	ldrb	r0, [r3, #0]
  402264:	4b5c      	ldr	r3, [pc, #368]	; (4023d8 <control_direction+0x234>)
  402266:	4798      	blx	r3
  402268:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		}
		else if (aux_control == 5){
  40226a:	2a05      	cmp	r2, #5
  40226c:	d108      	bne.n	402280 <control_direction+0xdc>
			pattern_up(CHANNEL_2);
  40226e:	2001      	movs	r0, #1
  402270:	4b57      	ldr	r3, [pc, #348]	; (4023d0 <control_direction+0x22c>)
  402272:	4798      	blx	r3
			output_display_1(curr_pattern_ch[0], curr_pattern_ch[1]);
  402274:	4b57      	ldr	r3, [pc, #348]	; (4023d4 <control_direction+0x230>)
  402276:	7859      	ldrb	r1, [r3, #1]
  402278:	7818      	ldrb	r0, [r3, #0]
  40227a:	4b57      	ldr	r3, [pc, #348]	; (4023d8 <control_direction+0x234>)
  40227c:	4798      	blx	r3
  40227e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		}
		else if (aux_control == 6){
  402280:	2a06      	cmp	r2, #6
  402282:	d108      	bne.n	402296 <control_direction+0xf2>
			pattern_up(CHANNEL_3);
  402284:	2002      	movs	r0, #2
  402286:	4b52      	ldr	r3, [pc, #328]	; (4023d0 <control_direction+0x22c>)
  402288:	4798      	blx	r3
			output_display_2(curr_pattern_ch[2], curr_pattern_ch[3]);
  40228a:	4b52      	ldr	r3, [pc, #328]	; (4023d4 <control_direction+0x230>)
  40228c:	78d9      	ldrb	r1, [r3, #3]
  40228e:	7898      	ldrb	r0, [r3, #2]
  402290:	4b52      	ldr	r3, [pc, #328]	; (4023dc <control_direction+0x238>)
  402292:	4798      	blx	r3
  402294:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		}
		else if (aux_control == 7){
  402296:	2a07      	cmp	r2, #7
  402298:	d16f      	bne.n	40237a <control_direction+0x1d6>
			pattern_up(CHANNEL_4);
  40229a:	2003      	movs	r0, #3
  40229c:	4b4c      	ldr	r3, [pc, #304]	; (4023d0 <control_direction+0x22c>)
  40229e:	4798      	blx	r3
			output_display_2(curr_pattern_ch[2], curr_pattern_ch[3]);
  4022a0:	4b4c      	ldr	r3, [pc, #304]	; (4023d4 <control_direction+0x230>)
  4022a2:	78d9      	ldrb	r1, [r3, #3]
  4022a4:	7898      	ldrb	r0, [r3, #2]
  4022a6:	4b4d      	ldr	r3, [pc, #308]	; (4023dc <control_direction+0x238>)
  4022a8:	4798      	blx	r3
  4022aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		}

	}

	else if ((A_seq == 0b00000011) && (B_seq == 0b00001001)){
  4022ac:	2b03      	cmp	r3, #3
  4022ae:	d164      	bne.n	40237a <control_direction+0x1d6>
  4022b0:	2909      	cmp	r1, #9
  4022b2:	d162      	bne.n	40237a <control_direction+0x1d6>

		if (aux_control == 0){
  4022b4:	b94a      	cbnz	r2, 4022ca <control_direction+0x126>
			bpm_dec();
  4022b6:	4b4a      	ldr	r3, [pc, #296]	; (4023e0 <control_direction+0x23c>)
  4022b8:	4798      	blx	r3
			update_timers(bpm);
  4022ba:	4c34      	ldr	r4, [pc, #208]	; (40238c <control_direction+0x1e8>)
  4022bc:	8820      	ldrh	r0, [r4, #0]
  4022be:	4b34      	ldr	r3, [pc, #208]	; (402390 <control_direction+0x1ec>)
  4022c0:	4798      	blx	r3
			bpm_display(bpm);
  4022c2:	7820      	ldrb	r0, [r4, #0]
  4022c4:	4b33      	ldr	r3, [pc, #204]	; (402394 <control_direction+0x1f0>)
  4022c6:	4798      	blx	r3
  4022c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		}
		else if (aux_control == 1){
  4022ca:	2a01      	cmp	r2, #1
  4022cc:	d10c      	bne.n	4022e8 <control_direction+0x144>
			res_dec();
  4022ce:	4b45      	ldr	r3, [pc, #276]	; (4023e4 <control_direction+0x240>)
  4022d0:	4798      	blx	r3
			update_timers(bpm);
  4022d2:	4b2e      	ldr	r3, [pc, #184]	; (40238c <control_direction+0x1e8>)
  4022d4:	8818      	ldrh	r0, [r3, #0]
  4022d6:	4b2e      	ldr	r3, [pc, #184]	; (402390 <control_direction+0x1ec>)
  4022d8:	4798      	blx	r3
			res_display(res_to_int(resolution));
  4022da:	4b30      	ldr	r3, [pc, #192]	; (40239c <control_direction+0x1f8>)
  4022dc:	7818      	ldrb	r0, [r3, #0]
  4022de:	4b30      	ldr	r3, [pc, #192]	; (4023a0 <control_direction+0x1fc>)
  4022e0:	4798      	blx	r3
  4022e2:	4b30      	ldr	r3, [pc, #192]	; (4023a4 <control_direction+0x200>)
  4022e4:	4798      	blx	r3
  4022e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		}
		else if (aux_control == 2){
  4022e8:	2a02      	cmp	r2, #2
  4022ea:	d112      	bne.n	402312 <control_direction+0x16e>
			if (page_or_loop == 0){
  4022ec:	4b2e      	ldr	r3, [pc, #184]	; (4023a8 <control_direction+0x204>)
  4022ee:	781b      	ldrb	r3, [r3, #0]
  4022f0:	b933      	cbnz	r3, 402300 <control_direction+0x15c>
				display_page_dec();
  4022f2:	4b3d      	ldr	r3, [pc, #244]	; (4023e8 <control_direction+0x244>)
  4022f4:	4798      	blx	r3
				page_display(display_page);
  4022f6:	4b2e      	ldr	r3, [pc, #184]	; (4023b0 <control_direction+0x20c>)
  4022f8:	7818      	ldrb	r0, [r3, #0]
  4022fa:	4b2e      	ldr	r3, [pc, #184]	; (4023b4 <control_direction+0x210>)
  4022fc:	4798      	blx	r3
  4022fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			}
			else if (page_or_loop == 1){
  402300:	2b01      	cmp	r3, #1
  402302:	d13a      	bne.n	40237a <control_direction+0x1d6>
				page_loop_dec();
  402304:	4b39      	ldr	r3, [pc, #228]	; (4023ec <control_direction+0x248>)
  402306:	4798      	blx	r3
				loop_display(page_loop);
  402308:	4b2c      	ldr	r3, [pc, #176]	; (4023bc <control_direction+0x218>)
  40230a:	7818      	ldrb	r0, [r3, #0]
  40230c:	4b2c      	ldr	r3, [pc, #176]	; (4023c0 <control_direction+0x21c>)
  40230e:	4798      	blx	r3
  402310:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			}
		}
		else if (aux_control == 3){
  402312:	2a03      	cmp	r2, #3
  402314:	d106      	bne.n	402324 <control_direction+0x180>
			pattern_dec();
  402316:	4b36      	ldr	r3, [pc, #216]	; (4023f0 <control_direction+0x24c>)
  402318:	4798      	blx	r3
			pattern_display(curr_pattern);
  40231a:	4b2b      	ldr	r3, [pc, #172]	; (4023c8 <control_direction+0x224>)
  40231c:	7818      	ldrb	r0, [r3, #0]
  40231e:	4b2b      	ldr	r3, [pc, #172]	; (4023cc <control_direction+0x228>)
  402320:	4798      	blx	r3
  402322:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		}
		else if (aux_control == 4){
  402324:	2a04      	cmp	r2, #4
  402326:	d108      	bne.n	40233a <control_direction+0x196>
			pattern_down(CHANNEL_1);
  402328:	2000      	movs	r0, #0
  40232a:	4b32      	ldr	r3, [pc, #200]	; (4023f4 <control_direction+0x250>)
  40232c:	4798      	blx	r3
			output_display_1(curr_pattern_ch[0], curr_pattern_ch[1]);
  40232e:	4b29      	ldr	r3, [pc, #164]	; (4023d4 <control_direction+0x230>)
  402330:	7859      	ldrb	r1, [r3, #1]
  402332:	7818      	ldrb	r0, [r3, #0]
  402334:	4b28      	ldr	r3, [pc, #160]	; (4023d8 <control_direction+0x234>)
  402336:	4798      	blx	r3
  402338:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		}
		else if (aux_control == 5){
  40233a:	2a05      	cmp	r2, #5
  40233c:	d108      	bne.n	402350 <control_direction+0x1ac>
			pattern_down(CHANNEL_2);
  40233e:	2001      	movs	r0, #1
  402340:	4b2c      	ldr	r3, [pc, #176]	; (4023f4 <control_direction+0x250>)
  402342:	4798      	blx	r3
			output_display_1(curr_pattern_ch[0], curr_pattern_ch[1]);
  402344:	4b23      	ldr	r3, [pc, #140]	; (4023d4 <control_direction+0x230>)
  402346:	7859      	ldrb	r1, [r3, #1]
  402348:	7818      	ldrb	r0, [r3, #0]
  40234a:	4b23      	ldr	r3, [pc, #140]	; (4023d8 <control_direction+0x234>)
  40234c:	4798      	blx	r3
  40234e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		}
		else if (aux_control == 6){
  402350:	2a06      	cmp	r2, #6
  402352:	d108      	bne.n	402366 <control_direction+0x1c2>
			pattern_down(CHANNEL_3);
  402354:	2002      	movs	r0, #2
  402356:	4b27      	ldr	r3, [pc, #156]	; (4023f4 <control_direction+0x250>)
  402358:	4798      	blx	r3
			output_display_2(curr_pattern_ch[2], curr_pattern_ch[3]);
  40235a:	4b1e      	ldr	r3, [pc, #120]	; (4023d4 <control_direction+0x230>)
  40235c:	78d9      	ldrb	r1, [r3, #3]
  40235e:	7898      	ldrb	r0, [r3, #2]
  402360:	4b1e      	ldr	r3, [pc, #120]	; (4023dc <control_direction+0x238>)
  402362:	4798      	blx	r3
  402364:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		}
		else if (aux_control == 7){
  402366:	2a07      	cmp	r2, #7
  402368:	d107      	bne.n	40237a <control_direction+0x1d6>
			pattern_down(CHANNEL_4);
  40236a:	2003      	movs	r0, #3
  40236c:	4b21      	ldr	r3, [pc, #132]	; (4023f4 <control_direction+0x250>)
  40236e:	4798      	blx	r3
			output_display_2(curr_pattern_ch[2], curr_pattern_ch[3]);
  402370:	4b18      	ldr	r3, [pc, #96]	; (4023d4 <control_direction+0x230>)
  402372:	78d9      	ldrb	r1, [r3, #3]
  402374:	7898      	ldrb	r0, [r3, #2]
  402376:	4b19      	ldr	r3, [pc, #100]	; (4023dc <control_direction+0x238>)
  402378:	4798      	blx	r3
  40237a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40237c:	400e0e3c 	.word	0x400e0e3c
  402380:	2000873d 	.word	0x2000873d
  402384:	20008733 	.word	0x20008733
  402388:	00402091 	.word	0x00402091
  40238c:	20008736 	.word	0x20008736
  402390:	00403081 	.word	0x00403081
  402394:	00400b6d 	.word	0x00400b6d
  402398:	00402069 	.word	0x00402069
  40239c:	20008708 	.word	0x20008708
  4023a0:	00402021 	.word	0x00402021
  4023a4:	00400bd1 	.word	0x00400bd1
  4023a8:	2000873c 	.word	0x2000873c
  4023ac:	00402105 	.word	0x00402105
  4023b0:	20008724 	.word	0x20008724
  4023b4:	00400ca1 	.word	0x00400ca1
  4023b8:	0040217d 	.word	0x0040217d
  4023bc:	2000870c 	.word	0x2000870c
  4023c0:	00400ced 	.word	0x00400ced
  4023c4:	0040212d 	.word	0x0040212d
  4023c8:	20008700 	.word	0x20008700
  4023cc:	00400d39 	.word	0x00400d39
  4023d0:	00402155 	.word	0x00402155
  4023d4:	20008718 	.word	0x20008718
  4023d8:	00400dd1 	.word	0x00400dd1
  4023dc:	00400e69 	.word	0x00400e69
  4023e0:	004020b1 	.word	0x004020b1
  4023e4:	0040207d 	.word	0x0040207d
  4023e8:	00402119 	.word	0x00402119
  4023ec:	00402191 	.word	0x00402191
  4023f0:	00402141 	.word	0x00402141
  4023f4:	00402169 	.word	0x00402169

004023f8 <aux_toggle>:
	if (page_loop > 0){
		page_loop--;
	}
}

void aux_toggle(uint8_t button_row, uint8_t aux_encoders){
  4023f8:	b510      	push	{r4, lr}

	switch(aux_encoders) {
  4023fa:	29ef      	cmp	r1, #239	; 0xef
  4023fc:	d04a      	beq.n	402494 <aux_toggle+0x9c>
  4023fe:	d806      	bhi.n	40240e <aux_toggle+0x16>
  402400:	29bf      	cmp	r1, #191	; 0xbf
  402402:	d05d      	beq.n	4024c0 <aux_toggle+0xc8>
  402404:	29df      	cmp	r1, #223	; 0xdf
  402406:	d050      	beq.n	4024aa <aux_toggle+0xb2>
  402408:	297f      	cmp	r1, #127	; 0x7f
  40240a:	d16e      	bne.n	4024ea <aux_toggle+0xf2>
  40240c:	e063      	b.n	4024d6 <aux_toggle+0xde>
  40240e:	29fb      	cmp	r1, #251	; 0xfb
  402410:	d007      	beq.n	402422 <aux_toggle+0x2a>
  402412:	29fe      	cmp	r1, #254	; 0xfe
  402414:	d002      	beq.n	40241c <aux_toggle+0x24>
  402416:	29f7      	cmp	r1, #247	; 0xf7
  402418:	d167      	bne.n	4024ea <aux_toggle+0xf2>
  40241a:	e017      	b.n	40244c <aux_toggle+0x54>
		case 254 :
			//change bpm inc/dec scale
			bpm_toggle();
  40241c:	4b33      	ldr	r3, [pc, #204]	; (4024ec <aux_toggle+0xf4>)
  40241e:	4798      	blx	r3
			break;
  402420:	bd10      	pop	{r4, pc}
		case 253 :
			//toggle resolution or scale?
			break;
		case 251 :
			//toggle between page & loop variables
			page_or_loop = abs(page_or_loop - 1);
  402422:	4a33      	ldr	r2, [pc, #204]	; (4024f0 <aux_toggle+0xf8>)
  402424:	7813      	ldrb	r3, [r2, #0]
  402426:	3b01      	subs	r3, #1
  402428:	2b00      	cmp	r3, #0
  40242a:	bfb8      	it	lt
  40242c:	425b      	neglt	r3, r3
  40242e:	b2db      	uxtb	r3, r3
  402430:	7013      	strb	r3, [r2, #0]
			if (page_or_loop == 0){
  402432:	b923      	cbnz	r3, 40243e <aux_toggle+0x46>
				page_display(display_page);
  402434:	4b2f      	ldr	r3, [pc, #188]	; (4024f4 <aux_toggle+0xfc>)
  402436:	7818      	ldrb	r0, [r3, #0]
  402438:	4b2f      	ldr	r3, [pc, #188]	; (4024f8 <aux_toggle+0x100>)
  40243a:	4798      	blx	r3
  40243c:	bd10      	pop	{r4, pc}
			}
			else if (page_or_loop == 1){
  40243e:	2b01      	cmp	r3, #1
  402440:	d153      	bne.n	4024ea <aux_toggle+0xf2>
				loop_display(page_loop);
  402442:	4b2e      	ldr	r3, [pc, #184]	; (4024fc <aux_toggle+0x104>)
  402444:	7818      	ldrb	r0, [r3, #0]
  402446:	4b2e      	ldr	r3, [pc, #184]	; (402500 <aux_toggle+0x108>)
  402448:	4798      	blx	r3
  40244a:	bd10      	pop	{r4, pc}
			}
			break;
		case 247 :
			if (pattern_clr == 0){
  40244c:	4b2d      	ldr	r3, [pc, #180]	; (402504 <aux_toggle+0x10c>)
  40244e:	781b      	ldrb	r3, [r3, #0]
  402450:	b963      	cbnz	r3, 40246c <aux_toggle+0x74>
				pattern_clr = 1;					//set pattern clear
  402452:	2201      	movs	r2, #1
  402454:	4b2b      	ldr	r3, [pc, #172]	; (402504 <aux_toggle+0x10c>)
  402456:	701a      	strb	r2, [r3, #0]
				REG_TC0_CCR1 |= TC_CCR_CLKEN | TC_CCR_SWTRG;		//start 2 sec timer
  402458:	4a2b      	ldr	r2, [pc, #172]	; (402508 <aux_toggle+0x110>)
  40245a:	6813      	ldr	r3, [r2, #0]
  40245c:	f043 0305 	orr.w	r3, r3, #5
  402460:	6013      	str	r3, [r2, #0]
				clr_pattern_display(curr_pattern);	//output clear message to display
  402462:	4b2a      	ldr	r3, [pc, #168]	; (40250c <aux_toggle+0x114>)
  402464:	7818      	ldrb	r0, [r3, #0]
  402466:	4b2a      	ldr	r3, [pc, #168]	; (402510 <aux_toggle+0x118>)
  402468:	4798      	blx	r3
  40246a:	bd10      	pop	{r4, pc}
			}
			else if (pattern_clr == 1){
  40246c:	2b01      	cmp	r3, #1
  40246e:	d13c      	bne.n	4024ea <aux_toggle+0xf2>
				note_overflow_count = 0;			//reset timer counter
  402470:	2300      	movs	r3, #0
  402472:	4a28      	ldr	r2, [pc, #160]	; (402514 <aux_toggle+0x11c>)
  402474:	8013      	strh	r3, [r2, #0]
				pattern_clr = 0;					//reset clear variable
  402476:	4a23      	ldr	r2, [pc, #140]	; (402504 <aux_toggle+0x10c>)
  402478:	7013      	strb	r3, [r2, #0]
				REG_TC0_CCR1 |= TC_CCR_CLKDIS;		//disable timer counter
  40247a:	4a23      	ldr	r2, [pc, #140]	; (402508 <aux_toggle+0x110>)
  40247c:	6813      	ldr	r3, [r2, #0]
  40247e:	f043 0302 	orr.w	r3, r3, #2
  402482:	6013      	str	r3, [r2, #0]
				notes_clear(curr_pattern);			//clear the current pattern
  402484:	4c21      	ldr	r4, [pc, #132]	; (40250c <aux_toggle+0x114>)
  402486:	7820      	ldrb	r0, [r4, #0]
  402488:	4b23      	ldr	r3, [pc, #140]	; (402518 <aux_toggle+0x120>)
  40248a:	4798      	blx	r3
				pattern_display(curr_pattern);		//return display to default
  40248c:	7820      	ldrb	r0, [r4, #0]
  40248e:	4b23      	ldr	r3, [pc, #140]	; (40251c <aux_toggle+0x124>)
  402490:	4798      	blx	r3
  402492:	bd10      	pop	{r4, pc}
			}
			break;
		case 239 :
			channel_mute[CHANNEL_1] = abs(channel_mute[CHANNEL_1] - 1);
  402494:	4a22      	ldr	r2, [pc, #136]	; (402520 <aux_toggle+0x128>)
  402496:	7813      	ldrb	r3, [r2, #0]
  402498:	3b01      	subs	r3, #1
  40249a:	2b00      	cmp	r3, #0
  40249c:	bfb8      	it	lt
  40249e:	425b      	neglt	r3, r3
  4024a0:	7013      	strb	r3, [r2, #0]
			DAC_write_gate_off(CHANNEL_1);
  4024a2:	2000      	movs	r0, #0
  4024a4:	4b1f      	ldr	r3, [pc, #124]	; (402524 <aux_toggle+0x12c>)
  4024a6:	4798      	blx	r3
			break;
  4024a8:	bd10      	pop	{r4, pc}
		case 223 :
			channel_mute[CHANNEL_2] = abs(channel_mute[CHANNEL_2] - 1);
  4024aa:	4a1d      	ldr	r2, [pc, #116]	; (402520 <aux_toggle+0x128>)
  4024ac:	7853      	ldrb	r3, [r2, #1]
  4024ae:	3b01      	subs	r3, #1
  4024b0:	2b00      	cmp	r3, #0
  4024b2:	bfb8      	it	lt
  4024b4:	425b      	neglt	r3, r3
  4024b6:	7053      	strb	r3, [r2, #1]
			DAC_write_gate_off(CHANNEL_2);
  4024b8:	2001      	movs	r0, #1
  4024ba:	4b1a      	ldr	r3, [pc, #104]	; (402524 <aux_toggle+0x12c>)
  4024bc:	4798      	blx	r3
			break;
  4024be:	bd10      	pop	{r4, pc}
		case 191 :
			channel_mute[CHANNEL_3] = abs(channel_mute[CHANNEL_3] - 1);
  4024c0:	4a17      	ldr	r2, [pc, #92]	; (402520 <aux_toggle+0x128>)
  4024c2:	7893      	ldrb	r3, [r2, #2]
  4024c4:	3b01      	subs	r3, #1
  4024c6:	2b00      	cmp	r3, #0
  4024c8:	bfb8      	it	lt
  4024ca:	425b      	neglt	r3, r3
  4024cc:	7093      	strb	r3, [r2, #2]
			DAC_write_gate_off(CHANNEL_3);
  4024ce:	2002      	movs	r0, #2
  4024d0:	4b14      	ldr	r3, [pc, #80]	; (402524 <aux_toggle+0x12c>)
  4024d2:	4798      	blx	r3
			break;
  4024d4:	bd10      	pop	{r4, pc}
		case 127 :
			channel_mute[CHANNEL_4] = abs(channel_mute[CHANNEL_4] - 1);
  4024d6:	4a12      	ldr	r2, [pc, #72]	; (402520 <aux_toggle+0x128>)
  4024d8:	78d3      	ldrb	r3, [r2, #3]
  4024da:	3b01      	subs	r3, #1
  4024dc:	2b00      	cmp	r3, #0
  4024de:	bfb8      	it	lt
  4024e0:	425b      	neglt	r3, r3
  4024e2:	70d3      	strb	r3, [r2, #3]
			DAC_write_gate_off(CHANNEL_4);
  4024e4:	2003      	movs	r0, #3
  4024e6:	4b0f      	ldr	r3, [pc, #60]	; (402524 <aux_toggle+0x12c>)
  4024e8:	4798      	blx	r3
  4024ea:	bd10      	pop	{r4, pc}
  4024ec:	004020cd 	.word	0x004020cd
  4024f0:	2000873c 	.word	0x2000873c
  4024f4:	20008724 	.word	0x20008724
  4024f8:	00400ca1 	.word	0x00400ca1
  4024fc:	2000870c 	.word	0x2000870c
  402500:	00400ced 	.word	0x00400ced
  402504:	20008731 	.word	0x20008731
  402508:	40010040 	.word	0x40010040
  40250c:	20008700 	.word	0x20008700
  402510:	00400d85 	.word	0x00400d85
  402514:	20008702 	.word	0x20008702
  402518:	00402ed5 	.word	0x00402ed5
  40251c:	00400d39 	.word	0x00400d39
  402520:	20008720 	.word	0x20008720
  402524:	00400435 	.word	0x00400435

00402528 <init_sequencer_controls>:

}
}


 void init_sequencer_controls(){
  402528:	b470      	push	{r4, r5, r6}

	bpm = 120;
  40252a:	2278      	movs	r2, #120	; 0x78
  40252c:	4ba8      	ldr	r3, [pc, #672]	; (4027d0 <init_sequencer_controls+0x2a8>)
  40252e:	801a      	strh	r2, [r3, #0]
	bpm_adjust = 1;
  402530:	2201      	movs	r2, #1
  402532:	4ba8      	ldr	r3, [pc, #672]	; (4027d4 <init_sequencer_controls+0x2ac>)
  402534:	701a      	strb	r2, [r3, #0]

	page_or_loop = 0;
  402536:	2300      	movs	r3, #0
  402538:	4aa7      	ldr	r2, [pc, #668]	; (4027d8 <init_sequencer_controls+0x2b0>)
  40253a:	7013      	strb	r3, [r2, #0]
	pattern_clr = 0;
  40253c:	4aa7      	ldr	r2, [pc, #668]	; (4027dc <init_sequencer_controls+0x2b4>)
  40253e:	7013      	strb	r3, [r2, #0]
	pause = 0;
  402540:	4aa7      	ldr	r2, [pc, #668]	; (4027e0 <init_sequencer_controls+0x2b8>)
  402542:	7013      	strb	r3, [r2, #0]
	pause_count = 0;
  402544:	4aa7      	ldr	r2, [pc, #668]	; (4027e4 <init_sequencer_controls+0x2bc>)
  402546:	7013      	strb	r3, [r2, #0]

	A_seq = 0;
  402548:	4aa7      	ldr	r2, [pc, #668]	; (4027e8 <init_sequencer_controls+0x2c0>)
  40254a:	7013      	strb	r3, [r2, #0]
	B_seq = 0;
  40254c:	4aa7      	ldr	r2, [pc, #668]	; (4027ec <init_sequencer_controls+0x2c4>)
  40254e:	7013      	strb	r3, [r2, #0]

	//enable clock for PIOA
	REG_PMC_PCER0 |= PMC_PCER0_PID11;
  402550:	4aa7      	ldr	r2, [pc, #668]	; (4027f0 <init_sequencer_controls+0x2c8>)
  402552:	6813      	ldr	r3, [r2, #0]
  402554:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  402558:	6013      	str	r3, [r2, #0]

	/**************			CONFIGURE PAUSE/PLAY BUTTON				**************/
	//set up PA2 as pause/play interrupt pin
	REG_PIOA_PER |= PIO_PER_P2; //enable PIO controller
  40255a:	4da6      	ldr	r5, [pc, #664]	; (4027f4 <init_sequencer_controls+0x2cc>)
  40255c:	682b      	ldr	r3, [r5, #0]
  40255e:	f043 0304 	orr.w	r3, r3, #4
  402562:	602b      	str	r3, [r5, #0]
	REG_PIOA_ODR |= PIO_ODR_P2; //disable output
  402564:	4ca4      	ldr	r4, [pc, #656]	; (4027f8 <init_sequencer_controls+0x2d0>)
  402566:	6823      	ldr	r3, [r4, #0]
  402568:	f043 0304 	orr.w	r3, r3, #4
  40256c:	6023      	str	r3, [r4, #0]
	REG_PIOA_PPDDR |= PIO_PPDDR_P2; //disable pull-down resistor
  40256e:	48a3      	ldr	r0, [pc, #652]	; (4027fc <init_sequencer_controls+0x2d4>)
  402570:	6803      	ldr	r3, [r0, #0]
  402572:	f043 0304 	orr.w	r3, r3, #4
  402576:	6003      	str	r3, [r0, #0]
	REG_PIOA_PUER |= PIO_PUER_P2;	//enable pull-up resistor
  402578:	4ba1      	ldr	r3, [pc, #644]	; (402800 <init_sequencer_controls+0x2d8>)
  40257a:	681a      	ldr	r2, [r3, #0]
  40257c:	f042 0204 	orr.w	r2, r2, #4
  402580:	601a      	str	r2, [r3, #0]

	//set PA18 as pause/play LED output
	REG_PIOA_OER |= PIO_OER_P18;
  402582:	49a0      	ldr	r1, [pc, #640]	; (402804 <init_sequencer_controls+0x2dc>)
  402584:	680a      	ldr	r2, [r1, #0]
  402586:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
  40258a:	600a      	str	r2, [r1, #0]
	REG_PIOA_SODR |= PIO_SODR_P18; 
  40258c:	3120      	adds	r1, #32
  40258e:	680a      	ldr	r2, [r1, #0]
  402590:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
  402594:	600a      	str	r2, [r1, #0]

	/**************			CONFIGURE 8 STEP AUX ENCODERS			**************/

	//Set up PA0 as AUX ENC 0 INPUT A
	REG_PIOA_PER |= PIO_PER_P0; //enable PIO controller
  402596:	682a      	ldr	r2, [r5, #0]
  402598:	f042 0201 	orr.w	r2, r2, #1
  40259c:	602a      	str	r2, [r5, #0]
	REG_PIOA_ODR |= PIO_ODR_P0; //disable output
  40259e:	6822      	ldr	r2, [r4, #0]
  4025a0:	f042 0201 	orr.w	r2, r2, #1
  4025a4:	6022      	str	r2, [r4, #0]
	REG_PIOA_PPDDR |= PIO_PPDDR_P0; //disable pull-down resistor
  4025a6:	6802      	ldr	r2, [r0, #0]
  4025a8:	f042 0201 	orr.w	r2, r2, #1
  4025ac:	6002      	str	r2, [r0, #0]
	REG_PIOA_PUER |= PIO_PUER_P0;	//enable pull-up resistor
  4025ae:	681a      	ldr	r2, [r3, #0]
  4025b0:	f042 0201 	orr.w	r2, r2, #1
  4025b4:	601a      	str	r2, [r3, #0]
	REG_PIOA_IFSCER |= PIO_IFSCER_P0; //turn on slow clock debounce
  4025b6:	3154      	adds	r1, #84	; 0x54
  4025b8:	680a      	ldr	r2, [r1, #0]
  4025ba:	f042 0201 	orr.w	r2, r2, #1
  4025be:	600a      	str	r2, [r1, #0]
	REG_PIOA_IFER |= PIO_IFER_P0;	//start debounce filter
  4025c0:	4a91      	ldr	r2, [pc, #580]	; (402808 <init_sequencer_controls+0x2e0>)
  4025c2:	6816      	ldr	r6, [r2, #0]
  4025c4:	f046 0601 	orr.w	r6, r6, #1
  4025c8:	6016      	str	r6, [r2, #0]

	//Set up PA1 as AUX ENC 0 INPUT B
	REG_PIOA_PER |= PIO_PER_P1; //enable PIO controller
  4025ca:	682e      	ldr	r6, [r5, #0]
  4025cc:	f046 0602 	orr.w	r6, r6, #2
  4025d0:	602e      	str	r6, [r5, #0]
	REG_PIOA_ODR |= PIO_ODR_P1; //disable output
  4025d2:	6826      	ldr	r6, [r4, #0]
  4025d4:	f046 0602 	orr.w	r6, r6, #2
  4025d8:	6026      	str	r6, [r4, #0]
	REG_PIOA_PPDDR |= PIO_PPDDR_P1; //disable pull-down resistor
  4025da:	6806      	ldr	r6, [r0, #0]
  4025dc:	f046 0602 	orr.w	r6, r6, #2
  4025e0:	6006      	str	r6, [r0, #0]
	REG_PIOA_PUER |= PIO_PUER_P1;	//enable pull-up resistor
  4025e2:	681e      	ldr	r6, [r3, #0]
  4025e4:	f046 0602 	orr.w	r6, r6, #2
  4025e8:	601e      	str	r6, [r3, #0]
	REG_PIOA_IFSCER |= PIO_IFSCER_P1; //turn on slow clock debounce
  4025ea:	680e      	ldr	r6, [r1, #0]
  4025ec:	f046 0602 	orr.w	r6, r6, #2
  4025f0:	600e      	str	r6, [r1, #0]
	REG_PIOA_IFER |= PIO_IFER_P1;	//start debounce filter
  4025f2:	6816      	ldr	r6, [r2, #0]
  4025f4:	f046 0602 	orr.w	r6, r6, #2
  4025f8:	6016      	str	r6, [r2, #0]



	//Set up PA6 as AUX ENC 1 INPUT A
	REG_PIOA_PER |= PIO_PER_P6; //enable PIO controller
  4025fa:	682e      	ldr	r6, [r5, #0]
  4025fc:	f046 0640 	orr.w	r6, r6, #64	; 0x40
  402600:	602e      	str	r6, [r5, #0]
	REG_PIOA_ODR |= PIO_ODR_P6; //disable output
  402602:	6826      	ldr	r6, [r4, #0]
  402604:	f046 0640 	orr.w	r6, r6, #64	; 0x40
  402608:	6026      	str	r6, [r4, #0]
	REG_PIOA_PPDDR |= PIO_PPDDR_P6; //disable pull-down resistor
  40260a:	6806      	ldr	r6, [r0, #0]
  40260c:	f046 0640 	orr.w	r6, r6, #64	; 0x40
  402610:	6006      	str	r6, [r0, #0]
	REG_PIOA_PUER |= PIO_PUER_P6;	//enable pull-up resistor
  402612:	681e      	ldr	r6, [r3, #0]
  402614:	f046 0640 	orr.w	r6, r6, #64	; 0x40
  402618:	601e      	str	r6, [r3, #0]
	REG_PIOA_IFSCER |= PIO_IFSCER_P6; //turn on slow clock debounce
  40261a:	680e      	ldr	r6, [r1, #0]
  40261c:	f046 0640 	orr.w	r6, r6, #64	; 0x40
  402620:	600e      	str	r6, [r1, #0]
	REG_PIOA_IFER |= PIO_IFER_P6;	//start debounce filter
  402622:	6816      	ldr	r6, [r2, #0]
  402624:	f046 0640 	orr.w	r6, r6, #64	; 0x40
  402628:	6016      	str	r6, [r2, #0]

	//Set up PA7 as AUX ENC 1 INPUT B
	REG_PIOA_PER |= PIO_PER_P7; //enable PIO controller
  40262a:	682e      	ldr	r6, [r5, #0]
  40262c:	f046 0680 	orr.w	r6, r6, #128	; 0x80
  402630:	602e      	str	r6, [r5, #0]
	REG_PIOA_ODR |= PIO_ODR_P7; //disable output
  402632:	6826      	ldr	r6, [r4, #0]
  402634:	f046 0680 	orr.w	r6, r6, #128	; 0x80
  402638:	6026      	str	r6, [r4, #0]
	REG_PIOA_PPDDR |= PIO_PPDDR_P7; //disable pull-down resistor
  40263a:	6806      	ldr	r6, [r0, #0]
  40263c:	f046 0680 	orr.w	r6, r6, #128	; 0x80
  402640:	6006      	str	r6, [r0, #0]
	REG_PIOA_PUER |= PIO_PUER_P7;	//enable pull-up resistor
  402642:	681e      	ldr	r6, [r3, #0]
  402644:	f046 0680 	orr.w	r6, r6, #128	; 0x80
  402648:	601e      	str	r6, [r3, #0]
	REG_PIOA_IFSCER |= PIO_IFSCER_P7; //turn on slow clock debounce
  40264a:	680e      	ldr	r6, [r1, #0]
  40264c:	f046 0680 	orr.w	r6, r6, #128	; 0x80
  402650:	600e      	str	r6, [r1, #0]
	REG_PIOA_IFER |= PIO_IFER_P7;	//start debounce filter
  402652:	6816      	ldr	r6, [r2, #0]
  402654:	f046 0680 	orr.w	r6, r6, #128	; 0x80
  402658:	6016      	str	r6, [r2, #0]


	
	//Set up PA8 as AUX ENC 2 INPUT A
	REG_PIOA_PER |= PIO_PER_P8; //enable PIO controller
  40265a:	682e      	ldr	r6, [r5, #0]
  40265c:	f446 7680 	orr.w	r6, r6, #256	; 0x100
  402660:	602e      	str	r6, [r5, #0]
	REG_PIOA_ODR |= PIO_ODR_P8; //disable output
  402662:	6826      	ldr	r6, [r4, #0]
  402664:	f446 7680 	orr.w	r6, r6, #256	; 0x100
  402668:	6026      	str	r6, [r4, #0]
	REG_PIOA_PPDDR |= PIO_PPDDR_P8; //disable pull-down resistor
  40266a:	6806      	ldr	r6, [r0, #0]
  40266c:	f446 7680 	orr.w	r6, r6, #256	; 0x100
  402670:	6006      	str	r6, [r0, #0]
	REG_PIOA_PUER |= PIO_PUER_P8;	//enable pull-up resistor
  402672:	681e      	ldr	r6, [r3, #0]
  402674:	f446 7680 	orr.w	r6, r6, #256	; 0x100
  402678:	601e      	str	r6, [r3, #0]
	REG_PIOA_IFSCER |= PIO_IFSCER_P8; //turn on slow clock debounce
  40267a:	680e      	ldr	r6, [r1, #0]
  40267c:	f446 7680 	orr.w	r6, r6, #256	; 0x100
  402680:	600e      	str	r6, [r1, #0]
	REG_PIOA_IFER |= PIO_IFER_P8;	//start debounce filter
  402682:	6816      	ldr	r6, [r2, #0]
  402684:	f446 7680 	orr.w	r6, r6, #256	; 0x100
  402688:	6016      	str	r6, [r2, #0]

	//Set up PA9 as AUX ENC 2 INPUT B
	REG_PIOA_PER |= PIO_PER_P9; //enable PIO controller
  40268a:	682e      	ldr	r6, [r5, #0]
  40268c:	f446 7600 	orr.w	r6, r6, #512	; 0x200
  402690:	602e      	str	r6, [r5, #0]
	REG_PIOA_ODR |= PIO_ODR_P9; //disable output
  402692:	6826      	ldr	r6, [r4, #0]
  402694:	f446 7600 	orr.w	r6, r6, #512	; 0x200
  402698:	6026      	str	r6, [r4, #0]
	REG_PIOA_PPDDR |= PIO_PPDDR_P9; //disable pull-down resistor
  40269a:	6806      	ldr	r6, [r0, #0]
  40269c:	f446 7600 	orr.w	r6, r6, #512	; 0x200
  4026a0:	6006      	str	r6, [r0, #0]
	REG_PIOA_PUER |= PIO_PUER_P9;	//enable pull-up resistor
  4026a2:	681e      	ldr	r6, [r3, #0]
  4026a4:	f446 7600 	orr.w	r6, r6, #512	; 0x200
  4026a8:	601e      	str	r6, [r3, #0]
	REG_PIOA_IFSCER |= PIO_IFSCER_P9; //turn on slow clock debounce
  4026aa:	680e      	ldr	r6, [r1, #0]
  4026ac:	f446 7600 	orr.w	r6, r6, #512	; 0x200
  4026b0:	600e      	str	r6, [r1, #0]
	REG_PIOA_IFER |= PIO_IFER_P9;	//start debounce filter
  4026b2:	6816      	ldr	r6, [r2, #0]
  4026b4:	f446 7600 	orr.w	r6, r6, #512	; 0x200
  4026b8:	6016      	str	r6, [r2, #0]



	//Set up PA16 as AUX ENC 3 INPUT A
	REG_PIOA_PER |= PIO_PER_P16; //enable PIO controller
  4026ba:	682e      	ldr	r6, [r5, #0]
  4026bc:	f446 3680 	orr.w	r6, r6, #65536	; 0x10000
  4026c0:	602e      	str	r6, [r5, #0]
	REG_PIOA_ODR |= PIO_ODR_P16; //disable output
  4026c2:	6826      	ldr	r6, [r4, #0]
  4026c4:	f446 3680 	orr.w	r6, r6, #65536	; 0x10000
  4026c8:	6026      	str	r6, [r4, #0]
	REG_PIOA_PPDDR |= PIO_PPDDR_P16; //disable pull-down resistor
  4026ca:	6806      	ldr	r6, [r0, #0]
  4026cc:	f446 3680 	orr.w	r6, r6, #65536	; 0x10000
  4026d0:	6006      	str	r6, [r0, #0]
	REG_PIOA_PUER |= PIO_PUER_P16;	//enable pull-up resistor
  4026d2:	681e      	ldr	r6, [r3, #0]
  4026d4:	f446 3680 	orr.w	r6, r6, #65536	; 0x10000
  4026d8:	601e      	str	r6, [r3, #0]
	REG_PIOA_IFSCER |= PIO_IFSCER_P16; //turn on slow clock debounce
  4026da:	680e      	ldr	r6, [r1, #0]
  4026dc:	f446 3680 	orr.w	r6, r6, #65536	; 0x10000
  4026e0:	600e      	str	r6, [r1, #0]
	REG_PIOA_IFER |= PIO_IFER_P16;	//start debounce filter
  4026e2:	6816      	ldr	r6, [r2, #0]
  4026e4:	f446 3680 	orr.w	r6, r6, #65536	; 0x10000
  4026e8:	6016      	str	r6, [r2, #0]

	//Set up PA17 as AUX ENC 3 INPUT B
	REG_PIOA_PER |= PIO_PER_P17; //enable PIO controller
  4026ea:	682e      	ldr	r6, [r5, #0]
  4026ec:	f446 3600 	orr.w	r6, r6, #131072	; 0x20000
  4026f0:	602e      	str	r6, [r5, #0]
	REG_PIOA_ODR |= PIO_ODR_P17; //disable output
  4026f2:	6826      	ldr	r6, [r4, #0]
  4026f4:	f446 3600 	orr.w	r6, r6, #131072	; 0x20000
  4026f8:	6026      	str	r6, [r4, #0]
	REG_PIOA_PPDDR |= PIO_PPDDR_P17; //disable pull-down resistor
  4026fa:	6806      	ldr	r6, [r0, #0]
  4026fc:	f446 3600 	orr.w	r6, r6, #131072	; 0x20000
  402700:	6006      	str	r6, [r0, #0]
	REG_PIOA_PUER |= PIO_PUER_P17;	//enable pull-up resistor
  402702:	681e      	ldr	r6, [r3, #0]
  402704:	f446 3600 	orr.w	r6, r6, #131072	; 0x20000
  402708:	601e      	str	r6, [r3, #0]
	REG_PIOA_IFSCER |= PIO_IFSCER_P17; //turn on slow clock debounce
  40270a:	680e      	ldr	r6, [r1, #0]
  40270c:	f446 3600 	orr.w	r6, r6, #131072	; 0x20000
  402710:	600e      	str	r6, [r1, #0]
	REG_PIOA_IFER |= PIO_IFER_P17;	//start debounce filter
  402712:	6816      	ldr	r6, [r2, #0]
  402714:	f446 3600 	orr.w	r6, r6, #131072	; 0x20000
  402718:	6016      	str	r6, [r2, #0]



	//Set up PA20 as AUX ENC 4 INPUT A
	REG_PIOA_PER |= PIO_PER_P20; //enable PIO controller
  40271a:	682e      	ldr	r6, [r5, #0]
  40271c:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
  402720:	602e      	str	r6, [r5, #0]
	REG_PIOA_ODR |= PIO_ODR_P20; //disable output
  402722:	6826      	ldr	r6, [r4, #0]
  402724:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
  402728:	6026      	str	r6, [r4, #0]
	REG_PIOA_PPDDR |= PIO_PPDDR_P20; //disable pull-down resistor
  40272a:	6806      	ldr	r6, [r0, #0]
  40272c:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
  402730:	6006      	str	r6, [r0, #0]
	REG_PIOA_PUER |= PIO_PUER_P20;	//enable pull-up resistor
  402732:	681e      	ldr	r6, [r3, #0]
  402734:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
  402738:	601e      	str	r6, [r3, #0]
	REG_PIOA_IFSCER |= PIO_IFSCER_P20; //turn on slow clock debounce
  40273a:	680e      	ldr	r6, [r1, #0]
  40273c:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
  402740:	600e      	str	r6, [r1, #0]
	REG_PIOA_IFER |= PIO_IFER_P20;	//start debounce filter
  402742:	6816      	ldr	r6, [r2, #0]
  402744:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
  402748:	6016      	str	r6, [r2, #0]

	//Set up PA21 as AUX ENC 4 INPUT B
	REG_PIOA_PER |= PIO_PER_P21; //enable PIO controller
  40274a:	682e      	ldr	r6, [r5, #0]
  40274c:	f446 1600 	orr.w	r6, r6, #2097152	; 0x200000
  402750:	602e      	str	r6, [r5, #0]
	REG_PIOA_ODR |= PIO_ODR_P21; //disable output
  402752:	6826      	ldr	r6, [r4, #0]
  402754:	f446 1600 	orr.w	r6, r6, #2097152	; 0x200000
  402758:	6026      	str	r6, [r4, #0]
	REG_PIOA_PPDDR |= PIO_PPDDR_P21; //disable pull-down resistor
  40275a:	6806      	ldr	r6, [r0, #0]
  40275c:	f446 1600 	orr.w	r6, r6, #2097152	; 0x200000
  402760:	6006      	str	r6, [r0, #0]
	REG_PIOA_PUER |= PIO_PUER_P21;	//enable pull-up resistor
  402762:	681e      	ldr	r6, [r3, #0]
  402764:	f446 1600 	orr.w	r6, r6, #2097152	; 0x200000
  402768:	601e      	str	r6, [r3, #0]
	REG_PIOA_IFSCER |= PIO_IFSCER_P21; //turn on slow clock debounce
  40276a:	680e      	ldr	r6, [r1, #0]
  40276c:	f446 1600 	orr.w	r6, r6, #2097152	; 0x200000
  402770:	600e      	str	r6, [r1, #0]
	REG_PIOA_IFER |= PIO_IFER_P21;	//start debounce filter
  402772:	6816      	ldr	r6, [r2, #0]
  402774:	f446 1600 	orr.w	r6, r6, #2097152	; 0x200000
  402778:	6016      	str	r6, [r2, #0]



	//Set up PA22 as AUX ENC 5 INPUT A
	REG_PIOA_PER |= PIO_PER_P22; //enable PIO controller
  40277a:	682e      	ldr	r6, [r5, #0]
  40277c:	f446 0680 	orr.w	r6, r6, #4194304	; 0x400000
  402780:	602e      	str	r6, [r5, #0]
	REG_PIOA_ODR |= PIO_ODR_P22; //disable output
  402782:	6826      	ldr	r6, [r4, #0]
  402784:	f446 0680 	orr.w	r6, r6, #4194304	; 0x400000
  402788:	6026      	str	r6, [r4, #0]
	REG_PIOA_PPDDR |= PIO_PPDDR_P22; //disable pull-down resistor
  40278a:	6806      	ldr	r6, [r0, #0]
  40278c:	f446 0680 	orr.w	r6, r6, #4194304	; 0x400000
  402790:	6006      	str	r6, [r0, #0]
	REG_PIOA_PUER |= PIO_PUER_P22;	//enable pull-up resistor
  402792:	681e      	ldr	r6, [r3, #0]
  402794:	f446 0680 	orr.w	r6, r6, #4194304	; 0x400000
  402798:	601e      	str	r6, [r3, #0]
	REG_PIOA_IFSCER |= PIO_IFSCER_P22; //turn on slow clock debounce
  40279a:	680e      	ldr	r6, [r1, #0]
  40279c:	f446 0680 	orr.w	r6, r6, #4194304	; 0x400000
  4027a0:	600e      	str	r6, [r1, #0]
	REG_PIOA_IFER |= PIO_IFER_P22;	//start debounce filter
  4027a2:	6816      	ldr	r6, [r2, #0]
  4027a4:	f446 0680 	orr.w	r6, r6, #4194304	; 0x400000
  4027a8:	6016      	str	r6, [r2, #0]

	//Set up PA23 as AUX ENC 5 INPUT B
	REG_PIOA_PER |= PIO_PER_P23; //enable PIO controller
  4027aa:	682e      	ldr	r6, [r5, #0]
  4027ac:	f446 0600 	orr.w	r6, r6, #8388608	; 0x800000
  4027b0:	602e      	str	r6, [r5, #0]
	REG_PIOA_ODR |= PIO_ODR_P23; //disable output
  4027b2:	6826      	ldr	r6, [r4, #0]
  4027b4:	f446 0600 	orr.w	r6, r6, #8388608	; 0x800000
  4027b8:	6026      	str	r6, [r4, #0]
	REG_PIOA_PPDDR |= PIO_PPDDR_P23; //disable pull-down resistor
  4027ba:	6806      	ldr	r6, [r0, #0]
  4027bc:	f446 0600 	orr.w	r6, r6, #8388608	; 0x800000
  4027c0:	6006      	str	r6, [r0, #0]
	REG_PIOA_PUER |= PIO_PUER_P23;	//enable pull-up resistor
  4027c2:	681e      	ldr	r6, [r3, #0]
  4027c4:	f446 0600 	orr.w	r6, r6, #8388608	; 0x800000
  4027c8:	601e      	str	r6, [r3, #0]
	REG_PIOA_IFSCER |= PIO_IFSCER_P23; //turn on slow clock debounce
  4027ca:	680e      	ldr	r6, [r1, #0]
  4027cc:	e01e      	b.n	40280c <init_sequencer_controls+0x2e4>
  4027ce:	bf00      	nop
  4027d0:	20008736 	.word	0x20008736
  4027d4:	20008732 	.word	0x20008732
  4027d8:	2000873c 	.word	0x2000873c
  4027dc:	20008731 	.word	0x20008731
  4027e0:	20008730 	.word	0x20008730
  4027e4:	20008734 	.word	0x20008734
  4027e8:	20008733 	.word	0x20008733
  4027ec:	2000873d 	.word	0x2000873d
  4027f0:	400e0410 	.word	0x400e0410
  4027f4:	400e0e00 	.word	0x400e0e00
  4027f8:	400e0e14 	.word	0x400e0e14
  4027fc:	400e0e90 	.word	0x400e0e90
  402800:	400e0e64 	.word	0x400e0e64
  402804:	400e0e10 	.word	0x400e0e10
  402808:	400e0e20 	.word	0x400e0e20
  40280c:	f446 0600 	orr.w	r6, r6, #8388608	; 0x800000
  402810:	600e      	str	r6, [r1, #0]
	REG_PIOA_IFER |= PIO_IFER_P23;	//start debounce filter
  402812:	6816      	ldr	r6, [r2, #0]
  402814:	f446 0600 	orr.w	r6, r6, #8388608	; 0x800000
  402818:	6016      	str	r6, [r2, #0]



	//Set up PA24 as AUX ENC 6 INPUT A
	REG_PIOA_PER |= PIO_PER_P24; //enable PIO controller
  40281a:	682e      	ldr	r6, [r5, #0]
  40281c:	f046 7680 	orr.w	r6, r6, #16777216	; 0x1000000
  402820:	602e      	str	r6, [r5, #0]
	REG_PIOA_ODR |= PIO_ODR_P24; //disable output
  402822:	6826      	ldr	r6, [r4, #0]
  402824:	f046 7680 	orr.w	r6, r6, #16777216	; 0x1000000
  402828:	6026      	str	r6, [r4, #0]
	REG_PIOA_PPDDR |= PIO_PPDDR_P24; //disable pull-down resistor
  40282a:	6806      	ldr	r6, [r0, #0]
  40282c:	f046 7680 	orr.w	r6, r6, #16777216	; 0x1000000
  402830:	6006      	str	r6, [r0, #0]
	REG_PIOA_PUER |= PIO_PUER_P24;	//enable pull-up resistor
  402832:	681e      	ldr	r6, [r3, #0]
  402834:	f046 7680 	orr.w	r6, r6, #16777216	; 0x1000000
  402838:	601e      	str	r6, [r3, #0]
	REG_PIOA_IFSCER |= PIO_IFSCER_P24; //turn on slow clock debounce
  40283a:	680e      	ldr	r6, [r1, #0]
  40283c:	f046 7680 	orr.w	r6, r6, #16777216	; 0x1000000
  402840:	600e      	str	r6, [r1, #0]
	REG_PIOA_IFER |= PIO_IFER_P24;	//start debounce filter
  402842:	6816      	ldr	r6, [r2, #0]
  402844:	f046 7680 	orr.w	r6, r6, #16777216	; 0x1000000
  402848:	6016      	str	r6, [r2, #0]

	//Set up PA25 as AUX ENC 6 INPUT B
	REG_PIOA_PER |= PIO_PER_P25; //enable PIO controller
  40284a:	682e      	ldr	r6, [r5, #0]
  40284c:	f046 7600 	orr.w	r6, r6, #33554432	; 0x2000000
  402850:	602e      	str	r6, [r5, #0]
	REG_PIOA_ODR |= PIO_ODR_P25; //disable output
  402852:	6826      	ldr	r6, [r4, #0]
  402854:	f046 7600 	orr.w	r6, r6, #33554432	; 0x2000000
  402858:	6026      	str	r6, [r4, #0]
	REG_PIOA_PPDDR |= PIO_PPDDR_P25; //disable pull-down resistor
  40285a:	6806      	ldr	r6, [r0, #0]
  40285c:	f046 7600 	orr.w	r6, r6, #33554432	; 0x2000000
  402860:	6006      	str	r6, [r0, #0]
	REG_PIOA_PUER |= PIO_PUER_P25;	//enable pull-up resistor
  402862:	681e      	ldr	r6, [r3, #0]
  402864:	f046 7600 	orr.w	r6, r6, #33554432	; 0x2000000
  402868:	601e      	str	r6, [r3, #0]
	REG_PIOA_IFSCER |= PIO_IFSCER_P25; //turn on slow clock debounce
  40286a:	680e      	ldr	r6, [r1, #0]
  40286c:	f046 7600 	orr.w	r6, r6, #33554432	; 0x2000000
  402870:	600e      	str	r6, [r1, #0]
	REG_PIOA_IFER |= PIO_IFER_P25;	//start debounce filter
  402872:	6816      	ldr	r6, [r2, #0]
  402874:	f046 7600 	orr.w	r6, r6, #33554432	; 0x2000000
  402878:	6016      	str	r6, [r2, #0]



	//Set up PA26 as AUX ENC 7 INPUT A
	REG_PIOA_PER |= PIO_PER_P26; //enable PIO controller
  40287a:	682e      	ldr	r6, [r5, #0]
  40287c:	f046 6680 	orr.w	r6, r6, #67108864	; 0x4000000
  402880:	602e      	str	r6, [r5, #0]
	REG_PIOA_ODR |= PIO_ODR_P26; //disable output
  402882:	6826      	ldr	r6, [r4, #0]
  402884:	f046 6680 	orr.w	r6, r6, #67108864	; 0x4000000
  402888:	6026      	str	r6, [r4, #0]
	REG_PIOA_PPDDR |= PIO_PPDDR_P26; //disable pull-down resistor
  40288a:	6806      	ldr	r6, [r0, #0]
  40288c:	f046 6680 	orr.w	r6, r6, #67108864	; 0x4000000
  402890:	6006      	str	r6, [r0, #0]
	REG_PIOA_PUER |= PIO_PUER_P26;	//enable pull-up resistor
  402892:	681e      	ldr	r6, [r3, #0]
  402894:	f046 6680 	orr.w	r6, r6, #67108864	; 0x4000000
  402898:	601e      	str	r6, [r3, #0]
	REG_PIOA_IFSCER |= PIO_IFSCER_P26; //turn on slow clock debounce
  40289a:	680e      	ldr	r6, [r1, #0]
  40289c:	f046 6680 	orr.w	r6, r6, #67108864	; 0x4000000
  4028a0:	600e      	str	r6, [r1, #0]
	REG_PIOA_IFER |= PIO_IFER_P26;	//start debounce filter
  4028a2:	6816      	ldr	r6, [r2, #0]
  4028a4:	f046 6680 	orr.w	r6, r6, #67108864	; 0x4000000
  4028a8:	6016      	str	r6, [r2, #0]

	//Set up PA27 as AUX ENC 7 INPUT B
	REG_PIOA_PER |= PIO_PER_P27; //enable PIO controller
  4028aa:	682e      	ldr	r6, [r5, #0]
  4028ac:	f046 6600 	orr.w	r6, r6, #134217728	; 0x8000000
  4028b0:	602e      	str	r6, [r5, #0]
	REG_PIOA_ODR |= PIO_ODR_P27; //disable output
  4028b2:	6825      	ldr	r5, [r4, #0]
  4028b4:	f045 6500 	orr.w	r5, r5, #134217728	; 0x8000000
  4028b8:	6025      	str	r5, [r4, #0]
	REG_PIOA_PPDDR |= PIO_PPDDR_P27; //disable pull-down resistor
  4028ba:	6804      	ldr	r4, [r0, #0]
  4028bc:	f044 6400 	orr.w	r4, r4, #134217728	; 0x8000000
  4028c0:	6004      	str	r4, [r0, #0]
	REG_PIOA_PUER |= PIO_PUER_P27;	//enable pull-up resistor
  4028c2:	6818      	ldr	r0, [r3, #0]
  4028c4:	f040 6000 	orr.w	r0, r0, #134217728	; 0x8000000
  4028c8:	6018      	str	r0, [r3, #0]
	REG_PIOA_IFSCER |= PIO_IFSCER_P27; //turn on slow clock debounce
  4028ca:	680b      	ldr	r3, [r1, #0]
  4028cc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
  4028d0:	600b      	str	r3, [r1, #0]
	REG_PIOA_IFER |= PIO_IFER_P27;	//start debounce filter
  4028d2:	6813      	ldr	r3, [r2, #0]
  4028d4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
  4028d8:	6013      	str	r3, [r2, #0]


	/**************			CONFIGURE AUX ENCODER INTERRUPTS			**************/

	uint32_t flag_clear = REG_PIOA_ISR;	//clear left over interrupt flags
  4028da:	4b4d      	ldr	r3, [pc, #308]	; (402a10 <init_sequencer_controls+0x4e8>)
  4028dc:	681b      	ldr	r3, [r3, #0]

	//configure interrupt for pause/play button
	REG_PIOA_IER |= PIO_IER_P2;			//enable input rising edge interrupt
  4028de:	4b4d      	ldr	r3, [pc, #308]	; (402a14 <init_sequencer_controls+0x4ec>)
  4028e0:	6818      	ldr	r0, [r3, #0]
  4028e2:	f040 0004 	orr.w	r0, r0, #4
  4028e6:	6018      	str	r0, [r3, #0]
	REG_PIOA_FELLSR |= PIO_FELLSR_P2;
  4028e8:	4c4b      	ldr	r4, [pc, #300]	; (402a18 <init_sequencer_controls+0x4f0>)
  4028ea:	6820      	ldr	r0, [r4, #0]
  4028ec:	f040 0004 	orr.w	r0, r0, #4
  4028f0:	6020      	str	r0, [r4, #0]
	REG_PIOA_IFSCER |= PIO_IFSCER_P2; //turn on slow clock debounce
  4028f2:	6808      	ldr	r0, [r1, #0]
  4028f4:	f040 0004 	orr.w	r0, r0, #4
  4028f8:	6008      	str	r0, [r1, #0]
	REG_PIOA_IFER |= PIO_IFER_P2;	//start debounce filter
  4028fa:	6811      	ldr	r1, [r2, #0]
  4028fc:	f041 0104 	orr.w	r1, r1, #4
  402900:	6011      	str	r1, [r2, #0]

	//Enable interrupts for Aux Encoder 0
	REG_PIOA_IER |= PIO_IER_P0;			//enable input rising edge interrupt
  402902:	681a      	ldr	r2, [r3, #0]
  402904:	f042 0201 	orr.w	r2, r2, #1
  402908:	601a      	str	r2, [r3, #0]
	REG_PIOA_REHLSR |= PIO_REHLSR_P0;
  40290a:	4a44      	ldr	r2, [pc, #272]	; (402a1c <init_sequencer_controls+0x4f4>)
  40290c:	6811      	ldr	r1, [r2, #0]
  40290e:	f041 0101 	orr.w	r1, r1, #1
  402912:	6011      	str	r1, [r2, #0]
	REG_PIOA_IER |= PIO_IER_P1;			//enable input rising edge interrupt
  402914:	6819      	ldr	r1, [r3, #0]
  402916:	f041 0102 	orr.w	r1, r1, #2
  40291a:	6019      	str	r1, [r3, #0]
	REG_PIOA_REHLSR |= PIO_REHLSR_P1;
  40291c:	6811      	ldr	r1, [r2, #0]
  40291e:	f041 0102 	orr.w	r1, r1, #2
  402922:	6011      	str	r1, [r2, #0]

	//Enable interrupts for Aux Encoder 1
	REG_PIOA_IER |= PIO_IER_P6;			//enable input rising edge interrupt
  402924:	6819      	ldr	r1, [r3, #0]
  402926:	f041 0140 	orr.w	r1, r1, #64	; 0x40
  40292a:	6019      	str	r1, [r3, #0]
	REG_PIOA_REHLSR |= PIO_REHLSR_P6;
  40292c:	6811      	ldr	r1, [r2, #0]
  40292e:	f041 0140 	orr.w	r1, r1, #64	; 0x40
  402932:	6011      	str	r1, [r2, #0]
	REG_PIOA_IER |= PIO_IER_P7;			//enable input rising edge interrupt
  402934:	6819      	ldr	r1, [r3, #0]
  402936:	f041 0180 	orr.w	r1, r1, #128	; 0x80
  40293a:	6019      	str	r1, [r3, #0]
	REG_PIOA_REHLSR |= PIO_REHLSR_P7;
  40293c:	6811      	ldr	r1, [r2, #0]
  40293e:	f041 0180 	orr.w	r1, r1, #128	; 0x80
  402942:	6011      	str	r1, [r2, #0]

	//Enable interrupts for Aux Encoder 2
	REG_PIOA_IER |= PIO_IER_P8;			//enable input rising edge interrupt
  402944:	6819      	ldr	r1, [r3, #0]
  402946:	f441 7180 	orr.w	r1, r1, #256	; 0x100
  40294a:	6019      	str	r1, [r3, #0]
	REG_PIOA_REHLSR |= PIO_REHLSR_P8;
  40294c:	6811      	ldr	r1, [r2, #0]
  40294e:	f441 7180 	orr.w	r1, r1, #256	; 0x100
  402952:	6011      	str	r1, [r2, #0]
	REG_PIOA_IER |= PIO_IER_P9;			//enable input rising edge interrupt
  402954:	6819      	ldr	r1, [r3, #0]
  402956:	f441 7100 	orr.w	r1, r1, #512	; 0x200
  40295a:	6019      	str	r1, [r3, #0]
	REG_PIOA_REHLSR |= PIO_REHLSR_P9;
  40295c:	6811      	ldr	r1, [r2, #0]
  40295e:	f441 7100 	orr.w	r1, r1, #512	; 0x200
  402962:	6011      	str	r1, [r2, #0]

	//Enable interrupts for Aux Encoder 3
	REG_PIOA_IER |= PIO_IER_P16;			//enable input rising edge interrupt
  402964:	6819      	ldr	r1, [r3, #0]
  402966:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
  40296a:	6019      	str	r1, [r3, #0]
	REG_PIOA_REHLSR |= PIO_REHLSR_P16;
  40296c:	6811      	ldr	r1, [r2, #0]
  40296e:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
  402972:	6011      	str	r1, [r2, #0]
	REG_PIOA_IER |= PIO_IER_P17;			//enable input rising edge interrupt
  402974:	6819      	ldr	r1, [r3, #0]
  402976:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
  40297a:	6019      	str	r1, [r3, #0]
	REG_PIOA_REHLSR |= PIO_REHLSR_P17;
  40297c:	6811      	ldr	r1, [r2, #0]
  40297e:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
  402982:	6011      	str	r1, [r2, #0]

	//Enable interrupts for Aux Encoder 4
	REG_PIOA_IER |= PIO_IER_P20;			//enable input rising edge interrupt
  402984:	6819      	ldr	r1, [r3, #0]
  402986:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40298a:	6019      	str	r1, [r3, #0]
	REG_PIOA_REHLSR |= PIO_REHLSR_P20;
  40298c:	6811      	ldr	r1, [r2, #0]
  40298e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  402992:	6011      	str	r1, [r2, #0]
	REG_PIOA_IER |= PIO_IER_P21;			//enable input rising edge interrupt
  402994:	6819      	ldr	r1, [r3, #0]
  402996:	f441 1100 	orr.w	r1, r1, #2097152	; 0x200000
  40299a:	6019      	str	r1, [r3, #0]
	REG_PIOA_REHLSR |= PIO_REHLSR_P21;
  40299c:	6811      	ldr	r1, [r2, #0]
  40299e:	f441 1100 	orr.w	r1, r1, #2097152	; 0x200000
  4029a2:	6011      	str	r1, [r2, #0]

	//Enable interrupts for Aux Encoder 5
	REG_PIOA_IER |= PIO_IER_P22;			//enable input rising edge interrupt
  4029a4:	6819      	ldr	r1, [r3, #0]
  4029a6:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
  4029aa:	6019      	str	r1, [r3, #0]
	REG_PIOA_REHLSR |= PIO_REHLSR_P22;
  4029ac:	6811      	ldr	r1, [r2, #0]
  4029ae:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
  4029b2:	6011      	str	r1, [r2, #0]
	REG_PIOA_IER |= PIO_IER_P23;			//enable input rising edge interrupt
  4029b4:	6819      	ldr	r1, [r3, #0]
  4029b6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
  4029ba:	6019      	str	r1, [r3, #0]
	REG_PIOA_REHLSR |= PIO_REHLSR_P23;
  4029bc:	6811      	ldr	r1, [r2, #0]
  4029be:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
  4029c2:	6011      	str	r1, [r2, #0]

	//Enable interrupts for Aux Encoder 6
	REG_PIOA_IER |= PIO_IER_P24;			//enable input rising edge interrupt
  4029c4:	6819      	ldr	r1, [r3, #0]
  4029c6:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
  4029ca:	6019      	str	r1, [r3, #0]
	REG_PIOA_REHLSR |= PIO_REHLSR_P24;
  4029cc:	6811      	ldr	r1, [r2, #0]
  4029ce:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
  4029d2:	6011      	str	r1, [r2, #0]
	REG_PIOA_IER |= PIO_IER_P25;			//enable input rising edge interrupt
  4029d4:	6819      	ldr	r1, [r3, #0]
  4029d6:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
  4029da:	6019      	str	r1, [r3, #0]
	REG_PIOA_REHLSR |= PIO_REHLSR_P25;
  4029dc:	6811      	ldr	r1, [r2, #0]
  4029de:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
  4029e2:	6011      	str	r1, [r2, #0]

	//Enable interrupts for Aux Encoder 7
	REG_PIOA_IER |= PIO_IER_P26;			//enable input rising edge interrupt
  4029e4:	6819      	ldr	r1, [r3, #0]
  4029e6:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
  4029ea:	6019      	str	r1, [r3, #0]
	REG_PIOA_REHLSR |= PIO_REHLSR_P26;
  4029ec:	6811      	ldr	r1, [r2, #0]
  4029ee:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
  4029f2:	6011      	str	r1, [r2, #0]
	REG_PIOA_IER |= PIO_IER_P27;			//enable input rising edge interrupt
  4029f4:	6819      	ldr	r1, [r3, #0]
  4029f6:	f041 6100 	orr.w	r1, r1, #134217728	; 0x8000000
  4029fa:	6019      	str	r1, [r3, #0]
	REG_PIOA_REHLSR |= PIO_REHLSR_P27;
  4029fc:	6813      	ldr	r3, [r2, #0]
  4029fe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
  402a02:	6013      	str	r3, [r2, #0]
  402a04:	f44f 6200 	mov.w	r2, #2048	; 0x800
  402a08:	4b05      	ldr	r3, [pc, #20]	; (402a20 <init_sequencer_controls+0x4f8>)
  402a0a:	601a      	str	r2, [r3, #0]

	NVIC_EnableIRQ(PIOA_IRQn);			//enable PORT A interrupts


 }
  402a0c:	bc70      	pop	{r4, r5, r6}
  402a0e:	4770      	bx	lr
  402a10:	400e0e4c 	.word	0x400e0e4c
  402a14:	400e0e40 	.word	0x400e0e40
  402a18:	400e0ed0 	.word	0x400e0ed0
  402a1c:	400e0ed4 	.word	0x400e0ed4
  402a20:	e000e100 	.word	0xe000e100

00402a24 <PIOA_Handler>:


 void PIOA_Handler(){
  402a24:	b538      	push	{r3, r4, r5, lr}

	 uint32_t status = REG_PIOA_ISR;	//read PIOC interrupt status & clear interrupt flags
  402a26:	4b49      	ldr	r3, [pc, #292]	; (402b4c <PIOA_Handler+0x128>)
  402a28:	681b      	ldr	r3, [r3, #0]

	 //check if Aux Encoder 1 was rotated
	 if ( (status & PIO_ISR_P0) || (status & PIO_ISR_P1) ){
  402a2a:	f013 0f03 	tst.w	r3, #3
  402a2e:	d005      	beq.n	402a3c <PIOA_Handler+0x18>
		 control_direction(PIO_ODSR_P0, PIO_ODSR_P1, 0);
  402a30:	2200      	movs	r2, #0
  402a32:	2102      	movs	r1, #2
  402a34:	2001      	movs	r0, #1
  402a36:	4b46      	ldr	r3, [pc, #280]	; (402b50 <PIOA_Handler+0x12c>)
  402a38:	4798      	blx	r3
  402a3a:	bd38      	pop	{r3, r4, r5, pc}
	 }
	 
	 //check if Pause/Play button was pushed
	 else if ( (status & PIO_ISR_P2) ){
  402a3c:	f013 0f04 	tst.w	r3, #4
  402a40:	d036      	beq.n	402ab0 <PIOA_Handler+0x8c>
		pause_count++;
  402a42:	4a44      	ldr	r2, [pc, #272]	; (402b54 <PIOA_Handler+0x130>)
  402a44:	7813      	ldrb	r3, [r2, #0]
  402a46:	3301      	adds	r3, #1
  402a48:	b2db      	uxtb	r3, r3
  402a4a:	7013      	strb	r3, [r2, #0]
		if (pause_count == 2){
  402a4c:	2b02      	cmp	r3, #2
  402a4e:	d17c      	bne.n	402b4a <PIOA_Handler+0x126>
			if (pause == 0){
  402a50:	4b41      	ldr	r3, [pc, #260]	; (402b58 <PIOA_Handler+0x134>)
  402a52:	781b      	ldrb	r3, [r3, #0]
  402a54:	b9cb      	cbnz	r3, 402a8a <PIOA_Handler+0x66>
				REG_PIOA_CODR |= PIO_CODR_P18;
  402a56:	4a41      	ldr	r2, [pc, #260]	; (402b5c <PIOA_Handler+0x138>)
  402a58:	6813      	ldr	r3, [r2, #0]
  402a5a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
  402a5e:	6013      	str	r3, [r2, #0]
				pause = 1;
  402a60:	2501      	movs	r5, #1
  402a62:	4b3d      	ldr	r3, [pc, #244]	; (402b58 <PIOA_Handler+0x134>)
  402a64:	701d      	strb	r5, [r3, #0]

				DAC_write_gate_off(CHANNEL_1);
  402a66:	2000      	movs	r0, #0
  402a68:	4c3d      	ldr	r4, [pc, #244]	; (402b60 <PIOA_Handler+0x13c>)
  402a6a:	47a0      	blx	r4
				DAC_write_gate_off(CHANNEL_2);
  402a6c:	4628      	mov	r0, r5
  402a6e:	47a0      	blx	r4
				DAC_write_gate_off(CHANNEL_3);
  402a70:	2002      	movs	r0, #2
  402a72:	47a0      	blx	r4
				DAC_write_gate_off(CHANNEL_4);
  402a74:	2003      	movs	r0, #3
  402a76:	47a0      	blx	r4

				overflow_count = 0;	
  402a78:	2200      	movs	r2, #0
  402a7a:	4b3a      	ldr	r3, [pc, #232]	; (402b64 <PIOA_Handler+0x140>)
  402a7c:	801a      	strh	r2, [r3, #0]
				REG_TC0_CCR0 |= TC_CCR_CLKDIS;
  402a7e:	4a3a      	ldr	r2, [pc, #232]	; (402b68 <PIOA_Handler+0x144>)
  402a80:	6813      	ldr	r3, [r2, #0]
  402a82:	f043 0302 	orr.w	r3, r3, #2
  402a86:	6013      	str	r3, [r2, #0]
  402a88:	e00e      	b.n	402aa8 <PIOA_Handler+0x84>
			}
			else if (pause == 1){
  402a8a:	2b01      	cmp	r3, #1
  402a8c:	d10c      	bne.n	402aa8 <PIOA_Handler+0x84>
				REG_PIOA_SODR |= PIO_SODR_P18; 
  402a8e:	4a37      	ldr	r2, [pc, #220]	; (402b6c <PIOA_Handler+0x148>)
  402a90:	6813      	ldr	r3, [r2, #0]
  402a92:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
  402a96:	6013      	str	r3, [r2, #0]
				pause = 0;
  402a98:	2200      	movs	r2, #0
  402a9a:	4b2f      	ldr	r3, [pc, #188]	; (402b58 <PIOA_Handler+0x134>)
  402a9c:	701a      	strb	r2, [r3, #0]
				REG_TC0_CCR0 |= TC_CCR_CLKEN | TC_CCR_SWTRG;
  402a9e:	4a32      	ldr	r2, [pc, #200]	; (402b68 <PIOA_Handler+0x144>)
  402aa0:	6813      	ldr	r3, [r2, #0]
  402aa2:	f043 0305 	orr.w	r3, r3, #5
  402aa6:	6013      	str	r3, [r2, #0]
			}
			pause_count= 0;
  402aa8:	2200      	movs	r2, #0
  402aaa:	4b2a      	ldr	r3, [pc, #168]	; (402b54 <PIOA_Handler+0x130>)
  402aac:	701a      	strb	r2, [r3, #0]
  402aae:	bd38      	pop	{r3, r4, r5, pc}
		}
	 }

	 //check if Aux Encoder 2 was rotated
	 else if ( (status & PIO_ISR_P6) || (status & PIO_ISR_P7) ){
  402ab0:	f013 0fc0 	tst.w	r3, #192	; 0xc0
  402ab4:	d005      	beq.n	402ac2 <PIOA_Handler+0x9e>
		 control_direction(PIO_ODSR_P6, PIO_ODSR_P7, 1);
  402ab6:	2201      	movs	r2, #1
  402ab8:	2180      	movs	r1, #128	; 0x80
  402aba:	2040      	movs	r0, #64	; 0x40
  402abc:	4b24      	ldr	r3, [pc, #144]	; (402b50 <PIOA_Handler+0x12c>)
  402abe:	4798      	blx	r3
  402ac0:	bd38      	pop	{r3, r4, r5, pc}
	 }

	 //check if Aux Encoder 3 was rotated
	 else if ( (status & PIO_ISR_P8) || (status & PIO_ISR_P9) ){
  402ac2:	f413 7f40 	tst.w	r3, #768	; 0x300
  402ac6:	d007      	beq.n	402ad8 <PIOA_Handler+0xb4>
		control_direction(PIO_ODSR_P8, PIO_ODSR_P9, 2);
  402ac8:	2202      	movs	r2, #2
  402aca:	f44f 7100 	mov.w	r1, #512	; 0x200
  402ace:	f44f 7080 	mov.w	r0, #256	; 0x100
  402ad2:	4b1f      	ldr	r3, [pc, #124]	; (402b50 <PIOA_Handler+0x12c>)
  402ad4:	4798      	blx	r3
  402ad6:	bd38      	pop	{r3, r4, r5, pc}
	 }

	 else if ( (status & PIO_ISR_P10) ){
  402ad8:	f413 6f80 	tst.w	r3, #1024	; 0x400
  402adc:	d135      	bne.n	402b4a <PIOA_Handler+0x126>
		/***************CLOCK IN INT***************/
	 }

	 //check if Aux Encoder 4 was rotated
	 else if ( (status & PIO_ISR_P16) || (status & PIO_ISR_P17) ){
  402ade:	f413 3f40 	tst.w	r3, #196608	; 0x30000
  402ae2:	d007      	beq.n	402af4 <PIOA_Handler+0xd0>
		control_direction(PIO_ODSR_P16, PIO_ODSR_P17, 3);
  402ae4:	2203      	movs	r2, #3
  402ae6:	f44f 3100 	mov.w	r1, #131072	; 0x20000
  402aea:	f44f 3080 	mov.w	r0, #65536	; 0x10000
  402aee:	4b18      	ldr	r3, [pc, #96]	; (402b50 <PIOA_Handler+0x12c>)
  402af0:	4798      	blx	r3
  402af2:	bd38      	pop	{r3, r4, r5, pc}
	 }

	 //check if Aux Encoder 5 was rotated
	 else if ( (status & PIO_ISR_P20) || (status & PIO_ISR_P21) ){
  402af4:	f413 1f40 	tst.w	r3, #3145728	; 0x300000
  402af8:	d007      	beq.n	402b0a <PIOA_Handler+0xe6>
		control_direction(PIO_ODSR_P20, PIO_ODSR_P21, 4);
  402afa:	2204      	movs	r2, #4
  402afc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
  402b00:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  402b04:	4b12      	ldr	r3, [pc, #72]	; (402b50 <PIOA_Handler+0x12c>)
  402b06:	4798      	blx	r3
  402b08:	bd38      	pop	{r3, r4, r5, pc}
	 }

	 //check if Aux Encoder 6 was rotated
	 else if ( (status & PIO_ISR_P22) || (status & PIO_ISR_P23) ){
  402b0a:	f413 0f40 	tst.w	r3, #12582912	; 0xc00000
  402b0e:	d007      	beq.n	402b20 <PIOA_Handler+0xfc>
		control_direction(PIO_ODSR_P22, PIO_ODSR_P23, 5);
  402b10:	2205      	movs	r2, #5
  402b12:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
  402b16:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
  402b1a:	4b0d      	ldr	r3, [pc, #52]	; (402b50 <PIOA_Handler+0x12c>)
  402b1c:	4798      	blx	r3
  402b1e:	bd38      	pop	{r3, r4, r5, pc}
	 }

	 //check if Aux Encoder 7 was rotated
	 else if ( (status & PIO_ISR_P24) || (status & PIO_ISR_P25) ){
  402b20:	f013 7f40 	tst.w	r3, #50331648	; 0x3000000
  402b24:	d007      	beq.n	402b36 <PIOA_Handler+0x112>
		 control_direction(PIO_ODSR_P24, PIO_ODSR_P25, 6);
  402b26:	2206      	movs	r2, #6
  402b28:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
  402b2c:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
  402b30:	4b07      	ldr	r3, [pc, #28]	; (402b50 <PIOA_Handler+0x12c>)
  402b32:	4798      	blx	r3
  402b34:	bd38      	pop	{r3, r4, r5, pc}
	 }
	 
	 //check if Aux Encoder 8 was rotated
	 else if ( (status & PIO_ISR_P26) || (status & PIO_ISR_P27) ){
  402b36:	f013 6f40 	tst.w	r3, #201326592	; 0xc000000
  402b3a:	d006      	beq.n	402b4a <PIOA_Handler+0x126>
		 control_direction(PIO_ODSR_P26, PIO_ODSR_P27, 7);
  402b3c:	2207      	movs	r2, #7
  402b3e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  402b42:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
  402b46:	4b02      	ldr	r3, [pc, #8]	; (402b50 <PIOA_Handler+0x12c>)
  402b48:	4798      	blx	r3
  402b4a:	bd38      	pop	{r3, r4, r5, pc}
  402b4c:	400e0e4c 	.word	0x400e0e4c
  402b50:	004021a5 	.word	0x004021a5
  402b54:	20008734 	.word	0x20008734
  402b58:	20008730 	.word	0x20008730
  402b5c:	400e0e34 	.word	0x400e0e34
  402b60:	00400435 	.word	0x00400435
  402b64:	20008714 	.word	0x20008714
  402b68:	40010000 	.word	0x40010000
  402b6c:	400e0e30 	.word	0x400e0e30

00402b70 <SPI_modeSelect>:
    Mode0		0		1
    Mode1		0		0
    Mode2		1		1
    Mode3		1		0
    */
    if (mode == 0){
  402b70:	b948      	cbnz	r0, 402b86 <SPI_modeSelect+0x16>
        REG_SPI_CSR &= ~SPI_CSR_CPOL;
  402b72:	4b17      	ldr	r3, [pc, #92]	; (402bd0 <SPI_modeSelect+0x60>)
  402b74:	681a      	ldr	r2, [r3, #0]
  402b76:	f022 0201 	bic.w	r2, r2, #1
  402b7a:	601a      	str	r2, [r3, #0]
        REG_SPI_CSR |= SPI_CSR_NCPHA;
  402b7c:	681a      	ldr	r2, [r3, #0]
  402b7e:	f042 0202 	orr.w	r2, r2, #2
  402b82:	601a      	str	r2, [r3, #0]
  402b84:	4770      	bx	lr
    }
    else if (mode == 1){
  402b86:	2801      	cmp	r0, #1
  402b88:	d109      	bne.n	402b9e <SPI_modeSelect+0x2e>
        REG_SPI_CSR &= ~SPI_CSR_CPOL;
  402b8a:	4b11      	ldr	r3, [pc, #68]	; (402bd0 <SPI_modeSelect+0x60>)
  402b8c:	681a      	ldr	r2, [r3, #0]
  402b8e:	f022 0201 	bic.w	r2, r2, #1
  402b92:	601a      	str	r2, [r3, #0]
        REG_SPI_CSR &= ~SPI_CSR_NCPHA;
  402b94:	681a      	ldr	r2, [r3, #0]
  402b96:	f022 0202 	bic.w	r2, r2, #2
  402b9a:	601a      	str	r2, [r3, #0]
  402b9c:	4770      	bx	lr
    }
    else if (mode == 2){
  402b9e:	2802      	cmp	r0, #2
  402ba0:	d109      	bne.n	402bb6 <SPI_modeSelect+0x46>
        REG_SPI_CSR |= SPI_CSR_CPOL;
  402ba2:	4b0b      	ldr	r3, [pc, #44]	; (402bd0 <SPI_modeSelect+0x60>)
  402ba4:	681a      	ldr	r2, [r3, #0]
  402ba6:	f042 0201 	orr.w	r2, r2, #1
  402baa:	601a      	str	r2, [r3, #0]
        REG_SPI_CSR |= SPI_CSR_NCPHA;
  402bac:	681a      	ldr	r2, [r3, #0]
  402bae:	f042 0202 	orr.w	r2, r2, #2
  402bb2:	601a      	str	r2, [r3, #0]
  402bb4:	4770      	bx	lr
    }
    else if (mode == 3){
  402bb6:	2803      	cmp	r0, #3
  402bb8:	d108      	bne.n	402bcc <SPI_modeSelect+0x5c>
        REG_SPI_CSR |= SPI_CSR_CPOL;
  402bba:	4b05      	ldr	r3, [pc, #20]	; (402bd0 <SPI_modeSelect+0x60>)
  402bbc:	681a      	ldr	r2, [r3, #0]
  402bbe:	f042 0201 	orr.w	r2, r2, #1
  402bc2:	601a      	str	r2, [r3, #0]
        REG_SPI_CSR &= ~SPI_CSR_NCPHA;
  402bc4:	681a      	ldr	r2, [r3, #0]
  402bc6:	f022 0202 	bic.w	r2, r2, #2
  402bca:	601a      	str	r2, [r3, #0]
  402bcc:	4770      	bx	lr
  402bce:	bf00      	nop
  402bd0:	40008030 	.word	0x40008030

00402bd4 <SPI_led_init>:
    }
}

void SPI_led_init(){
  402bd4:	b508      	push	{r3, lr}

	//enable peripheral clock
	REG_PMC_PCER0 |= PMC_PCER0_PID21;
  402bd6:	4a14      	ldr	r2, [pc, #80]	; (402c28 <SPI_led_init+0x54>)
  402bd8:	6813      	ldr	r3, [r2, #0]
  402bda:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
  402bde:	6013      	str	r3, [r2, #0]

	//set spi master mode
	REG_SPI_MR |= SPI_MR_MSTR;
  402be0:	4b12      	ldr	r3, [pc, #72]	; (402c2c <SPI_led_init+0x58>)
  402be2:	681a      	ldr	r2, [r3, #0]
  402be4:	f042 0201 	orr.w	r2, r2, #1
  402be8:	601a      	str	r2, [r3, #0]

	//set fixed peripheral select(peripheral chosen in SP_MR.PCS instead of SPI_THR.PCS)
	REG_SPI_MR &= ~SPI_MR_PS;
  402bea:	681a      	ldr	r2, [r3, #0]
  402bec:	f022 0202 	bic.w	r2, r2, #2
  402bf0:	601a      	str	r2, [r3, #0]
	//REG_SPI_MR |= SPI_MR_PCS(0b1110);

	//set polarity and clock phase to rising edge sample, falling edge shift
	SPI_modeSelect(0);
  402bf2:	2000      	movs	r0, #0
  402bf4:	4b0e      	ldr	r3, [pc, #56]	; (402c30 <SPI_led_init+0x5c>)
  402bf6:	4798      	blx	r3

	//set clock generator (1 = peripheral clock rate), otherwise a divisor
	//SCBR = fperipheral clock / SPCK Bit Rate
	REG_SPI_CSR |= SPI_CSR_SCBR(5);
  402bf8:	4a0e      	ldr	r2, [pc, #56]	; (402c34 <SPI_led_init+0x60>)
  402bfa:	6813      	ldr	r3, [r2, #0]
  402bfc:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
  402c00:	6013      	str	r3, [r2, #0]

	//chip select remains low after transfer
	//REG_SPI_CSR |= SPI_CSR_CSNAAT;

	//give peripheral control of pins 
	REG_PIOA_PDR |= PIO_PDR_P11; //NPCS0
  402c02:	4b0d      	ldr	r3, [pc, #52]	; (402c38 <SPI_led_init+0x64>)
  402c04:	681a      	ldr	r2, [r3, #0]
  402c06:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
  402c0a:	601a      	str	r2, [r3, #0]
	REG_PIOA_PDR |= PIO_PDR_P13; //MOSI
  402c0c:	681a      	ldr	r2, [r3, #0]
  402c0e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  402c12:	601a      	str	r2, [r3, #0]
	REG_PIOA_PDR |= PIO_PDR_P14; //SSCK
  402c14:	681a      	ldr	r2, [r3, #0]
  402c16:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
  402c1a:	601a      	str	r2, [r3, #0]

	//enable SPI
	REG_SPI_CR |= SPI_CR_SPIEN;
  402c1c:	4a07      	ldr	r2, [pc, #28]	; (402c3c <SPI_led_init+0x68>)
  402c1e:	6813      	ldr	r3, [r2, #0]
  402c20:	f043 0301 	orr.w	r3, r3, #1
  402c24:	6013      	str	r3, [r2, #0]
  402c26:	bd08      	pop	{r3, pc}
  402c28:	400e0410 	.word	0x400e0410
  402c2c:	40008004 	.word	0x40008004
  402c30:	00402b71 	.word	0x00402b71
  402c34:	40008030 	.word	0x40008030
  402c38:	400e0e04 	.word	0x400e0e04
  402c3c:	40008000 	.word	0x40008000

00402c40 <SPI_dac_init>:


}

void SPI_dac_init(){
  402c40:	b508      	push	{r3, lr}

	//Chip Selects for the DACs / CVs
	REG_PIOB_PER |= PIO_PER_P13; //enable PIO controller on PB13
  402c42:	493a      	ldr	r1, [pc, #232]	; (402d2c <SPI_dac_init+0xec>)
  402c44:	680b      	ldr	r3, [r1, #0]
  402c46:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  402c4a:	600b      	str	r3, [r1, #0]
	REG_PIOB_OER |= PIO_PER_P13; //enable output on pin PB13
  402c4c:	4a38      	ldr	r2, [pc, #224]	; (402d30 <SPI_dac_init+0xf0>)
  402c4e:	6813      	ldr	r3, [r2, #0]
  402c50:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  402c54:	6013      	str	r3, [r2, #0]
	REG_PIOB_SODR |=  PIO_PER_P13;
  402c56:	4b37      	ldr	r3, [pc, #220]	; (402d34 <SPI_dac_init+0xf4>)
  402c58:	6818      	ldr	r0, [r3, #0]
  402c5a:	f440 5000 	orr.w	r0, r0, #8192	; 0x2000
  402c5e:	6018      	str	r0, [r3, #0]

	REG_PIOB_PER |= PIO_PER_P14; //enable PIO controller on PB14
  402c60:	6808      	ldr	r0, [r1, #0]
  402c62:	f440 4080 	orr.w	r0, r0, #16384	; 0x4000
  402c66:	6008      	str	r0, [r1, #0]
	REG_PIOB_OER |= PIO_PER_P14; //enable output on pin PB14
  402c68:	6810      	ldr	r0, [r2, #0]
  402c6a:	f440 4080 	orr.w	r0, r0, #16384	; 0x4000
  402c6e:	6010      	str	r0, [r2, #0]
	REG_PIOB_SODR |=  PIO_PER_P14;
  402c70:	6818      	ldr	r0, [r3, #0]
  402c72:	f440 4080 	orr.w	r0, r0, #16384	; 0x4000
  402c76:	6018      	str	r0, [r3, #0]

	//Outputs for the Gates
	REG_PIOB_PER |= PIO_PER_P0; //enable PIO controller on PB13
  402c78:	6808      	ldr	r0, [r1, #0]
  402c7a:	f040 0001 	orr.w	r0, r0, #1
  402c7e:	6008      	str	r0, [r1, #0]
	REG_PIOB_OER |= PIO_PER_P0; //enable output on pin PB13
  402c80:	6810      	ldr	r0, [r2, #0]
  402c82:	f040 0001 	orr.w	r0, r0, #1
  402c86:	6010      	str	r0, [r2, #0]
	REG_PIOB_SODR |=  PIO_PER_P0;
  402c88:	6818      	ldr	r0, [r3, #0]
  402c8a:	f040 0001 	orr.w	r0, r0, #1
  402c8e:	6018      	str	r0, [r3, #0]

	REG_PIOB_PER |= PIO_PER_P1; //enable PIO controller on PB13
  402c90:	6808      	ldr	r0, [r1, #0]
  402c92:	f040 0002 	orr.w	r0, r0, #2
  402c96:	6008      	str	r0, [r1, #0]
	REG_PIOB_OER |= PIO_PER_P1; //enable output on pin PB13
  402c98:	6810      	ldr	r0, [r2, #0]
  402c9a:	f040 0002 	orr.w	r0, r0, #2
  402c9e:	6010      	str	r0, [r2, #0]
	REG_PIOB_SODR |=  PIO_PER_P1;
  402ca0:	6818      	ldr	r0, [r3, #0]
  402ca2:	f040 0002 	orr.w	r0, r0, #2
  402ca6:	6018      	str	r0, [r3, #0]

	REG_PIOB_PER |= PIO_PER_P2; //enable PIO controller on PB13
  402ca8:	6808      	ldr	r0, [r1, #0]
  402caa:	f040 0004 	orr.w	r0, r0, #4
  402cae:	6008      	str	r0, [r1, #0]
	REG_PIOB_OER |= PIO_PER_P2; //enable output on pin PB13
  402cb0:	6810      	ldr	r0, [r2, #0]
  402cb2:	f040 0004 	orr.w	r0, r0, #4
  402cb6:	6010      	str	r0, [r2, #0]
	REG_PIOB_SODR |=  PIO_PER_P2;
  402cb8:	6818      	ldr	r0, [r3, #0]
  402cba:	f040 0004 	orr.w	r0, r0, #4
  402cbe:	6018      	str	r0, [r3, #0]

	REG_PIOB_PER |= PIO_PER_P3; //enable PIO controller on PB13
  402cc0:	6808      	ldr	r0, [r1, #0]
  402cc2:	f040 0008 	orr.w	r0, r0, #8
  402cc6:	6008      	str	r0, [r1, #0]
	REG_PIOB_OER |= PIO_PER_P3; //enable output on pin PB13
  402cc8:	6811      	ldr	r1, [r2, #0]
  402cca:	f041 0108 	orr.w	r1, r1, #8
  402cce:	6011      	str	r1, [r2, #0]
	REG_PIOB_SODR |=  PIO_PER_P3;
  402cd0:	681a      	ldr	r2, [r3, #0]
  402cd2:	f042 0208 	orr.w	r2, r2, #8
  402cd6:	601a      	str	r2, [r3, #0]

	//enable peripheral clock
	REG_PMC_PCER0 |= PMC_PCER0_PID21;
  402cd8:	4a17      	ldr	r2, [pc, #92]	; (402d38 <SPI_dac_init+0xf8>)
  402cda:	6813      	ldr	r3, [r2, #0]
  402cdc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
  402ce0:	6013      	str	r3, [r2, #0]

	//set spi master mode
	REG_SPI_MR |= SPI_MR_MSTR;
  402ce2:	4b16      	ldr	r3, [pc, #88]	; (402d3c <SPI_dac_init+0xfc>)
  402ce4:	681a      	ldr	r2, [r3, #0]
  402ce6:	f042 0201 	orr.w	r2, r2, #1
  402cea:	601a      	str	r2, [r3, #0]

	//set fixed peripheral select(peripheral chosen in SP_MR.PCS instead of SPI_THR.PCS)
	REG_SPI_MR &= ~SPI_MR_PS;
  402cec:	681a      	ldr	r2, [r3, #0]
  402cee:	f022 0202 	bic.w	r2, r2, #2
  402cf2:	601a      	str	r2, [r3, #0]
	//REG_SPI_MR |= SPI_MR_PCS(0b1101);

	//set polarity and clock phase to rising edge sample, falling edge shift
	SPI_modeSelect(0);
  402cf4:	2000      	movs	r0, #0
  402cf6:	4b12      	ldr	r3, [pc, #72]	; (402d40 <SPI_dac_init+0x100>)
  402cf8:	4798      	blx	r3

	//set clock generator (1 = peripheral clock rate), otherwise a divisor
	//SCBR = fperipheral clock / SPCK Bit Rate
	REG_SPI_CSR |= SPI_CSR_SCBR(20);
  402cfa:	4a12      	ldr	r2, [pc, #72]	; (402d44 <SPI_dac_init+0x104>)
  402cfc:	6813      	ldr	r3, [r2, #0]
  402cfe:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
  402d02:	6013      	str	r3, [r2, #0]

	//chip select remains low after transfer
	//REG_SPI_CSR |= SPI_CSR_CSNAAT;

	//give peripheral control of pins
	REG_PIOA_PDR |= PIO_PDR_P11; //NPCS1
  402d04:	4b10      	ldr	r3, [pc, #64]	; (402d48 <SPI_dac_init+0x108>)
  402d06:	681a      	ldr	r2, [r3, #0]
  402d08:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
  402d0c:	601a      	str	r2, [r3, #0]
	REG_PIOA_PDR |= PIO_PDR_P13; //MOSI
  402d0e:	681a      	ldr	r2, [r3, #0]
  402d10:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  402d14:	601a      	str	r2, [r3, #0]
	REG_PIOA_PDR |= PIO_PDR_P14; //SSCK
  402d16:	681a      	ldr	r2, [r3, #0]
  402d18:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
  402d1c:	601a      	str	r2, [r3, #0]

	//enable SPI
	REG_SPI_CR |= SPI_CR_SPIEN;
  402d1e:	4a0b      	ldr	r2, [pc, #44]	; (402d4c <SPI_dac_init+0x10c>)
  402d20:	6813      	ldr	r3, [r2, #0]
  402d22:	f043 0301 	orr.w	r3, r3, #1
  402d26:	6013      	str	r3, [r2, #0]
  402d28:	bd08      	pop	{r3, pc}
  402d2a:	bf00      	nop
  402d2c:	400e1000 	.word	0x400e1000
  402d30:	400e1010 	.word	0x400e1010
  402d34:	400e1030 	.word	0x400e1030
  402d38:	400e0410 	.word	0x400e0410
  402d3c:	40008004 	.word	0x40008004
  402d40:	00402b71 	.word	0x00402b71
  402d44:	40008030 	.word	0x40008030
  402d48:	400e0e04 	.word	0x400e0e04
  402d4c:	40008000 	.word	0x40008000

00402d50 <SPI_byteSend>:

}

void SPI_byteSend(uint8_t data){
	//wait for transmit register to be empty
	while (!(REG_SPI_SR & SPI_SR_TDRE));
  402d50:	4a04      	ldr	r2, [pc, #16]	; (402d64 <SPI_byteSend+0x14>)
  402d52:	6813      	ldr	r3, [r2, #0]
  402d54:	f013 0f02 	tst.w	r3, #2
  402d58:	d0fb      	beq.n	402d52 <SPI_byteSend+0x2>
	//send data to transmit register
	REG_SPI_TDR |= (data);
  402d5a:	4a03      	ldr	r2, [pc, #12]	; (402d68 <SPI_byteSend+0x18>)
  402d5c:	6813      	ldr	r3, [r2, #0]
  402d5e:	4318      	orrs	r0, r3
  402d60:	6010      	str	r0, [r2, #0]
  402d62:	4770      	bx	lr
  402d64:	40008010 	.word	0x40008010
  402d68:	4000800c 	.word	0x4000800c

00402d6c <notes_get>:


float notes_get(uint8_t curr_step, uint8_t channel){
	int lookup_index;

	if (channel == CHANNEL_1){
  402d6c:	b959      	cbnz	r1, 402d86 <notes_get+0x1a>
		lookup_index = patterns[curr_pattern_ch[0]][curr_page_ch[0]][curr_step][0];
  402d6e:	4b1c      	ldr	r3, [pc, #112]	; (402de0 <notes_get+0x74>)
  402d70:	781a      	ldrb	r2, [r3, #0]
  402d72:	4b1c      	ldr	r3, [pc, #112]	; (402de4 <notes_get+0x78>)
  402d74:	781b      	ldrb	r3, [r3, #0]
  402d76:	eb03 1302 	add.w	r3, r3, r2, lsl #4
  402d7a:	eb00 1003 	add.w	r0, r0, r3, lsl #4
  402d7e:	4b1a      	ldr	r3, [pc, #104]	; (402de8 <notes_get+0x7c>)
  402d80:	f853 2030 	ldr.w	r2, [r3, r0, lsl #3]
  402d84:	e028      	b.n	402dd8 <notes_get+0x6c>
	}
	else if (channel == CHANNEL_2){
  402d86:	2901      	cmp	r1, #1
  402d88:	d10b      	bne.n	402da2 <notes_get+0x36>
		lookup_index = patterns[curr_pattern_ch[1]][curr_page_ch[1]][curr_step][0];
  402d8a:	4b15      	ldr	r3, [pc, #84]	; (402de0 <notes_get+0x74>)
  402d8c:	785a      	ldrb	r2, [r3, #1]
  402d8e:	4b15      	ldr	r3, [pc, #84]	; (402de4 <notes_get+0x78>)
  402d90:	785b      	ldrb	r3, [r3, #1]
  402d92:	eb03 1302 	add.w	r3, r3, r2, lsl #4
  402d96:	eb00 1003 	add.w	r0, r0, r3, lsl #4
  402d9a:	4b13      	ldr	r3, [pc, #76]	; (402de8 <notes_get+0x7c>)
  402d9c:	f853 2030 	ldr.w	r2, [r3, r0, lsl #3]
  402da0:	e01a      	b.n	402dd8 <notes_get+0x6c>
	}
	else if (channel == CHANNEL_3){
  402da2:	2902      	cmp	r1, #2
  402da4:	d10b      	bne.n	402dbe <notes_get+0x52>
		lookup_index = patterns[curr_pattern_ch[2]][curr_page_ch[2]][curr_step][0];
  402da6:	4b0e      	ldr	r3, [pc, #56]	; (402de0 <notes_get+0x74>)
  402da8:	789a      	ldrb	r2, [r3, #2]
  402daa:	4b0e      	ldr	r3, [pc, #56]	; (402de4 <notes_get+0x78>)
  402dac:	789b      	ldrb	r3, [r3, #2]
  402dae:	eb03 1302 	add.w	r3, r3, r2, lsl #4
  402db2:	eb00 1003 	add.w	r0, r0, r3, lsl #4
  402db6:	4b0c      	ldr	r3, [pc, #48]	; (402de8 <notes_get+0x7c>)
  402db8:	f853 2030 	ldr.w	r2, [r3, r0, lsl #3]
  402dbc:	e00c      	b.n	402dd8 <notes_get+0x6c>
	}
	else if (channel == CHANNEL_4){
  402dbe:	2903      	cmp	r1, #3
  402dc0:	d10a      	bne.n	402dd8 <notes_get+0x6c>
		lookup_index = patterns[curr_pattern_ch[3]][curr_page_ch[3]][curr_step][0];
  402dc2:	4b07      	ldr	r3, [pc, #28]	; (402de0 <notes_get+0x74>)
  402dc4:	78da      	ldrb	r2, [r3, #3]
  402dc6:	4b07      	ldr	r3, [pc, #28]	; (402de4 <notes_get+0x78>)
  402dc8:	78db      	ldrb	r3, [r3, #3]
  402dca:	eb03 1302 	add.w	r3, r3, r2, lsl #4
  402dce:	eb00 1003 	add.w	r0, r0, r3, lsl #4
  402dd2:	4b05      	ldr	r3, [pc, #20]	; (402de8 <notes_get+0x7c>)
  402dd4:	f853 2030 	ldr.w	r2, [r3, r0, lsl #3]
	}
	
	return notes_lookup[lookup_index];
}
  402dd8:	4b04      	ldr	r3, [pc, #16]	; (402dec <notes_get+0x80>)
  402dda:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
  402dde:	4770      	bx	lr
  402de0:	20008718 	.word	0x20008718
  402de4:	20008710 	.word	0x20008710
  402de8:	200006f4 	.word	0x200006f4
  402dec:	20000010 	.word	0x20000010

00402df0 <notes_status_get>:

int notes_status_get(uint8_t curr_step, uint8_t channel){

	if (channel == CHANNEL_1){
  402df0:	b961      	cbnz	r1, 402e0c <notes_status_get+0x1c>
		return patterns[curr_pattern_ch[0]][curr_page_ch[0]][curr_step][1];
  402df2:	4b23      	ldr	r3, [pc, #140]	; (402e80 <notes_status_get+0x90>)
  402df4:	781a      	ldrb	r2, [r3, #0]
  402df6:	4b23      	ldr	r3, [pc, #140]	; (402e84 <notes_status_get+0x94>)
  402df8:	781b      	ldrb	r3, [r3, #0]
  402dfa:	eb03 1302 	add.w	r3, r3, r2, lsl #4
  402dfe:	eb00 1003 	add.w	r0, r0, r3, lsl #4
  402e02:	4b21      	ldr	r3, [pc, #132]	; (402e88 <notes_status_get+0x98>)
  402e04:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
  402e08:	6840      	ldr	r0, [r0, #4]
  402e0a:	4770      	bx	lr
	}
	else if (channel == CHANNEL_2){
  402e0c:	2901      	cmp	r1, #1
  402e0e:	d10c      	bne.n	402e2a <notes_status_get+0x3a>
		return patterns[curr_pattern_ch[1]][curr_page_ch[1]][curr_step][1];
  402e10:	4b1b      	ldr	r3, [pc, #108]	; (402e80 <notes_status_get+0x90>)
  402e12:	785a      	ldrb	r2, [r3, #1]
  402e14:	4b1b      	ldr	r3, [pc, #108]	; (402e84 <notes_status_get+0x94>)
  402e16:	785b      	ldrb	r3, [r3, #1]
  402e18:	eb03 1302 	add.w	r3, r3, r2, lsl #4
  402e1c:	eb00 1003 	add.w	r0, r0, r3, lsl #4
  402e20:	4b19      	ldr	r3, [pc, #100]	; (402e88 <notes_status_get+0x98>)
  402e22:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
  402e26:	6840      	ldr	r0, [r0, #4]
  402e28:	4770      	bx	lr
	}
	else if (channel == CHANNEL_3){
  402e2a:	2902      	cmp	r1, #2
  402e2c:	d10c      	bne.n	402e48 <notes_status_get+0x58>
		return patterns[curr_pattern_ch[2]][curr_page_ch[2]][curr_step][1];
  402e2e:	4b14      	ldr	r3, [pc, #80]	; (402e80 <notes_status_get+0x90>)
  402e30:	789a      	ldrb	r2, [r3, #2]
  402e32:	4b14      	ldr	r3, [pc, #80]	; (402e84 <notes_status_get+0x94>)
  402e34:	789b      	ldrb	r3, [r3, #2]
  402e36:	eb03 1302 	add.w	r3, r3, r2, lsl #4
  402e3a:	eb00 1003 	add.w	r0, r0, r3, lsl #4
  402e3e:	4b12      	ldr	r3, [pc, #72]	; (402e88 <notes_status_get+0x98>)
  402e40:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
  402e44:	6840      	ldr	r0, [r0, #4]
  402e46:	4770      	bx	lr
	}
	else if (channel == CHANNEL_4){
  402e48:	2903      	cmp	r1, #3
  402e4a:	d10c      	bne.n	402e66 <notes_status_get+0x76>
		return patterns[curr_pattern_ch[3]][curr_page_ch[3]][curr_step][1];
  402e4c:	4b0c      	ldr	r3, [pc, #48]	; (402e80 <notes_status_get+0x90>)
  402e4e:	78da      	ldrb	r2, [r3, #3]
  402e50:	4b0c      	ldr	r3, [pc, #48]	; (402e84 <notes_status_get+0x94>)
  402e52:	78db      	ldrb	r3, [r3, #3]
  402e54:	eb03 1302 	add.w	r3, r3, r2, lsl #4
  402e58:	eb00 1003 	add.w	r0, r0, r3, lsl #4
  402e5c:	4b0a      	ldr	r3, [pc, #40]	; (402e88 <notes_status_get+0x98>)
  402e5e:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
  402e62:	6840      	ldr	r0, [r0, #4]
  402e64:	4770      	bx	lr
	}

	//default
	return patterns[curr_pattern_ch[0]][curr_page_ch[0]][curr_step][1];
  402e66:	4b06      	ldr	r3, [pc, #24]	; (402e80 <notes_status_get+0x90>)
  402e68:	781a      	ldrb	r2, [r3, #0]
  402e6a:	4b06      	ldr	r3, [pc, #24]	; (402e84 <notes_status_get+0x94>)
  402e6c:	781b      	ldrb	r3, [r3, #0]
  402e6e:	eb03 1302 	add.w	r3, r3, r2, lsl #4
  402e72:	eb00 1003 	add.w	r0, r0, r3, lsl #4
  402e76:	4b04      	ldr	r3, [pc, #16]	; (402e88 <notes_status_get+0x98>)
  402e78:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
  402e7c:	6840      	ldr	r0, [r0, #4]
}
  402e7e:	4770      	bx	lr
  402e80:	20008718 	.word	0x20008718
  402e84:	20008710 	.word	0x20008710
  402e88:	200006f4 	.word	0x200006f4

00402e8c <notes_display_get>:

int notes_display_get(uint8_t display_page, uint8_t step){
	return patterns[curr_pattern][display_page][step][1];
  402e8c:	4b05      	ldr	r3, [pc, #20]	; (402ea4 <notes_display_get+0x18>)
  402e8e:	781b      	ldrb	r3, [r3, #0]
  402e90:	eb00 1003 	add.w	r0, r0, r3, lsl #4
  402e94:	eb01 1000 	add.w	r0, r1, r0, lsl #4
  402e98:	4903      	ldr	r1, [pc, #12]	; (402ea8 <notes_display_get+0x1c>)
  402e9a:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
}
  402e9e:	6840      	ldr	r0, [r0, #4]
  402ea0:	4770      	bx	lr
  402ea2:	bf00      	nop
  402ea4:	20008700 	.word	0x20008700
  402ea8:	200006f4 	.word	0x200006f4

00402eac <notes_status_set>:

void notes_status_set(uint8_t display_page, int leds_status[]){

	/* match notes status to current display page status */
	for (int i = 0; i < 16; i++){
		patterns[curr_pattern][display_page][i][1] = leds_status[i];
  402eac:	4b07      	ldr	r3, [pc, #28]	; (402ecc <notes_status_set+0x20>)
  402eae:	781b      	ldrb	r3, [r3, #0]
  402eb0:	1f0a      	subs	r2, r1, #4
  402eb2:	eb00 1003 	add.w	r0, r0, r3, lsl #4
  402eb6:	4b06      	ldr	r3, [pc, #24]	; (402ed0 <notes_status_set+0x24>)
  402eb8:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
  402ebc:	313c      	adds	r1, #60	; 0x3c
  402ebe:	f852 3f04 	ldr.w	r3, [r2, #4]!
  402ec2:	6043      	str	r3, [r0, #4]
  402ec4:	3008      	adds	r0, #8
}

void notes_status_set(uint8_t display_page, int leds_status[]){

	/* match notes status to current display page status */
	for (int i = 0; i < 16; i++){
  402ec6:	428a      	cmp	r2, r1
  402ec8:	d1f9      	bne.n	402ebe <notes_status_set+0x12>
		patterns[curr_pattern][display_page][i][1] = leds_status[i];
	}

}
  402eca:	4770      	bx	lr
  402ecc:	20008700 	.word	0x20008700
  402ed0:	200006f4 	.word	0x200006f4

00402ed4 <notes_clear>:

void notes_clear(uint8_t curr_pattern){
  402ed4:	b410      	push	{r4}
  402ed6:	4a0b      	ldr	r2, [pc, #44]	; (402f04 <notes_clear+0x30>)
  402ed8:	eb02 23c0 	add.w	r3, r2, r0, lsl #11
  402edc:	3001      	adds	r0, #1
  402ede:	eb02 24c0 	add.w	r4, r2, r0, lsl #11
	for (int i = 0; i < 16; i++){
		for (int j = 0; j < 16; j++){
			patterns[curr_pattern][i][j][0] = 48; //set note to C4
  402ee2:	2030      	movs	r0, #48	; 0x30
			patterns[curr_pattern][i][j][1]= 0;	  //turn notes all OFF
  402ee4:	2100      	movs	r1, #0
  402ee6:	e007      	b.n	402ef8 <notes_clear+0x24>
}

void notes_clear(uint8_t curr_pattern){
	for (int i = 0; i < 16; i++){
		for (int j = 0; j < 16; j++){
			patterns[curr_pattern][i][j][0] = 48; //set note to C4
  402ee8:	6018      	str	r0, [r3, #0]
			patterns[curr_pattern][i][j][1]= 0;	  //turn notes all OFF
  402eea:	6059      	str	r1, [r3, #4]
  402eec:	3308      	adds	r3, #8

}

void notes_clear(uint8_t curr_pattern){
	for (int i = 0; i < 16; i++){
		for (int j = 0; j < 16; j++){
  402eee:	4293      	cmp	r3, r2
  402ef0:	d1fa      	bne.n	402ee8 <notes_clear+0x14>
  402ef2:	4613      	mov	r3, r2
	}

}

void notes_clear(uint8_t curr_pattern){
	for (int i = 0; i < 16; i++){
  402ef4:	4294      	cmp	r4, r2
  402ef6:	d002      	beq.n	402efe <notes_clear+0x2a>
  402ef8:	f103 0280 	add.w	r2, r3, #128	; 0x80
  402efc:	e7f4      	b.n	402ee8 <notes_clear+0x14>
		for (int j = 0; j < 16; j++){
			patterns[curr_pattern][i][j][0] = 48; //set note to C4
			patterns[curr_pattern][i][j][1]= 0;	  //turn notes all OFF
		}
	}
}
  402efe:	bc10      	pop	{r4}
  402f00:	4770      	bx	lr
  402f02:	bf00      	nop
  402f04:	200006f4 	.word	0x200006f4

00402f08 <notes_inc>:


void notes_inc(uint8_t step){
  402f08:	b410      	push	{r4}
	if (patterns[curr_pattern][display_page][step][0] < 120){
  402f0a:	4b0b      	ldr	r3, [pc, #44]	; (402f38 <notes_inc+0x30>)
  402f0c:	7819      	ldrb	r1, [r3, #0]
  402f0e:	4b0b      	ldr	r3, [pc, #44]	; (402f3c <notes_inc+0x34>)
  402f10:	781a      	ldrb	r2, [r3, #0]
  402f12:	eb02 1301 	add.w	r3, r2, r1, lsl #4
  402f16:	eb00 1303 	add.w	r3, r0, r3, lsl #4
  402f1a:	4c09      	ldr	r4, [pc, #36]	; (402f40 <notes_inc+0x38>)
  402f1c:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
  402f20:	2b77      	cmp	r3, #119	; 0x77
  402f22:	dc06      	bgt.n	402f32 <notes_inc+0x2a>
		patterns[curr_pattern][display_page][step][0]++;
  402f24:	eb02 1201 	add.w	r2, r2, r1, lsl #4
  402f28:	eb00 1002 	add.w	r0, r0, r2, lsl #4
  402f2c:	3301      	adds	r3, #1
  402f2e:	f844 3030 	str.w	r3, [r4, r0, lsl #3]
// 	patterns[curr_pattern_ch[1]][curr_page_ch[1]][11][1] = 1;
// 	patterns[curr_pattern_ch[1]][curr_page_ch[1]][12][1] = 1;
// 	patterns[curr_pattern_ch[1]][curr_page_ch[1]][13][1] = 1;
// 	patterns[curr_pattern_ch[1]][curr_page_ch[1]][14][1] = 0;
// 	patterns[curr_pattern_ch[1]][curr_page_ch[1]][15][1] = 1;
}
  402f32:	bc10      	pop	{r4}
  402f34:	4770      	bx	lr
  402f36:	bf00      	nop
  402f38:	20008700 	.word	0x20008700
  402f3c:	20008724 	.word	0x20008724
  402f40:	200006f4 	.word	0x200006f4

00402f44 <notes_dec>:

void notes_dec(uint8_t step){
  402f44:	b410      	push	{r4}
	if (patterns[curr_pattern][display_page][step][0] > 0){
  402f46:	4b0b      	ldr	r3, [pc, #44]	; (402f74 <notes_dec+0x30>)
  402f48:	7819      	ldrb	r1, [r3, #0]
  402f4a:	4b0b      	ldr	r3, [pc, #44]	; (402f78 <notes_dec+0x34>)
  402f4c:	781a      	ldrb	r2, [r3, #0]
  402f4e:	eb02 1301 	add.w	r3, r2, r1, lsl #4
  402f52:	eb00 1303 	add.w	r3, r0, r3, lsl #4
  402f56:	4c09      	ldr	r4, [pc, #36]	; (402f7c <notes_dec+0x38>)
  402f58:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
  402f5c:	2b00      	cmp	r3, #0
  402f5e:	dd06      	ble.n	402f6e <notes_dec+0x2a>
		patterns[curr_pattern][display_page][step][0]--;
  402f60:	eb02 1201 	add.w	r2, r2, r1, lsl #4
  402f64:	eb00 1002 	add.w	r0, r0, r2, lsl #4
  402f68:	3b01      	subs	r3, #1
  402f6a:	f844 3030 	str.w	r3, [r4, r0, lsl #3]
// 	patterns[curr_pattern_ch[1]][curr_page_ch[1]][11][1] = 1;
// 	patterns[curr_pattern_ch[1]][curr_page_ch[1]][12][1] = 1;
// 	patterns[curr_pattern_ch[1]][curr_page_ch[1]][13][1] = 1;
// 	patterns[curr_pattern_ch[1]][curr_page_ch[1]][14][1] = 0;
// 	patterns[curr_pattern_ch[1]][curr_page_ch[1]][15][1] = 1;
}
  402f6e:	bc10      	pop	{r4}
  402f70:	4770      	bx	lr
  402f72:	bf00      	nop
  402f74:	20008700 	.word	0x20008700
  402f78:	20008724 	.word	0x20008724
  402f7c:	200006f4 	.word	0x200006f4

00402f80 <timers_init>:
 #include "displays.h"


 void timers_init(void) {

	overflow_count = 0;
  402f80:	2300      	movs	r3, #0
  402f82:	4a2d      	ldr	r2, [pc, #180]	; (403038 <timers_init+0xb8>)
  402f84:	8013      	strh	r3, [r2, #0]
	note_overflow_count = 0;
  402f86:	4a2d      	ldr	r2, [pc, #180]	; (40303c <timers_init+0xbc>)
  402f88:	8013      	strh	r3, [r2, #0]
	refresh_overflow_count = 0;
  402f8a:	4a2d      	ldr	r2, [pc, #180]	; (403040 <timers_init+0xc0>)
  402f8c:	8013      	strh	r3, [r2, #0]
	resolution = 2;
  402f8e:	2102      	movs	r1, #2
  402f90:	4a2c      	ldr	r2, [pc, #176]	; (403044 <timers_init+0xc4>)
  402f92:	6011      	str	r1, [r2, #0]
	display_page = 0;
  402f94:	4a2c      	ldr	r2, [pc, #176]	; (403048 <timers_init+0xc8>)
  402f96:	7013      	strb	r3, [r2, #0]
	page_loop = 0;
  402f98:	4a2c      	ldr	r2, [pc, #176]	; (40304c <timers_init+0xcc>)
  402f9a:	7013      	strb	r3, [r2, #0]
	curr_step = 0;
  402f9c:	4a2c      	ldr	r2, [pc, #176]	; (403050 <timers_init+0xd0>)
  402f9e:	7013      	strb	r3, [r2, #0]
	curr_page = 0;
  402fa0:	4a2c      	ldr	r2, [pc, #176]	; (403054 <timers_init+0xd4>)
  402fa2:	7013      	strb	r3, [r2, #0]
	curr_pattern = 0;
  402fa4:	4a2c      	ldr	r2, [pc, #176]	; (403058 <timers_init+0xd8>)
  402fa6:	7013      	strb	r3, [r2, #0]

	curr_pattern_ch[0] = 0;
  402fa8:	4a2c      	ldr	r2, [pc, #176]	; (40305c <timers_init+0xdc>)
  402faa:	7013      	strb	r3, [r2, #0]
	curr_pattern_ch[1] = 1;
  402fac:	2001      	movs	r0, #1
  402fae:	7050      	strb	r0, [r2, #1]
	curr_pattern_ch[2] = 2;
  402fb0:	7091      	strb	r1, [r2, #2]
	curr_pattern_ch[3] = 3;
  402fb2:	2103      	movs	r1, #3
  402fb4:	70d1      	strb	r1, [r2, #3]

	curr_page_ch[0] = 0;
  402fb6:	4a2a      	ldr	r2, [pc, #168]	; (403060 <timers_init+0xe0>)
  402fb8:	7013      	strb	r3, [r2, #0]
	curr_page_ch[1] = 0;
  402fba:	7053      	strb	r3, [r2, #1]
	curr_page_ch[2] = 0;
  402fbc:	7093      	strb	r3, [r2, #2]
	curr_page_ch[3] = 0;
  402fbe:	70d3      	strb	r3, [r2, #3]

	page_loop_ch[0] = 0;
  402fc0:	4a28      	ldr	r2, [pc, #160]	; (403064 <timers_init+0xe4>)
  402fc2:	7013      	strb	r3, [r2, #0]
	page_loop_ch[1] = 0;
  402fc4:	7053      	strb	r3, [r2, #1]
	page_loop_ch[2] = 0;
  402fc6:	7093      	strb	r3, [r2, #2]
	page_loop_ch[3] = 0;
  402fc8:	70d3      	strb	r3, [r2, #3]

	channel_mute[0] = 0;
  402fca:	4a27      	ldr	r2, [pc, #156]	; (403068 <timers_init+0xe8>)
  402fcc:	7013      	strb	r3, [r2, #0]
	channel_mute[1] = 0;
  402fce:	7053      	strb	r3, [r2, #1]
	channel_mute[2] = 0;
  402fd0:	7093      	strb	r3, [r2, #2]
	channel_mute[3] = 0;
  402fd2:	70d3      	strb	r3, [r2, #3]
  402fd4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  402fd8:	4b24      	ldr	r3, [pc, #144]	; (40306c <timers_init+0xec>)
  402fda:	601a      	str	r2, [r3, #0]
	NVIC_EnableIRQ(TC0_IRQn);
	//NVIC_EnableIRQ(TC1_IRQn);

	// Enable peripheral clock for TC0
	// Peripheral ID (PID) for TC0 is 23
	REG_PMC_PCER0 |= PMC_PCER0_PID23;
  402fdc:	4b24      	ldr	r3, [pc, #144]	; (403070 <timers_init+0xf0>)
  402fde:	681a      	ldr	r2, [r3, #0]
  402fe0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
  402fe4:	601a      	str	r2, [r3, #0]
	
	// Enable peripheral clock for TC1
	// Peripheral ID (PID) for TC1 is 24
	REG_PMC_PCER0 |= PMC_PCER0_PID24;
  402fe6:	681a      	ldr	r2, [r3, #0]
  402fe8:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
  402fec:	601a      	str	r2, [r3, #0]
	// TIMER_CLOCK1 = MCK/2
	// TIMER_CLOCK2 = MCK/8
	// TIMER_CLOCK3 = MCK/32
	// TIMER_CLOCK4 = MCK/128
	// TIMER_CLOCK5 = SCLK
	REG_TC0_CMR0 |= TC_CMR_TCCLKS_TIMER_CLOCK2 | TC_CMR_CPCTRG;
  402fee:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
  402ff2:	f101 1101 	add.w	r1, r1, #65537	; 0x10001
  402ff6:	680a      	ldr	r2, [r1, #0]
  402ff8:	f244 0301 	movw	r3, #16385	; 0x4001
  402ffc:	431a      	orrs	r2, r3
  402ffe:	600a      	str	r2, [r1, #0]
	REG_TC0_CMR1 |= TC_CMR_TCCLKS_TIMER_CLOCK2 | TC_CMR_CPCTRG;
  403000:	4a1c      	ldr	r2, [pc, #112]	; (403074 <timers_init+0xf4>)
  403002:	6811      	ldr	r1, [r2, #0]
  403004:	430b      	orrs	r3, r1
  403006:	6013      	str	r3, [r2, #0]
	// REG_TC0_CMR2 |= TC_CMR_TCCLKS_TIMER_CLOCK4 | TC_CMR_CPCTRG;
	// Set interrupt on compare to RC value
	REG_TC0_IER0 |= TC_IER_CPCS;
  403008:	3a20      	subs	r2, #32
  40300a:	6813      	ldr	r3, [r2, #0]
  40300c:	f043 0310 	orr.w	r3, r3, #16
  403010:	6013      	str	r3, [r2, #0]
	REG_TC0_IER1 |= TC_IER_CPCS;
  403012:	3240      	adds	r2, #64	; 0x40
  403014:	6813      	ldr	r3, [r2, #0]
  403016:	f043 0310 	orr.w	r3, r3, #16
  40301a:	6013      	str	r3, [r2, #0]
	// REG_TC0_IER2 |= TC_IER_CPCS;

	// 60 BPM = 1 Hz. MCK/8 = 12.5 MHz. 12.5 million counts per second, 1 interrupt per cycle
	// Anticipating 10000 overflows (10000*1250 is 12.5 million counts)
	REG_TC0_RC0 = 1250;
  40301c:	f240 42e2 	movw	r2, #1250	; 0x4e2
  403020:	4b15      	ldr	r3, [pc, #84]	; (403078 <timers_init+0xf8>)
  403022:	601a      	str	r2, [r3, #0]

	// 2 seconds = 0.5 Hz. MCK/8 = 12.5 MHz. 25 million counts
	// Anticipating 10000 overflows (10000*2500 is 25 million counts)
	REG_TC0_RC1 = 2500;
  403024:	f640 12c4 	movw	r2, #2500	; 0x9c4
  403028:	3340      	adds	r3, #64	; 0x40
  40302a:	601a      	str	r2, [r3, #0]
0; //enable PIO controller on PA11
// 	REG_PIOA_OER |= PIO_PER_P20; //enable output on pin PA11
	/*REG_PMC_PCER0 |= PMC_PCER0_PID11; //Enable PMC control for PA11*/

	// TC0 control register enables timer and triggers it to start
	REG_TC0_CCR0 |= TC_CCR_CLKEN | TC_CCR_SWTRG;
  40302c:	4a13      	ldr	r2, [pc, #76]	; (40307c <timers_init+0xfc>)
  40302e:	6813      	ldr	r3, [r2, #0]
  403030:	f043 0305 	orr.w	r3, r3, #5
  403034:	6013      	str	r3, [r2, #0]
  403036:	4770      	bx	lr
  403038:	20008714 	.word	0x20008714
  40303c:	20008702 	.word	0x20008702
  403040:	20008704 	.word	0x20008704
  403044:	20008708 	.word	0x20008708
  403048:	20008724 	.word	0x20008724
  40304c:	2000870c 	.word	0x2000870c
  403050:	2000871c 	.word	0x2000871c
  403054:	2000872e 	.word	0x2000872e
  403058:	20008700 	.word	0x20008700
  40305c:	20008718 	.word	0x20008718
  403060:	20008710 	.word	0x20008710
  403064:	20008728 	.word	0x20008728
  403068:	20008720 	.word	0x20008720
  40306c:	e000e100 	.word	0xe000e100
  403070:	400e0410 	.word	0x400e0410
  403074:	40010044 	.word	0x40010044
  403078:	4001001c 	.word	0x4001001c
  40307c:	40010000 	.word	0x40010000

00403080 <update_timers>:

 void update_timers(int bpm) {
// 	// (SCK/2) / (bpm/60); SCK*60/2 = 960000
// 	// Offset is needed, possible not with the crystals working
// 	REG_TC0_RC0 = (uint16_t)(960000/bpm - 420);
	if(bpm > 1) {
  403080:	2801      	cmp	r0, #1
  403082:	dd0e      	ble.n	4030a2 <update_timers+0x22>
	REG_TC0_CCR0 |= TC_CCR_CLKEN | TC_CCR_SWTRG;
//	REG_TC0_CCR1 |= TC_CCR_CLKEN | TC_CCR_SWTRG;
//	REG_TC0_CCR2 |= TC_CCR_CLKEN | TC_CCR_SWTRG;
 }

 void update_timers(int bpm) {
  403084:	b510      	push	{r4, lr}
  403086:	4604      	mov	r4, r0
// 	// (SCK/2) / (bpm/60); SCK*60/2 = 960000
// 	// Offset is needed, possible not with the crystals working
// 	REG_TC0_RC0 = (uint16_t)(960000/bpm - 420);
	if(bpm > 1) {
		REG_TC0_RC0 = (uint16_t)(75000/(bpm*res_to_int(resolution)));
  403088:	4b06      	ldr	r3, [pc, #24]	; (4030a4 <update_timers+0x24>)
  40308a:	7818      	ldrb	r0, [r3, #0]
  40308c:	4b06      	ldr	r3, [pc, #24]	; (4030a8 <update_timers+0x28>)
  40308e:	4798      	blx	r3
  403090:	fb04 f000 	mul.w	r0, r4, r0
  403094:	4c05      	ldr	r4, [pc, #20]	; (4030ac <update_timers+0x2c>)
  403096:	fb94 f0f0 	sdiv	r0, r4, r0
  40309a:	b280      	uxth	r0, r0
  40309c:	4b04      	ldr	r3, [pc, #16]	; (4030b0 <update_timers+0x30>)
  40309e:	6018      	str	r0, [r3, #0]
  4030a0:	bd10      	pop	{r4, pc}
  4030a2:	4770      	bx	lr
  4030a4:	20008708 	.word	0x20008708
  4030a8:	00402021 	.word	0x00402021
  4030ac:	000124f8 	.word	0x000124f8
  4030b0:	4001001c 	.word	0x4001001c

004030b4 <TC0_Handler>:
	}

 }

 void TC0_Handler() {
  4030b4:	b570      	push	{r4, r5, r6, lr}

// Step count timer
	 // Test code, normally trigger next step, output clock
	 if((REG_TC0_SR0 & TC_SR_CPCS) >= 1) {
  4030b6:	4b5d      	ldr	r3, [pc, #372]	; (40322c <TC0_Handler+0x178>)
  4030b8:	681b      	ldr	r3, [r3, #0]
  4030ba:	f013 0f10 	tst.w	r3, #16
  4030be:	d011      	beq.n	4030e4 <TC0_Handler+0x30>

		overflow_count ++;
  4030c0:	4a5b      	ldr	r2, [pc, #364]	; (403230 <TC0_Handler+0x17c>)
  4030c2:	8813      	ldrh	r3, [r2, #0]
  4030c4:	3301      	adds	r3, #1
  4030c6:	b29b      	uxth	r3, r3
  4030c8:	8013      	strh	r3, [r2, #0]

		//turn off gates for each channel
		if (overflow_count == note_length){ //note_length
  4030ca:	4a5a      	ldr	r2, [pc, #360]	; (403234 <TC0_Handler+0x180>)
  4030cc:	8812      	ldrh	r2, [r2, #0]
  4030ce:	429a      	cmp	r2, r3
  4030d0:	d108      	bne.n	4030e4 <TC0_Handler+0x30>
			DAC_write_gate_off(CHANNEL_1);
  4030d2:	2000      	movs	r0, #0
  4030d4:	4c58      	ldr	r4, [pc, #352]	; (403238 <TC0_Handler+0x184>)
  4030d6:	47a0      	blx	r4
			DAC_write_gate_off(CHANNEL_2);
  4030d8:	2001      	movs	r0, #1
  4030da:	47a0      	blx	r4
			DAC_write_gate_off(CHANNEL_3);
  4030dc:	2002      	movs	r0, #2
  4030de:	47a0      	blx	r4
			DAC_write_gate_off(CHANNEL_4);
  4030e0:	2003      	movs	r0, #3
  4030e2:	47a0      	blx	r4
		}
 }

	 if(overflow_count >= 40000) {
  4030e4:	4b52      	ldr	r3, [pc, #328]	; (403230 <TC0_Handler+0x17c>)
  4030e6:	881a      	ldrh	r2, [r3, #0]
  4030e8:	f649 433f 	movw	r3, #39999	; 0x9c3f
  4030ec:	429a      	cmp	r2, r3
  4030ee:	d97e      	bls.n	4031ee <TC0_Handler+0x13a>

		 if (curr_step == 15){
  4030f0:	4b52      	ldr	r3, [pc, #328]	; (40323c <TC0_Handler+0x188>)
  4030f2:	781b      	ldrb	r3, [r3, #0]
  4030f4:	2b0f      	cmp	r3, #15
  4030f6:	d121      	bne.n	40313c <TC0_Handler+0x88>
			 //increment to next page or go back to first page

			 //update display page
			 if (curr_page < page_loop){
  4030f8:	4b51      	ldr	r3, [pc, #324]	; (403240 <TC0_Handler+0x18c>)
  4030fa:	781b      	ldrb	r3, [r3, #0]
  4030fc:	4a51      	ldr	r2, [pc, #324]	; (403244 <TC0_Handler+0x190>)
  4030fe:	7812      	ldrb	r2, [r2, #0]
  403100:	429a      	cmp	r2, r3
  403102:	d903      	bls.n	40310c <TC0_Handler+0x58>
				curr_page++;
  403104:	3301      	adds	r3, #1
  403106:	4a4e      	ldr	r2, [pc, #312]	; (403240 <TC0_Handler+0x18c>)
  403108:	7013      	strb	r3, [r2, #0]
  40310a:	e002      	b.n	403112 <TC0_Handler+0x5e>
			 }
			 else{
				curr_page = 0;
  40310c:	2200      	movs	r2, #0
  40310e:	4b4c      	ldr	r3, [pc, #304]	; (403240 <TC0_Handler+0x18c>)
  403110:	701a      	strb	r2, [r3, #0]
  403112:	4b4d      	ldr	r3, [pc, #308]	; (403248 <TC0_Handler+0x194>)
  403114:	494d      	ldr	r1, [pc, #308]	; (40324c <TC0_Handler+0x198>)
  403116:	1d1c      	adds	r4, r3, #4
			 for (int i = 0; i < 4; i++){
				if (curr_page_ch[i] < page_loop_ch[i]){
					curr_page_ch[i]++;
				}
				else{
					curr_page_ch[i] = 0;
  403118:	2500      	movs	r5, #0
				curr_page = 0;
			 }

			 //update note / page for each channel output
			 for (int i = 0; i < 4; i++){
				if (curr_page_ch[i] < page_loop_ch[i]){
  40311a:	f813 2b01 	ldrb.w	r2, [r3], #1
  40311e:	f811 0b01 	ldrb.w	r0, [r1], #1
  403122:	4282      	cmp	r2, r0
					curr_page_ch[i]++;
  403124:	bf3a      	itte	cc
  403126:	3201      	addcc	r2, #1
  403128:	f803 2c01 	strbcc.w	r2, [r3, #-1]
				}
				else{
					curr_page_ch[i] = 0;
  40312c:	f803 5c01 	strbcs.w	r5, [r3, #-1]
			 else{
				curr_page = 0;
			 }

			 //update note / page for each channel output
			 for (int i = 0; i < 4; i++){
  403130:	42a3      	cmp	r3, r4
  403132:	d1f2      	bne.n	40311a <TC0_Handler+0x66>
				}
			 }


			 //return to first step on next page
			 curr_step = 0;
  403134:	2200      	movs	r2, #0
  403136:	4b41      	ldr	r3, [pc, #260]	; (40323c <TC0_Handler+0x188>)
  403138:	701a      	strb	r2, [r3, #0]
  40313a:	e002      	b.n	403142 <TC0_Handler+0x8e>
		 }
		 else{
			 curr_step++;
  40313c:	3301      	adds	r3, #1
  40313e:	4a3f      	ldr	r2, [pc, #252]	; (40323c <TC0_Handler+0x188>)
  403140:	7013      	strb	r3, [r2, #0]
		 }

		 SPI_led_init();
  403142:	4b43      	ldr	r3, [pc, #268]	; (403250 <TC0_Handler+0x19c>)
  403144:	4798      	blx	r3
		 leds_update_cursor(curr_step);
  403146:	4c3d      	ldr	r4, [pc, #244]	; (40323c <TC0_Handler+0x188>)
  403148:	7820      	ldrb	r0, [r4, #0]
  40314a:	4b42      	ldr	r3, [pc, #264]	; (403254 <TC0_Handler+0x1a0>)
  40314c:	4798      	blx	r3

		 //update the CVs for each channel
		 DAC_write_cv(notes_get(curr_step, CHANNEL_1), CHANNEL_1);
  40314e:	2100      	movs	r1, #0
  403150:	7820      	ldrb	r0, [r4, #0]
  403152:	4e41      	ldr	r6, [pc, #260]	; (403258 <TC0_Handler+0x1a4>)
  403154:	47b0      	blx	r6
  403156:	2100      	movs	r1, #0
  403158:	4d40      	ldr	r5, [pc, #256]	; (40325c <TC0_Handler+0x1a8>)
  40315a:	47a8      	blx	r5
		 DAC_write_cv(notes_get(curr_step, CHANNEL_2), CHANNEL_2);
  40315c:	2101      	movs	r1, #1
  40315e:	7820      	ldrb	r0, [r4, #0]
  403160:	47b0      	blx	r6
  403162:	2101      	movs	r1, #1
  403164:	47a8      	blx	r5
		 DAC_write_cv(notes_get(curr_step, CHANNEL_3), CHANNEL_3);
  403166:	2102      	movs	r1, #2
  403168:	7820      	ldrb	r0, [r4, #0]
  40316a:	47b0      	blx	r6
  40316c:	2102      	movs	r1, #2
  40316e:	47a8      	blx	r5
		 DAC_write_cv(notes_get(curr_step, CHANNEL_4), CHANNEL_4);
  403170:	2103      	movs	r1, #3
  403172:	7820      	ldrb	r0, [r4, #0]
  403174:	47b0      	blx	r6
  403176:	2103      	movs	r1, #3
  403178:	47a8      	blx	r5

		 //update the gates for each channel
		 if ( (notes_status_get(curr_step, CHANNEL_1) == 1) && channel_mute[CHANNEL_1] == 0){
  40317a:	2100      	movs	r1, #0
  40317c:	7820      	ldrb	r0, [r4, #0]
  40317e:	4b38      	ldr	r3, [pc, #224]	; (403260 <TC0_Handler+0x1ac>)
  403180:	4798      	blx	r3
  403182:	2801      	cmp	r0, #1
  403184:	d105      	bne.n	403192 <TC0_Handler+0xde>
  403186:	4b37      	ldr	r3, [pc, #220]	; (403264 <TC0_Handler+0x1b0>)
  403188:	781b      	ldrb	r3, [r3, #0]
  40318a:	b913      	cbnz	r3, 403192 <TC0_Handler+0xde>
			 DAC_write_gate_on(CHANNEL_1);
  40318c:	2000      	movs	r0, #0
  40318e:	4b36      	ldr	r3, [pc, #216]	; (403268 <TC0_Handler+0x1b4>)
  403190:	4798      	blx	r3
		 }
		 if ( (notes_status_get(curr_step, CHANNEL_2) == 1) && channel_mute[CHANNEL_2] == 0){
  403192:	2101      	movs	r1, #1
  403194:	4b29      	ldr	r3, [pc, #164]	; (40323c <TC0_Handler+0x188>)
  403196:	7818      	ldrb	r0, [r3, #0]
  403198:	4b31      	ldr	r3, [pc, #196]	; (403260 <TC0_Handler+0x1ac>)
  40319a:	4798      	blx	r3
  40319c:	2801      	cmp	r0, #1
  40319e:	d104      	bne.n	4031aa <TC0_Handler+0xf6>
  4031a0:	4b30      	ldr	r3, [pc, #192]	; (403264 <TC0_Handler+0x1b0>)
  4031a2:	785b      	ldrb	r3, [r3, #1]
  4031a4:	b90b      	cbnz	r3, 4031aa <TC0_Handler+0xf6>
			 DAC_write_gate_on(CHANNEL_2);
  4031a6:	4b30      	ldr	r3, [pc, #192]	; (403268 <TC0_Handler+0x1b4>)
  4031a8:	4798      	blx	r3
		 }
		 if ( (notes_status_get(curr_step, CHANNEL_3) == 1) && channel_mute[CHANNEL_3] == 0){
  4031aa:	2102      	movs	r1, #2
  4031ac:	4b23      	ldr	r3, [pc, #140]	; (40323c <TC0_Handler+0x188>)
  4031ae:	7818      	ldrb	r0, [r3, #0]
  4031b0:	4b2b      	ldr	r3, [pc, #172]	; (403260 <TC0_Handler+0x1ac>)
  4031b2:	4798      	blx	r3
  4031b4:	2801      	cmp	r0, #1
  4031b6:	d105      	bne.n	4031c4 <TC0_Handler+0x110>
  4031b8:	4b2a      	ldr	r3, [pc, #168]	; (403264 <TC0_Handler+0x1b0>)
  4031ba:	789b      	ldrb	r3, [r3, #2]
  4031bc:	b913      	cbnz	r3, 4031c4 <TC0_Handler+0x110>
			 DAC_write_gate_on(CHANNEL_3);
  4031be:	2002      	movs	r0, #2
  4031c0:	4b29      	ldr	r3, [pc, #164]	; (403268 <TC0_Handler+0x1b4>)
  4031c2:	4798      	blx	r3
		 }
		 if ( (notes_status_get(curr_step, CHANNEL_4) == 1) && channel_mute[CHANNEL_4] == 0){
  4031c4:	2103      	movs	r1, #3
  4031c6:	4b1d      	ldr	r3, [pc, #116]	; (40323c <TC0_Handler+0x188>)
  4031c8:	7818      	ldrb	r0, [r3, #0]
  4031ca:	4b25      	ldr	r3, [pc, #148]	; (403260 <TC0_Handler+0x1ac>)
  4031cc:	4798      	blx	r3
  4031ce:	2801      	cmp	r0, #1
  4031d0:	d105      	bne.n	4031de <TC0_Handler+0x12a>
  4031d2:	4b24      	ldr	r3, [pc, #144]	; (403264 <TC0_Handler+0x1b0>)
  4031d4:	78db      	ldrb	r3, [r3, #3]
  4031d6:	b913      	cbnz	r3, 4031de <TC0_Handler+0x12a>
			 DAC_write_gate_on(CHANNEL_4);
  4031d8:	2003      	movs	r0, #3
  4031da:	4b23      	ldr	r3, [pc, #140]	; (403268 <TC0_Handler+0x1b4>)
  4031dc:	4798      	blx	r3
		 }
	
		 REG_ADC_CR |= ADC_CR_START;
  4031de:	4a23      	ldr	r2, [pc, #140]	; (40326c <TC0_Handler+0x1b8>)
  4031e0:	6813      	ldr	r3, [r2, #0]
  4031e2:	f043 0302 	orr.w	r3, r3, #2
  4031e6:	6013      	str	r3, [r2, #0]
		 overflow_count = 0;
  4031e8:	2200      	movs	r2, #0
  4031ea:	4b11      	ldr	r3, [pc, #68]	; (403230 <TC0_Handler+0x17c>)
  4031ec:	801a      	strh	r2, [r3, #0]
	 }

// Timeout timer for note displays
	if((REG_TC0_SR1 & TC_SR_CPCS) >= 1) {
  4031ee:	4b20      	ldr	r3, [pc, #128]	; (403270 <TC0_Handler+0x1bc>)
  4031f0:	681b      	ldr	r3, [r3, #0]
  4031f2:	f013 0f10 	tst.w	r3, #16
  4031f6:	d003      	beq.n	403200 <TC0_Handler+0x14c>
		note_overflow_count++;
  4031f8:	4a1e      	ldr	r2, [pc, #120]	; (403274 <TC0_Handler+0x1c0>)
  4031fa:	8813      	ldrh	r3, [r2, #0]
  4031fc:	3301      	adds	r3, #1
  4031fe:	8013      	strh	r3, [r2, #0]
	}

	if (note_overflow_count >= 10000){
  403200:	4b1c      	ldr	r3, [pc, #112]	; (403274 <TC0_Handler+0x1c0>)
  403202:	881a      	ldrh	r2, [r3, #0]
  403204:	f242 730f 	movw	r3, #9999	; 0x270f
  403208:	429a      	cmp	r2, r3
  40320a:	d90d      	bls.n	403228 <TC0_Handler+0x174>
		pattern_clr = 0;
  40320c:	2300      	movs	r3, #0
  40320e:	4a1a      	ldr	r2, [pc, #104]	; (403278 <TC0_Handler+0x1c4>)
  403210:	7013      	strb	r3, [r2, #0]
		note_overflow_count = 0;
  403212:	4a18      	ldr	r2, [pc, #96]	; (403274 <TC0_Handler+0x1c0>)
  403214:	8013      	strh	r3, [r2, #0]
		REG_TC0_CCR1 |= TC_CCR_CLKDIS;
  403216:	4a19      	ldr	r2, [pc, #100]	; (40327c <TC0_Handler+0x1c8>)
  403218:	6813      	ldr	r3, [r2, #0]
  40321a:	f043 0302 	orr.w	r3, r3, #2
  40321e:	6013      	str	r3, [r2, #0]
		pattern_display(curr_pattern);
  403220:	4b17      	ldr	r3, [pc, #92]	; (403280 <TC0_Handler+0x1cc>)
  403222:	7818      	ldrb	r0, [r3, #0]
  403224:	4b17      	ldr	r3, [pc, #92]	; (403284 <TC0_Handler+0x1d0>)
  403226:	4798      	blx	r3
  403228:	bd70      	pop	{r4, r5, r6, pc}
  40322a:	bf00      	nop
  40322c:	40010020 	.word	0x40010020
  403230:	20008714 	.word	0x20008714
  403234:	2000872c 	.word	0x2000872c
  403238:	00400435 	.word	0x00400435
  40323c:	2000871c 	.word	0x2000871c
  403240:	2000872e 	.word	0x2000872e
  403244:	2000870c 	.word	0x2000870c
  403248:	20008710 	.word	0x20008710
  40324c:	20008728 	.word	0x20008728
  403250:	00402bd5 	.word	0x00402bd5
  403254:	00401c61 	.word	0x00401c61
  403258:	00402d6d 	.word	0x00402d6d
  40325c:	00400309 	.word	0x00400309
  403260:	00402df1 	.word	0x00402df1
  403264:	20008720 	.word	0x20008720
  403268:	004003fd 	.word	0x004003fd
  40326c:	40038000 	.word	0x40038000
  403270:	40010060 	.word	0x40010060
  403274:	20008702 	.word	0x20008702
  403278:	20008731 	.word	0x20008731
  40327c:	40010040 	.word	0x40010040
  403280:	20008700 	.word	0x20008700
  403284:	00400d39 	.word	0x00400d39

00403288 <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
  403288:	4770      	bx	lr
  40328a:	bf00      	nop

0040328c <sysclk_init>:

	SystemCoreClockUpdate();
}

void sysclk_init(void)
{
  40328c:	b510      	push	{r4, lr}
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  40328e:	480e      	ldr	r0, [pc, #56]	; (4032c8 <sysclk_init+0x3c>)
  403290:	4b0e      	ldr	r3, [pc, #56]	; (4032cc <sysclk_init+0x40>)
  403292:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
		break;

	case OSC_MAINCK_8M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
  403294:	2010      	movs	r0, #16
  403296:	4b0e      	ldr	r3, [pc, #56]	; (4032d0 <sysclk_init+0x44>)
  403298:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  40329a:	4c0e      	ldr	r4, [pc, #56]	; (4032d4 <sysclk_init+0x48>)
  40329c:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  40329e:	2800      	cmp	r0, #0
  4032a0:	d0fc      	beq.n	40329c <sysclk_init+0x10>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  4032a2:	4b0d      	ldr	r3, [pc, #52]	; (4032d8 <sysclk_init+0x4c>)
  4032a4:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  4032a6:	4a0d      	ldr	r2, [pc, #52]	; (4032dc <sysclk_init+0x50>)
  4032a8:	4b0d      	ldr	r3, [pc, #52]	; (4032e0 <sysclk_init+0x54>)
  4032aa:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
  4032ac:	4c0d      	ldr	r4, [pc, #52]	; (4032e4 <sysclk_init+0x58>)
  4032ae:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  4032b0:	2800      	cmp	r0, #0
  4032b2:	d0fc      	beq.n	4032ae <sysclk_init+0x22>

		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  4032b4:	2010      	movs	r0, #16
  4032b6:	4b0c      	ldr	r3, [pc, #48]	; (4032e8 <sysclk_init+0x5c>)
  4032b8:	4798      	blx	r3
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  4032ba:	4b0c      	ldr	r3, [pc, #48]	; (4032ec <sysclk_init+0x60>)
  4032bc:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  4032be:	4802      	ldr	r0, [pc, #8]	; (4032c8 <sysclk_init+0x3c>)
  4032c0:	4b02      	ldr	r3, [pc, #8]	; (4032cc <sysclk_init+0x40>)
  4032c2:	4798      	blx	r3
  4032c4:	bd10      	pop	{r4, pc}
  4032c6:	bf00      	nop
  4032c8:	05f5e100 	.word	0x05f5e100
  4032cc:	00403581 	.word	0x00403581
  4032d0:	00403359 	.word	0x00403359
  4032d4:	004033a5 	.word	0x004033a5
  4032d8:	004033b5 	.word	0x004033b5
  4032dc:	20183f01 	.word	0x20183f01
  4032e0:	400e0400 	.word	0x400e0400
  4032e4:	004033c5 	.word	0x004033c5
  4032e8:	004032f1 	.word	0x004032f1
  4032ec:	00403471 	.word	0x00403471

004032f0 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  4032f0:	4a18      	ldr	r2, [pc, #96]	; (403354 <pmc_switch_mck_to_pllack+0x64>)
  4032f2:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4032f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  4032f8:	4318      	orrs	r0, r3
  4032fa:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4032fc:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4032fe:	f013 0f08 	tst.w	r3, #8
  403302:	d003      	beq.n	40330c <pmc_switch_mck_to_pllack+0x1c>
  403304:	e009      	b.n	40331a <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  403306:	3b01      	subs	r3, #1
  403308:	d103      	bne.n	403312 <pmc_switch_mck_to_pllack+0x22>
  40330a:	e01e      	b.n	40334a <pmc_switch_mck_to_pllack+0x5a>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40330c:	f44f 6300 	mov.w	r3, #2048	; 0x800
  403310:	4910      	ldr	r1, [pc, #64]	; (403354 <pmc_switch_mck_to_pllack+0x64>)
  403312:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  403314:	f012 0f08 	tst.w	r2, #8
  403318:	d0f5      	beq.n	403306 <pmc_switch_mck_to_pllack+0x16>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  40331a:	4a0e      	ldr	r2, [pc, #56]	; (403354 <pmc_switch_mck_to_pllack+0x64>)
  40331c:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40331e:	f023 0303 	bic.w	r3, r3, #3
  403322:	f043 0302 	orr.w	r3, r3, #2
  403326:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  403328:	6e90      	ldr	r0, [r2, #104]	; 0x68
  40332a:	f010 0008 	ands.w	r0, r0, #8
  40332e:	d004      	beq.n	40333a <pmc_switch_mck_to_pllack+0x4a>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
  403330:	2000      	movs	r0, #0
  403332:	4770      	bx	lr
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
  403334:	3b01      	subs	r3, #1
  403336:	d103      	bne.n	403340 <pmc_switch_mck_to_pllack+0x50>
  403338:	e009      	b.n	40334e <pmc_switch_mck_to_pllack+0x5e>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40333a:	f44f 6300 	mov.w	r3, #2048	; 0x800
  40333e:	4905      	ldr	r1, [pc, #20]	; (403354 <pmc_switch_mck_to_pllack+0x64>)
  403340:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  403342:	f012 0f08 	tst.w	r2, #8
  403346:	d0f5      	beq.n	403334 <pmc_switch_mck_to_pllack+0x44>
  403348:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  40334a:	2001      	movs	r0, #1
  40334c:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  40334e:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  403350:	4770      	bx	lr
  403352:	bf00      	nop
  403354:	400e0400 	.word	0x400e0400

00403358 <pmc_switch_mainck_to_fastrc>:
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
  403358:	4b11      	ldr	r3, [pc, #68]	; (4033a0 <pmc_switch_mainck_to_fastrc+0x48>)
  40335a:	6a1a      	ldr	r2, [r3, #32]
  40335c:	f442 125c 	orr.w	r2, r2, #3604480	; 0x370000
  403360:	f042 0208 	orr.w	r2, r2, #8
  403364:	621a      	str	r2, [r3, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  403366:	461a      	mov	r2, r3
  403368:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40336a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
  40336e:	d0fb      	beq.n	403368 <pmc_switch_mainck_to_fastrc+0x10>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  403370:	4a0b      	ldr	r2, [pc, #44]	; (4033a0 <pmc_switch_mainck_to_fastrc+0x48>)
  403372:	6a13      	ldr	r3, [r2, #32]
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
  403374:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  403378:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  40337c:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  403380:	4303      	orrs	r3, r0

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  403382:	6213      	str	r3, [r2, #32]
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  403384:	6e93      	ldr	r3, [r2, #104]	; 0x68
  403386:	f413 3f00 	tst.w	r3, #131072	; 0x20000
  40338a:	d0fb      	beq.n	403384 <pmc_switch_mainck_to_fastrc+0x2c>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  40338c:	4a04      	ldr	r2, [pc, #16]	; (4033a0 <pmc_switch_mainck_to_fastrc+0x48>)
  40338e:	6a13      	ldr	r3, [r2, #32]
  403390:	f023 739b 	bic.w	r3, r3, #20316160	; 0x1360000
  403394:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  403398:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  40339c:	6213      	str	r3, [r2, #32]
  40339e:	4770      	bx	lr
  4033a0:	400e0400 	.word	0x400e0400

004033a4 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  4033a4:	4b02      	ldr	r3, [pc, #8]	; (4033b0 <pmc_osc_is_ready_mainck+0xc>)
  4033a6:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4033a8:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  4033ac:	4770      	bx	lr
  4033ae:	bf00      	nop
  4033b0:	400e0400 	.word	0x400e0400

004033b4 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  4033b4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  4033b8:	4b01      	ldr	r3, [pc, #4]	; (4033c0 <pmc_disable_pllack+0xc>)
  4033ba:	629a      	str	r2, [r3, #40]	; 0x28
  4033bc:	4770      	bx	lr
  4033be:	bf00      	nop
  4033c0:	400e0400 	.word	0x400e0400

004033c4 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  4033c4:	4b02      	ldr	r3, [pc, #8]	; (4033d0 <pmc_is_locked_pllack+0xc>)
  4033c6:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4033c8:	f000 0002 	and.w	r0, r0, #2
  4033cc:	4770      	bx	lr
  4033ce:	bf00      	nop
  4033d0:	400e0400 	.word	0x400e0400

004033d4 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  4033d4:	e7fe      	b.n	4033d4 <Dummy_Handler>
  4033d6:	bf00      	nop

004033d8 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  4033d8:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
  4033da:	4b19      	ldr	r3, [pc, #100]	; (403440 <Reset_Handler+0x68>)
  4033dc:	4a19      	ldr	r2, [pc, #100]	; (403444 <Reset_Handler+0x6c>)
  4033de:	429a      	cmp	r2, r3
  4033e0:	d003      	beq.n	4033ea <Reset_Handler+0x12>
		for (; pDest < &_erelocate;) {
  4033e2:	4b19      	ldr	r3, [pc, #100]	; (403448 <Reset_Handler+0x70>)
  4033e4:	4a16      	ldr	r2, [pc, #88]	; (403440 <Reset_Handler+0x68>)
  4033e6:	429a      	cmp	r2, r3
  4033e8:	d304      	bcc.n	4033f4 <Reset_Handler+0x1c>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  4033ea:	4b18      	ldr	r3, [pc, #96]	; (40344c <Reset_Handler+0x74>)
  4033ec:	4a18      	ldr	r2, [pc, #96]	; (403450 <Reset_Handler+0x78>)
  4033ee:	429a      	cmp	r2, r3
  4033f0:	d30f      	bcc.n	403412 <Reset_Handler+0x3a>
  4033f2:	e01a      	b.n	40342a <Reset_Handler+0x52>
  4033f4:	4912      	ldr	r1, [pc, #72]	; (403440 <Reset_Handler+0x68>)
  4033f6:	4b17      	ldr	r3, [pc, #92]	; (403454 <Reset_Handler+0x7c>)
  4033f8:	1a5b      	subs	r3, r3, r1
  4033fa:	f023 0303 	bic.w	r3, r3, #3
  4033fe:	3304      	adds	r3, #4
  403400:	4a10      	ldr	r2, [pc, #64]	; (403444 <Reset_Handler+0x6c>)
  403402:	4413      	add	r3, r2
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
			*pDest++ = *pSrc++;
  403404:	f852 0b04 	ldr.w	r0, [r2], #4
  403408:	f841 0b04 	str.w	r0, [r1], #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
  40340c:	429a      	cmp	r2, r3
  40340e:	d1f9      	bne.n	403404 <Reset_Handler+0x2c>
  403410:	e7eb      	b.n	4033ea <Reset_Handler+0x12>
  403412:	4b11      	ldr	r3, [pc, #68]	; (403458 <Reset_Handler+0x80>)
  403414:	4a11      	ldr	r2, [pc, #68]	; (40345c <Reset_Handler+0x84>)
  403416:	1ad2      	subs	r2, r2, r3
  403418:	f022 0203 	bic.w	r2, r2, #3
  40341c:	441a      	add	r2, r3
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  40341e:	3b04      	subs	r3, #4
		*pDest++ = 0;
  403420:	2100      	movs	r1, #0
  403422:	f843 1b04 	str.w	r1, [r3], #4
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  403426:	4293      	cmp	r3, r2
  403428:	d1fb      	bne.n	403422 <Reset_Handler+0x4a>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  40342a:	4a0d      	ldr	r2, [pc, #52]	; (403460 <Reset_Handler+0x88>)
  40342c:	4b0d      	ldr	r3, [pc, #52]	; (403464 <Reset_Handler+0x8c>)
  40342e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  403432:	6093      	str	r3, [r2, #8]

	/* Initialize the C library */
	__libc_init_array();
  403434:	4b0c      	ldr	r3, [pc, #48]	; (403468 <Reset_Handler+0x90>)
  403436:	4798      	blx	r3

	/* Branch to main function */
	main();
  403438:	4b0c      	ldr	r3, [pc, #48]	; (40346c <Reset_Handler+0x94>)
  40343a:	4798      	blx	r3
  40343c:	e7fe      	b.n	40343c <Reset_Handler+0x64>
  40343e:	bf00      	nop
  403440:	20000000 	.word	0x20000000
  403444:	00405160 	.word	0x00405160
  403448:	20000628 	.word	0x20000628
  40344c:	20008740 	.word	0x20008740
  403450:	20000628 	.word	0x20000628
  403454:	20000627 	.word	0x20000627
  403458:	2000062c 	.word	0x2000062c
  40345c:	20008743 	.word	0x20008743
  403460:	e000ed00 	.word	0xe000ed00
  403464:	00400000 	.word	0x00400000
  403468:	00403e7d 	.word	0x00403e7d
  40346c:	0040383d 	.word	0x0040383d

00403470 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) {
  403470:	4b3c      	ldr	r3, [pc, #240]	; (403564 <SystemCoreClockUpdate+0xf4>)
  403472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  403474:	f003 0303 	and.w	r3, r3, #3
  403478:	2b01      	cmp	r3, #1
  40347a:	d00f      	beq.n	40349c <SystemCoreClockUpdate+0x2c>
  40347c:	b113      	cbz	r3, 403484 <SystemCoreClockUpdate+0x14>
  40347e:	2b02      	cmp	r3, #2
  403480:	d029      	beq.n	4034d6 <SystemCoreClockUpdate+0x66>
  403482:	e057      	b.n	403534 <SystemCoreClockUpdate+0xc4>
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
  403484:	4b38      	ldr	r3, [pc, #224]	; (403568 <SystemCoreClockUpdate+0xf8>)
  403486:	695b      	ldr	r3, [r3, #20]
  403488:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
  40348c:	bf14      	ite	ne
  40348e:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
  403492:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  403496:	4b35      	ldr	r3, [pc, #212]	; (40356c <SystemCoreClockUpdate+0xfc>)
  403498:	601a      	str	r2, [r3, #0]
  40349a:	e04b      	b.n	403534 <SystemCoreClockUpdate+0xc4>
		}
		break;

	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
  40349c:	4b31      	ldr	r3, [pc, #196]	; (403564 <SystemCoreClockUpdate+0xf4>)
  40349e:	6a1b      	ldr	r3, [r3, #32]
  4034a0:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4034a4:	d003      	beq.n	4034ae <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
  4034a6:	4a32      	ldr	r2, [pc, #200]	; (403570 <SystemCoreClockUpdate+0x100>)
  4034a8:	4b30      	ldr	r3, [pc, #192]	; (40356c <SystemCoreClockUpdate+0xfc>)
  4034aa:	601a      	str	r2, [r3, #0]
  4034ac:	e042      	b.n	403534 <SystemCoreClockUpdate+0xc4>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4034ae:	4a31      	ldr	r2, [pc, #196]	; (403574 <SystemCoreClockUpdate+0x104>)
  4034b0:	4b2e      	ldr	r3, [pc, #184]	; (40356c <SystemCoreClockUpdate+0xfc>)
  4034b2:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
  4034b4:	4b2b      	ldr	r3, [pc, #172]	; (403564 <SystemCoreClockUpdate+0xf4>)
  4034b6:	6a1b      	ldr	r3, [r3, #32]
  4034b8:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4034bc:	2b10      	cmp	r3, #16
  4034be:	d002      	beq.n	4034c6 <SystemCoreClockUpdate+0x56>
  4034c0:	2b20      	cmp	r3, #32
  4034c2:	d004      	beq.n	4034ce <SystemCoreClockUpdate+0x5e>
  4034c4:	e036      	b.n	403534 <SystemCoreClockUpdate+0xc4>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;

			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
  4034c6:	4a2c      	ldr	r2, [pc, #176]	; (403578 <SystemCoreClockUpdate+0x108>)
  4034c8:	4b28      	ldr	r3, [pc, #160]	; (40356c <SystemCoreClockUpdate+0xfc>)
  4034ca:	601a      	str	r2, [r3, #0]
				break;
  4034cc:	e032      	b.n	403534 <SystemCoreClockUpdate+0xc4>

			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
  4034ce:	4a28      	ldr	r2, [pc, #160]	; (403570 <SystemCoreClockUpdate+0x100>)
  4034d0:	4b26      	ldr	r3, [pc, #152]	; (40356c <SystemCoreClockUpdate+0xfc>)
  4034d2:	601a      	str	r2, [r3, #0]
				break;
  4034d4:	e02e      	b.n	403534 <SystemCoreClockUpdate+0xc4>
			}
		}
		break;

	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
  4034d6:	4b23      	ldr	r3, [pc, #140]	; (403564 <SystemCoreClockUpdate+0xf4>)
  4034d8:	6a1b      	ldr	r3, [r3, #32]
  4034da:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4034de:	d003      	beq.n	4034e8 <SystemCoreClockUpdate+0x78>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
  4034e0:	4a23      	ldr	r2, [pc, #140]	; (403570 <SystemCoreClockUpdate+0x100>)
  4034e2:	4b22      	ldr	r3, [pc, #136]	; (40356c <SystemCoreClockUpdate+0xfc>)
  4034e4:	601a      	str	r2, [r3, #0]
  4034e6:	e012      	b.n	40350e <SystemCoreClockUpdate+0x9e>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4034e8:	4a22      	ldr	r2, [pc, #136]	; (403574 <SystemCoreClockUpdate+0x104>)
  4034ea:	4b20      	ldr	r3, [pc, #128]	; (40356c <SystemCoreClockUpdate+0xfc>)
  4034ec:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
  4034ee:	4b1d      	ldr	r3, [pc, #116]	; (403564 <SystemCoreClockUpdate+0xf4>)
  4034f0:	6a1b      	ldr	r3, [r3, #32]
  4034f2:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4034f6:	2b10      	cmp	r3, #16
  4034f8:	d002      	beq.n	403500 <SystemCoreClockUpdate+0x90>
  4034fa:	2b20      	cmp	r3, #32
  4034fc:	d004      	beq.n	403508 <SystemCoreClockUpdate+0x98>
  4034fe:	e006      	b.n	40350e <SystemCoreClockUpdate+0x9e>
				/* So the 4MHz RC selection is forbidden */
				Assert(false);
				break;

			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
  403500:	4a1d      	ldr	r2, [pc, #116]	; (403578 <SystemCoreClockUpdate+0x108>)
  403502:	4b1a      	ldr	r3, [pc, #104]	; (40356c <SystemCoreClockUpdate+0xfc>)
  403504:	601a      	str	r2, [r3, #0]
				break;
  403506:	e002      	b.n	40350e <SystemCoreClockUpdate+0x9e>

			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
  403508:	4a19      	ldr	r2, [pc, #100]	; (403570 <SystemCoreClockUpdate+0x100>)
  40350a:	4b18      	ldr	r3, [pc, #96]	; (40356c <SystemCoreClockUpdate+0xfc>)
  40350c:	601a      	str	r2, [r3, #0]
			default:
				break;
			}
		}

		if ((uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
  40350e:	4b15      	ldr	r3, [pc, #84]	; (403564 <SystemCoreClockUpdate+0xf4>)
  403510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  403512:	f003 0303 	and.w	r3, r3, #3
  403516:	2b02      	cmp	r3, #2
  403518:	d10c      	bne.n	403534 <SystemCoreClockUpdate+0xc4>
				PMC_MCKR_CSS_PLLA_CLK) {
			SystemCoreClock *=
					((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  40351a:	4a12      	ldr	r2, [pc, #72]	; (403564 <SystemCoreClockUpdate+0xf4>)
  40351c:	6a93      	ldr	r3, [r2, #40]	; 0x28
					>> CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  40351e:	6a92      	ldr	r2, [r2, #40]	; 0x28
  403520:	4812      	ldr	r0, [pc, #72]	; (40356c <SystemCoreClockUpdate+0xfc>)
  403522:	f3c3 410a 	ubfx	r1, r3, #16, #11
  403526:	6803      	ldr	r3, [r0, #0]
  403528:	fb01 3303 	mla	r3, r1, r3, r3
  40352c:	b2d2      	uxtb	r2, r2
  40352e:	fbb3 f3f2 	udiv	r3, r3, r2
  403532:	6003      	str	r3, [r0, #0]

	default:
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
  403534:	4b0b      	ldr	r3, [pc, #44]	; (403564 <SystemCoreClockUpdate+0xf4>)
  403536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  403538:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40353c:	2b70      	cmp	r3, #112	; 0x70
  40353e:	d107      	bne.n	403550 <SystemCoreClockUpdate+0xe0>
		SystemCoreClock /= 3U;
  403540:	4a0a      	ldr	r2, [pc, #40]	; (40356c <SystemCoreClockUpdate+0xfc>)
  403542:	6813      	ldr	r3, [r2, #0]
  403544:	490d      	ldr	r1, [pc, #52]	; (40357c <SystemCoreClockUpdate+0x10c>)
  403546:	fba1 1303 	umull	r1, r3, r1, r3
  40354a:	085b      	lsrs	r3, r3, #1
  40354c:	6013      	str	r3, [r2, #0]
  40354e:	4770      	bx	lr
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >>
  403550:	4b04      	ldr	r3, [pc, #16]	; (403564 <SystemCoreClockUpdate+0xf4>)
  403552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  403554:	4905      	ldr	r1, [pc, #20]	; (40356c <SystemCoreClockUpdate+0xfc>)
  403556:	f3c3 1202 	ubfx	r2, r3, #4, #3
  40355a:	680b      	ldr	r3, [r1, #0]
  40355c:	40d3      	lsrs	r3, r2
  40355e:	600b      	str	r3, [r1, #0]
  403560:	4770      	bx	lr
  403562:	bf00      	nop
  403564:	400e0400 	.word	0x400e0400
  403568:	400e1410 	.word	0x400e1410
  40356c:	200001f8 	.word	0x200001f8
  403570:	00b71b00 	.word	0x00b71b00
  403574:	003d0900 	.word	0x003d0900
  403578:	007a1200 	.word	0x007a1200
  40357c:	aaaaaaab 	.word	0xaaaaaaab

00403580 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
  403580:	4b0f      	ldr	r3, [pc, #60]	; (4035c0 <system_init_flash+0x40>)
  403582:	4298      	cmp	r0, r3
  403584:	d804      	bhi.n	403590 <system_init_flash+0x10>
		EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  403586:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  40358a:	4b0e      	ldr	r3, [pc, #56]	; (4035c4 <system_init_flash+0x44>)
  40358c:	601a      	str	r2, [r3, #0]
  40358e:	4770      	bx	lr
	} else {
		if (ul_clk < CHIP_FREQ_FWS_1) {
  403590:	4b0d      	ldr	r3, [pc, #52]	; (4035c8 <system_init_flash+0x48>)
  403592:	4298      	cmp	r0, r3
  403594:	d803      	bhi.n	40359e <system_init_flash+0x1e>
			EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  403596:	4a0d      	ldr	r2, [pc, #52]	; (4035cc <system_init_flash+0x4c>)
  403598:	4b0a      	ldr	r3, [pc, #40]	; (4035c4 <system_init_flash+0x44>)
  40359a:	601a      	str	r2, [r3, #0]
  40359c:	4770      	bx	lr
		} else {
			if (ul_clk < CHIP_FREQ_FWS_2) {
  40359e:	4b0c      	ldr	r3, [pc, #48]	; (4035d0 <system_init_flash+0x50>)
  4035a0:	4298      	cmp	r0, r3
  4035a2:	d803      	bhi.n	4035ac <system_init_flash+0x2c>
				EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  4035a4:	4a0b      	ldr	r2, [pc, #44]	; (4035d4 <system_init_flash+0x54>)
  4035a6:	4b07      	ldr	r3, [pc, #28]	; (4035c4 <system_init_flash+0x44>)
  4035a8:	601a      	str	r2, [r3, #0]
  4035aa:	4770      	bx	lr
			} else {
				if (ul_clk < CHIP_FREQ_FWS_3) {
  4035ac:	4b0a      	ldr	r3, [pc, #40]	; (4035d8 <system_init_flash+0x58>)
  4035ae:	4298      	cmp	r0, r3
					EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  4035b0:	bf94      	ite	ls
  4035b2:	4a0a      	ldrls	r2, [pc, #40]	; (4035dc <system_init_flash+0x5c>)
				} else {
					EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  4035b4:	f04f 2204 	movhi.w	r2, #67109888	; 0x4000400
  4035b8:	4b02      	ldr	r3, [pc, #8]	; (4035c4 <system_init_flash+0x44>)
  4035ba:	601a      	str	r2, [r3, #0]
  4035bc:	4770      	bx	lr
  4035be:	bf00      	nop
  4035c0:	01312cff 	.word	0x01312cff
  4035c4:	400e0a00 	.word	0x400e0a00
  4035c8:	026259ff 	.word	0x026259ff
  4035cc:	04000100 	.word	0x04000100
  4035d0:	039386ff 	.word	0x039386ff
  4035d4:	04000200 	.word	0x04000200
  4035d8:	04c4b3ff 	.word	0x04c4b3ff
  4035dc:	04000300 	.word	0x04000300

004035e0 <init_IO_int>:
 #define MAX7314_inputPortLow 0x00
 #define MAX7314_inputPortHigh 0x01

 #define MAX7314_slaveAddress (uint8_t) 0b0100000 //7bit address when AD0 = GND

 void init_IO_int(){
  4035e0:	b470      	push	{r4, r5, r6}

	//enable clock for PIOB
	REG_PMC_PCER0 |= PMC_PCER0_PID12;
  4035e2:	4a2b      	ldr	r2, [pc, #172]	; (403690 <init_IO_int+0xb0>)
  4035e4:	6813      	ldr	r3, [r2, #0]
  4035e6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  4035ea:	6013      	str	r3, [r2, #0]

	//Set up PB10 as Button IO Expander Input
	REG_PIOB_PER |= PIO_PER_P10; //enable PIO controller
  4035ec:	4d29      	ldr	r5, [pc, #164]	; (403694 <init_IO_int+0xb4>)
  4035ee:	682b      	ldr	r3, [r5, #0]
  4035f0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
  4035f4:	602b      	str	r3, [r5, #0]
	REG_PIOB_ODR |= PIO_ODR_P10; //disable output
  4035f6:	4c28      	ldr	r4, [pc, #160]	; (403698 <init_IO_int+0xb8>)
  4035f8:	6823      	ldr	r3, [r4, #0]
  4035fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
  4035fe:	6023      	str	r3, [r4, #0]
	REG_PIOB_PPDDR |= PIO_PPDDR_P10; //disable pull-down resistor
  403600:	4826      	ldr	r0, [pc, #152]	; (40369c <init_IO_int+0xbc>)
  403602:	6803      	ldr	r3, [r0, #0]
  403604:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
  403608:	6003      	str	r3, [r0, #0]
	REG_PIOB_PUER |= PIO_PUER_P10;	//enable pull-up resistor
  40360a:	4925      	ldr	r1, [pc, #148]	; (4036a0 <init_IO_int+0xc0>)
  40360c:	680b      	ldr	r3, [r1, #0]
  40360e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
  403612:	600b      	str	r3, [r1, #0]
	REG_PIOB_IFSCER |= PIO_IFSCER_P10; //turn on slow clock debounce
  403614:	f602 4274 	addw	r2, r2, #3188	; 0xc74
  403618:	6813      	ldr	r3, [r2, #0]
  40361a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
  40361e:	6013      	str	r3, [r2, #0]
	REG_PIOB_IFER |= PIO_IFER_P10;	//start debounce filter
  403620:	4b20      	ldr	r3, [pc, #128]	; (4036a4 <init_IO_int+0xc4>)
  403622:	681e      	ldr	r6, [r3, #0]
  403624:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
  403628:	601e      	str	r6, [r3, #0]

	//Set up PB11 as Encoder IO Expander Input
	REG_PIOB_PER |= PIO_PER_P11; //enable PIO controller
  40362a:	682e      	ldr	r6, [r5, #0]
  40362c:	f446 6600 	orr.w	r6, r6, #2048	; 0x800
  403630:	602e      	str	r6, [r5, #0]
	REG_PIOB_ODR |= PIO_ODR_P11; //disable output
  403632:	6825      	ldr	r5, [r4, #0]
  403634:	f445 6500 	orr.w	r5, r5, #2048	; 0x800
  403638:	6025      	str	r5, [r4, #0]
	REG_PIOB_PPDDR |= PIO_PPDDR_P11; //disable pull-down resistor
  40363a:	6804      	ldr	r4, [r0, #0]
  40363c:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
  403640:	6004      	str	r4, [r0, #0]
	REG_PIOB_PUER |= PIO_PUER_P11;	//enable pull-up resistor
  403642:	6808      	ldr	r0, [r1, #0]
  403644:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
  403648:	6008      	str	r0, [r1, #0]
	REG_PIOB_IFSCER |= PIO_IFSCER_P11; //turn on slow clock debounce
  40364a:	6811      	ldr	r1, [r2, #0]
  40364c:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
  403650:	6011      	str	r1, [r2, #0]
	REG_PIOB_IFER |= PIO_IFER_P11;	//start debounce filter
  403652:	681a      	ldr	r2, [r3, #0]
  403654:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
  403658:	601a      	str	r2, [r3, #0]

	uint32_t flag_clear = REG_PIOB_ISR;	//clear left over interrupt flags
  40365a:	332c      	adds	r3, #44	; 0x2c
  40365c:	681b      	ldr	r3, [r3, #0]

	//Enable interrupts for PB10
	REG_PIOB_IER |= PIO_IER_P10;			//enable falling edge change interrupt
  40365e:	4a12      	ldr	r2, [pc, #72]	; (4036a8 <init_IO_int+0xc8>)
  403660:	6813      	ldr	r3, [r2, #0]
  403662:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
  403666:	6013      	str	r3, [r2, #0]
	REG_PIOB_FELLSR |= PIO_FELLSR_P10;
  403668:	4b10      	ldr	r3, [pc, #64]	; (4036ac <init_IO_int+0xcc>)
  40366a:	6819      	ldr	r1, [r3, #0]
  40366c:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
  403670:	6019      	str	r1, [r3, #0]

	//Enable interrupts for PB10
	REG_PIOB_IER |= PIO_IER_P11;			//enable falling edge change interrupt
  403672:	6811      	ldr	r1, [r2, #0]
  403674:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
  403678:	6011      	str	r1, [r2, #0]
	REG_PIOB_FELLSR |= PIO_FELLSR_P11;
  40367a:	681a      	ldr	r2, [r3, #0]
  40367c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
  403680:	601a      	str	r2, [r3, #0]
  403682:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  403686:	4b0a      	ldr	r3, [pc, #40]	; (4036b0 <init_IO_int+0xd0>)
  403688:	601a      	str	r2, [r3, #0]

	NVIC_EnableIRQ(PIOB_IRQn);

 }
  40368a:	bc70      	pop	{r4, r5, r6}
  40368c:	4770      	bx	lr
  40368e:	bf00      	nop
  403690:	400e0410 	.word	0x400e0410
  403694:	400e1000 	.word	0x400e1000
  403698:	400e1014 	.word	0x400e1014
  40369c:	400e1090 	.word	0x400e1090
  4036a0:	400e1064 	.word	0x400e1064
  4036a4:	400e1020 	.word	0x400e1020
  4036a8:	400e1040 	.word	0x400e1040
  4036ac:	400e10d0 	.word	0x400e10d0
  4036b0:	e000e100 	.word	0xe000e100

004036b4 <i2c_init>:

 void i2c_init(){

	REG_TWI0_CR = TWI_CR_SWRST;
  4036b4:	4b12      	ldr	r3, [pc, #72]	; (403700 <i2c_init+0x4c>)
  4036b6:	2280      	movs	r2, #128	; 0x80
  4036b8:	601a      	str	r2, [r3, #0]

	//enable peripheral clock for i2c using TWI0
	REG_PMC_PCER0 |= PMC_PCER0_PID19;
  4036ba:	4912      	ldr	r1, [pc, #72]	; (403704 <i2c_init+0x50>)
  4036bc:	680a      	ldr	r2, [r1, #0]
  4036be:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
  4036c2:	600a      	str	r2, [r1, #0]

	//disable GPIO control of i2c pins
	REG_PIOA_PDR |= PIO_PDR_P3;
  4036c4:	4a10      	ldr	r2, [pc, #64]	; (403708 <i2c_init+0x54>)
  4036c6:	6811      	ldr	r1, [r2, #0]
  4036c8:	f041 0108 	orr.w	r1, r1, #8
  4036cc:	6011      	str	r1, [r2, #0]
	REG_PIOA_PDR |= PIO_PDR_P4;
  4036ce:	6811      	ldr	r1, [r2, #0]
  4036d0:	f041 0110 	orr.w	r1, r1, #16
  4036d4:	6011      	str	r1, [r2, #0]

	// tlow = ((CLDIV * 2^CKDIV) + 4) * Tper
	// thigh = ((CHDIV * 2^CKDIV) + 4) * Tper
	// thigh = tlow => 400kHz (supposedly...)
	//set TWI0 clock to 400kHz (supported by IO expander)
	REG_TWI0_CWGR |= TWI_CWGR_CLDIV(121);
  4036d6:	f5a2 2248 	sub.w	r2, r2, #819200	; 0xc8000
  4036da:	f6a2 52f4 	subw	r2, r2, #3572	; 0xdf4
  4036de:	6811      	ldr	r1, [r2, #0]
  4036e0:	f041 0179 	orr.w	r1, r1, #121	; 0x79
  4036e4:	6011      	str	r1, [r2, #0]
	REG_TWI0_CWGR |= TWI_CWGR_CHDIV(121);
  4036e6:	6811      	ldr	r1, [r2, #0]
  4036e8:	f441 41f2 	orr.w	r1, r1, #30976	; 0x7900
  4036ec:	6011      	str	r1, [r2, #0]

	//disable slave mode & enable master mode
	REG_TWI0_CR |= TWI_CR_SVDIS;
  4036ee:	681a      	ldr	r2, [r3, #0]
  4036f0:	f042 0220 	orr.w	r2, r2, #32
  4036f4:	601a      	str	r2, [r3, #0]
	REG_TWI0_CR |= TWI_CR_MSEN;
  4036f6:	681a      	ldr	r2, [r3, #0]
  4036f8:	f042 0204 	orr.w	r2, r2, #4
  4036fc:	601a      	str	r2, [r3, #0]
  4036fe:	4770      	bx	lr
  403700:	40018000 	.word	0x40018000
  403704:	400e0410 	.word	0x400e0410
  403708:	400e0e04 	.word	0x400e0e04

0040370c <config_MAX7314>:
		}
	 }

 }

 void config_MAX7314(){
  40370c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403710:	b089      	sub	sp, #36	; 0x24
	twi_packet_t packet_tx;
	uint8_t config_data[] = {MAX7314_configRegister, 0x08};
  403712:	f8df 808c 	ldr.w	r8, [pc, #140]	; 4037a0 <config_MAX7314+0x94>
  403716:	af02      	add	r7, sp, #8
  403718:	f8b8 3000 	ldrh.w	r3, [r8]
  40371c:	f8ad 3008 	strh.w	r3, [sp, #8]

	/* Configure the Chip Config Register */
	packet_tx.chip        = 0b0100000;
  403720:	2620      	movs	r6, #32
  403722:	f88d 601c 	strb.w	r6, [sp, #28]
	packet_tx.addr_length = 0;
  403726:	2500      	movs	r5, #0
  403728:	9504      	str	r5, [sp, #16]
	packet_tx.buffer      = (uint8_t *) config_data;
  40372a:	9705      	str	r7, [sp, #20]
	packet_tx.length      = 2;
  40372c:	f04f 0b02 	mov.w	fp, #2
  403730:	f8cd b018 	str.w	fp, [sp, #24]
	twi_master_write(BOARD_BASE_TWI, &packet_tx);
  403734:	a903      	add	r1, sp, #12
  403736:	4818      	ldr	r0, [pc, #96]	; (403798 <config_MAX7314+0x8c>)
  403738:	4c18      	ldr	r4, [pc, #96]	; (40379c <config_MAX7314+0x90>)
  40373a:	47a0      	blx	r4


	uint8_t port_data_write_encoders[] = {MAX7314_portConfigRegisterLow, 0xFF, 0xFF};
  40373c:	aa01      	add	r2, sp, #4
  40373e:	4643      	mov	r3, r8
  403740:	f833 af04 	ldrh.w	sl, [r3, #4]!
  403744:	f893 9002 	ldrb.w	r9, [r3, #2]
  403748:	f8ad a004 	strh.w	sl, [sp, #4]
  40374c:	f88d 9006 	strb.w	r9, [sp, #6]

	/* Configure the Chip Ports as Inputs */
	packet_tx.chip        = 0b0100000;
  403750:	f88d 601c 	strb.w	r6, [sp, #28]
	packet_tx.addr_length = 0;
  403754:	9504      	str	r5, [sp, #16]
	packet_tx.buffer      = (uint8_t *) port_data_write_encoders;
  403756:	9205      	str	r2, [sp, #20]
	packet_tx.length      = 3;
  403758:	2603      	movs	r6, #3
  40375a:	9606      	str	r6, [sp, #24]
	twi_master_write(BOARD_BASE_TWI, &packet_tx);
  40375c:	a903      	add	r1, sp, #12
  40375e:	480e      	ldr	r0, [pc, #56]	; (403798 <config_MAX7314+0x8c>)
  403760:	47a0      	blx	r4

	/* Configure the Chip Config Register */
	packet_tx.chip        = 0b0100100;
  403762:	f04f 0824 	mov.w	r8, #36	; 0x24
  403766:	f88d 801c 	strb.w	r8, [sp, #28]
	packet_tx.addr_length = 0;
  40376a:	9504      	str	r5, [sp, #16]
	packet_tx.buffer      = (uint8_t *) config_data;
  40376c:	9705      	str	r7, [sp, #20]
	packet_tx.length      = 2;
  40376e:	f8cd b018 	str.w	fp, [sp, #24]
	twi_master_write(BOARD_BASE_TWI, &packet_tx);
  403772:	a903      	add	r1, sp, #12
  403774:	4808      	ldr	r0, [pc, #32]	; (403798 <config_MAX7314+0x8c>)
  403776:	47a0      	blx	r4


	uint8_t port_data_write_buttons[] = {MAX7314_portConfigRegisterLow, 0xFF, 0xFF};
  403778:	f8ad a000 	strh.w	sl, [sp]
  40377c:	f88d 9002 	strb.w	r9, [sp, #2]

	/* Configure the Chip Ports as Inputs */
	packet_tx.chip        = 0b0100100;
  403780:	f88d 801c 	strb.w	r8, [sp, #28]
	packet_tx.addr_length = 0;
  403784:	9504      	str	r5, [sp, #16]
	packet_tx.buffer      = (uint8_t *) port_data_write_buttons;
  403786:	f8cd d014 	str.w	sp, [sp, #20]
	packet_tx.length      = 3;
  40378a:	9606      	str	r6, [sp, #24]
	twi_master_write(BOARD_BASE_TWI, &packet_tx);
  40378c:	a903      	add	r1, sp, #12
  40378e:	4802      	ldr	r0, [pc, #8]	; (403798 <config_MAX7314+0x8c>)
  403790:	47a0      	blx	r4
 }
  403792:	b009      	add	sp, #36	; 0x24
  403794:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403798:	40018000 	.word	0x40018000
  40379c:	004002a1 	.word	0x004002a1
  4037a0:	0040512c 	.word	0x0040512c

004037a4 <read_encoder_MAX7314>:

 void read_encoder_MAX7314(uint8_t *data){
  4037a4:	b5f0      	push	{r4, r5, r6, r7, lr}
  4037a6:	b08d      	sub	sp, #52	; 0x34
  4037a8:	4607      	mov	r7, r0
	/* Data Packets for tx/rx */
	twi_packet_t packet_rx, packet_tx;
	uint8_t port_addr[] = {MAX7314_inputPortLow};
  4037aa:	2400      	movs	r4, #0
  4037ac:	f88d 4004 	strb.w	r4, [sp, #4]

	
	/* Write the command byte address to be the Low byte of the Input Port */
	packet_tx.chip        = 0b0100000;
  4037b0:	2620      	movs	r6, #32
  4037b2:	f88d 6018 	strb.w	r6, [sp, #24]
	packet_tx.addr_length = 0;
  4037b6:	9403      	str	r4, [sp, #12]
	packet_tx.buffer      = (uint8_t *) port_addr;
  4037b8:	ab01      	add	r3, sp, #4
  4037ba:	9304      	str	r3, [sp, #16]
	packet_tx.length      = 1;
  4037bc:	2301      	movs	r3, #1
  4037be:	9305      	str	r3, [sp, #20]
	twi_master_write(BOARD_BASE_TWI, &packet_tx);
  4037c0:	4d08      	ldr	r5, [pc, #32]	; (4037e4 <read_encoder_MAX7314+0x40>)
  4037c2:	a902      	add	r1, sp, #8
  4037c4:	4628      	mov	r0, r5
  4037c6:	4b08      	ldr	r3, [pc, #32]	; (4037e8 <read_encoder_MAX7314+0x44>)
  4037c8:	4798      	blx	r3


	/* Read Data from the Low and High Input Ports */
	packet_rx.chip        = 0b0100000;
  4037ca:	f88d 602c 	strb.w	r6, [sp, #44]	; 0x2c
	packet_rx.addr_length = 0;
  4037ce:	9408      	str	r4, [sp, #32]
	packet_rx.buffer      = data;
  4037d0:	9709      	str	r7, [sp, #36]	; 0x24
	packet_rx.length      = 2;
  4037d2:	2302      	movs	r3, #2
  4037d4:	930a      	str	r3, [sp, #40]	; 0x28
	twi_master_read(BOARD_BASE_TWI, &packet_rx);
  4037d6:	a907      	add	r1, sp, #28
  4037d8:	4628      	mov	r0, r5
  4037da:	4b04      	ldr	r3, [pc, #16]	; (4037ec <read_encoder_MAX7314+0x48>)
  4037dc:	4798      	blx	r3


 }
  4037de:	b00d      	add	sp, #52	; 0x34
  4037e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4037e2:	bf00      	nop
  4037e4:	40018000 	.word	0x40018000
  4037e8:	004002a1 	.word	0x004002a1
  4037ec:	004001c1 	.word	0x004001c1

004037f0 <read_button_MAX7314>:

void read_button_MAX7314(uint8_t *data){
  4037f0:	b5f0      	push	{r4, r5, r6, r7, lr}
  4037f2:	b08d      	sub	sp, #52	; 0x34
  4037f4:	4607      	mov	r7, r0
	/* Data Packets for tx/rx */
	twi_packet_t packet_rx, packet_tx;
	uint8_t port_addr[] = {MAX7314_inputPortLow};
  4037f6:	2400      	movs	r4, #0
  4037f8:	f88d 4004 	strb.w	r4, [sp, #4]

	  
	/* Write the command byte address to be the Low byte of the Input Port */
	packet_tx.chip        = 0b0100100;
  4037fc:	2624      	movs	r6, #36	; 0x24
  4037fe:	f88d 6018 	strb.w	r6, [sp, #24]
	packet_tx.addr_length = 0;
  403802:	9403      	str	r4, [sp, #12]
	packet_tx.buffer      = (uint8_t *) port_addr;
  403804:	ab01      	add	r3, sp, #4
  403806:	9304      	str	r3, [sp, #16]
	packet_tx.length      = 1;
  403808:	2301      	movs	r3, #1
  40380a:	9305      	str	r3, [sp, #20]
	twi_master_write(BOARD_BASE_TWI, &packet_tx);
  40380c:	4d08      	ldr	r5, [pc, #32]	; (403830 <read_button_MAX7314+0x40>)
  40380e:	a902      	add	r1, sp, #8
  403810:	4628      	mov	r0, r5
  403812:	4b08      	ldr	r3, [pc, #32]	; (403834 <read_button_MAX7314+0x44>)
  403814:	4798      	blx	r3


	/* Read Data from the Low and High Input Ports */
	packet_rx.chip        = 0b0100100;
  403816:	f88d 602c 	strb.w	r6, [sp, #44]	; 0x2c
	packet_rx.addr_length = 0;
  40381a:	9408      	str	r4, [sp, #32]
	packet_rx.buffer      = data;
  40381c:	9709      	str	r7, [sp, #36]	; 0x24
	packet_rx.length      = 2;
  40381e:	2302      	movs	r3, #2
  403820:	930a      	str	r3, [sp, #40]	; 0x28
	twi_master_read(BOARD_BASE_TWI, &packet_rx);
  403822:	a907      	add	r1, sp, #28
  403824:	4628      	mov	r0, r5
  403826:	4b04      	ldr	r3, [pc, #16]	; (403838 <read_button_MAX7314+0x48>)
  403828:	4798      	blx	r3


}
  40382a:	b00d      	add	sp, #52	; 0x34
  40382c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40382e:	bf00      	nop
  403830:	40018000 	.word	0x40018000
  403834:	004002a1 	.word	0x004002a1
  403838:	004001c1 	.word	0x004001c1

0040383c <main>:
void read_button_MAX7314(uint8_t *port_data);
void read_encoder_MAX7314(uint8_t *port_data);


int main (void)
{
  40383c:	b508      	push	{r3, lr}
	sysclk_init();				//initialize system clock
  40383e:	4b13      	ldr	r3, [pc, #76]	; (40388c <main+0x50>)
  403840:	4798      	blx	r3
	WDT->WDT_MR = WDT_MR_WDDIS; //disable watchdog timer
  403842:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  403846:	4b12      	ldr	r3, [pc, #72]	; (403890 <main+0x54>)
  403848:	605a      	str	r2, [r3, #4]

	board_init();				//board init (currently empty)
  40384a:	4b12      	ldr	r3, [pc, #72]	; (403894 <main+0x58>)
  40384c:	4798      	blx	r3
	
	SPI_led_init();
  40384e:	4b12      	ldr	r3, [pc, #72]	; (403898 <main+0x5c>)
  403850:	4798      	blx	r3
	i2c_init();
  403852:	4b12      	ldr	r3, [pc, #72]	; (40389c <main+0x60>)
  403854:	4798      	blx	r3
	init_IO_int();
  403856:	4b12      	ldr	r3, [pc, #72]	; (4038a0 <main+0x64>)
  403858:	4798      	blx	r3
	timers_init();
  40385a:	4b12      	ldr	r3, [pc, #72]	; (4038a4 <main+0x68>)
  40385c:	4798      	blx	r3
	ADC_init();
  40385e:	4b12      	ldr	r3, [pc, #72]	; (4038a8 <main+0x6c>)
  403860:	4798      	blx	r3
	Encoder_init();				//initialize encoders
  403862:	4b12      	ldr	r3, [pc, #72]	; (4038ac <main+0x70>)
  403864:	4798      	blx	r3
	all_displays_init();
  403866:	4b12      	ldr	r3, [pc, #72]	; (4038b0 <main+0x74>)
  403868:	4798      	blx	r3
	init_sequencer_controls();
  40386a:	4b12      	ldr	r3, [pc, #72]	; (4038b4 <main+0x78>)
  40386c:	4798      	blx	r3

	leds_update_display();
  40386e:	4b12      	ldr	r3, [pc, #72]	; (4038b8 <main+0x7c>)
  403870:	4798      	blx	r3
	update_timers(bpm);
  403872:	4c12      	ldr	r4, [pc, #72]	; (4038bc <main+0x80>)
  403874:	8820      	ldrh	r0, [r4, #0]
  403876:	4b12      	ldr	r3, [pc, #72]	; (4038c0 <main+0x84>)
  403878:	4798      	blx	r3
	config_MAX7314();
  40387a:	4b12      	ldr	r3, [pc, #72]	; (4038c4 <main+0x88>)
  40387c:	4798      	blx	r3
	read_button_MAX7314(button_port_data);
  40387e:	4812      	ldr	r0, [pc, #72]	; (4038c8 <main+0x8c>)
  403880:	4b12      	ldr	r3, [pc, #72]	; (4038cc <main+0x90>)
  403882:	4798      	blx	r3

	bpm_display(bpm);
  403884:	7820      	ldrb	r0, [r4, #0]
  403886:	4b12      	ldr	r3, [pc, #72]	; (4038d0 <main+0x94>)
  403888:	4798      	blx	r3
  40388a:	e7fe      	b.n	40388a <main+0x4e>
  40388c:	0040328d 	.word	0x0040328d
  403890:	400e1450 	.word	0x400e1450
  403894:	00403289 	.word	0x00403289
  403898:	00402bd5 	.word	0x00402bd5
  40389c:	004036b5 	.word	0x004036b5
  4038a0:	004035e1 	.word	0x004035e1
  4038a4:	00402f81 	.word	0x00402f81
  4038a8:	0040011d 	.word	0x0040011d
  4038ac:	00400f85 	.word	0x00400f85
  4038b0:	0040074d 	.word	0x0040074d
  4038b4:	00402529 	.word	0x00402529
  4038b8:	004019f9 	.word	0x004019f9
  4038bc:	20008736 	.word	0x20008736
  4038c0:	00403081 	.word	0x00403081
  4038c4:	0040370d 	.word	0x0040370d
  4038c8:	200086fc 	.word	0x200086fc
  4038cc:	004037f1 	.word	0x004037f1
  4038d0:	00400b6d 	.word	0x00400b6d

004038d4 <PIOB_Handler>:
	{
	
	}
}

 void PIOB_Handler(){
  4038d4:	b510      	push	{r4, lr}

	 uint32_t status = REG_PIOB_ISR;	//read PIOB interrupt status & clear interrupt flags
  4038d6:	4b20      	ldr	r3, [pc, #128]	; (403958 <PIOB_Handler+0x84>)
  4038d8:	681b      	ldr	r3, [r3, #0]
 
	 //check if Io expander interrupt was driven
	 if (status & PIO_ISR_P10){
  4038da:	f413 6f80 	tst.w	r3, #1024	; 0x400
  4038de:	d01b      	beq.n	403918 <PIOB_Handler+0x44>
		read_button_MAX7314(temp_data);
  4038e0:	4c1e      	ldr	r4, [pc, #120]	; (40395c <PIOB_Handler+0x88>)
  4038e2:	4620      	mov	r0, r4
  4038e4:	4b1e      	ldr	r3, [pc, #120]	; (403960 <PIOB_Handler+0x8c>)
  4038e6:	4798      	blx	r3

		if  ( !((temp_data[0] == 255) && (temp_data[1] == 255)) ){
  4038e8:	7820      	ldrb	r0, [r4, #0]
  4038ea:	28ff      	cmp	r0, #255	; 0xff
  4038ec:	d102      	bne.n	4038f4 <PIOB_Handler+0x20>
  4038ee:	7863      	ldrb	r3, [r4, #1]
  4038f0:	2bff      	cmp	r3, #255	; 0xff
  4038f2:	d02f      	beq.n	403954 <PIOB_Handler+0x80>
			button_port_data[0] = temp_data[0];
  4038f4:	4b1b      	ldr	r3, [pc, #108]	; (403964 <PIOB_Handler+0x90>)
  4038f6:	7018      	strb	r0, [r3, #0]
			button_port_data[1] = temp_data[1];
  4038f8:	4a18      	ldr	r2, [pc, #96]	; (40395c <PIOB_Handler+0x88>)
  4038fa:	7851      	ldrb	r1, [r2, #1]
  4038fc:	7059      	strb	r1, [r3, #1]

			button_count++;
  4038fe:	4a1a      	ldr	r2, [pc, #104]	; (403968 <PIOB_Handler+0x94>)
  403900:	7813      	ldrb	r3, [r2, #0]
  403902:	3301      	adds	r3, #1
  403904:	b2db      	uxtb	r3, r3
  403906:	7013      	strb	r3, [r2, #0]
			if (button_count >= 2){
  403908:	2b01      	cmp	r3, #1
  40390a:	d923      	bls.n	403954 <PIOB_Handler+0x80>
				led_toggle(button_port_data[0], button_port_data[1]);
  40390c:	4b17      	ldr	r3, [pc, #92]	; (40396c <PIOB_Handler+0x98>)
  40390e:	4798      	blx	r3
				button_count = 0;
  403910:	2200      	movs	r2, #0
  403912:	4b15      	ldr	r3, [pc, #84]	; (403968 <PIOB_Handler+0x94>)
  403914:	701a      	strb	r2, [r3, #0]
  403916:	bd10      	pop	{r4, pc}
			}
		}
		
	 }

	 else if (status & PIO_ISR_P11) {
  403918:	f413 6f00 	tst.w	r3, #2048	; 0x800
  40391c:	d01a      	beq.n	403954 <PIOB_Handler+0x80>
		read_encoder_MAX7314(temp_data);
  40391e:	4c0f      	ldr	r4, [pc, #60]	; (40395c <PIOB_Handler+0x88>)
  403920:	4620      	mov	r0, r4
  403922:	4b13      	ldr	r3, [pc, #76]	; (403970 <PIOB_Handler+0x9c>)
  403924:	4798      	blx	r3
		
		if  ( !((temp_data[0] == 255) && (temp_data[1] == 255)) ){
  403926:	7820      	ldrb	r0, [r4, #0]
  403928:	28ff      	cmp	r0, #255	; 0xff
  40392a:	d102      	bne.n	403932 <PIOB_Handler+0x5e>
  40392c:	7863      	ldrb	r3, [r4, #1]
  40392e:	2bff      	cmp	r3, #255	; 0xff
  403930:	d010      	beq.n	403954 <PIOB_Handler+0x80>
			encoder_port_data[0] = temp_data[0];
  403932:	4b10      	ldr	r3, [pc, #64]	; (403974 <PIOB_Handler+0xa0>)
  403934:	7018      	strb	r0, [r3, #0]
			encoder_port_data[1] = temp_data[1];
  403936:	4a09      	ldr	r2, [pc, #36]	; (40395c <PIOB_Handler+0x88>)
  403938:	7851      	ldrb	r1, [r2, #1]
  40393a:	7059      	strb	r1, [r3, #1]

			encoder_count++;
  40393c:	4a0e      	ldr	r2, [pc, #56]	; (403978 <PIOB_Handler+0xa4>)
  40393e:	7813      	ldrb	r3, [r2, #0]
  403940:	3301      	adds	r3, #1
  403942:	b2db      	uxtb	r3, r3
  403944:	7013      	strb	r3, [r2, #0]
			if (encoder_count >= 2){
  403946:	2b01      	cmp	r3, #1
  403948:	d904      	bls.n	403954 <PIOB_Handler+0x80>
				aux_toggle(encoder_port_data[0], encoder_port_data[1]);
  40394a:	4b0c      	ldr	r3, [pc, #48]	; (40397c <PIOB_Handler+0xa8>)
  40394c:	4798      	blx	r3
				encoder_count = 0;
  40394e:	2200      	movs	r2, #0
  403950:	4b09      	ldr	r3, [pc, #36]	; (403978 <PIOB_Handler+0xa4>)
  403952:	701a      	strb	r2, [r3, #0]
  403954:	bd10      	pop	{r4, pc}
  403956:	bf00      	nop
  403958:	400e104c 	.word	0x400e104c
  40395c:	200086f4 	.word	0x200086f4
  403960:	004037f1 	.word	0x004037f1
  403964:	200086fc 	.word	0x200086fc
  403968:	200086ff 	.word	0x200086ff
  40396c:	00401ea1 	.word	0x00401ea1
  403970:	004037a5 	.word	0x004037a5
  403974:	200086f8 	.word	0x200086f8
  403978:	200086fe 	.word	0x200086fe
  40397c:	004023f9 	.word	0x004023f9

00403980 <__aeabi_frsub>:
  403980:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
  403984:	e002      	b.n	40398c <__addsf3>
  403986:	bf00      	nop

00403988 <__aeabi_fsub>:
  403988:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0040398c <__addsf3>:
  40398c:	0042      	lsls	r2, r0, #1
  40398e:	bf1f      	itttt	ne
  403990:	ea5f 0341 	movsne.w	r3, r1, lsl #1
  403994:	ea92 0f03 	teqne	r2, r3
  403998:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
  40399c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
  4039a0:	d06a      	beq.n	403a78 <__addsf3+0xec>
  4039a2:	ea4f 6212 	mov.w	r2, r2, lsr #24
  4039a6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
  4039aa:	bfc1      	itttt	gt
  4039ac:	18d2      	addgt	r2, r2, r3
  4039ae:	4041      	eorgt	r1, r0
  4039b0:	4048      	eorgt	r0, r1
  4039b2:	4041      	eorgt	r1, r0
  4039b4:	bfb8      	it	lt
  4039b6:	425b      	neglt	r3, r3
  4039b8:	2b19      	cmp	r3, #25
  4039ba:	bf88      	it	hi
  4039bc:	4770      	bxhi	lr
  4039be:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
  4039c2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  4039c6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
  4039ca:	bf18      	it	ne
  4039cc:	4240      	negne	r0, r0
  4039ce:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  4039d2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
  4039d6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
  4039da:	bf18      	it	ne
  4039dc:	4249      	negne	r1, r1
  4039de:	ea92 0f03 	teq	r2, r3
  4039e2:	d03f      	beq.n	403a64 <__addsf3+0xd8>
  4039e4:	f1a2 0201 	sub.w	r2, r2, #1
  4039e8:	fa41 fc03 	asr.w	ip, r1, r3
  4039ec:	eb10 000c 	adds.w	r0, r0, ip
  4039f0:	f1c3 0320 	rsb	r3, r3, #32
  4039f4:	fa01 f103 	lsl.w	r1, r1, r3
  4039f8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
  4039fc:	d502      	bpl.n	403a04 <__addsf3+0x78>
  4039fe:	4249      	negs	r1, r1
  403a00:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
  403a04:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
  403a08:	d313      	bcc.n	403a32 <__addsf3+0xa6>
  403a0a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
  403a0e:	d306      	bcc.n	403a1e <__addsf3+0x92>
  403a10:	0840      	lsrs	r0, r0, #1
  403a12:	ea4f 0131 	mov.w	r1, r1, rrx
  403a16:	f102 0201 	add.w	r2, r2, #1
  403a1a:	2afe      	cmp	r2, #254	; 0xfe
  403a1c:	d251      	bcs.n	403ac2 <__addsf3+0x136>
  403a1e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
  403a22:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
  403a26:	bf08      	it	eq
  403a28:	f020 0001 	biceq.w	r0, r0, #1
  403a2c:	ea40 0003 	orr.w	r0, r0, r3
  403a30:	4770      	bx	lr
  403a32:	0049      	lsls	r1, r1, #1
  403a34:	eb40 0000 	adc.w	r0, r0, r0
  403a38:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
  403a3c:	f1a2 0201 	sub.w	r2, r2, #1
  403a40:	d1ed      	bne.n	403a1e <__addsf3+0x92>
  403a42:	fab0 fc80 	clz	ip, r0
  403a46:	f1ac 0c08 	sub.w	ip, ip, #8
  403a4a:	ebb2 020c 	subs.w	r2, r2, ip
  403a4e:	fa00 f00c 	lsl.w	r0, r0, ip
  403a52:	bfaa      	itet	ge
  403a54:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
  403a58:	4252      	neglt	r2, r2
  403a5a:	4318      	orrge	r0, r3
  403a5c:	bfbc      	itt	lt
  403a5e:	40d0      	lsrlt	r0, r2
  403a60:	4318      	orrlt	r0, r3
  403a62:	4770      	bx	lr
  403a64:	f092 0f00 	teq	r2, #0
  403a68:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
  403a6c:	bf06      	itte	eq
  403a6e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
  403a72:	3201      	addeq	r2, #1
  403a74:	3b01      	subne	r3, #1
  403a76:	e7b5      	b.n	4039e4 <__addsf3+0x58>
  403a78:	ea4f 0341 	mov.w	r3, r1, lsl #1
  403a7c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
  403a80:	bf18      	it	ne
  403a82:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
  403a86:	d021      	beq.n	403acc <__addsf3+0x140>
  403a88:	ea92 0f03 	teq	r2, r3
  403a8c:	d004      	beq.n	403a98 <__addsf3+0x10c>
  403a8e:	f092 0f00 	teq	r2, #0
  403a92:	bf08      	it	eq
  403a94:	4608      	moveq	r0, r1
  403a96:	4770      	bx	lr
  403a98:	ea90 0f01 	teq	r0, r1
  403a9c:	bf1c      	itt	ne
  403a9e:	2000      	movne	r0, #0
  403aa0:	4770      	bxne	lr
  403aa2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
  403aa6:	d104      	bne.n	403ab2 <__addsf3+0x126>
  403aa8:	0040      	lsls	r0, r0, #1
  403aaa:	bf28      	it	cs
  403aac:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
  403ab0:	4770      	bx	lr
  403ab2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
  403ab6:	bf3c      	itt	cc
  403ab8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
  403abc:	4770      	bxcc	lr
  403abe:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
  403ac2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
  403ac6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  403aca:	4770      	bx	lr
  403acc:	ea7f 6222 	mvns.w	r2, r2, asr #24
  403ad0:	bf16      	itet	ne
  403ad2:	4608      	movne	r0, r1
  403ad4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
  403ad8:	4601      	movne	r1, r0
  403ada:	0242      	lsls	r2, r0, #9
  403adc:	bf06      	itte	eq
  403ade:	ea5f 2341 	movseq.w	r3, r1, lsl #9
  403ae2:	ea90 0f01 	teqeq	r0, r1
  403ae6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
  403aea:	4770      	bx	lr

00403aec <__aeabi_ui2f>:
  403aec:	f04f 0300 	mov.w	r3, #0
  403af0:	e004      	b.n	403afc <__aeabi_i2f+0x8>
  403af2:	bf00      	nop

00403af4 <__aeabi_i2f>:
  403af4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
  403af8:	bf48      	it	mi
  403afa:	4240      	negmi	r0, r0
  403afc:	ea5f 0c00 	movs.w	ip, r0
  403b00:	bf08      	it	eq
  403b02:	4770      	bxeq	lr
  403b04:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
  403b08:	4601      	mov	r1, r0
  403b0a:	f04f 0000 	mov.w	r0, #0
  403b0e:	e01c      	b.n	403b4a <__aeabi_l2f+0x2a>

00403b10 <__aeabi_ul2f>:
  403b10:	ea50 0201 	orrs.w	r2, r0, r1
  403b14:	bf08      	it	eq
  403b16:	4770      	bxeq	lr
  403b18:	f04f 0300 	mov.w	r3, #0
  403b1c:	e00a      	b.n	403b34 <__aeabi_l2f+0x14>
  403b1e:	bf00      	nop

00403b20 <__aeabi_l2f>:
  403b20:	ea50 0201 	orrs.w	r2, r0, r1
  403b24:	bf08      	it	eq
  403b26:	4770      	bxeq	lr
  403b28:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
  403b2c:	d502      	bpl.n	403b34 <__aeabi_l2f+0x14>
  403b2e:	4240      	negs	r0, r0
  403b30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  403b34:	ea5f 0c01 	movs.w	ip, r1
  403b38:	bf02      	ittt	eq
  403b3a:	4684      	moveq	ip, r0
  403b3c:	4601      	moveq	r1, r0
  403b3e:	2000      	moveq	r0, #0
  403b40:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
  403b44:	bf08      	it	eq
  403b46:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
  403b4a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
  403b4e:	fabc f28c 	clz	r2, ip
  403b52:	3a08      	subs	r2, #8
  403b54:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
  403b58:	db10      	blt.n	403b7c <__aeabi_l2f+0x5c>
  403b5a:	fa01 fc02 	lsl.w	ip, r1, r2
  403b5e:	4463      	add	r3, ip
  403b60:	fa00 fc02 	lsl.w	ip, r0, r2
  403b64:	f1c2 0220 	rsb	r2, r2, #32
  403b68:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  403b6c:	fa20 f202 	lsr.w	r2, r0, r2
  403b70:	eb43 0002 	adc.w	r0, r3, r2
  403b74:	bf08      	it	eq
  403b76:	f020 0001 	biceq.w	r0, r0, #1
  403b7a:	4770      	bx	lr
  403b7c:	f102 0220 	add.w	r2, r2, #32
  403b80:	fa01 fc02 	lsl.w	ip, r1, r2
  403b84:	f1c2 0220 	rsb	r2, r2, #32
  403b88:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
  403b8c:	fa21 f202 	lsr.w	r2, r1, r2
  403b90:	eb43 0002 	adc.w	r0, r3, r2
  403b94:	bf08      	it	eq
  403b96:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
  403b9a:	4770      	bx	lr

00403b9c <__aeabi_fmul>:
  403b9c:	f04f 0cff 	mov.w	ip, #255	; 0xff
  403ba0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
  403ba4:	bf1e      	ittt	ne
  403ba6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
  403baa:	ea92 0f0c 	teqne	r2, ip
  403bae:	ea93 0f0c 	teqne	r3, ip
  403bb2:	d06f      	beq.n	403c94 <__aeabi_fmul+0xf8>
  403bb4:	441a      	add	r2, r3
  403bb6:	ea80 0c01 	eor.w	ip, r0, r1
  403bba:	0240      	lsls	r0, r0, #9
  403bbc:	bf18      	it	ne
  403bbe:	ea5f 2141 	movsne.w	r1, r1, lsl #9
  403bc2:	d01e      	beq.n	403c02 <__aeabi_fmul+0x66>
  403bc4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
  403bc8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
  403bcc:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
  403bd0:	fba0 3101 	umull	r3, r1, r0, r1
  403bd4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
  403bd8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
  403bdc:	bf3e      	ittt	cc
  403bde:	0049      	lslcc	r1, r1, #1
  403be0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
  403be4:	005b      	lslcc	r3, r3, #1
  403be6:	ea40 0001 	orr.w	r0, r0, r1
  403bea:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
  403bee:	2afd      	cmp	r2, #253	; 0xfd
  403bf0:	d81d      	bhi.n	403c2e <__aeabi_fmul+0x92>
  403bf2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
  403bf6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
  403bfa:	bf08      	it	eq
  403bfc:	f020 0001 	biceq.w	r0, r0, #1
  403c00:	4770      	bx	lr
  403c02:	f090 0f00 	teq	r0, #0
  403c06:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
  403c0a:	bf08      	it	eq
  403c0c:	0249      	lsleq	r1, r1, #9
  403c0e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
  403c12:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
  403c16:	3a7f      	subs	r2, #127	; 0x7f
  403c18:	bfc2      	ittt	gt
  403c1a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
  403c1e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
  403c22:	4770      	bxgt	lr
  403c24:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  403c28:	f04f 0300 	mov.w	r3, #0
  403c2c:	3a01      	subs	r2, #1
  403c2e:	dc5d      	bgt.n	403cec <__aeabi_fmul+0x150>
  403c30:	f112 0f19 	cmn.w	r2, #25
  403c34:	bfdc      	itt	le
  403c36:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
  403c3a:	4770      	bxle	lr
  403c3c:	f1c2 0200 	rsb	r2, r2, #0
  403c40:	0041      	lsls	r1, r0, #1
  403c42:	fa21 f102 	lsr.w	r1, r1, r2
  403c46:	f1c2 0220 	rsb	r2, r2, #32
  403c4a:	fa00 fc02 	lsl.w	ip, r0, r2
  403c4e:	ea5f 0031 	movs.w	r0, r1, rrx
  403c52:	f140 0000 	adc.w	r0, r0, #0
  403c56:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
  403c5a:	bf08      	it	eq
  403c5c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
  403c60:	4770      	bx	lr
  403c62:	f092 0f00 	teq	r2, #0
  403c66:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
  403c6a:	bf02      	ittt	eq
  403c6c:	0040      	lsleq	r0, r0, #1
  403c6e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
  403c72:	3a01      	subeq	r2, #1
  403c74:	d0f9      	beq.n	403c6a <__aeabi_fmul+0xce>
  403c76:	ea40 000c 	orr.w	r0, r0, ip
  403c7a:	f093 0f00 	teq	r3, #0
  403c7e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  403c82:	bf02      	ittt	eq
  403c84:	0049      	lsleq	r1, r1, #1
  403c86:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
  403c8a:	3b01      	subeq	r3, #1
  403c8c:	d0f9      	beq.n	403c82 <__aeabi_fmul+0xe6>
  403c8e:	ea41 010c 	orr.w	r1, r1, ip
  403c92:	e78f      	b.n	403bb4 <__aeabi_fmul+0x18>
  403c94:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
  403c98:	ea92 0f0c 	teq	r2, ip
  403c9c:	bf18      	it	ne
  403c9e:	ea93 0f0c 	teqne	r3, ip
  403ca2:	d00a      	beq.n	403cba <__aeabi_fmul+0x11e>
  403ca4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
  403ca8:	bf18      	it	ne
  403caa:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
  403cae:	d1d8      	bne.n	403c62 <__aeabi_fmul+0xc6>
  403cb0:	ea80 0001 	eor.w	r0, r0, r1
  403cb4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
  403cb8:	4770      	bx	lr
  403cba:	f090 0f00 	teq	r0, #0
  403cbe:	bf17      	itett	ne
  403cc0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
  403cc4:	4608      	moveq	r0, r1
  403cc6:	f091 0f00 	teqne	r1, #0
  403cca:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
  403cce:	d014      	beq.n	403cfa <__aeabi_fmul+0x15e>
  403cd0:	ea92 0f0c 	teq	r2, ip
  403cd4:	d101      	bne.n	403cda <__aeabi_fmul+0x13e>
  403cd6:	0242      	lsls	r2, r0, #9
  403cd8:	d10f      	bne.n	403cfa <__aeabi_fmul+0x15e>
  403cda:	ea93 0f0c 	teq	r3, ip
  403cde:	d103      	bne.n	403ce8 <__aeabi_fmul+0x14c>
  403ce0:	024b      	lsls	r3, r1, #9
  403ce2:	bf18      	it	ne
  403ce4:	4608      	movne	r0, r1
  403ce6:	d108      	bne.n	403cfa <__aeabi_fmul+0x15e>
  403ce8:	ea80 0001 	eor.w	r0, r0, r1
  403cec:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
  403cf0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  403cf4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  403cf8:	4770      	bx	lr
  403cfa:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  403cfe:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
  403d02:	4770      	bx	lr

00403d04 <__aeabi_fdiv>:
  403d04:	f04f 0cff 	mov.w	ip, #255	; 0xff
  403d08:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
  403d0c:	bf1e      	ittt	ne
  403d0e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
  403d12:	ea92 0f0c 	teqne	r2, ip
  403d16:	ea93 0f0c 	teqne	r3, ip
  403d1a:	d069      	beq.n	403df0 <__aeabi_fdiv+0xec>
  403d1c:	eba2 0203 	sub.w	r2, r2, r3
  403d20:	ea80 0c01 	eor.w	ip, r0, r1
  403d24:	0249      	lsls	r1, r1, #9
  403d26:	ea4f 2040 	mov.w	r0, r0, lsl #9
  403d2a:	d037      	beq.n	403d9c <__aeabi_fdiv+0x98>
  403d2c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  403d30:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
  403d34:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
  403d38:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
  403d3c:	428b      	cmp	r3, r1
  403d3e:	bf38      	it	cc
  403d40:	005b      	lslcc	r3, r3, #1
  403d42:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
  403d46:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
  403d4a:	428b      	cmp	r3, r1
  403d4c:	bf24      	itt	cs
  403d4e:	1a5b      	subcs	r3, r3, r1
  403d50:	ea40 000c 	orrcs.w	r0, r0, ip
  403d54:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
  403d58:	bf24      	itt	cs
  403d5a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
  403d5e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  403d62:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
  403d66:	bf24      	itt	cs
  403d68:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
  403d6c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  403d70:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
  403d74:	bf24      	itt	cs
  403d76:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
  403d7a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  403d7e:	011b      	lsls	r3, r3, #4
  403d80:	bf18      	it	ne
  403d82:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
  403d86:	d1e0      	bne.n	403d4a <__aeabi_fdiv+0x46>
  403d88:	2afd      	cmp	r2, #253	; 0xfd
  403d8a:	f63f af50 	bhi.w	403c2e <__aeabi_fmul+0x92>
  403d8e:	428b      	cmp	r3, r1
  403d90:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
  403d94:	bf08      	it	eq
  403d96:	f020 0001 	biceq.w	r0, r0, #1
  403d9a:	4770      	bx	lr
  403d9c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
  403da0:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
  403da4:	327f      	adds	r2, #127	; 0x7f
  403da6:	bfc2      	ittt	gt
  403da8:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
  403dac:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
  403db0:	4770      	bxgt	lr
  403db2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  403db6:	f04f 0300 	mov.w	r3, #0
  403dba:	3a01      	subs	r2, #1
  403dbc:	e737      	b.n	403c2e <__aeabi_fmul+0x92>
  403dbe:	f092 0f00 	teq	r2, #0
  403dc2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
  403dc6:	bf02      	ittt	eq
  403dc8:	0040      	lsleq	r0, r0, #1
  403dca:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
  403dce:	3a01      	subeq	r2, #1
  403dd0:	d0f9      	beq.n	403dc6 <__aeabi_fdiv+0xc2>
  403dd2:	ea40 000c 	orr.w	r0, r0, ip
  403dd6:	f093 0f00 	teq	r3, #0
  403dda:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  403dde:	bf02      	ittt	eq
  403de0:	0049      	lsleq	r1, r1, #1
  403de2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
  403de6:	3b01      	subeq	r3, #1
  403de8:	d0f9      	beq.n	403dde <__aeabi_fdiv+0xda>
  403dea:	ea41 010c 	orr.w	r1, r1, ip
  403dee:	e795      	b.n	403d1c <__aeabi_fdiv+0x18>
  403df0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
  403df4:	ea92 0f0c 	teq	r2, ip
  403df8:	d108      	bne.n	403e0c <__aeabi_fdiv+0x108>
  403dfa:	0242      	lsls	r2, r0, #9
  403dfc:	f47f af7d 	bne.w	403cfa <__aeabi_fmul+0x15e>
  403e00:	ea93 0f0c 	teq	r3, ip
  403e04:	f47f af70 	bne.w	403ce8 <__aeabi_fmul+0x14c>
  403e08:	4608      	mov	r0, r1
  403e0a:	e776      	b.n	403cfa <__aeabi_fmul+0x15e>
  403e0c:	ea93 0f0c 	teq	r3, ip
  403e10:	d104      	bne.n	403e1c <__aeabi_fdiv+0x118>
  403e12:	024b      	lsls	r3, r1, #9
  403e14:	f43f af4c 	beq.w	403cb0 <__aeabi_fmul+0x114>
  403e18:	4608      	mov	r0, r1
  403e1a:	e76e      	b.n	403cfa <__aeabi_fmul+0x15e>
  403e1c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
  403e20:	bf18      	it	ne
  403e22:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
  403e26:	d1ca      	bne.n	403dbe <__aeabi_fdiv+0xba>
  403e28:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
  403e2c:	f47f af5c 	bne.w	403ce8 <__aeabi_fmul+0x14c>
  403e30:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
  403e34:	f47f af3c 	bne.w	403cb0 <__aeabi_fmul+0x114>
  403e38:	e75f      	b.n	403cfa <__aeabi_fmul+0x15e>
  403e3a:	bf00      	nop

00403e3c <__aeabi_f2uiz>:
  403e3c:	0042      	lsls	r2, r0, #1
  403e3e:	d20e      	bcs.n	403e5e <__aeabi_f2uiz+0x22>
  403e40:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
  403e44:	d30b      	bcc.n	403e5e <__aeabi_f2uiz+0x22>
  403e46:	f04f 039e 	mov.w	r3, #158	; 0x9e
  403e4a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
  403e4e:	d409      	bmi.n	403e64 <__aeabi_f2uiz+0x28>
  403e50:	ea4f 2300 	mov.w	r3, r0, lsl #8
  403e54:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  403e58:	fa23 f002 	lsr.w	r0, r3, r2
  403e5c:	4770      	bx	lr
  403e5e:	f04f 0000 	mov.w	r0, #0
  403e62:	4770      	bx	lr
  403e64:	f112 0f61 	cmn.w	r2, #97	; 0x61
  403e68:	d101      	bne.n	403e6e <__aeabi_f2uiz+0x32>
  403e6a:	0242      	lsls	r2, r0, #9
  403e6c:	d102      	bne.n	403e74 <__aeabi_f2uiz+0x38>
  403e6e:	f04f 30ff 	mov.w	r0, #4294967295
  403e72:	4770      	bx	lr
  403e74:	f04f 0000 	mov.w	r0, #0
  403e78:	4770      	bx	lr
  403e7a:	bf00      	nop

00403e7c <__libc_init_array>:
  403e7c:	b570      	push	{r4, r5, r6, lr}
  403e7e:	4e0f      	ldr	r6, [pc, #60]	; (403ebc <__libc_init_array+0x40>)
  403e80:	4d0f      	ldr	r5, [pc, #60]	; (403ec0 <__libc_init_array+0x44>)
  403e82:	1b76      	subs	r6, r6, r5
  403e84:	10b6      	asrs	r6, r6, #2
  403e86:	bf18      	it	ne
  403e88:	2400      	movne	r4, #0
  403e8a:	d005      	beq.n	403e98 <__libc_init_array+0x1c>
  403e8c:	3401      	adds	r4, #1
  403e8e:	f855 3b04 	ldr.w	r3, [r5], #4
  403e92:	4798      	blx	r3
  403e94:	42a6      	cmp	r6, r4
  403e96:	d1f9      	bne.n	403e8c <__libc_init_array+0x10>
  403e98:	4e0a      	ldr	r6, [pc, #40]	; (403ec4 <__libc_init_array+0x48>)
  403e9a:	4d0b      	ldr	r5, [pc, #44]	; (403ec8 <__libc_init_array+0x4c>)
  403e9c:	1b76      	subs	r6, r6, r5
  403e9e:	f001 f94d 	bl	40513c <_init>
  403ea2:	10b6      	asrs	r6, r6, #2
  403ea4:	bf18      	it	ne
  403ea6:	2400      	movne	r4, #0
  403ea8:	d006      	beq.n	403eb8 <__libc_init_array+0x3c>
  403eaa:	3401      	adds	r4, #1
  403eac:	f855 3b04 	ldr.w	r3, [r5], #4
  403eb0:	4798      	blx	r3
  403eb2:	42a6      	cmp	r6, r4
  403eb4:	d1f9      	bne.n	403eaa <__libc_init_array+0x2e>
  403eb6:	bd70      	pop	{r4, r5, r6, pc}
  403eb8:	bd70      	pop	{r4, r5, r6, pc}
  403eba:	bf00      	nop
  403ebc:	00405148 	.word	0x00405148
  403ec0:	00405148 	.word	0x00405148
  403ec4:	00405150 	.word	0x00405150
  403ec8:	00405148 	.word	0x00405148

00403ecc <register_fini>:
  403ecc:	4b02      	ldr	r3, [pc, #8]	; (403ed8 <register_fini+0xc>)
  403ece:	b113      	cbz	r3, 403ed6 <register_fini+0xa>
  403ed0:	4802      	ldr	r0, [pc, #8]	; (403edc <register_fini+0x10>)
  403ed2:	f000 b805 	b.w	403ee0 <atexit>
  403ed6:	4770      	bx	lr
  403ed8:	00000000 	.word	0x00000000
  403edc:	00403eed 	.word	0x00403eed

00403ee0 <atexit>:
  403ee0:	2300      	movs	r3, #0
  403ee2:	4601      	mov	r1, r0
  403ee4:	461a      	mov	r2, r3
  403ee6:	4618      	mov	r0, r3
  403ee8:	f000 b814 	b.w	403f14 <__register_exitproc>

00403eec <__libc_fini_array>:
  403eec:	b538      	push	{r3, r4, r5, lr}
  403eee:	4d07      	ldr	r5, [pc, #28]	; (403f0c <__libc_fini_array+0x20>)
  403ef0:	4c07      	ldr	r4, [pc, #28]	; (403f10 <__libc_fini_array+0x24>)
  403ef2:	1b2c      	subs	r4, r5, r4
  403ef4:	10a4      	asrs	r4, r4, #2
  403ef6:	d005      	beq.n	403f04 <__libc_fini_array+0x18>
  403ef8:	3c01      	subs	r4, #1
  403efa:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  403efe:	4798      	blx	r3
  403f00:	2c00      	cmp	r4, #0
  403f02:	d1f9      	bne.n	403ef8 <__libc_fini_array+0xc>
  403f04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  403f08:	f001 b922 	b.w	405150 <_fini>
  403f0c:	00405160 	.word	0x00405160
  403f10:	0040515c 	.word	0x0040515c

00403f14 <__register_exitproc>:
  403f14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  403f18:	4c25      	ldr	r4, [pc, #148]	; (403fb0 <__register_exitproc+0x9c>)
  403f1a:	6825      	ldr	r5, [r4, #0]
  403f1c:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
  403f20:	4606      	mov	r6, r0
  403f22:	4688      	mov	r8, r1
  403f24:	4692      	mov	sl, r2
  403f26:	4699      	mov	r9, r3
  403f28:	b3c4      	cbz	r4, 403f9c <__register_exitproc+0x88>
  403f2a:	6860      	ldr	r0, [r4, #4]
  403f2c:	281f      	cmp	r0, #31
  403f2e:	dc17      	bgt.n	403f60 <__register_exitproc+0x4c>
  403f30:	1c43      	adds	r3, r0, #1
  403f32:	b176      	cbz	r6, 403f52 <__register_exitproc+0x3e>
  403f34:	eb04 0580 	add.w	r5, r4, r0, lsl #2
  403f38:	2201      	movs	r2, #1
  403f3a:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
  403f3e:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
  403f42:	4082      	lsls	r2, r0
  403f44:	4311      	orrs	r1, r2
  403f46:	2e02      	cmp	r6, #2
  403f48:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
  403f4c:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
  403f50:	d01e      	beq.n	403f90 <__register_exitproc+0x7c>
  403f52:	3002      	adds	r0, #2
  403f54:	6063      	str	r3, [r4, #4]
  403f56:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
  403f5a:	2000      	movs	r0, #0
  403f5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403f60:	4b14      	ldr	r3, [pc, #80]	; (403fb4 <__register_exitproc+0xa0>)
  403f62:	b303      	cbz	r3, 403fa6 <__register_exitproc+0x92>
  403f64:	f44f 70c8 	mov.w	r0, #400	; 0x190
  403f68:	f3af 8000 	nop.w
  403f6c:	4604      	mov	r4, r0
  403f6e:	b1d0      	cbz	r0, 403fa6 <__register_exitproc+0x92>
  403f70:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
  403f74:	2700      	movs	r7, #0
  403f76:	e880 0088 	stmia.w	r0, {r3, r7}
  403f7a:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  403f7e:	4638      	mov	r0, r7
  403f80:	2301      	movs	r3, #1
  403f82:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  403f86:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
  403f8a:	2e00      	cmp	r6, #0
  403f8c:	d0e1      	beq.n	403f52 <__register_exitproc+0x3e>
  403f8e:	e7d1      	b.n	403f34 <__register_exitproc+0x20>
  403f90:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
  403f94:	430a      	orrs	r2, r1
  403f96:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  403f9a:	e7da      	b.n	403f52 <__register_exitproc+0x3e>
  403f9c:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
  403fa0:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  403fa4:	e7c1      	b.n	403f2a <__register_exitproc+0x16>
  403fa6:	f04f 30ff 	mov.w	r0, #4294967295
  403faa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403fae:	bf00      	nop
  403fb0:	00405138 	.word	0x00405138
  403fb4:	00000000 	.word	0x00000000

00403fb8 <oCRAExtended_22ptBitmaps>:
  403fb8:	ffff3030 30303030 3030ffff ffff0c0c     00..0000..00....
  403fc8:	0c0c0c0c 0c0cffff 00000000 00000000     ................
	...
  403fe0:	e0800000 030f3c70 70e08000 01030f3c     ....p<.....p<...
  403ff0:	00000000 00010706 00000000 00000000     ................
  404000:	0303fffe 03030303 feff0303 0000ffff     ................
  404010:	00000000 ffff0000 06060703 06060606     ................
  404020:	03070606 03030303 00ffff03 00000000     ................
  404030:	00000000 00ffff00 f8f80000 06060606     ................
  404040:	06070706 07070606 03030303 03030303     ................
  404050:	feff0303 0303fffe 03030303 01030303     ................
  404060:	06060707 06060606 06060606 03030303     ................
  404070:	03030303 feff0303 03030000 03030303     ................
  404080:	fcff0303 06060606 06060606 03070606     ................
  404090:	00ffff00 00000000 00fcfc00 0c0f0f00     ................
  4040a0:	0c0c0c0c 0cffff0c 00000000 00000000     ................
  4040b0:	00070700 ffff0000 03030303 03030303     ................
  4040c0:	03030000 03030303 feff0303 06070303     ................
  4040d0:	06060606 03070606 0003ffff 00000000     ................
  4040e0:	00000000 0c0cffff 0c0c0c0c fcfc0c0c     ................
  4040f0:	06060707 06060606 07070606 03030707     ................
  404100:	03030303 ffff0303 00000000 0efcf800     ................
  404110:	00010306 00000000 00070700 00000000     ................
  404120:	ffff0000 03030303 0000ffff 0303fffe     ................
  404130:	03030303 feff0303 06060703 06060606     ................
  404140:	03070606 8383ffff 83838383 ffff8383     ................
  404150:	01010101 01010101 ffff0101 00000000     ................
  404160:	00000000 07070600 00000000 78787878     ............xxxx
	...
  404178:	78787878 00000000 00000000 00000000     xxxx............
  404188:	00000000 c0000000 f87f7ff8 000000c0     ................
  404198:	3ffce000 33303033 00e0fc3f 00000707     ...?3003?.......
  4041a8:	00000000 07070000 0303ffff 03030303     ................
  4041b8:	f8fe8603 0303ffff 03030303 fcff0703     ................
  4041c8:	06060707 06060606 00030306 1e78e080     ..............x.
  4041d8:	03030307 03030303 c0f03f0f 00000000     .........?......
  4041e8:	00000000 03000000 06060607 06060606     ................
  4041f8:	ffff0303 07030303 80e0781e ffff0000     .........x......
  404208:	00000000 0f3ff0c0 07070606 07060606     ......?.........
  404218:	00000003 0303ffff 03030303 03030303     ................
  404228:	0303ffff 00030303 00000000 06060707     ................
  404238:	06060606 06060606 c3c3ffff c3c3c3c3     ................
  404248:	0303c3c3 0000ffff 00000000 00000000     ................
  404258:	00000707 00000000 00000000 1c38e0c0     ..............8.
  404268:	0303070e 03030303 0000ffff 0c0c0000     ................
  404278:	fcfc0c0c 06060301 06060606 01030606     ................
  404288:	0000ffff 00000000 ffff0000 0303ffff     ................
  404298:	03030303 ffff0303 00000707 00000000     ................
  4042a8:	07070000 03030303 03ffff03 03030303     ................
  4042b8:	00000000 00ffff00 00000000 06060606     ................
  4042c8:	06070706 06060606 00000000 00000000     ................
  4042d8:	00ffff00 00fcfc00 00000000 00ffff00     ................
  4042e8:	06030100 06060606 00010306 8000ffff     ................
  4042f8:	183060c0 0103060c 0d0fffff c0603018     .`0..........0`.
  404308:	00000080 00000707 00000000 04060301     ................
  404318:	0000ffff 00000000 00000000 0000ffff     ................
	...
  404330:	06060707 06060606 06060606 1c0fffff     ................
  404340:	78e0e078 ffff0e1c 0000ffff 00010100     x..x............
  404350:	ffff0000 00000707 00000000 07070000     ................
  404360:	7c1effff 0000c0f0 ffff0000 0000ffff     ...|............
  404370:	7c1f0701 ffffc0f0 00000707 00000000     ...|............
  404380:	07070301 3ef8e080 0f03030f 80e0f83e     .......>....>...
  404390:	e0f83f0f 80000080 0f3ff8e0 03000000     .?........?.....
  4043a0:	07060607 00000003 0303ffff 03030303     ................
  4043b0:	fcfe0303 0c0cffff 0c0c0c0c 03070c0c     ................
  4043c0:	00000707 00000000 00000000 8383ffff     ................
  4043d0:	83838383 7cfe8383 0101ffff 3d0f0301     .......|.......=
  4043e0:	0080e171 00000707 00000000 06070100     q...............
  4043f0:	e3731f0e 030383c3 0e0f0303 00008080     ..s.............
  404400:	1c0e0301 80c07038 06060703 06060606     ....8p..........
  404410:	03070606 03030f0f 03ffff03 0f0f0303     ................
  404420:	00000000 00ffff00 00000000 00000000     ................
  404430:	00070700 00000000 c080ffff 60606060     ............````
  404440:	0080c060 0081ffff 00000000 ffff0000     `...............
  404450:	03030707 06060606 00010306 fefe6060     ............``..
  404460:	60606060 00606060 ffff0000 00000000     ```````.........
  404470:	80800000 03010000 06060606 01030706     ................

00404480 <oCRAExtended_22ptDescriptors>:
  404480:	0000030c 00000000 00000000 00000000     ................
	...
  4044b0:	0024030c 0048030c 006c030c 0090030c     ..$...H...l.....
  4044c0:	00b4030c 00d8030c 00fc030c 0120030c     .............. .
  4044d0:	0144030c 0168030c 018c030c 01b0030c     ..D...h.........
	...
  4044f8:	01d4030c 01f8030c 021c030c 0240030c     ..............@.
  404508:	0264030c 0288030c 02ac030c 02d0030c     ..d.............
  404518:	02f4030c 0318030c 033c030c 0360030c     ..........<...`.
  404528:	0384030c 03a8030c 03cc030c 03f0030c     ................
  404538:	00000000 0414030c 0438030c 045c030c     ..........8...\.
	...
  40457c:	0480030c 00000000 00000000 00000000     ................
	...
  4045c4:	04a4030c                                ....

004045c8 <oCRAExtended_18ptBitmaps>:
  4045c8:	ffff1818 ff181818 031818ff 031f1f03     ................
  4045d8:	1f1f0303 00000303 c0000000 0f1c78e0     .............x..
  4045e8:	3870c003 0003071e 00000000 0303fffe     ..p8............
  4045f8:	03030303 7ffeff03 c0c0c0ff c0c0c0c0     ................
  404608:	03007fff ff030303 000000ff c0c00000     ................
  404618:	ffffc0c0 fefec0c0 83838303 83838383     ................
  404628:	fffeff83 c1c1c1ff c1c1c1c1 0303c0c1     ................
  404638:	83838383 7eff8383 c1c0c000 c1c1c1c1     .......~........
  404648:	007effc1 00ffff00 fc000000 000000fc     ..~.............
  404658:	06060707 ffff0606 00000006 8383ffff     ................
  404668:	83838383 e1606003 c1c1c1c1 7fffc1c1     .....``.........
  404678:	0003ffff 00000000 ff000000 c6c6c6ff     ................
  404688:	c6c6c6c6 0700fefe 03030307 ff830303     ................
  404698:	0000007f fefe0000 00000103 ffff8000     ................
  4046a8:	ff838383 7f0080ff c1c1c1ff c1c1c1c1     ................
  4046b8:	7f7f7fff 63636363 ff636363 000000ff     ....ccccccc.....
  4046c8:	00000000 ffffc000 00000000 00707070     ............ppp.
  4046d8:	00000000 1c000000 00001c1c 00000000     ................
  4046e8:	1ffce000 0000e0fc 3ff8e000 0c0c0c0f     ...........?....
  4046f8:	e0f83f0f 8383ffff c7838383 ff007cfe     .?...........|..
  404708:	c1c1c1ff 7fe3c1c1 f0c0003e 03030e3c     ........>...<...
  404718:	03030303 3c0f0300 c0c0c070 00c0c0c0     .......<p.......
  404728:	ffff0303 3c0e0303 c000c0f0 c0ffffc0     .......<........
  404738:	0f3c70c0 ffff0003 83838383 03030303     .p<.............
  404748:	c1ffff00 c0c1c1c1 00c0c0c0 6363ffff     ..............cc
  404758:	63636363 ff000303 000000ff 00000000     cccc............
  404768:	f0e00000 03060c18 03030303 c0ff7f03     ................
  404778:	c6c6c0c0 7efec6c6 8080ffff 80808080     .......~........
  404788:	ffffff80 010101ff 01010101 0303ffff     ................
  404798:	ffff0303 03030303 c0c0c000 c0ffffc0     ................
  4047a8:	00c0c0c0 00000000 ff000000 000000ff     ................
  4047b8:	c0c0fe7e 7fffc0c0 ffff0000 183060c0     ~............`0.
  4047c8:	0103060c 01ffff00 380c0603 0080c060     ...........8`...
  4047d8:	0000ffff 00000000 ff000000 c0c0c0ff     ................
  4047e8:	c0c0c0c0 ffffc0c0 70701c0e ffff0e1c     ..........pp....
  4047f8:	00ffff00 00000000 00ffff00 3c0fffff     ...............<
  404808:	0080c0f0 ffffff00 000000ff 781e0701     ...............x
  404818:	f0c0ffff 03071e3c f03c1e07 3c0f03c0     ....<.....<....<
  404828:	e0c0e078 030f3c78 0303ffff 03030303     x...x<..........
  404838:	fffeff03 030303ff 03030303 ffff0101     ................
  404848:	e3636363 7f6363e3 00ffff3e 07010000     ccc..cc.>.......
  404858:	c0f0380e 63331f0e 030383c3 700e0f03     .8....3c.......p
  404868:	c0c0c0f0 ccc6c3c1 0f0070f8 ff03030f     .........p......
  404878:	0f0303ff 0000000f ffff0000 00000000     ................
  404888:	3060ffff 30303030 ffc0e070 c0c060ff     ..`00000p....`..
  404898:	e0c0c0c0 30303f7f 3030fefe 00303030     .....?00..00000.
  4048a8:	7f000000 c0c0c0ff 0070f0c0              ..........p.

004048b4 <oCRAExtended_28ptBitmaps>:
  4048b4:	e0e0e000 e0ffffff ffffffe0 00e0e0e0     ................
  4048c4:	70707000 70ffffff ffffff70 00707070     .ppp...pp...ppp.
  4048d4:	00000000 000f0f0f 0f0f0f00 00000000     ................
	...
  4048ec:	fcf0c000 00071f7f 00000000 fcf0c080     ................
  4048fc:	01030f3f 00000000 fef8e000 00030f3f     ?...........?...
	...
  404914:	fffffe00 07070707 07070707 00feffff     ................
  404924:	ffffff00 00000000 00000000 00ffffff     ................
  404934:	ffff7f00 e0e0e0e0 e0e0e0e0 007fffff     ................
  404944:	07070700 ff070707 0000ffff 00000000     ................
  404954:	00000000 ff000000 0000ffff e0e0e000     ................
  404964:	e0e0e000 ffe0e0e0 e0e0ffff ffffffe0     ................
  404974:	07070700 07070707 07070707 00feffff     ................
  404984:	fcfcf800 1c1c1c1c 1c1c1c1c 000f1f1f     ................
  404994:	ffffff00 e0e0e0e0 e0e0e0e0 00e0e0e0     ................
  4049a4:	07070700 07070707 07070707 feffff07     ................
  4049b4:	00000000 1c1c1c1c 1c1c1c1c e7ffff1c     ................
  4049c4:	e0e0e000 e0e0e0e0 e0e0e0e0 7fffffe0     ................
  4049d4:	ffff0000 000000ff f8000000 0000f8f8     ................
  4049e4:	ffff0000 e0e0e0ff ffe0e0e0 e0e0ffff     ................
	...
  4049fc:	ff000000 0000ffff 00000000 07ffffff     ................
  404a0c:	07070707 00070707 00000000 1c1f1f1f     ................
  404a1c:	1c1c1c1c 00f8fcfc 70707000 e0e0e0e0     .........ppp....
  404a2c:	e0e0e0e0 007fffff ffffff00 00000707     ................
	...
  404a44:	ffffff00 e0e0e0e0 e0e0e0e0 00e0e0e0     ................
  404a54:	ffffff00 e0e0e0e0 e0e0e0e0 00ffffff     ................
  404a64:	0f0f0f00 07070707 07070707 ffffff07     ................
  404a74:	00000000 c0000000 3c78f0e0 07070f1e     ..........x<....
  404a84:	00000000 ff000000 0000ffff 00000000     ................
  404a94:	00000000 07ffffff ffffff07 00000000     ................
  404aa4:	fcfcf800 1c1f1f1f 1f1f1f1c 00f8fcfc     ................
  404ab4:	ffff7f00 e0e0e0e0 e0e0e0e0 007fffff     ................
  404ac4:	ffffff00 07070707 07070707 00ffffff     ................
  404ad4:	07070700 07070707 07070707 00ffffff     ................
	...
  404aec:	e0c00000 00ffffff 00000000 f0f0f000     ................
  404afc:	0000f0f0 00000000 00000000 c1c1c100     ................
  404b0c:	0000c1c1 00000000 00000000 07070700     ................
  404b1c:	00000707 00000000 00000000 fffee000     ................
  404b2c:	00e0feff 00000000 f0000000 011ffffe     ................
  404b3c:	feff1f01 000000e0 fffff000 0707071f     ................
  404b4c:	1f070707 00f0ffff ffffff00 07070707     ................
  404b5c:	07070707 f8fcfe0f ffffff00 1c1c1c1c     ................
  404b6c:	1c1c1c1c c1f7ff3e ffffff00 e0e0e0e0     ....>...........
  404b7c:	e0e0e0e0 0f3f7f70 e0800000 0f3efcf8     ....p.?.......>.
  404b8c:	07070707 07070707 ffff7e00 000000c3     .........~......
	...
  404ba4:	07010000 f07c3f1f e0e0e0e0 e0e0e0e0     .....?|.........
  404bb4:	07070700 07ffffff fe3e0f07 0080e0f8     ..........>.....
  404bc4:	00000000 00ffffff 00000000 7effffc3     ...............~
  404bd4:	e0e0e000 e0ffffff 3f7cf0e0 0001071f     ..........|?....
  404be4:	ffffff00 07070707 07070707 07070707     ................
  404bf4:	ffffff00 1c1c1c1c 00001c1c 00000000     ................
  404c04:	ffffff00 e0e0e0e0 e0e0e0e0 e0e0e0e0     ................
  404c14:	ffffff00 07070707 07070707 07070707     ................
  404c24:	ffffff00 07070707 07070707 00000007     ................
  404c34:	ffffff00 00000000 00000000 00000000     ................
  404c44:	e0800000 1f3e78f0 07070707 00070707     .....x>.........
  404c54:	ffffff00 00000001 e0e0e0e0 00e0e0e0     ................
  404c64:	ff7f3f00 e0e0e0e0 e0e0e0e0 003f7fff     .?............?.
  404c74:	fefffe00 00000000 00000000 00fefffe     ................
  404c84:	ffffff00 1c1c1c1c 1c1c1c1c 00ffffff     ................
  404c94:	7fff7f00 00000000 00000000 007fff7f     ................
  404ca4:	07070702 ffff0707 070707ff 00020707     ................
  404cb4:	00000000 ffff0000 000000ff 00000000     ................
  404cc4:	e0e0e040 ffffe0e0 e0e0e0ff 0040e0e0     @.............@.
	...
  404cdc:	ff000000 0000ffff e0e00000 000000e0     ................
  404cec:	ff000000 0000ffff 7f1f0000 e0e0e0ff     ................
  404cfc:	ffe0e0e0 00003f7f ffffff00 c0808000     .....?..........
  404d0c:	3c78f0e0 03070f1e ffffff00 c1e3f77f     ..x<............
  404d1c:	00000080 00000000 ffffff00 03010000     ................
  404d2c:	3c1e0f07 c0e0f078 ffffff00 00000000     ...<x...........
	...
  404d44:	ffffff00 00000000 00000000 00000000     ................
  404d54:	ffffff00 e0e0e0e0 e0e0e0e0 00e0e0e0     ................
  404d64:	ffffff00 e0fc7f1f ff1f7ffc 0000ffff     ................
  404d74:	ffffff00 07070000 ff000007 0000ffff     ................
  404d84:	ffffff00 00000000 ff000000 0000ffff     ................
  404d94:	ffffff00 c0f8fe3f 00000000 00ffffff     ....?...........
  404da4:	ffffff00 7f0f0100 0080f0fe 00ffffff     ................
  404db4:	ffffff00 00000000 fc7f1f03 00ffffff     ................
  404dc4:	e0800000 071f7ef8 f8fe1f07 000080e0     .....~..........
  404dd4:	ffff7e00 000000c3 c3000000 007effff     .~............~.
  404de4:	07010000 e0f87f1f 1f7ff8e0 00000107     ................
  404df4:	ffffff00 07070707 07070707 00fcfeff     ................
  404e04:	ffffff00 70707070 70707070 001f3f7f     ....pppppppp.?..
  404e14:	ffffff00 00000000 00000000 00000000     ................
  404e24:	ffffff00 07070707 07070707 00fcfeff     ................
  404e34:	ffffff00 3f1f0707 07c7f7ff 00010307     .......?........
  404e44:	ffffff00 00000000 3f0f0300 00e0f87e     ...........?~...
  404e54:	ff7e1c00 0787c7e7 07070707 003c3e3f     ..~.........?><.
  404e64:	00000000 3e0f0703 c0e0f07c 00000000     .......>|.......
  404e74:	fc7c3c00 e0e0e0e0 e7e3e1e0 0038feff     .<|...........8.
  404e84:	3f3f3f00 ff070707 0707ffff 3f3f3f07     .???.........???
  404e94:	00000000 ff000000 0000ffff 00000000     ................
  404ea4:	00000000 ff000000 0000ffff 00000000     ................
  404eb4:	ffffff00 80800000 80808080 00000000     ................
  404ec4:	ffffff00 0303070e 07030303 00fcfeff     ................
  404ed4:	ffffff00 e0e07038 f0e0e0e0 001f3f7f     ....8p.......?..

00404ee4 <oCRAExtended_28ptDescriptors>:
  404ee4:	00000310 00000000 00000000 00000000     ................
	...
  404f14:	00300310 00600310 00900310 00c00310     ..0...`.........
  404f24:	00f00310 01200310 01500310 01800310     ...... ...P.....
  404f34:	01b00310 01e00310 02100310 02400310     ..............@.
	...
  404f5c:	02700310 02a00310 02d00310 03000310     ..p.............
  404f6c:	03300310 03600310 03900310 03c00310     ..0...`.........
  404f7c:	03f00310 04200310 04500310 04800310     ...... ...P.....
  404f8c:	04b00310 04e00310 05100310 05400310     ..............@.
  404f9c:	00000000 05700310 05a00310 05d00310     ......p.........
	...
  404fe0:	06000310                                ....

00404fe4 <oCRAExtended_18ptDescriptors>:
  404fe4:	0000020b 00000000 00000000 00000000     ................
	...
  405014:	0016020b 002c020b 0042020b 0058020b     ......,...B...X.
  405024:	006e020b 0084020b 009a020b 00b0020b     ..n.............
  405034:	00c6020b 00dc020b 00f2020b 0108020b     ................
	...
  40505c:	011e020b 0134020b 014a020b 0160020b     ......4...J...`.
  40506c:	0176020b 018c020b 01a2020b 01b8020b     ..v.............
  40507c:	01ce020b 01e4020b 01fa020b 0210020b     ................
  40508c:	0226020b 023c020b 0252020b 0268020b     ..&...<...R...h.
  40509c:	00000000 027e020b 0294020b 02aa020b     ......~.........
	...
  4050e0:	02c0020b 00000000 00000000 00000000     ................
	...
  405128:	02d6020b 0000080f 00ffff06 00000043     ............C...

00405138 <_global_impure_ptr>:
  405138:	20000200                                ... 

0040513c <_init>:
  40513c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40513e:	bf00      	nop
  405140:	bcf8      	pop	{r3, r4, r5, r6, r7}
  405142:	bc08      	pop	{r3}
  405144:	469e      	mov	lr, r3
  405146:	4770      	bx	lr

00405148 <__init_array_start>:
  405148:	00403ecd 	.word	0x00403ecd

0040514c <__frame_dummy_init_array_entry>:
  40514c:	004000e5                                ..@.

00405150 <_fini>:
  405150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  405152:	bf00      	nop
  405154:	bcf8      	pop	{r3, r4, r5, r6, r7}
  405156:	bc08      	pop	{r3}
  405158:	469e      	mov	lr, r3
  40515a:	4770      	bx	lr

0040515c <__fini_array_start>:
  40515c:	004000c1 	.word	0x004000c1

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	d1fb      	bne.n	20000000 <portable_delay_cycles>
20000008:	4770      	bx	lr
2000000a:	bf00      	nop

2000000c <curr_display>:
2000000c:	0007 0000                                   ....

20000010 <notes_lookup>:
20000010:	0000 4040 54ca 4045 a993 404a fe5d 404f     ..@@.TE@..J@].O@
20000020:	5326 4055 a7f0 405a fcb9 405f 5183 4065     &SU@..Z@.._@.Qe@
20000030:	a64c 406a fb16 406f 4fdf 4075 a4a9 407a     L.j@..o@.Ou@..z@
20000040:	0000 4080 aa65 4082 54ca 4085 ff2e 4087     ...@e..@.T.@...@
20000050:	a993 408a 53f8 408d fe5d 408f a8c1 4092     ...@.S.@]..@...@
20000060:	5326 4095 fd8b 4097 a7f0 409a 5254 409d     &S.@...@...@TR.@
20000070:	0000 40a0 aa65 40a2 54ca 40a5 ff2e 40a7     ...@e..@.T.@...@
20000080:	a993 40aa 53f8 40ad fe5d 40af a8c1 40b2     ...@.S.@]..@...@
20000090:	5326 40b5 fd8b 40b7 a7f0 40ba 5254 40bd     &S.@...@...@TR.@
200000a0:	0000 40c0 aa65 40c2 54ca 40c5 ff2e 40c7     ...@e..@.T.@...@
200000b0:	a993 40ca 53f8 40cd fe5d 40cf a8c1 40d2     ...@.S.@]..@...@
200000c0:	5326 40d5 fd8b 40d7 a7f0 40da 5254 40dd     &S.@...@...@TR.@
200000d0:	0000 40e0 aa65 40e2 54ca 40e5 ff2e 40e7     ...@e..@.T.@...@
200000e0:	a993 40ea 53f8 40ed fe5d 40ef a8c1 40f2     ...@.S.@]..@...@
200000f0:	5326 40f5 fd8b 40f7 a7f0 40fa 5254 40fd     &S.@...@...@TR.@
20000100:	0000 4100 5532 4101 aa65 4102 ff97 4103     ...A2U.Ae..A...A
20000110:	54ca 4105 a9fc 4106 ff2e 4107 5461 4109     .T.A...A...AaT.A
20000120:	a993 410a fec5 410b 53f8 410d a92a 410e     ...A...A.S.A*..A
20000130:	0000 4110 5532 4111 aa65 4112 ff97 4113     ...A2U.Ae..A...A
20000140:	54ca 4115 a9fc 4116 ff2e 4117 5461 4119     .T.A...A...AaT.A
20000150:	a993 411a fec5 411b 53f8 411d a92a 411e     ...A...A.S.A*..A
20000160:	0000 4120 5532 4121 aa65 4122 ff97 4123     .. A2U!Ae."A..#A
20000170:	54ca 4125 a9fc 4126 ff2e 4127 5461 4129     .T%A..&A..'AaT)A
20000180:	a993 412a fec5 412b 53f8 412d a92a 412e     ..*A..+A.S-A*..A
20000190:	0000 4130 5532 4131 aa65 4132 ff97 4133     ..0A2U1Ae.2A..3A
200001a0:	54ca 4135 a9fc 4136 ff2e 4137 5461 4139     .T5A..6A..7AaT9A
200001b0:	a993 413a fec5 413b 53f8 413d a92a 413e     ..:A..;A.S=A*.>A
200001c0:	0000 4140 5532 4141 aa65 4142 ff97 4143     ..@A2UAAe.BA..CA
200001d0:	54ca 4145 a9fc 4146 ff2e 4147 5461 4149     .TEA..FA..GAaTIA
200001e0:	a993 414a fec5 414b 53f8 414d a92a 414e     ..JA..KA.SMA*.NA
200001f0:	0000 4150                                   ..PA

200001f4 <g_interrupt_enabled>:
200001f4:	0001 0000                                   ....

200001f8 <SystemCoreClock>:
200001f8:	0900 003d 0000 0000                         ..=.....

20000200 <impure_data>:
20000200:	0000 0000 04ec 2000 0554 2000 05bc 2000     ....... T.. ... 
	...
20000234:	5134 0040 0000 0000 0000 0000 0000 0000     4Q@.............
	...
200002a8:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
200002b8:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...
