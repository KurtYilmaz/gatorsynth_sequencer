
gatorsynth_sequencer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002780  00400000  00400000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000004c0  20000000  00402780  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  2 .bss          0000008c  200004c0  00402c40  000204c0  2**2
                  ALLOC
  3 .stack        00003004  2000054c  00402ccc  000204c0  2**0
                  ALLOC
  4 .ARM.attributes 0000002a  00000000  00000000  000204c0  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  000204ea  2**0
                  CONTENTS, READONLY
  6 .debug_info   00005557  00000000  00000000  00020543  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001842  00000000  00000000  00025a9a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00001b6b  00000000  00000000  000272dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000550  00000000  00000000  00028e47  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000440  00000000  00000000  00029397  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00010d2e  00000000  00000000  000297d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000c3b3  00000000  00000000  0003a505  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0003ced7  00000000  00000000  000468b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000b3c  00000000  00000000  00083790  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <_sfixed>:
  400000:	20003550 	.word	0x20003550
  400004:	00401681 	.word	0x00401681
  400008:	0040167d 	.word	0x0040167d
  40000c:	0040167d 	.word	0x0040167d
  400010:	0040167d 	.word	0x0040167d
  400014:	0040167d 	.word	0x0040167d
  400018:	0040167d 	.word	0x0040167d
	...
  40002c:	0040167d 	.word	0x0040167d
  400030:	0040167d 	.word	0x0040167d
  400034:	00000000 	.word	0x00000000
  400038:	0040167d 	.word	0x0040167d
  40003c:	0040167d 	.word	0x0040167d
  400040:	0040167d 	.word	0x0040167d
  400044:	0040167d 	.word	0x0040167d
  400048:	0040167d 	.word	0x0040167d
  40004c:	0040167d 	.word	0x0040167d
  400050:	0040167d 	.word	0x0040167d
  400054:	0040167d 	.word	0x0040167d
  400058:	0040167d 	.word	0x0040167d
  40005c:	00000000 	.word	0x00000000
  400060:	0040167d 	.word	0x0040167d
  400064:	0040167d 	.word	0x0040167d
  400068:	0040167d 	.word	0x0040167d
  40006c:	0040167d 	.word	0x0040167d
  400070:	00401aa1 	.word	0x00401aa1
  400074:	00400c55 	.word	0x00400c55
  400078:	0040167d 	.word	0x0040167d
  40007c:	0040167d 	.word	0x0040167d
  400080:	0040167d 	.word	0x0040167d
  400084:	0040167d 	.word	0x0040167d
  400088:	00000000 	.word	0x00000000
  40008c:	0040167d 	.word	0x0040167d
  400090:	0040167d 	.word	0x0040167d
  400094:	0040167d 	.word	0x0040167d
  400098:	0040167d 	.word	0x0040167d
  40009c:	0040149d 	.word	0x0040149d
  4000a0:	0040167d 	.word	0x0040167d
  4000a4:	0040167d 	.word	0x0040167d
  4000a8:	0040167d 	.word	0x0040167d
  4000ac:	0040167d 	.word	0x0040167d
  4000b0:	0040167d 	.word	0x0040167d
  4000b4:	0040167d 	.word	0x0040167d
  4000b8:	0040167d 	.word	0x0040167d
  4000bc:	0040167d 	.word	0x0040167d

004000c0 <__do_global_dtors_aux>:
  4000c0:	b510      	push	{r4, lr}
  4000c2:	4c05      	ldr	r4, [pc, #20]	; (4000d8 <__do_global_dtors_aux+0x18>)
  4000c4:	7823      	ldrb	r3, [r4, #0]
  4000c6:	b933      	cbnz	r3, 4000d6 <__do_global_dtors_aux+0x16>
  4000c8:	4b04      	ldr	r3, [pc, #16]	; (4000dc <__do_global_dtors_aux+0x1c>)
  4000ca:	b113      	cbz	r3, 4000d2 <__do_global_dtors_aux+0x12>
  4000cc:	4804      	ldr	r0, [pc, #16]	; (4000e0 <__do_global_dtors_aux+0x20>)
  4000ce:	f3af 8000 	nop.w
  4000d2:	2301      	movs	r3, #1
  4000d4:	7023      	strb	r3, [r4, #0]
  4000d6:	bd10      	pop	{r4, pc}
  4000d8:	200004c0 	.word	0x200004c0
  4000dc:	00000000 	.word	0x00000000
  4000e0:	00402780 	.word	0x00402780

004000e4 <frame_dummy>:
  4000e4:	4b08      	ldr	r3, [pc, #32]	; (400108 <frame_dummy+0x24>)
  4000e6:	b510      	push	{r4, lr}
  4000e8:	b11b      	cbz	r3, 4000f2 <frame_dummy+0xe>
  4000ea:	4908      	ldr	r1, [pc, #32]	; (40010c <frame_dummy+0x28>)
  4000ec:	4808      	ldr	r0, [pc, #32]	; (400110 <frame_dummy+0x2c>)
  4000ee:	f3af 8000 	nop.w
  4000f2:	4808      	ldr	r0, [pc, #32]	; (400114 <frame_dummy+0x30>)
  4000f4:	6803      	ldr	r3, [r0, #0]
  4000f6:	b903      	cbnz	r3, 4000fa <frame_dummy+0x16>
  4000f8:	bd10      	pop	{r4, pc}
  4000fa:	4b07      	ldr	r3, [pc, #28]	; (400118 <frame_dummy+0x34>)
  4000fc:	2b00      	cmp	r3, #0
  4000fe:	d0fb      	beq.n	4000f8 <frame_dummy+0x14>
  400100:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400104:	4718      	bx	r3
  400106:	bf00      	nop
  400108:	00000000 	.word	0x00000000
  40010c:	200004c4 	.word	0x200004c4
  400110:	00402780 	.word	0x00402780
  400114:	00402780 	.word	0x00402780
  400118:	00000000 	.word	0x00000000

0040011c <twi_master_read>:
 * \param p_packet Packet information and data (see \ref twi_packet_t).
 *
 * \return TWI_SUCCESS if all bytes were read, error code otherwise.
 */
uint32_t twi_master_read(Twi *p_twi, twi_packet_t *p_packet)
{
  40011c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	//cpu_irq_disable();
	
	uint32_t status;
	uint32_t cnt = p_packet->length;
  400120:	68cb      	ldr	r3, [r1, #12]
	uint8_t *buffer = p_packet->buffer;
	uint8_t stop_sent = 0;
	uint32_t timeout = TWI_TIMEOUT;;
	
	/* Check argument */
	if (cnt == 0) {
  400122:	2b00      	cmp	r3, #0
  400124:	d049      	beq.n	4001ba <twi_master_read+0x9e>
{
	//cpu_irq_disable();
	
	uint32_t status;
	uint32_t cnt = p_packet->length;
	uint8_t *buffer = p_packet->buffer;
  400126:	688c      	ldr	r4, [r1, #8]
	if (cnt == 0) {
		return TWI_INVALID_ARGUMENT;
	}

	/* Set read mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
  400128:	2600      	movs	r6, #0
  40012a:	6046      	str	r6, [r0, #4]
	p_twi->TWI_MMR = TWI_MMR_MREAD | TWI_MMR_DADR(p_packet->chip) |
  40012c:	684a      	ldr	r2, [r1, #4]
  40012e:	0212      	lsls	r2, r2, #8
  400130:	f402 7240 	and.w	r2, r2, #768	; 0x300
  400134:	f442 5580 	orr.w	r5, r2, #4096	; 0x1000
  400138:	7c0a      	ldrb	r2, [r1, #16]
  40013a:	0412      	lsls	r2, r2, #16
  40013c:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
  400140:	432a      	orrs	r2, r5
  400142:	6042      	str	r2, [r0, #4]
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
  400144:	60c6      	str	r6, [r0, #12]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
  400146:	684d      	ldr	r5, [r1, #4]
 */
static uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
	uint32_t val;

	if (len == 0)
  400148:	b15d      	cbz	r5, 400162 <twi_master_read+0x46>
		return 0;

	val = addr[0];
  40014a:	780a      	ldrb	r2, [r1, #0]
	if (len > 1) {
  40014c:	2d01      	cmp	r5, #1
		val <<= 8;
		val |= addr[1];
  40014e:	bfc4      	itt	gt
  400150:	784e      	ldrbgt	r6, [r1, #1]
  400152:	ea46 2202 	orrgt.w	r2, r6, r2, lsl #8
	}
	if (len > 2) {
  400156:	2d02      	cmp	r5, #2
  400158:	dd04      	ble.n	400164 <twi_master_read+0x48>
		val <<= 8;
		val |= addr[2];
  40015a:	7889      	ldrb	r1, [r1, #2]
  40015c:	ea41 2202 	orr.w	r2, r1, r2, lsl #8
  400160:	e000      	b.n	400164 <twi_master_read+0x48>
static uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
	uint32_t val;

	if (len == 0)
		return 0;
  400162:	2200      	movs	r2, #0
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
  400164:	60c2      	str	r2, [r0, #12]

	/* Send a START condition */
	if (cnt == 1) {
  400166:	2b01      	cmp	r3, #1
  400168:	d103      	bne.n	400172 <twi_master_read+0x56>
		p_twi->TWI_CR = TWI_CR_START | TWI_CR_STOP;
  40016a:	2203      	movs	r2, #3
  40016c:	6002      	str	r2, [r0, #0]
		stop_sent = 1;
  40016e:	2701      	movs	r7, #1
  400170:	e02f      	b.n	4001d2 <twi_master_read+0xb6>
	} else {
		p_twi->TWI_CR = TWI_CR_START;
  400172:	2201      	movs	r2, #1
  400174:	6002      	str	r2, [r0, #0]
		stop_sent = 0;
  400176:	2700      	movs	r7, #0
  400178:	e02b      	b.n	4001d2 <twi_master_read+0xb6>
		if (cnt == 1  && !stop_sent) {
			p_twi->TWI_CR = TWI_CR_STOP;
			stop_sent = 1;
		}

		if (!(status & TWI_SR_RXRDY)) {
  40017a:	4629      	mov	r1, r5
		p_twi->TWI_CR = TWI_CR_START;
		stop_sent = 0;
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
  40017c:	6a02      	ldr	r2, [r0, #32]
		if (status & TWI_SR_NACK) {
  40017e:	f412 7f80 	tst.w	r2, #256	; 0x100
  400182:	d11d      	bne.n	4001c0 <twi_master_read+0xa4>
			return TWI_RECEIVE_NACK;
		}

		if (!timeout--) {
  400184:	1e4d      	subs	r5, r1, #1
  400186:	b1f1      	cbz	r1, 4001c6 <twi_master_read+0xaa>
			return TWI_ERROR_TIMEOUT;
		}
				
		/* Last byte ? */
		if (cnt == 1  && !stop_sent) {
  400188:	2b01      	cmp	r3, #1
  40018a:	d104      	bne.n	400196 <twi_master_read+0x7a>
  40018c:	bb77      	cbnz	r7, 4001ec <twi_master_read+0xd0>
			p_twi->TWI_CR = TWI_CR_STOP;
  40018e:	f8c0 8000 	str.w	r8, [r0]
			stop_sent = 1;
  400192:	4667      	mov	r7, ip
  400194:	e02a      	b.n	4001ec <twi_master_read+0xd0>
		}

		if (!(status & TWI_SR_RXRDY)) {
  400196:	f012 0f02 	tst.w	r2, #2
  40019a:	d005      	beq.n	4001a8 <twi_master_read+0x8c>
			continue;
		}
		*buffer++ = p_twi->TWI_RHR;
  40019c:	6b02      	ldr	r2, [r0, #48]	; 0x30
  40019e:	7022      	strb	r2, [r4, #0]

		cnt--;
  4001a0:	3b01      	subs	r3, #1
		}

		if (!(status & TWI_SR_RXRDY)) {
			continue;
		}
		*buffer++ = p_twi->TWI_RHR;
  4001a2:	3401      	adds	r4, #1

		cnt--;
		timeout = TWI_TIMEOUT;
  4001a4:	4631      	mov	r1, r6
  4001a6:	e000      	b.n	4001aa <twi_master_read+0x8e>
  4001a8:	4629      	mov	r1, r5
	} else {
		p_twi->TWI_CR = TWI_CR_START;
		stop_sent = 0;
	}

	while (cnt > 0) {
  4001aa:	2b00      	cmp	r3, #0
  4001ac:	d1e6      	bne.n	40017c <twi_master_read+0x60>

		cnt--;
		timeout = TWI_TIMEOUT;
	}

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
  4001ae:	6a03      	ldr	r3, [r0, #32]
  4001b0:	f013 0f01 	tst.w	r3, #1
  4001b4:	d0fb      	beq.n	4001ae <twi_master_read+0x92>
	}

	p_twi->TWI_SR;
  4001b6:	6a03      	ldr	r3, [r0, #32]

	//cpu_irq_enable();

	return TWI_SUCCESS;
  4001b8:	e01c      	b.n	4001f4 <twi_master_read+0xd8>
	uint8_t stop_sent = 0;
	uint32_t timeout = TWI_TIMEOUT;;
	
	/* Check argument */
	if (cnt == 0) {
		return TWI_INVALID_ARGUMENT;
  4001ba:	f04f 0e01 	mov.w	lr, #1
  4001be:	e019      	b.n	4001f4 <twi_master_read+0xd8>
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
  4001c0:	f04f 0e05 	mov.w	lr, #5
  4001c4:	e016      	b.n	4001f4 <twi_master_read+0xd8>
		}

		if (!timeout--) {
			return TWI_ERROR_TIMEOUT;
  4001c6:	f04f 0e09 	mov.w	lr, #9
  4001ca:	e013      	b.n	4001f4 <twi_master_read+0xd8>
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
  4001cc:	f04f 0e05 	mov.w	lr, #5
  4001d0:	e010      	b.n	4001f4 <twi_master_read+0xd8>
		p_twi->TWI_CR = TWI_CR_START;
		stop_sent = 0;
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
  4001d2:	6a02      	ldr	r2, [r0, #32]
		if (status & TWI_SR_NACK) {
  4001d4:	f412 7e80 	ands.w	lr, r2, #256	; 0x100
  4001d8:	d1f8      	bne.n	4001cc <twi_master_read+0xb0>
  4001da:	f643 2597 	movw	r5, #14999	; 0x3a97
			continue;
		}
		*buffer++ = p_twi->TWI_RHR;

		cnt--;
		timeout = TWI_TIMEOUT;
  4001de:	f643 2698 	movw	r6, #15000	; 0x3a98
			return TWI_ERROR_TIMEOUT;
		}
				
		/* Last byte ? */
		if (cnt == 1  && !stop_sent) {
			p_twi->TWI_CR = TWI_CR_STOP;
  4001e2:	f04f 0802 	mov.w	r8, #2
			stop_sent = 1;
  4001e6:	f04f 0c01 	mov.w	ip, #1
  4001ea:	e7cd      	b.n	400188 <twi_master_read+0x6c>
		}

		if (!(status & TWI_SR_RXRDY)) {
  4001ec:	f012 0f02 	tst.w	r2, #2
  4001f0:	d0c3      	beq.n	40017a <twi_master_read+0x5e>
  4001f2:	e7d3      	b.n	40019c <twi_master_read+0x80>
	p_twi->TWI_SR;

	//cpu_irq_enable();

	return TWI_SUCCESS;
}
  4001f4:	4670      	mov	r0, lr
  4001f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4001fa:	bf00      	nop

004001fc <twi_master_write>:
 * \param p_packet Packet information and data (see \ref twi_packet_t).
 *
 * \return TWI_SUCCESS if all bytes were written, error code otherwise.
 */
uint32_t twi_master_write(Twi *p_twi, twi_packet_t *p_packet)
{
  4001fc:	4602      	mov	r2, r0
	//cpu_irq_disable();

	uint32_t status;
	uint32_t cnt = p_packet->length;
  4001fe:	68c8      	ldr	r0, [r1, #12]
	uint8_t *buffer = p_packet->buffer;

	/* Check argument */
	if (cnt == 0) {
  400200:	b330      	cbz	r0, 400250 <twi_master_write+0x54>
 * \param p_packet Packet information and data (see \ref twi_packet_t).
 *
 * \return TWI_SUCCESS if all bytes were written, error code otherwise.
 */
uint32_t twi_master_write(Twi *p_twi, twi_packet_t *p_packet)
{
  400202:	b410      	push	{r4}
	//cpu_irq_disable();

	uint32_t status;
	uint32_t cnt = p_packet->length;
	uint8_t *buffer = p_packet->buffer;
  400204:	688c      	ldr	r4, [r1, #8]
		return TWI_INVALID_ARGUMENT;
	}

	/* Set write mode, slave address and 3 internal address byte lengths */
	//p_twi->TWI_MMR = 0;
	p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip);
  400206:	7c0b      	ldrb	r3, [r1, #16]
  400208:	041b      	lsls	r3, r3, #16
  40020a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
  40020e:	6053      	str	r3, [r2, #4]
	//p_twi->TWI_IADR = 0;
	//p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);

	/* Send all bytes */
	while (cnt > 0) {
		status = p_twi->TWI_SR;
  400210:	6a13      	ldr	r3, [r2, #32]
		if (status & TWI_SR_NACK) {
  400212:	f413 7f80 	tst.w	r3, #256	; 0x100
  400216:	d004      	beq.n	400222 <twi_master_write+0x26>
  400218:	e01c      	b.n	400254 <twi_master_write+0x58>
	//p_twi->TWI_IADR = 0;
	//p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);

	/* Send all bytes */
	while (cnt > 0) {
		status = p_twi->TWI_SR;
  40021a:	6a13      	ldr	r3, [r2, #32]
		if (status & TWI_SR_NACK) {
  40021c:	f413 7f80 	tst.w	r3, #256	; 0x100
  400220:	d11a      	bne.n	400258 <twi_master_write+0x5c>
			return TWI_RECEIVE_NACK;
		}

		if (!(status & TWI_SR_TXRDY)) {
  400222:	f013 0f04 	tst.w	r3, #4
  400226:	d003      	beq.n	400230 <twi_master_write+0x34>
			continue;
		}
		p_twi->TWI_THR = *buffer++;
  400228:	7823      	ldrb	r3, [r4, #0]
  40022a:	6353      	str	r3, [r2, #52]	; 0x34

		cnt--;
  40022c:	3801      	subs	r0, #1
		}

		if (!(status & TWI_SR_TXRDY)) {
			continue;
		}
		p_twi->TWI_THR = *buffer++;
  40022e:	3401      	adds	r4, #1
	/* Set internal address for remote chip */
	//p_twi->TWI_IADR = 0;
	//p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);

	/* Send all bytes */
	while (cnt > 0) {
  400230:	2800      	cmp	r0, #0
  400232:	d1f2      	bne.n	40021a <twi_master_write+0x1e>

		cnt--;
	}

	while (1) {
		status = p_twi->TWI_SR;
  400234:	6a13      	ldr	r3, [r2, #32]
		if (status & TWI_SR_NACK) {
  400236:	f413 7080 	ands.w	r0, r3, #256	; 0x100
  40023a:	d10f      	bne.n	40025c <twi_master_write+0x60>
			return TWI_RECEIVE_NACK;
		}

		if (status & TWI_SR_TXRDY) {
  40023c:	f013 0f04 	tst.w	r3, #4
  400240:	d0f8      	beq.n	400234 <twi_master_write+0x38>
			break;
		}
	}

	p_twi->TWI_CR = TWI_CR_STOP;
  400242:	2302      	movs	r3, #2
  400244:	6013      	str	r3, [r2, #0]

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
  400246:	6a13      	ldr	r3, [r2, #32]
  400248:	f013 0f01 	tst.w	r3, #1
  40024c:	d0fb      	beq.n	400246 <twi_master_write+0x4a>
  40024e:	e006      	b.n	40025e <twi_master_write+0x62>
	uint32_t cnt = p_packet->length;
	uint8_t *buffer = p_packet->buffer;

	/* Check argument */
	if (cnt == 0) {
		return TWI_INVALID_ARGUMENT;
  400250:	2001      	movs	r0, #1
	}

	//cpu_irq_enable();

	return TWI_SUCCESS;
}
  400252:	4770      	bx	lr

	/* Send all bytes */
	while (cnt > 0) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
  400254:	2005      	movs	r0, #5
  400256:	e002      	b.n	40025e <twi_master_write+0x62>
  400258:	2005      	movs	r0, #5
  40025a:	e000      	b.n	40025e <twi_master_write+0x62>
	}

	while (1) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
  40025c:	2005      	movs	r0, #5
	}

	//cpu_irq_enable();

	return TWI_SUCCESS;
}
  40025e:	bc10      	pop	{r4}
  400260:	4770      	bx	lr
  400262:	bf00      	nop
  400264:	0000      	movs	r0, r0
	...

00400268 <DAC_write_cv>:


#define VREF 3.3
#define max 1023

void DAC_write_cv(float voltage){
  400268:	b538      	push	{r3, r4, r5, lr}

	//cpu_irq_disable();

	float float_voltage = (max*(voltage))/VREF;
	uint16_t dac_voltage = (uint16_t) float_voltage;
  40026a:	4917      	ldr	r1, [pc, #92]	; (4002c8 <DAC_write_cv+0x60>)
  40026c:	4b17      	ldr	r3, [pc, #92]	; (4002cc <DAC_write_cv+0x64>)
  40026e:	4798      	blx	r3
  400270:	4b17      	ldr	r3, [pc, #92]	; (4002d0 <DAC_write_cv+0x68>)
  400272:	4798      	blx	r3
  400274:	a312      	add	r3, pc, #72	; (adr r3, 4002c0 <DAC_write_cv+0x58>)
  400276:	e9d3 2300 	ldrd	r2, r3, [r3]
  40027a:	4c16      	ldr	r4, [pc, #88]	; (4002d4 <DAC_write_cv+0x6c>)
  40027c:	47a0      	blx	r4
  40027e:	4b16      	ldr	r3, [pc, #88]	; (4002d8 <DAC_write_cv+0x70>)
  400280:	4798      	blx	r3
  400282:	4b16      	ldr	r3, [pc, #88]	; (4002dc <DAC_write_cv+0x74>)
  400284:	4798      	blx	r3
  400286:	b284      	uxth	r4, r0

	uint8_t low_byte = (uint8_t) (dac_voltage << 2);
	uint8_t high_byte = ((uint8_t) (dac_voltage >> 6)) | (0x90);

	
	SPI_dac_init();
  400288:	4b15      	ldr	r3, [pc, #84]	; (4002e0 <DAC_write_cv+0x78>)
  40028a:	4798      	blx	r3
	REG_PIOB_CODR |=  PIO_PER_P13;
  40028c:	4a15      	ldr	r2, [pc, #84]	; (4002e4 <DAC_write_cv+0x7c>)
  40028e:	6813      	ldr	r3, [r2, #0]
  400290:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  400294:	6013      	str	r3, [r2, #0]
	SPI_byteSend(high_byte);
  400296:	09a0      	lsrs	r0, r4, #6
  400298:	f060 006f 	orn	r0, r0, #111	; 0x6f
  40029c:	b2c0      	uxtb	r0, r0
  40029e:	4d12      	ldr	r5, [pc, #72]	; (4002e8 <DAC_write_cv+0x80>)
  4002a0:	47a8      	blx	r5
	SPI_byteSend(low_byte);
  4002a2:	00a0      	lsls	r0, r4, #2
  4002a4:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
  4002a8:	47a8      	blx	r5
	delay_us(3);
  4002aa:	2016      	movs	r0, #22
  4002ac:	4b0f      	ldr	r3, [pc, #60]	; (4002ec <DAC_write_cv+0x84>)
  4002ae:	4798      	blx	r3
	REG_PIOB_SODR |=  PIO_PER_P13;
  4002b0:	4a0f      	ldr	r2, [pc, #60]	; (4002f0 <DAC_write_cv+0x88>)
  4002b2:	6813      	ldr	r3, [r2, #0]
  4002b4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  4002b8:	6013      	str	r3, [r2, #0]
  4002ba:	bd38      	pop	{r3, r4, r5, pc}
  4002bc:	f3af 8000 	nop.w
  4002c0:	364d9365 	.word	0x364d9365
  4002c4:	3fd364d9 	.word	0x3fd364d9
  4002c8:	447fc000 	.word	0x447fc000
  4002cc:	00402331 	.word	0x00402331
  4002d0:	00401dc5 	.word	0x00401dc5
  4002d4:	00401e6d 	.word	0x00401e6d
  4002d8:	00402291 	.word	0x00402291
  4002dc:	004025d1 	.word	0x004025d1
  4002e0:	00401349 	.word	0x00401349
  4002e4:	400e1034 	.word	0x400e1034
  4002e8:	004013d5 	.word	0x004013d5
  4002ec:	20000001 	.word	0x20000001
  4002f0:	400e1030 	.word	0x400e1030

004002f4 <DAC_write_gate_on>:
	//cpu_irq_enable();
	

}

void DAC_write_gate_on(){
  4002f4:	b510      	push	{r4, lr}
	uint16_t dac_voltage = (uint16_t) float_voltage;

	uint8_t low_byte = (uint8_t) (dac_voltage << 2);
	uint8_t high_byte = ((uint8_t) (dac_voltage >> 6)) | (0xA0);

	SPI_dac_init();
  4002f6:	4b0a      	ldr	r3, [pc, #40]	; (400320 <DAC_write_gate_on+0x2c>)
  4002f8:	4798      	blx	r3
	REG_PIOB_CODR |=  PIO_PER_P13;
  4002fa:	4a0a      	ldr	r2, [pc, #40]	; (400324 <DAC_write_gate_on+0x30>)
  4002fc:	6813      	ldr	r3, [r2, #0]
  4002fe:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  400302:	6013      	str	r3, [r2, #0]
	SPI_byteSend(high_byte);
  400304:	20af      	movs	r0, #175	; 0xaf
  400306:	4c08      	ldr	r4, [pc, #32]	; (400328 <DAC_write_gate_on+0x34>)
  400308:	47a0      	blx	r4
	SPI_byteSend(low_byte);
  40030a:	20fc      	movs	r0, #252	; 0xfc
  40030c:	47a0      	blx	r4
	delay_us(3);
  40030e:	2016      	movs	r0, #22
  400310:	4b06      	ldr	r3, [pc, #24]	; (40032c <DAC_write_gate_on+0x38>)
  400312:	4798      	blx	r3
	REG_PIOB_SODR |=  PIO_PER_P13;
  400314:	4a06      	ldr	r2, [pc, #24]	; (400330 <DAC_write_gate_on+0x3c>)
  400316:	6813      	ldr	r3, [r2, #0]
  400318:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  40031c:	6013      	str	r3, [r2, #0]
  40031e:	bd10      	pop	{r4, pc}
  400320:	00401349 	.word	0x00401349
  400324:	400e1034 	.word	0x400e1034
  400328:	004013d5 	.word	0x004013d5
  40032c:	20000001 	.word	0x20000001
  400330:	400e1030 	.word	0x400e1030

00400334 <DAC_write_gate_off>:

	//cpu_irq_enable();
}

void DAC_write_gate_off(){
  400334:	b510      	push	{r4, lr}
	uint16_t dac_voltage = (uint16_t) float_voltage;

	uint8_t low_byte = (uint8_t) (dac_voltage << 2);
	uint8_t high_byte = ((uint8_t) (dac_voltage >> 6)) | (0xA0);

	SPI_dac_init();
  400336:	4b0a      	ldr	r3, [pc, #40]	; (400360 <DAC_write_gate_off+0x2c>)
  400338:	4798      	blx	r3
	REG_PIOB_CODR |=  PIO_PER_P13;
  40033a:	4a0a      	ldr	r2, [pc, #40]	; (400364 <DAC_write_gate_off+0x30>)
  40033c:	6813      	ldr	r3, [r2, #0]
  40033e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  400342:	6013      	str	r3, [r2, #0]
	SPI_byteSend(high_byte);
  400344:	20a0      	movs	r0, #160	; 0xa0
  400346:	4c08      	ldr	r4, [pc, #32]	; (400368 <DAC_write_gate_off+0x34>)
  400348:	47a0      	blx	r4
	SPI_byteSend(low_byte);
  40034a:	2000      	movs	r0, #0
  40034c:	47a0      	blx	r4
	delay_us(3);
  40034e:	2016      	movs	r0, #22
  400350:	4b06      	ldr	r3, [pc, #24]	; (40036c <DAC_write_gate_off+0x38>)
  400352:	4798      	blx	r3
	REG_PIOB_SODR |=  PIO_PER_P13;
  400354:	4a06      	ldr	r2, [pc, #24]	; (400370 <DAC_write_gate_off+0x3c>)
  400356:	6813      	ldr	r3, [r2, #0]
  400358:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  40035c:	6013      	str	r3, [r2, #0]
  40035e:	bd10      	pop	{r4, pc}
  400360:	00401349 	.word	0x00401349
  400364:	400e1034 	.word	0x400e1034
  400368:	004013d5 	.word	0x004013d5
  40036c:	20000001 	.word	0x20000001
  400370:	400e1030 	.word	0x400e1030

00400374 <Encoder_isRight>:
#include <stdbool.h>

uint8_t A_seq;
uint8_t B_seq;

 void Encoder_isRight(uint32_t A, uint32_t B){
  400374:	b470      	push	{r4, r5, r6}

	//read Encoder input A
	bool A_in = REG_PIOC_PDSR & A;
  400376:	4b17      	ldr	r3, [pc, #92]	; (4003d4 <Encoder_isRight+0x60>)
  400378:	681e      	ldr	r6, [r3, #0]
	//read Encoder input B
	bool B_in = REG_PIOC_PDSR & B;
  40037a:	681b      	ldr	r3, [r3, #0]
	
	A_seq = A_seq << 1;
	A_seq |= A_in;
	
	B_seq = B_seq << 1;
  40037c:	4c16      	ldr	r4, [pc, #88]	; (4003d8 <Encoder_isRight+0x64>)
	B_seq |= B_in;
  40037e:	7822      	ldrb	r2, [r4, #0]
  400380:	420b      	tst	r3, r1
  400382:	bf14      	ite	ne
  400384:	2301      	movne	r3, #1
  400386:	2300      	moveq	r3, #0
  400388:	ea43 0242 	orr.w	r2, r3, r2, lsl #1
	//read Encoder input A
	bool A_in = REG_PIOC_PDSR & A;
	//read Encoder input B
	bool B_in = REG_PIOC_PDSR & B;
	
	A_seq = A_seq << 1;
  40038c:	4913      	ldr	r1, [pc, #76]	; (4003dc <Encoder_isRight+0x68>)
	A_seq |= A_in;
	
	B_seq = B_seq << 1;
	B_seq |= B_in;
	
	A_seq &= 0b00001111;
  40038e:	780d      	ldrb	r5, [r1, #0]
  400390:	4206      	tst	r6, r0
  400392:	bf14      	ite	ne
  400394:	2301      	movne	r3, #1
  400396:	2300      	moveq	r3, #0
  400398:	ea43 0345 	orr.w	r3, r3, r5, lsl #1
  40039c:	f003 030f 	and.w	r3, r3, #15
  4003a0:	700b      	strb	r3, [r1, #0]
	B_seq &= 0b00001111;
  4003a2:	f002 020f 	and.w	r2, r2, #15
  4003a6:	7022      	strb	r2, [r4, #0]


	//return true if turned right
	if ((A_seq == 0b00001001) && (B_seq == 0b00000011)){
  4003a8:	2b09      	cmp	r3, #9
  4003aa:	d107      	bne.n	4003bc <Encoder_isRight+0x48>
  4003ac:	2a03      	cmp	r2, #3
  4003ae:	d10e      	bne.n	4003ce <Encoder_isRight+0x5a>
		REG_PIOB_SODR |= PIO_PER_P3; //set output high on PB14 as default
  4003b0:	4a0b      	ldr	r2, [pc, #44]	; (4003e0 <Encoder_isRight+0x6c>)
  4003b2:	6813      	ldr	r3, [r2, #0]
  4003b4:	f043 0308 	orr.w	r3, r3, #8
  4003b8:	6013      	str	r3, [r2, #0]
  4003ba:	e008      	b.n	4003ce <Encoder_isRight+0x5a>
	}

	else if ((A_seq == 0b00000011) && (B_seq == 0b00001001)){
  4003bc:	2b03      	cmp	r3, #3
  4003be:	d106      	bne.n	4003ce <Encoder_isRight+0x5a>
  4003c0:	2a09      	cmp	r2, #9
  4003c2:	d104      	bne.n	4003ce <Encoder_isRight+0x5a>
		REG_PIOB_CODR |= PIO_PER_P3; //set output high on PB14 as default
  4003c4:	4a07      	ldr	r2, [pc, #28]	; (4003e4 <Encoder_isRight+0x70>)
  4003c6:	6813      	ldr	r3, [r2, #0]
  4003c8:	f043 0308 	orr.w	r3, r3, #8
  4003cc:	6013      	str	r3, [r2, #0]
	}


}
  4003ce:	bc70      	pop	{r4, r5, r6}
  4003d0:	4770      	bx	lr
  4003d2:	bf00      	nop
  4003d4:	400e123c 	.word	0x400e123c
  4003d8:	20000543 	.word	0x20000543
  4003dc:	20000542 	.word	0x20000542
  4003e0:	400e1030 	.word	0x400e1030
  4003e4:	400e1034 	.word	0x400e1034

004003e8 <Encoder_init>:



void Encoder_init(){
  4003e8:	b470      	push	{r4, r5, r6}

	A_seq = 0;
  4003ea:	2300      	movs	r3, #0
  4003ec:	4aa8      	ldr	r2, [pc, #672]	; (400690 <Encoder_init+0x2a8>)
  4003ee:	7013      	strb	r3, [r2, #0]
	B_seq = 0;
  4003f0:	4aa8      	ldr	r2, [pc, #672]	; (400694 <Encoder_init+0x2ac>)
  4003f2:	7013      	strb	r3, [r2, #0]

	//enable clock for PIOC
	REG_PMC_PCER0 |= PMC_PCER0_PID13;
  4003f4:	4aa8      	ldr	r2, [pc, #672]	; (400698 <Encoder_init+0x2b0>)
  4003f6:	6813      	ldr	r3, [r2, #0]
  4003f8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  4003fc:	6013      	str	r3, [r2, #0]


	/**************			CONFIGURE 16 STEP ENCODERS			**************/

	//Set up PC0 as ENCODER 1 INPUT A
	REG_PIOC_PER |= PIO_PER_P0; //enable PIO controller
  4003fe:	4da7      	ldr	r5, [pc, #668]	; (40069c <Encoder_init+0x2b4>)
  400400:	682b      	ldr	r3, [r5, #0]
  400402:	f043 0301 	orr.w	r3, r3, #1
  400406:	602b      	str	r3, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P0; //disable output
  400408:	4ca5      	ldr	r4, [pc, #660]	; (4006a0 <Encoder_init+0x2b8>)
  40040a:	6823      	ldr	r3, [r4, #0]
  40040c:	f043 0301 	orr.w	r3, r3, #1
  400410:	6023      	str	r3, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P0; //disable pull-down resistor
  400412:	48a4      	ldr	r0, [pc, #656]	; (4006a4 <Encoder_init+0x2bc>)
  400414:	6803      	ldr	r3, [r0, #0]
  400416:	f043 0301 	orr.w	r3, r3, #1
  40041a:	6003      	str	r3, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P0;	//enable pull-up resistor
  40041c:	49a2      	ldr	r1, [pc, #648]	; (4006a8 <Encoder_init+0x2c0>)
  40041e:	680b      	ldr	r3, [r1, #0]
  400420:	f043 0301 	orr.w	r3, r3, #1
  400424:	600b      	str	r3, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P0; //turn on slow clock debounce
  400426:	f602 6274 	addw	r2, r2, #3700	; 0xe74
  40042a:	6813      	ldr	r3, [r2, #0]
  40042c:	f043 0301 	orr.w	r3, r3, #1
  400430:	6013      	str	r3, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P0;	//start debounce filter
  400432:	4b9e      	ldr	r3, [pc, #632]	; (4006ac <Encoder_init+0x2c4>)
  400434:	681e      	ldr	r6, [r3, #0]
  400436:	f046 0601 	orr.w	r6, r6, #1
  40043a:	601e      	str	r6, [r3, #0]

	//Set up PC1 as ENCODER 1 INPUT B
	REG_PIOC_PER |= PIO_PER_P1; //enable PIO controller
  40043c:	682e      	ldr	r6, [r5, #0]
  40043e:	f046 0602 	orr.w	r6, r6, #2
  400442:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P1; //disable output
  400444:	6826      	ldr	r6, [r4, #0]
  400446:	f046 0602 	orr.w	r6, r6, #2
  40044a:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P1; //disable pull-down resistor
  40044c:	6806      	ldr	r6, [r0, #0]
  40044e:	f046 0602 	orr.w	r6, r6, #2
  400452:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P1;	//enable pull-up resistor
  400454:	680e      	ldr	r6, [r1, #0]
  400456:	f046 0602 	orr.w	r6, r6, #2
  40045a:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P1; //turn on slow clock debounce
  40045c:	6816      	ldr	r6, [r2, #0]
  40045e:	f046 0602 	orr.w	r6, r6, #2
  400462:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P1;	//start debounce filter
  400464:	681e      	ldr	r6, [r3, #0]
  400466:	f046 0602 	orr.w	r6, r6, #2
  40046a:	601e      	str	r6, [r3, #0]


	
	//Set up PC2 as ENCODER 2 INPUT A
	REG_PIOC_PER |= PIO_PER_P2; //enable PIO controller
  40046c:	682e      	ldr	r6, [r5, #0]
  40046e:	f046 0604 	orr.w	r6, r6, #4
  400472:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P2; //disable output
  400474:	6826      	ldr	r6, [r4, #0]
  400476:	f046 0604 	orr.w	r6, r6, #4
  40047a:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P2; //disable pull-down resistor
  40047c:	6806      	ldr	r6, [r0, #0]
  40047e:	f046 0604 	orr.w	r6, r6, #4
  400482:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P2;	//enable pull-up resistor
  400484:	680e      	ldr	r6, [r1, #0]
  400486:	f046 0604 	orr.w	r6, r6, #4
  40048a:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P2; //turn on slow clock debounce
  40048c:	6816      	ldr	r6, [r2, #0]
  40048e:	f046 0604 	orr.w	r6, r6, #4
  400492:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P2;	//start debounce filter
  400494:	681e      	ldr	r6, [r3, #0]
  400496:	f046 0604 	orr.w	r6, r6, #4
  40049a:	601e      	str	r6, [r3, #0]

	//Set up PC3 as ENCODER 2 INPUT B
	REG_PIOC_PER |= PIO_PER_P3; //enable PIO controller
  40049c:	682e      	ldr	r6, [r5, #0]
  40049e:	f046 0608 	orr.w	r6, r6, #8
  4004a2:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P3; //disable output
  4004a4:	6826      	ldr	r6, [r4, #0]
  4004a6:	f046 0608 	orr.w	r6, r6, #8
  4004aa:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P3; //disable pull-down resistor
  4004ac:	6806      	ldr	r6, [r0, #0]
  4004ae:	f046 0608 	orr.w	r6, r6, #8
  4004b2:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P3;	//enable pull-up resistor
  4004b4:	680e      	ldr	r6, [r1, #0]
  4004b6:	f046 0608 	orr.w	r6, r6, #8
  4004ba:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P3; //turn on slow clock debounce
  4004bc:	6816      	ldr	r6, [r2, #0]
  4004be:	f046 0608 	orr.w	r6, r6, #8
  4004c2:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P3;	//start debounce filter
  4004c4:	681e      	ldr	r6, [r3, #0]
  4004c6:	f046 0608 	orr.w	r6, r6, #8
  4004ca:	601e      	str	r6, [r3, #0]



	//Set up PC4 as ENCODER 3 INPUT A
	REG_PIOC_PER |= PIO_PER_P4; //enable PIO controller
  4004cc:	682e      	ldr	r6, [r5, #0]
  4004ce:	f046 0610 	orr.w	r6, r6, #16
  4004d2:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P4; //disable output
  4004d4:	6826      	ldr	r6, [r4, #0]
  4004d6:	f046 0610 	orr.w	r6, r6, #16
  4004da:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P4; //disable pull-down resistor
  4004dc:	6806      	ldr	r6, [r0, #0]
  4004de:	f046 0610 	orr.w	r6, r6, #16
  4004e2:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P4;	//enable pull-up resistor
  4004e4:	680e      	ldr	r6, [r1, #0]
  4004e6:	f046 0610 	orr.w	r6, r6, #16
  4004ea:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P4; //turn on slow clock debounce
  4004ec:	6816      	ldr	r6, [r2, #0]
  4004ee:	f046 0610 	orr.w	r6, r6, #16
  4004f2:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P4;	//start debounce filter
  4004f4:	681e      	ldr	r6, [r3, #0]
  4004f6:	f046 0610 	orr.w	r6, r6, #16
  4004fa:	601e      	str	r6, [r3, #0]

	//Set up PC5 as ENCODER 3 INPUT B
	REG_PIOC_PER |= PIO_PER_P5; //enable PIO controller
  4004fc:	682e      	ldr	r6, [r5, #0]
  4004fe:	f046 0620 	orr.w	r6, r6, #32
  400502:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P5; //disable output
  400504:	6826      	ldr	r6, [r4, #0]
  400506:	f046 0620 	orr.w	r6, r6, #32
  40050a:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P5; //disable pull-down resistor
  40050c:	6806      	ldr	r6, [r0, #0]
  40050e:	f046 0620 	orr.w	r6, r6, #32
  400512:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P5;	//enable pull-up resistor
  400514:	680e      	ldr	r6, [r1, #0]
  400516:	f046 0620 	orr.w	r6, r6, #32
  40051a:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P5; //turn on slow clock debounce
  40051c:	6816      	ldr	r6, [r2, #0]
  40051e:	f046 0620 	orr.w	r6, r6, #32
  400522:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P5;	//start debounce filter
  400524:	681e      	ldr	r6, [r3, #0]
  400526:	f046 0620 	orr.w	r6, r6, #32
  40052a:	601e      	str	r6, [r3, #0]



	//Set up PC6 as ENCODER 4 INPUT A
	REG_PIOC_PER |= PIO_PER_P6; //enable PIO controller
  40052c:	682e      	ldr	r6, [r5, #0]
  40052e:	f046 0640 	orr.w	r6, r6, #64	; 0x40
  400532:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P6; //disable output
  400534:	6826      	ldr	r6, [r4, #0]
  400536:	f046 0640 	orr.w	r6, r6, #64	; 0x40
  40053a:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P6; //disable pull-down resistor
  40053c:	6806      	ldr	r6, [r0, #0]
  40053e:	f046 0640 	orr.w	r6, r6, #64	; 0x40
  400542:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P6;	//enable pull-up resistor
  400544:	680e      	ldr	r6, [r1, #0]
  400546:	f046 0640 	orr.w	r6, r6, #64	; 0x40
  40054a:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P6; //turn on slow clock debounce
  40054c:	6816      	ldr	r6, [r2, #0]
  40054e:	f046 0640 	orr.w	r6, r6, #64	; 0x40
  400552:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P6;	//start debounce filter
  400554:	681e      	ldr	r6, [r3, #0]
  400556:	f046 0640 	orr.w	r6, r6, #64	; 0x40
  40055a:	601e      	str	r6, [r3, #0]

	//Set up PC7 as ENCODER 4 INPUT B
	REG_PIOC_PER |= PIO_PER_P7; //enable PIO controller
  40055c:	682e      	ldr	r6, [r5, #0]
  40055e:	f046 0680 	orr.w	r6, r6, #128	; 0x80
  400562:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P7; //disable output
  400564:	6826      	ldr	r6, [r4, #0]
  400566:	f046 0680 	orr.w	r6, r6, #128	; 0x80
  40056a:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P7; //disable pull-down resistor
  40056c:	6806      	ldr	r6, [r0, #0]
  40056e:	f046 0680 	orr.w	r6, r6, #128	; 0x80
  400572:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P7;	//enable pull-up resistor
  400574:	680e      	ldr	r6, [r1, #0]
  400576:	f046 0680 	orr.w	r6, r6, #128	; 0x80
  40057a:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P7; //turn on slow clock debounce
  40057c:	6816      	ldr	r6, [r2, #0]
  40057e:	f046 0680 	orr.w	r6, r6, #128	; 0x80
  400582:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P7;	//start debounce filter
  400584:	681e      	ldr	r6, [r3, #0]
  400586:	f046 0680 	orr.w	r6, r6, #128	; 0x80
  40058a:	601e      	str	r6, [r3, #0]



	//Set up PC8 as ENCODER 5 INPUT A
	REG_PIOC_PER |= PIO_PER_P8; //enable PIO controller
  40058c:	682e      	ldr	r6, [r5, #0]
  40058e:	f446 7680 	orr.w	r6, r6, #256	; 0x100
  400592:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P8; //disable output
  400594:	6826      	ldr	r6, [r4, #0]
  400596:	f446 7680 	orr.w	r6, r6, #256	; 0x100
  40059a:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P8; //disable pull-down resistor
  40059c:	6806      	ldr	r6, [r0, #0]
  40059e:	f446 7680 	orr.w	r6, r6, #256	; 0x100
  4005a2:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P8;	//enable pull-up resistor
  4005a4:	680e      	ldr	r6, [r1, #0]
  4005a6:	f446 7680 	orr.w	r6, r6, #256	; 0x100
  4005aa:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P8; //turn on slow clock debounce
  4005ac:	6816      	ldr	r6, [r2, #0]
  4005ae:	f446 7680 	orr.w	r6, r6, #256	; 0x100
  4005b2:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P8;	//start debounce filter
  4005b4:	681e      	ldr	r6, [r3, #0]
  4005b6:	f446 7680 	orr.w	r6, r6, #256	; 0x100
  4005ba:	601e      	str	r6, [r3, #0]

	//Set up PC9 as ENCODER 5 INPUT B
	REG_PIOC_PER |= PIO_PER_P9; //enable PIO controller
  4005bc:	682e      	ldr	r6, [r5, #0]
  4005be:	f446 7600 	orr.w	r6, r6, #512	; 0x200
  4005c2:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P9; //disable output
  4005c4:	6826      	ldr	r6, [r4, #0]
  4005c6:	f446 7600 	orr.w	r6, r6, #512	; 0x200
  4005ca:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P9; //disable pull-down resistor
  4005cc:	6806      	ldr	r6, [r0, #0]
  4005ce:	f446 7600 	orr.w	r6, r6, #512	; 0x200
  4005d2:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P9;	//enable pull-up resistor
  4005d4:	680e      	ldr	r6, [r1, #0]
  4005d6:	f446 7600 	orr.w	r6, r6, #512	; 0x200
  4005da:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P9; //turn on slow clock debounce
  4005dc:	6816      	ldr	r6, [r2, #0]
  4005de:	f446 7600 	orr.w	r6, r6, #512	; 0x200
  4005e2:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P9;	//start debounce filter
  4005e4:	681e      	ldr	r6, [r3, #0]
  4005e6:	f446 7600 	orr.w	r6, r6, #512	; 0x200
  4005ea:	601e      	str	r6, [r3, #0]



	//Set up PC10 as ENCODER 6 INPUT A
	REG_PIOC_PER |= PIO_PER_P10; //enable PIO controller
  4005ec:	682e      	ldr	r6, [r5, #0]
  4005ee:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
  4005f2:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P10; //disable output
  4005f4:	6826      	ldr	r6, [r4, #0]
  4005f6:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
  4005fa:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P10; //disable pull-down resistor
  4005fc:	6806      	ldr	r6, [r0, #0]
  4005fe:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
  400602:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P10;	//enable pull-up resistor
  400604:	680e      	ldr	r6, [r1, #0]
  400606:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
  40060a:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P10; //turn on slow clock debounce
  40060c:	6816      	ldr	r6, [r2, #0]
  40060e:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
  400612:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P10;	//start debounce filter
  400614:	681e      	ldr	r6, [r3, #0]
  400616:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
  40061a:	601e      	str	r6, [r3, #0]

	//Set up PC11 as ENCODER 6 INPUT B
	REG_PIOC_PER |= PIO_PER_P11; //enable PIO controller
  40061c:	682e      	ldr	r6, [r5, #0]
  40061e:	f446 6600 	orr.w	r6, r6, #2048	; 0x800
  400622:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P11; //disable output
  400624:	6826      	ldr	r6, [r4, #0]
  400626:	f446 6600 	orr.w	r6, r6, #2048	; 0x800
  40062a:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P11; //disable pull-down resistor
  40062c:	6806      	ldr	r6, [r0, #0]
  40062e:	f446 6600 	orr.w	r6, r6, #2048	; 0x800
  400632:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P11;	//enable pull-up resistor
  400634:	680e      	ldr	r6, [r1, #0]
  400636:	f446 6600 	orr.w	r6, r6, #2048	; 0x800
  40063a:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P11; //turn on slow clock debounce
  40063c:	6816      	ldr	r6, [r2, #0]
  40063e:	f446 6600 	orr.w	r6, r6, #2048	; 0x800
  400642:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P11;	//start debounce filter
  400644:	681e      	ldr	r6, [r3, #0]
  400646:	f446 6600 	orr.w	r6, r6, #2048	; 0x800
  40064a:	601e      	str	r6, [r3, #0]



	//Set up PC12 as ENCODER 7 INPUT A
	REG_PIOC_PER |= PIO_PER_P3; //enable PIO controller
  40064c:	682e      	ldr	r6, [r5, #0]
  40064e:	f046 0608 	orr.w	r6, r6, #8
  400652:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P3; //disable output
  400654:	6826      	ldr	r6, [r4, #0]
  400656:	f046 0608 	orr.w	r6, r6, #8
  40065a:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P3; //disable pull-down resistor
  40065c:	6806      	ldr	r6, [r0, #0]
  40065e:	f046 0608 	orr.w	r6, r6, #8
  400662:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P3;	//enable pull-up resistor
  400664:	680e      	ldr	r6, [r1, #0]
  400666:	f046 0608 	orr.w	r6, r6, #8
  40066a:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P3; //turn on slow clock debounce
  40066c:	6816      	ldr	r6, [r2, #0]
  40066e:	f046 0608 	orr.w	r6, r6, #8
  400672:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P3;	//start debounce filter
  400674:	681e      	ldr	r6, [r3, #0]
  400676:	f046 0608 	orr.w	r6, r6, #8
  40067a:	601e      	str	r6, [r3, #0]

	//Set up PC13 as ENCODER 7 INPUT B
	REG_PIOC_PER |= PIO_PER_P13; //enable PIO controller
  40067c:	682e      	ldr	r6, [r5, #0]
  40067e:	f446 5600 	orr.w	r6, r6, #8192	; 0x2000
  400682:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P13; //disable output
  400684:	6826      	ldr	r6, [r4, #0]
  400686:	f446 5600 	orr.w	r6, r6, #8192	; 0x2000
  40068a:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P13; //disable pull-down resistor
  40068c:	6806      	ldr	r6, [r0, #0]
  40068e:	e00f      	b.n	4006b0 <Encoder_init+0x2c8>
  400690:	20000542 	.word	0x20000542
  400694:	20000543 	.word	0x20000543
  400698:	400e0410 	.word	0x400e0410
  40069c:	400e1200 	.word	0x400e1200
  4006a0:	400e1214 	.word	0x400e1214
  4006a4:	400e1290 	.word	0x400e1290
  4006a8:	400e1264 	.word	0x400e1264
  4006ac:	400e1220 	.word	0x400e1220
  4006b0:	f446 5600 	orr.w	r6, r6, #8192	; 0x2000
  4006b4:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P13;	//enable pull-up resistor
  4006b6:	680e      	ldr	r6, [r1, #0]
  4006b8:	f446 5600 	orr.w	r6, r6, #8192	; 0x2000
  4006bc:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P13; //turn on slow clock debounce
  4006be:	6816      	ldr	r6, [r2, #0]
  4006c0:	f446 5600 	orr.w	r6, r6, #8192	; 0x2000
  4006c4:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P13;	//start debounce filter
  4006c6:	681e      	ldr	r6, [r3, #0]
  4006c8:	f446 5600 	orr.w	r6, r6, #8192	; 0x2000
  4006cc:	601e      	str	r6, [r3, #0]



	//Set up PC14 as ENCODER 8 INPUT A
	REG_PIOC_PER |= PIO_PER_P14; //enable PIO controller
  4006ce:	682e      	ldr	r6, [r5, #0]
  4006d0:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
  4006d4:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P14; //disable output
  4006d6:	6826      	ldr	r6, [r4, #0]
  4006d8:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
  4006dc:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P14; //disable pull-down resistor
  4006de:	6806      	ldr	r6, [r0, #0]
  4006e0:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
  4006e4:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P14;	//enable pull-up resistor
  4006e6:	680e      	ldr	r6, [r1, #0]
  4006e8:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
  4006ec:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P14; //turn on slow clock debounce
  4006ee:	6816      	ldr	r6, [r2, #0]
  4006f0:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
  4006f4:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P14;	//start debounce filter
  4006f6:	681e      	ldr	r6, [r3, #0]
  4006f8:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
  4006fc:	601e      	str	r6, [r3, #0]

	//Set up PC15 as ENCODER 8 INPUT B
	REG_PIOC_PER |= PIO_PER_P15; //enable PIO controller
  4006fe:	682e      	ldr	r6, [r5, #0]
  400700:	f446 4600 	orr.w	r6, r6, #32768	; 0x8000
  400704:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P15; //disable output
  400706:	6826      	ldr	r6, [r4, #0]
  400708:	f446 4600 	orr.w	r6, r6, #32768	; 0x8000
  40070c:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P15; //disable pull-down resistor
  40070e:	6806      	ldr	r6, [r0, #0]
  400710:	f446 4600 	orr.w	r6, r6, #32768	; 0x8000
  400714:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P15;	//enable pull-up resistor
  400716:	680e      	ldr	r6, [r1, #0]
  400718:	f446 4600 	orr.w	r6, r6, #32768	; 0x8000
  40071c:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P15; //turn on slow clock debounce
  40071e:	6816      	ldr	r6, [r2, #0]
  400720:	f446 4600 	orr.w	r6, r6, #32768	; 0x8000
  400724:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P15;	//start debounce filter
  400726:	681e      	ldr	r6, [r3, #0]
  400728:	f446 4600 	orr.w	r6, r6, #32768	; 0x8000
  40072c:	601e      	str	r6, [r3, #0]



	//Set up PC16 as ENCODER 9 INPUT A
	REG_PIOC_PER |= PIO_PER_P16; //enable PIO controller
  40072e:	682e      	ldr	r6, [r5, #0]
  400730:	f446 3680 	orr.w	r6, r6, #65536	; 0x10000
  400734:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P16; //disable output
  400736:	6826      	ldr	r6, [r4, #0]
  400738:	f446 3680 	orr.w	r6, r6, #65536	; 0x10000
  40073c:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P16; //disable pull-down resistor
  40073e:	6806      	ldr	r6, [r0, #0]
  400740:	f446 3680 	orr.w	r6, r6, #65536	; 0x10000
  400744:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P16;	//enable pull-up resistor
  400746:	680e      	ldr	r6, [r1, #0]
  400748:	f446 3680 	orr.w	r6, r6, #65536	; 0x10000
  40074c:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P16; //turn on slow clock debounce
  40074e:	6816      	ldr	r6, [r2, #0]
  400750:	f446 3680 	orr.w	r6, r6, #65536	; 0x10000
  400754:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P16;	//start debounce filter
  400756:	681e      	ldr	r6, [r3, #0]
  400758:	f446 3680 	orr.w	r6, r6, #65536	; 0x10000
  40075c:	601e      	str	r6, [r3, #0]

	//Set up PC17 as ENCODER 9 INPUT B
	REG_PIOC_PER |= PIO_PER_P17; //enable PIO controller
  40075e:	682e      	ldr	r6, [r5, #0]
  400760:	f446 3600 	orr.w	r6, r6, #131072	; 0x20000
  400764:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P17; //disable output
  400766:	6826      	ldr	r6, [r4, #0]
  400768:	f446 3600 	orr.w	r6, r6, #131072	; 0x20000
  40076c:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P17; //disable pull-down resistor
  40076e:	6806      	ldr	r6, [r0, #0]
  400770:	f446 3600 	orr.w	r6, r6, #131072	; 0x20000
  400774:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P17;	//enable pull-up resistor
  400776:	680e      	ldr	r6, [r1, #0]
  400778:	f446 3600 	orr.w	r6, r6, #131072	; 0x20000
  40077c:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P17; //turn on slow clock debounce
  40077e:	6816      	ldr	r6, [r2, #0]
  400780:	f446 3600 	orr.w	r6, r6, #131072	; 0x20000
  400784:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P17;	//start debounce filter
  400786:	681e      	ldr	r6, [r3, #0]
  400788:	f446 3600 	orr.w	r6, r6, #131072	; 0x20000
  40078c:	601e      	str	r6, [r3, #0]



	
	//Set up PC18 as ENCODER 10 INPUT A
	REG_PIOC_PER |= PIO_PER_P18; //enable PIO controller
  40078e:	682e      	ldr	r6, [r5, #0]
  400790:	f446 2680 	orr.w	r6, r6, #262144	; 0x40000
  400794:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P18; //disable output
  400796:	6826      	ldr	r6, [r4, #0]
  400798:	f446 2680 	orr.w	r6, r6, #262144	; 0x40000
  40079c:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P18; //disable pull-down resistor
  40079e:	6806      	ldr	r6, [r0, #0]
  4007a0:	f446 2680 	orr.w	r6, r6, #262144	; 0x40000
  4007a4:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P18;	//enable pull-up resistor
  4007a6:	680e      	ldr	r6, [r1, #0]
  4007a8:	f446 2680 	orr.w	r6, r6, #262144	; 0x40000
  4007ac:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P18; //turn on slow clock debounce
  4007ae:	6816      	ldr	r6, [r2, #0]
  4007b0:	f446 2680 	orr.w	r6, r6, #262144	; 0x40000
  4007b4:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P18;	//start debounce filter
  4007b6:	681e      	ldr	r6, [r3, #0]
  4007b8:	f446 2680 	orr.w	r6, r6, #262144	; 0x40000
  4007bc:	601e      	str	r6, [r3, #0]

	//Set up PC19 as ENCODER 10 INPUT B
	REG_PIOC_PER |= PIO_PER_P19; //enable PIO controller
  4007be:	682e      	ldr	r6, [r5, #0]
  4007c0:	f446 2600 	orr.w	r6, r6, #524288	; 0x80000
  4007c4:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P19; //disable output
  4007c6:	6826      	ldr	r6, [r4, #0]
  4007c8:	f446 2600 	orr.w	r6, r6, #524288	; 0x80000
  4007cc:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P19; //disable pull-down resistor
  4007ce:	6806      	ldr	r6, [r0, #0]
  4007d0:	f446 2600 	orr.w	r6, r6, #524288	; 0x80000
  4007d4:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P19;	//enable pull-up resistor
  4007d6:	680e      	ldr	r6, [r1, #0]
  4007d8:	f446 2600 	orr.w	r6, r6, #524288	; 0x80000
  4007dc:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P19; //turn on slow clock debounce
  4007de:	6816      	ldr	r6, [r2, #0]
  4007e0:	f446 2600 	orr.w	r6, r6, #524288	; 0x80000
  4007e4:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P19;	//start debounce filter
  4007e6:	681e      	ldr	r6, [r3, #0]
  4007e8:	f446 2600 	orr.w	r6, r6, #524288	; 0x80000
  4007ec:	601e      	str	r6, [r3, #0]



	//Set up PC20 as ENCODER 11 INPUT A
	REG_PIOC_PER |= PIO_PER_P20; //enable PIO controller
  4007ee:	682e      	ldr	r6, [r5, #0]
  4007f0:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
  4007f4:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P20; //disable output
  4007f6:	6826      	ldr	r6, [r4, #0]
  4007f8:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
  4007fc:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P20; //disable pull-down resistor
  4007fe:	6806      	ldr	r6, [r0, #0]
  400800:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
  400804:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P20;	//enable pull-up resistor
  400806:	680e      	ldr	r6, [r1, #0]
  400808:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
  40080c:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P20; //turn on slow clock debounce
  40080e:	6816      	ldr	r6, [r2, #0]
  400810:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
  400814:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P20;	//start debounce filter
  400816:	681e      	ldr	r6, [r3, #0]
  400818:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
  40081c:	601e      	str	r6, [r3, #0]

	//Set up PC21 as ENCODER 11 INPUT B
	REG_PIOC_PER |= PIO_PER_P21; //enable PIO controller
  40081e:	682e      	ldr	r6, [r5, #0]
  400820:	f446 1600 	orr.w	r6, r6, #2097152	; 0x200000
  400824:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P21; //disable output
  400826:	6826      	ldr	r6, [r4, #0]
  400828:	f446 1600 	orr.w	r6, r6, #2097152	; 0x200000
  40082c:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P21; //disable pull-down resistor
  40082e:	6806      	ldr	r6, [r0, #0]
  400830:	f446 1600 	orr.w	r6, r6, #2097152	; 0x200000
  400834:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P21;	//enable pull-up resistor
  400836:	680e      	ldr	r6, [r1, #0]
  400838:	f446 1600 	orr.w	r6, r6, #2097152	; 0x200000
  40083c:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P21; //turn on slow clock debounce
  40083e:	6816      	ldr	r6, [r2, #0]
  400840:	f446 1600 	orr.w	r6, r6, #2097152	; 0x200000
  400844:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P21;	//start debounce filter
  400846:	681e      	ldr	r6, [r3, #0]
  400848:	f446 1600 	orr.w	r6, r6, #2097152	; 0x200000
  40084c:	601e      	str	r6, [r3, #0]



	//Set up PC22 as ENCODER 12 INPUT A
	REG_PIOC_PER |= PIO_PER_P22; //enable PIO controller
  40084e:	682e      	ldr	r6, [r5, #0]
  400850:	f446 0680 	orr.w	r6, r6, #4194304	; 0x400000
  400854:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P22; //disable output
  400856:	6826      	ldr	r6, [r4, #0]
  400858:	f446 0680 	orr.w	r6, r6, #4194304	; 0x400000
  40085c:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P22; //disable pull-down resistor
  40085e:	6806      	ldr	r6, [r0, #0]
  400860:	f446 0680 	orr.w	r6, r6, #4194304	; 0x400000
  400864:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P22;	//enable pull-up resistor
  400866:	680e      	ldr	r6, [r1, #0]
  400868:	f446 0680 	orr.w	r6, r6, #4194304	; 0x400000
  40086c:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P22; //turn on slow clock debounce
  40086e:	6816      	ldr	r6, [r2, #0]
  400870:	f446 0680 	orr.w	r6, r6, #4194304	; 0x400000
  400874:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P22;	//start debounce filter
  400876:	681e      	ldr	r6, [r3, #0]
  400878:	f446 0680 	orr.w	r6, r6, #4194304	; 0x400000
  40087c:	601e      	str	r6, [r3, #0]

	//Set up PC23 as ENCODER 12 INPUT B
	REG_PIOC_PER |= PIO_PER_P23; //enable PIO controller
  40087e:	682e      	ldr	r6, [r5, #0]
  400880:	f446 0600 	orr.w	r6, r6, #8388608	; 0x800000
  400884:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P23; //disable output
  400886:	6826      	ldr	r6, [r4, #0]
  400888:	f446 0600 	orr.w	r6, r6, #8388608	; 0x800000
  40088c:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P23; //disable pull-down resistor
  40088e:	6806      	ldr	r6, [r0, #0]
  400890:	f446 0600 	orr.w	r6, r6, #8388608	; 0x800000
  400894:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P23;	//enable pull-up resistor
  400896:	680e      	ldr	r6, [r1, #0]
  400898:	f446 0600 	orr.w	r6, r6, #8388608	; 0x800000
  40089c:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P23; //turn on slow clock debounce
  40089e:	6816      	ldr	r6, [r2, #0]
  4008a0:	f446 0600 	orr.w	r6, r6, #8388608	; 0x800000
  4008a4:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P23;	//start debounce filter
  4008a6:	681e      	ldr	r6, [r3, #0]
  4008a8:	f446 0600 	orr.w	r6, r6, #8388608	; 0x800000
  4008ac:	601e      	str	r6, [r3, #0]



	//Set up PC24 as ENCODER 13 INPUT A
	REG_PIOC_PER |= PIO_PER_P24; //enable PIO controller
  4008ae:	682e      	ldr	r6, [r5, #0]
  4008b0:	f046 7680 	orr.w	r6, r6, #16777216	; 0x1000000
  4008b4:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P24; //disable output
  4008b6:	6826      	ldr	r6, [r4, #0]
  4008b8:	f046 7680 	orr.w	r6, r6, #16777216	; 0x1000000
  4008bc:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P24; //disable pull-down resistor
  4008be:	6806      	ldr	r6, [r0, #0]
  4008c0:	f046 7680 	orr.w	r6, r6, #16777216	; 0x1000000
  4008c4:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P24;	//enable pull-up resistor
  4008c6:	680e      	ldr	r6, [r1, #0]
  4008c8:	f046 7680 	orr.w	r6, r6, #16777216	; 0x1000000
  4008cc:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P24; //turn on slow clock debounce
  4008ce:	6816      	ldr	r6, [r2, #0]
  4008d0:	f046 7680 	orr.w	r6, r6, #16777216	; 0x1000000
  4008d4:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P24;	//start debounce filter
  4008d6:	681e      	ldr	r6, [r3, #0]
  4008d8:	f046 7680 	orr.w	r6, r6, #16777216	; 0x1000000
  4008dc:	601e      	str	r6, [r3, #0]

	//Set up PC25 as ENCODER 13 INPUT B
	REG_PIOC_PER |= PIO_PER_P25; //enable PIO controller
  4008de:	682e      	ldr	r6, [r5, #0]
  4008e0:	f046 7600 	orr.w	r6, r6, #33554432	; 0x2000000
  4008e4:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P25; //disable output
  4008e6:	6826      	ldr	r6, [r4, #0]
  4008e8:	f046 7600 	orr.w	r6, r6, #33554432	; 0x2000000
  4008ec:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P25; //disable pull-down resistor
  4008ee:	6806      	ldr	r6, [r0, #0]
  4008f0:	f046 7600 	orr.w	r6, r6, #33554432	; 0x2000000
  4008f4:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P25;	//enable pull-up resistor
  4008f6:	680e      	ldr	r6, [r1, #0]
  4008f8:	f046 7600 	orr.w	r6, r6, #33554432	; 0x2000000
  4008fc:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P25; //turn on slow clock debounce
  4008fe:	6816      	ldr	r6, [r2, #0]
  400900:	f046 7600 	orr.w	r6, r6, #33554432	; 0x2000000
  400904:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P25;	//start debounce filter
  400906:	681e      	ldr	r6, [r3, #0]
  400908:	f046 7600 	orr.w	r6, r6, #33554432	; 0x2000000
  40090c:	601e      	str	r6, [r3, #0]



	//Set up PC26 as ENCODER 14 INPUT A
	REG_PIOC_PER |= PIO_PER_P26; //enable PIO controller
  40090e:	682e      	ldr	r6, [r5, #0]
  400910:	f046 6680 	orr.w	r6, r6, #67108864	; 0x4000000
  400914:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P26; //disable output
  400916:	6826      	ldr	r6, [r4, #0]
  400918:	f046 6680 	orr.w	r6, r6, #67108864	; 0x4000000
  40091c:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P26; //disable pull-down resistor
  40091e:	6806      	ldr	r6, [r0, #0]
  400920:	f046 6680 	orr.w	r6, r6, #67108864	; 0x4000000
  400924:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P26;	//enable pull-up resistor
  400926:	680e      	ldr	r6, [r1, #0]
  400928:	f046 6680 	orr.w	r6, r6, #67108864	; 0x4000000
  40092c:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P26; //turn on slow clock debounce
  40092e:	6816      	ldr	r6, [r2, #0]
  400930:	f046 6680 	orr.w	r6, r6, #67108864	; 0x4000000
  400934:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P26;	//start debounce filter
  400936:	681e      	ldr	r6, [r3, #0]
  400938:	f046 6680 	orr.w	r6, r6, #67108864	; 0x4000000
  40093c:	601e      	str	r6, [r3, #0]

	//Set up PC27 as ENCODER 14 INPUT B
	REG_PIOC_PER |= PIO_PER_P27; //enable PIO controller
  40093e:	682e      	ldr	r6, [r5, #0]
  400940:	f046 6600 	orr.w	r6, r6, #134217728	; 0x8000000
  400944:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P27; //disable output
  400946:	6826      	ldr	r6, [r4, #0]
  400948:	f046 6600 	orr.w	r6, r6, #134217728	; 0x8000000
  40094c:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P27; //disable pull-down resistor
  40094e:	6806      	ldr	r6, [r0, #0]
  400950:	f046 6600 	orr.w	r6, r6, #134217728	; 0x8000000
  400954:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P27;	//enable pull-up resistor
  400956:	680e      	ldr	r6, [r1, #0]
  400958:	f046 6600 	orr.w	r6, r6, #134217728	; 0x8000000
  40095c:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P27; //turn on slow clock debounce
  40095e:	6816      	ldr	r6, [r2, #0]
  400960:	f046 6600 	orr.w	r6, r6, #134217728	; 0x8000000
  400964:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P27;	//start debounce filter
  400966:	681e      	ldr	r6, [r3, #0]
  400968:	f046 6600 	orr.w	r6, r6, #134217728	; 0x8000000
  40096c:	601e      	str	r6, [r3, #0]



	//Set up PC28 as ENCODER 15 INPUT A
	REG_PIOC_PER |= PIO_PER_P28; //enable PIO controller
  40096e:	682e      	ldr	r6, [r5, #0]
  400970:	f046 5680 	orr.w	r6, r6, #268435456	; 0x10000000
  400974:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P28; //disable output
  400976:	6826      	ldr	r6, [r4, #0]
  400978:	f046 5680 	orr.w	r6, r6, #268435456	; 0x10000000
  40097c:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P28; //disable pull-down resistor
  40097e:	6806      	ldr	r6, [r0, #0]
  400980:	f046 5680 	orr.w	r6, r6, #268435456	; 0x10000000
  400984:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P28;	//enable pull-up resistor
  400986:	680e      	ldr	r6, [r1, #0]
  400988:	f046 5680 	orr.w	r6, r6, #268435456	; 0x10000000
  40098c:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P28; //turn on slow clock debounce
  40098e:	6816      	ldr	r6, [r2, #0]
  400990:	f046 5680 	orr.w	r6, r6, #268435456	; 0x10000000
  400994:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P28;	//start debounce filter
  400996:	681e      	ldr	r6, [r3, #0]
  400998:	f046 5680 	orr.w	r6, r6, #268435456	; 0x10000000
  40099c:	601e      	str	r6, [r3, #0]

	//Set up PC29 as ENCODER 15 INPUT B
	REG_PIOC_PER |= PIO_PER_P29; //enable PIO controller
  40099e:	682e      	ldr	r6, [r5, #0]
  4009a0:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
  4009a4:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P29; //disable output
  4009a6:	6826      	ldr	r6, [r4, #0]
  4009a8:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
  4009ac:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P29; //disable pull-down resistor
  4009ae:	6806      	ldr	r6, [r0, #0]
  4009b0:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
  4009b4:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P29;	//enable pull-up resistor
  4009b6:	680e      	ldr	r6, [r1, #0]
  4009b8:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
  4009bc:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P29; //turn on slow clock debounce
  4009be:	6816      	ldr	r6, [r2, #0]
  4009c0:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
  4009c4:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P29;	//start debounce filter
  4009c6:	681e      	ldr	r6, [r3, #0]
  4009c8:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
  4009cc:	601e      	str	r6, [r3, #0]



	//Set up PC30 as ENCODER 16 INPUT A
	REG_PIOC_PER |= PIO_PER_P30; //enable PIO controller
  4009ce:	682e      	ldr	r6, [r5, #0]
  4009d0:	f046 4680 	orr.w	r6, r6, #1073741824	; 0x40000000
  4009d4:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P30; //disable output
  4009d6:	6826      	ldr	r6, [r4, #0]
  4009d8:	f046 4680 	orr.w	r6, r6, #1073741824	; 0x40000000
  4009dc:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P30; //disable pull-down resistor
  4009de:	6806      	ldr	r6, [r0, #0]
  4009e0:	f046 4680 	orr.w	r6, r6, #1073741824	; 0x40000000
  4009e4:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P30;	//enable pull-up resistor
  4009e6:	680e      	ldr	r6, [r1, #0]
  4009e8:	f046 4680 	orr.w	r6, r6, #1073741824	; 0x40000000
  4009ec:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P30; //turn on slow clock debounce
  4009ee:	6816      	ldr	r6, [r2, #0]
  4009f0:	f046 4680 	orr.w	r6, r6, #1073741824	; 0x40000000
  4009f4:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P30;	//start debounce filter
  4009f6:	681e      	ldr	r6, [r3, #0]
  4009f8:	f046 4680 	orr.w	r6, r6, #1073741824	; 0x40000000
  4009fc:	601e      	str	r6, [r3, #0]

	//Set up PC31 as ENCODER 16 INPUT B
	REG_PIOC_PER |= PIO_PER_P31; //enable PIO controller
  4009fe:	682e      	ldr	r6, [r5, #0]
  400a00:	f046 4600 	orr.w	r6, r6, #2147483648	; 0x80000000
  400a04:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P31; //disable output
  400a06:	6825      	ldr	r5, [r4, #0]
  400a08:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
  400a0c:	6025      	str	r5, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P31; //disable pull-down resistor
  400a0e:	6804      	ldr	r4, [r0, #0]
  400a10:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
  400a14:	6004      	str	r4, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P31;	//enable pull-up resistor
  400a16:	6808      	ldr	r0, [r1, #0]
  400a18:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
  400a1c:	6008      	str	r0, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P31; //turn on slow clock debounce
  400a1e:	6811      	ldr	r1, [r2, #0]
  400a20:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
  400a24:	6011      	str	r1, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P31;	//start debounce filter
  400a26:	681a      	ldr	r2, [r3, #0]
  400a28:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
  400a2c:	601a      	str	r2, [r3, #0]
	 


	/**************			CONFIGURE ENCODER INTERRUPTS			**************/

	uint32_t flag_clear = REG_PIOC_ISR;	//clear left over interrupt flags
  400a2e:	332c      	adds	r3, #44	; 0x2c
  400a30:	681b      	ldr	r3, [r3, #0]

	//Enable interrupts for Encoder 1
	REG_PIOC_IER |= PIO_IER_P0;			//enable input rising edge interrupt
  400a32:	4b85      	ldr	r3, [pc, #532]	; (400c48 <Encoder_init+0x860>)
  400a34:	681a      	ldr	r2, [r3, #0]
  400a36:	f042 0201 	orr.w	r2, r2, #1
  400a3a:	601a      	str	r2, [r3, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P0;
  400a3c:	4a83      	ldr	r2, [pc, #524]	; (400c4c <Encoder_init+0x864>)
  400a3e:	6811      	ldr	r1, [r2, #0]
  400a40:	f041 0101 	orr.w	r1, r1, #1
  400a44:	6011      	str	r1, [r2, #0]
	REG_PIOC_IER |= PIO_IER_P1;			//enable input rising edge interrupt
  400a46:	6819      	ldr	r1, [r3, #0]
  400a48:	f041 0102 	orr.w	r1, r1, #2
  400a4c:	6019      	str	r1, [r3, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P1;
  400a4e:	6811      	ldr	r1, [r2, #0]
  400a50:	f041 0102 	orr.w	r1, r1, #2
  400a54:	6011      	str	r1, [r2, #0]

	//Enable interrupts for Encoder 2
	REG_PIOC_IER |= PIO_IER_P2;			//enable input rising edge interrupt
  400a56:	6819      	ldr	r1, [r3, #0]
  400a58:	f041 0104 	orr.w	r1, r1, #4
  400a5c:	6019      	str	r1, [r3, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P2;
  400a5e:	6812      	ldr	r2, [r2, #0]
  400a60:	f042 0204 	orr.w	r2, r2, #4
  400a64:	3394      	adds	r3, #148	; 0x94
  400a66:	601a      	str	r2, [r3, #0]
	REG_PIOC_IER |= PIO_IER_P3;			//enable input rising edge interrupt
  400a68:	4a77      	ldr	r2, [pc, #476]	; (400c48 <Encoder_init+0x860>)
  400a6a:	6811      	ldr	r1, [r2, #0]
  400a6c:	f041 0108 	orr.w	r1, r1, #8
  400a70:	6011      	str	r1, [r2, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P3;
  400a72:	6819      	ldr	r1, [r3, #0]
  400a74:	f041 0108 	orr.w	r1, r1, #8
  400a78:	6019      	str	r1, [r3, #0]

	//Enable interrupts for Encoder 3
	REG_PIOC_IER |= PIO_IER_P4;			//enable input rising edge interrupt
  400a7a:	6811      	ldr	r1, [r2, #0]
  400a7c:	f041 0110 	orr.w	r1, r1, #16
  400a80:	6011      	str	r1, [r2, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P4;
  400a82:	6819      	ldr	r1, [r3, #0]
  400a84:	f041 0110 	orr.w	r1, r1, #16
  400a88:	6019      	str	r1, [r3, #0]
	REG_PIOC_IER |= PIO_IER_P5;			//enable input rising edge interrupt
  400a8a:	6811      	ldr	r1, [r2, #0]
  400a8c:	f041 0120 	orr.w	r1, r1, #32
  400a90:	6011      	str	r1, [r2, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P5;
  400a92:	6819      	ldr	r1, [r3, #0]
  400a94:	f041 0120 	orr.w	r1, r1, #32
  400a98:	6019      	str	r1, [r3, #0]

	//Enable interrupts for Encoder 4
	REG_PIOC_IER |= PIO_IER_P6;			//enable input rising edge interrupt
  400a9a:	6811      	ldr	r1, [r2, #0]
  400a9c:	f041 0140 	orr.w	r1, r1, #64	; 0x40
  400aa0:	6011      	str	r1, [r2, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P6;
  400aa2:	6819      	ldr	r1, [r3, #0]
  400aa4:	f041 0140 	orr.w	r1, r1, #64	; 0x40
  400aa8:	6019      	str	r1, [r3, #0]
	REG_PIOC_IER |= PIO_IER_P7;			//enable input rising edge interrupt
  400aaa:	6811      	ldr	r1, [r2, #0]
  400aac:	f041 0180 	orr.w	r1, r1, #128	; 0x80
  400ab0:	6011      	str	r1, [r2, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P7;
  400ab2:	6819      	ldr	r1, [r3, #0]
  400ab4:	f041 0180 	orr.w	r1, r1, #128	; 0x80
  400ab8:	6019      	str	r1, [r3, #0]

	//Enable interrupts for Encoder 5
	REG_PIOC_IER |= PIO_IER_P8;			//enable input rising edge interrupt
  400aba:	6811      	ldr	r1, [r2, #0]
  400abc:	f441 7180 	orr.w	r1, r1, #256	; 0x100
  400ac0:	6011      	str	r1, [r2, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P8;
  400ac2:	6819      	ldr	r1, [r3, #0]
  400ac4:	f441 7180 	orr.w	r1, r1, #256	; 0x100
  400ac8:	6019      	str	r1, [r3, #0]
	REG_PIOC_IER |= PIO_IER_P9;			//enable input rising edge interrupt
  400aca:	6811      	ldr	r1, [r2, #0]
  400acc:	f441 7100 	orr.w	r1, r1, #512	; 0x200
  400ad0:	6011      	str	r1, [r2, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P9;
  400ad2:	6819      	ldr	r1, [r3, #0]
  400ad4:	f441 7100 	orr.w	r1, r1, #512	; 0x200
  400ad8:	6019      	str	r1, [r3, #0]

	//Enable interrupts for Encoder 6
	REG_PIOC_IER |= PIO_IER_P10;			//enable input rising edge interrupt
  400ada:	6811      	ldr	r1, [r2, #0]
  400adc:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
  400ae0:	6011      	str	r1, [r2, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P10;
  400ae2:	6819      	ldr	r1, [r3, #0]
  400ae4:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
  400ae8:	6019      	str	r1, [r3, #0]
	REG_PIOC_IER |= PIO_IER_P11;			//enable input rising edge interrupt
  400aea:	6811      	ldr	r1, [r2, #0]
  400aec:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
  400af0:	6011      	str	r1, [r2, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P11;
  400af2:	6819      	ldr	r1, [r3, #0]
  400af4:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
  400af8:	6019      	str	r1, [r3, #0]

	//Enable interrupts for Encoder 7
	REG_PIOC_IER |= PIO_IER_P3;			//enable input rising edge interrupt
  400afa:	6811      	ldr	r1, [r2, #0]
  400afc:	f041 0108 	orr.w	r1, r1, #8
  400b00:	6011      	str	r1, [r2, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P3;
  400b02:	6819      	ldr	r1, [r3, #0]
  400b04:	f041 0108 	orr.w	r1, r1, #8
  400b08:	6019      	str	r1, [r3, #0]
	REG_PIOC_IER |= PIO_IER_P13;			//enable input rising edge interrupt
  400b0a:	6811      	ldr	r1, [r2, #0]
  400b0c:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
  400b10:	6011      	str	r1, [r2, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P13;
  400b12:	6819      	ldr	r1, [r3, #0]
  400b14:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
  400b18:	6019      	str	r1, [r3, #0]

	//Enable interrupts for Encoder 8
	REG_PIOC_IER |= PIO_IER_P14;			//enable input rising edge interrupt
  400b1a:	6811      	ldr	r1, [r2, #0]
  400b1c:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
  400b20:	6011      	str	r1, [r2, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P14;
  400b22:	6819      	ldr	r1, [r3, #0]
  400b24:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
  400b28:	6019      	str	r1, [r3, #0]
	REG_PIOC_IER |= PIO_IER_P15;			//enable input rising edge interrupt
  400b2a:	6811      	ldr	r1, [r2, #0]
  400b2c:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
  400b30:	6011      	str	r1, [r2, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P15;
  400b32:	6819      	ldr	r1, [r3, #0]
  400b34:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
  400b38:	6019      	str	r1, [r3, #0]

	//Enable interrupts for Encoder 9
	REG_PIOC_IER |= PIO_IER_P16;			//enable input rising edge interrupt
  400b3a:	6811      	ldr	r1, [r2, #0]
  400b3c:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
  400b40:	6011      	str	r1, [r2, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P16;
  400b42:	6819      	ldr	r1, [r3, #0]
  400b44:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
  400b48:	6019      	str	r1, [r3, #0]
	REG_PIOC_IER |= PIO_IER_P17;			//enable input rising edge interrupt
  400b4a:	6811      	ldr	r1, [r2, #0]
  400b4c:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
  400b50:	6011      	str	r1, [r2, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P17;
  400b52:	6819      	ldr	r1, [r3, #0]
  400b54:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
  400b58:	6019      	str	r1, [r3, #0]

	//Enable interrupts for Encoder 10
	REG_PIOC_IER |= PIO_IER_P18;			//enable input rising edge interrupt
  400b5a:	6811      	ldr	r1, [r2, #0]
  400b5c:	f441 2180 	orr.w	r1, r1, #262144	; 0x40000
  400b60:	6011      	str	r1, [r2, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P18;
  400b62:	6819      	ldr	r1, [r3, #0]
  400b64:	f441 2180 	orr.w	r1, r1, #262144	; 0x40000
  400b68:	6019      	str	r1, [r3, #0]
	REG_PIOC_IER |= PIO_IER_P19;			//enable input rising edge interrupt
  400b6a:	6811      	ldr	r1, [r2, #0]
  400b6c:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
  400b70:	6011      	str	r1, [r2, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P19;
  400b72:	6819      	ldr	r1, [r3, #0]
  400b74:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
  400b78:	6019      	str	r1, [r3, #0]

	//Enable interrupts for Encoder 11
	REG_PIOC_IER |= PIO_IER_P20;			//enable input rising edge interrupt
  400b7a:	6811      	ldr	r1, [r2, #0]
  400b7c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  400b80:	6011      	str	r1, [r2, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P20;
  400b82:	6819      	ldr	r1, [r3, #0]
  400b84:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  400b88:	6019      	str	r1, [r3, #0]
	REG_PIOC_IER |= PIO_IER_P21;			//enable input rising edge interrupt
  400b8a:	6811      	ldr	r1, [r2, #0]
  400b8c:	f441 1100 	orr.w	r1, r1, #2097152	; 0x200000
  400b90:	6011      	str	r1, [r2, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P21;
  400b92:	6819      	ldr	r1, [r3, #0]
  400b94:	f441 1100 	orr.w	r1, r1, #2097152	; 0x200000
  400b98:	6019      	str	r1, [r3, #0]

	//Enable interrupts for Encoder 12
	REG_PIOC_IER |= PIO_IER_P22;			//enable input rising edge interrupt
  400b9a:	6811      	ldr	r1, [r2, #0]
  400b9c:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
  400ba0:	6011      	str	r1, [r2, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P22;
  400ba2:	6819      	ldr	r1, [r3, #0]
  400ba4:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
  400ba8:	6019      	str	r1, [r3, #0]
	REG_PIOC_IER |= PIO_IER_P23;			//enable input rising edge interrupt
  400baa:	6811      	ldr	r1, [r2, #0]
  400bac:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
  400bb0:	6011      	str	r1, [r2, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P23;
  400bb2:	6819      	ldr	r1, [r3, #0]
  400bb4:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
  400bb8:	6019      	str	r1, [r3, #0]

	//Enable interrupts for Encoder 13
	REG_PIOC_IER |= PIO_IER_P24;			//enable input rising edge interrupt
  400bba:	6811      	ldr	r1, [r2, #0]
  400bbc:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
  400bc0:	6011      	str	r1, [r2, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P24;
  400bc2:	6819      	ldr	r1, [r3, #0]
  400bc4:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
  400bc8:	6019      	str	r1, [r3, #0]
	REG_PIOC_IER |= PIO_IER_P25;			//enable input rising edge interrupt
  400bca:	6811      	ldr	r1, [r2, #0]
  400bcc:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
  400bd0:	6011      	str	r1, [r2, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P25;
  400bd2:	6819      	ldr	r1, [r3, #0]
  400bd4:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
  400bd8:	6019      	str	r1, [r3, #0]

	//Enable interrupts for Encoder 14
	REG_PIOC_IER |= PIO_IER_P26;			//enable input rising edge interrupt
  400bda:	6811      	ldr	r1, [r2, #0]
  400bdc:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
  400be0:	6011      	str	r1, [r2, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P26;
  400be2:	6819      	ldr	r1, [r3, #0]
  400be4:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
  400be8:	6019      	str	r1, [r3, #0]
	REG_PIOC_IER |= PIO_IER_P27;			//enable input rising edge interrupt
  400bea:	6811      	ldr	r1, [r2, #0]
  400bec:	f041 6100 	orr.w	r1, r1, #134217728	; 0x8000000
  400bf0:	6011      	str	r1, [r2, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P27;
  400bf2:	6819      	ldr	r1, [r3, #0]
  400bf4:	f041 6100 	orr.w	r1, r1, #134217728	; 0x8000000
  400bf8:	6019      	str	r1, [r3, #0]

	//Enable interrupts for Encoder 15
	REG_PIOC_IER |= PIO_IER_P28;			//enable input rising edge interrupt
  400bfa:	6811      	ldr	r1, [r2, #0]
  400bfc:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
  400c00:	6011      	str	r1, [r2, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P28;
  400c02:	6819      	ldr	r1, [r3, #0]
  400c04:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
  400c08:	6019      	str	r1, [r3, #0]
	REG_PIOC_IER |= PIO_IER_P29;			//enable input rising edge interrupt
  400c0a:	6811      	ldr	r1, [r2, #0]
  400c0c:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
  400c10:	6011      	str	r1, [r2, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P29;
  400c12:	6819      	ldr	r1, [r3, #0]
  400c14:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
  400c18:	6019      	str	r1, [r3, #0]

	//Enable interrupts for Encoder 16
	REG_PIOC_IER |= PIO_IER_P30;			//enable input rising edge interrupt
  400c1a:	6811      	ldr	r1, [r2, #0]
  400c1c:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
  400c20:	6011      	str	r1, [r2, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P30;
  400c22:	6819      	ldr	r1, [r3, #0]
  400c24:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
  400c28:	6019      	str	r1, [r3, #0]
	REG_PIOC_IER |= PIO_IER_P31;			//enable input rising edge interrupt
  400c2a:	6811      	ldr	r1, [r2, #0]
  400c2c:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
  400c30:	6011      	str	r1, [r2, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P31;
  400c32:	681a      	ldr	r2, [r3, #0]
  400c34:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
  400c38:	601a      	str	r2, [r3, #0]
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  400c3a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  400c3e:	4b04      	ldr	r3, [pc, #16]	; (400c50 <Encoder_init+0x868>)
  400c40:	601a      	str	r2, [r3, #0]

	NVIC_EnableIRQ(PIOC_IRQn);			//enable PORT C interrupts
}
  400c42:	bc70      	pop	{r4, r5, r6}
  400c44:	4770      	bx	lr
  400c46:	bf00      	nop
  400c48:	400e1240 	.word	0x400e1240
  400c4c:	400e12d4 	.word	0x400e12d4
  400c50:	e000e100 	.word	0xe000e100

00400c54 <PIOC_Handler>:



void PIOC_Handler(){
  400c54:	b508      	push	{r3, lr}

	uint32_t status = REG_PIOC_ISR;	//read PIOC interrupt status & clear interrupt flags
  400c56:	4b07      	ldr	r3, [pc, #28]	; (400c74 <PIOC_Handler+0x20>)
  400c58:	681a      	ldr	r2, [r3, #0]
	else if ( (status & PIO_ISR_P16) || (status & PIO_ISR_P17) ){
		
	}

	//check if Encoder 10 was rotated
	else if ( (status & PIO_ISR_P18) || (status & PIO_ISR_P19) ){
  400c5a:	4b07      	ldr	r3, [pc, #28]	; (400c78 <PIOC_Handler+0x24>)
  400c5c:	4013      	ands	r3, r2
  400c5e:	b943      	cbnz	r3, 400c72 <PIOC_Handler+0x1e>
		
	}

	//check if Encoder 11 was rotated
	else if ( (status & PIO_ISR_P20) || (status & PIO_ISR_P21) ){
  400c60:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
  400c64:	d005      	beq.n	400c72 <PIOC_Handler+0x1e>
		Encoder_isRight(PIO_ODSR_P20, PIO_ODSR_P21);
  400c66:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
  400c6a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  400c6e:	4b03      	ldr	r3, [pc, #12]	; (400c7c <PIOC_Handler+0x28>)
  400c70:	4798      	blx	r3
  400c72:	bd08      	pop	{r3, pc}
  400c74:	400e124c 	.word	0x400e124c
  400c78:	000fefff 	.word	0x000fefff
  400c7c:	00400375 	.word	0x00400375

00400c80 <leds_status_get>:
void led_toggle(uint8_t top_row, uint8_t bottom_row);
int leds_status_get(uint8_t curr_step);

int leds_status_get(uint8_t curr_step){
	return leds_status[curr_step];
}
  400c80:	4b01      	ldr	r3, [pc, #4]	; (400c88 <leds_status_get+0x8>)
  400c82:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
  400c86:	4770      	bx	lr
  400c88:	2000000c 	.word	0x2000000c

00400c8c <leds_update_display>:
void leds_update_note(uint8_t led_pos){

	leds_update_display();
}

 void leds_update_display(){
  400c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  400c8e:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  400c90:	f3bf 8f5f 	dmb	sy

	cpu_irq_disable();
  400c94:	4f90      	ldr	r7, [pc, #576]	; (400ed8 <leds_update_display+0x24c>)
  400c96:	2300      	movs	r3, #0
  400c98:	703b      	strb	r3, [r7, #0]

	//Set Write Command, Function, and BC Bits
	SPI_byteSend(0x94);
  400c9a:	2094      	movs	r0, #148	; 0x94
  400c9c:	4c8f      	ldr	r4, [pc, #572]	; (400edc <leds_update_display+0x250>)
  400c9e:	47a0      	blx	r4
	SPI_byteSend(0x5F);
  400ca0:	205f      	movs	r0, #95	; 0x5f
  400ca2:	47a0      	blx	r4
	SPI_byteSend(0xFF);
  400ca4:	20ff      	movs	r0, #255	; 0xff
  400ca6:	47a0      	blx	r4
	SPI_byteSend(0xFF);
  400ca8:	20ff      	movs	r0, #255	; 0xff
  400caa:	47a0      	blx	r4
// 	for (int i = 11; i > -1; i--){
// 		SPI_byteSend( (uint8_t) (leds_data_1[i] >> 8) );
// 		SPI_byteSend( (uint8_t) (leds_data_1[i]) );
// 	}

	SPI_byteSend( (uint8_t) (leds_data_1[2] >> 8) );
  400cac:	4d8c      	ldr	r5, [pc, #560]	; (400ee0 <leds_update_display+0x254>)
  400cae:	88a8      	ldrh	r0, [r5, #4]
  400cb0:	0a00      	lsrs	r0, r0, #8
  400cb2:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_1[2]) );
  400cb4:	7928      	ldrb	r0, [r5, #4]
  400cb6:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_1[1] >> 8) );
  400cb8:	8868      	ldrh	r0, [r5, #2]
  400cba:	0a00      	lsrs	r0, r0, #8
  400cbc:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_1[1]) );
  400cbe:	78a8      	ldrb	r0, [r5, #2]
  400cc0:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_1[0] >> 8) );
  400cc2:	8828      	ldrh	r0, [r5, #0]
  400cc4:	0a00      	lsrs	r0, r0, #8
  400cc6:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_1[0]) );
  400cc8:	7828      	ldrb	r0, [r5, #0]
  400cca:	47a0      	blx	r4

	SPI_byteSend( (uint8_t) (leds_data_3[2] >> 8) );
  400ccc:	4e85      	ldr	r6, [pc, #532]	; (400ee4 <leds_update_display+0x258>)
  400cce:	88b0      	ldrh	r0, [r6, #4]
  400cd0:	0a00      	lsrs	r0, r0, #8
  400cd2:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_3[2]) );
  400cd4:	7930      	ldrb	r0, [r6, #4]
  400cd6:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_3[1] >> 8) );
  400cd8:	8870      	ldrh	r0, [r6, #2]
  400cda:	0a00      	lsrs	r0, r0, #8
  400cdc:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_3[1]) );
  400cde:	78b0      	ldrb	r0, [r6, #2]
  400ce0:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_3[0] >> 8) );
  400ce2:	8830      	ldrh	r0, [r6, #0]
  400ce4:	0a00      	lsrs	r0, r0, #8
  400ce6:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_3[0]) );
  400ce8:	7830      	ldrb	r0, [r6, #0]
  400cea:	47a0      	blx	r4

	SPI_byteSend( (uint8_t) (leds_data_3[5] >> 8) );
  400cec:	8970      	ldrh	r0, [r6, #10]
  400cee:	0a00      	lsrs	r0, r0, #8
  400cf0:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_3[5]) );
  400cf2:	7ab0      	ldrb	r0, [r6, #10]
  400cf4:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_3[4] >> 8) );
  400cf6:	8930      	ldrh	r0, [r6, #8]
  400cf8:	0a00      	lsrs	r0, r0, #8
  400cfa:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_3[4]) );
  400cfc:	7a30      	ldrb	r0, [r6, #8]
  400cfe:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_3[3] >> 8) );
  400d00:	88f0      	ldrh	r0, [r6, #6]
  400d02:	0a00      	lsrs	r0, r0, #8
  400d04:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_3[3]) );
  400d06:	79b0      	ldrb	r0, [r6, #6]
  400d08:	47a0      	blx	r4

	SPI_byteSend( (uint8_t) (leds_data_1[5] >> 8) );
  400d0a:	8968      	ldrh	r0, [r5, #10]
  400d0c:	0a00      	lsrs	r0, r0, #8
  400d0e:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_1[5]) );
  400d10:	7aa8      	ldrb	r0, [r5, #10]
  400d12:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_1[4] >> 8) );
  400d14:	8928      	ldrh	r0, [r5, #8]
  400d16:	0a00      	lsrs	r0, r0, #8
  400d18:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_1[4]) );
  400d1a:	7a28      	ldrb	r0, [r5, #8]
  400d1c:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_1[3] >> 8) );
  400d1e:	88e8      	ldrh	r0, [r5, #6]
  400d20:	0a00      	lsrs	r0, r0, #8
  400d22:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_1[3]) );
  400d24:	79a8      	ldrb	r0, [r5, #6]
  400d26:	47a0      	blx	r4

	//Set Write Command, Function, and BC Bits
	SPI_byteSend(0x94);
  400d28:	2094      	movs	r0, #148	; 0x94
  400d2a:	47a0      	blx	r4
	SPI_byteSend(0x5F);
  400d2c:	205f      	movs	r0, #95	; 0x5f
  400d2e:	47a0      	blx	r4
	SPI_byteSend(0xFF);
  400d30:	20ff      	movs	r0, #255	; 0xff
  400d32:	47a0      	blx	r4
	SPI_byteSend(0xFF);
  400d34:	20ff      	movs	r0, #255	; 0xff
  400d36:	47a0      	blx	r4
// 	for (int i = 11; i > -1; i--){
// 		SPI_byteSend( (uint8_t) (leds_data_2[i] >> 8) );
// 		SPI_byteSend( (uint8_t) (leds_data_2[i]) );
// 	}

	SPI_byteSend( (uint8_t) (leds_data_1[8] >> 8) );
  400d38:	8a28      	ldrh	r0, [r5, #16]
  400d3a:	0a00      	lsrs	r0, r0, #8
  400d3c:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_1[8]) );
  400d3e:	7c28      	ldrb	r0, [r5, #16]
  400d40:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_1[7] >> 8) );
  400d42:	89e8      	ldrh	r0, [r5, #14]
  400d44:	0a00      	lsrs	r0, r0, #8
  400d46:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_1[7]) );
  400d48:	7ba8      	ldrb	r0, [r5, #14]
  400d4a:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_1[6] >> 8) );
  400d4c:	89a8      	ldrh	r0, [r5, #12]
  400d4e:	0a00      	lsrs	r0, r0, #8
  400d50:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_1[6]) );
  400d52:	7b28      	ldrb	r0, [r5, #12]
  400d54:	47a0      	blx	r4

	SPI_byteSend( (uint8_t) (leds_data_3[8] >> 8) );
  400d56:	8a30      	ldrh	r0, [r6, #16]
  400d58:	0a00      	lsrs	r0, r0, #8
  400d5a:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_3[8]) );
  400d5c:	7c30      	ldrb	r0, [r6, #16]
  400d5e:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_3[7] >> 8) );
  400d60:	89f0      	ldrh	r0, [r6, #14]
  400d62:	0a00      	lsrs	r0, r0, #8
  400d64:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_3[7]) );
  400d66:	7bb0      	ldrb	r0, [r6, #14]
  400d68:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_3[6] >> 8) );
  400d6a:	89b0      	ldrh	r0, [r6, #12]
  400d6c:	0a00      	lsrs	r0, r0, #8
  400d6e:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_3[6]) );
  400d70:	7b30      	ldrb	r0, [r6, #12]
  400d72:	47a0      	blx	r4

	SPI_byteSend( (uint8_t) (leds_data_3[11] >> 8) );
  400d74:	8af0      	ldrh	r0, [r6, #22]
  400d76:	0a00      	lsrs	r0, r0, #8
  400d78:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_3[11]) );
  400d7a:	7db0      	ldrb	r0, [r6, #22]
  400d7c:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_3[10] >> 8) );
  400d7e:	8ab0      	ldrh	r0, [r6, #20]
  400d80:	0a00      	lsrs	r0, r0, #8
  400d82:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_3[10]) );
  400d84:	7d30      	ldrb	r0, [r6, #20]
  400d86:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_3[9] >> 8) );
  400d88:	8a70      	ldrh	r0, [r6, #18]
  400d8a:	0a00      	lsrs	r0, r0, #8
  400d8c:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_3[9]) );
  400d8e:	7cb0      	ldrb	r0, [r6, #18]
  400d90:	47a0      	blx	r4

	SPI_byteSend( (uint8_t) (leds_data_1[11] >> 8) );
  400d92:	8ae8      	ldrh	r0, [r5, #22]
  400d94:	0a00      	lsrs	r0, r0, #8
  400d96:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_1[11]) );
  400d98:	7da8      	ldrb	r0, [r5, #22]
  400d9a:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_1[10] >> 8) );
  400d9c:	8aa8      	ldrh	r0, [r5, #20]
  400d9e:	0a00      	lsrs	r0, r0, #8
  400da0:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_1[10]) );
  400da2:	7d28      	ldrb	r0, [r5, #20]
  400da4:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_1[9] >> 8) );
  400da6:	8a68      	ldrh	r0, [r5, #18]
  400da8:	0a00      	lsrs	r0, r0, #8
  400daa:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_1[9]) );
  400dac:	7ca8      	ldrb	r0, [r5, #18]
  400dae:	47a0      	blx	r4

	//Set Write Command, Function, and BC Bits
	SPI_byteSend(0x94);
  400db0:	2094      	movs	r0, #148	; 0x94
  400db2:	47a0      	blx	r4
	SPI_byteSend(0x5F);
  400db4:	205f      	movs	r0, #95	; 0x5f
  400db6:	47a0      	blx	r4
	SPI_byteSend(0xFF);
  400db8:	20ff      	movs	r0, #255	; 0xff
  400dba:	47a0      	blx	r4
	SPI_byteSend(0xFF);
  400dbc:	20ff      	movs	r0, #255	; 0xff
  400dbe:	47a0      	blx	r4
// 	for (int i = 11; i > -1; i--){
// 		SPI_byteSend( (uint8_t) (leds_data_3[i] >> 8) );
// 		SPI_byteSend( (uint8_t) (leds_data_3[i]) );
// 	}

	SPI_byteSend( (uint8_t) (leds_data_2[2] >> 8) );
  400dc0:	4d49      	ldr	r5, [pc, #292]	; (400ee8 <leds_update_display+0x25c>)
  400dc2:	88a8      	ldrh	r0, [r5, #4]
  400dc4:	0a00      	lsrs	r0, r0, #8
  400dc6:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_2[2]) );
  400dc8:	7928      	ldrb	r0, [r5, #4]
  400dca:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_2[1] >> 8) );
  400dcc:	8868      	ldrh	r0, [r5, #2]
  400dce:	0a00      	lsrs	r0, r0, #8
  400dd0:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_2[1]) );
  400dd2:	78a8      	ldrb	r0, [r5, #2]
  400dd4:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_2[0] >> 8) );
  400dd6:	8828      	ldrh	r0, [r5, #0]
  400dd8:	0a00      	lsrs	r0, r0, #8
  400dda:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_2[0]) );
  400ddc:	7828      	ldrb	r0, [r5, #0]
  400dde:	47a0      	blx	r4

	SPI_byteSend( (uint8_t) (leds_data_4[2] >> 8) );
  400de0:	4e42      	ldr	r6, [pc, #264]	; (400eec <leds_update_display+0x260>)
  400de2:	88b0      	ldrh	r0, [r6, #4]
  400de4:	0a00      	lsrs	r0, r0, #8
  400de6:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_4[2]) );
  400de8:	7930      	ldrb	r0, [r6, #4]
  400dea:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_4[1] >> 8) );
  400dec:	8870      	ldrh	r0, [r6, #2]
  400dee:	0a00      	lsrs	r0, r0, #8
  400df0:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_4[1]) );
  400df2:	78b0      	ldrb	r0, [r6, #2]
  400df4:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_4[0] >> 8) );
  400df6:	8830      	ldrh	r0, [r6, #0]
  400df8:	0a00      	lsrs	r0, r0, #8
  400dfa:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_4[0]) );
  400dfc:	7830      	ldrb	r0, [r6, #0]
  400dfe:	47a0      	blx	r4

	SPI_byteSend( (uint8_t) (leds_data_4[5] >> 8) );
  400e00:	8970      	ldrh	r0, [r6, #10]
  400e02:	0a00      	lsrs	r0, r0, #8
  400e04:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_4[5]) );
  400e06:	7ab0      	ldrb	r0, [r6, #10]
  400e08:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_4[4] >> 8) );
  400e0a:	8930      	ldrh	r0, [r6, #8]
  400e0c:	0a00      	lsrs	r0, r0, #8
  400e0e:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_4[4]) );
  400e10:	7a30      	ldrb	r0, [r6, #8]
  400e12:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_4[3] >> 8) );
  400e14:	88f0      	ldrh	r0, [r6, #6]
  400e16:	0a00      	lsrs	r0, r0, #8
  400e18:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_4[3]) );
  400e1a:	79b0      	ldrb	r0, [r6, #6]
  400e1c:	47a0      	blx	r4

	SPI_byteSend( (uint8_t) (leds_data_2[5] >> 8) );
  400e1e:	8968      	ldrh	r0, [r5, #10]
  400e20:	0a00      	lsrs	r0, r0, #8
  400e22:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_2[5]) );
  400e24:	7aa8      	ldrb	r0, [r5, #10]
  400e26:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_2[4] >> 8) );
  400e28:	8928      	ldrh	r0, [r5, #8]
  400e2a:	0a00      	lsrs	r0, r0, #8
  400e2c:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_2[4]) );
  400e2e:	7a28      	ldrb	r0, [r5, #8]
  400e30:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_2[3] >> 8) );
  400e32:	88e8      	ldrh	r0, [r5, #6]
  400e34:	0a00      	lsrs	r0, r0, #8
  400e36:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_2[3]) );
  400e38:	79a8      	ldrb	r0, [r5, #6]
  400e3a:	47a0      	blx	r4

	//Set Write Command, Function, and BC Bits
	SPI_byteSend(0x94);
  400e3c:	2094      	movs	r0, #148	; 0x94
  400e3e:	47a0      	blx	r4
	SPI_byteSend(0x5F);
  400e40:	205f      	movs	r0, #95	; 0x5f
  400e42:	47a0      	blx	r4
	SPI_byteSend(0xFF);
  400e44:	20ff      	movs	r0, #255	; 0xff
  400e46:	47a0      	blx	r4
	SPI_byteSend(0xFF);
  400e48:	20ff      	movs	r0, #255	; 0xff
  400e4a:	47a0      	blx	r4
// 	for (int i = 11; i > -1; i--){
// 		SPI_byteSend( (uint8_t) (leds_data_4[i] >> 8) );
// 		SPI_byteSend( (uint8_t) (leds_data_4[i]) );
// 	}

	SPI_byteSend( (uint8_t) (leds_data_2[8] >> 8) );
  400e4c:	8a28      	ldrh	r0, [r5, #16]
  400e4e:	0a00      	lsrs	r0, r0, #8
  400e50:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_2[8]) );
  400e52:	7c28      	ldrb	r0, [r5, #16]
  400e54:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_2[7] >> 8) );
  400e56:	89e8      	ldrh	r0, [r5, #14]
  400e58:	0a00      	lsrs	r0, r0, #8
  400e5a:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_2[7]) );
  400e5c:	7ba8      	ldrb	r0, [r5, #14]
  400e5e:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_2[6] >> 8) );
  400e60:	89a8      	ldrh	r0, [r5, #12]
  400e62:	0a00      	lsrs	r0, r0, #8
  400e64:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_2[6]) );
  400e66:	7b28      	ldrb	r0, [r5, #12]
  400e68:	47a0      	blx	r4

	SPI_byteSend( (uint8_t) (leds_data_4[8] >> 8) );
  400e6a:	8a30      	ldrh	r0, [r6, #16]
  400e6c:	0a00      	lsrs	r0, r0, #8
  400e6e:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_4[8]) );
  400e70:	7c30      	ldrb	r0, [r6, #16]
  400e72:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_4[7] >> 8) );
  400e74:	89f0      	ldrh	r0, [r6, #14]
  400e76:	0a00      	lsrs	r0, r0, #8
  400e78:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_4[7]) );
  400e7a:	7bb0      	ldrb	r0, [r6, #14]
  400e7c:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_4[6] >> 8) );
  400e7e:	89b0      	ldrh	r0, [r6, #12]
  400e80:	0a00      	lsrs	r0, r0, #8
  400e82:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_4[6]) );
  400e84:	7b30      	ldrb	r0, [r6, #12]
  400e86:	47a0      	blx	r4

	SPI_byteSend( (uint8_t) (leds_data_4[11] >> 8) );
  400e88:	8af0      	ldrh	r0, [r6, #22]
  400e8a:	0a00      	lsrs	r0, r0, #8
  400e8c:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_4[11]) );
  400e8e:	7db0      	ldrb	r0, [r6, #22]
  400e90:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_4[10] >> 8) );
  400e92:	8ab0      	ldrh	r0, [r6, #20]
  400e94:	0a00      	lsrs	r0, r0, #8
  400e96:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_4[10]) );
  400e98:	7d30      	ldrb	r0, [r6, #20]
  400e9a:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_4[9] >> 8) );
  400e9c:	8a70      	ldrh	r0, [r6, #18]
  400e9e:	0a00      	lsrs	r0, r0, #8
  400ea0:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_4[9]) );
  400ea2:	7cb0      	ldrb	r0, [r6, #18]
  400ea4:	47a0      	blx	r4

	SPI_byteSend( (uint8_t) (leds_data_2[11] >> 8) );
  400ea6:	8ae8      	ldrh	r0, [r5, #22]
  400ea8:	0a00      	lsrs	r0, r0, #8
  400eaa:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_2[11]) );
  400eac:	7da8      	ldrb	r0, [r5, #22]
  400eae:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_2[10] >> 8) );
  400eb0:	8aa8      	ldrh	r0, [r5, #20]
  400eb2:	0a00      	lsrs	r0, r0, #8
  400eb4:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_2[10]) );
  400eb6:	7d28      	ldrb	r0, [r5, #20]
  400eb8:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_2[9] >> 8) );
  400eba:	8a68      	ldrh	r0, [r5, #18]
  400ebc:	0a00      	lsrs	r0, r0, #8
  400ebe:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_2[9]) );
  400ec0:	7ca8      	ldrb	r0, [r5, #18]
  400ec2:	47a0      	blx	r4


	delay_ms(2.74);
  400ec4:	f243 70ce 	movw	r0, #14286	; 0x37ce
  400ec8:	4b09      	ldr	r3, [pc, #36]	; (400ef0 <leds_update_display+0x264>)
  400eca:	4798      	blx	r3
	cpu_irq_enable();
  400ecc:	2301      	movs	r3, #1
  400ece:	703b      	strb	r3, [r7, #0]
  400ed0:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  400ed4:	b662      	cpsie	i
  400ed6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400ed8:	2000008c 	.word	0x2000008c
  400edc:	004013d5 	.word	0x004013d5
  400ee0:	200004dc 	.word	0x200004dc
  400ee4:	2000050c 	.word	0x2000050c
  400ee8:	200004f4 	.word	0x200004f4
  400eec:	20000524 	.word	0x20000524
  400ef0:	20000001 	.word	0x20000001

00400ef4 <led_toggle>:

int leds_status_get(uint8_t curr_step){
	return leds_status[curr_step];
}

void led_toggle(uint8_t top_row, uint8_t bottom_row){
  400ef4:	b508      	push	{r3, lr}

	switch(bottom_row) {
  400ef6:	29ef      	cmp	r1, #239	; 0xef
  400ef8:	d031      	beq.n	400f5e <led_toggle+0x6a>
  400efa:	d806      	bhi.n	400f0a <led_toggle+0x16>
  400efc:	29bf      	cmp	r1, #191	; 0xbf
  400efe:	d03e      	beq.n	400f7e <led_toggle+0x8a>
  400f00:	29df      	cmp	r1, #223	; 0xdf
  400f02:	d034      	beq.n	400f6e <led_toggle+0x7a>
  400f04:	297f      	cmp	r1, #127	; 0x7f
  400f06:	d149      	bne.n	400f9c <led_toggle+0xa8>
  400f08:	e041      	b.n	400f8e <led_toggle+0x9a>
  400f0a:	29fb      	cmp	r1, #251	; 0xfb
  400f0c:	d017      	beq.n	400f3e <led_toggle+0x4a>
  400f0e:	d802      	bhi.n	400f16 <led_toggle+0x22>
  400f10:	29f7      	cmp	r1, #247	; 0xf7
  400f12:	d01c      	beq.n	400f4e <led_toggle+0x5a>
  400f14:	e042      	b.n	400f9c <led_toggle+0xa8>
  400f16:	29fd      	cmp	r1, #253	; 0xfd
  400f18:	d009      	beq.n	400f2e <led_toggle+0x3a>
  400f1a:	29fe      	cmp	r1, #254	; 0xfe
  400f1c:	d13e      	bne.n	400f9c <led_toggle+0xa8>
		case 254 :
			leds_status[15] = abs(leds_status[15] - 1);
  400f1e:	4a4a      	ldr	r2, [pc, #296]	; (401048 <led_toggle+0x154>)
  400f20:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
  400f22:	3b01      	subs	r3, #1
  400f24:	2b00      	cmp	r3, #0
  400f26:	bfb8      	it	lt
  400f28:	425b      	neglt	r3, r3
  400f2a:	63d3      	str	r3, [r2, #60]	; 0x3c
			break;
  400f2c:	e036      	b.n	400f9c <led_toggle+0xa8>
		case 253 :
			leds_status[14] = abs(leds_status[14] - 1);
  400f2e:	4a46      	ldr	r2, [pc, #280]	; (401048 <led_toggle+0x154>)
  400f30:	6b93      	ldr	r3, [r2, #56]	; 0x38
  400f32:	3b01      	subs	r3, #1
  400f34:	2b00      	cmp	r3, #0
  400f36:	bfb8      	it	lt
  400f38:	425b      	neglt	r3, r3
  400f3a:	6393      	str	r3, [r2, #56]	; 0x38
			break;
  400f3c:	e02e      	b.n	400f9c <led_toggle+0xa8>
		case 251 :
			leds_status[13] = abs(leds_status[13] - 1);
  400f3e:	4a42      	ldr	r2, [pc, #264]	; (401048 <led_toggle+0x154>)
  400f40:	6b53      	ldr	r3, [r2, #52]	; 0x34
  400f42:	3b01      	subs	r3, #1
  400f44:	2b00      	cmp	r3, #0
  400f46:	bfb8      	it	lt
  400f48:	425b      	neglt	r3, r3
  400f4a:	6353      	str	r3, [r2, #52]	; 0x34
			break;
  400f4c:	e026      	b.n	400f9c <led_toggle+0xa8>
		case 247 :
			leds_status[12] = abs(leds_status[12] - 1);
  400f4e:	4a3e      	ldr	r2, [pc, #248]	; (401048 <led_toggle+0x154>)
  400f50:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400f52:	3b01      	subs	r3, #1
  400f54:	2b00      	cmp	r3, #0
  400f56:	bfb8      	it	lt
  400f58:	425b      	neglt	r3, r3
  400f5a:	6313      	str	r3, [r2, #48]	; 0x30
			break;
  400f5c:	e01e      	b.n	400f9c <led_toggle+0xa8>
		case 239 :
			leds_status[11] = abs(leds_status[11] - 1);
  400f5e:	4a3a      	ldr	r2, [pc, #232]	; (401048 <led_toggle+0x154>)
  400f60:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
  400f62:	3b01      	subs	r3, #1
  400f64:	2b00      	cmp	r3, #0
  400f66:	bfb8      	it	lt
  400f68:	425b      	neglt	r3, r3
  400f6a:	62d3      	str	r3, [r2, #44]	; 0x2c
			break;
  400f6c:	e016      	b.n	400f9c <led_toggle+0xa8>
		case 223 :
			leds_status[10] = abs(leds_status[10] - 1);
  400f6e:	4a36      	ldr	r2, [pc, #216]	; (401048 <led_toggle+0x154>)
  400f70:	6a93      	ldr	r3, [r2, #40]	; 0x28
  400f72:	3b01      	subs	r3, #1
  400f74:	2b00      	cmp	r3, #0
  400f76:	bfb8      	it	lt
  400f78:	425b      	neglt	r3, r3
  400f7a:	6293      	str	r3, [r2, #40]	; 0x28
			break;
  400f7c:	e00e      	b.n	400f9c <led_toggle+0xa8>
		case 191 :
			leds_status[9] = abs(leds_status[9] - 1);
  400f7e:	4a32      	ldr	r2, [pc, #200]	; (401048 <led_toggle+0x154>)
  400f80:	6a53      	ldr	r3, [r2, #36]	; 0x24
  400f82:	3b01      	subs	r3, #1
  400f84:	2b00      	cmp	r3, #0
  400f86:	bfb8      	it	lt
  400f88:	425b      	neglt	r3, r3
  400f8a:	6253      	str	r3, [r2, #36]	; 0x24
			break;
  400f8c:	e006      	b.n	400f9c <led_toggle+0xa8>
		case 127 :
			leds_status[8] = abs(leds_status[8] - 1);
  400f8e:	4a2e      	ldr	r2, [pc, #184]	; (401048 <led_toggle+0x154>)
  400f90:	6a13      	ldr	r3, [r2, #32]
  400f92:	3b01      	subs	r3, #1
  400f94:	2b00      	cmp	r3, #0
  400f96:	bfb8      	it	lt
  400f98:	425b      	neglt	r3, r3
  400f9a:	6213      	str	r3, [r2, #32]
			break;
		default :
			break;
	}

	switch(top_row) {
  400f9c:	28ef      	cmp	r0, #239	; 0xef
  400f9e:	d031      	beq.n	401004 <led_toggle+0x110>
  400fa0:	d806      	bhi.n	400fb0 <led_toggle+0xbc>
  400fa2:	28bf      	cmp	r0, #191	; 0xbf
  400fa4:	d03e      	beq.n	401024 <led_toggle+0x130>
  400fa6:	28df      	cmp	r0, #223	; 0xdf
  400fa8:	d034      	beq.n	401014 <led_toggle+0x120>
  400faa:	287f      	cmp	r0, #127	; 0x7f
  400fac:	d149      	bne.n	401042 <led_toggle+0x14e>
  400fae:	e041      	b.n	401034 <led_toggle+0x140>
  400fb0:	28fb      	cmp	r0, #251	; 0xfb
  400fb2:	d017      	beq.n	400fe4 <led_toggle+0xf0>
  400fb4:	d802      	bhi.n	400fbc <led_toggle+0xc8>
  400fb6:	28f7      	cmp	r0, #247	; 0xf7
  400fb8:	d01c      	beq.n	400ff4 <led_toggle+0x100>
  400fba:	e042      	b.n	401042 <led_toggle+0x14e>
  400fbc:	28fd      	cmp	r0, #253	; 0xfd
  400fbe:	d009      	beq.n	400fd4 <led_toggle+0xe0>
  400fc0:	28fe      	cmp	r0, #254	; 0xfe
  400fc2:	d13e      	bne.n	401042 <led_toggle+0x14e>
		case 254 :
			leds_status[7] = abs(leds_status[7] - 1);
  400fc4:	4a20      	ldr	r2, [pc, #128]	; (401048 <led_toggle+0x154>)
  400fc6:	69d3      	ldr	r3, [r2, #28]
  400fc8:	3b01      	subs	r3, #1
  400fca:	2b00      	cmp	r3, #0
  400fcc:	bfb8      	it	lt
  400fce:	425b      	neglt	r3, r3
  400fd0:	61d3      	str	r3, [r2, #28]
			break;
  400fd2:	e036      	b.n	401042 <led_toggle+0x14e>
		case 253 :
			leds_status[6] = abs(leds_status[6] - 1);
  400fd4:	4a1c      	ldr	r2, [pc, #112]	; (401048 <led_toggle+0x154>)
  400fd6:	6993      	ldr	r3, [r2, #24]
  400fd8:	3b01      	subs	r3, #1
  400fda:	2b00      	cmp	r3, #0
  400fdc:	bfb8      	it	lt
  400fde:	425b      	neglt	r3, r3
  400fe0:	6193      	str	r3, [r2, #24]
			break;
  400fe2:	e02e      	b.n	401042 <led_toggle+0x14e>
		case 251 :
			leds_status[5] = abs(leds_status[5] - 1);
  400fe4:	4a18      	ldr	r2, [pc, #96]	; (401048 <led_toggle+0x154>)
  400fe6:	6953      	ldr	r3, [r2, #20]
  400fe8:	3b01      	subs	r3, #1
  400fea:	2b00      	cmp	r3, #0
  400fec:	bfb8      	it	lt
  400fee:	425b      	neglt	r3, r3
  400ff0:	6153      	str	r3, [r2, #20]
			break;
  400ff2:	e026      	b.n	401042 <led_toggle+0x14e>
		case 247 :
			leds_status[4] = abs(leds_status[4] - 1);
  400ff4:	4a14      	ldr	r2, [pc, #80]	; (401048 <led_toggle+0x154>)
  400ff6:	6913      	ldr	r3, [r2, #16]
  400ff8:	3b01      	subs	r3, #1
  400ffa:	2b00      	cmp	r3, #0
  400ffc:	bfb8      	it	lt
  400ffe:	425b      	neglt	r3, r3
  401000:	6113      	str	r3, [r2, #16]
			break;
  401002:	e01e      	b.n	401042 <led_toggle+0x14e>
		case 239 :
			leds_status[3] = abs(leds_status[3] - 1);
  401004:	4a10      	ldr	r2, [pc, #64]	; (401048 <led_toggle+0x154>)
  401006:	68d3      	ldr	r3, [r2, #12]
  401008:	3b01      	subs	r3, #1
  40100a:	2b00      	cmp	r3, #0
  40100c:	bfb8      	it	lt
  40100e:	425b      	neglt	r3, r3
  401010:	60d3      	str	r3, [r2, #12]
			break;
  401012:	e016      	b.n	401042 <led_toggle+0x14e>
		case 223 :
			leds_status[2] = abs(leds_status[2] - 1);
  401014:	4a0c      	ldr	r2, [pc, #48]	; (401048 <led_toggle+0x154>)
  401016:	6893      	ldr	r3, [r2, #8]
  401018:	3b01      	subs	r3, #1
  40101a:	2b00      	cmp	r3, #0
  40101c:	bfb8      	it	lt
  40101e:	425b      	neglt	r3, r3
  401020:	6093      	str	r3, [r2, #8]
			break;
  401022:	e00e      	b.n	401042 <led_toggle+0x14e>
		case 191 :
			leds_status[1] = abs(leds_status[1] - 1);
  401024:	4a08      	ldr	r2, [pc, #32]	; (401048 <led_toggle+0x154>)
  401026:	6853      	ldr	r3, [r2, #4]
  401028:	3b01      	subs	r3, #1
  40102a:	2b00      	cmp	r3, #0
  40102c:	bfb8      	it	lt
  40102e:	425b      	neglt	r3, r3
  401030:	6053      	str	r3, [r2, #4]
			break;
  401032:	e006      	b.n	401042 <led_toggle+0x14e>
		case 127 :
			leds_status[0] = abs(leds_status[0] - 1);
  401034:	4a04      	ldr	r2, [pc, #16]	; (401048 <led_toggle+0x154>)
  401036:	6813      	ldr	r3, [r2, #0]
  401038:	3b01      	subs	r3, #1
  40103a:	2b00      	cmp	r3, #0
  40103c:	bfb8      	it	lt
  40103e:	425b      	neglt	r3, r3
  401040:	6013      	str	r3, [r2, #0]
			break;
		default : 
			break;
	}

	leds_update_display();
  401042:	4b02      	ldr	r3, [pc, #8]	; (40104c <led_toggle+0x158>)
  401044:	4798      	blx	r3
  401046:	bd08      	pop	{r3, pc}
  401048:	2000000c 	.word	0x2000000c
  40104c:	00400c8d 	.word	0x00400c8d

00401050 <leds_update_cursor>:

}

void leds_update_cursor(uint8_t curr_step){
  401050:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401054:	4d7c      	ldr	r5, [pc, #496]	; (401248 <leds_update_cursor+0x1f8>)
  401056:	1cae      	adds	r6, r5, #2
  401058:	497c      	ldr	r1, [pc, #496]	; (40124c <leds_update_cursor+0x1fc>)
  40105a:	2200      	movs	r2, #0

/* Initialize the Notes that are Enabled as Blue */
	for (int i = 0; i < 16; i++){
  40105c:	4613      	mov	r3, r2
					leds_data_3[toffset+1] = 0x0000;
					leds_data_3[toffset+2] = 0x0000;
				}
			}
			else {
				toffset = (i % 12)*3;
  40105e:	f8df e214 	ldr.w	lr, [pc, #532]	; 401274 <leds_update_cursor+0x224>
					leds_data_4[toffset] = 0x0000;
					leds_data_4[toffset+1] = 0x0000;
					leds_data_4[toffset+2] = 0x3FFF;
				}
				else{
					leds_data_4[toffset] = 0x0000;
  401062:	4f7b      	ldr	r7, [pc, #492]	; (401250 <leds_update_cursor+0x200>)
  401064:	4614      	mov	r4, r2
			else {
				toffset = (i % 12)*3;
				if(leds_status[i] == 1){
					leds_data_4[toffset] = 0x0000;
					leds_data_4[toffset+1] = 0x0000;
					leds_data_4[toffset+2] = 0x3FFF;
  401066:	f643 7cff 	movw	ip, #16383	; 0x3fff
					leds_data_3[toffset] = 0x0000;
					leds_data_3[toffset+1] = 0x0000;
					leds_data_3[toffset+2] = 0x3FFF;
				}
				else{
					leds_data_3[toffset] = 0x0000;
  40106a:	f8df 91fc 	ldr.w	r9, [pc, #508]	; 401268 <leds_update_cursor+0x218>
					leds_data_2[toffset] = 0x0000;
					leds_data_2[toffset+1] = 0x0000;
					leds_data_2[toffset+2] = 0x3FFF;
				}
				else{
					leds_data_2[toffset] = 0x0000;
  40106e:	f8df a1f4 	ldr.w	sl, [pc, #500]	; 401264 <leds_update_cursor+0x214>
  401072:	4683      	mov	fp, r0
  401074:	4610      	mov	r0, r2

void leds_update_cursor(uint8_t curr_step){

/* Initialize the Notes that are Enabled as Blue */
	for (int i = 0; i < 16; i++){
			if ( (i >= 0) && (i < 4) ){
  401076:	2b03      	cmp	r3, #3
  401078:	d80a      	bhi.n	401090 <leds_update_cursor+0x40>
				toffset = (i)*3;
				if(leds_status[i] == 1){
  40107a:	680a      	ldr	r2, [r1, #0]
  40107c:	2a01      	cmp	r2, #1
					leds_data_1[toffset] = 0x0000;
  40107e:	f826 4c02 	strh.w	r4, [r6, #-2]
					leds_data_1[toffset+1] = 0x0000;
  401082:	806c      	strh	r4, [r5, #2]
					leds_data_1[toffset+2] = 0x3FFF;
  401084:	bf0c      	ite	eq
  401086:	f8a5 c004 	strheq.w	ip, [r5, #4]
				}
				else{
					leds_data_1[toffset] = 0x0000;
					leds_data_1[toffset+1] = 0x0000;
					leds_data_1[toffset+2] = 0x0000;
  40108a:	80ac      	strhne	r4, [r5, #4]
void leds_update_cursor(uint8_t curr_step){

/* Initialize the Notes that are Enabled as Blue */
	for (int i = 0; i < 16; i++){
			if ( (i >= 0) && (i < 4) ){
				toffset = (i)*3;
  40108c:	4680      	mov	r8, r0
  40108e:	e060      	b.n	401152 <leds_update_cursor+0x102>
					leds_data_1[toffset] = 0x0000;
					leds_data_1[toffset+1] = 0x0000;
					leds_data_1[toffset+2] = 0x0000;
				}
			}
			else if ( (i >= 4) && (i < 8) ){
  401090:	f1a3 0804 	sub.w	r8, r3, #4
  401094:	f1b8 0f03 	cmp.w	r8, #3
  401098:	d81d      	bhi.n	4010d6 <leds_update_cursor+0x86>
				toffset = (i % 4)*3;
  40109a:	4a6e      	ldr	r2, [pc, #440]	; (401254 <leds_update_cursor+0x204>)
  40109c:	ea13 0802 	ands.w	r8, r3, r2
  4010a0:	d505      	bpl.n	4010ae <leds_update_cursor+0x5e>
  4010a2:	f108 38ff 	add.w	r8, r8, #4294967295
  4010a6:	f068 0803 	orn	r8, r8, #3
  4010aa:	f108 0801 	add.w	r8, r8, #1
  4010ae:	eb08 0848 	add.w	r8, r8, r8, lsl #1
  4010b2:	fa5f f888 	uxtb.w	r8, r8
				if(leds_status[i] == 1){
  4010b6:	680a      	ldr	r2, [r1, #0]
  4010b8:	2a01      	cmp	r2, #1
					leds_data_2[toffset] = 0x0000;
  4010ba:	f82a 4018 	strh.w	r4, [sl, r8, lsl #1]
					leds_data_2[toffset+1] = 0x0000;
  4010be:	f108 0201 	add.w	r2, r8, #1
  4010c2:	f82a 4012 	strh.w	r4, [sl, r2, lsl #1]
					leds_data_2[toffset+2] = 0x3FFF;
  4010c6:	f108 0202 	add.w	r2, r8, #2
  4010ca:	bf0c      	ite	eq
  4010cc:	f82a c012 	strheq.w	ip, [sl, r2, lsl #1]
				}
				else{
					leds_data_2[toffset] = 0x0000;
					leds_data_2[toffset+1] = 0x0000;
					leds_data_2[toffset+2] = 0x0000;
  4010d0:	f82a 4012 	strhne.w	r4, [sl, r2, lsl #1]
  4010d4:	e03d      	b.n	401152 <leds_update_cursor+0x102>
				}
			}
			else if ( (i >= 8) && (i < 12) ){
  4010d6:	f1a3 0208 	sub.w	r2, r3, #8
  4010da:	2a03      	cmp	r2, #3
  4010dc:	d81d      	bhi.n	40111a <leds_update_cursor+0xca>
				toffset = (i % 8)*3;
  4010de:	4a5e      	ldr	r2, [pc, #376]	; (401258 <leds_update_cursor+0x208>)
  4010e0:	ea13 0802 	ands.w	r8, r3, r2
  4010e4:	d505      	bpl.n	4010f2 <leds_update_cursor+0xa2>
  4010e6:	f108 38ff 	add.w	r8, r8, #4294967295
  4010ea:	f068 0807 	orn	r8, r8, #7
  4010ee:	f108 0801 	add.w	r8, r8, #1
  4010f2:	eb08 0848 	add.w	r8, r8, r8, lsl #1
  4010f6:	fa5f f888 	uxtb.w	r8, r8
				if(leds_status[i] == 1){
  4010fa:	680a      	ldr	r2, [r1, #0]
  4010fc:	2a01      	cmp	r2, #1
					leds_data_3[toffset] = 0x0000;
  4010fe:	f829 4018 	strh.w	r4, [r9, r8, lsl #1]
					leds_data_3[toffset+1] = 0x0000;
  401102:	f108 0201 	add.w	r2, r8, #1
  401106:	f829 4012 	strh.w	r4, [r9, r2, lsl #1]
					leds_data_3[toffset+2] = 0x3FFF;
  40110a:	f108 0202 	add.w	r2, r8, #2
  40110e:	bf0c      	ite	eq
  401110:	f829 c012 	strheq.w	ip, [r9, r2, lsl #1]
				}
				else{
					leds_data_3[toffset] = 0x0000;
					leds_data_3[toffset+1] = 0x0000;
					leds_data_3[toffset+2] = 0x0000;
  401114:	f829 4012 	strhne.w	r4, [r9, r2, lsl #1]
  401118:	e01b      	b.n	401152 <leds_update_cursor+0x102>
				}
			}
			else {
				toffset = (i % 12)*3;
  40111a:	fb8e 2803 	smull	r2, r8, lr, r3
  40111e:	17da      	asrs	r2, r3, #31
  401120:	ebc2 0868 	rsb	r8, r2, r8, asr #1
  401124:	eb08 0848 	add.w	r8, r8, r8, lsl #1
  401128:	eba3 0888 	sub.w	r8, r3, r8, lsl #2
  40112c:	eb08 0848 	add.w	r8, r8, r8, lsl #1
  401130:	fa5f f888 	uxtb.w	r8, r8
				if(leds_status[i] == 1){
  401134:	680a      	ldr	r2, [r1, #0]
  401136:	2a01      	cmp	r2, #1
					leds_data_4[toffset] = 0x0000;
  401138:	f827 4018 	strh.w	r4, [r7, r8, lsl #1]
					leds_data_4[toffset+1] = 0x0000;
  40113c:	f108 0201 	add.w	r2, r8, #1
  401140:	f827 4012 	strh.w	r4, [r7, r2, lsl #1]
					leds_data_4[toffset+2] = 0x3FFF;
  401144:	f108 0202 	add.w	r2, r8, #2
  401148:	bf0c      	ite	eq
  40114a:	f827 c012 	strheq.w	ip, [r7, r2, lsl #1]
				}
				else{
					leds_data_4[toffset] = 0x0000;
					leds_data_4[toffset+1] = 0x0000;
					leds_data_4[toffset+2] = 0x0000;
  40114e:	f827 4012 	strhne.w	r4, [r7, r2, lsl #1]
}

void leds_update_cursor(uint8_t curr_step){

/* Initialize the Notes that are Enabled as Blue */
	for (int i = 0; i < 16; i++){
  401152:	3301      	adds	r3, #1
  401154:	3003      	adds	r0, #3
  401156:	b2c0      	uxtb	r0, r0
  401158:	3506      	adds	r5, #6
  40115a:	3606      	adds	r6, #6
  40115c:	3104      	adds	r1, #4
  40115e:	2b10      	cmp	r3, #16
  401160:	d189      	bne.n	401076 <leds_update_cursor+0x26>
  401162:	4658      	mov	r0, fp
  401164:	4b3d      	ldr	r3, [pc, #244]	; (40125c <leds_update_cursor+0x20c>)
  401166:	f883 8000 	strb.w	r8, [r3]
			}
	}


/* Update Cursor to correct position */
	if ( (curr_step >= 0) && (curr_step < 4) ){
  40116a:	2803      	cmp	r0, #3
  40116c:	d813      	bhi.n	401196 <leds_update_cursor+0x146>
		offset = (curr_step)*3;
  40116e:	eb0b 004b 	add.w	r0, fp, fp, lsl #1
  401172:	b2c0      	uxtb	r0, r0
  401174:	4b3a      	ldr	r3, [pc, #232]	; (401260 <leds_update_cursor+0x210>)
  401176:	7018      	strb	r0, [r3, #0]
		leds_data_1[offset] = 0x1FFF;
  401178:	4b33      	ldr	r3, [pc, #204]	; (401248 <leds_update_cursor+0x1f8>)
  40117a:	f641 72ff 	movw	r2, #8191	; 0x1fff
  40117e:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
		leds_data_1[offset+1] = 0x03FF;
  401182:	1c42      	adds	r2, r0, #1
  401184:	f240 31ff 	movw	r1, #1023	; 0x3ff
  401188:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		leds_data_1[offset+2] = 0x0000;
  40118c:	3002      	adds	r0, #2
  40118e:	2200      	movs	r2, #0
  401190:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
  401194:	e053      	b.n	40123e <leds_update_cursor+0x1ee>
	}
	else if ( (curr_step >= 4) && (curr_step < 8) ){
  401196:	f1ab 0304 	sub.w	r3, fp, #4
  40119a:	b2db      	uxtb	r3, r3
  40119c:	2b03      	cmp	r3, #3
  40119e:	d814      	bhi.n	4011ca <leds_update_cursor+0x17a>
		offset = (curr_step % 4)*3;
  4011a0:	f00b 0003 	and.w	r0, fp, #3
  4011a4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  4011a8:	4b2d      	ldr	r3, [pc, #180]	; (401260 <leds_update_cursor+0x210>)
  4011aa:	7018      	strb	r0, [r3, #0]
		leds_data_2[offset] = 0x1FFF;
  4011ac:	4b2d      	ldr	r3, [pc, #180]	; (401264 <leds_update_cursor+0x214>)
  4011ae:	f641 72ff 	movw	r2, #8191	; 0x1fff
  4011b2:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
		leds_data_2[offset+1] = 0x03FF;
  4011b6:	1c42      	adds	r2, r0, #1
  4011b8:	f240 31ff 	movw	r1, #1023	; 0x3ff
  4011bc:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		leds_data_2[offset+2] = 0x0000;
  4011c0:	3002      	adds	r0, #2
  4011c2:	2200      	movs	r2, #0
  4011c4:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
  4011c8:	e039      	b.n	40123e <leds_update_cursor+0x1ee>
	}
	else if ( (curr_step >= 8) && (curr_step < 12) ){
  4011ca:	f1ab 0308 	sub.w	r3, fp, #8
  4011ce:	b2db      	uxtb	r3, r3
  4011d0:	2b03      	cmp	r3, #3
  4011d2:	d814      	bhi.n	4011fe <leds_update_cursor+0x1ae>
		offset = (curr_step % 8)*3;
  4011d4:	f00b 0007 	and.w	r0, fp, #7
  4011d8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  4011dc:	4b20      	ldr	r3, [pc, #128]	; (401260 <leds_update_cursor+0x210>)
  4011de:	7018      	strb	r0, [r3, #0]
		leds_data_3[offset] = 0x1FFF;
  4011e0:	4b21      	ldr	r3, [pc, #132]	; (401268 <leds_update_cursor+0x218>)
  4011e2:	f641 72ff 	movw	r2, #8191	; 0x1fff
  4011e6:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
		leds_data_3[offset+1] = 0x03FF;
  4011ea:	1c42      	adds	r2, r0, #1
  4011ec:	f240 31ff 	movw	r1, #1023	; 0x3ff
  4011f0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		leds_data_3[offset+2] = 0x0000;
  4011f4:	3002      	adds	r0, #2
  4011f6:	2200      	movs	r2, #0
  4011f8:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
  4011fc:	e01f      	b.n	40123e <leds_update_cursor+0x1ee>
	}
	else if ( (curr_step >= 12) && (curr_step < 16) ){
  4011fe:	f1ab 030c 	sub.w	r3, fp, #12
  401202:	b2db      	uxtb	r3, r3
  401204:	2b03      	cmp	r3, #3
  401206:	d81a      	bhi.n	40123e <leds_update_cursor+0x1ee>
		offset = (curr_step % 12)*3;
  401208:	4b18      	ldr	r3, [pc, #96]	; (40126c <leds_update_cursor+0x21c>)
  40120a:	fba3 230b 	umull	r2, r3, r3, fp
  40120e:	08db      	lsrs	r3, r3, #3
  401210:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  401214:	ebab 0083 	sub.w	r0, fp, r3, lsl #2
  401218:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  40121c:	b2c3      	uxtb	r3, r0
  40121e:	4a10      	ldr	r2, [pc, #64]	; (401260 <leds_update_cursor+0x210>)
  401220:	7013      	strb	r3, [r2, #0]
		leds_data_4[offset] = 0x1FFF;
  401222:	4a0b      	ldr	r2, [pc, #44]	; (401250 <leds_update_cursor+0x200>)
  401224:	f641 71ff 	movw	r1, #8191	; 0x1fff
  401228:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		leds_data_4[offset+1] = 0x03FF;
  40122c:	1c59      	adds	r1, r3, #1
  40122e:	f240 30ff 	movw	r0, #1023	; 0x3ff
  401232:	f822 0011 	strh.w	r0, [r2, r1, lsl #1]
		leds_data_4[offset+2] = 0x0000;
  401236:	3302      	adds	r3, #2
  401238:	2100      	movs	r1, #0
  40123a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	}


	leds_update_display();
  40123e:	4b0c      	ldr	r3, [pc, #48]	; (401270 <leds_update_cursor+0x220>)
  401240:	4798      	blx	r3
  401242:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401246:	bf00      	nop
  401248:	200004dc 	.word	0x200004dc
  40124c:	2000000c 	.word	0x2000000c
  401250:	20000524 	.word	0x20000524
  401254:	80000003 	.word	0x80000003
  401258:	80000007 	.word	0x80000007
  40125c:	20000544 	.word	0x20000544
  401260:	20000545 	.word	0x20000545
  401264:	200004f4 	.word	0x200004f4
  401268:	2000050c 	.word	0x2000050c
  40126c:	aaaaaaab 	.word	0xaaaaaaab
  401270:	00400c8d 	.word	0x00400c8d
  401274:	2aaaaaab 	.word	0x2aaaaaab

00401278 <SPI_modeSelect>:
    Mode0		0		1
    Mode1		0		0
    Mode2		1		1
    Mode3		1		0
    */
    if (mode == 0){
  401278:	b948      	cbnz	r0, 40128e <SPI_modeSelect+0x16>
        REG_SPI_CSR &= ~SPI_CSR_CPOL;
  40127a:	4b17      	ldr	r3, [pc, #92]	; (4012d8 <SPI_modeSelect+0x60>)
  40127c:	681a      	ldr	r2, [r3, #0]
  40127e:	f022 0201 	bic.w	r2, r2, #1
  401282:	601a      	str	r2, [r3, #0]
        REG_SPI_CSR |= SPI_CSR_NCPHA;
  401284:	681a      	ldr	r2, [r3, #0]
  401286:	f042 0202 	orr.w	r2, r2, #2
  40128a:	601a      	str	r2, [r3, #0]
  40128c:	4770      	bx	lr
    }
    else if (mode == 1){
  40128e:	2801      	cmp	r0, #1
  401290:	d109      	bne.n	4012a6 <SPI_modeSelect+0x2e>
        REG_SPI_CSR &= ~SPI_CSR_CPOL;
  401292:	4b11      	ldr	r3, [pc, #68]	; (4012d8 <SPI_modeSelect+0x60>)
  401294:	681a      	ldr	r2, [r3, #0]
  401296:	f022 0201 	bic.w	r2, r2, #1
  40129a:	601a      	str	r2, [r3, #0]
        REG_SPI_CSR &= ~SPI_CSR_NCPHA;
  40129c:	681a      	ldr	r2, [r3, #0]
  40129e:	f022 0202 	bic.w	r2, r2, #2
  4012a2:	601a      	str	r2, [r3, #0]
  4012a4:	4770      	bx	lr
    }
    else if (mode == 2){
  4012a6:	2802      	cmp	r0, #2
  4012a8:	d109      	bne.n	4012be <SPI_modeSelect+0x46>
        REG_SPI_CSR |= SPI_CSR_CPOL;
  4012aa:	4b0b      	ldr	r3, [pc, #44]	; (4012d8 <SPI_modeSelect+0x60>)
  4012ac:	681a      	ldr	r2, [r3, #0]
  4012ae:	f042 0201 	orr.w	r2, r2, #1
  4012b2:	601a      	str	r2, [r3, #0]
        REG_SPI_CSR |= SPI_CSR_NCPHA;
  4012b4:	681a      	ldr	r2, [r3, #0]
  4012b6:	f042 0202 	orr.w	r2, r2, #2
  4012ba:	601a      	str	r2, [r3, #0]
  4012bc:	4770      	bx	lr
    }
    else if (mode == 3){
  4012be:	2803      	cmp	r0, #3
  4012c0:	d108      	bne.n	4012d4 <SPI_modeSelect+0x5c>
        REG_SPI_CSR |= SPI_CSR_CPOL;
  4012c2:	4b05      	ldr	r3, [pc, #20]	; (4012d8 <SPI_modeSelect+0x60>)
  4012c4:	681a      	ldr	r2, [r3, #0]
  4012c6:	f042 0201 	orr.w	r2, r2, #1
  4012ca:	601a      	str	r2, [r3, #0]
        REG_SPI_CSR &= ~SPI_CSR_NCPHA;
  4012cc:	681a      	ldr	r2, [r3, #0]
  4012ce:	f022 0202 	bic.w	r2, r2, #2
  4012d2:	601a      	str	r2, [r3, #0]
  4012d4:	4770      	bx	lr
  4012d6:	bf00      	nop
  4012d8:	40008030 	.word	0x40008030

004012dc <SPI_led_init>:
    }
}

void SPI_led_init(){
  4012dc:	b508      	push	{r3, lr}

	//enable peripheral clock
	REG_PMC_PCER0 |= PMC_PCER0_PID21;
  4012de:	4a14      	ldr	r2, [pc, #80]	; (401330 <SPI_led_init+0x54>)
  4012e0:	6813      	ldr	r3, [r2, #0]
  4012e2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
  4012e6:	6013      	str	r3, [r2, #0]

	//set spi master mode
	REG_SPI_MR |= SPI_MR_MSTR;
  4012e8:	4b12      	ldr	r3, [pc, #72]	; (401334 <SPI_led_init+0x58>)
  4012ea:	681a      	ldr	r2, [r3, #0]
  4012ec:	f042 0201 	orr.w	r2, r2, #1
  4012f0:	601a      	str	r2, [r3, #0]

	//set fixed peripheral select(peripheral chosen in SP_MR.PCS instead of SPI_THR.PCS)
	REG_SPI_MR &= ~SPI_MR_PS;
  4012f2:	681a      	ldr	r2, [r3, #0]
  4012f4:	f022 0202 	bic.w	r2, r2, #2
  4012f8:	601a      	str	r2, [r3, #0]
	//REG_SPI_MR |= SPI_MR_PCS(0b1110);

	//set polarity and clock phase to rising edge sample, falling edge shift
	SPI_modeSelect(0);
  4012fa:	2000      	movs	r0, #0
  4012fc:	4b0e      	ldr	r3, [pc, #56]	; (401338 <SPI_led_init+0x5c>)
  4012fe:	4798      	blx	r3

	//set clock generator (1 = peripheral clock rate), otherwise a divisor
	//SCBR = fperipheral clock / SPCK Bit Rate
	REG_SPI_CSR |= SPI_CSR_SCBR(5);
  401300:	4a0e      	ldr	r2, [pc, #56]	; (40133c <SPI_led_init+0x60>)
  401302:	6813      	ldr	r3, [r2, #0]
  401304:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
  401308:	6013      	str	r3, [r2, #0]

	//chip select remains low after transfer
	//REG_SPI_CSR |= SPI_CSR_CSNAAT;

	//give peripheral control of pins 
	REG_PIOA_PDR |= PIO_PDR_P11; //NPCS0
  40130a:	4b0d      	ldr	r3, [pc, #52]	; (401340 <SPI_led_init+0x64>)
  40130c:	681a      	ldr	r2, [r3, #0]
  40130e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
  401312:	601a      	str	r2, [r3, #0]
	REG_PIOA_PDR |= PIO_PDR_P13; //MOSI
  401314:	681a      	ldr	r2, [r3, #0]
  401316:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  40131a:	601a      	str	r2, [r3, #0]
	REG_PIOA_PDR |= PIO_PDR_P14; //SSCK
  40131c:	681a      	ldr	r2, [r3, #0]
  40131e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
  401322:	601a      	str	r2, [r3, #0]

	//enable SPI
	REG_SPI_CR |= SPI_CR_SPIEN;
  401324:	4a07      	ldr	r2, [pc, #28]	; (401344 <SPI_led_init+0x68>)
  401326:	6813      	ldr	r3, [r2, #0]
  401328:	f043 0301 	orr.w	r3, r3, #1
  40132c:	6013      	str	r3, [r2, #0]
  40132e:	bd08      	pop	{r3, pc}
  401330:	400e0410 	.word	0x400e0410
  401334:	40008004 	.word	0x40008004
  401338:	00401279 	.word	0x00401279
  40133c:	40008030 	.word	0x40008030
  401340:	400e0e04 	.word	0x400e0e04
  401344:	40008000 	.word	0x40008000

00401348 <SPI_dac_init>:


}

void SPI_dac_init(){
  401348:	b508      	push	{r3, lr}

	REG_PIOB_PER |= PIO_PER_P13; //enable PIO controller on PB14
  40134a:	4a1c      	ldr	r2, [pc, #112]	; (4013bc <SPI_dac_init+0x74>)
  40134c:	6813      	ldr	r3, [r2, #0]
  40134e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  401352:	6013      	str	r3, [r2, #0]
	REG_PIOB_OER |= PIO_PER_P13; //enable output on pin PB14
  401354:	3210      	adds	r2, #16
  401356:	6813      	ldr	r3, [r2, #0]
  401358:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  40135c:	6013      	str	r3, [r2, #0]
	REG_PIOB_SODR |=  PIO_PER_P13;
  40135e:	3220      	adds	r2, #32
  401360:	6813      	ldr	r3, [r2, #0]
  401362:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  401366:	6013      	str	r3, [r2, #0]

	//enable peripheral clock
	REG_PMC_PCER0 |= PMC_PCER0_PID21;
  401368:	f5a2 6242 	sub.w	r2, r2, #3104	; 0xc20
  40136c:	6813      	ldr	r3, [r2, #0]
  40136e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
  401372:	6013      	str	r3, [r2, #0]

	//set spi master mode
	REG_SPI_MR |= SPI_MR_MSTR;
  401374:	4b12      	ldr	r3, [pc, #72]	; (4013c0 <SPI_dac_init+0x78>)
  401376:	681a      	ldr	r2, [r3, #0]
  401378:	f042 0201 	orr.w	r2, r2, #1
  40137c:	601a      	str	r2, [r3, #0]

	//set fixed peripheral select(peripheral chosen in SP_MR.PCS instead of SPI_THR.PCS)
	REG_SPI_MR &= ~SPI_MR_PS;
  40137e:	681a      	ldr	r2, [r3, #0]
  401380:	f022 0202 	bic.w	r2, r2, #2
  401384:	601a      	str	r2, [r3, #0]
	//REG_SPI_MR |= SPI_MR_PCS(0b1101);

	//set polarity and clock phase to rising edge sample, falling edge shift
	SPI_modeSelect(0);
  401386:	2000      	movs	r0, #0
  401388:	4b0e      	ldr	r3, [pc, #56]	; (4013c4 <SPI_dac_init+0x7c>)
  40138a:	4798      	blx	r3

	//set clock generator (1 = peripheral clock rate), otherwise a divisor
	//SCBR = fperipheral clock / SPCK Bit Rate
	REG_SPI_CSR |= SPI_CSR_SCBR(20);
  40138c:	4a0e      	ldr	r2, [pc, #56]	; (4013c8 <SPI_dac_init+0x80>)
  40138e:	6813      	ldr	r3, [r2, #0]
  401390:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
  401394:	6013      	str	r3, [r2, #0]

	//chip select remains low after transfer
	//REG_SPI_CSR |= SPI_CSR_CSNAAT;

	//give peripheral control of pins
	REG_PIOA_PDR |= PIO_PDR_P11; //NPCS1
  401396:	4b0d      	ldr	r3, [pc, #52]	; (4013cc <SPI_dac_init+0x84>)
  401398:	681a      	ldr	r2, [r3, #0]
  40139a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
  40139e:	601a      	str	r2, [r3, #0]
	REG_PIOA_PDR |= PIO_PDR_P13; //MOSI
  4013a0:	681a      	ldr	r2, [r3, #0]
  4013a2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  4013a6:	601a      	str	r2, [r3, #0]
	REG_PIOA_PDR |= PIO_PDR_P14; //SSCK
  4013a8:	681a      	ldr	r2, [r3, #0]
  4013aa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
  4013ae:	601a      	str	r2, [r3, #0]

	//enable SPI
	REG_SPI_CR |= SPI_CR_SPIEN;
  4013b0:	4a07      	ldr	r2, [pc, #28]	; (4013d0 <SPI_dac_init+0x88>)
  4013b2:	6813      	ldr	r3, [r2, #0]
  4013b4:	f043 0301 	orr.w	r3, r3, #1
  4013b8:	6013      	str	r3, [r2, #0]
  4013ba:	bd08      	pop	{r3, pc}
  4013bc:	400e1000 	.word	0x400e1000
  4013c0:	40008004 	.word	0x40008004
  4013c4:	00401279 	.word	0x00401279
  4013c8:	40008030 	.word	0x40008030
  4013cc:	400e0e04 	.word	0x400e0e04
  4013d0:	40008000 	.word	0x40008000

004013d4 <SPI_byteSend>:

}

void SPI_byteSend(uint8_t data){
	//wait for transmit register to be empty
	while (!(REG_SPI_SR & SPI_SR_TDRE));
  4013d4:	4a04      	ldr	r2, [pc, #16]	; (4013e8 <SPI_byteSend+0x14>)
  4013d6:	6813      	ldr	r3, [r2, #0]
  4013d8:	f013 0f02 	tst.w	r3, #2
  4013dc:	d0fb      	beq.n	4013d6 <SPI_byteSend+0x2>
	//send data to transmit register
	REG_SPI_TDR |= (data);
  4013de:	4a03      	ldr	r2, [pc, #12]	; (4013ec <SPI_byteSend+0x18>)
  4013e0:	6813      	ldr	r3, [r2, #0]
  4013e2:	4318      	orrs	r0, r3
  4013e4:	6010      	str	r0, [r2, #0]
  4013e6:	4770      	bx	lr
  4013e8:	40008010 	.word	0x40008010
  4013ec:	4000800c 	.word	0x4000800c

004013f0 <notes_get>:



 float notes_get(uint8_t curr_step){
	return notes[curr_step];
 }
  4013f0:	4b01      	ldr	r3, [pc, #4]	; (4013f8 <notes_get+0x8>)
  4013f2:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
  4013f6:	4770      	bx	lr
  4013f8:	2000004c 	.word	0x2000004c

004013fc <timers_init>:
 #include "dac.h"
 #include "notes.h"

 void timers_init(void) {

	overflow_count = 0;
  4013fc:	2300      	movs	r3, #0
  4013fe:	4a18      	ldr	r2, [pc, #96]	; (401460 <timers_init+0x64>)
  401400:	8013      	strh	r3, [r2, #0]
	curr_step = 0;
  401402:	4a18      	ldr	r2, [pc, #96]	; (401464 <timers_init+0x68>)
  401404:	7013      	strb	r3, [r2, #0]
  401406:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  40140a:	4b17      	ldr	r3, [pc, #92]	; (401468 <timers_init+0x6c>)
  40140c:	601a      	str	r2, [r3, #0]

	NVIC_EnableIRQ(TC0_IRQn);

	// Enable peripheral clock for TC0
	// Peripheral ID (PID) for TC0 is 23
	REG_PMC_PCER0 |= PMC_PCER0_PID23;
  40140e:	4a17      	ldr	r2, [pc, #92]	; (40146c <timers_init+0x70>)
  401410:	6813      	ldr	r3, [r2, #0]
  401412:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
  401416:	6013      	str	r3, [r2, #0]
	// TIMER_CLOCK1 = MCK/2
	// TIMER_CLOCK2 = MCK/8
	// TIMER_CLOCK3 = MCK/32
	// TIMER_CLOCK4 = MCK/128
	// TIMER_CLOCK5 = SCLK
	REG_TC0_CMR0 |= TC_CMR_TCCLKS_TIMER_CLOCK2 | TC_CMR_CPCTRG;
  401418:	4915      	ldr	r1, [pc, #84]	; (401470 <timers_init+0x74>)
  40141a:	680b      	ldr	r3, [r1, #0]
  40141c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  401420:	f043 0301 	orr.w	r3, r3, #1
  401424:	600b      	str	r3, [r1, #0]
	// Set interrupt on compare to RC value
	REG_TC0_IER0 |= TC_IER_CPCS;
  401426:	3120      	adds	r1, #32
  401428:	680b      	ldr	r3, [r1, #0]
  40142a:	f043 0310 	orr.w	r3, r3, #16
  40142e:	600b      	str	r3, [r1, #0]
// 	// 60 BPM = 1 Hz. SCK = 32 KHz. 16,000 counts per half second, 2 interrupts per cycle
// 	REG_TC0_RC0 = 16000;

	// 60 BPM = 1 Hz. MCK/8 = 12.5 MHz. 6.25 mil counts per half second, 2 interrupts per cycle
	// Anticipating 5000 overflows (5000*1250 is 6.25 mil)
	REG_TC0_RC0 = 1250;
  401430:	f240 41e2 	movw	r1, #1250	; 0x4e2
  401434:	4b0f      	ldr	r3, [pc, #60]	; (401474 <timers_init+0x78>)
  401436:	6019      	str	r1, [r3, #0]

	// For the interrupt
	REG_PIOA_PER |= PIO_PER_P20; //enable PIO controller on PA11
  401438:	490f      	ldr	r1, [pc, #60]	; (401478 <timers_init+0x7c>)
  40143a:	680b      	ldr	r3, [r1, #0]
  40143c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  401440:	600b      	str	r3, [r1, #0]
	REG_PIOA_OER |= PIO_PER_P20; //enable output on pin PA11
  401442:	3110      	adds	r1, #16
  401444:	680b      	ldr	r3, [r1, #0]
  401446:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  40144a:	600b      	str	r3, [r1, #0]
	REG_PMC_PCER0 |= PMC_PCER0_PID11; //Enable PMC control for PA11
  40144c:	6813      	ldr	r3, [r2, #0]
  40144e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  401452:	6013      	str	r3, [r2, #0]

	// TC0 control register enables timer and triggers it to start
	REG_TC0_CCR0 |= TC_CCR_CLKEN | TC_CCR_SWTRG;
  401454:	4a09      	ldr	r2, [pc, #36]	; (40147c <timers_init+0x80>)
  401456:	6813      	ldr	r3, [r2, #0]
  401458:	f043 0305 	orr.w	r3, r3, #5
  40145c:	6013      	str	r3, [r2, #0]
  40145e:	4770      	bx	lr
  401460:	20000546 	.word	0x20000546
  401464:	20000548 	.word	0x20000548
  401468:	e000e100 	.word	0xe000e100
  40146c:	400e0410 	.word	0x400e0410
  401470:	40010004 	.word	0x40010004
  401474:	4001001c 	.word	0x4001001c
  401478:	400e0e00 	.word	0x400e0e00
  40147c:	40010000 	.word	0x40010000

00401480 <update_timers>:

 void update_timers(int bpm) {
// 	// (SCK/2) / (bpm/60); SCK*60/2 = 960000
// 	// Offset is needed, possible not with the crystals working
// 	REG_TC0_RC0 = (uint16_t)(960000/bpm - 420);
	if(bpm > 1) {
  401480:	2801      	cmp	r0, #1
  401482:	dd05      	ble.n	401490 <update_timers+0x10>
		REG_TC0_RC0 = (uint16_t)(75000/bpm);
  401484:	4b03      	ldr	r3, [pc, #12]	; (401494 <update_timers+0x14>)
  401486:	fb93 f0f0 	sdiv	r0, r3, r0
  40148a:	b280      	uxth	r0, r0
  40148c:	4b02      	ldr	r3, [pc, #8]	; (401498 <update_timers+0x18>)
  40148e:	6018      	str	r0, [r3, #0]
  401490:	4770      	bx	lr
  401492:	bf00      	nop
  401494:	000124f8 	.word	0x000124f8
  401498:	4001001c 	.word	0x4001001c

0040149c <TC0_Handler>:
	}
 }

 void TC0_Handler() {
  40149c:	b510      	push	{r4, lr}
	 // Handling timer = RC

	 // Test code, normally trigger next step, output clock
	 if((REG_TC0_SR0 & TC_SR_CPCS) >= 0) {
  40149e:	4b1a      	ldr	r3, [pc, #104]	; (401508 <TC0_Handler+0x6c>)
  4014a0:	681b      	ldr	r3, [r3, #0]
		overflow_count += 1;
  4014a2:	4a1a      	ldr	r2, [pc, #104]	; (40150c <TC0_Handler+0x70>)
  4014a4:	8813      	ldrh	r3, [r2, #0]
  4014a6:	3301      	adds	r3, #1
  4014a8:	b29b      	uxth	r3, r3
  4014aa:	8013      	strh	r3, [r2, #0]

		//base this off a ADC pot results
		if (overflow_count == 5000){
  4014ac:	f241 3288 	movw	r2, #5000	; 0x1388
  4014b0:	4293      	cmp	r3, r2
  4014b2:	d101      	bne.n	4014b8 <TC0_Handler+0x1c>
			DAC_write_gate_off();
  4014b4:	4b16      	ldr	r3, [pc, #88]	; (401510 <TC0_Handler+0x74>)
  4014b6:	4798      	blx	r3
		}
	 }

	 if(overflow_count >= 10000) {
  4014b8:	4b14      	ldr	r3, [pc, #80]	; (40150c <TC0_Handler+0x70>)
  4014ba:	881a      	ldrh	r2, [r3, #0]
  4014bc:	f242 730f 	movw	r3, #9999	; 0x270f
  4014c0:	429a      	cmp	r2, r3
  4014c2:	d91f      	bls.n	401504 <TC0_Handler+0x68>

		SPI_led_init();
  4014c4:	4b13      	ldr	r3, [pc, #76]	; (401514 <TC0_Handler+0x78>)
  4014c6:	4798      	blx	r3
		leds_update_cursor(curr_step);
  4014c8:	4c13      	ldr	r4, [pc, #76]	; (401518 <TC0_Handler+0x7c>)
  4014ca:	7820      	ldrb	r0, [r4, #0]
  4014cc:	4b13      	ldr	r3, [pc, #76]	; (40151c <TC0_Handler+0x80>)
  4014ce:	4798      	blx	r3

 		DAC_write_cv(notes_get(curr_step));
  4014d0:	7820      	ldrb	r0, [r4, #0]
  4014d2:	4b13      	ldr	r3, [pc, #76]	; (401520 <TC0_Handler+0x84>)
  4014d4:	4798      	blx	r3
  4014d6:	4b13      	ldr	r3, [pc, #76]	; (401524 <TC0_Handler+0x88>)
  4014d8:	4798      	blx	r3
		if (leds_status_get(curr_step) == 1){
  4014da:	7820      	ldrb	r0, [r4, #0]
  4014dc:	4b12      	ldr	r3, [pc, #72]	; (401528 <TC0_Handler+0x8c>)
  4014de:	4798      	blx	r3
  4014e0:	2801      	cmp	r0, #1
  4014e2:	d101      	bne.n	4014e8 <TC0_Handler+0x4c>
			DAC_write_gate_on();
  4014e4:	4b11      	ldr	r3, [pc, #68]	; (40152c <TC0_Handler+0x90>)
  4014e6:	4798      	blx	r3
		}
		

		if (curr_step == 15){
  4014e8:	4b0b      	ldr	r3, [pc, #44]	; (401518 <TC0_Handler+0x7c>)
  4014ea:	781b      	ldrb	r3, [r3, #0]
  4014ec:	2b0f      	cmp	r3, #15
  4014ee:	d103      	bne.n	4014f8 <TC0_Handler+0x5c>
			curr_step = 0;
  4014f0:	2200      	movs	r2, #0
  4014f2:	4b09      	ldr	r3, [pc, #36]	; (401518 <TC0_Handler+0x7c>)
  4014f4:	701a      	strb	r2, [r3, #0]
  4014f6:	e002      	b.n	4014fe <TC0_Handler+0x62>
		}
		else{
			curr_step++;
  4014f8:	3301      	adds	r3, #1
  4014fa:	4a07      	ldr	r2, [pc, #28]	; (401518 <TC0_Handler+0x7c>)
  4014fc:	7013      	strb	r3, [r2, #0]
		}

		overflow_count = 0;
  4014fe:	2200      	movs	r2, #0
  401500:	4b02      	ldr	r3, [pc, #8]	; (40150c <TC0_Handler+0x70>)
  401502:	801a      	strh	r2, [r3, #0]
  401504:	bd10      	pop	{r4, pc}
  401506:	bf00      	nop
  401508:	40010020 	.word	0x40010020
  40150c:	20000546 	.word	0x20000546
  401510:	00400335 	.word	0x00400335
  401514:	004012dd 	.word	0x004012dd
  401518:	20000548 	.word	0x20000548
  40151c:	00401051 	.word	0x00401051
  401520:	004013f1 	.word	0x004013f1
  401524:	00400269 	.word	0x00400269
  401528:	00400c81 	.word	0x00400c81
  40152c:	004002f5 	.word	0x004002f5

00401530 <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
  401530:	4770      	bx	lr
  401532:	bf00      	nop

00401534 <sysclk_init>:

	SystemCoreClockUpdate();
}

void sysclk_init(void)
{
  401534:	b510      	push	{r4, lr}
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  401536:	480e      	ldr	r0, [pc, #56]	; (401570 <sysclk_init+0x3c>)
  401538:	4b0e      	ldr	r3, [pc, #56]	; (401574 <sysclk_init+0x40>)
  40153a:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
		break;

	case OSC_MAINCK_8M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
  40153c:	2010      	movs	r0, #16
  40153e:	4b0e      	ldr	r3, [pc, #56]	; (401578 <sysclk_init+0x44>)
  401540:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  401542:	4c0e      	ldr	r4, [pc, #56]	; (40157c <sysclk_init+0x48>)
  401544:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  401546:	2800      	cmp	r0, #0
  401548:	d0fc      	beq.n	401544 <sysclk_init+0x10>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  40154a:	4b0d      	ldr	r3, [pc, #52]	; (401580 <sysclk_init+0x4c>)
  40154c:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  40154e:	4a0d      	ldr	r2, [pc, #52]	; (401584 <sysclk_init+0x50>)
  401550:	4b0d      	ldr	r3, [pc, #52]	; (401588 <sysclk_init+0x54>)
  401552:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
  401554:	4c0d      	ldr	r4, [pc, #52]	; (40158c <sysclk_init+0x58>)
  401556:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  401558:	2800      	cmp	r0, #0
  40155a:	d0fc      	beq.n	401556 <sysclk_init+0x22>

		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  40155c:	2010      	movs	r0, #16
  40155e:	4b0c      	ldr	r3, [pc, #48]	; (401590 <sysclk_init+0x5c>)
  401560:	4798      	blx	r3
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  401562:	4b0c      	ldr	r3, [pc, #48]	; (401594 <sysclk_init+0x60>)
  401564:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  401566:	4802      	ldr	r0, [pc, #8]	; (401570 <sysclk_init+0x3c>)
  401568:	4b02      	ldr	r3, [pc, #8]	; (401574 <sysclk_init+0x40>)
  40156a:	4798      	blx	r3
  40156c:	bd10      	pop	{r4, pc}
  40156e:	bf00      	nop
  401570:	05f5e100 	.word	0x05f5e100
  401574:	00401829 	.word	0x00401829
  401578:	00401601 	.word	0x00401601
  40157c:	0040164d 	.word	0x0040164d
  401580:	0040165d 	.word	0x0040165d
  401584:	20183f01 	.word	0x20183f01
  401588:	400e0400 	.word	0x400e0400
  40158c:	0040166d 	.word	0x0040166d
  401590:	00401599 	.word	0x00401599
  401594:	00401719 	.word	0x00401719

00401598 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  401598:	4a18      	ldr	r2, [pc, #96]	; (4015fc <pmc_switch_mck_to_pllack+0x64>)
  40159a:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40159c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  4015a0:	4318      	orrs	r0, r3
  4015a2:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4015a4:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4015a6:	f013 0f08 	tst.w	r3, #8
  4015aa:	d003      	beq.n	4015b4 <pmc_switch_mck_to_pllack+0x1c>
  4015ac:	e009      	b.n	4015c2 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4015ae:	3b01      	subs	r3, #1
  4015b0:	d103      	bne.n	4015ba <pmc_switch_mck_to_pllack+0x22>
  4015b2:	e01e      	b.n	4015f2 <pmc_switch_mck_to_pllack+0x5a>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4015b4:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4015b8:	4910      	ldr	r1, [pc, #64]	; (4015fc <pmc_switch_mck_to_pllack+0x64>)
  4015ba:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4015bc:	f012 0f08 	tst.w	r2, #8
  4015c0:	d0f5      	beq.n	4015ae <pmc_switch_mck_to_pllack+0x16>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  4015c2:	4a0e      	ldr	r2, [pc, #56]	; (4015fc <pmc_switch_mck_to_pllack+0x64>)
  4015c4:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4015c6:	f023 0303 	bic.w	r3, r3, #3
  4015ca:	f043 0302 	orr.w	r3, r3, #2
  4015ce:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4015d0:	6e90      	ldr	r0, [r2, #104]	; 0x68
  4015d2:	f010 0008 	ands.w	r0, r0, #8
  4015d6:	d004      	beq.n	4015e2 <pmc_switch_mck_to_pllack+0x4a>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
  4015d8:	2000      	movs	r0, #0
  4015da:	4770      	bx	lr
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
  4015dc:	3b01      	subs	r3, #1
  4015de:	d103      	bne.n	4015e8 <pmc_switch_mck_to_pllack+0x50>
  4015e0:	e009      	b.n	4015f6 <pmc_switch_mck_to_pllack+0x5e>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4015e2:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4015e6:	4905      	ldr	r1, [pc, #20]	; (4015fc <pmc_switch_mck_to_pllack+0x64>)
  4015e8:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4015ea:	f012 0f08 	tst.w	r2, #8
  4015ee:	d0f5      	beq.n	4015dc <pmc_switch_mck_to_pllack+0x44>
  4015f0:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  4015f2:	2001      	movs	r0, #1
  4015f4:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  4015f6:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  4015f8:	4770      	bx	lr
  4015fa:	bf00      	nop
  4015fc:	400e0400 	.word	0x400e0400

00401600 <pmc_switch_mainck_to_fastrc>:
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
  401600:	4b11      	ldr	r3, [pc, #68]	; (401648 <pmc_switch_mainck_to_fastrc+0x48>)
  401602:	6a1a      	ldr	r2, [r3, #32]
  401604:	f442 125c 	orr.w	r2, r2, #3604480	; 0x370000
  401608:	f042 0208 	orr.w	r2, r2, #8
  40160c:	621a      	str	r2, [r3, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  40160e:	461a      	mov	r2, r3
  401610:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401612:	f413 3f00 	tst.w	r3, #131072	; 0x20000
  401616:	d0fb      	beq.n	401610 <pmc_switch_mainck_to_fastrc+0x10>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  401618:	4a0b      	ldr	r2, [pc, #44]	; (401648 <pmc_switch_mainck_to_fastrc+0x48>)
  40161a:	6a13      	ldr	r3, [r2, #32]
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
  40161c:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  401620:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  401624:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  401628:	4303      	orrs	r3, r0

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  40162a:	6213      	str	r3, [r2, #32]
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  40162c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40162e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
  401632:	d0fb      	beq.n	40162c <pmc_switch_mainck_to_fastrc+0x2c>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  401634:	4a04      	ldr	r2, [pc, #16]	; (401648 <pmc_switch_mainck_to_fastrc+0x48>)
  401636:	6a13      	ldr	r3, [r2, #32]
  401638:	f023 739b 	bic.w	r3, r3, #20316160	; 0x1360000
  40163c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  401640:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  401644:	6213      	str	r3, [r2, #32]
  401646:	4770      	bx	lr
  401648:	400e0400 	.word	0x400e0400

0040164c <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  40164c:	4b02      	ldr	r3, [pc, #8]	; (401658 <pmc_osc_is_ready_mainck+0xc>)
  40164e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  401650:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  401654:	4770      	bx	lr
  401656:	bf00      	nop
  401658:	400e0400 	.word	0x400e0400

0040165c <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  40165c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  401660:	4b01      	ldr	r3, [pc, #4]	; (401668 <pmc_disable_pllack+0xc>)
  401662:	629a      	str	r2, [r3, #40]	; 0x28
  401664:	4770      	bx	lr
  401666:	bf00      	nop
  401668:	400e0400 	.word	0x400e0400

0040166c <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  40166c:	4b02      	ldr	r3, [pc, #8]	; (401678 <pmc_is_locked_pllack+0xc>)
  40166e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  401670:	f000 0002 	and.w	r0, r0, #2
  401674:	4770      	bx	lr
  401676:	bf00      	nop
  401678:	400e0400 	.word	0x400e0400

0040167c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  40167c:	e7fe      	b.n	40167c <Dummy_Handler>
  40167e:	bf00      	nop

00401680 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  401680:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
  401682:	4b19      	ldr	r3, [pc, #100]	; (4016e8 <Reset_Handler+0x68>)
  401684:	4a19      	ldr	r2, [pc, #100]	; (4016ec <Reset_Handler+0x6c>)
  401686:	429a      	cmp	r2, r3
  401688:	d003      	beq.n	401692 <Reset_Handler+0x12>
		for (; pDest < &_erelocate;) {
  40168a:	4b19      	ldr	r3, [pc, #100]	; (4016f0 <Reset_Handler+0x70>)
  40168c:	4a16      	ldr	r2, [pc, #88]	; (4016e8 <Reset_Handler+0x68>)
  40168e:	429a      	cmp	r2, r3
  401690:	d304      	bcc.n	40169c <Reset_Handler+0x1c>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  401692:	4b18      	ldr	r3, [pc, #96]	; (4016f4 <Reset_Handler+0x74>)
  401694:	4a18      	ldr	r2, [pc, #96]	; (4016f8 <Reset_Handler+0x78>)
  401696:	429a      	cmp	r2, r3
  401698:	d30f      	bcc.n	4016ba <Reset_Handler+0x3a>
  40169a:	e01a      	b.n	4016d2 <Reset_Handler+0x52>
  40169c:	4912      	ldr	r1, [pc, #72]	; (4016e8 <Reset_Handler+0x68>)
  40169e:	4b17      	ldr	r3, [pc, #92]	; (4016fc <Reset_Handler+0x7c>)
  4016a0:	1a5b      	subs	r3, r3, r1
  4016a2:	f023 0303 	bic.w	r3, r3, #3
  4016a6:	3304      	adds	r3, #4
  4016a8:	4a10      	ldr	r2, [pc, #64]	; (4016ec <Reset_Handler+0x6c>)
  4016aa:	4413      	add	r3, r2
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
			*pDest++ = *pSrc++;
  4016ac:	f852 0b04 	ldr.w	r0, [r2], #4
  4016b0:	f841 0b04 	str.w	r0, [r1], #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
  4016b4:	429a      	cmp	r2, r3
  4016b6:	d1f9      	bne.n	4016ac <Reset_Handler+0x2c>
  4016b8:	e7eb      	b.n	401692 <Reset_Handler+0x12>
  4016ba:	4b11      	ldr	r3, [pc, #68]	; (401700 <Reset_Handler+0x80>)
  4016bc:	4a11      	ldr	r2, [pc, #68]	; (401704 <Reset_Handler+0x84>)
  4016be:	1ad2      	subs	r2, r2, r3
  4016c0:	f022 0203 	bic.w	r2, r2, #3
  4016c4:	441a      	add	r2, r3
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  4016c6:	3b04      	subs	r3, #4
		*pDest++ = 0;
  4016c8:	2100      	movs	r1, #0
  4016ca:	f843 1b04 	str.w	r1, [r3], #4
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  4016ce:	4293      	cmp	r3, r2
  4016d0:	d1fb      	bne.n	4016ca <Reset_Handler+0x4a>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  4016d2:	4a0d      	ldr	r2, [pc, #52]	; (401708 <Reset_Handler+0x88>)
  4016d4:	4b0d      	ldr	r3, [pc, #52]	; (40170c <Reset_Handler+0x8c>)
  4016d6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  4016da:	6093      	str	r3, [r2, #8]

	/* Initialize the C library */
	__libc_init_array();
  4016dc:	4b0c      	ldr	r3, [pc, #48]	; (401710 <Reset_Handler+0x90>)
  4016de:	4798      	blx	r3

	/* Branch to main function */
	main();
  4016e0:	4b0c      	ldr	r3, [pc, #48]	; (401714 <Reset_Handler+0x94>)
  4016e2:	4798      	blx	r3
  4016e4:	e7fe      	b.n	4016e4 <Reset_Handler+0x64>
  4016e6:	bf00      	nop
  4016e8:	20000000 	.word	0x20000000
  4016ec:	00402780 	.word	0x00402780
  4016f0:	200004c0 	.word	0x200004c0
  4016f4:	2000054c 	.word	0x2000054c
  4016f8:	200004c0 	.word	0x200004c0
  4016fc:	200004bf 	.word	0x200004bf
  401700:	200004c4 	.word	0x200004c4
  401704:	2000054f 	.word	0x2000054f
  401708:	e000ed00 	.word	0xe000ed00
  40170c:	00400000 	.word	0x00400000
  401710:	00402611 	.word	0x00402611
  401714:	00401a09 	.word	0x00401a09

00401718 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) {
  401718:	4b3c      	ldr	r3, [pc, #240]	; (40180c <SystemCoreClockUpdate+0xf4>)
  40171a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40171c:	f003 0303 	and.w	r3, r3, #3
  401720:	2b01      	cmp	r3, #1
  401722:	d00f      	beq.n	401744 <SystemCoreClockUpdate+0x2c>
  401724:	b113      	cbz	r3, 40172c <SystemCoreClockUpdate+0x14>
  401726:	2b02      	cmp	r3, #2
  401728:	d029      	beq.n	40177e <SystemCoreClockUpdate+0x66>
  40172a:	e057      	b.n	4017dc <SystemCoreClockUpdate+0xc4>
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
  40172c:	4b38      	ldr	r3, [pc, #224]	; (401810 <SystemCoreClockUpdate+0xf8>)
  40172e:	695b      	ldr	r3, [r3, #20]
  401730:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
  401734:	bf14      	ite	ne
  401736:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
  40173a:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  40173e:	4b35      	ldr	r3, [pc, #212]	; (401814 <SystemCoreClockUpdate+0xfc>)
  401740:	601a      	str	r2, [r3, #0]
  401742:	e04b      	b.n	4017dc <SystemCoreClockUpdate+0xc4>
		}
		break;

	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
  401744:	4b31      	ldr	r3, [pc, #196]	; (40180c <SystemCoreClockUpdate+0xf4>)
  401746:	6a1b      	ldr	r3, [r3, #32]
  401748:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  40174c:	d003      	beq.n	401756 <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
  40174e:	4a32      	ldr	r2, [pc, #200]	; (401818 <SystemCoreClockUpdate+0x100>)
  401750:	4b30      	ldr	r3, [pc, #192]	; (401814 <SystemCoreClockUpdate+0xfc>)
  401752:	601a      	str	r2, [r3, #0]
  401754:	e042      	b.n	4017dc <SystemCoreClockUpdate+0xc4>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401756:	4a31      	ldr	r2, [pc, #196]	; (40181c <SystemCoreClockUpdate+0x104>)
  401758:	4b2e      	ldr	r3, [pc, #184]	; (401814 <SystemCoreClockUpdate+0xfc>)
  40175a:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
  40175c:	4b2b      	ldr	r3, [pc, #172]	; (40180c <SystemCoreClockUpdate+0xf4>)
  40175e:	6a1b      	ldr	r3, [r3, #32]
  401760:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401764:	2b10      	cmp	r3, #16
  401766:	d002      	beq.n	40176e <SystemCoreClockUpdate+0x56>
  401768:	2b20      	cmp	r3, #32
  40176a:	d004      	beq.n	401776 <SystemCoreClockUpdate+0x5e>
  40176c:	e036      	b.n	4017dc <SystemCoreClockUpdate+0xc4>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;

			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
  40176e:	4a2c      	ldr	r2, [pc, #176]	; (401820 <SystemCoreClockUpdate+0x108>)
  401770:	4b28      	ldr	r3, [pc, #160]	; (401814 <SystemCoreClockUpdate+0xfc>)
  401772:	601a      	str	r2, [r3, #0]
				break;
  401774:	e032      	b.n	4017dc <SystemCoreClockUpdate+0xc4>

			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
  401776:	4a28      	ldr	r2, [pc, #160]	; (401818 <SystemCoreClockUpdate+0x100>)
  401778:	4b26      	ldr	r3, [pc, #152]	; (401814 <SystemCoreClockUpdate+0xfc>)
  40177a:	601a      	str	r2, [r3, #0]
				break;
  40177c:	e02e      	b.n	4017dc <SystemCoreClockUpdate+0xc4>
			}
		}
		break;

	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
  40177e:	4b23      	ldr	r3, [pc, #140]	; (40180c <SystemCoreClockUpdate+0xf4>)
  401780:	6a1b      	ldr	r3, [r3, #32]
  401782:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  401786:	d003      	beq.n	401790 <SystemCoreClockUpdate+0x78>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
  401788:	4a23      	ldr	r2, [pc, #140]	; (401818 <SystemCoreClockUpdate+0x100>)
  40178a:	4b22      	ldr	r3, [pc, #136]	; (401814 <SystemCoreClockUpdate+0xfc>)
  40178c:	601a      	str	r2, [r3, #0]
  40178e:	e012      	b.n	4017b6 <SystemCoreClockUpdate+0x9e>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401790:	4a22      	ldr	r2, [pc, #136]	; (40181c <SystemCoreClockUpdate+0x104>)
  401792:	4b20      	ldr	r3, [pc, #128]	; (401814 <SystemCoreClockUpdate+0xfc>)
  401794:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
  401796:	4b1d      	ldr	r3, [pc, #116]	; (40180c <SystemCoreClockUpdate+0xf4>)
  401798:	6a1b      	ldr	r3, [r3, #32]
  40179a:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40179e:	2b10      	cmp	r3, #16
  4017a0:	d002      	beq.n	4017a8 <SystemCoreClockUpdate+0x90>
  4017a2:	2b20      	cmp	r3, #32
  4017a4:	d004      	beq.n	4017b0 <SystemCoreClockUpdate+0x98>
  4017a6:	e006      	b.n	4017b6 <SystemCoreClockUpdate+0x9e>
				/* So the 4MHz RC selection is forbidden */
				Assert(false);
				break;

			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
  4017a8:	4a1d      	ldr	r2, [pc, #116]	; (401820 <SystemCoreClockUpdate+0x108>)
  4017aa:	4b1a      	ldr	r3, [pc, #104]	; (401814 <SystemCoreClockUpdate+0xfc>)
  4017ac:	601a      	str	r2, [r3, #0]
				break;
  4017ae:	e002      	b.n	4017b6 <SystemCoreClockUpdate+0x9e>

			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
  4017b0:	4a19      	ldr	r2, [pc, #100]	; (401818 <SystemCoreClockUpdate+0x100>)
  4017b2:	4b18      	ldr	r3, [pc, #96]	; (401814 <SystemCoreClockUpdate+0xfc>)
  4017b4:	601a      	str	r2, [r3, #0]
			default:
				break;
			}
		}

		if ((uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
  4017b6:	4b15      	ldr	r3, [pc, #84]	; (40180c <SystemCoreClockUpdate+0xf4>)
  4017b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4017ba:	f003 0303 	and.w	r3, r3, #3
  4017be:	2b02      	cmp	r3, #2
  4017c0:	d10c      	bne.n	4017dc <SystemCoreClockUpdate+0xc4>
				PMC_MCKR_CSS_PLLA_CLK) {
			SystemCoreClock *=
					((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  4017c2:	4a12      	ldr	r2, [pc, #72]	; (40180c <SystemCoreClockUpdate+0xf4>)
  4017c4:	6a93      	ldr	r3, [r2, #40]	; 0x28
					>> CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  4017c6:	6a92      	ldr	r2, [r2, #40]	; 0x28
  4017c8:	4812      	ldr	r0, [pc, #72]	; (401814 <SystemCoreClockUpdate+0xfc>)
  4017ca:	f3c3 410a 	ubfx	r1, r3, #16, #11
  4017ce:	6803      	ldr	r3, [r0, #0]
  4017d0:	fb01 3303 	mla	r3, r1, r3, r3
  4017d4:	b2d2      	uxtb	r2, r2
  4017d6:	fbb3 f3f2 	udiv	r3, r3, r2
  4017da:	6003      	str	r3, [r0, #0]

	default:
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
  4017dc:	4b0b      	ldr	r3, [pc, #44]	; (40180c <SystemCoreClockUpdate+0xf4>)
  4017de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4017e0:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4017e4:	2b70      	cmp	r3, #112	; 0x70
  4017e6:	d107      	bne.n	4017f8 <SystemCoreClockUpdate+0xe0>
		SystemCoreClock /= 3U;
  4017e8:	4a0a      	ldr	r2, [pc, #40]	; (401814 <SystemCoreClockUpdate+0xfc>)
  4017ea:	6813      	ldr	r3, [r2, #0]
  4017ec:	490d      	ldr	r1, [pc, #52]	; (401824 <SystemCoreClockUpdate+0x10c>)
  4017ee:	fba1 1303 	umull	r1, r3, r1, r3
  4017f2:	085b      	lsrs	r3, r3, #1
  4017f4:	6013      	str	r3, [r2, #0]
  4017f6:	4770      	bx	lr
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >>
  4017f8:	4b04      	ldr	r3, [pc, #16]	; (40180c <SystemCoreClockUpdate+0xf4>)
  4017fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4017fc:	4905      	ldr	r1, [pc, #20]	; (401814 <SystemCoreClockUpdate+0xfc>)
  4017fe:	f3c3 1202 	ubfx	r2, r3, #4, #3
  401802:	680b      	ldr	r3, [r1, #0]
  401804:	40d3      	lsrs	r3, r2
  401806:	600b      	str	r3, [r1, #0]
  401808:	4770      	bx	lr
  40180a:	bf00      	nop
  40180c:	400e0400 	.word	0x400e0400
  401810:	400e1410 	.word	0x400e1410
  401814:	20000090 	.word	0x20000090
  401818:	00b71b00 	.word	0x00b71b00
  40181c:	003d0900 	.word	0x003d0900
  401820:	007a1200 	.word	0x007a1200
  401824:	aaaaaaab 	.word	0xaaaaaaab

00401828 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
  401828:	4b0f      	ldr	r3, [pc, #60]	; (401868 <system_init_flash+0x40>)
  40182a:	4298      	cmp	r0, r3
  40182c:	d804      	bhi.n	401838 <system_init_flash+0x10>
		EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  40182e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  401832:	4b0e      	ldr	r3, [pc, #56]	; (40186c <system_init_flash+0x44>)
  401834:	601a      	str	r2, [r3, #0]
  401836:	4770      	bx	lr
	} else {
		if (ul_clk < CHIP_FREQ_FWS_1) {
  401838:	4b0d      	ldr	r3, [pc, #52]	; (401870 <system_init_flash+0x48>)
  40183a:	4298      	cmp	r0, r3
  40183c:	d803      	bhi.n	401846 <system_init_flash+0x1e>
			EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  40183e:	4a0d      	ldr	r2, [pc, #52]	; (401874 <system_init_flash+0x4c>)
  401840:	4b0a      	ldr	r3, [pc, #40]	; (40186c <system_init_flash+0x44>)
  401842:	601a      	str	r2, [r3, #0]
  401844:	4770      	bx	lr
		} else {
			if (ul_clk < CHIP_FREQ_FWS_2) {
  401846:	4b0c      	ldr	r3, [pc, #48]	; (401878 <system_init_flash+0x50>)
  401848:	4298      	cmp	r0, r3
  40184a:	d803      	bhi.n	401854 <system_init_flash+0x2c>
				EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  40184c:	4a0b      	ldr	r2, [pc, #44]	; (40187c <system_init_flash+0x54>)
  40184e:	4b07      	ldr	r3, [pc, #28]	; (40186c <system_init_flash+0x44>)
  401850:	601a      	str	r2, [r3, #0]
  401852:	4770      	bx	lr
			} else {
				if (ul_clk < CHIP_FREQ_FWS_3) {
  401854:	4b0a      	ldr	r3, [pc, #40]	; (401880 <system_init_flash+0x58>)
  401856:	4298      	cmp	r0, r3
					EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  401858:	bf94      	ite	ls
  40185a:	4a0a      	ldrls	r2, [pc, #40]	; (401884 <system_init_flash+0x5c>)
				} else {
					EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  40185c:	f04f 2204 	movhi.w	r2, #67109888	; 0x4000400
  401860:	4b02      	ldr	r3, [pc, #8]	; (40186c <system_init_flash+0x44>)
  401862:	601a      	str	r2, [r3, #0]
  401864:	4770      	bx	lr
  401866:	bf00      	nop
  401868:	01312cff 	.word	0x01312cff
  40186c:	400e0a00 	.word	0x400e0a00
  401870:	026259ff 	.word	0x026259ff
  401874:	04000100 	.word	0x04000100
  401878:	039386ff 	.word	0x039386ff
  40187c:	04000200 	.word	0x04000200
  401880:	04c4b3ff 	.word	0x04c4b3ff
  401884:	04000300 	.word	0x04000300

00401888 <init_IO_int>:
 #define MAX7314_slaveAddress (uint8_t) 0b0100000 //7bit address when AD0 = GND

 void init_IO_int(){

	//enable clock for PIOB
	REG_PMC_PCER0 |= PMC_PCER0_PID12;
  401888:	4a1a      	ldr	r2, [pc, #104]	; (4018f4 <init_IO_int+0x6c>)
  40188a:	6813      	ldr	r3, [r2, #0]
  40188c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  401890:	6013      	str	r3, [r2, #0]

	//Set up PB10 as Button IO Expander Input
	REG_PIOB_PER |= PIO_PER_P10; //enable PIO controller
  401892:	f502 623f 	add.w	r2, r2, #3056	; 0xbf0
  401896:	6813      	ldr	r3, [r2, #0]
  401898:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
  40189c:	6013      	str	r3, [r2, #0]
	REG_PIOB_ODR |= PIO_ODR_P10; //disable output
  40189e:	3214      	adds	r2, #20
  4018a0:	6813      	ldr	r3, [r2, #0]
  4018a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
  4018a6:	6013      	str	r3, [r2, #0]
	REG_PIOB_PPDDR |= PIO_PPDDR_P10; //disable pull-down resistor
  4018a8:	327c      	adds	r2, #124	; 0x7c
  4018aa:	6813      	ldr	r3, [r2, #0]
  4018ac:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
  4018b0:	6013      	str	r3, [r2, #0]
	REG_PIOB_PUER |= PIO_PUER_P10;	//enable pull-up resistor
  4018b2:	3a2c      	subs	r2, #44	; 0x2c
  4018b4:	6813      	ldr	r3, [r2, #0]
  4018b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
  4018ba:	6013      	str	r3, [r2, #0]
	REG_PIOB_IFSCER |= PIO_IFSCER_P10; //turn on slow clock debounce
  4018bc:	3220      	adds	r2, #32
  4018be:	6813      	ldr	r3, [r2, #0]
  4018c0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
  4018c4:	6013      	str	r3, [r2, #0]
	REG_PIOB_IFER |= PIO_IFER_P10;	//start debounce filter
  4018c6:	3a64      	subs	r2, #100	; 0x64
  4018c8:	6813      	ldr	r3, [r2, #0]
  4018ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
  4018ce:	6013      	str	r3, [r2, #0]

	uint32_t flag_clear = REG_PIOB_ISR;	//clear left over interrupt flags
  4018d0:	4b09      	ldr	r3, [pc, #36]	; (4018f8 <init_IO_int+0x70>)
  4018d2:	681b      	ldr	r3, [r3, #0]

	//Enable interrupts for PB10
	REG_PIOB_IER |= PIO_IER_P10;			//enable falling edge change interrupt
  4018d4:	3220      	adds	r2, #32
  4018d6:	6813      	ldr	r3, [r2, #0]
  4018d8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
  4018dc:	6013      	str	r3, [r2, #0]
	REG_PIOB_FELLSR |= PIO_FELLSR_P10;
  4018de:	3290      	adds	r2, #144	; 0x90
  4018e0:	6813      	ldr	r3, [r2, #0]
  4018e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
  4018e6:	6013      	str	r3, [r2, #0]
  4018e8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  4018ec:	4b03      	ldr	r3, [pc, #12]	; (4018fc <init_IO_int+0x74>)
  4018ee:	601a      	str	r2, [r3, #0]
  4018f0:	4770      	bx	lr
  4018f2:	bf00      	nop
  4018f4:	400e0410 	.word	0x400e0410
  4018f8:	400e104c 	.word	0x400e104c
  4018fc:	e000e100 	.word	0xe000e100

00401900 <i2c_init>:

 }

 void i2c_init(){

	REG_TWI0_CR = TWI_CR_SWRST;
  401900:	4b12      	ldr	r3, [pc, #72]	; (40194c <i2c_init+0x4c>)
  401902:	2280      	movs	r2, #128	; 0x80
  401904:	601a      	str	r2, [r3, #0]

	//enable peripheral clock for i2c using TWI0
	REG_PMC_PCER0 |= PMC_PCER0_PID19;
  401906:	4912      	ldr	r1, [pc, #72]	; (401950 <i2c_init+0x50>)
  401908:	680a      	ldr	r2, [r1, #0]
  40190a:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
  40190e:	600a      	str	r2, [r1, #0]

	//disable GPIO control of i2c pins
	REG_PIOA_PDR |= PIO_PDR_P3;
  401910:	4a10      	ldr	r2, [pc, #64]	; (401954 <i2c_init+0x54>)
  401912:	6811      	ldr	r1, [r2, #0]
  401914:	f041 0108 	orr.w	r1, r1, #8
  401918:	6011      	str	r1, [r2, #0]
	REG_PIOA_PDR |= PIO_PDR_P4;
  40191a:	6811      	ldr	r1, [r2, #0]
  40191c:	f041 0110 	orr.w	r1, r1, #16
  401920:	6011      	str	r1, [r2, #0]

	// tlow = ((CLDIV * 2^CKDIV) + 4) * Tper
	// thigh = ((CHDIV * 2^CKDIV) + 4) * Tper
	// thigh = tlow => 400kHz (supposedly...)
	//set TWI0 clock to 400kHz (supported by IO expander)
	REG_TWI0_CWGR |= TWI_CWGR_CLDIV(121);
  401922:	f5a2 2248 	sub.w	r2, r2, #819200	; 0xc8000
  401926:	f6a2 52f4 	subw	r2, r2, #3572	; 0xdf4
  40192a:	6811      	ldr	r1, [r2, #0]
  40192c:	f041 0179 	orr.w	r1, r1, #121	; 0x79
  401930:	6011      	str	r1, [r2, #0]
	REG_TWI0_CWGR |= TWI_CWGR_CHDIV(121);
  401932:	6811      	ldr	r1, [r2, #0]
  401934:	f441 41f2 	orr.w	r1, r1, #30976	; 0x7900
  401938:	6011      	str	r1, [r2, #0]

	//disable slave mode & enable master mode
	REG_TWI0_CR |= TWI_CR_SVDIS;
  40193a:	681a      	ldr	r2, [r3, #0]
  40193c:	f042 0220 	orr.w	r2, r2, #32
  401940:	601a      	str	r2, [r3, #0]
	REG_TWI0_CR |= TWI_CR_MSEN;
  401942:	681a      	ldr	r2, [r3, #0]
  401944:	f042 0204 	orr.w	r2, r2, #4
  401948:	601a      	str	r2, [r3, #0]
  40194a:	4770      	bx	lr
  40194c:	40018000 	.word	0x40018000
  401950:	400e0410 	.word	0x400e0410
  401954:	400e0e04 	.word	0x400e0e04

00401958 <config_MAX7314>:
		
	 }

 }

 void config_MAX7314(){
  401958:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40195c:	b088      	sub	sp, #32
	twi_packet_t packet_tx;
	uint8_t config_data[] = {MAX7314_configRegister, 0x08};
  40195e:	4c14      	ldr	r4, [pc, #80]	; (4019b0 <config_MAX7314+0x58>)
  401960:	8823      	ldrh	r3, [r4, #0]
  401962:	f8ad 3008 	strh.w	r3, [sp, #8]

	/* Configure the Chip Config Register */
	packet_tx.chip        = 0b0100000;
  401966:	f04f 0820 	mov.w	r8, #32
  40196a:	f88d 801c 	strb.w	r8, [sp, #28]
	packet_tx.addr_length = 0;
  40196e:	2700      	movs	r7, #0
  401970:	9704      	str	r7, [sp, #16]
	packet_tx.buffer      = (uint8_t *) config_data;
  401972:	ab02      	add	r3, sp, #8
  401974:	9305      	str	r3, [sp, #20]
	packet_tx.length      = 2;
  401976:	2302      	movs	r3, #2
  401978:	9306      	str	r3, [sp, #24]
	twi_master_write(BOARD_BASE_TWI, &packet_tx);
  40197a:	4e0e      	ldr	r6, [pc, #56]	; (4019b4 <config_MAX7314+0x5c>)
  40197c:	a903      	add	r1, sp, #12
  40197e:	4630      	mov	r0, r6
  401980:	4d0d      	ldr	r5, [pc, #52]	; (4019b8 <config_MAX7314+0x60>)
  401982:	47a8      	blx	r5


	uint8_t port_data[] = {MAX7314_portConfigRegisterLow, 0xFF, 0xFF};
  401984:	aa01      	add	r2, sp, #4
  401986:	4623      	mov	r3, r4
  401988:	f833 1f04 	ldrh.w	r1, [r3, #4]!
  40198c:	789b      	ldrb	r3, [r3, #2]
  40198e:	f8ad 1004 	strh.w	r1, [sp, #4]
  401992:	f88d 3006 	strb.w	r3, [sp, #6]

	/* Configure the Chip Ports as Inputs */
	packet_tx.chip        = 0b0100000;
  401996:	f88d 801c 	strb.w	r8, [sp, #28]
	packet_tx.addr_length = 0;
  40199a:	9704      	str	r7, [sp, #16]
	packet_tx.buffer      = (uint8_t *) port_data;
  40199c:	9205      	str	r2, [sp, #20]
	packet_tx.length      = 3;
  40199e:	2303      	movs	r3, #3
  4019a0:	9306      	str	r3, [sp, #24]
	twi_master_write(BOARD_BASE_TWI, &packet_tx);
  4019a2:	a903      	add	r1, sp, #12
  4019a4:	4630      	mov	r0, r6
  4019a6:	47a8      	blx	r5
 }
  4019a8:	b008      	add	sp, #32
  4019aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4019ae:	bf00      	nop
  4019b0:	0040274c 	.word	0x0040274c
  4019b4:	40018000 	.word	0x40018000
  4019b8:	004001fd 	.word	0x004001fd

004019bc <read_MAX7314>:

 void read_MAX7314(uint8_t *data){
  4019bc:	b5f0      	push	{r4, r5, r6, r7, lr}
  4019be:	b08d      	sub	sp, #52	; 0x34
  4019c0:	4607      	mov	r7, r0
	/* Data Packets for tx/rx */
	twi_packet_t packet_rx, packet_tx;
	uint8_t port_addr[] = {MAX7314_inputPortLow};
  4019c2:	2400      	movs	r4, #0
  4019c4:	f88d 4004 	strb.w	r4, [sp, #4]

	
	/* Write the command byte address to be the Low byte of the Input Port */
	packet_tx.chip        = 0b0100000;
  4019c8:	2620      	movs	r6, #32
  4019ca:	f88d 6018 	strb.w	r6, [sp, #24]
	packet_tx.addr_length = 0;
  4019ce:	9403      	str	r4, [sp, #12]
	packet_tx.buffer      = (uint8_t *) port_addr;
  4019d0:	ab01      	add	r3, sp, #4
  4019d2:	9304      	str	r3, [sp, #16]
	packet_tx.length      = 1;
  4019d4:	2301      	movs	r3, #1
  4019d6:	9305      	str	r3, [sp, #20]
	twi_master_write(BOARD_BASE_TWI, &packet_tx);
  4019d8:	4d08      	ldr	r5, [pc, #32]	; (4019fc <read_MAX7314+0x40>)
  4019da:	a902      	add	r1, sp, #8
  4019dc:	4628      	mov	r0, r5
  4019de:	4b08      	ldr	r3, [pc, #32]	; (401a00 <read_MAX7314+0x44>)
  4019e0:	4798      	blx	r3


	/* Read Data from the Low and High Input Ports */
	packet_rx.chip        = 0b0100000;
  4019e2:	f88d 602c 	strb.w	r6, [sp, #44]	; 0x2c
	packet_rx.addr_length = 0;
  4019e6:	9408      	str	r4, [sp, #32]
	packet_rx.buffer      = data;
  4019e8:	9709      	str	r7, [sp, #36]	; 0x24
	packet_rx.length      = 2;
  4019ea:	2302      	movs	r3, #2
  4019ec:	930a      	str	r3, [sp, #40]	; 0x28
	twi_master_read(BOARD_BASE_TWI, &packet_rx);
  4019ee:	a907      	add	r1, sp, #28
  4019f0:	4628      	mov	r0, r5
  4019f2:	4b04      	ldr	r3, [pc, #16]	; (401a04 <read_MAX7314+0x48>)
  4019f4:	4798      	blx	r3


  4019f6:	b00d      	add	sp, #52	; 0x34
  4019f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4019fa:	bf00      	nop
  4019fc:	40018000 	.word	0x40018000
  401a00:	004001fd 	.word	0x004001fd
  401a04:	0040011d 	.word	0x0040011d

00401a08 <main>:

void config_MAX7314();
void read_MAX7314(uint8_t *port_data);

int main (void)
{
  401a08:	b508      	push	{r3, lr}
	sysclk_init();				//initialize system clock
  401a0a:	4b16      	ldr	r3, [pc, #88]	; (401a64 <main+0x5c>)
  401a0c:	4798      	blx	r3
	WDT->WDT_MR = WDT_MR_WDDIS; //disable watchdog timer
  401a0e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  401a12:	4b15      	ldr	r3, [pc, #84]	; (401a68 <main+0x60>)
  401a14:	605a      	str	r2, [r3, #4]

	board_init();				//board init (currently empty)
  401a16:	4b15      	ldr	r3, [pc, #84]	; (401a6c <main+0x64>)
  401a18:	4798      	blx	r3

	SPI_led_init();
  401a1a:	4b15      	ldr	r3, [pc, #84]	; (401a70 <main+0x68>)
  401a1c:	4798      	blx	r3
	leds_update_display();
  401a1e:	4b15      	ldr	r3, [pc, #84]	; (401a74 <main+0x6c>)
  401a20:	4798      	blx	r3

	timers_init();				//initiate timer for Flashing LED on PA20
  401a22:	4b15      	ldr	r3, [pc, #84]	; (401a78 <main+0x70>)
  401a24:	4798      	blx	r3
	update_timers(bpm);
  401a26:	4b15      	ldr	r3, [pc, #84]	; (401a7c <main+0x74>)
  401a28:	8818      	ldrh	r0, [r3, #0]
  401a2a:	4b15      	ldr	r3, [pc, #84]	; (401a80 <main+0x78>)
  401a2c:	4798      	blx	r3

	REG_PIOB_PER |= PIO_PER_P3; //enable PIO controller on PB3
  401a2e:	4a15      	ldr	r2, [pc, #84]	; (401a84 <main+0x7c>)
  401a30:	6813      	ldr	r3, [r2, #0]
  401a32:	f043 0308 	orr.w	r3, r3, #8
  401a36:	6013      	str	r3, [r2, #0]
	REG_PIOB_OER |= PIO_PER_P3; //enable output on pin PB3
  401a38:	3210      	adds	r2, #16
  401a3a:	6813      	ldr	r3, [r2, #0]
  401a3c:	f043 0308 	orr.w	r3, r3, #8
  401a40:	6013      	str	r3, [r2, #0]
	REG_PIOB_SODR |= PIO_PER_P3; //set output high on PB3 as default
  401a42:	3220      	adds	r2, #32
  401a44:	6813      	ldr	r3, [r2, #0]
  401a46:	f043 0308 	orr.w	r3, r3, #8
  401a4a:	6013      	str	r3, [r2, #0]
	Encoder_init();				//initialize encoders
  401a4c:	4b0e      	ldr	r3, [pc, #56]	; (401a88 <main+0x80>)
  401a4e:	4798      	blx	r3

	i2c_init();
  401a50:	4b0e      	ldr	r3, [pc, #56]	; (401a8c <main+0x84>)
  401a52:	4798      	blx	r3
	init_IO_int();
  401a54:	4b0e      	ldr	r3, [pc, #56]	; (401a90 <main+0x88>)
  401a56:	4798      	blx	r3
	config_MAX7314();
  401a58:	4b0e      	ldr	r3, [pc, #56]	; (401a94 <main+0x8c>)
  401a5a:	4798      	blx	r3
	read_MAX7314(port_data);
  401a5c:	480e      	ldr	r0, [pc, #56]	; (401a98 <main+0x90>)
  401a5e:	4b0f      	ldr	r3, [pc, #60]	; (401a9c <main+0x94>)
  401a60:	4798      	blx	r3
  401a62:	e7fe      	b.n	401a62 <main+0x5a>
  401a64:	00401535 	.word	0x00401535
  401a68:	400e1450 	.word	0x400e1450
  401a6c:	00401531 	.word	0x00401531
  401a70:	004012dd 	.word	0x004012dd
  401a74:	00400c8d 	.word	0x00400c8d
  401a78:	004013fd 	.word	0x004013fd
  401a7c:	20000094 	.word	0x20000094
  401a80:	00401481 	.word	0x00401481
  401a84:	400e1000 	.word	0x400e1000
  401a88:	004003e9 	.word	0x004003e9
  401a8c:	00401901 	.word	0x00401901
  401a90:	00401889 	.word	0x00401889
  401a94:	00401959 	.word	0x00401959
  401a98:	20000540 	.word	0x20000540
  401a9c:	004019bd 	.word	0x004019bd

00401aa0 <PIOB_Handler>:
	}
}

 void PIOB_Handler(){

	 uint32_t status = REG_PIOB_ISR;	//read PIOB interrupt status & clear interrupt flags
  401aa0:	4b10      	ldr	r3, [pc, #64]	; (401ae4 <PIOB_Handler+0x44>)
  401aa2:	681b      	ldr	r3, [r3, #0]
 
	 //check if Io expander interrupt was driven
	 if (status & PIO_ISR_P10){
  401aa4:	f413 6f80 	tst.w	r3, #1024	; 0x400
  401aa8:	d01b      	beq.n	401ae2 <PIOB_Handler+0x42>
	while (1)
	{
	}
}

 void PIOB_Handler(){
  401aaa:	b510      	push	{r4, lr}

	 uint32_t status = REG_PIOB_ISR;	//read PIOB interrupt status & clear interrupt flags
 
	 //check if Io expander interrupt was driven
	 if (status & PIO_ISR_P10){
		read_MAX7314(temp_data);
  401aac:	4c0e      	ldr	r4, [pc, #56]	; (401ae8 <PIOB_Handler+0x48>)
  401aae:	4620      	mov	r0, r4
  401ab0:	4b0e      	ldr	r3, [pc, #56]	; (401aec <PIOB_Handler+0x4c>)
  401ab2:	4798      	blx	r3

		if  ( !((temp_data[0] = 127) && (temp_data[1] == 255)) ){
  401ab4:	237f      	movs	r3, #127	; 0x7f
  401ab6:	7023      	strb	r3, [r4, #0]
  401ab8:	7861      	ldrb	r1, [r4, #1]
  401aba:	29ff      	cmp	r1, #255	; 0xff
  401abc:	d010      	beq.n	401ae0 <PIOB_Handler+0x40>
			port_data[0] = temp_data[0];
  401abe:	4b0c      	ldr	r3, [pc, #48]	; (401af0 <PIOB_Handler+0x50>)
  401ac0:	227f      	movs	r2, #127	; 0x7f
  401ac2:	701a      	strb	r2, [r3, #0]
			port_data[1] = temp_data[1];
  401ac4:	7059      	strb	r1, [r3, #1]

			count++;
  401ac6:	4a0b      	ldr	r2, [pc, #44]	; (401af4 <PIOB_Handler+0x54>)
  401ac8:	7813      	ldrb	r3, [r2, #0]
  401aca:	3301      	adds	r3, #1
  401acc:	b2db      	uxtb	r3, r3
  401ace:	7013      	strb	r3, [r2, #0]
			if (count >= 2){
  401ad0:	2b01      	cmp	r3, #1
  401ad2:	d905      	bls.n	401ae0 <PIOB_Handler+0x40>
				led_toggle(port_data[0], port_data[1]);
  401ad4:	207f      	movs	r0, #127	; 0x7f
  401ad6:	4b08      	ldr	r3, [pc, #32]	; (401af8 <PIOB_Handler+0x58>)
  401ad8:	4798      	blx	r3
				count = 0;
  401ada:	2200      	movs	r2, #0
  401adc:	4b05      	ldr	r3, [pc, #20]	; (401af4 <PIOB_Handler+0x54>)
  401ade:	701a      	strb	r2, [r3, #0]
  401ae0:	bd10      	pop	{r4, pc}
  401ae2:	4770      	bx	lr
  401ae4:	400e104c 	.word	0x400e104c
  401ae8:	2000053c 	.word	0x2000053c
  401aec:	004019bd 	.word	0x004019bd
  401af0:	20000540 	.word	0x20000540
  401af4:	2000053e 	.word	0x2000053e
  401af8:	00400ef5 	.word	0x00400ef5

00401afc <__aeabi_drsub>:
  401afc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  401b00:	e002      	b.n	401b08 <__adddf3>
  401b02:	bf00      	nop

00401b04 <__aeabi_dsub>:
  401b04:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00401b08 <__adddf3>:
  401b08:	b530      	push	{r4, r5, lr}
  401b0a:	ea4f 0441 	mov.w	r4, r1, lsl #1
  401b0e:	ea4f 0543 	mov.w	r5, r3, lsl #1
  401b12:	ea94 0f05 	teq	r4, r5
  401b16:	bf08      	it	eq
  401b18:	ea90 0f02 	teqeq	r0, r2
  401b1c:	bf1f      	itttt	ne
  401b1e:	ea54 0c00 	orrsne.w	ip, r4, r0
  401b22:	ea55 0c02 	orrsne.w	ip, r5, r2
  401b26:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  401b2a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  401b2e:	f000 80e2 	beq.w	401cf6 <__adddf3+0x1ee>
  401b32:	ea4f 5454 	mov.w	r4, r4, lsr #21
  401b36:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  401b3a:	bfb8      	it	lt
  401b3c:	426d      	neglt	r5, r5
  401b3e:	dd0c      	ble.n	401b5a <__adddf3+0x52>
  401b40:	442c      	add	r4, r5
  401b42:	ea80 0202 	eor.w	r2, r0, r2
  401b46:	ea81 0303 	eor.w	r3, r1, r3
  401b4a:	ea82 0000 	eor.w	r0, r2, r0
  401b4e:	ea83 0101 	eor.w	r1, r3, r1
  401b52:	ea80 0202 	eor.w	r2, r0, r2
  401b56:	ea81 0303 	eor.w	r3, r1, r3
  401b5a:	2d36      	cmp	r5, #54	; 0x36
  401b5c:	bf88      	it	hi
  401b5e:	bd30      	pophi	{r4, r5, pc}
  401b60:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  401b64:	ea4f 3101 	mov.w	r1, r1, lsl #12
  401b68:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  401b6c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  401b70:	d002      	beq.n	401b78 <__adddf3+0x70>
  401b72:	4240      	negs	r0, r0
  401b74:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  401b78:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  401b7c:	ea4f 3303 	mov.w	r3, r3, lsl #12
  401b80:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  401b84:	d002      	beq.n	401b8c <__adddf3+0x84>
  401b86:	4252      	negs	r2, r2
  401b88:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  401b8c:	ea94 0f05 	teq	r4, r5
  401b90:	f000 80a7 	beq.w	401ce2 <__adddf3+0x1da>
  401b94:	f1a4 0401 	sub.w	r4, r4, #1
  401b98:	f1d5 0e20 	rsbs	lr, r5, #32
  401b9c:	db0d      	blt.n	401bba <__adddf3+0xb2>
  401b9e:	fa02 fc0e 	lsl.w	ip, r2, lr
  401ba2:	fa22 f205 	lsr.w	r2, r2, r5
  401ba6:	1880      	adds	r0, r0, r2
  401ba8:	f141 0100 	adc.w	r1, r1, #0
  401bac:	fa03 f20e 	lsl.w	r2, r3, lr
  401bb0:	1880      	adds	r0, r0, r2
  401bb2:	fa43 f305 	asr.w	r3, r3, r5
  401bb6:	4159      	adcs	r1, r3
  401bb8:	e00e      	b.n	401bd8 <__adddf3+0xd0>
  401bba:	f1a5 0520 	sub.w	r5, r5, #32
  401bbe:	f10e 0e20 	add.w	lr, lr, #32
  401bc2:	2a01      	cmp	r2, #1
  401bc4:	fa03 fc0e 	lsl.w	ip, r3, lr
  401bc8:	bf28      	it	cs
  401bca:	f04c 0c02 	orrcs.w	ip, ip, #2
  401bce:	fa43 f305 	asr.w	r3, r3, r5
  401bd2:	18c0      	adds	r0, r0, r3
  401bd4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  401bd8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  401bdc:	d507      	bpl.n	401bee <__adddf3+0xe6>
  401bde:	f04f 0e00 	mov.w	lr, #0
  401be2:	f1dc 0c00 	rsbs	ip, ip, #0
  401be6:	eb7e 0000 	sbcs.w	r0, lr, r0
  401bea:	eb6e 0101 	sbc.w	r1, lr, r1
  401bee:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  401bf2:	d31b      	bcc.n	401c2c <__adddf3+0x124>
  401bf4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  401bf8:	d30c      	bcc.n	401c14 <__adddf3+0x10c>
  401bfa:	0849      	lsrs	r1, r1, #1
  401bfc:	ea5f 0030 	movs.w	r0, r0, rrx
  401c00:	ea4f 0c3c 	mov.w	ip, ip, rrx
  401c04:	f104 0401 	add.w	r4, r4, #1
  401c08:	ea4f 5244 	mov.w	r2, r4, lsl #21
  401c0c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  401c10:	f080 809a 	bcs.w	401d48 <__adddf3+0x240>
  401c14:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  401c18:	bf08      	it	eq
  401c1a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  401c1e:	f150 0000 	adcs.w	r0, r0, #0
  401c22:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  401c26:	ea41 0105 	orr.w	r1, r1, r5
  401c2a:	bd30      	pop	{r4, r5, pc}
  401c2c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  401c30:	4140      	adcs	r0, r0
  401c32:	eb41 0101 	adc.w	r1, r1, r1
  401c36:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  401c3a:	f1a4 0401 	sub.w	r4, r4, #1
  401c3e:	d1e9      	bne.n	401c14 <__adddf3+0x10c>
  401c40:	f091 0f00 	teq	r1, #0
  401c44:	bf04      	itt	eq
  401c46:	4601      	moveq	r1, r0
  401c48:	2000      	moveq	r0, #0
  401c4a:	fab1 f381 	clz	r3, r1
  401c4e:	bf08      	it	eq
  401c50:	3320      	addeq	r3, #32
  401c52:	f1a3 030b 	sub.w	r3, r3, #11
  401c56:	f1b3 0220 	subs.w	r2, r3, #32
  401c5a:	da0c      	bge.n	401c76 <__adddf3+0x16e>
  401c5c:	320c      	adds	r2, #12
  401c5e:	dd08      	ble.n	401c72 <__adddf3+0x16a>
  401c60:	f102 0c14 	add.w	ip, r2, #20
  401c64:	f1c2 020c 	rsb	r2, r2, #12
  401c68:	fa01 f00c 	lsl.w	r0, r1, ip
  401c6c:	fa21 f102 	lsr.w	r1, r1, r2
  401c70:	e00c      	b.n	401c8c <__adddf3+0x184>
  401c72:	f102 0214 	add.w	r2, r2, #20
  401c76:	bfd8      	it	le
  401c78:	f1c2 0c20 	rsble	ip, r2, #32
  401c7c:	fa01 f102 	lsl.w	r1, r1, r2
  401c80:	fa20 fc0c 	lsr.w	ip, r0, ip
  401c84:	bfdc      	itt	le
  401c86:	ea41 010c 	orrle.w	r1, r1, ip
  401c8a:	4090      	lslle	r0, r2
  401c8c:	1ae4      	subs	r4, r4, r3
  401c8e:	bfa2      	ittt	ge
  401c90:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  401c94:	4329      	orrge	r1, r5
  401c96:	bd30      	popge	{r4, r5, pc}
  401c98:	ea6f 0404 	mvn.w	r4, r4
  401c9c:	3c1f      	subs	r4, #31
  401c9e:	da1c      	bge.n	401cda <__adddf3+0x1d2>
  401ca0:	340c      	adds	r4, #12
  401ca2:	dc0e      	bgt.n	401cc2 <__adddf3+0x1ba>
  401ca4:	f104 0414 	add.w	r4, r4, #20
  401ca8:	f1c4 0220 	rsb	r2, r4, #32
  401cac:	fa20 f004 	lsr.w	r0, r0, r4
  401cb0:	fa01 f302 	lsl.w	r3, r1, r2
  401cb4:	ea40 0003 	orr.w	r0, r0, r3
  401cb8:	fa21 f304 	lsr.w	r3, r1, r4
  401cbc:	ea45 0103 	orr.w	r1, r5, r3
  401cc0:	bd30      	pop	{r4, r5, pc}
  401cc2:	f1c4 040c 	rsb	r4, r4, #12
  401cc6:	f1c4 0220 	rsb	r2, r4, #32
  401cca:	fa20 f002 	lsr.w	r0, r0, r2
  401cce:	fa01 f304 	lsl.w	r3, r1, r4
  401cd2:	ea40 0003 	orr.w	r0, r0, r3
  401cd6:	4629      	mov	r1, r5
  401cd8:	bd30      	pop	{r4, r5, pc}
  401cda:	fa21 f004 	lsr.w	r0, r1, r4
  401cde:	4629      	mov	r1, r5
  401ce0:	bd30      	pop	{r4, r5, pc}
  401ce2:	f094 0f00 	teq	r4, #0
  401ce6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  401cea:	bf06      	itte	eq
  401cec:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  401cf0:	3401      	addeq	r4, #1
  401cf2:	3d01      	subne	r5, #1
  401cf4:	e74e      	b.n	401b94 <__adddf3+0x8c>
  401cf6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  401cfa:	bf18      	it	ne
  401cfc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  401d00:	d029      	beq.n	401d56 <__adddf3+0x24e>
  401d02:	ea94 0f05 	teq	r4, r5
  401d06:	bf08      	it	eq
  401d08:	ea90 0f02 	teqeq	r0, r2
  401d0c:	d005      	beq.n	401d1a <__adddf3+0x212>
  401d0e:	ea54 0c00 	orrs.w	ip, r4, r0
  401d12:	bf04      	itt	eq
  401d14:	4619      	moveq	r1, r3
  401d16:	4610      	moveq	r0, r2
  401d18:	bd30      	pop	{r4, r5, pc}
  401d1a:	ea91 0f03 	teq	r1, r3
  401d1e:	bf1e      	ittt	ne
  401d20:	2100      	movne	r1, #0
  401d22:	2000      	movne	r0, #0
  401d24:	bd30      	popne	{r4, r5, pc}
  401d26:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  401d2a:	d105      	bne.n	401d38 <__adddf3+0x230>
  401d2c:	0040      	lsls	r0, r0, #1
  401d2e:	4149      	adcs	r1, r1
  401d30:	bf28      	it	cs
  401d32:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  401d36:	bd30      	pop	{r4, r5, pc}
  401d38:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  401d3c:	bf3c      	itt	cc
  401d3e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  401d42:	bd30      	popcc	{r4, r5, pc}
  401d44:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  401d48:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  401d4c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  401d50:	f04f 0000 	mov.w	r0, #0
  401d54:	bd30      	pop	{r4, r5, pc}
  401d56:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  401d5a:	bf1a      	itte	ne
  401d5c:	4619      	movne	r1, r3
  401d5e:	4610      	movne	r0, r2
  401d60:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  401d64:	bf1c      	itt	ne
  401d66:	460b      	movne	r3, r1
  401d68:	4602      	movne	r2, r0
  401d6a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  401d6e:	bf06      	itte	eq
  401d70:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  401d74:	ea91 0f03 	teqeq	r1, r3
  401d78:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  401d7c:	bd30      	pop	{r4, r5, pc}
  401d7e:	bf00      	nop

00401d80 <__aeabi_ui2d>:
  401d80:	f090 0f00 	teq	r0, #0
  401d84:	bf04      	itt	eq
  401d86:	2100      	moveq	r1, #0
  401d88:	4770      	bxeq	lr
  401d8a:	b530      	push	{r4, r5, lr}
  401d8c:	f44f 6480 	mov.w	r4, #1024	; 0x400
  401d90:	f104 0432 	add.w	r4, r4, #50	; 0x32
  401d94:	f04f 0500 	mov.w	r5, #0
  401d98:	f04f 0100 	mov.w	r1, #0
  401d9c:	e750      	b.n	401c40 <__adddf3+0x138>
  401d9e:	bf00      	nop

00401da0 <__aeabi_i2d>:
  401da0:	f090 0f00 	teq	r0, #0
  401da4:	bf04      	itt	eq
  401da6:	2100      	moveq	r1, #0
  401da8:	4770      	bxeq	lr
  401daa:	b530      	push	{r4, r5, lr}
  401dac:	f44f 6480 	mov.w	r4, #1024	; 0x400
  401db0:	f104 0432 	add.w	r4, r4, #50	; 0x32
  401db4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  401db8:	bf48      	it	mi
  401dba:	4240      	negmi	r0, r0
  401dbc:	f04f 0100 	mov.w	r1, #0
  401dc0:	e73e      	b.n	401c40 <__adddf3+0x138>
  401dc2:	bf00      	nop

00401dc4 <__aeabi_f2d>:
  401dc4:	0042      	lsls	r2, r0, #1
  401dc6:	ea4f 01e2 	mov.w	r1, r2, asr #3
  401dca:	ea4f 0131 	mov.w	r1, r1, rrx
  401dce:	ea4f 7002 	mov.w	r0, r2, lsl #28
  401dd2:	bf1f      	itttt	ne
  401dd4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  401dd8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  401ddc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  401de0:	4770      	bxne	lr
  401de2:	f092 0f00 	teq	r2, #0
  401de6:	bf14      	ite	ne
  401de8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  401dec:	4770      	bxeq	lr
  401dee:	b530      	push	{r4, r5, lr}
  401df0:	f44f 7460 	mov.w	r4, #896	; 0x380
  401df4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  401df8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  401dfc:	e720      	b.n	401c40 <__adddf3+0x138>
  401dfe:	bf00      	nop

00401e00 <__aeabi_ul2d>:
  401e00:	ea50 0201 	orrs.w	r2, r0, r1
  401e04:	bf08      	it	eq
  401e06:	4770      	bxeq	lr
  401e08:	b530      	push	{r4, r5, lr}
  401e0a:	f04f 0500 	mov.w	r5, #0
  401e0e:	e00a      	b.n	401e26 <__aeabi_l2d+0x16>

00401e10 <__aeabi_l2d>:
  401e10:	ea50 0201 	orrs.w	r2, r0, r1
  401e14:	bf08      	it	eq
  401e16:	4770      	bxeq	lr
  401e18:	b530      	push	{r4, r5, lr}
  401e1a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  401e1e:	d502      	bpl.n	401e26 <__aeabi_l2d+0x16>
  401e20:	4240      	negs	r0, r0
  401e22:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  401e26:	f44f 6480 	mov.w	r4, #1024	; 0x400
  401e2a:	f104 0432 	add.w	r4, r4, #50	; 0x32
  401e2e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  401e32:	f43f aedc 	beq.w	401bee <__adddf3+0xe6>
  401e36:	f04f 0203 	mov.w	r2, #3
  401e3a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  401e3e:	bf18      	it	ne
  401e40:	3203      	addne	r2, #3
  401e42:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  401e46:	bf18      	it	ne
  401e48:	3203      	addne	r2, #3
  401e4a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  401e4e:	f1c2 0320 	rsb	r3, r2, #32
  401e52:	fa00 fc03 	lsl.w	ip, r0, r3
  401e56:	fa20 f002 	lsr.w	r0, r0, r2
  401e5a:	fa01 fe03 	lsl.w	lr, r1, r3
  401e5e:	ea40 000e 	orr.w	r0, r0, lr
  401e62:	fa21 f102 	lsr.w	r1, r1, r2
  401e66:	4414      	add	r4, r2
  401e68:	e6c1      	b.n	401bee <__adddf3+0xe6>
  401e6a:	bf00      	nop

00401e6c <__aeabi_dmul>:
  401e6c:	b570      	push	{r4, r5, r6, lr}
  401e6e:	f04f 0cff 	mov.w	ip, #255	; 0xff
  401e72:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  401e76:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  401e7a:	bf1d      	ittte	ne
  401e7c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  401e80:	ea94 0f0c 	teqne	r4, ip
  401e84:	ea95 0f0c 	teqne	r5, ip
  401e88:	f000 f8de 	bleq	402048 <__aeabi_dmul+0x1dc>
  401e8c:	442c      	add	r4, r5
  401e8e:	ea81 0603 	eor.w	r6, r1, r3
  401e92:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  401e96:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  401e9a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  401e9e:	bf18      	it	ne
  401ea0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  401ea4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  401ea8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  401eac:	d038      	beq.n	401f20 <__aeabi_dmul+0xb4>
  401eae:	fba0 ce02 	umull	ip, lr, r0, r2
  401eb2:	f04f 0500 	mov.w	r5, #0
  401eb6:	fbe1 e502 	umlal	lr, r5, r1, r2
  401eba:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  401ebe:	fbe0 e503 	umlal	lr, r5, r0, r3
  401ec2:	f04f 0600 	mov.w	r6, #0
  401ec6:	fbe1 5603 	umlal	r5, r6, r1, r3
  401eca:	f09c 0f00 	teq	ip, #0
  401ece:	bf18      	it	ne
  401ed0:	f04e 0e01 	orrne.w	lr, lr, #1
  401ed4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  401ed8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  401edc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  401ee0:	d204      	bcs.n	401eec <__aeabi_dmul+0x80>
  401ee2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  401ee6:	416d      	adcs	r5, r5
  401ee8:	eb46 0606 	adc.w	r6, r6, r6
  401eec:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  401ef0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  401ef4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  401ef8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  401efc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  401f00:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  401f04:	bf88      	it	hi
  401f06:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  401f0a:	d81e      	bhi.n	401f4a <__aeabi_dmul+0xde>
  401f0c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  401f10:	bf08      	it	eq
  401f12:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  401f16:	f150 0000 	adcs.w	r0, r0, #0
  401f1a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  401f1e:	bd70      	pop	{r4, r5, r6, pc}
  401f20:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  401f24:	ea46 0101 	orr.w	r1, r6, r1
  401f28:	ea40 0002 	orr.w	r0, r0, r2
  401f2c:	ea81 0103 	eor.w	r1, r1, r3
  401f30:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  401f34:	bfc2      	ittt	gt
  401f36:	ebd4 050c 	rsbsgt	r5, r4, ip
  401f3a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  401f3e:	bd70      	popgt	{r4, r5, r6, pc}
  401f40:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  401f44:	f04f 0e00 	mov.w	lr, #0
  401f48:	3c01      	subs	r4, #1
  401f4a:	f300 80ab 	bgt.w	4020a4 <__aeabi_dmul+0x238>
  401f4e:	f114 0f36 	cmn.w	r4, #54	; 0x36
  401f52:	bfde      	ittt	le
  401f54:	2000      	movle	r0, #0
  401f56:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  401f5a:	bd70      	pople	{r4, r5, r6, pc}
  401f5c:	f1c4 0400 	rsb	r4, r4, #0
  401f60:	3c20      	subs	r4, #32
  401f62:	da35      	bge.n	401fd0 <__aeabi_dmul+0x164>
  401f64:	340c      	adds	r4, #12
  401f66:	dc1b      	bgt.n	401fa0 <__aeabi_dmul+0x134>
  401f68:	f104 0414 	add.w	r4, r4, #20
  401f6c:	f1c4 0520 	rsb	r5, r4, #32
  401f70:	fa00 f305 	lsl.w	r3, r0, r5
  401f74:	fa20 f004 	lsr.w	r0, r0, r4
  401f78:	fa01 f205 	lsl.w	r2, r1, r5
  401f7c:	ea40 0002 	orr.w	r0, r0, r2
  401f80:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  401f84:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  401f88:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  401f8c:	fa21 f604 	lsr.w	r6, r1, r4
  401f90:	eb42 0106 	adc.w	r1, r2, r6
  401f94:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  401f98:	bf08      	it	eq
  401f9a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  401f9e:	bd70      	pop	{r4, r5, r6, pc}
  401fa0:	f1c4 040c 	rsb	r4, r4, #12
  401fa4:	f1c4 0520 	rsb	r5, r4, #32
  401fa8:	fa00 f304 	lsl.w	r3, r0, r4
  401fac:	fa20 f005 	lsr.w	r0, r0, r5
  401fb0:	fa01 f204 	lsl.w	r2, r1, r4
  401fb4:	ea40 0002 	orr.w	r0, r0, r2
  401fb8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  401fbc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  401fc0:	f141 0100 	adc.w	r1, r1, #0
  401fc4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  401fc8:	bf08      	it	eq
  401fca:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  401fce:	bd70      	pop	{r4, r5, r6, pc}
  401fd0:	f1c4 0520 	rsb	r5, r4, #32
  401fd4:	fa00 f205 	lsl.w	r2, r0, r5
  401fd8:	ea4e 0e02 	orr.w	lr, lr, r2
  401fdc:	fa20 f304 	lsr.w	r3, r0, r4
  401fe0:	fa01 f205 	lsl.w	r2, r1, r5
  401fe4:	ea43 0302 	orr.w	r3, r3, r2
  401fe8:	fa21 f004 	lsr.w	r0, r1, r4
  401fec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  401ff0:	fa21 f204 	lsr.w	r2, r1, r4
  401ff4:	ea20 0002 	bic.w	r0, r0, r2
  401ff8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  401ffc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  402000:	bf08      	it	eq
  402002:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  402006:	bd70      	pop	{r4, r5, r6, pc}
  402008:	f094 0f00 	teq	r4, #0
  40200c:	d10f      	bne.n	40202e <__aeabi_dmul+0x1c2>
  40200e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  402012:	0040      	lsls	r0, r0, #1
  402014:	eb41 0101 	adc.w	r1, r1, r1
  402018:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40201c:	bf08      	it	eq
  40201e:	3c01      	subeq	r4, #1
  402020:	d0f7      	beq.n	402012 <__aeabi_dmul+0x1a6>
  402022:	ea41 0106 	orr.w	r1, r1, r6
  402026:	f095 0f00 	teq	r5, #0
  40202a:	bf18      	it	ne
  40202c:	4770      	bxne	lr
  40202e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  402032:	0052      	lsls	r2, r2, #1
  402034:	eb43 0303 	adc.w	r3, r3, r3
  402038:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  40203c:	bf08      	it	eq
  40203e:	3d01      	subeq	r5, #1
  402040:	d0f7      	beq.n	402032 <__aeabi_dmul+0x1c6>
  402042:	ea43 0306 	orr.w	r3, r3, r6
  402046:	4770      	bx	lr
  402048:	ea94 0f0c 	teq	r4, ip
  40204c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  402050:	bf18      	it	ne
  402052:	ea95 0f0c 	teqne	r5, ip
  402056:	d00c      	beq.n	402072 <__aeabi_dmul+0x206>
  402058:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40205c:	bf18      	it	ne
  40205e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  402062:	d1d1      	bne.n	402008 <__aeabi_dmul+0x19c>
  402064:	ea81 0103 	eor.w	r1, r1, r3
  402068:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40206c:	f04f 0000 	mov.w	r0, #0
  402070:	bd70      	pop	{r4, r5, r6, pc}
  402072:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  402076:	bf06      	itte	eq
  402078:	4610      	moveq	r0, r2
  40207a:	4619      	moveq	r1, r3
  40207c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  402080:	d019      	beq.n	4020b6 <__aeabi_dmul+0x24a>
  402082:	ea94 0f0c 	teq	r4, ip
  402086:	d102      	bne.n	40208e <__aeabi_dmul+0x222>
  402088:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  40208c:	d113      	bne.n	4020b6 <__aeabi_dmul+0x24a>
  40208e:	ea95 0f0c 	teq	r5, ip
  402092:	d105      	bne.n	4020a0 <__aeabi_dmul+0x234>
  402094:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  402098:	bf1c      	itt	ne
  40209a:	4610      	movne	r0, r2
  40209c:	4619      	movne	r1, r3
  40209e:	d10a      	bne.n	4020b6 <__aeabi_dmul+0x24a>
  4020a0:	ea81 0103 	eor.w	r1, r1, r3
  4020a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4020a8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  4020ac:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  4020b0:	f04f 0000 	mov.w	r0, #0
  4020b4:	bd70      	pop	{r4, r5, r6, pc}
  4020b6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  4020ba:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  4020be:	bd70      	pop	{r4, r5, r6, pc}

004020c0 <__aeabi_ddiv>:
  4020c0:	b570      	push	{r4, r5, r6, lr}
  4020c2:	f04f 0cff 	mov.w	ip, #255	; 0xff
  4020c6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  4020ca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  4020ce:	bf1d      	ittte	ne
  4020d0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  4020d4:	ea94 0f0c 	teqne	r4, ip
  4020d8:	ea95 0f0c 	teqne	r5, ip
  4020dc:	f000 f8a7 	bleq	40222e <__aeabi_ddiv+0x16e>
  4020e0:	eba4 0405 	sub.w	r4, r4, r5
  4020e4:	ea81 0e03 	eor.w	lr, r1, r3
  4020e8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  4020ec:	ea4f 3101 	mov.w	r1, r1, lsl #12
  4020f0:	f000 8088 	beq.w	402204 <__aeabi_ddiv+0x144>
  4020f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
  4020f8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  4020fc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  402100:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  402104:	ea4f 2202 	mov.w	r2, r2, lsl #8
  402108:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  40210c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  402110:	ea4f 2600 	mov.w	r6, r0, lsl #8
  402114:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  402118:	429d      	cmp	r5, r3
  40211a:	bf08      	it	eq
  40211c:	4296      	cmpeq	r6, r2
  40211e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  402122:	f504 7440 	add.w	r4, r4, #768	; 0x300
  402126:	d202      	bcs.n	40212e <__aeabi_ddiv+0x6e>
  402128:	085b      	lsrs	r3, r3, #1
  40212a:	ea4f 0232 	mov.w	r2, r2, rrx
  40212e:	1ab6      	subs	r6, r6, r2
  402130:	eb65 0503 	sbc.w	r5, r5, r3
  402134:	085b      	lsrs	r3, r3, #1
  402136:	ea4f 0232 	mov.w	r2, r2, rrx
  40213a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  40213e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  402142:	ebb6 0e02 	subs.w	lr, r6, r2
  402146:	eb75 0e03 	sbcs.w	lr, r5, r3
  40214a:	bf22      	ittt	cs
  40214c:	1ab6      	subcs	r6, r6, r2
  40214e:	4675      	movcs	r5, lr
  402150:	ea40 000c 	orrcs.w	r0, r0, ip
  402154:	085b      	lsrs	r3, r3, #1
  402156:	ea4f 0232 	mov.w	r2, r2, rrx
  40215a:	ebb6 0e02 	subs.w	lr, r6, r2
  40215e:	eb75 0e03 	sbcs.w	lr, r5, r3
  402162:	bf22      	ittt	cs
  402164:	1ab6      	subcs	r6, r6, r2
  402166:	4675      	movcs	r5, lr
  402168:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  40216c:	085b      	lsrs	r3, r3, #1
  40216e:	ea4f 0232 	mov.w	r2, r2, rrx
  402172:	ebb6 0e02 	subs.w	lr, r6, r2
  402176:	eb75 0e03 	sbcs.w	lr, r5, r3
  40217a:	bf22      	ittt	cs
  40217c:	1ab6      	subcs	r6, r6, r2
  40217e:	4675      	movcs	r5, lr
  402180:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  402184:	085b      	lsrs	r3, r3, #1
  402186:	ea4f 0232 	mov.w	r2, r2, rrx
  40218a:	ebb6 0e02 	subs.w	lr, r6, r2
  40218e:	eb75 0e03 	sbcs.w	lr, r5, r3
  402192:	bf22      	ittt	cs
  402194:	1ab6      	subcs	r6, r6, r2
  402196:	4675      	movcs	r5, lr
  402198:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  40219c:	ea55 0e06 	orrs.w	lr, r5, r6
  4021a0:	d018      	beq.n	4021d4 <__aeabi_ddiv+0x114>
  4021a2:	ea4f 1505 	mov.w	r5, r5, lsl #4
  4021a6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  4021aa:	ea4f 1606 	mov.w	r6, r6, lsl #4
  4021ae:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  4021b2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  4021b6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  4021ba:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  4021be:	d1c0      	bne.n	402142 <__aeabi_ddiv+0x82>
  4021c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4021c4:	d10b      	bne.n	4021de <__aeabi_ddiv+0x11e>
  4021c6:	ea41 0100 	orr.w	r1, r1, r0
  4021ca:	f04f 0000 	mov.w	r0, #0
  4021ce:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  4021d2:	e7b6      	b.n	402142 <__aeabi_ddiv+0x82>
  4021d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4021d8:	bf04      	itt	eq
  4021da:	4301      	orreq	r1, r0
  4021dc:	2000      	moveq	r0, #0
  4021de:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  4021e2:	bf88      	it	hi
  4021e4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  4021e8:	f63f aeaf 	bhi.w	401f4a <__aeabi_dmul+0xde>
  4021ec:	ebb5 0c03 	subs.w	ip, r5, r3
  4021f0:	bf04      	itt	eq
  4021f2:	ebb6 0c02 	subseq.w	ip, r6, r2
  4021f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  4021fa:	f150 0000 	adcs.w	r0, r0, #0
  4021fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  402202:	bd70      	pop	{r4, r5, r6, pc}
  402204:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  402208:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  40220c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  402210:	bfc2      	ittt	gt
  402212:	ebd4 050c 	rsbsgt	r5, r4, ip
  402216:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40221a:	bd70      	popgt	{r4, r5, r6, pc}
  40221c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  402220:	f04f 0e00 	mov.w	lr, #0
  402224:	3c01      	subs	r4, #1
  402226:	e690      	b.n	401f4a <__aeabi_dmul+0xde>
  402228:	ea45 0e06 	orr.w	lr, r5, r6
  40222c:	e68d      	b.n	401f4a <__aeabi_dmul+0xde>
  40222e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  402232:	ea94 0f0c 	teq	r4, ip
  402236:	bf08      	it	eq
  402238:	ea95 0f0c 	teqeq	r5, ip
  40223c:	f43f af3b 	beq.w	4020b6 <__aeabi_dmul+0x24a>
  402240:	ea94 0f0c 	teq	r4, ip
  402244:	d10a      	bne.n	40225c <__aeabi_ddiv+0x19c>
  402246:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  40224a:	f47f af34 	bne.w	4020b6 <__aeabi_dmul+0x24a>
  40224e:	ea95 0f0c 	teq	r5, ip
  402252:	f47f af25 	bne.w	4020a0 <__aeabi_dmul+0x234>
  402256:	4610      	mov	r0, r2
  402258:	4619      	mov	r1, r3
  40225a:	e72c      	b.n	4020b6 <__aeabi_dmul+0x24a>
  40225c:	ea95 0f0c 	teq	r5, ip
  402260:	d106      	bne.n	402270 <__aeabi_ddiv+0x1b0>
  402262:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  402266:	f43f aefd 	beq.w	402064 <__aeabi_dmul+0x1f8>
  40226a:	4610      	mov	r0, r2
  40226c:	4619      	mov	r1, r3
  40226e:	e722      	b.n	4020b6 <__aeabi_dmul+0x24a>
  402270:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  402274:	bf18      	it	ne
  402276:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40227a:	f47f aec5 	bne.w	402008 <__aeabi_dmul+0x19c>
  40227e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  402282:	f47f af0d 	bne.w	4020a0 <__aeabi_dmul+0x234>
  402286:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  40228a:	f47f aeeb 	bne.w	402064 <__aeabi_dmul+0x1f8>
  40228e:	e712      	b.n	4020b6 <__aeabi_dmul+0x24a>

00402290 <__aeabi_d2f>:
  402290:	ea4f 0241 	mov.w	r2, r1, lsl #1
  402294:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
  402298:	bf24      	itt	cs
  40229a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
  40229e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
  4022a2:	d90d      	bls.n	4022c0 <__aeabi_d2f+0x30>
  4022a4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  4022a8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
  4022ac:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
  4022b0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
  4022b4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
  4022b8:	bf08      	it	eq
  4022ba:	f020 0001 	biceq.w	r0, r0, #1
  4022be:	4770      	bx	lr
  4022c0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
  4022c4:	d121      	bne.n	40230a <__aeabi_d2f+0x7a>
  4022c6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
  4022ca:	bfbc      	itt	lt
  4022cc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
  4022d0:	4770      	bxlt	lr
  4022d2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4022d6:	ea4f 5252 	mov.w	r2, r2, lsr #21
  4022da:	f1c2 0218 	rsb	r2, r2, #24
  4022de:	f1c2 0c20 	rsb	ip, r2, #32
  4022e2:	fa10 f30c 	lsls.w	r3, r0, ip
  4022e6:	fa20 f002 	lsr.w	r0, r0, r2
  4022ea:	bf18      	it	ne
  4022ec:	f040 0001 	orrne.w	r0, r0, #1
  4022f0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  4022f4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
  4022f8:	fa03 fc0c 	lsl.w	ip, r3, ip
  4022fc:	ea40 000c 	orr.w	r0, r0, ip
  402300:	fa23 f302 	lsr.w	r3, r3, r2
  402304:	ea4f 0343 	mov.w	r3, r3, lsl #1
  402308:	e7cc      	b.n	4022a4 <__aeabi_d2f+0x14>
  40230a:	ea7f 5362 	mvns.w	r3, r2, asr #21
  40230e:	d107      	bne.n	402320 <__aeabi_d2f+0x90>
  402310:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
  402314:	bf1e      	ittt	ne
  402316:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
  40231a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
  40231e:	4770      	bxne	lr
  402320:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
  402324:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  402328:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  40232c:	4770      	bx	lr
  40232e:	bf00      	nop

00402330 <__aeabi_fmul>:
  402330:	f04f 0cff 	mov.w	ip, #255	; 0xff
  402334:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
  402338:	bf1e      	ittt	ne
  40233a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
  40233e:	ea92 0f0c 	teqne	r2, ip
  402342:	ea93 0f0c 	teqne	r3, ip
  402346:	d06f      	beq.n	402428 <__aeabi_fmul+0xf8>
  402348:	441a      	add	r2, r3
  40234a:	ea80 0c01 	eor.w	ip, r0, r1
  40234e:	0240      	lsls	r0, r0, #9
  402350:	bf18      	it	ne
  402352:	ea5f 2141 	movsne.w	r1, r1, lsl #9
  402356:	d01e      	beq.n	402396 <__aeabi_fmul+0x66>
  402358:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
  40235c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
  402360:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
  402364:	fba0 3101 	umull	r3, r1, r0, r1
  402368:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
  40236c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
  402370:	bf3e      	ittt	cc
  402372:	0049      	lslcc	r1, r1, #1
  402374:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
  402378:	005b      	lslcc	r3, r3, #1
  40237a:	ea40 0001 	orr.w	r0, r0, r1
  40237e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
  402382:	2afd      	cmp	r2, #253	; 0xfd
  402384:	d81d      	bhi.n	4023c2 <__aeabi_fmul+0x92>
  402386:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
  40238a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
  40238e:	bf08      	it	eq
  402390:	f020 0001 	biceq.w	r0, r0, #1
  402394:	4770      	bx	lr
  402396:	f090 0f00 	teq	r0, #0
  40239a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
  40239e:	bf08      	it	eq
  4023a0:	0249      	lsleq	r1, r1, #9
  4023a2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
  4023a6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
  4023aa:	3a7f      	subs	r2, #127	; 0x7f
  4023ac:	bfc2      	ittt	gt
  4023ae:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
  4023b2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
  4023b6:	4770      	bxgt	lr
  4023b8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  4023bc:	f04f 0300 	mov.w	r3, #0
  4023c0:	3a01      	subs	r2, #1
  4023c2:	dc5d      	bgt.n	402480 <__aeabi_fmul+0x150>
  4023c4:	f112 0f19 	cmn.w	r2, #25
  4023c8:	bfdc      	itt	le
  4023ca:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
  4023ce:	4770      	bxle	lr
  4023d0:	f1c2 0200 	rsb	r2, r2, #0
  4023d4:	0041      	lsls	r1, r0, #1
  4023d6:	fa21 f102 	lsr.w	r1, r1, r2
  4023da:	f1c2 0220 	rsb	r2, r2, #32
  4023de:	fa00 fc02 	lsl.w	ip, r0, r2
  4023e2:	ea5f 0031 	movs.w	r0, r1, rrx
  4023e6:	f140 0000 	adc.w	r0, r0, #0
  4023ea:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
  4023ee:	bf08      	it	eq
  4023f0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
  4023f4:	4770      	bx	lr
  4023f6:	f092 0f00 	teq	r2, #0
  4023fa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
  4023fe:	bf02      	ittt	eq
  402400:	0040      	lsleq	r0, r0, #1
  402402:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
  402406:	3a01      	subeq	r2, #1
  402408:	d0f9      	beq.n	4023fe <__aeabi_fmul+0xce>
  40240a:	ea40 000c 	orr.w	r0, r0, ip
  40240e:	f093 0f00 	teq	r3, #0
  402412:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  402416:	bf02      	ittt	eq
  402418:	0049      	lsleq	r1, r1, #1
  40241a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
  40241e:	3b01      	subeq	r3, #1
  402420:	d0f9      	beq.n	402416 <__aeabi_fmul+0xe6>
  402422:	ea41 010c 	orr.w	r1, r1, ip
  402426:	e78f      	b.n	402348 <__aeabi_fmul+0x18>
  402428:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
  40242c:	ea92 0f0c 	teq	r2, ip
  402430:	bf18      	it	ne
  402432:	ea93 0f0c 	teqne	r3, ip
  402436:	d00a      	beq.n	40244e <__aeabi_fmul+0x11e>
  402438:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
  40243c:	bf18      	it	ne
  40243e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
  402442:	d1d8      	bne.n	4023f6 <__aeabi_fmul+0xc6>
  402444:	ea80 0001 	eor.w	r0, r0, r1
  402448:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
  40244c:	4770      	bx	lr
  40244e:	f090 0f00 	teq	r0, #0
  402452:	bf17      	itett	ne
  402454:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
  402458:	4608      	moveq	r0, r1
  40245a:	f091 0f00 	teqne	r1, #0
  40245e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
  402462:	d014      	beq.n	40248e <__aeabi_fmul+0x15e>
  402464:	ea92 0f0c 	teq	r2, ip
  402468:	d101      	bne.n	40246e <__aeabi_fmul+0x13e>
  40246a:	0242      	lsls	r2, r0, #9
  40246c:	d10f      	bne.n	40248e <__aeabi_fmul+0x15e>
  40246e:	ea93 0f0c 	teq	r3, ip
  402472:	d103      	bne.n	40247c <__aeabi_fmul+0x14c>
  402474:	024b      	lsls	r3, r1, #9
  402476:	bf18      	it	ne
  402478:	4608      	movne	r0, r1
  40247a:	d108      	bne.n	40248e <__aeabi_fmul+0x15e>
  40247c:	ea80 0001 	eor.w	r0, r0, r1
  402480:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
  402484:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  402488:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  40248c:	4770      	bx	lr
  40248e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  402492:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
  402496:	4770      	bx	lr

00402498 <__aeabi_fdiv>:
  402498:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40249c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
  4024a0:	bf1e      	ittt	ne
  4024a2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
  4024a6:	ea92 0f0c 	teqne	r2, ip
  4024aa:	ea93 0f0c 	teqne	r3, ip
  4024ae:	d069      	beq.n	402584 <__aeabi_fdiv+0xec>
  4024b0:	eba2 0203 	sub.w	r2, r2, r3
  4024b4:	ea80 0c01 	eor.w	ip, r0, r1
  4024b8:	0249      	lsls	r1, r1, #9
  4024ba:	ea4f 2040 	mov.w	r0, r0, lsl #9
  4024be:	d037      	beq.n	402530 <__aeabi_fdiv+0x98>
  4024c0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  4024c4:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
  4024c8:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
  4024cc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
  4024d0:	428b      	cmp	r3, r1
  4024d2:	bf38      	it	cc
  4024d4:	005b      	lslcc	r3, r3, #1
  4024d6:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
  4024da:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
  4024de:	428b      	cmp	r3, r1
  4024e0:	bf24      	itt	cs
  4024e2:	1a5b      	subcs	r3, r3, r1
  4024e4:	ea40 000c 	orrcs.w	r0, r0, ip
  4024e8:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
  4024ec:	bf24      	itt	cs
  4024ee:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
  4024f2:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  4024f6:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
  4024fa:	bf24      	itt	cs
  4024fc:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
  402500:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  402504:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
  402508:	bf24      	itt	cs
  40250a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
  40250e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  402512:	011b      	lsls	r3, r3, #4
  402514:	bf18      	it	ne
  402516:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
  40251a:	d1e0      	bne.n	4024de <__aeabi_fdiv+0x46>
  40251c:	2afd      	cmp	r2, #253	; 0xfd
  40251e:	f63f af50 	bhi.w	4023c2 <__aeabi_fmul+0x92>
  402522:	428b      	cmp	r3, r1
  402524:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
  402528:	bf08      	it	eq
  40252a:	f020 0001 	biceq.w	r0, r0, #1
  40252e:	4770      	bx	lr
  402530:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
  402534:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
  402538:	327f      	adds	r2, #127	; 0x7f
  40253a:	bfc2      	ittt	gt
  40253c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
  402540:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
  402544:	4770      	bxgt	lr
  402546:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  40254a:	f04f 0300 	mov.w	r3, #0
  40254e:	3a01      	subs	r2, #1
  402550:	e737      	b.n	4023c2 <__aeabi_fmul+0x92>
  402552:	f092 0f00 	teq	r2, #0
  402556:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
  40255a:	bf02      	ittt	eq
  40255c:	0040      	lsleq	r0, r0, #1
  40255e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
  402562:	3a01      	subeq	r2, #1
  402564:	d0f9      	beq.n	40255a <__aeabi_fdiv+0xc2>
  402566:	ea40 000c 	orr.w	r0, r0, ip
  40256a:	f093 0f00 	teq	r3, #0
  40256e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  402572:	bf02      	ittt	eq
  402574:	0049      	lsleq	r1, r1, #1
  402576:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
  40257a:	3b01      	subeq	r3, #1
  40257c:	d0f9      	beq.n	402572 <__aeabi_fdiv+0xda>
  40257e:	ea41 010c 	orr.w	r1, r1, ip
  402582:	e795      	b.n	4024b0 <__aeabi_fdiv+0x18>
  402584:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
  402588:	ea92 0f0c 	teq	r2, ip
  40258c:	d108      	bne.n	4025a0 <__aeabi_fdiv+0x108>
  40258e:	0242      	lsls	r2, r0, #9
  402590:	f47f af7d 	bne.w	40248e <__aeabi_fmul+0x15e>
  402594:	ea93 0f0c 	teq	r3, ip
  402598:	f47f af70 	bne.w	40247c <__aeabi_fmul+0x14c>
  40259c:	4608      	mov	r0, r1
  40259e:	e776      	b.n	40248e <__aeabi_fmul+0x15e>
  4025a0:	ea93 0f0c 	teq	r3, ip
  4025a4:	d104      	bne.n	4025b0 <__aeabi_fdiv+0x118>
  4025a6:	024b      	lsls	r3, r1, #9
  4025a8:	f43f af4c 	beq.w	402444 <__aeabi_fmul+0x114>
  4025ac:	4608      	mov	r0, r1
  4025ae:	e76e      	b.n	40248e <__aeabi_fmul+0x15e>
  4025b0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
  4025b4:	bf18      	it	ne
  4025b6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
  4025ba:	d1ca      	bne.n	402552 <__aeabi_fdiv+0xba>
  4025bc:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
  4025c0:	f47f af5c 	bne.w	40247c <__aeabi_fmul+0x14c>
  4025c4:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
  4025c8:	f47f af3c 	bne.w	402444 <__aeabi_fmul+0x114>
  4025cc:	e75f      	b.n	40248e <__aeabi_fmul+0x15e>
  4025ce:	bf00      	nop

004025d0 <__aeabi_f2uiz>:
  4025d0:	0042      	lsls	r2, r0, #1
  4025d2:	d20e      	bcs.n	4025f2 <__aeabi_f2uiz+0x22>
  4025d4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
  4025d8:	d30b      	bcc.n	4025f2 <__aeabi_f2uiz+0x22>
  4025da:	f04f 039e 	mov.w	r3, #158	; 0x9e
  4025de:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
  4025e2:	d409      	bmi.n	4025f8 <__aeabi_f2uiz+0x28>
  4025e4:	ea4f 2300 	mov.w	r3, r0, lsl #8
  4025e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  4025ec:	fa23 f002 	lsr.w	r0, r3, r2
  4025f0:	4770      	bx	lr
  4025f2:	f04f 0000 	mov.w	r0, #0
  4025f6:	4770      	bx	lr
  4025f8:	f112 0f61 	cmn.w	r2, #97	; 0x61
  4025fc:	d101      	bne.n	402602 <__aeabi_f2uiz+0x32>
  4025fe:	0242      	lsls	r2, r0, #9
  402600:	d102      	bne.n	402608 <__aeabi_f2uiz+0x38>
  402602:	f04f 30ff 	mov.w	r0, #4294967295
  402606:	4770      	bx	lr
  402608:	f04f 0000 	mov.w	r0, #0
  40260c:	4770      	bx	lr
  40260e:	bf00      	nop

00402610 <__libc_init_array>:
  402610:	b570      	push	{r4, r5, r6, lr}
  402612:	4e0f      	ldr	r6, [pc, #60]	; (402650 <__libc_init_array+0x40>)
  402614:	4d0f      	ldr	r5, [pc, #60]	; (402654 <__libc_init_array+0x44>)
  402616:	1b76      	subs	r6, r6, r5
  402618:	10b6      	asrs	r6, r6, #2
  40261a:	bf18      	it	ne
  40261c:	2400      	movne	r4, #0
  40261e:	d005      	beq.n	40262c <__libc_init_array+0x1c>
  402620:	3401      	adds	r4, #1
  402622:	f855 3b04 	ldr.w	r3, [r5], #4
  402626:	4798      	blx	r3
  402628:	42a6      	cmp	r6, r4
  40262a:	d1f9      	bne.n	402620 <__libc_init_array+0x10>
  40262c:	4e0a      	ldr	r6, [pc, #40]	; (402658 <__libc_init_array+0x48>)
  40262e:	4d0b      	ldr	r5, [pc, #44]	; (40265c <__libc_init_array+0x4c>)
  402630:	1b76      	subs	r6, r6, r5
  402632:	f000 f893 	bl	40275c <_init>
  402636:	10b6      	asrs	r6, r6, #2
  402638:	bf18      	it	ne
  40263a:	2400      	movne	r4, #0
  40263c:	d006      	beq.n	40264c <__libc_init_array+0x3c>
  40263e:	3401      	adds	r4, #1
  402640:	f855 3b04 	ldr.w	r3, [r5], #4
  402644:	4798      	blx	r3
  402646:	42a6      	cmp	r6, r4
  402648:	d1f9      	bne.n	40263e <__libc_init_array+0x2e>
  40264a:	bd70      	pop	{r4, r5, r6, pc}
  40264c:	bd70      	pop	{r4, r5, r6, pc}
  40264e:	bf00      	nop
  402650:	00402768 	.word	0x00402768
  402654:	00402768 	.word	0x00402768
  402658:	00402770 	.word	0x00402770
  40265c:	00402768 	.word	0x00402768

00402660 <register_fini>:
  402660:	4b02      	ldr	r3, [pc, #8]	; (40266c <register_fini+0xc>)
  402662:	b113      	cbz	r3, 40266a <register_fini+0xa>
  402664:	4802      	ldr	r0, [pc, #8]	; (402670 <register_fini+0x10>)
  402666:	f000 b805 	b.w	402674 <atexit>
  40266a:	4770      	bx	lr
  40266c:	00000000 	.word	0x00000000
  402670:	00402681 	.word	0x00402681

00402674 <atexit>:
  402674:	2300      	movs	r3, #0
  402676:	4601      	mov	r1, r0
  402678:	461a      	mov	r2, r3
  40267a:	4618      	mov	r0, r3
  40267c:	f000 b814 	b.w	4026a8 <__register_exitproc>

00402680 <__libc_fini_array>:
  402680:	b538      	push	{r3, r4, r5, lr}
  402682:	4d07      	ldr	r5, [pc, #28]	; (4026a0 <__libc_fini_array+0x20>)
  402684:	4c07      	ldr	r4, [pc, #28]	; (4026a4 <__libc_fini_array+0x24>)
  402686:	1b2c      	subs	r4, r5, r4
  402688:	10a4      	asrs	r4, r4, #2
  40268a:	d005      	beq.n	402698 <__libc_fini_array+0x18>
  40268c:	3c01      	subs	r4, #1
  40268e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  402692:	4798      	blx	r3
  402694:	2c00      	cmp	r4, #0
  402696:	d1f9      	bne.n	40268c <__libc_fini_array+0xc>
  402698:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  40269c:	f000 b868 	b.w	402770 <_fini>
  4026a0:	00402780 	.word	0x00402780
  4026a4:	0040277c 	.word	0x0040277c

004026a8 <__register_exitproc>:
  4026a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4026ac:	4c25      	ldr	r4, [pc, #148]	; (402744 <__register_exitproc+0x9c>)
  4026ae:	6825      	ldr	r5, [r4, #0]
  4026b0:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
  4026b4:	4606      	mov	r6, r0
  4026b6:	4688      	mov	r8, r1
  4026b8:	4692      	mov	sl, r2
  4026ba:	4699      	mov	r9, r3
  4026bc:	b3c4      	cbz	r4, 402730 <__register_exitproc+0x88>
  4026be:	6860      	ldr	r0, [r4, #4]
  4026c0:	281f      	cmp	r0, #31
  4026c2:	dc17      	bgt.n	4026f4 <__register_exitproc+0x4c>
  4026c4:	1c43      	adds	r3, r0, #1
  4026c6:	b176      	cbz	r6, 4026e6 <__register_exitproc+0x3e>
  4026c8:	eb04 0580 	add.w	r5, r4, r0, lsl #2
  4026cc:	2201      	movs	r2, #1
  4026ce:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
  4026d2:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
  4026d6:	4082      	lsls	r2, r0
  4026d8:	4311      	orrs	r1, r2
  4026da:	2e02      	cmp	r6, #2
  4026dc:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
  4026e0:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
  4026e4:	d01e      	beq.n	402724 <__register_exitproc+0x7c>
  4026e6:	3002      	adds	r0, #2
  4026e8:	6063      	str	r3, [r4, #4]
  4026ea:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
  4026ee:	2000      	movs	r0, #0
  4026f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4026f4:	4b14      	ldr	r3, [pc, #80]	; (402748 <__register_exitproc+0xa0>)
  4026f6:	b303      	cbz	r3, 40273a <__register_exitproc+0x92>
  4026f8:	f44f 70c8 	mov.w	r0, #400	; 0x190
  4026fc:	f3af 8000 	nop.w
  402700:	4604      	mov	r4, r0
  402702:	b1d0      	cbz	r0, 40273a <__register_exitproc+0x92>
  402704:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
  402708:	2700      	movs	r7, #0
  40270a:	e880 0088 	stmia.w	r0, {r3, r7}
  40270e:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  402712:	4638      	mov	r0, r7
  402714:	2301      	movs	r3, #1
  402716:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  40271a:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
  40271e:	2e00      	cmp	r6, #0
  402720:	d0e1      	beq.n	4026e6 <__register_exitproc+0x3e>
  402722:	e7d1      	b.n	4026c8 <__register_exitproc+0x20>
  402724:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
  402728:	430a      	orrs	r2, r1
  40272a:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  40272e:	e7da      	b.n	4026e6 <__register_exitproc+0x3e>
  402730:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
  402734:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  402738:	e7c1      	b.n	4026be <__register_exitproc+0x16>
  40273a:	f04f 30ff 	mov.w	r0, #4294967295
  40273e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402742:	bf00      	nop
  402744:	00402758 	.word	0x00402758
  402748:	00000000 	.word	0x00000000
  40274c:	0000080f 	.word	0x0000080f
  402750:	00ffff06 	.word	0x00ffff06
  402754:	00000043 	.word	0x00000043

00402758 <_global_impure_ptr>:
  402758:	20000098                                ... 

0040275c <_init>:
  40275c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40275e:	bf00      	nop
  402760:	bcf8      	pop	{r3, r4, r5, r6, r7}
  402762:	bc08      	pop	{r3}
  402764:	469e      	mov	lr, r3
  402766:	4770      	bx	lr

00402768 <__init_array_start>:
  402768:	00402661 	.word	0x00402661

0040276c <__frame_dummy_init_array_entry>:
  40276c:	004000e5                                ..@.

00402770 <_fini>:
  402770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402772:	bf00      	nop
  402774:	bcf8      	pop	{r3, r4, r5, r6, r7}
  402776:	bc08      	pop	{r3}
  402778:	469e      	mov	lr, r3
  40277a:	4770      	bx	lr

0040277c <__fini_array_start>:
  40277c:	004000c1 	.word	0x004000c1

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	d1fb      	bne.n	20000000 <portable_delay_cycles>
20000008:	4770      	bx	lr
2000000a:	bf00      	nop

2000000c <leds_status>:
2000000c:	0001 0000 0000 0000 0000 0000 0000 0000     ................
	...

2000004c <notes>:
2000004c:	0000 4040 0000 0000 0000 4000 0000 0000     ..@@.......@....
2000005c:	0000 3f80 0000 0000 0000 4000 0000 0000     ...?.......@....
2000006c:	0000 0000 0000 4040 0000 0000 0000 0000     ......@@........
	...

2000008c <g_interrupt_enabled>:
2000008c:	0001 0000                                   ....

20000090 <SystemCoreClock>:
20000090:	0900 003d                                   ..=.

20000094 <bpm>:
20000094:	0078 0000                                   x...

20000098 <impure_data>:
20000098:	0000 0000 0384 2000 03ec 2000 0454 2000     ....... ... T.. 
	...
200000cc:	2754 0040 0000 0000 0000 0000 0000 0000     T'@.............
	...
20000140:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
20000150:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...
