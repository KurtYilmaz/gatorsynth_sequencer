
gatorsynth_sequencer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006638  00400000  00400000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000005f8  20000000  00406638  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  2 .bss          0000812c  200005f8  00406c30  000205f8  2**2
                  ALLOC
  3 .stack        00003004  20008724  0040ed5c  000205f8  2**0
                  ALLOC
  4 .ARM.attributes 0000002a  00000000  00000000  000205f8  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020622  2**0
                  CONTENTS, READONLY
  6 .debug_info   0000af1b  00000000  00000000  0002067b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000021e7  00000000  00000000  0002b596  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00004051  00000000  00000000  0002d77d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000790  00000000  00000000  000317ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000006d0  00000000  00000000  00031f5e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00012a14  00000000  00000000  0003262e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000feff  00000000  00000000  00045042  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0003e26d  00000000  00000000  00054f41  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001148  00000000  00000000  000931b0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <_sfixed>:
  400000:	2000b728 	.word	0x2000b728
  400004:	00404681 	.word	0x00404681
  400008:	0040467d 	.word	0x0040467d
  40000c:	0040467d 	.word	0x0040467d
  400010:	0040467d 	.word	0x0040467d
  400014:	0040467d 	.word	0x0040467d
  400018:	0040467d 	.word	0x0040467d
	...
  40002c:	0040467d 	.word	0x0040467d
  400030:	0040467d 	.word	0x0040467d
  400034:	00000000 	.word	0x00000000
  400038:	0040467d 	.word	0x0040467d
  40003c:	0040467d 	.word	0x0040467d
  400040:	0040467d 	.word	0x0040467d
  400044:	0040467d 	.word	0x0040467d
  400048:	0040467d 	.word	0x0040467d
  40004c:	0040467d 	.word	0x0040467d
  400050:	0040467d 	.word	0x0040467d
  400054:	0040467d 	.word	0x0040467d
  400058:	0040467d 	.word	0x0040467d
  40005c:	00000000 	.word	0x00000000
  400060:	0040467d 	.word	0x0040467d
  400064:	0040467d 	.word	0x0040467d
  400068:	0040467d 	.word	0x0040467d
  40006c:	004034e5 	.word	0x004034e5
  400070:	00404be5 	.word	0x00404be5
  400074:	00402091 	.word	0x00402091
  400078:	0040467d 	.word	0x0040467d
  40007c:	0040467d 	.word	0x0040467d
  400080:	0040467d 	.word	0x0040467d
  400084:	0040467d 	.word	0x0040467d
  400088:	00000000 	.word	0x00000000
  40008c:	0040467d 	.word	0x0040467d
  400090:	0040467d 	.word	0x0040467d
  400094:	0040467d 	.word	0x0040467d
  400098:	0040467d 	.word	0x0040467d
  40009c:	00404319 	.word	0x00404319
  4000a0:	0040467d 	.word	0x0040467d
  4000a4:	0040467d 	.word	0x0040467d
  4000a8:	0040467d 	.word	0x0040467d
  4000ac:	0040467d 	.word	0x0040467d
  4000b0:	0040467d 	.word	0x0040467d
  4000b4:	0040019d 	.word	0x0040019d
  4000b8:	0040467d 	.word	0x0040467d
  4000bc:	0040467d 	.word	0x0040467d

004000c0 <__do_global_dtors_aux>:
  4000c0:	b510      	push	{r4, lr}
  4000c2:	4c05      	ldr	r4, [pc, #20]	; (4000d8 <__do_global_dtors_aux+0x18>)
  4000c4:	7823      	ldrb	r3, [r4, #0]
  4000c6:	b933      	cbnz	r3, 4000d6 <__do_global_dtors_aux+0x16>
  4000c8:	4b04      	ldr	r3, [pc, #16]	; (4000dc <__do_global_dtors_aux+0x1c>)
  4000ca:	b113      	cbz	r3, 4000d2 <__do_global_dtors_aux+0x12>
  4000cc:	4804      	ldr	r0, [pc, #16]	; (4000e0 <__do_global_dtors_aux+0x20>)
  4000ce:	f3af 8000 	nop.w
  4000d2:	2301      	movs	r3, #1
  4000d4:	7023      	strb	r3, [r4, #0]
  4000d6:	bd10      	pop	{r4, pc}
  4000d8:	200005f8 	.word	0x200005f8
  4000dc:	00000000 	.word	0x00000000
  4000e0:	00406638 	.word	0x00406638

004000e4 <frame_dummy>:
  4000e4:	4b08      	ldr	r3, [pc, #32]	; (400108 <frame_dummy+0x24>)
  4000e6:	b510      	push	{r4, lr}
  4000e8:	b11b      	cbz	r3, 4000f2 <frame_dummy+0xe>
  4000ea:	4908      	ldr	r1, [pc, #32]	; (40010c <frame_dummy+0x28>)
  4000ec:	4808      	ldr	r0, [pc, #32]	; (400110 <frame_dummy+0x2c>)
  4000ee:	f3af 8000 	nop.w
  4000f2:	4808      	ldr	r0, [pc, #32]	; (400114 <frame_dummy+0x30>)
  4000f4:	6803      	ldr	r3, [r0, #0]
  4000f6:	b903      	cbnz	r3, 4000fa <frame_dummy+0x16>
  4000f8:	bd10      	pop	{r4, pc}
  4000fa:	4b07      	ldr	r3, [pc, #28]	; (400118 <frame_dummy+0x34>)
  4000fc:	2b00      	cmp	r3, #0
  4000fe:	d0fb      	beq.n	4000f8 <frame_dummy+0x14>
  400100:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400104:	4718      	bx	r3
  400106:	bf00      	nop
  400108:	00000000 	.word	0x00000000
  40010c:	200005fc 	.word	0x200005fc
  400110:	00406638 	.word	0x00406638
  400114:	00406638 	.word	0x00406638
  400118:	00000000 	.word	0x00000000

0040011c <ADC_init>:
 //define register to read CH2 conversion from
#define REG_ADC_CDR2     (*(__I  uint32_t*)0x40038058U) /**< \brief (ADC) Channel Data Register */ 

 void ADC_init(){

	note_length = 20000;
  40011c:	f644 6220 	movw	r2, #20000	; 0x4e20
  400120:	4b0f      	ldr	r3, [pc, #60]	; (400160 <ADC_init+0x44>)
  400122:	801a      	strh	r2, [r3, #0]

	//enable peripheral clock for ADC
	REG_PMC_PCER0 |= PMC_PCER0_PID29;
  400124:	4a0f      	ldr	r2, [pc, #60]	; (400164 <ADC_init+0x48>)
  400126:	6813      	ldr	r3, [r2, #0]
  400128:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  40012c:	6013      	str	r3, [r2, #0]
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  40012e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400132:	4b0d      	ldr	r3, [pc, #52]	; (400168 <ADC_init+0x4c>)
  400134:	601a      	str	r2, [r3, #0]

	//enable interrupts for ADC
	NVIC_EnableIRQ(ADC_IRQn);

	//enable Channel 2 of ADC (PORTA 19)
	REG_ADC_CHER |= ADC_CHER_CH2;
  400136:	4a0d      	ldr	r2, [pc, #52]	; (40016c <ADC_init+0x50>)
  400138:	6813      	ldr	r3, [r2, #0]
  40013a:	f043 0304 	orr.w	r3, r3, #4
  40013e:	6013      	str	r3, [r2, #0]

	//configure ADC clock to 5MHz
	REG_ADC_MR |= ADC_MR_PRESCAL(9);
  400140:	3a0c      	subs	r2, #12
  400142:	6813      	ldr	r3, [r2, #0]
  400144:	f443 6310 	orr.w	r3, r3, #2304	; 0x900
  400148:	6013      	str	r3, [r2, #0]

	//enable interrupt for end of ADC conversion on CH2
	REG_ADC_IER |= ADC_IER_EOC2;
  40014a:	3220      	adds	r2, #32
  40014c:	6813      	ldr	r3, [r2, #0]
  40014e:	f043 0304 	orr.w	r3, r3, #4
  400152:	6013      	str	r3, [r2, #0]

	//start initial conversion
	REG_ADC_CR |= ADC_CR_START;
  400154:	3a24      	subs	r2, #36	; 0x24
  400156:	6813      	ldr	r3, [r2, #0]
  400158:	f043 0302 	orr.w	r3, r3, #2
  40015c:	6013      	str	r3, [r2, #0]
  40015e:	4770      	bx	lr
  400160:	200006fc 	.word	0x200006fc
  400164:	400e0410 	.word	0x400e0410
  400168:	e000e100 	.word	0xe000e100
  40016c:	40038010 	.word	0x40038010

00400170 <convert_NoteLength>:

 }

  void convert_NoteLength(uint32_t DAC_data){
  400170:	b508      	push	{r3, lr}

	  //get note length as a proportion of the overflow count of the timer
	  float note_float = 40000*(((float)DAC_data)/1023);
	  note_length = (uint16_t) note_float;
  400172:	4b05      	ldr	r3, [pc, #20]	; (400188 <convert_NoteLength+0x18>)
  400174:	4798      	blx	r3
  400176:	4905      	ldr	r1, [pc, #20]	; (40018c <convert_NoteLength+0x1c>)
  400178:	4b05      	ldr	r3, [pc, #20]	; (400190 <convert_NoteLength+0x20>)
  40017a:	4798      	blx	r3
  40017c:	4b05      	ldr	r3, [pc, #20]	; (400194 <convert_NoteLength+0x24>)
  40017e:	4798      	blx	r3
  400180:	4b05      	ldr	r3, [pc, #20]	; (400198 <convert_NoteLength+0x28>)
  400182:	8018      	strh	r0, [r3, #0]
  400184:	bd08      	pop	{r3, pc}
  400186:	bf00      	nop
  400188:	00404dfd 	.word	0x00404dfd
  40018c:	421c671a 	.word	0x421c671a
  400190:	00404ead 	.word	0x00404ead
  400194:	0040514d 	.word	0x0040514d
  400198:	200006fc 	.word	0x200006fc

0040019c <ADC_Handler>:
// 		note_length = 1000;
// 	  }

  }

 void ADC_Handler(){
  40019c:	b508      	push	{r3, lr}

	//read the interrupt flag and clear it
	uint32_t status = REG_ADC_ISR;
  40019e:	4b05      	ldr	r3, [pc, #20]	; (4001b4 <ADC_Handler+0x18>)
  4001a0:	681b      	ldr	r3, [r3, #0]

	//store the data
	uint32_t data;

	//check for CH2 interrupt
	if ((status & ADC_IMR_EOC2) > 0){
  4001a2:	f013 0f04 	tst.w	r3, #4
		data = REG_ADC_CDR2;	//read ADC data off CH2
  4001a6:	bf1c      	itt	ne
  4001a8:	4b03      	ldrne	r3, [pc, #12]	; (4001b8 <ADC_Handler+0x1c>)
  4001aa:	6818      	ldrne	r0, [r3, #0]
	}

	convert_NoteLength(data);
  4001ac:	4b03      	ldr	r3, [pc, #12]	; (4001bc <ADC_Handler+0x20>)
  4001ae:	4798      	blx	r3
  4001b0:	bd08      	pop	{r3, pc}
  4001b2:	bf00      	nop
  4001b4:	40038030 	.word	0x40038030
  4001b8:	40038058 	.word	0x40038058
  4001bc:	00400171 	.word	0x00400171

004001c0 <twi_master_read>:
 * \param p_packet Packet information and data (see \ref twi_packet_t).
 *
 * \return TWI_SUCCESS if all bytes were read, error code otherwise.
 */
uint32_t twi_master_read(Twi *p_twi, twi_packet_t *p_packet)
{
  4001c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  4001c4:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  4001c6:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4001ca:	2200      	movs	r2, #0
  4001cc:	4b3a      	ldr	r3, [pc, #232]	; (4002b8 <twi_master_read+0xf8>)
  4001ce:	701a      	strb	r2, [r3, #0]
	
	uint32_t status;
	uint32_t cnt = p_packet->length;
  4001d0:	68cb      	ldr	r3, [r1, #12]
	uint8_t *buffer = p_packet->buffer;
	uint8_t stop_sent = 0;
	uint32_t timeout = TWI_TIMEOUT;;
	
	/* Check argument */
	if (cnt == 0) {
  4001d2:	2b00      	cmp	r3, #0
  4001d4:	d04f      	beq.n	400276 <twi_master_read+0xb6>
{
	cpu_irq_disable();
	
	uint32_t status;
	uint32_t cnt = p_packet->length;
	uint8_t *buffer = p_packet->buffer;
  4001d6:	688c      	ldr	r4, [r1, #8]
	if (cnt == 0) {
		return TWI_INVALID_ARGUMENT;
	}

	/* Set read mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
  4001d8:	4616      	mov	r6, r2
  4001da:	6042      	str	r2, [r0, #4]
	p_twi->TWI_MMR = TWI_MMR_MREAD | TWI_MMR_DADR(p_packet->chip) |
  4001dc:	684a      	ldr	r2, [r1, #4]
  4001de:	0212      	lsls	r2, r2, #8
  4001e0:	f402 7240 	and.w	r2, r2, #768	; 0x300
  4001e4:	f442 5580 	orr.w	r5, r2, #4096	; 0x1000
  4001e8:	7c0a      	ldrb	r2, [r1, #16]
  4001ea:	0412      	lsls	r2, r2, #16
  4001ec:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
  4001f0:	432a      	orrs	r2, r5
  4001f2:	6042      	str	r2, [r0, #4]
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
  4001f4:	60c6      	str	r6, [r0, #12]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
  4001f6:	684d      	ldr	r5, [r1, #4]
 */
static uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
	uint32_t val;

	if (len == 0)
  4001f8:	b15d      	cbz	r5, 400212 <twi_master_read+0x52>
		return 0;

	val = addr[0];
  4001fa:	780a      	ldrb	r2, [r1, #0]
	if (len > 1) {
  4001fc:	2d01      	cmp	r5, #1
		val <<= 8;
		val |= addr[1];
  4001fe:	bfc4      	itt	gt
  400200:	784e      	ldrbgt	r6, [r1, #1]
  400202:	ea46 2202 	orrgt.w	r2, r6, r2, lsl #8
	}
	if (len > 2) {
  400206:	2d02      	cmp	r5, #2
  400208:	dd04      	ble.n	400214 <twi_master_read+0x54>
		val <<= 8;
		val |= addr[2];
  40020a:	7889      	ldrb	r1, [r1, #2]
  40020c:	ea41 2202 	orr.w	r2, r1, r2, lsl #8
  400210:	e000      	b.n	400214 <twi_master_read+0x54>
static uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
	uint32_t val;

	if (len == 0)
		return 0;
  400212:	2200      	movs	r2, #0
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
  400214:	60c2      	str	r2, [r0, #12]

	/* Send a START condition */
	if (cnt == 1) {
  400216:	2b01      	cmp	r3, #1
  400218:	d103      	bne.n	400222 <twi_master_read+0x62>
		p_twi->TWI_CR = TWI_CR_START | TWI_CR_STOP;
  40021a:	2203      	movs	r2, #3
  40021c:	6002      	str	r2, [r0, #0]
		stop_sent = 1;
  40021e:	2701      	movs	r7, #1
  400220:	e035      	b.n	40028e <twi_master_read+0xce>
	} else {
		p_twi->TWI_CR = TWI_CR_START;
  400222:	2201      	movs	r2, #1
  400224:	6002      	str	r2, [r0, #0]
		stop_sent = 0;
  400226:	2700      	movs	r7, #0
  400228:	e031      	b.n	40028e <twi_master_read+0xce>
		if (cnt == 1  && !stop_sent) {
			p_twi->TWI_CR = TWI_CR_STOP;
			stop_sent = 1;
		}

		if (!(status & TWI_SR_RXRDY)) {
  40022a:	4629      	mov	r1, r5
		p_twi->TWI_CR = TWI_CR_START;
		stop_sent = 0;
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
  40022c:	6a02      	ldr	r2, [r0, #32]
		if (status & TWI_SR_NACK) {
  40022e:	f412 7f80 	tst.w	r2, #256	; 0x100
  400232:	d123      	bne.n	40027c <twi_master_read+0xbc>
			return TWI_RECEIVE_NACK;
		}

		if (!timeout--) {
  400234:	1e4d      	subs	r5, r1, #1
  400236:	b321      	cbz	r1, 400282 <twi_master_read+0xc2>
			return TWI_ERROR_TIMEOUT;
		}
				
		/* Last byte ? */
		if (cnt == 1  && !stop_sent) {
  400238:	2b01      	cmp	r3, #1
  40023a:	d104      	bne.n	400246 <twi_master_read+0x86>
  40023c:	bba7      	cbnz	r7, 4002a8 <twi_master_read+0xe8>
			p_twi->TWI_CR = TWI_CR_STOP;
  40023e:	f8c0 8000 	str.w	r8, [r0]
			stop_sent = 1;
  400242:	4667      	mov	r7, ip
  400244:	e030      	b.n	4002a8 <twi_master_read+0xe8>
		}

		if (!(status & TWI_SR_RXRDY)) {
  400246:	f012 0f02 	tst.w	r2, #2
  40024a:	d005      	beq.n	400258 <twi_master_read+0x98>
			continue;
		}
		*buffer++ = p_twi->TWI_RHR;
  40024c:	6b02      	ldr	r2, [r0, #48]	; 0x30
  40024e:	7022      	strb	r2, [r4, #0]

		cnt--;
  400250:	3b01      	subs	r3, #1
		}

		if (!(status & TWI_SR_RXRDY)) {
			continue;
		}
		*buffer++ = p_twi->TWI_RHR;
  400252:	3401      	adds	r4, #1

		cnt--;
		timeout = TWI_TIMEOUT;
  400254:	4631      	mov	r1, r6
  400256:	e000      	b.n	40025a <twi_master_read+0x9a>
  400258:	4629      	mov	r1, r5
	} else {
		p_twi->TWI_CR = TWI_CR_START;
		stop_sent = 0;
	}

	while (cnt > 0) {
  40025a:	2b00      	cmp	r3, #0
  40025c:	d1e6      	bne.n	40022c <twi_master_read+0x6c>

		cnt--;
		timeout = TWI_TIMEOUT;
	}

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
  40025e:	6a03      	ldr	r3, [r0, #32]
  400260:	f013 0f01 	tst.w	r3, #1
  400264:	d0fb      	beq.n	40025e <twi_master_read+0x9e>
	}

	p_twi->TWI_SR;
  400266:	6a03      	ldr	r3, [r0, #32]

	cpu_irq_enable();
  400268:	2201      	movs	r2, #1
  40026a:	4b13      	ldr	r3, [pc, #76]	; (4002b8 <twi_master_read+0xf8>)
  40026c:	701a      	strb	r2, [r3, #0]
  40026e:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  400272:	b662      	cpsie	i

	return TWI_SUCCESS;
  400274:	e01c      	b.n	4002b0 <twi_master_read+0xf0>
	uint8_t stop_sent = 0;
	uint32_t timeout = TWI_TIMEOUT;;
	
	/* Check argument */
	if (cnt == 0) {
		return TWI_INVALID_ARGUMENT;
  400276:	f04f 0e01 	mov.w	lr, #1
  40027a:	e019      	b.n	4002b0 <twi_master_read+0xf0>
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
  40027c:	f04f 0e05 	mov.w	lr, #5
  400280:	e016      	b.n	4002b0 <twi_master_read+0xf0>
		}

		if (!timeout--) {
			return TWI_ERROR_TIMEOUT;
  400282:	f04f 0e09 	mov.w	lr, #9
  400286:	e013      	b.n	4002b0 <twi_master_read+0xf0>
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
  400288:	f04f 0e05 	mov.w	lr, #5
  40028c:	e010      	b.n	4002b0 <twi_master_read+0xf0>
		p_twi->TWI_CR = TWI_CR_START;
		stop_sent = 0;
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
  40028e:	6a02      	ldr	r2, [r0, #32]
		if (status & TWI_SR_NACK) {
  400290:	f412 7e80 	ands.w	lr, r2, #256	; 0x100
  400294:	d1f8      	bne.n	400288 <twi_master_read+0xc8>
  400296:	f643 2597 	movw	r5, #14999	; 0x3a97
			continue;
		}
		*buffer++ = p_twi->TWI_RHR;

		cnt--;
		timeout = TWI_TIMEOUT;
  40029a:	f643 2698 	movw	r6, #15000	; 0x3a98
			return TWI_ERROR_TIMEOUT;
		}
				
		/* Last byte ? */
		if (cnt == 1  && !stop_sent) {
			p_twi->TWI_CR = TWI_CR_STOP;
  40029e:	f04f 0802 	mov.w	r8, #2
			stop_sent = 1;
  4002a2:	f04f 0c01 	mov.w	ip, #1
  4002a6:	e7c7      	b.n	400238 <twi_master_read+0x78>
		}

		if (!(status & TWI_SR_RXRDY)) {
  4002a8:	f012 0f02 	tst.w	r2, #2
  4002ac:	d0bd      	beq.n	40022a <twi_master_read+0x6a>
  4002ae:	e7cd      	b.n	40024c <twi_master_read+0x8c>
	p_twi->TWI_SR;

	cpu_irq_enable();

	return TWI_SUCCESS;
}
  4002b0:	4670      	mov	r0, lr
  4002b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4002b6:	bf00      	nop
  4002b8:	200001c4 	.word	0x200001c4

004002bc <twi_master_write>:
 * \param p_packet Packet information and data (see \ref twi_packet_t).
 *
 * \return TWI_SUCCESS if all bytes were written, error code otherwise.
 */
uint32_t twi_master_write(Twi *p_twi, twi_packet_t *p_packet)
{
  4002bc:	4602      	mov	r2, r0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  4002be:	b672      	cpsid	i
  4002c0:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4002c4:	2000      	movs	r0, #0
  4002c6:	4b1d      	ldr	r3, [pc, #116]	; (40033c <twi_master_write+0x80>)
  4002c8:	7018      	strb	r0, [r3, #0]

	uint32_t status;
	uint32_t cnt = p_packet->length;
  4002ca:	68c8      	ldr	r0, [r1, #12]
	uint8_t *buffer = p_packet->buffer;

	/* Check argument */
	if (cnt == 0) {
  4002cc:	b360      	cbz	r0, 400328 <twi_master_write+0x6c>
 * \param p_packet Packet information and data (see \ref twi_packet_t).
 *
 * \return TWI_SUCCESS if all bytes were written, error code otherwise.
 */
uint32_t twi_master_write(Twi *p_twi, twi_packet_t *p_packet)
{
  4002ce:	b410      	push	{r4}
	cpu_irq_disable();

	uint32_t status;
	uint32_t cnt = p_packet->length;
	uint8_t *buffer = p_packet->buffer;
  4002d0:	688c      	ldr	r4, [r1, #8]
		return TWI_INVALID_ARGUMENT;
	}

	/* Set write mode, slave address and 3 internal address byte lengths */
	//p_twi->TWI_MMR = 0;
	p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip);
  4002d2:	7c0b      	ldrb	r3, [r1, #16]
  4002d4:	041b      	lsls	r3, r3, #16
  4002d6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
  4002da:	6053      	str	r3, [r2, #4]
	//p_twi->TWI_IADR = 0;
	//p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);

	/* Send all bytes */
	while (cnt > 0) {
		status = p_twi->TWI_SR;
  4002dc:	6a13      	ldr	r3, [r2, #32]
		if (status & TWI_SR_NACK) {
  4002de:	f413 7f80 	tst.w	r3, #256	; 0x100
  4002e2:	d004      	beq.n	4002ee <twi_master_write+0x32>
  4002e4:	e022      	b.n	40032c <twi_master_write+0x70>
	//p_twi->TWI_IADR = 0;
	//p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);

	/* Send all bytes */
	while (cnt > 0) {
		status = p_twi->TWI_SR;
  4002e6:	6a13      	ldr	r3, [r2, #32]
		if (status & TWI_SR_NACK) {
  4002e8:	f413 7f80 	tst.w	r3, #256	; 0x100
  4002ec:	d120      	bne.n	400330 <twi_master_write+0x74>
 			return TWI_RECEIVE_NACK;
 		}

		if (!(status & TWI_SR_TXRDY)) {
  4002ee:	f013 0f04 	tst.w	r3, #4
  4002f2:	d003      	beq.n	4002fc <twi_master_write+0x40>
 			continue;
 		}
		p_twi->TWI_THR = *buffer++;
  4002f4:	7823      	ldrb	r3, [r4, #0]
  4002f6:	6353      	str	r3, [r2, #52]	; 0x34

		cnt--;
  4002f8:	3801      	subs	r0, #1
 		}

		if (!(status & TWI_SR_TXRDY)) {
 			continue;
 		}
		p_twi->TWI_THR = *buffer++;
  4002fa:	3401      	adds	r4, #1
	/* Set internal address for remote chip */
	//p_twi->TWI_IADR = 0;
	//p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);

	/* Send all bytes */
	while (cnt > 0) {
  4002fc:	2800      	cmp	r0, #0
  4002fe:	d1f2      	bne.n	4002e6 <twi_master_write+0x2a>

		cnt--;
	}

	while (1) {
		status = p_twi->TWI_SR;
  400300:	6a13      	ldr	r3, [r2, #32]
		if (status & TWI_SR_NACK) {
  400302:	f413 7080 	ands.w	r0, r3, #256	; 0x100
  400306:	d115      	bne.n	400334 <twi_master_write+0x78>
			return TWI_RECEIVE_NACK;
		}

		if (status & TWI_SR_TXRDY) {
  400308:	f013 0f04 	tst.w	r3, #4
  40030c:	d0f8      	beq.n	400300 <twi_master_write+0x44>
			break;
		}

	}

	p_twi->TWI_CR = TWI_CR_STOP;
  40030e:	2302      	movs	r3, #2
  400310:	6013      	str	r3, [r2, #0]

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
  400312:	6a13      	ldr	r3, [r2, #32]
  400314:	f013 0f01 	tst.w	r3, #1
  400318:	d0fb      	beq.n	400312 <twi_master_write+0x56>
	}

	cpu_irq_enable();
  40031a:	2201      	movs	r2, #1
  40031c:	4b07      	ldr	r3, [pc, #28]	; (40033c <twi_master_write+0x80>)
  40031e:	701a      	strb	r2, [r3, #0]
  400320:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  400324:	b662      	cpsie	i

	return TWI_SUCCESS;
  400326:	e006      	b.n	400336 <twi_master_write+0x7a>
	uint32_t cnt = p_packet->length;
	uint8_t *buffer = p_packet->buffer;

	/* Check argument */
	if (cnt == 0) {
		return TWI_INVALID_ARGUMENT;
  400328:	2001      	movs	r0, #1
	}

	cpu_irq_enable();

	return TWI_SUCCESS;
}
  40032a:	4770      	bx	lr

	/* Send all bytes */
	while (cnt > 0) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
 			return TWI_RECEIVE_NACK;
  40032c:	2005      	movs	r0, #5
  40032e:	e002      	b.n	400336 <twi_master_write+0x7a>
  400330:	2005      	movs	r0, #5
  400332:	e000      	b.n	400336 <twi_master_write+0x7a>
	}

	while (1) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
  400334:	2005      	movs	r0, #5
	}

	cpu_irq_enable();

	return TWI_SUCCESS;
}
  400336:	bc10      	pop	{r4}
  400338:	4770      	bx	lr
  40033a:	bf00      	nop
  40033c:	200001c4 	.word	0x200001c4

00400340 <DAC_write_cv>:


#define VREF 10
#define max 1023

void DAC_write_cv(float voltage, uint8_t channel){
  400340:	b538      	push	{r3, r4, r5, lr}
  400342:	460d      	mov	r5, r1
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  400344:	b672      	cpsid	i
  400346:	f3bf 8f5f 	dmb	sy

	cpu_irq_disable();
  40034a:	2200      	movs	r2, #0
  40034c:	4b2e      	ldr	r3, [pc, #184]	; (400408 <DAC_write_cv+0xc8>)
  40034e:	701a      	strb	r2, [r3, #0]

	float float_voltage = (max*(voltage))/VREF;
	uint16_t dac_voltage = (uint16_t) float_voltage;
  400350:	492e      	ldr	r1, [pc, #184]	; (40040c <DAC_write_cv+0xcc>)
  400352:	4b2f      	ldr	r3, [pc, #188]	; (400410 <DAC_write_cv+0xd0>)
  400354:	4798      	blx	r3
  400356:	4b2f      	ldr	r3, [pc, #188]	; (400414 <DAC_write_cv+0xd4>)
  400358:	4798      	blx	r3
  40035a:	b284      	uxth	r4, r0

	uint8_t low_byte;
	uint8_t high_byte;

	if (channel == CHANNEL_1){
  40035c:	b9bd      	cbnz	r5, 40038e <DAC_write_cv+0x4e>
		low_byte = (uint8_t) (dac_voltage << 2);
		high_byte = ((uint8_t) (dac_voltage >> 6)) | (0x90);
		REG_PIOB_CODR |=  PIO_PER_P13;
  40035e:	4a2e      	ldr	r2, [pc, #184]	; (400418 <DAC_write_cv+0xd8>)
  400360:	6813      	ldr	r3, [r2, #0]
  400362:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  400366:	6013      	str	r3, [r2, #0]
		low_byte = (uint8_t) (dac_voltage << 2);
		high_byte = ((uint8_t) (dac_voltage >> 6)) | (0xA0);
		REG_PIOB_CODR |=  PIO_PER_P14;
	}
	
	SPI_byteSend(high_byte);
  400368:	09a0      	lsrs	r0, r4, #6
  40036a:	f060 006f 	orn	r0, r0, #111	; 0x6f
  40036e:	b2c0      	uxtb	r0, r0
  400370:	4d2a      	ldr	r5, [pc, #168]	; (40041c <DAC_write_cv+0xdc>)
  400372:	47a8      	blx	r5
	SPI_byteSend(low_byte);
  400374:	00a0      	lsls	r0, r4, #2
  400376:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
  40037a:	47a8      	blx	r5
	delay_us(3);
  40037c:	2016      	movs	r0, #22
  40037e:	4b28      	ldr	r3, [pc, #160]	; (400420 <DAC_write_cv+0xe0>)
  400380:	4798      	blx	r3

	if (channel == CHANNEL_1){
		REG_PIOB_SODR |=  PIO_PER_P13;
  400382:	4a28      	ldr	r2, [pc, #160]	; (400424 <DAC_write_cv+0xe4>)
  400384:	6813      	ldr	r3, [r2, #0]
  400386:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  40038a:	6013      	str	r3, [r2, #0]
  40038c:	e035      	b.n	4003fa <DAC_write_cv+0xba>
	if (channel == CHANNEL_1){
		low_byte = (uint8_t) (dac_voltage << 2);
		high_byte = ((uint8_t) (dac_voltage >> 6)) | (0x90);
		REG_PIOB_CODR |=  PIO_PER_P13;
	}
	else if (channel == CHANNEL_2){
  40038e:	2d01      	cmp	r5, #1
  400390:	d117      	bne.n	4003c2 <DAC_write_cv+0x82>
		low_byte = (uint8_t) (dac_voltage << 2);
		high_byte = ((uint8_t) (dac_voltage >> 6)) | (0xA0);
		REG_PIOB_CODR |=  PIO_PER_P13;
  400392:	4a21      	ldr	r2, [pc, #132]	; (400418 <DAC_write_cv+0xd8>)
  400394:	6813      	ldr	r3, [r2, #0]
  400396:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  40039a:	6013      	str	r3, [r2, #0]
		low_byte = (uint8_t) (dac_voltage << 2);
		high_byte = ((uint8_t) (dac_voltage >> 6)) | (0xA0);
		REG_PIOB_CODR |=  PIO_PER_P14;
	}
	
	SPI_byteSend(high_byte);
  40039c:	09a0      	lsrs	r0, r4, #6
  40039e:	f060 005f 	orn	r0, r0, #95	; 0x5f
  4003a2:	b2c0      	uxtb	r0, r0
  4003a4:	4d1d      	ldr	r5, [pc, #116]	; (40041c <DAC_write_cv+0xdc>)
  4003a6:	47a8      	blx	r5
	SPI_byteSend(low_byte);
  4003a8:	00a0      	lsls	r0, r4, #2
  4003aa:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
  4003ae:	47a8      	blx	r5
	delay_us(3);
  4003b0:	2016      	movs	r0, #22
  4003b2:	4b1b      	ldr	r3, [pc, #108]	; (400420 <DAC_write_cv+0xe0>)
  4003b4:	4798      	blx	r3

	if (channel == CHANNEL_1){
		REG_PIOB_SODR |=  PIO_PER_P13;
	}
	else if (channel == CHANNEL_2){
		REG_PIOB_SODR |=  PIO_PER_P13;
  4003b6:	4a1b      	ldr	r2, [pc, #108]	; (400424 <DAC_write_cv+0xe4>)
  4003b8:	6813      	ldr	r3, [r2, #0]
  4003ba:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  4003be:	6013      	str	r3, [r2, #0]
  4003c0:	e01b      	b.n	4003fa <DAC_write_cv+0xba>
	else if (channel == CHANNEL_2){
		low_byte = (uint8_t) (dac_voltage << 2);
		high_byte = ((uint8_t) (dac_voltage >> 6)) | (0xA0);
		REG_PIOB_CODR |=  PIO_PER_P13;
	}
	else if (channel == CHANNEL_3){
  4003c2:	2d02      	cmp	r5, #2
		low_byte = (uint8_t) (dac_voltage << 2);
		high_byte = ((uint8_t) (dac_voltage >> 6)) | (0x90);
		REG_PIOB_CODR |=  PIO_PER_P14;
  4003c4:	4a14      	ldr	r2, [pc, #80]	; (400418 <DAC_write_cv+0xd8>)
  4003c6:	6813      	ldr	r3, [r2, #0]
  4003c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  4003cc:	6013      	str	r3, [r2, #0]
		low_byte = (uint8_t) (dac_voltage << 2);
		high_byte = ((uint8_t) (dac_voltage >> 6)) | (0xA0);
		REG_PIOB_CODR |=  PIO_PER_P14;
	}
	
	SPI_byteSend(high_byte);
  4003ce:	ea4f 1094 	mov.w	r0, r4, lsr #6
  4003d2:	bf0c      	ite	eq
  4003d4:	f060 006f 	orneq	r0, r0, #111	; 0x6f
  4003d8:	f060 005f 	ornne	r0, r0, #95	; 0x5f
  4003dc:	b2c0      	uxtb	r0, r0
  4003de:	4d0f      	ldr	r5, [pc, #60]	; (40041c <DAC_write_cv+0xdc>)
  4003e0:	47a8      	blx	r5
	SPI_byteSend(low_byte);
  4003e2:	00a0      	lsls	r0, r4, #2
  4003e4:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
  4003e8:	47a8      	blx	r5
	delay_us(3);
  4003ea:	2016      	movs	r0, #22
  4003ec:	4b0c      	ldr	r3, [pc, #48]	; (400420 <DAC_write_cv+0xe0>)
  4003ee:	4798      	blx	r3
	}
	else if (channel == CHANNEL_3){
		REG_PIOB_SODR |=  PIO_PER_P14;
	}
	else{
		REG_PIOB_SODR |=  PIO_PER_P14;
  4003f0:	4a0c      	ldr	r2, [pc, #48]	; (400424 <DAC_write_cv+0xe4>)
  4003f2:	6813      	ldr	r3, [r2, #0]
  4003f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  4003f8:	6013      	str	r3, [r2, #0]
	}

	cpu_irq_enable();
  4003fa:	2201      	movs	r2, #1
  4003fc:	4b02      	ldr	r3, [pc, #8]	; (400408 <DAC_write_cv+0xc8>)
  4003fe:	701a      	strb	r2, [r3, #0]
  400400:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  400404:	b662      	cpsie	i
  400406:	bd38      	pop	{r3, r4, r5, pc}
  400408:	200001c4 	.word	0x200001c4
  40040c:	42cc999a 	.word	0x42cc999a
  400410:	00404ead 	.word	0x00404ead
  400414:	0040514d 	.word	0x0040514d
  400418:	400e1034 	.word	0x400e1034
  40041c:	00403811 	.word	0x00403811
  400420:	20000001 	.word	0x20000001
  400424:	400e1030 	.word	0x400e1030

00400428 <DAC_write_gate_on>:

}

void DAC_write_gate_on(uint8_t channel){

	if (channel == CHANNEL_1){
  400428:	b928      	cbnz	r0, 400436 <DAC_write_gate_on+0xe>
		REG_PIOB_CODR |=  PIO_PER_P0;
  40042a:	4a0c      	ldr	r2, [pc, #48]	; (40045c <DAC_write_gate_on+0x34>)
  40042c:	6813      	ldr	r3, [r2, #0]
  40042e:	f043 0301 	orr.w	r3, r3, #1
  400432:	6013      	str	r3, [r2, #0]
  400434:	4770      	bx	lr
	}
	else if (channel == CHANNEL_2){
  400436:	2801      	cmp	r0, #1
  400438:	d105      	bne.n	400446 <DAC_write_gate_on+0x1e>
		REG_PIOB_CODR |=  PIO_PER_P1;
  40043a:	4a08      	ldr	r2, [pc, #32]	; (40045c <DAC_write_gate_on+0x34>)
  40043c:	6813      	ldr	r3, [r2, #0]
  40043e:	f043 0302 	orr.w	r3, r3, #2
  400442:	6013      	str	r3, [r2, #0]
  400444:	4770      	bx	lr
	}
	else if (channel == CHANNEL_3){
  400446:	2802      	cmp	r0, #2
		REG_PIOB_CODR |=  PIO_PER_P2;
  400448:	4a04      	ldr	r2, [pc, #16]	; (40045c <DAC_write_gate_on+0x34>)
  40044a:	6813      	ldr	r3, [r2, #0]
  40044c:	bf0c      	ite	eq
  40044e:	f043 0304 	orreq.w	r3, r3, #4
	}
	else{
		REG_PIOB_CODR |=  PIO_PER_P3;
  400452:	f043 0308 	orrne.w	r3, r3, #8
  400456:	6013      	str	r3, [r2, #0]
  400458:	4770      	bx	lr
  40045a:	bf00      	nop
  40045c:	400e1034 	.word	0x400e1034

00400460 <DAC_write_gate_off>:
// 	cpu_irq_enable();
}

void DAC_write_gate_off(uint8_t channel){

	if (channel == CHANNEL_1){
  400460:	b928      	cbnz	r0, 40046e <DAC_write_gate_off+0xe>
		REG_PIOB_SODR |=  PIO_PER_P0;
  400462:	4a0c      	ldr	r2, [pc, #48]	; (400494 <DAC_write_gate_off+0x34>)
  400464:	6813      	ldr	r3, [r2, #0]
  400466:	f043 0301 	orr.w	r3, r3, #1
  40046a:	6013      	str	r3, [r2, #0]
  40046c:	4770      	bx	lr
	}
	else if (channel == CHANNEL_2){
  40046e:	2801      	cmp	r0, #1
  400470:	d105      	bne.n	40047e <DAC_write_gate_off+0x1e>
		REG_PIOB_SODR |=  PIO_PER_P1;
  400472:	4a08      	ldr	r2, [pc, #32]	; (400494 <DAC_write_gate_off+0x34>)
  400474:	6813      	ldr	r3, [r2, #0]
  400476:	f043 0302 	orr.w	r3, r3, #2
  40047a:	6013      	str	r3, [r2, #0]
  40047c:	4770      	bx	lr
	}
	else if (channel == CHANNEL_3){
  40047e:	2802      	cmp	r0, #2
		REG_PIOB_SODR |=  PIO_PER_P2;
  400480:	4a04      	ldr	r2, [pc, #16]	; (400494 <DAC_write_gate_off+0x34>)
  400482:	6813      	ldr	r3, [r2, #0]
  400484:	bf0c      	ite	eq
  400486:	f043 0304 	orreq.w	r3, r3, #4
	}
	else{
		REG_PIOB_SODR |=  PIO_PER_P3;
  40048a:	f043 0308 	orrne.w	r3, r3, #8
  40048e:	6013      	str	r3, [r2, #0]
  400490:	4770      	bx	lr
  400492:	bf00      	nop
  400494:	400e1030 	.word	0x400e1030

00400498 <display_select>:
bool inverted[7] = {0,0,0,0,0,0,0};
uint16_t disp_ptr_location[7] = {0,0,0,0,0,0,0};
uint8_t curr_display = 7;

 void display_select(uint8_t d_id) {
	if(curr_display != d_id) {
  400498:	4b4d      	ldr	r3, [pc, #308]	; (4005d0 <display_select+0x138>)
  40049a:	781b      	ldrb	r3, [r3, #0]
  40049c:	4283      	cmp	r3, r0
  40049e:	f000 8096 	beq.w	4005ce <display_select+0x136>
		switch (d_id) {
  4004a2:	2806      	cmp	r0, #6
  4004a4:	f200 8083 	bhi.w	4005ae <display_select+0x116>
  4004a8:	e8df f000 	tbb	[pc, r0]
  4004ac:	39271504 	.word	0x39271504
  4004b0:	5d4b      	.short	0x5d4b
  4004b2:	6f          	.byte	0x6f
  4004b3:	00          	.byte	0x00
			case 0:
				REG_PIOA_CODR |= disp_sel_0;
  4004b4:	4b47      	ldr	r3, [pc, #284]	; (4005d4 <display_select+0x13c>)
  4004b6:	681a      	ldr	r2, [r3, #0]
  4004b8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
  4004bc:	601a      	str	r2, [r3, #0]
				REG_PIOA_CODR |= disp_sel_1;
  4004be:	681a      	ldr	r2, [r3, #0]
  4004c0:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
  4004c4:	601a      	str	r2, [r3, #0]
				REG_PIOA_CODR |= disp_sel_2;
  4004c6:	681a      	ldr	r2, [r3, #0]
  4004c8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
  4004cc:	601a      	str	r2, [r3, #0]
				curr_display = 0;
  4004ce:	2200      	movs	r2, #0
  4004d0:	4b3f      	ldr	r3, [pc, #252]	; (4005d0 <display_select+0x138>)
  4004d2:	701a      	strb	r2, [r3, #0]
				break;
  4004d4:	4770      	bx	lr
			case 1:
				REG_PIOA_SODR |= disp_sel_0;
  4004d6:	4a40      	ldr	r2, [pc, #256]	; (4005d8 <display_select+0x140>)
  4004d8:	6813      	ldr	r3, [r2, #0]
  4004da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
  4004de:	6013      	str	r3, [r2, #0]
				REG_PIOA_CODR |= disp_sel_1;
  4004e0:	4b3c      	ldr	r3, [pc, #240]	; (4005d4 <display_select+0x13c>)
  4004e2:	681a      	ldr	r2, [r3, #0]
  4004e4:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
  4004e8:	601a      	str	r2, [r3, #0]
				REG_PIOA_CODR |= disp_sel_2;
  4004ea:	681a      	ldr	r2, [r3, #0]
  4004ec:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
  4004f0:	601a      	str	r2, [r3, #0]
				curr_display = 1;
  4004f2:	2201      	movs	r2, #1
  4004f4:	4b36      	ldr	r3, [pc, #216]	; (4005d0 <display_select+0x138>)
  4004f6:	701a      	strb	r2, [r3, #0]
				break;
  4004f8:	4770      	bx	lr
			case 2:
				REG_PIOA_CODR |= disp_sel_0;
  4004fa:	4b36      	ldr	r3, [pc, #216]	; (4005d4 <display_select+0x13c>)
  4004fc:	681a      	ldr	r2, [r3, #0]
  4004fe:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
  400502:	601a      	str	r2, [r3, #0]
				REG_PIOA_SODR |= disp_sel_1;
  400504:	4934      	ldr	r1, [pc, #208]	; (4005d8 <display_select+0x140>)
  400506:	680a      	ldr	r2, [r1, #0]
  400508:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
  40050c:	600a      	str	r2, [r1, #0]
				REG_PIOA_CODR |= disp_sel_2;
  40050e:	681a      	ldr	r2, [r3, #0]
  400510:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
  400514:	601a      	str	r2, [r3, #0]
				curr_display = 2;
  400516:	2202      	movs	r2, #2
  400518:	4b2d      	ldr	r3, [pc, #180]	; (4005d0 <display_select+0x138>)
  40051a:	701a      	strb	r2, [r3, #0]
				break;
  40051c:	4770      	bx	lr
			case 3:
				REG_PIOA_SODR |= disp_sel_0;
  40051e:	4b2e      	ldr	r3, [pc, #184]	; (4005d8 <display_select+0x140>)
  400520:	681a      	ldr	r2, [r3, #0]
  400522:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
  400526:	601a      	str	r2, [r3, #0]
				REG_PIOA_SODR |= disp_sel_1;
  400528:	681a      	ldr	r2, [r3, #0]
  40052a:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
  40052e:	601a      	str	r2, [r3, #0]
				REG_PIOA_CODR |= disp_sel_2;
  400530:	4a28      	ldr	r2, [pc, #160]	; (4005d4 <display_select+0x13c>)
  400532:	6813      	ldr	r3, [r2, #0]
  400534:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
  400538:	6013      	str	r3, [r2, #0]
				curr_display = 3;
  40053a:	2203      	movs	r2, #3
  40053c:	4b24      	ldr	r3, [pc, #144]	; (4005d0 <display_select+0x138>)
  40053e:	701a      	strb	r2, [r3, #0]
				break;
  400540:	4770      	bx	lr
			case 4:
				REG_PIOA_CODR |= disp_sel_0;
  400542:	4b24      	ldr	r3, [pc, #144]	; (4005d4 <display_select+0x13c>)
  400544:	681a      	ldr	r2, [r3, #0]
  400546:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
  40054a:	601a      	str	r2, [r3, #0]
				REG_PIOA_CODR |= disp_sel_1;
  40054c:	681a      	ldr	r2, [r3, #0]
  40054e:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
  400552:	601a      	str	r2, [r3, #0]
				REG_PIOA_SODR |= disp_sel_2;
  400554:	4a20      	ldr	r2, [pc, #128]	; (4005d8 <display_select+0x140>)
  400556:	6813      	ldr	r3, [r2, #0]
  400558:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
  40055c:	6013      	str	r3, [r2, #0]
				curr_display = 4;
  40055e:	2204      	movs	r2, #4
  400560:	4b1b      	ldr	r3, [pc, #108]	; (4005d0 <display_select+0x138>)
  400562:	701a      	strb	r2, [r3, #0]
				break;
  400564:	4770      	bx	lr
			case 5:
				REG_PIOA_SODR |= disp_sel_0;
  400566:	4b1c      	ldr	r3, [pc, #112]	; (4005d8 <display_select+0x140>)
  400568:	681a      	ldr	r2, [r3, #0]
  40056a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
  40056e:	601a      	str	r2, [r3, #0]
				REG_PIOA_CODR |= disp_sel_1;
  400570:	4918      	ldr	r1, [pc, #96]	; (4005d4 <display_select+0x13c>)
  400572:	680a      	ldr	r2, [r1, #0]
  400574:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
  400578:	600a      	str	r2, [r1, #0]
				REG_PIOA_SODR |= disp_sel_2;
  40057a:	681a      	ldr	r2, [r3, #0]
  40057c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
  400580:	601a      	str	r2, [r3, #0]
				curr_display = 5;
  400582:	2205      	movs	r2, #5
  400584:	4b12      	ldr	r3, [pc, #72]	; (4005d0 <display_select+0x138>)
  400586:	701a      	strb	r2, [r3, #0]
				break;
  400588:	4770      	bx	lr
			case 6:
				REG_PIOA_CODR |= disp_sel_0;
  40058a:	4a12      	ldr	r2, [pc, #72]	; (4005d4 <display_select+0x13c>)
  40058c:	6813      	ldr	r3, [r2, #0]
  40058e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
  400592:	6013      	str	r3, [r2, #0]
				REG_PIOA_SODR |= disp_sel_1;
  400594:	4b10      	ldr	r3, [pc, #64]	; (4005d8 <display_select+0x140>)
  400596:	681a      	ldr	r2, [r3, #0]
  400598:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
  40059c:	601a      	str	r2, [r3, #0]
				REG_PIOA_SODR |= disp_sel_2;
  40059e:	681a      	ldr	r2, [r3, #0]
  4005a0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
  4005a4:	601a      	str	r2, [r3, #0]
				curr_display = 6;
  4005a6:	2206      	movs	r2, #6
  4005a8:	4b09      	ldr	r3, [pc, #36]	; (4005d0 <display_select+0x138>)
  4005aa:	701a      	strb	r2, [r3, #0]
				break;
  4005ac:	4770      	bx	lr
			default:
				REG_PIOA_SODR |= disp_sel_0;
  4005ae:	4b0a      	ldr	r3, [pc, #40]	; (4005d8 <display_select+0x140>)
  4005b0:	681a      	ldr	r2, [r3, #0]
  4005b2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
  4005b6:	601a      	str	r2, [r3, #0]
				REG_PIOA_SODR |= disp_sel_1;
  4005b8:	681a      	ldr	r2, [r3, #0]
  4005ba:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
  4005be:	601a      	str	r2, [r3, #0]
				REG_PIOA_SODR |= disp_sel_2;
  4005c0:	681a      	ldr	r2, [r3, #0]
  4005c2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
  4005c6:	601a      	str	r2, [r3, #0]
				curr_display = 7;
  4005c8:	2207      	movs	r2, #7
  4005ca:	4b01      	ldr	r3, [pc, #4]	; (4005d0 <display_select+0x138>)
  4005cc:	701a      	strb	r2, [r3, #0]
  4005ce:	4770      	bx	lr
  4005d0:	2000000c 	.word	0x2000000c
  4005d4:	400e0e34 	.word	0x400e0e34
  4005d8:	400e0e30 	.word	0x400e0e30

004005dc <display_command>:
		}
	}
 }

 //Used to send command to the display during operation
 void display_command(uint8_t data, uint8_t d_id){
  4005dc:	b510      	push	{r4, lr}
  4005de:	b086      	sub	sp, #24
  4005e0:	4604      	mov	r4, r0
	 display_select(d_id);
  4005e2:	4608      	mov	r0, r1
  4005e4:	4b0a      	ldr	r3, [pc, #40]	; (400610 <display_command+0x34>)
  4005e6:	4798      	blx	r3

	 twi_packet_t packet_tx;
	 uint8_t command_buffer[] = {control_command, data};
  4005e8:	2300      	movs	r3, #0
  4005ea:	f88d 3000 	strb.w	r3, [sp]
  4005ee:	f88d 4001 	strb.w	r4, [sp, #1]

	 packet_tx.chip        = 0x3C;		// 0x3C is slave address for display
  4005f2:	223c      	movs	r2, #60	; 0x3c
  4005f4:	f88d 2014 	strb.w	r2, [sp, #20]
	 packet_tx.addr_length = 0;
  4005f8:	9302      	str	r3, [sp, #8]
	 packet_tx.buffer      = (uint8_t *) command_buffer;
  4005fa:	f8cd d00c 	str.w	sp, [sp, #12]
	 packet_tx.length      = 2;
  4005fe:	2302      	movs	r3, #2
  400600:	9304      	str	r3, [sp, #16]
	 twi_master_write(BOARD_BASE_TWI, &packet_tx);
  400602:	a901      	add	r1, sp, #4
  400604:	4803      	ldr	r0, [pc, #12]	; (400614 <display_command+0x38>)
  400606:	4b04      	ldr	r3, [pc, #16]	; (400618 <display_command+0x3c>)
  400608:	4798      	blx	r3

 }
  40060a:	b006      	add	sp, #24
  40060c:	bd10      	pop	{r4, pc}
  40060e:	bf00      	nop
  400610:	00400499 	.word	0x00400499
  400614:	40018000 	.word	0x40018000
  400618:	004002bd 	.word	0x004002bd

0040061c <display_data>:

 //used to send data to the display during operation
 void display_data(uint8_t data, uint8_t d_id){
  40061c:	b530      	push	{r4, r5, lr}
  40061e:	b087      	sub	sp, #28
  400620:	4605      	mov	r5, r0
  400622:	460c      	mov	r4, r1
	display_select(d_id);
  400624:	4608      	mov	r0, r1
  400626:	4b13      	ldr	r3, [pc, #76]	; (400674 <display_data+0x58>)
  400628:	4798      	blx	r3
	
	twi_packet_t packet_tx;
	uint8_t data_buffer[] = {control_data, data};
  40062a:	2340      	movs	r3, #64	; 0x40
  40062c:	f88d 3000 	strb.w	r3, [sp]
  400630:	f88d 5001 	strb.w	r5, [sp, #1]
	packet_tx.chip        = 0x3C;		// 0x3C is slave address for display
  400634:	233c      	movs	r3, #60	; 0x3c
  400636:	f88d 3014 	strb.w	r3, [sp, #20]
	packet_tx.addr_length = 0;
  40063a:	2300      	movs	r3, #0
  40063c:	9302      	str	r3, [sp, #8]
	packet_tx.buffer      = (uint8_t *) data_buffer;
  40063e:	f8cd d00c 	str.w	sp, [sp, #12]
	packet_tx.length      = 2;
  400642:	2302      	movs	r3, #2
  400644:	9304      	str	r3, [sp, #16]
	twi_master_write(BOARD_BASE_TWI, &packet_tx);
  400646:	a901      	add	r1, sp, #4
  400648:	480b      	ldr	r0, [pc, #44]	; (400678 <display_data+0x5c>)
  40064a:	4b0c      	ldr	r3, [pc, #48]	; (40067c <display_data+0x60>)
  40064c:	4798      	blx	r3
	disp_ptr_location[d_id] += 8;
  40064e:	4b0c      	ldr	r3, [pc, #48]	; (400680 <display_data+0x64>)
  400650:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
  400654:	3308      	adds	r3, #8
  400656:	b29b      	uxth	r3, r3
	if(disp_ptr_location[d_id] >= 4096) {
  400658:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
  40065c:	d203      	bcs.n	400666 <display_data+0x4a>
	packet_tx.chip        = 0x3C;		// 0x3C is slave address for display
	packet_tx.addr_length = 0;
	packet_tx.buffer      = (uint8_t *) data_buffer;
	packet_tx.length      = 2;
	twi_master_write(BOARD_BASE_TWI, &packet_tx);
	disp_ptr_location[d_id] += 8;
  40065e:	4a08      	ldr	r2, [pc, #32]	; (400680 <display_data+0x64>)
  400660:	f822 3014 	strh.w	r3, [r2, r4, lsl #1]
  400664:	e003      	b.n	40066e <display_data+0x52>
	if(disp_ptr_location[d_id] >= 4096) {
		disp_ptr_location[d_id] = 0;
  400666:	2200      	movs	r2, #0
  400668:	4b05      	ldr	r3, [pc, #20]	; (400680 <display_data+0x64>)
  40066a:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
	}
 }
  40066e:	b007      	add	sp, #28
  400670:	bd30      	pop	{r4, r5, pc}
  400672:	bf00      	nop
  400674:	00400499 	.word	0x00400499
  400678:	40018000 	.word	0x40018000
  40067c:	004002bd 	.word	0x004002bd
  400680:	20000614 	.word	0x20000614

00400684 <display_reset>:

 void display_reset() {
  400684:	b538      	push	{r3, r4, r5, lr}
	REG_PIOA_SODR |= disp_reset; //set high
  400686:	4c0a      	ldr	r4, [pc, #40]	; (4006b0 <display_reset+0x2c>)
  400688:	6823      	ldr	r3, [r4, #0]
  40068a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  40068e:	6023      	str	r3, [r4, #0]
	delay_ms(1);
  400690:	f641 30e7 	movw	r0, #7143	; 0x1be7
  400694:	4d07      	ldr	r5, [pc, #28]	; (4006b4 <display_reset+0x30>)
  400696:	47a8      	blx	r5
	REG_PIOA_CODR |= disp_reset; //set low
  400698:	4a07      	ldr	r2, [pc, #28]	; (4006b8 <display_reset+0x34>)
  40069a:	6813      	ldr	r3, [r2, #0]
  40069c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  4006a0:	6013      	str	r3, [r2, #0]
	delay_ms(10);
  4006a2:	4806      	ldr	r0, [pc, #24]	; (4006bc <display_reset+0x38>)
  4006a4:	47a8      	blx	r5
	REG_PIOA_SODR |= disp_reset; //set high and hold for normal operation
  4006a6:	6823      	ldr	r3, [r4, #0]
  4006a8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  4006ac:	6023      	str	r3, [r4, #0]
  4006ae:	bd38      	pop	{r3, r4, r5, pc}
  4006b0:	400e0e30 	.word	0x400e0e30
  4006b4:	20000001 	.word	0x20000001
  4006b8:	400e0e34 	.word	0x400e0e34
  4006bc:	00011705 	.word	0x00011705

004006c0 <display_init>:
 }

 void display_init(uint8_t d_id) {
  4006c0:	b538      	push	{r3, r4, r5, lr}
  4006c2:	4605      	mov	r5, r0

	// Init settings for OLED
	display_command(SSD1306_DISPLAYOFF, d_id);
  4006c4:	4601      	mov	r1, r0
  4006c6:	20ae      	movs	r0, #174	; 0xae
  4006c8:	4c26      	ldr	r4, [pc, #152]	; (400764 <display_init+0xa4>)
  4006ca:	47a0      	blx	r4

	display_command(SSD1306_SETDISPLAYCLOCKDIV, d_id);
  4006cc:	4629      	mov	r1, r5
  4006ce:	20d5      	movs	r0, #213	; 0xd5
  4006d0:	47a0      	blx	r4
	display_command(0x80, d_id);
  4006d2:	4629      	mov	r1, r5
  4006d4:	2080      	movs	r0, #128	; 0x80
  4006d6:	47a0      	blx	r4

	// Set no display offset
	display_command(SSD1306_SETDISPLAYOFFSET, d_id);
  4006d8:	4629      	mov	r1, r5
  4006da:	20d3      	movs	r0, #211	; 0xd3
  4006dc:	47a0      	blx	r4
	display_command(0x00, d_id);
  4006de:	4629      	mov	r1, r5
  4006e0:	2000      	movs	r0, #0
  4006e2:	47a0      	blx	r4

	// Start at line 0
	display_command(SSD1306_SETSTARTLINE, d_id);
  4006e4:	4629      	mov	r1, r5
  4006e6:	2040      	movs	r0, #64	; 0x40
  4006e8:	47a0      	blx	r4

	display_command(SSD1306_CHARGEPUMP, d_id);
  4006ea:	4629      	mov	r1, r5
  4006ec:	208d      	movs	r0, #141	; 0x8d
  4006ee:	47a0      	blx	r4
	display_command(0x14, d_id);	//internal VCC from charge pump
  4006f0:	4629      	mov	r1, r5
  4006f2:	2014      	movs	r0, #20
  4006f4:	47a0      	blx	r4

	// Set segment remap
	display_command(0xA0, d_id);
  4006f6:	4629      	mov	r1, r5
  4006f8:	20a0      	movs	r0, #160	; 0xa0
  4006fa:	47a0      	blx	r4

	display_command(SSD1306_SETCOMPINS, d_id);
  4006fc:	4629      	mov	r1, r5
  4006fe:	20da      	movs	r0, #218	; 0xda
  400700:	47a0      	blx	r4
	display_command(0x02, d_id);
  400702:	4629      	mov	r1, r5
  400704:	2002      	movs	r0, #2
  400706:	47a0      	blx	r4

	display_command(SSD1306_SETCONTRAST, d_id);
  400708:	4629      	mov	r1, r5
  40070a:	2081      	movs	r0, #129	; 0x81
  40070c:	47a0      	blx	r4
	display_command(0xCF, d_id);
  40070e:	4629      	mov	r1, r5
  400710:	20cf      	movs	r0, #207	; 0xcf
  400712:	47a0      	blx	r4

	display_command(SSD1306_SETPRECHARGE, d_id);
  400714:	4629      	mov	r1, r5
  400716:	20d9      	movs	r0, #217	; 0xd9
  400718:	47a0      	blx	r4
	display_command(0xF1, d_id);
  40071a:	4629      	mov	r1, r5
  40071c:	20f1      	movs	r0, #241	; 0xf1
  40071e:	47a0      	blx	r4

	display_command(SSD1306_SETVCOMDETECT, d_id);
  400720:	4629      	mov	r1, r5
  400722:	20db      	movs	r0, #219	; 0xdb
  400724:	47a0      	blx	r4
	display_command(0x40, d_id);
  400726:	4629      	mov	r1, r5
  400728:	2040      	movs	r0, #64	; 0x40
  40072a:	47a0      	blx	r4

	display_command(SSD1306_NORMALDISPLAY, d_id);
  40072c:	4629      	mov	r1, r5
  40072e:	20a6      	movs	r0, #166	; 0xa6
  400730:	47a0      	blx	r4
	display_command(SSD1306_DISPLAYON, d_id);
  400732:	4629      	mov	r1, r5
  400734:	20af      	movs	r0, #175	; 0xaf
  400736:	47a0      	blx	r4
	display_command(SSD1306_MEMORYMODE, d_id);
  400738:	4629      	mov	r1, r5
  40073a:	2020      	movs	r0, #32
  40073c:	47a0      	blx	r4
	display_command(SSD1306_VERTADDR, d_id);
  40073e:	4629      	mov	r1, r5
  400740:	2001      	movs	r0, #1
  400742:	47a0      	blx	r4

	// Adjusting for 32 height display
	display_command(SSD1306_EDITPAGEADDR, d_id);
  400744:	4629      	mov	r1, r5
  400746:	2022      	movs	r0, #34	; 0x22
  400748:	47a0      	blx	r4
	display_command(0, d_id);
  40074a:	4629      	mov	r1, r5
  40074c:	2000      	movs	r0, #0
  40074e:	47a0      	blx	r4
	display_command(3, d_id);
  400750:	4629      	mov	r1, r5
  400752:	2003      	movs	r0, #3
  400754:	47a0      	blx	r4

	display_command(SSD1306_SETMULTIPLEX, d_id);
  400756:	4629      	mov	r1, r5
  400758:	20a8      	movs	r0, #168	; 0xa8
  40075a:	47a0      	blx	r4
	display_command(31, d_id);
  40075c:	4629      	mov	r1, r5
  40075e:	201f      	movs	r0, #31
  400760:	47a0      	blx	r4
  400762:	bd38      	pop	{r3, r4, r5, pc}
  400764:	004005dd 	.word	0x004005dd

00400768 <all_displays_init>:
 }

 void all_displays_init(void) {
  400768:	b510      	push	{r4, lr}

	

	// Configure registers used for display mux lines
	REG_PIOA_PER |= disp_sel_0; //enable PIO controller on PA28
  40076a:	4a1a      	ldr	r2, [pc, #104]	; (4007d4 <all_displays_init+0x6c>)
  40076c:	6813      	ldr	r3, [r2, #0]
  40076e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
  400772:	6013      	str	r3, [r2, #0]
	REG_PIOA_OER |= disp_sel_0; //enable output on pin PA28
  400774:	4b18      	ldr	r3, [pc, #96]	; (4007d8 <all_displays_init+0x70>)
  400776:	6819      	ldr	r1, [r3, #0]
  400778:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
  40077c:	6019      	str	r1, [r3, #0]
	REG_PIOA_PER |= disp_sel_1; //enable PIO controller on PA29
  40077e:	6811      	ldr	r1, [r2, #0]
  400780:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
  400784:	6011      	str	r1, [r2, #0]
	REG_PIOA_OER |= disp_sel_1; //enable output on pin PA29
  400786:	6819      	ldr	r1, [r3, #0]
  400788:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
  40078c:	6019      	str	r1, [r3, #0]
	REG_PIOA_PER |= disp_sel_2; //enable PIO controller on PA30
  40078e:	6811      	ldr	r1, [r2, #0]
  400790:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
  400794:	6011      	str	r1, [r2, #0]
	REG_PIOA_OER |= disp_sel_2; //enable output on pin PA30
  400796:	6819      	ldr	r1, [r3, #0]
  400798:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
  40079c:	6019      	str	r1, [r3, #0]

	// Configure register used for display reset
	REG_PIOA_PER |= disp_reset; //enable PIO controller on PA31
  40079e:	6811      	ldr	r1, [r2, #0]
  4007a0:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
  4007a4:	6011      	str	r1, [r2, #0]
	REG_PIOA_OER |= disp_reset; //enable output on pin PA31
  4007a6:	681a      	ldr	r2, [r3, #0]
  4007a8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
  4007ac:	601a      	str	r2, [r3, #0]

	display_reset();
  4007ae:	4b0b      	ldr	r3, [pc, #44]	; (4007dc <all_displays_init+0x74>)
  4007b0:	4798      	blx	r3

 	display_init(0);
  4007b2:	2000      	movs	r0, #0
  4007b4:	4c0a      	ldr	r4, [pc, #40]	; (4007e0 <all_displays_init+0x78>)
  4007b6:	47a0      	blx	r4
    display_init(1);
  4007b8:	2001      	movs	r0, #1
  4007ba:	47a0      	blx	r4
    display_init(2);
  4007bc:	2002      	movs	r0, #2
  4007be:	47a0      	blx	r4
  	display_init(3);
  4007c0:	2003      	movs	r0, #3
  4007c2:	47a0      	blx	r4
  	display_init(4);
  4007c4:	2004      	movs	r0, #4
  4007c6:	47a0      	blx	r4
  	display_init(5);
  4007c8:	2005      	movs	r0, #5
  4007ca:	47a0      	blx	r4
  	display_init(6);
  4007cc:	2006      	movs	r0, #6
  4007ce:	47a0      	blx	r4
  4007d0:	bd10      	pop	{r4, pc}
  4007d2:	bf00      	nop
  4007d4:	400e0e00 	.word	0x400e0e00
  4007d8:	400e0e10 	.word	0x400e0e10
  4007dc:	00400685 	.word	0x00400685
  4007e0:	004006c1 	.word	0x004006c1

004007e4 <finish_display>:
		inverted[d_id] = 0;
	}
 }

 void finish_display(uint8_t d_id) {
	while(disp_ptr_location[d_id] > 0 && disp_ptr_location[d_id] <= 4096) {
  4007e4:	4b0e      	ldr	r3, [pc, #56]	; (400820 <finish_display+0x3c>)
  4007e6:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
  4007ea:	3b01      	subs	r3, #1
  4007ec:	b29b      	uxth	r3, r3
  4007ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
  4007f2:	d213      	bcs.n	40081c <finish_display+0x38>
		display_command(SSD1306_NORMALDISPLAY, d_id);
		inverted[d_id] = 0;
	}
 }

 void finish_display(uint8_t d_id) {
  4007f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4007f8:	4605      	mov	r5, r0
  4007fa:	4604      	mov	r4, r0
	while(disp_ptr_location[d_id] > 0 && disp_ptr_location[d_id] <= 4096) {
		display_data(0, d_id);
  4007fc:	f04f 0800 	mov.w	r8, #0
  400800:	4f08      	ldr	r7, [pc, #32]	; (400824 <finish_display+0x40>)
		inverted[d_id] = 0;
	}
 }

 void finish_display(uint8_t d_id) {
	while(disp_ptr_location[d_id] > 0 && disp_ptr_location[d_id] <= 4096) {
  400802:	4e07      	ldr	r6, [pc, #28]	; (400820 <finish_display+0x3c>)
		display_data(0, d_id);
  400804:	4621      	mov	r1, r4
  400806:	4640      	mov	r0, r8
  400808:	47b8      	blx	r7
		inverted[d_id] = 0;
	}
 }

 void finish_display(uint8_t d_id) {
	while(disp_ptr_location[d_id] > 0 && disp_ptr_location[d_id] <= 4096) {
  40080a:	f836 3015 	ldrh.w	r3, [r6, r5, lsl #1]
  40080e:	3b01      	subs	r3, #1
  400810:	b29b      	uxth	r3, r3
  400812:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
  400816:	d3f5      	bcc.n	400804 <finish_display+0x20>
  400818:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40081c:	4770      	bx	lr
  40081e:	bf00      	nop
  400820:	20000614 	.word	0x20000614
  400824:	0040061d 	.word	0x0040061d

00400828 <display_char>:
	finish_display(d_id);
	finish_display(d_id);
 }

  // Displays 1 byte of space and 3 bytes of character at a time
 void display_char(char input, uint8_t font_size, uint8_t d_id) {
  400828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40082c:	b085      	sub	sp, #20
  40082e:	9201      	str	r2, [sp, #4]
	  // Lets us customize our space width, input parameter can be added if needed
	if(input == ' ') {
  400830:	2820      	cmp	r0, #32
  400832:	d108      	bne.n	400846 <display_char+0x1e>
  400834:	2408      	movs	r4, #8
		int i;
		for(i = 8; i > 0; i--) {
			display_data(0, d_id);
  400836:	2600      	movs	r6, #0
  400838:	4da6      	ldr	r5, [pc, #664]	; (400ad4 <display_char+0x2ac>)
  40083a:	9901      	ldr	r1, [sp, #4]
  40083c:	4630      	mov	r0, r6
  40083e:	47a8      	blx	r5
  // Displays 1 byte of space and 3 bytes of character at a time
 void display_char(char input, uint8_t font_size, uint8_t d_id) {
	  // Lets us customize our space width, input parameter can be added if needed
	if(input == ' ') {
		int i;
		for(i = 8; i > 0; i--) {
  400840:	3c01      	subs	r4, #1
  400842:	d1fa      	bne.n	40083a <display_char+0x12>
  400844:	e142      	b.n	400acc <display_char+0x2a4>
  400846:	4682      	mov	sl, r0
	else {
		uint16_t font_index = 0;
		uint8_t byte_1;
		uint8_t byte_2;
		uint8_t byte_3;
		if(font_size == 28) {
  400848:	291c      	cmp	r1, #28
  40084a:	d141      	bne.n	4008d0 <display_char+0xa8>
			uint16_t width = getWidth_28();
  40084c:	4ba2      	ldr	r3, [pc, #648]	; (400ad8 <display_char+0x2b0>)
  40084e:	4798      	blx	r3
  400850:	fa1f fb80 	uxth.w	fp, r0
			while (font_index < width) {
  400854:	f1bb 0f00 	cmp.w	fp, #0
  400858:	f000 8138 	beq.w	400acc <display_char+0x2a4>
				if(input != '#' && input != 'b') {
					display_data(0, d_id);
				}
				byte_1 = getByte_28(input, font_index);
				byte_2 = getByte_28(input, font_index + width);
				byte_3 = getByte_28(input, font_index + 2*width);
  40085c:	ea4f 034b 	mov.w	r3, fp, lsl #1
  400860:	fa1f f983 	uxth.w	r9, r3
  400864:	465c      	mov	r4, fp
  400866:	2600      	movs	r6, #0
			while (font_index < width) {
				//Sharps and flats are elevated, rest of characters are not
				if(input != '#' && input != 'b') {
					display_data(0, d_id);
				}
				byte_1 = getByte_28(input, font_index);
  400868:	f8df 827c 	ldr.w	r8, [pc, #636]	; 400ae8 <display_char+0x2c0>
				byte_2 = getByte_28(input, font_index + width);
				byte_3 = getByte_28(input, font_index + 2*width);
				display_data(byte_1, d_id);
  40086c:	4f99      	ldr	r7, [pc, #612]	; (400ad4 <display_char+0x2ac>)
  40086e:	464b      	mov	r3, r9
  400870:	46d9      	mov	r9, fp
  400872:	469b      	mov	fp, r3
  400874:	b2b5      	uxth	r5, r6
		uint8_t byte_3;
		if(font_size == 28) {
			uint16_t width = getWidth_28();
			while (font_index < width) {
				//Sharps and flats are elevated, rest of characters are not
				if(input != '#' && input != 'b') {
  400876:	f1ba 0f23 	cmp.w	sl, #35	; 0x23
  40087a:	f000 80bb 	beq.w	4009f4 <display_char+0x1cc>
  40087e:	f1ba 0f62 	cmp.w	sl, #98	; 0x62
  400882:	f000 809f 	beq.w	4009c4 <display_char+0x19c>
					display_data(0, d_id);
  400886:	9901      	ldr	r1, [sp, #4]
  400888:	2000      	movs	r0, #0
  40088a:	47b8      	blx	r7
				}
				byte_1 = getByte_28(input, font_index);
  40088c:	4629      	mov	r1, r5
  40088e:	4650      	mov	r0, sl
  400890:	47c0      	blx	r8
  400892:	9002      	str	r0, [sp, #8]
				byte_2 = getByte_28(input, font_index + width);
  400894:	4621      	mov	r1, r4
  400896:	4650      	mov	r0, sl
  400898:	47c0      	blx	r8
  40089a:	9003      	str	r0, [sp, #12]
				byte_3 = getByte_28(input, font_index + 2*width);
  40089c:	eb05 010b 	add.w	r1, r5, fp
  4008a0:	b289      	uxth	r1, r1
  4008a2:	4650      	mov	r0, sl
  4008a4:	47c0      	blx	r8
  4008a6:	4605      	mov	r5, r0
				display_data(byte_1, d_id);
  4008a8:	9901      	ldr	r1, [sp, #4]
  4008aa:	9802      	ldr	r0, [sp, #8]
  4008ac:	47b8      	blx	r7
				display_data(byte_2, d_id);
  4008ae:	9901      	ldr	r1, [sp, #4]
  4008b0:	9803      	ldr	r0, [sp, #12]
  4008b2:	47b8      	blx	r7
				display_data(byte_3, d_id);
  4008b4:	9901      	ldr	r1, [sp, #4]
  4008b6:	4628      	mov	r0, r5
  4008b8:	47b8      	blx	r7
  4008ba:	e002      	b.n	4008c2 <display_char+0x9a>
				//Sharps and flats are elevated, rest of characters are not
				if(input == '#' || input == 'b') {
					display_data(0, d_id);
  4008bc:	9901      	ldr	r1, [sp, #4]
  4008be:	2000      	movs	r0, #0
  4008c0:	47b8      	blx	r7
  4008c2:	3601      	adds	r6, #1
  4008c4:	3401      	adds	r4, #1
  4008c6:	b2a4      	uxth	r4, r4
		uint8_t byte_1;
		uint8_t byte_2;
		uint8_t byte_3;
		if(font_size == 28) {
			uint16_t width = getWidth_28();
			while (font_index < width) {
  4008c8:	b2b3      	uxth	r3, r6
  4008ca:	454b      	cmp	r3, r9
  4008cc:	d3d2      	bcc.n	400874 <display_char+0x4c>
  4008ce:	e0fd      	b.n	400acc <display_char+0x2a4>
				}
				font_index++;
			}
		}

		else if(font_size == 22) {
  4008d0:	2916      	cmp	r1, #22
  4008d2:	d141      	bne.n	400958 <display_char+0x130>
			uint16_t width = getWidth_22();
  4008d4:	4b81      	ldr	r3, [pc, #516]	; (400adc <display_char+0x2b4>)
  4008d6:	4798      	blx	r3
  4008d8:	fa1f fb80 	uxth.w	fp, r0
			while (font_index < width) {
  4008dc:	f1bb 0f00 	cmp.w	fp, #0
  4008e0:	f000 80f4 	beq.w	400acc <display_char+0x2a4>
				if(input != '#' && input != 'b') {
					display_data(0, d_id);
				}
				byte_1 = getByte_22(input, font_index);
				byte_2 = getByte_22(input, font_index + width);
				byte_3 = getByte_22(input, font_index + 2*width);
  4008e4:	ea4f 034b 	mov.w	r3, fp, lsl #1
  4008e8:	fa1f f983 	uxth.w	r9, r3
  4008ec:	465c      	mov	r4, fp
  4008ee:	2600      	movs	r6, #0
			while (font_index < width) {
				//Sharps and flats are elevated, rest of characters are not
				if(input != '#' && input != 'b') {
					display_data(0, d_id);
				}
				byte_1 = getByte_22(input, font_index);
  4008f0:	f8df 81f8 	ldr.w	r8, [pc, #504]	; 400aec <display_char+0x2c4>
				byte_2 = getByte_22(input, font_index + width);
				byte_3 = getByte_22(input, font_index + 2*width);
				display_data(byte_1, d_id);
  4008f4:	4f77      	ldr	r7, [pc, #476]	; (400ad4 <display_char+0x2ac>)
  4008f6:	464b      	mov	r3, r9
  4008f8:	46d9      	mov	r9, fp
  4008fa:	469b      	mov	fp, r3
  4008fc:	b2b5      	uxth	r5, r6

		else if(font_size == 22) {
			uint16_t width = getWidth_22();
			while (font_index < width) {
				//Sharps and flats are elevated, rest of characters are not
				if(input != '#' && input != 'b') {
  4008fe:	f1ba 0f23 	cmp.w	sl, #35	; 0x23
  400902:	f000 808f 	beq.w	400a24 <display_char+0x1fc>
  400906:	f1ba 0f62 	cmp.w	sl, #98	; 0x62
  40090a:	f000 80a3 	beq.w	400a54 <display_char+0x22c>
					display_data(0, d_id);
  40090e:	9901      	ldr	r1, [sp, #4]
  400910:	2000      	movs	r0, #0
  400912:	47b8      	blx	r7
				}
				byte_1 = getByte_22(input, font_index);
  400914:	4629      	mov	r1, r5
  400916:	4650      	mov	r0, sl
  400918:	47c0      	blx	r8
  40091a:	9002      	str	r0, [sp, #8]
				byte_2 = getByte_22(input, font_index + width);
  40091c:	4621      	mov	r1, r4
  40091e:	4650      	mov	r0, sl
  400920:	47c0      	blx	r8
  400922:	9003      	str	r0, [sp, #12]
				byte_3 = getByte_22(input, font_index + 2*width);
  400924:	eb05 010b 	add.w	r1, r5, fp
  400928:	b289      	uxth	r1, r1
  40092a:	4650      	mov	r0, sl
  40092c:	47c0      	blx	r8
  40092e:	4605      	mov	r5, r0
				display_data(byte_1, d_id);
  400930:	9901      	ldr	r1, [sp, #4]
  400932:	9802      	ldr	r0, [sp, #8]
  400934:	47b8      	blx	r7
				display_data(byte_2, d_id);
  400936:	9901      	ldr	r1, [sp, #4]
  400938:	9803      	ldr	r0, [sp, #12]
  40093a:	47b8      	blx	r7
				display_data(byte_3, d_id);
  40093c:	9901      	ldr	r1, [sp, #4]
  40093e:	4628      	mov	r0, r5
  400940:	47b8      	blx	r7
  400942:	e002      	b.n	40094a <display_char+0x122>
				//Sharps and flats are elevated, rest of characters are not
				if(input == '#' || input == 'b') {
					display_data(0, d_id);
  400944:	9901      	ldr	r1, [sp, #4]
  400946:	2000      	movs	r0, #0
  400948:	47b8      	blx	r7
  40094a:	3601      	adds	r6, #1
  40094c:	3401      	adds	r4, #1
  40094e:	b2a4      	uxth	r4, r4
			}
		}

		else if(font_size == 22) {
			uint16_t width = getWidth_22();
			while (font_index < width) {
  400950:	b2b3      	uxth	r3, r6
  400952:	4599      	cmp	r9, r3
  400954:	d8d2      	bhi.n	4008fc <display_char+0xd4>
  400956:	e0b9      	b.n	400acc <display_char+0x2a4>
			}
		}

		// Defaults to 18 to reduce errors.
		else {
			uint16_t width = getWidth_18();
  400958:	4b61      	ldr	r3, [pc, #388]	; (400ae0 <display_char+0x2b8>)
  40095a:	4798      	blx	r3
  40095c:	fa1f f980 	uxth.w	r9, r0
			while (font_index < width) {
  400960:	f1b9 0f00 	cmp.w	r9, #0
  400964:	f000 80b2 	beq.w	400acc <display_char+0x2a4>
  400968:	464d      	mov	r5, r9
  40096a:	2400      	movs	r4, #0
				//Sharps and flats are elevated, rest of characters are not
				if(input != '#' && input != 'b') {
					display_data(0, d_id);
				}
				display_data(0, d_id);
  40096c:	46a0      	mov	r8, r4
  40096e:	4e59      	ldr	r6, [pc, #356]	; (400ad4 <display_char+0x2ac>)
				byte_1 = getByte_18(input, font_index);
  400970:	4f5c      	ldr	r7, [pc, #368]	; (400ae4 <display_char+0x2bc>)
  400972:	f8dd b004 	ldr.w	fp, [sp, #4]
		// Defaults to 18 to reduce errors.
		else {
			uint16_t width = getWidth_18();
			while (font_index < width) {
				//Sharps and flats are elevated, rest of characters are not
				if(input != '#' && input != 'b') {
  400976:	f1ba 0f23 	cmp.w	sl, #35	; 0x23
  40097a:	f000 8083 	beq.w	400a84 <display_char+0x25c>
  40097e:	f1ba 0f62 	cmp.w	sl, #98	; 0x62
  400982:	f000 8091 	beq.w	400aa8 <display_char+0x280>
					display_data(0, d_id);
  400986:	4659      	mov	r1, fp
  400988:	4640      	mov	r0, r8
  40098a:	47b0      	blx	r6
				}
				display_data(0, d_id);
  40098c:	4659      	mov	r1, fp
  40098e:	4640      	mov	r0, r8
  400990:	47b0      	blx	r6
				byte_1 = getByte_18(input, font_index);
  400992:	4621      	mov	r1, r4
  400994:	4650      	mov	r0, sl
  400996:	47b8      	blx	r7
  400998:	9001      	str	r0, [sp, #4]
				byte_2 = getByte_18(input, font_index + width);
  40099a:	4629      	mov	r1, r5
  40099c:	4650      	mov	r0, sl
  40099e:	47b8      	blx	r7
  4009a0:	9002      	str	r0, [sp, #8]
				display_data(byte_1, d_id);
  4009a2:	4659      	mov	r1, fp
  4009a4:	9801      	ldr	r0, [sp, #4]
  4009a6:	47b0      	blx	r6
				display_data(byte_2, d_id);
  4009a8:	4659      	mov	r1, fp
  4009aa:	9802      	ldr	r0, [sp, #8]
  4009ac:	47b0      	blx	r6
  4009ae:	e002      	b.n	4009b6 <display_char+0x18e>
				//Sharps and flats are elevated, rest of characters are not
				if(input == '#' || input == 'b') {
					display_data(0, d_id);
  4009b0:	4659      	mov	r1, fp
  4009b2:	4640      	mov	r0, r8
  4009b4:	47b0      	blx	r6
				}
				font_index++;
  4009b6:	3401      	adds	r4, #1
  4009b8:	b2a4      	uxth	r4, r4
  4009ba:	3501      	adds	r5, #1
  4009bc:	b2ad      	uxth	r5, r5
		}

		// Defaults to 18 to reduce errors.
		else {
			uint16_t width = getWidth_18();
			while (font_index < width) {
  4009be:	45a1      	cmp	r9, r4
  4009c0:	d1d9      	bne.n	400976 <display_char+0x14e>
  4009c2:	e083      	b.n	400acc <display_char+0x2a4>
			while (font_index < width) {
				//Sharps and flats are elevated, rest of characters are not
				if(input != '#' && input != 'b') {
					display_data(0, d_id);
				}
				byte_1 = getByte_28(input, font_index);
  4009c4:	4629      	mov	r1, r5
  4009c6:	2062      	movs	r0, #98	; 0x62
  4009c8:	47c0      	blx	r8
  4009ca:	9002      	str	r0, [sp, #8]
				byte_2 = getByte_28(input, font_index + width);
  4009cc:	4621      	mov	r1, r4
  4009ce:	2062      	movs	r0, #98	; 0x62
  4009d0:	47c0      	blx	r8
  4009d2:	9003      	str	r0, [sp, #12]
				byte_3 = getByte_28(input, font_index + 2*width);
  4009d4:	eb05 010b 	add.w	r1, r5, fp
  4009d8:	b289      	uxth	r1, r1
  4009da:	2062      	movs	r0, #98	; 0x62
  4009dc:	47c0      	blx	r8
  4009de:	4605      	mov	r5, r0
				display_data(byte_1, d_id);
  4009e0:	9901      	ldr	r1, [sp, #4]
  4009e2:	9802      	ldr	r0, [sp, #8]
  4009e4:	47b8      	blx	r7
				display_data(byte_2, d_id);
  4009e6:	9901      	ldr	r1, [sp, #4]
  4009e8:	9803      	ldr	r0, [sp, #12]
  4009ea:	47b8      	blx	r7
				display_data(byte_3, d_id);
  4009ec:	9901      	ldr	r1, [sp, #4]
  4009ee:	4628      	mov	r0, r5
  4009f0:	47b8      	blx	r7
  4009f2:	e763      	b.n	4008bc <display_char+0x94>
			while (font_index < width) {
				//Sharps and flats are elevated, rest of characters are not
				if(input != '#' && input != 'b') {
					display_data(0, d_id);
				}
				byte_1 = getByte_28(input, font_index);
  4009f4:	4629      	mov	r1, r5
  4009f6:	2023      	movs	r0, #35	; 0x23
  4009f8:	47c0      	blx	r8
  4009fa:	9002      	str	r0, [sp, #8]
				byte_2 = getByte_28(input, font_index + width);
  4009fc:	4621      	mov	r1, r4
  4009fe:	2023      	movs	r0, #35	; 0x23
  400a00:	47c0      	blx	r8
  400a02:	9003      	str	r0, [sp, #12]
				byte_3 = getByte_28(input, font_index + 2*width);
  400a04:	eb05 010b 	add.w	r1, r5, fp
  400a08:	b289      	uxth	r1, r1
  400a0a:	2023      	movs	r0, #35	; 0x23
  400a0c:	47c0      	blx	r8
  400a0e:	4605      	mov	r5, r0
				display_data(byte_1, d_id);
  400a10:	9901      	ldr	r1, [sp, #4]
  400a12:	9802      	ldr	r0, [sp, #8]
  400a14:	47b8      	blx	r7
				display_data(byte_2, d_id);
  400a16:	9901      	ldr	r1, [sp, #4]
  400a18:	9803      	ldr	r0, [sp, #12]
  400a1a:	47b8      	blx	r7
				display_data(byte_3, d_id);
  400a1c:	9901      	ldr	r1, [sp, #4]
  400a1e:	4628      	mov	r0, r5
  400a20:	47b8      	blx	r7
  400a22:	e74b      	b.n	4008bc <display_char+0x94>
			while (font_index < width) {
				//Sharps and flats are elevated, rest of characters are not
				if(input != '#' && input != 'b') {
					display_data(0, d_id);
				}
				byte_1 = getByte_22(input, font_index);
  400a24:	4629      	mov	r1, r5
  400a26:	2023      	movs	r0, #35	; 0x23
  400a28:	47c0      	blx	r8
  400a2a:	9002      	str	r0, [sp, #8]
				byte_2 = getByte_22(input, font_index + width);
  400a2c:	4621      	mov	r1, r4
  400a2e:	2023      	movs	r0, #35	; 0x23
  400a30:	47c0      	blx	r8
  400a32:	9003      	str	r0, [sp, #12]
				byte_3 = getByte_22(input, font_index + 2*width);
  400a34:	eb05 010b 	add.w	r1, r5, fp
  400a38:	b289      	uxth	r1, r1
  400a3a:	2023      	movs	r0, #35	; 0x23
  400a3c:	47c0      	blx	r8
  400a3e:	4605      	mov	r5, r0
				display_data(byte_1, d_id);
  400a40:	9901      	ldr	r1, [sp, #4]
  400a42:	9802      	ldr	r0, [sp, #8]
  400a44:	47b8      	blx	r7
				display_data(byte_2, d_id);
  400a46:	9901      	ldr	r1, [sp, #4]
  400a48:	9803      	ldr	r0, [sp, #12]
  400a4a:	47b8      	blx	r7
				display_data(byte_3, d_id);
  400a4c:	9901      	ldr	r1, [sp, #4]
  400a4e:	4628      	mov	r0, r5
  400a50:	47b8      	blx	r7
  400a52:	e777      	b.n	400944 <display_char+0x11c>
			while (font_index < width) {
				//Sharps and flats are elevated, rest of characters are not
				if(input != '#' && input != 'b') {
					display_data(0, d_id);
				}
				byte_1 = getByte_22(input, font_index);
  400a54:	4629      	mov	r1, r5
  400a56:	2062      	movs	r0, #98	; 0x62
  400a58:	47c0      	blx	r8
  400a5a:	9002      	str	r0, [sp, #8]
				byte_2 = getByte_22(input, font_index + width);
  400a5c:	4621      	mov	r1, r4
  400a5e:	2062      	movs	r0, #98	; 0x62
  400a60:	47c0      	blx	r8
  400a62:	9003      	str	r0, [sp, #12]
				byte_3 = getByte_22(input, font_index + 2*width);
  400a64:	eb05 010b 	add.w	r1, r5, fp
  400a68:	b289      	uxth	r1, r1
  400a6a:	2062      	movs	r0, #98	; 0x62
  400a6c:	47c0      	blx	r8
  400a6e:	4605      	mov	r5, r0
				display_data(byte_1, d_id);
  400a70:	9901      	ldr	r1, [sp, #4]
  400a72:	9802      	ldr	r0, [sp, #8]
  400a74:	47b8      	blx	r7
				display_data(byte_2, d_id);
  400a76:	9901      	ldr	r1, [sp, #4]
  400a78:	9803      	ldr	r0, [sp, #12]
  400a7a:	47b8      	blx	r7
				display_data(byte_3, d_id);
  400a7c:	9901      	ldr	r1, [sp, #4]
  400a7e:	4628      	mov	r0, r5
  400a80:	47b8      	blx	r7
  400a82:	e75f      	b.n	400944 <display_char+0x11c>
			while (font_index < width) {
				//Sharps and flats are elevated, rest of characters are not
				if(input != '#' && input != 'b') {
					display_data(0, d_id);
				}
				display_data(0, d_id);
  400a84:	4659      	mov	r1, fp
  400a86:	4640      	mov	r0, r8
  400a88:	47b0      	blx	r6
				byte_1 = getByte_18(input, font_index);
  400a8a:	4621      	mov	r1, r4
  400a8c:	2023      	movs	r0, #35	; 0x23
  400a8e:	47b8      	blx	r7
  400a90:	9001      	str	r0, [sp, #4]
				byte_2 = getByte_18(input, font_index + width);
  400a92:	4629      	mov	r1, r5
  400a94:	2023      	movs	r0, #35	; 0x23
  400a96:	47b8      	blx	r7
  400a98:	9002      	str	r0, [sp, #8]
				display_data(byte_1, d_id);
  400a9a:	4659      	mov	r1, fp
  400a9c:	9801      	ldr	r0, [sp, #4]
  400a9e:	47b0      	blx	r6
				display_data(byte_2, d_id);
  400aa0:	4659      	mov	r1, fp
  400aa2:	9802      	ldr	r0, [sp, #8]
  400aa4:	47b0      	blx	r6
  400aa6:	e783      	b.n	4009b0 <display_char+0x188>
			while (font_index < width) {
				//Sharps and flats are elevated, rest of characters are not
				if(input != '#' && input != 'b') {
					display_data(0, d_id);
				}
				display_data(0, d_id);
  400aa8:	4659      	mov	r1, fp
  400aaa:	4640      	mov	r0, r8
  400aac:	47b0      	blx	r6
				byte_1 = getByte_18(input, font_index);
  400aae:	4621      	mov	r1, r4
  400ab0:	2062      	movs	r0, #98	; 0x62
  400ab2:	47b8      	blx	r7
  400ab4:	9001      	str	r0, [sp, #4]
				byte_2 = getByte_18(input, font_index + width);
  400ab6:	4629      	mov	r1, r5
  400ab8:	2062      	movs	r0, #98	; 0x62
  400aba:	47b8      	blx	r7
  400abc:	9002      	str	r0, [sp, #8]
				display_data(byte_1, d_id);
  400abe:	4659      	mov	r1, fp
  400ac0:	9801      	ldr	r0, [sp, #4]
  400ac2:	47b0      	blx	r6
				display_data(byte_2, d_id);
  400ac4:	4659      	mov	r1, fp
  400ac6:	9802      	ldr	r0, [sp, #8]
  400ac8:	47b0      	blx	r6
  400aca:	e771      	b.n	4009b0 <display_char+0x188>
				}
				font_index++;
			}
		}
	}
 }
  400acc:	b005      	add	sp, #20
  400ace:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  400ad2:	bf00      	nop
  400ad4:	0040061d 	.word	0x0040061d
  400ad8:	004021f5 	.word	0x004021f5
  400adc:	004021f9 	.word	0x004021f9
  400ae0:	004021fd 	.word	0x004021fd
  400ae4:	00402251 	.word	0x00402251
  400ae8:	00402201 	.word	0x00402201
  400aec:	0040221d 	.word	0x0040221d

00400af0 <display_char_inverted>:

 // Inverted version of display_char
 void display_char_inverted(char input, uint8_t font_size, uint8_t d_id) {
  400af0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400af4:	b085      	sub	sp, #20
  400af6:	9201      	str	r2, [sp, #4]
	 // Lets us customize our space width, input parameter can be added if needed
	 if(input == ' ') {
  400af8:	2820      	cmp	r0, #32
  400afa:	d108      	bne.n	400b0e <display_char_inverted+0x1e>
  400afc:	2408      	movs	r4, #8
		 int i;
		 for(i = 8; i > 0; i--) {
			 display_data(0xFF, d_id);
  400afe:	26ff      	movs	r6, #255	; 0xff
  400b00:	4db5      	ldr	r5, [pc, #724]	; (400dd8 <display_char_inverted+0x2e8>)
  400b02:	9901      	ldr	r1, [sp, #4]
  400b04:	4630      	mov	r0, r6
  400b06:	47a8      	blx	r5
 // Inverted version of display_char
 void display_char_inverted(char input, uint8_t font_size, uint8_t d_id) {
	 // Lets us customize our space width, input parameter can be added if needed
	 if(input == ' ') {
		 int i;
		 for(i = 8; i > 0; i--) {
  400b08:	3c01      	subs	r4, #1
  400b0a:	d1fa      	bne.n	400b02 <display_char_inverted+0x12>
  400b0c:	e18a      	b.n	400e24 <display_char_inverted+0x334>
  400b0e:	4606      	mov	r6, r0
	 else {
		 uint16_t font_index = 0;
		 uint8_t byte_1;
		 uint8_t byte_2;
		 uint8_t byte_3;
		 if(font_size == 28) {
  400b10:	291c      	cmp	r1, #28
  400b12:	d147      	bne.n	400ba4 <display_char_inverted+0xb4>
			 uint16_t width = getWidth_28();
  400b14:	4bb1      	ldr	r3, [pc, #708]	; (400ddc <display_char_inverted+0x2ec>)
  400b16:	4798      	blx	r3
  400b18:	fa1f fa80 	uxth.w	sl, r0
			 while (font_index < width) {
  400b1c:	f1ba 0f00 	cmp.w	sl, #0
  400b20:	f000 8180 	beq.w	400e24 <display_char_inverted+0x334>
				 if(input != '#' && input != 'b') {
					 display_data(0xFF, d_id);
				 }
				 byte_1 = ~(getByte_28(input, font_index));
				 byte_2 = ~(getByte_28(input, font_index + width));
				 byte_3 = ~(getByte_28(input, font_index + 2*width));
  400b24:	ea4f 034a 	mov.w	r3, sl, lsl #1
  400b28:	b29b      	uxth	r3, r3
  400b2a:	9302      	str	r3, [sp, #8]
  400b2c:	4654      	mov	r4, sl
  400b2e:	2700      	movs	r7, #0
			 while (font_index < width) {
				 //Sharps and flats are elevated, rest of characters are not
				 if(input != '#' && input != 'b') {
					 display_data(0xFF, d_id);
				 }
				 byte_1 = ~(getByte_28(input, font_index));
  400b30:	f8df 92b4 	ldr.w	r9, [pc, #692]	; 400de8 <display_char_inverted+0x2f8>
				 byte_2 = ~(getByte_28(input, font_index + width));
				 byte_3 = ~(getByte_28(input, font_index + 2*width));
				 display_data(byte_1, d_id);
  400b34:	f8df 82a0 	ldr.w	r8, [pc, #672]	; 400dd8 <display_char_inverted+0x2e8>
  400b38:	f8cd a00c 	str.w	sl, [sp, #12]
  400b3c:	b2bd      	uxth	r5, r7
		 uint8_t byte_3;
		 if(font_size == 28) {
			 uint16_t width = getWidth_28();
			 while (font_index < width) {
				 //Sharps and flats are elevated, rest of characters are not
				 if(input != '#' && input != 'b') {
  400b3e:	2e23      	cmp	r6, #35	; 0x23
  400b40:	f000 80d5 	beq.w	400cee <display_char_inverted+0x1fe>
  400b44:	2e62      	cmp	r6, #98	; 0x62
  400b46:	f000 80b3 	beq.w	400cb0 <display_char_inverted+0x1c0>
					 display_data(0xFF, d_id);
  400b4a:	9901      	ldr	r1, [sp, #4]
  400b4c:	20ff      	movs	r0, #255	; 0xff
  400b4e:	47c0      	blx	r8
				 }
				 byte_1 = ~(getByte_28(input, font_index));
  400b50:	4629      	mov	r1, r5
  400b52:	4630      	mov	r0, r6
  400b54:	47c8      	blx	r9
  400b56:	4683      	mov	fp, r0
				 byte_2 = ~(getByte_28(input, font_index + width));
  400b58:	4621      	mov	r1, r4
  400b5a:	4630      	mov	r0, r6
  400b5c:	47c8      	blx	r9
  400b5e:	4682      	mov	sl, r0
				 byte_3 = ~(getByte_28(input, font_index + 2*width));
  400b60:	9b02      	ldr	r3, [sp, #8]
  400b62:	18e9      	adds	r1, r5, r3
  400b64:	b289      	uxth	r1, r1
  400b66:	4630      	mov	r0, r6
  400b68:	47c8      	blx	r9
  400b6a:	4605      	mov	r5, r0
				 display_data(byte_1, d_id);
  400b6c:	ea6f 000b 	mvn.w	r0, fp
  400b70:	f8dd b004 	ldr.w	fp, [sp, #4]
  400b74:	4659      	mov	r1, fp
  400b76:	b2c0      	uxtb	r0, r0
  400b78:	47c0      	blx	r8
				 display_data(byte_2, d_id);
  400b7a:	ea6f 000a 	mvn.w	r0, sl
  400b7e:	4659      	mov	r1, fp
  400b80:	b2c0      	uxtb	r0, r0
  400b82:	47c0      	blx	r8
				 display_data(byte_3, d_id);
  400b84:	43e8      	mvns	r0, r5
  400b86:	4659      	mov	r1, fp
  400b88:	b2c0      	uxtb	r0, r0
  400b8a:	47c0      	blx	r8
  400b8c:	e002      	b.n	400b94 <display_char_inverted+0xa4>
				 //Sharps and flats are elevated, rest of characters are not
				 if(input == '#' || input == 'b') {
					 display_data(0xFF, d_id);
  400b8e:	9901      	ldr	r1, [sp, #4]
  400b90:	20ff      	movs	r0, #255	; 0xff
  400b92:	47c0      	blx	r8
  400b94:	3701      	adds	r7, #1
  400b96:	3401      	adds	r4, #1
  400b98:	b2a4      	uxth	r4, r4
		 uint8_t byte_1;
		 uint8_t byte_2;
		 uint8_t byte_3;
		 if(font_size == 28) {
			 uint16_t width = getWidth_28();
			 while (font_index < width) {
  400b9a:	b2bb      	uxth	r3, r7
  400b9c:	9a03      	ldr	r2, [sp, #12]
  400b9e:	4293      	cmp	r3, r2
  400ba0:	d3cc      	bcc.n	400b3c <display_char_inverted+0x4c>
  400ba2:	e13f      	b.n	400e24 <display_char_inverted+0x334>
				 }
				 font_index++;
			 }
		 }

		 else if(font_size == 22) {
  400ba4:	2916      	cmp	r1, #22
  400ba6:	d147      	bne.n	400c38 <display_char_inverted+0x148>
			 uint16_t width = getWidth_22();
  400ba8:	4b8d      	ldr	r3, [pc, #564]	; (400de0 <display_char_inverted+0x2f0>)
  400baa:	4798      	blx	r3
  400bac:	fa1f fa80 	uxth.w	sl, r0
			 while (font_index < width) {
  400bb0:	f1ba 0f00 	cmp.w	sl, #0
  400bb4:	f000 8136 	beq.w	400e24 <display_char_inverted+0x334>
				 if(input != '#' && input != 'b') {
					 display_data(0xFF, d_id);
				 }
				 byte_1 = ~(getByte_22(input, font_index));
				 byte_2 = ~(getByte_22(input, font_index + width));
				 byte_3 = ~(getByte_22(input, font_index + 2*width));
  400bb8:	ea4f 034a 	mov.w	r3, sl, lsl #1
  400bbc:	b29b      	uxth	r3, r3
  400bbe:	9302      	str	r3, [sp, #8]
  400bc0:	4654      	mov	r4, sl
  400bc2:	2700      	movs	r7, #0
			 while (font_index < width) {
				 //Sharps and flats are elevated, rest of characters are not
				 if(input != '#' && input != 'b') {
					 display_data(0xFF, d_id);
				 }
				 byte_1 = ~(getByte_22(input, font_index));
  400bc4:	f8df 9224 	ldr.w	r9, [pc, #548]	; 400dec <display_char_inverted+0x2fc>
				 byte_2 = ~(getByte_22(input, font_index + width));
				 byte_3 = ~(getByte_22(input, font_index + 2*width));
				 display_data(byte_1, d_id);
  400bc8:	f8df 820c 	ldr.w	r8, [pc, #524]	; 400dd8 <display_char_inverted+0x2e8>
  400bcc:	f8cd a00c 	str.w	sl, [sp, #12]
  400bd0:	b2bd      	uxth	r5, r7

		 else if(font_size == 22) {
			 uint16_t width = getWidth_22();
			 while (font_index < width) {
				 //Sharps and flats are elevated, rest of characters are not
				 if(input != '#' && input != 'b') {
  400bd2:	2e23      	cmp	r6, #35	; 0x23
  400bd4:	f000 80aa 	beq.w	400d2c <display_char_inverted+0x23c>
  400bd8:	2e62      	cmp	r6, #98	; 0x62
  400bda:	f000 80c6 	beq.w	400d6a <display_char_inverted+0x27a>
					 display_data(0xFF, d_id);
  400bde:	9901      	ldr	r1, [sp, #4]
  400be0:	20ff      	movs	r0, #255	; 0xff
  400be2:	47c0      	blx	r8
				 }
				 byte_1 = ~(getByte_22(input, font_index));
  400be4:	4629      	mov	r1, r5
  400be6:	4630      	mov	r0, r6
  400be8:	47c8      	blx	r9
  400bea:	4683      	mov	fp, r0
				 byte_2 = ~(getByte_22(input, font_index + width));
  400bec:	4621      	mov	r1, r4
  400bee:	4630      	mov	r0, r6
  400bf0:	47c8      	blx	r9
  400bf2:	4682      	mov	sl, r0
				 byte_3 = ~(getByte_22(input, font_index + 2*width));
  400bf4:	9b02      	ldr	r3, [sp, #8]
  400bf6:	18e9      	adds	r1, r5, r3
  400bf8:	b289      	uxth	r1, r1
  400bfa:	4630      	mov	r0, r6
  400bfc:	47c8      	blx	r9
  400bfe:	4605      	mov	r5, r0
				 display_data(byte_1, d_id);
  400c00:	ea6f 000b 	mvn.w	r0, fp
  400c04:	f8dd b004 	ldr.w	fp, [sp, #4]
  400c08:	4659      	mov	r1, fp
  400c0a:	b2c0      	uxtb	r0, r0
  400c0c:	47c0      	blx	r8
				 display_data(byte_2, d_id);
  400c0e:	ea6f 000a 	mvn.w	r0, sl
  400c12:	4659      	mov	r1, fp
  400c14:	b2c0      	uxtb	r0, r0
  400c16:	47c0      	blx	r8
				 display_data(byte_3, d_id);
  400c18:	43e8      	mvns	r0, r5
  400c1a:	4659      	mov	r1, fp
  400c1c:	b2c0      	uxtb	r0, r0
  400c1e:	47c0      	blx	r8
  400c20:	e002      	b.n	400c28 <display_char_inverted+0x138>
				 //Sharps and flats are elevated, rest of characters are not
				 if(input == '#' || input == 'b') {
					 display_data(0xFF, d_id);
  400c22:	9901      	ldr	r1, [sp, #4]
  400c24:	20ff      	movs	r0, #255	; 0xff
  400c26:	47c0      	blx	r8
  400c28:	3701      	adds	r7, #1
  400c2a:	3401      	adds	r4, #1
  400c2c:	b2a4      	uxth	r4, r4
			 }
		 }

		 else if(font_size == 22) {
			 uint16_t width = getWidth_22();
			 while (font_index < width) {
  400c2e:	b2bb      	uxth	r3, r7
  400c30:	9a03      	ldr	r2, [sp, #12]
  400c32:	429a      	cmp	r2, r3
  400c34:	d8cc      	bhi.n	400bd0 <display_char_inverted+0xe0>
  400c36:	e0f5      	b.n	400e24 <display_char_inverted+0x334>
			 }
		 }

		 // Defaults to 18 to reduce errors.
		 else {
			 uint16_t width = getWidth_18();
  400c38:	4b6a      	ldr	r3, [pc, #424]	; (400de4 <display_char_inverted+0x2f4>)
  400c3a:	4798      	blx	r3
  400c3c:	fa1f fb80 	uxth.w	fp, r0
			 while (font_index < width) {
  400c40:	f1bb 0f00 	cmp.w	fp, #0
  400c44:	f000 80ee 	beq.w	400e24 <display_char_inverted+0x334>
  400c48:	465d      	mov	r5, fp
  400c4a:	2400      	movs	r4, #0
				 //Sharps and flats are elevated, rest of characters are not
				 if(input != '#' && input != 'b') {
					 display_data(0xFF, d_id);
				 }
				 display_data(0, d_id);
  400c4c:	4f62      	ldr	r7, [pc, #392]	; (400dd8 <display_char_inverted+0x2e8>)
				 byte_1 = ~(getByte_18(input, font_index));
  400c4e:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 400df0 <display_char_inverted+0x300>
		 // Defaults to 18 to reduce errors.
		 else {
			 uint16_t width = getWidth_18();
			 while (font_index < width) {
				 //Sharps and flats are elevated, rest of characters are not
				 if(input != '#' && input != 'b') {
  400c52:	2e23      	cmp	r6, #35	; 0x23
  400c54:	f000 80a8 	beq.w	400da8 <display_char_inverted+0x2b8>
  400c58:	2e62      	cmp	r6, #98	; 0x62
  400c5a:	f000 80cb 	beq.w	400df4 <display_char_inverted+0x304>
					 display_data(0xFF, d_id);
  400c5e:	f8dd a004 	ldr.w	sl, [sp, #4]
  400c62:	4651      	mov	r1, sl
  400c64:	20ff      	movs	r0, #255	; 0xff
  400c66:	47b8      	blx	r7
				 }
				 display_data(0, d_id);
  400c68:	f8cd a004 	str.w	sl, [sp, #4]
  400c6c:	4651      	mov	r1, sl
  400c6e:	2000      	movs	r0, #0
  400c70:	47b8      	blx	r7
				 byte_1 = ~(getByte_18(input, font_index));
  400c72:	4621      	mov	r1, r4
  400c74:	4630      	mov	r0, r6
  400c76:	47c0      	blx	r8
  400c78:	4682      	mov	sl, r0
				 byte_2 = ~(getByte_18(input, font_index + width));
  400c7a:	4629      	mov	r1, r5
  400c7c:	4630      	mov	r0, r6
  400c7e:	47c0      	blx	r8
  400c80:	4681      	mov	r9, r0
				 display_data(byte_1, d_id);
  400c82:	ea6f 000a 	mvn.w	r0, sl
  400c86:	f8dd a004 	ldr.w	sl, [sp, #4]
  400c8a:	4651      	mov	r1, sl
  400c8c:	b2c0      	uxtb	r0, r0
  400c8e:	47b8      	blx	r7
				 display_data(byte_2, d_id);
  400c90:	ea6f 0009 	mvn.w	r0, r9
  400c94:	4651      	mov	r1, sl
  400c96:	b2c0      	uxtb	r0, r0
  400c98:	47b8      	blx	r7
  400c9a:	e002      	b.n	400ca2 <display_char_inverted+0x1b2>
				 //Sharps and flats are elevated, rest of characters are not
				 if(input == '#' || input == 'b') {
					 display_data(0xFF, d_id);
  400c9c:	9901      	ldr	r1, [sp, #4]
  400c9e:	20ff      	movs	r0, #255	; 0xff
  400ca0:	47b8      	blx	r7
				 }
				 font_index++;
  400ca2:	3401      	adds	r4, #1
  400ca4:	b2a4      	uxth	r4, r4
  400ca6:	3501      	adds	r5, #1
  400ca8:	b2ad      	uxth	r5, r5
		 }

		 // Defaults to 18 to reduce errors.
		 else {
			 uint16_t width = getWidth_18();
			 while (font_index < width) {
  400caa:	45a3      	cmp	fp, r4
  400cac:	d1d1      	bne.n	400c52 <display_char_inverted+0x162>
  400cae:	e0b9      	b.n	400e24 <display_char_inverted+0x334>
			 while (font_index < width) {
				 //Sharps and flats are elevated, rest of characters are not
				 if(input != '#' && input != 'b') {
					 display_data(0xFF, d_id);
				 }
				 byte_1 = ~(getByte_28(input, font_index));
  400cb0:	4629      	mov	r1, r5
  400cb2:	2062      	movs	r0, #98	; 0x62
  400cb4:	47c8      	blx	r9
  400cb6:	4683      	mov	fp, r0
				 byte_2 = ~(getByte_28(input, font_index + width));
  400cb8:	4621      	mov	r1, r4
  400cba:	2062      	movs	r0, #98	; 0x62
  400cbc:	47c8      	blx	r9
  400cbe:	4682      	mov	sl, r0
				 byte_3 = ~(getByte_28(input, font_index + 2*width));
  400cc0:	9b02      	ldr	r3, [sp, #8]
  400cc2:	18e9      	adds	r1, r5, r3
  400cc4:	b289      	uxth	r1, r1
  400cc6:	2062      	movs	r0, #98	; 0x62
  400cc8:	47c8      	blx	r9
  400cca:	4605      	mov	r5, r0
				 display_data(byte_1, d_id);
  400ccc:	ea6f 000b 	mvn.w	r0, fp
  400cd0:	f8dd b004 	ldr.w	fp, [sp, #4]
  400cd4:	4659      	mov	r1, fp
  400cd6:	b2c0      	uxtb	r0, r0
  400cd8:	47c0      	blx	r8
				 display_data(byte_2, d_id);
  400cda:	ea6f 000a 	mvn.w	r0, sl
  400cde:	4659      	mov	r1, fp
  400ce0:	b2c0      	uxtb	r0, r0
  400ce2:	47c0      	blx	r8
				 display_data(byte_3, d_id);
  400ce4:	43e8      	mvns	r0, r5
  400ce6:	4659      	mov	r1, fp
  400ce8:	b2c0      	uxtb	r0, r0
  400cea:	47c0      	blx	r8
  400cec:	e74f      	b.n	400b8e <display_char_inverted+0x9e>
			 while (font_index < width) {
				 //Sharps and flats are elevated, rest of characters are not
				 if(input != '#' && input != 'b') {
					 display_data(0xFF, d_id);
				 }
				 byte_1 = ~(getByte_28(input, font_index));
  400cee:	4629      	mov	r1, r5
  400cf0:	2023      	movs	r0, #35	; 0x23
  400cf2:	47c8      	blx	r9
  400cf4:	4683      	mov	fp, r0
				 byte_2 = ~(getByte_28(input, font_index + width));
  400cf6:	4621      	mov	r1, r4
  400cf8:	2023      	movs	r0, #35	; 0x23
  400cfa:	47c8      	blx	r9
  400cfc:	4682      	mov	sl, r0
				 byte_3 = ~(getByte_28(input, font_index + 2*width));
  400cfe:	9b02      	ldr	r3, [sp, #8]
  400d00:	18e9      	adds	r1, r5, r3
  400d02:	b289      	uxth	r1, r1
  400d04:	2023      	movs	r0, #35	; 0x23
  400d06:	47c8      	blx	r9
  400d08:	4605      	mov	r5, r0
				 display_data(byte_1, d_id);
  400d0a:	ea6f 000b 	mvn.w	r0, fp
  400d0e:	f8dd b004 	ldr.w	fp, [sp, #4]
  400d12:	4659      	mov	r1, fp
  400d14:	b2c0      	uxtb	r0, r0
  400d16:	47c0      	blx	r8
				 display_data(byte_2, d_id);
  400d18:	ea6f 000a 	mvn.w	r0, sl
  400d1c:	4659      	mov	r1, fp
  400d1e:	b2c0      	uxtb	r0, r0
  400d20:	47c0      	blx	r8
				 display_data(byte_3, d_id);
  400d22:	43e8      	mvns	r0, r5
  400d24:	4659      	mov	r1, fp
  400d26:	b2c0      	uxtb	r0, r0
  400d28:	47c0      	blx	r8
  400d2a:	e730      	b.n	400b8e <display_char_inverted+0x9e>
			 while (font_index < width) {
				 //Sharps and flats are elevated, rest of characters are not
				 if(input != '#' && input != 'b') {
					 display_data(0xFF, d_id);
				 }
				 byte_1 = ~(getByte_22(input, font_index));
  400d2c:	4629      	mov	r1, r5
  400d2e:	2023      	movs	r0, #35	; 0x23
  400d30:	47c8      	blx	r9
  400d32:	4683      	mov	fp, r0
				 byte_2 = ~(getByte_22(input, font_index + width));
  400d34:	4621      	mov	r1, r4
  400d36:	2023      	movs	r0, #35	; 0x23
  400d38:	47c8      	blx	r9
  400d3a:	4682      	mov	sl, r0
				 byte_3 = ~(getByte_22(input, font_index + 2*width));
  400d3c:	9b02      	ldr	r3, [sp, #8]
  400d3e:	18e9      	adds	r1, r5, r3
  400d40:	b289      	uxth	r1, r1
  400d42:	2023      	movs	r0, #35	; 0x23
  400d44:	47c8      	blx	r9
  400d46:	4605      	mov	r5, r0
				 display_data(byte_1, d_id);
  400d48:	ea6f 000b 	mvn.w	r0, fp
  400d4c:	f8dd b004 	ldr.w	fp, [sp, #4]
  400d50:	4659      	mov	r1, fp
  400d52:	b2c0      	uxtb	r0, r0
  400d54:	47c0      	blx	r8
				 display_data(byte_2, d_id);
  400d56:	ea6f 000a 	mvn.w	r0, sl
  400d5a:	4659      	mov	r1, fp
  400d5c:	b2c0      	uxtb	r0, r0
  400d5e:	47c0      	blx	r8
				 display_data(byte_3, d_id);
  400d60:	43e8      	mvns	r0, r5
  400d62:	4659      	mov	r1, fp
  400d64:	b2c0      	uxtb	r0, r0
  400d66:	47c0      	blx	r8
  400d68:	e75b      	b.n	400c22 <display_char_inverted+0x132>
			 while (font_index < width) {
				 //Sharps and flats are elevated, rest of characters are not
				 if(input != '#' && input != 'b') {
					 display_data(0xFF, d_id);
				 }
				 byte_1 = ~(getByte_22(input, font_index));
  400d6a:	4629      	mov	r1, r5
  400d6c:	2062      	movs	r0, #98	; 0x62
  400d6e:	47c8      	blx	r9
  400d70:	4683      	mov	fp, r0
				 byte_2 = ~(getByte_22(input, font_index + width));
  400d72:	4621      	mov	r1, r4
  400d74:	2062      	movs	r0, #98	; 0x62
  400d76:	47c8      	blx	r9
  400d78:	4682      	mov	sl, r0
				 byte_3 = ~(getByte_22(input, font_index + 2*width));
  400d7a:	9b02      	ldr	r3, [sp, #8]
  400d7c:	18e9      	adds	r1, r5, r3
  400d7e:	b289      	uxth	r1, r1
  400d80:	2062      	movs	r0, #98	; 0x62
  400d82:	47c8      	blx	r9
  400d84:	4605      	mov	r5, r0
				 display_data(byte_1, d_id);
  400d86:	ea6f 000b 	mvn.w	r0, fp
  400d8a:	f8dd b004 	ldr.w	fp, [sp, #4]
  400d8e:	4659      	mov	r1, fp
  400d90:	b2c0      	uxtb	r0, r0
  400d92:	47c0      	blx	r8
				 display_data(byte_2, d_id);
  400d94:	ea6f 000a 	mvn.w	r0, sl
  400d98:	4659      	mov	r1, fp
  400d9a:	b2c0      	uxtb	r0, r0
  400d9c:	47c0      	blx	r8
				 display_data(byte_3, d_id);
  400d9e:	43e8      	mvns	r0, r5
  400da0:	4659      	mov	r1, fp
  400da2:	b2c0      	uxtb	r0, r0
  400da4:	47c0      	blx	r8
  400da6:	e73c      	b.n	400c22 <display_char_inverted+0x132>
			 while (font_index < width) {
				 //Sharps and flats are elevated, rest of characters are not
				 if(input != '#' && input != 'b') {
					 display_data(0xFF, d_id);
				 }
				 display_data(0, d_id);
  400da8:	9901      	ldr	r1, [sp, #4]
  400daa:	2000      	movs	r0, #0
  400dac:	47b8      	blx	r7
				 byte_1 = ~(getByte_18(input, font_index));
  400dae:	4621      	mov	r1, r4
  400db0:	2023      	movs	r0, #35	; 0x23
  400db2:	47c0      	blx	r8
  400db4:	4682      	mov	sl, r0
				 byte_2 = ~(getByte_18(input, font_index + width));
  400db6:	4629      	mov	r1, r5
  400db8:	2023      	movs	r0, #35	; 0x23
  400dba:	47c0      	blx	r8
  400dbc:	4681      	mov	r9, r0
				 display_data(byte_1, d_id);
  400dbe:	ea6f 000a 	mvn.w	r0, sl
  400dc2:	f8dd a004 	ldr.w	sl, [sp, #4]
  400dc6:	4651      	mov	r1, sl
  400dc8:	b2c0      	uxtb	r0, r0
  400dca:	47b8      	blx	r7
				 display_data(byte_2, d_id);
  400dcc:	ea6f 0009 	mvn.w	r0, r9
  400dd0:	4651      	mov	r1, sl
  400dd2:	b2c0      	uxtb	r0, r0
  400dd4:	47b8      	blx	r7
  400dd6:	e761      	b.n	400c9c <display_char_inverted+0x1ac>
  400dd8:	0040061d 	.word	0x0040061d
  400ddc:	004021f5 	.word	0x004021f5
  400de0:	004021f9 	.word	0x004021f9
  400de4:	004021fd 	.word	0x004021fd
  400de8:	00402201 	.word	0x00402201
  400dec:	0040221d 	.word	0x0040221d
  400df0:	00402251 	.word	0x00402251
			 while (font_index < width) {
				 //Sharps and flats are elevated, rest of characters are not
				 if(input != '#' && input != 'b') {
					 display_data(0xFF, d_id);
				 }
				 display_data(0, d_id);
  400df4:	9901      	ldr	r1, [sp, #4]
  400df6:	2000      	movs	r0, #0
  400df8:	47b8      	blx	r7
				 byte_1 = ~(getByte_18(input, font_index));
  400dfa:	4621      	mov	r1, r4
  400dfc:	2062      	movs	r0, #98	; 0x62
  400dfe:	47c0      	blx	r8
  400e00:	4682      	mov	sl, r0
				 byte_2 = ~(getByte_18(input, font_index + width));
  400e02:	4629      	mov	r1, r5
  400e04:	2062      	movs	r0, #98	; 0x62
  400e06:	47c0      	blx	r8
  400e08:	4681      	mov	r9, r0
				 display_data(byte_1, d_id);
  400e0a:	ea6f 000a 	mvn.w	r0, sl
  400e0e:	f8dd a004 	ldr.w	sl, [sp, #4]
  400e12:	4651      	mov	r1, sl
  400e14:	b2c0      	uxtb	r0, r0
  400e16:	47b8      	blx	r7
				 display_data(byte_2, d_id);
  400e18:	ea6f 0009 	mvn.w	r0, r9
  400e1c:	4651      	mov	r1, sl
  400e1e:	b2c0      	uxtb	r0, r0
  400e20:	47b8      	blx	r7
  400e22:	e73b      	b.n	400c9c <display_char_inverted+0x1ac>
				 }
				 font_index++;
			 }
		 }
	 }
 }
  400e24:	b005      	add	sp, #20
  400e26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  400e2a:	bf00      	nop

00400e2c <display_number>:

 
void display_number(uint16_t input, uint8_t font_size, uint8_t d_id) {
  400e2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  400e30:	b083      	sub	sp, #12
  400e32:	460c      	mov	r4, r1
  400e34:	4615      	mov	r5, r2
	 int buffersize = 0;
	 char buffer[8];

	 if(input==0) {
  400e36:	b938      	cbnz	r0, 400e48 <display_number+0x1c>
		 display_char('0', font_size, d_id);
  400e38:	2030      	movs	r0, #48	; 0x30
  400e3a:	4e28      	ldr	r6, [pc, #160]	; (400edc <display_number+0xb0>)
  400e3c:	47b0      	blx	r6
		 display_char(' ', font_size, d_id);
  400e3e:	462a      	mov	r2, r5
  400e40:	4621      	mov	r1, r4
  400e42:	2020      	movs	r0, #32
  400e44:	47b0      	blx	r6
  400e46:	e045      	b.n	400ed4 <display_number+0xa8>
  400e48:	4603      	mov	r3, r0
		 buffersize = 7;
	 }
	 else if (input > 99999) {
		 buffersize = 6;
	 }
	 else if (input > 9999) {
  400e4a:	f242 720f 	movw	r2, #9999	; 0x270f
  400e4e:	4290      	cmp	r0, r2
  400e50:	d830      	bhi.n	400eb4 <display_number+0x88>
		 buffersize = 5;
	 }
	 else if (input > 999) {
  400e52:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
  400e56:	d230      	bcs.n	400eba <display_number+0x8e>
		 buffersize = 4;
	 }
	 else if(input > 99) {
  400e58:	2863      	cmp	r0, #99	; 0x63
  400e5a:	d831      	bhi.n	400ec0 <display_number+0x94>
	 }
	 else if(input > 9) {
		 buffersize = 2;
	 }
	 else {
		 buffersize = 1;
  400e5c:	2809      	cmp	r0, #9
  400e5e:	bf8c      	ite	hi
  400e60:	f04f 0c02 	movhi.w	ip, #2
  400e64:	f04f 0c01 	movls.w	ip, #1
  400e68:	e02c      	b.n	400ec4 <display_number+0x98>
	 // Does this to reverse the order it's output in
	 int i = buffersize - 1;
	 uint32_t temp;
	 while(input > 0) {
		 temp = input;
		 buffer[i] = (char)(input%10 + '0');
  400e6a:	fbae 7203 	umull	r7, r2, lr, r3
  400e6e:	08d2      	lsrs	r2, r2, #3
  400e70:	eb02 0782 	add.w	r7, r2, r2, lsl #2
  400e74:	eba3 0347 	sub.w	r3, r3, r7, lsl #1
  400e78:	3330      	adds	r3, #48	; 0x30
  400e7a:	f800 3d01 	strb.w	r3, [r0, #-1]!
		 input = temp;
		 input = input/10;
  400e7e:	b293      	uxth	r3, r2
		 i--;
  400e80:	3901      	subs	r1, #1

	 // Grabs each digit at a time from integer and stores in array
	 // Does this to reverse the order it's output in
	 int i = buffersize - 1;
	 uint32_t temp;
	 while(input > 0) {
  400e82:	2b00      	cmp	r3, #0
  400e84:	d1f1      	bne.n	400e6a <display_number+0x3e>
		 buffer[i] = (char)(input%10 + '0');
		 input = temp;
		 input = input/10;
		 i--;
	 }
	 while(i > 0) {
  400e86:	2900      	cmp	r1, #0
  400e88:	dd00      	ble.n	400e8c <display_number+0x60>
  400e8a:	e7fe      	b.n	400e8a <display_number+0x5e>
		 buffer[i] = '1';
	 }

	 i = 0;
	 while(i < buffersize) {
  400e8c:	f1bc 0f00 	cmp.w	ip, #0
  400e90:	d020      	beq.n	400ed4 <display_number+0xa8>
  400e92:	466f      	mov	r7, sp
		 display_char(buffer[i], font_size, d_id);
  400e94:	f8df 8044 	ldr.w	r8, [pc, #68]	; 400edc <display_number+0xb0>
		 display_char(' ', font_size, d_id);
  400e98:	f04f 0920 	mov.w	r9, #32
		 buffer[i] = '1';
	 }

	 i = 0;
	 while(i < buffersize) {
		 display_char(buffer[i], font_size, d_id);
  400e9c:	462a      	mov	r2, r5
  400e9e:	4621      	mov	r1, r4
  400ea0:	f817 0b01 	ldrb.w	r0, [r7], #1
  400ea4:	47c0      	blx	r8
		 display_char(' ', font_size, d_id);
  400ea6:	462a      	mov	r2, r5
  400ea8:	4621      	mov	r1, r4
  400eaa:	4648      	mov	r0, r9
  400eac:	47c0      	blx	r8
	 while(i > 0) {
		 buffer[i] = '1';
	 }

	 i = 0;
	 while(i < buffersize) {
  400eae:	42be      	cmp	r6, r7
  400eb0:	d1f4      	bne.n	400e9c <display_number+0x70>
  400eb2:	e00f      	b.n	400ed4 <display_number+0xa8>
	 }
	 else if (input > 99999) {
		 buffersize = 6;
	 }
	 else if (input > 9999) {
		 buffersize = 5;
  400eb4:	f04f 0c05 	mov.w	ip, #5
  400eb8:	e004      	b.n	400ec4 <display_number+0x98>
	 }
	 else if (input > 999) {
		 buffersize = 4;
  400eba:	f04f 0c04 	mov.w	ip, #4
  400ebe:	e001      	b.n	400ec4 <display_number+0x98>
	 }
	 else if(input > 99) {
		 buffersize = 3;
  400ec0:	f04f 0c03 	mov.w	ip, #3
		 buffersize = 1;
	 }

	 // Grabs each digit at a time from integer and stores in array
	 // Does this to reverse the order it's output in
	 int i = buffersize - 1;
  400ec4:	f10c 31ff 	add.w	r1, ip, #4294967295
  400ec8:	eb0d 060c 	add.w	r6, sp, ip
  400ecc:	4630      	mov	r0, r6
	 uint32_t temp;
	 while(input > 0) {
		 temp = input;
		 buffer[i] = (char)(input%10 + '0');
  400ece:	f8df e010 	ldr.w	lr, [pc, #16]	; 400ee0 <display_number+0xb4>
  400ed2:	e7ca      	b.n	400e6a <display_number+0x3e>
	 while(i < buffersize) {
		 display_char(buffer[i], font_size, d_id);
		 display_char(' ', font_size, d_id);
		 i++;
	 }
 }
  400ed4:	b003      	add	sp, #12
  400ed6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  400eda:	bf00      	nop
  400edc:	00400829 	.word	0x00400829
  400ee0:	cccccccd 	.word	0xcccccccd

00400ee4 <note_display>:

// Display 0
void note_display(uint16_t note) {
  400ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400ee6:	4607      	mov	r7, r0
	 while(disp_ptr_location[0] < 640) {
  400ee8:	4bb1      	ldr	r3, [pc, #708]	; (4011b0 <note_display+0x2cc>)
  400eea:	881b      	ldrh	r3, [r3, #0]
  400eec:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
  400ef0:	d209      	bcs.n	400f06 <note_display+0x22>
		 display_data(0, 0);
  400ef2:	2600      	movs	r6, #0
  400ef4:	4daf      	ldr	r5, [pc, #700]	; (4011b4 <note_display+0x2d0>)
	 }
 }

// Display 0
void note_display(uint16_t note) {
	 while(disp_ptr_location[0] < 640) {
  400ef6:	4cae      	ldr	r4, [pc, #696]	; (4011b0 <note_display+0x2cc>)
		 display_data(0, 0);
  400ef8:	4631      	mov	r1, r6
  400efa:	4630      	mov	r0, r6
  400efc:	47a8      	blx	r5
	 }
 }

// Display 0
void note_display(uint16_t note) {
	 while(disp_ptr_location[0] < 640) {
  400efe:	8823      	ldrh	r3, [r4, #0]
  400f00:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
  400f04:	d3f8      	bcc.n	400ef8 <note_display+0x14>
		 display_data(0, 0);
	 }

	 uint8_t octave = 0;

	  if(note < 12) {
  400f06:	2f0b      	cmp	r7, #11
  400f08:	d914      	bls.n	400f34 <note_display+0x50>
		 octave = 0;
	 }
	 else if(note < 24) {
  400f0a:	2f17      	cmp	r7, #23
  400f0c:	d914      	bls.n	400f38 <note_display+0x54>
		 octave = 1;
	 }
	 else if(note < 36) {
  400f0e:	2f23      	cmp	r7, #35	; 0x23
  400f10:	d914      	bls.n	400f3c <note_display+0x58>
		 octave = 2;
	 }
	 else if(note < 48) {
  400f12:	2f2f      	cmp	r7, #47	; 0x2f
  400f14:	d914      	bls.n	400f40 <note_display+0x5c>
		 octave = 3;
	 }
	 else if(note < 60) {
  400f16:	2f3b      	cmp	r7, #59	; 0x3b
  400f18:	d914      	bls.n	400f44 <note_display+0x60>
		octave = 4;
	 }
	 else if(note < 72) {
  400f1a:	2f47      	cmp	r7, #71	; 0x47
  400f1c:	d914      	bls.n	400f48 <note_display+0x64>
		 octave = 5;
	 }
	 else if(note < 84) {
  400f1e:	2f53      	cmp	r7, #83	; 0x53
  400f20:	d914      	bls.n	400f4c <note_display+0x68>
		octave = 6;
	 }
	 else if(note < 96) {
  400f22:	2f5f      	cmp	r7, #95	; 0x5f
  400f24:	d914      	bls.n	400f50 <note_display+0x6c>
		 octave = 7;
	 }
	 else if(note < 108) {
  400f26:	2f6b      	cmp	r7, #107	; 0x6b
  400f28:	d914      	bls.n	400f54 <note_display+0x70>
	 }
	 else if (note < 120){
		 octave = 9;
	}
	else{
		octave = 10;
  400f2a:	2f78      	cmp	r7, #120	; 0x78
  400f2c:	bf34      	ite	cc
  400f2e:	2409      	movcc	r4, #9
  400f30:	240a      	movcs	r4, #10
  400f32:	e010      	b.n	400f56 <note_display+0x72>
	 }

	 uint8_t octave = 0;

	  if(note < 12) {
		 octave = 0;
  400f34:	2400      	movs	r4, #0
  400f36:	e00e      	b.n	400f56 <note_display+0x72>
	 }
	 else if(note < 24) {
		 octave = 1;
  400f38:	2401      	movs	r4, #1
  400f3a:	e00c      	b.n	400f56 <note_display+0x72>
	 }
	 else if(note < 36) {
		 octave = 2;
  400f3c:	2402      	movs	r4, #2
  400f3e:	e00a      	b.n	400f56 <note_display+0x72>
	 }
	 else if(note < 48) {
		 octave = 3;
  400f40:	2403      	movs	r4, #3
  400f42:	e008      	b.n	400f56 <note_display+0x72>
	 }
	 else if(note < 60) {
		octave = 4;
  400f44:	2404      	movs	r4, #4
  400f46:	e006      	b.n	400f56 <note_display+0x72>
	 }
	 else if(note < 72) {
		 octave = 5;
  400f48:	2405      	movs	r4, #5
  400f4a:	e004      	b.n	400f56 <note_display+0x72>
	 }
	 else if(note < 84) {
		octave = 6;
  400f4c:	2406      	movs	r4, #6
  400f4e:	e002      	b.n	400f56 <note_display+0x72>
	 }
	 else if(note < 96) {
		 octave = 7;
  400f50:	2407      	movs	r4, #7
  400f52:	e000      	b.n	400f56 <note_display+0x72>
	 }
	 else if(note < 108) {
		 octave = 8;
  400f54:	2408      	movs	r4, #8
	}
	else{
		octave = 10;
	}

	note = note - octave*12;
  400f56:	b2a4      	uxth	r4, r4
  400f58:	eba4 0384 	sub.w	r3, r4, r4, lsl #2
  400f5c:	eb07 0383 	add.w	r3, r7, r3, lsl #2
  400f60:	b29b      	uxth	r3, r3

	 if(note % 2 == 0) {
  400f62:	f013 0f01 	tst.w	r3, #1
  400f66:	f040 80d5 	bne.w	401114 <note_display+0x230>
		 if(note % 12 == 0) {
  400f6a:	4a93      	ldr	r2, [pc, #588]	; (4011b8 <note_display+0x2d4>)
  400f6c:	fba2 1203 	umull	r1, r2, r2, r3
  400f70:	08d2      	lsrs	r2, r2, #3
  400f72:	eb02 0242 	add.w	r2, r2, r2, lsl #1
  400f76:	eba3 0282 	sub.w	r2, r3, r2, lsl #2
  400f7a:	b292      	uxth	r2, r2
  400f7c:	b9e2      	cbnz	r2, 400fb8 <note_display+0xd4>
			 display_char(' ', 28, 0);
  400f7e:	211c      	movs	r1, #28
  400f80:	2020      	movs	r0, #32
  400f82:	4d8e      	ldr	r5, [pc, #568]	; (4011bc <note_display+0x2d8>)
  400f84:	47a8      	blx	r5
			 display_char(' ', 28, 0);
  400f86:	2200      	movs	r2, #0
  400f88:	211c      	movs	r1, #28
  400f8a:	2020      	movs	r0, #32
  400f8c:	47a8      	blx	r5
			 display_char(' ', 28, 0);
  400f8e:	2200      	movs	r2, #0
  400f90:	211c      	movs	r1, #28
  400f92:	2020      	movs	r0, #32
  400f94:	47a8      	blx	r5
			 display_char(' ', 28, 0);
  400f96:	2200      	movs	r2, #0
  400f98:	211c      	movs	r1, #28
  400f9a:	2020      	movs	r0, #32
  400f9c:	47a8      	blx	r5
			 display_char(' ', 28, 0);
  400f9e:	2200      	movs	r2, #0
  400fa0:	211c      	movs	r1, #28
  400fa2:	2020      	movs	r0, #32
  400fa4:	47a8      	blx	r5
			 display_char(' ', 28, 0);
  400fa6:	2200      	movs	r2, #0
  400fa8:	211c      	movs	r1, #28
  400faa:	2020      	movs	r0, #32
  400fac:	47a8      	blx	r5
			 display_char('C', 28, 0);
  400fae:	2200      	movs	r2, #0
  400fb0:	211c      	movs	r1, #28
  400fb2:	2043      	movs	r0, #67	; 0x43
  400fb4:	47a8      	blx	r5
  400fb6:	e19c      	b.n	4012f2 <note_display+0x40e>
		 }
		 else if(note % 10 == 0) {
  400fb8:	4a81      	ldr	r2, [pc, #516]	; (4011c0 <note_display+0x2dc>)
  400fba:	fba2 1203 	umull	r1, r2, r2, r3
  400fbe:	08d2      	lsrs	r2, r2, #3
  400fc0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  400fc4:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
  400fc8:	b292      	uxth	r2, r2
  400fca:	b9e2      	cbnz	r2, 401006 <note_display+0x122>
			 display_char('A', 28, 0);
  400fcc:	211c      	movs	r1, #28
  400fce:	2041      	movs	r0, #65	; 0x41
  400fd0:	4d7a      	ldr	r5, [pc, #488]	; (4011bc <note_display+0x2d8>)
  400fd2:	47a8      	blx	r5
			 display_char(' ', 28, 0);
  400fd4:	2200      	movs	r2, #0
  400fd6:	211c      	movs	r1, #28
  400fd8:	2020      	movs	r0, #32
  400fda:	47a8      	blx	r5
			 display_char('#', 18, 0);
  400fdc:	2200      	movs	r2, #0
  400fde:	2112      	movs	r1, #18
  400fe0:	2023      	movs	r0, #35	; 0x23
  400fe2:	47a8      	blx	r5
			 display_char('/', 28, 0);
  400fe4:	2200      	movs	r2, #0
  400fe6:	211c      	movs	r1, #28
  400fe8:	202f      	movs	r0, #47	; 0x2f
  400fea:	47a8      	blx	r5
			 display_char('B', 28, 0);
  400fec:	2200      	movs	r2, #0
  400fee:	211c      	movs	r1, #28
  400ff0:	2042      	movs	r0, #66	; 0x42
  400ff2:	47a8      	blx	r5
			 display_char(' ', 28, 0);
  400ff4:	2200      	movs	r2, #0
  400ff6:	211c      	movs	r1, #28
  400ff8:	2020      	movs	r0, #32
  400ffa:	47a8      	blx	r5
			 display_char('b', 18, 0);
  400ffc:	2200      	movs	r2, #0
  400ffe:	2112      	movs	r1, #18
  401000:	2062      	movs	r0, #98	; 0x62
  401002:	47a8      	blx	r5
  401004:	e175      	b.n	4012f2 <note_display+0x40e>
		 }
		 else if(note % 8 == 0) {
  401006:	f013 0f07 	tst.w	r3, #7
  40100a:	d11d      	bne.n	401048 <note_display+0x164>
			 display_char('G', 28, 0);
  40100c:	2200      	movs	r2, #0
  40100e:	211c      	movs	r1, #28
  401010:	2047      	movs	r0, #71	; 0x47
  401012:	4d6a      	ldr	r5, [pc, #424]	; (4011bc <note_display+0x2d8>)
  401014:	47a8      	blx	r5
			 display_char(' ', 28, 0);
  401016:	2200      	movs	r2, #0
  401018:	211c      	movs	r1, #28
  40101a:	2020      	movs	r0, #32
  40101c:	47a8      	blx	r5
			 display_char('#', 18, 0);
  40101e:	2200      	movs	r2, #0
  401020:	2112      	movs	r1, #18
  401022:	2023      	movs	r0, #35	; 0x23
  401024:	47a8      	blx	r5
			 display_char('/', 28, 0);
  401026:	2200      	movs	r2, #0
  401028:	211c      	movs	r1, #28
  40102a:	202f      	movs	r0, #47	; 0x2f
  40102c:	47a8      	blx	r5
			 display_char('A', 28, 0);
  40102e:	2200      	movs	r2, #0
  401030:	211c      	movs	r1, #28
  401032:	2041      	movs	r0, #65	; 0x41
  401034:	47a8      	blx	r5
			 display_char(' ', 28, 0);
  401036:	2200      	movs	r2, #0
  401038:	211c      	movs	r1, #28
  40103a:	2020      	movs	r0, #32
  40103c:	47a8      	blx	r5
			 display_char('b', 18, 0);
  40103e:	2200      	movs	r2, #0
  401040:	2112      	movs	r1, #18
  401042:	2062      	movs	r0, #98	; 0x62
  401044:	47a8      	blx	r5
  401046:	e154      	b.n	4012f2 <note_display+0x40e>
		 }
		 else if(note % 6 == 0) {
  401048:	4a5b      	ldr	r2, [pc, #364]	; (4011b8 <note_display+0x2d4>)
  40104a:	fba2 1203 	umull	r1, r2, r2, r3
  40104e:	0892      	lsrs	r2, r2, #2
  401050:	eb02 0242 	add.w	r2, r2, r2, lsl #1
  401054:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
  401058:	b292      	uxth	r2, r2
  40105a:	b9e2      	cbnz	r2, 401096 <note_display+0x1b2>
			 display_char('F', 28, 0);
  40105c:	211c      	movs	r1, #28
  40105e:	2046      	movs	r0, #70	; 0x46
  401060:	4d56      	ldr	r5, [pc, #344]	; (4011bc <note_display+0x2d8>)
  401062:	47a8      	blx	r5
			 display_char(' ', 28, 0);
  401064:	2200      	movs	r2, #0
  401066:	211c      	movs	r1, #28
  401068:	2020      	movs	r0, #32
  40106a:	47a8      	blx	r5
			 display_char('#', 18, 0);
  40106c:	2200      	movs	r2, #0
  40106e:	2112      	movs	r1, #18
  401070:	2023      	movs	r0, #35	; 0x23
  401072:	47a8      	blx	r5
			 display_char('/', 28, 0);
  401074:	2200      	movs	r2, #0
  401076:	211c      	movs	r1, #28
  401078:	202f      	movs	r0, #47	; 0x2f
  40107a:	47a8      	blx	r5
			 display_char('G', 28, 0);
  40107c:	2200      	movs	r2, #0
  40107e:	211c      	movs	r1, #28
  401080:	2047      	movs	r0, #71	; 0x47
  401082:	47a8      	blx	r5
			 display_char(' ', 28, 0);
  401084:	2200      	movs	r2, #0
  401086:	211c      	movs	r1, #28
  401088:	2020      	movs	r0, #32
  40108a:	47a8      	blx	r5
			 display_char('b', 18, 0);
  40108c:	2200      	movs	r2, #0
  40108e:	2112      	movs	r1, #18
  401090:	2062      	movs	r0, #98	; 0x62
  401092:	47a8      	blx	r5
  401094:	e12d      	b.n	4012f2 <note_display+0x40e>
		 }
		 else if(note % 4 == 0) {
  401096:	f013 0f03 	tst.w	r3, #3
  40109a:	d11d      	bne.n	4010d8 <note_display+0x1f4>
			 display_char(' ', 28, 0);
  40109c:	2200      	movs	r2, #0
  40109e:	211c      	movs	r1, #28
  4010a0:	2020      	movs	r0, #32
  4010a2:	4d46      	ldr	r5, [pc, #280]	; (4011bc <note_display+0x2d8>)
  4010a4:	47a8      	blx	r5
			 display_char(' ', 28, 0);
  4010a6:	2200      	movs	r2, #0
  4010a8:	211c      	movs	r1, #28
  4010aa:	2020      	movs	r0, #32
  4010ac:	47a8      	blx	r5
			 display_char(' ', 28, 0);
  4010ae:	2200      	movs	r2, #0
  4010b0:	211c      	movs	r1, #28
  4010b2:	2020      	movs	r0, #32
  4010b4:	47a8      	blx	r5
			 display_char(' ', 28, 0);
  4010b6:	2200      	movs	r2, #0
  4010b8:	211c      	movs	r1, #28
  4010ba:	2020      	movs	r0, #32
  4010bc:	47a8      	blx	r5
			 display_char(' ', 28, 0);
  4010be:	2200      	movs	r2, #0
  4010c0:	211c      	movs	r1, #28
  4010c2:	2020      	movs	r0, #32
  4010c4:	47a8      	blx	r5
			 display_char(' ', 28, 0);
  4010c6:	2200      	movs	r2, #0
  4010c8:	211c      	movs	r1, #28
  4010ca:	2020      	movs	r0, #32
  4010cc:	47a8      	blx	r5
			 display_char('E', 28, 0);
  4010ce:	2200      	movs	r2, #0
  4010d0:	211c      	movs	r1, #28
  4010d2:	2045      	movs	r0, #69	; 0x45
  4010d4:	47a8      	blx	r5
  4010d6:	e10c      	b.n	4012f2 <note_display+0x40e>
		 }
		 else {
			 display_char(' ', 28, 0);
  4010d8:	2200      	movs	r2, #0
  4010da:	211c      	movs	r1, #28
  4010dc:	2020      	movs	r0, #32
  4010de:	4d37      	ldr	r5, [pc, #220]	; (4011bc <note_display+0x2d8>)
  4010e0:	47a8      	blx	r5
			 display_char(' ', 28, 0);
  4010e2:	2200      	movs	r2, #0
  4010e4:	211c      	movs	r1, #28
  4010e6:	2020      	movs	r0, #32
  4010e8:	47a8      	blx	r5
			 display_char(' ', 28, 0);
  4010ea:	2200      	movs	r2, #0
  4010ec:	211c      	movs	r1, #28
  4010ee:	2020      	movs	r0, #32
  4010f0:	47a8      	blx	r5
			 display_char(' ', 28, 0);
  4010f2:	2200      	movs	r2, #0
  4010f4:	211c      	movs	r1, #28
  4010f6:	2020      	movs	r0, #32
  4010f8:	47a8      	blx	r5
			 display_char(' ', 28, 0);
  4010fa:	2200      	movs	r2, #0
  4010fc:	211c      	movs	r1, #28
  4010fe:	2020      	movs	r0, #32
  401100:	47a8      	blx	r5
			 display_char(' ', 28, 0);
  401102:	2200      	movs	r2, #0
  401104:	211c      	movs	r1, #28
  401106:	2020      	movs	r0, #32
  401108:	47a8      	blx	r5
			 display_char('D', 28, 0);
  40110a:	2200      	movs	r2, #0
  40110c:	211c      	movs	r1, #28
  40110e:	2044      	movs	r0, #68	; 0x44
  401110:	47a8      	blx	r5
  401112:	e0ee      	b.n	4012f2 <note_display+0x40e>
		 }

	 }

	 else {
		 if(note % 11 == 0) {
  401114:	4a2b      	ldr	r2, [pc, #172]	; (4011c4 <note_display+0x2e0>)
  401116:	fba2 1203 	umull	r1, r2, r2, r3
  40111a:	08d2      	lsrs	r2, r2, #3
  40111c:	eb02 0182 	add.w	r1, r2, r2, lsl #2
  401120:	eb02 0241 	add.w	r2, r2, r1, lsl #1
  401124:	1a9a      	subs	r2, r3, r2
  401126:	b292      	uxth	r2, r2
  401128:	b9e2      	cbnz	r2, 401164 <note_display+0x280>
			 display_char(' ', 28, 0);
  40112a:	211c      	movs	r1, #28
  40112c:	2020      	movs	r0, #32
  40112e:	4d23      	ldr	r5, [pc, #140]	; (4011bc <note_display+0x2d8>)
  401130:	47a8      	blx	r5
			 display_char(' ', 28, 0);
  401132:	2200      	movs	r2, #0
  401134:	211c      	movs	r1, #28
  401136:	2020      	movs	r0, #32
  401138:	47a8      	blx	r5
			 display_char(' ', 28, 0);
  40113a:	2200      	movs	r2, #0
  40113c:	211c      	movs	r1, #28
  40113e:	2020      	movs	r0, #32
  401140:	47a8      	blx	r5
			 display_char(' ', 28, 0);
  401142:	2200      	movs	r2, #0
  401144:	211c      	movs	r1, #28
  401146:	2020      	movs	r0, #32
  401148:	47a8      	blx	r5
			 display_char(' ', 28, 0);
  40114a:	2200      	movs	r2, #0
  40114c:	211c      	movs	r1, #28
  40114e:	2020      	movs	r0, #32
  401150:	47a8      	blx	r5
			 display_char(' ', 28, 0);
  401152:	2200      	movs	r2, #0
  401154:	211c      	movs	r1, #28
  401156:	2020      	movs	r0, #32
  401158:	47a8      	blx	r5
			 display_char('B', 28, 0);
  40115a:	2200      	movs	r2, #0
  40115c:	211c      	movs	r1, #28
  40115e:	2042      	movs	r0, #66	; 0x42
  401160:	47a8      	blx	r5
  401162:	e0c6      	b.n	4012f2 <note_display+0x40e>
		 }
		 else if(note % 9 == 0) {
  401164:	4a18      	ldr	r2, [pc, #96]	; (4011c8 <note_display+0x2e4>)
  401166:	fba2 1203 	umull	r1, r2, r2, r3
  40116a:	0852      	lsrs	r2, r2, #1
  40116c:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
  401170:	1a9a      	subs	r2, r3, r2
  401172:	b292      	uxth	r2, r2
  401174:	bb52      	cbnz	r2, 4011cc <note_display+0x2e8>
			 display_char(' ', 28, 0);
  401176:	211c      	movs	r1, #28
  401178:	2020      	movs	r0, #32
  40117a:	4d10      	ldr	r5, [pc, #64]	; (4011bc <note_display+0x2d8>)
  40117c:	47a8      	blx	r5
			 display_char(' ', 28, 0);
  40117e:	2200      	movs	r2, #0
  401180:	211c      	movs	r1, #28
  401182:	2020      	movs	r0, #32
  401184:	47a8      	blx	r5
			 display_char(' ', 28, 0);
  401186:	2200      	movs	r2, #0
  401188:	211c      	movs	r1, #28
  40118a:	2020      	movs	r0, #32
  40118c:	47a8      	blx	r5
			 display_char(' ', 28, 0);
  40118e:	2200      	movs	r2, #0
  401190:	211c      	movs	r1, #28
  401192:	2020      	movs	r0, #32
  401194:	47a8      	blx	r5
			 display_char(' ', 28, 0);
  401196:	2200      	movs	r2, #0
  401198:	211c      	movs	r1, #28
  40119a:	2020      	movs	r0, #32
  40119c:	47a8      	blx	r5
			 display_char(' ', 28, 0);
  40119e:	2200      	movs	r2, #0
  4011a0:	211c      	movs	r1, #28
  4011a2:	2020      	movs	r0, #32
  4011a4:	47a8      	blx	r5
			 display_char('A', 28, 0);
  4011a6:	2200      	movs	r2, #0
  4011a8:	211c      	movs	r1, #28
  4011aa:	2041      	movs	r0, #65	; 0x41
  4011ac:	47a8      	blx	r5
  4011ae:	e0a0      	b.n	4012f2 <note_display+0x40e>
  4011b0:	20000614 	.word	0x20000614
  4011b4:	0040061d 	.word	0x0040061d
  4011b8:	aaaaaaab 	.word	0xaaaaaaab
  4011bc:	00400829 	.word	0x00400829
  4011c0:	cccccccd 	.word	0xcccccccd
  4011c4:	ba2e8ba3 	.word	0xba2e8ba3
  4011c8:	38e38e39 	.word	0x38e38e39
		 }
		 else if(note % 7 == 0) {
  4011cc:	4852      	ldr	r0, [pc, #328]	; (401318 <note_display+0x434>)
  4011ce:	fba3 0100 	umull	r0, r1, r3, r0
  4011d2:	1a5a      	subs	r2, r3, r1
  4011d4:	eb01 0252 	add.w	r2, r1, r2, lsr #1
  4011d8:	0892      	lsrs	r2, r2, #2
  4011da:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
  4011de:	1a9a      	subs	r2, r3, r2
  4011e0:	b292      	uxth	r2, r2
  4011e2:	b9e2      	cbnz	r2, 40121e <note_display+0x33a>
			 display_char(' ', 28, 0);
  4011e4:	211c      	movs	r1, #28
  4011e6:	2020      	movs	r0, #32
  4011e8:	4d4c      	ldr	r5, [pc, #304]	; (40131c <note_display+0x438>)
  4011ea:	47a8      	blx	r5
			 display_char(' ', 28, 0);
  4011ec:	2200      	movs	r2, #0
  4011ee:	211c      	movs	r1, #28
  4011f0:	2020      	movs	r0, #32
  4011f2:	47a8      	blx	r5
			 display_char(' ', 28, 0);
  4011f4:	2200      	movs	r2, #0
  4011f6:	211c      	movs	r1, #28
  4011f8:	2020      	movs	r0, #32
  4011fa:	47a8      	blx	r5
			 display_char(' ', 28, 0);
  4011fc:	2200      	movs	r2, #0
  4011fe:	211c      	movs	r1, #28
  401200:	2020      	movs	r0, #32
  401202:	47a8      	blx	r5
			 display_char(' ', 28, 0);
  401204:	2200      	movs	r2, #0
  401206:	211c      	movs	r1, #28
  401208:	2020      	movs	r0, #32
  40120a:	47a8      	blx	r5
			 display_char(' ', 28, 0);
  40120c:	2200      	movs	r2, #0
  40120e:	211c      	movs	r1, #28
  401210:	2020      	movs	r0, #32
  401212:	47a8      	blx	r5
			 display_char('G', 28, 0);
  401214:	2200      	movs	r2, #0
  401216:	211c      	movs	r1, #28
  401218:	2047      	movs	r0, #71	; 0x47
  40121a:	47a8      	blx	r5
  40121c:	e069      	b.n	4012f2 <note_display+0x40e>
		 }
		 else if(note % 5 == 0) {
  40121e:	4a40      	ldr	r2, [pc, #256]	; (401320 <note_display+0x43c>)
  401220:	fba2 1203 	umull	r1, r2, r2, r3
  401224:	0892      	lsrs	r2, r2, #2
  401226:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  40122a:	1a9a      	subs	r2, r3, r2
  40122c:	b292      	uxth	r2, r2
  40122e:	b9e2      	cbnz	r2, 40126a <note_display+0x386>
			 display_char(' ', 28, 0);
  401230:	211c      	movs	r1, #28
  401232:	2020      	movs	r0, #32
  401234:	4d39      	ldr	r5, [pc, #228]	; (40131c <note_display+0x438>)
  401236:	47a8      	blx	r5
			 display_char(' ', 28, 0);
  401238:	2200      	movs	r2, #0
  40123a:	211c      	movs	r1, #28
  40123c:	2020      	movs	r0, #32
  40123e:	47a8      	blx	r5
			 display_char(' ', 28, 0);
  401240:	2200      	movs	r2, #0
  401242:	211c      	movs	r1, #28
  401244:	2020      	movs	r0, #32
  401246:	47a8      	blx	r5
			 display_char(' ', 28, 0);
  401248:	2200      	movs	r2, #0
  40124a:	211c      	movs	r1, #28
  40124c:	2020      	movs	r0, #32
  40124e:	47a8      	blx	r5
			 display_char(' ', 28, 0);
  401250:	2200      	movs	r2, #0
  401252:	211c      	movs	r1, #28
  401254:	2020      	movs	r0, #32
  401256:	47a8      	blx	r5
			 display_char(' ', 28, 0);
  401258:	2200      	movs	r2, #0
  40125a:	211c      	movs	r1, #28
  40125c:	2020      	movs	r0, #32
  40125e:	47a8      	blx	r5
			 display_char('F', 28, 0);
  401260:	2200      	movs	r2, #0
  401262:	211c      	movs	r1, #28
  401264:	2046      	movs	r0, #70	; 0x46
  401266:	47a8      	blx	r5
  401268:	e043      	b.n	4012f2 <note_display+0x40e>
		 }
		 else if(note % 3 == 0) {
  40126a:	4a2e      	ldr	r2, [pc, #184]	; (401324 <note_display+0x440>)
  40126c:	fba2 1203 	umull	r1, r2, r2, r3
  401270:	0852      	lsrs	r2, r2, #1
  401272:	eb02 0242 	add.w	r2, r2, r2, lsl #1
  401276:	1a9b      	subs	r3, r3, r2
  401278:	b29b      	uxth	r3, r3
  40127a:	b9eb      	cbnz	r3, 4012b8 <note_display+0x3d4>
			 display_char('D', 28, 0);
  40127c:	2200      	movs	r2, #0
  40127e:	211c      	movs	r1, #28
  401280:	2044      	movs	r0, #68	; 0x44
  401282:	4d26      	ldr	r5, [pc, #152]	; (40131c <note_display+0x438>)
  401284:	47a8      	blx	r5
			 display_char(' ', 28, 0);
  401286:	2200      	movs	r2, #0
  401288:	211c      	movs	r1, #28
  40128a:	2020      	movs	r0, #32
  40128c:	47a8      	blx	r5
			 display_char('#', 18, 0);
  40128e:	2200      	movs	r2, #0
  401290:	2112      	movs	r1, #18
  401292:	2023      	movs	r0, #35	; 0x23
  401294:	47a8      	blx	r5
			 display_char('/', 28, 0);
  401296:	2200      	movs	r2, #0
  401298:	211c      	movs	r1, #28
  40129a:	202f      	movs	r0, #47	; 0x2f
  40129c:	47a8      	blx	r5
			 display_char('E', 28, 0);
  40129e:	2200      	movs	r2, #0
  4012a0:	211c      	movs	r1, #28
  4012a2:	2045      	movs	r0, #69	; 0x45
  4012a4:	47a8      	blx	r5
			 display_char(' ', 28, 0);
  4012a6:	2200      	movs	r2, #0
  4012a8:	211c      	movs	r1, #28
  4012aa:	2020      	movs	r0, #32
  4012ac:	47a8      	blx	r5
			 display_char('b', 18, 0);
  4012ae:	2200      	movs	r2, #0
  4012b0:	2112      	movs	r1, #18
  4012b2:	2062      	movs	r0, #98	; 0x62
  4012b4:	47a8      	blx	r5
  4012b6:	e01c      	b.n	4012f2 <note_display+0x40e>
		 }
		 else {
			 display_char('C', 28, 0);
  4012b8:	2200      	movs	r2, #0
  4012ba:	211c      	movs	r1, #28
  4012bc:	2043      	movs	r0, #67	; 0x43
  4012be:	4d17      	ldr	r5, [pc, #92]	; (40131c <note_display+0x438>)
  4012c0:	47a8      	blx	r5
			 display_char(' ', 28, 0);
  4012c2:	2200      	movs	r2, #0
  4012c4:	211c      	movs	r1, #28
  4012c6:	2020      	movs	r0, #32
  4012c8:	47a8      	blx	r5
			 display_char('#', 18, 0);
  4012ca:	2200      	movs	r2, #0
  4012cc:	2112      	movs	r1, #18
  4012ce:	2023      	movs	r0, #35	; 0x23
  4012d0:	47a8      	blx	r5
			 display_char('/', 28, 0);
  4012d2:	2200      	movs	r2, #0
  4012d4:	211c      	movs	r1, #28
  4012d6:	202f      	movs	r0, #47	; 0x2f
  4012d8:	47a8      	blx	r5
			 display_char('D', 28, 0);
  4012da:	2200      	movs	r2, #0
  4012dc:	211c      	movs	r1, #28
  4012de:	2044      	movs	r0, #68	; 0x44
  4012e0:	47a8      	blx	r5
			 display_char(' ', 28, 0);
  4012e2:	2200      	movs	r2, #0
  4012e4:	211c      	movs	r1, #28
  4012e6:	2020      	movs	r0, #32
  4012e8:	47a8      	blx	r5
			 display_char('b', 18, 0);
  4012ea:	2200      	movs	r2, #0
  4012ec:	2112      	movs	r1, #18
  4012ee:	2062      	movs	r0, #98	; 0x62
  4012f0:	47a8      	blx	r5
		 }
	 }
	 display_char(' ', 28, 0);
  4012f2:	2200      	movs	r2, #0
  4012f4:	211c      	movs	r1, #28
  4012f6:	2020      	movs	r0, #32
  4012f8:	4d08      	ldr	r5, [pc, #32]	; (40131c <note_display+0x438>)
  4012fa:	47a8      	blx	r5
	 display_char(' ', 28, 0);
  4012fc:	2200      	movs	r2, #0
  4012fe:	211c      	movs	r1, #28
  401300:	2020      	movs	r0, #32
  401302:	47a8      	blx	r5

	 display_number(octave, 189, 0);
  401304:	2200      	movs	r2, #0
  401306:	21bd      	movs	r1, #189	; 0xbd
  401308:	4620      	mov	r0, r4
  40130a:	4b07      	ldr	r3, [pc, #28]	; (401328 <note_display+0x444>)
  40130c:	4798      	blx	r3

	finish_display(0);
  40130e:	2000      	movs	r0, #0
  401310:	4b06      	ldr	r3, [pc, #24]	; (40132c <note_display+0x448>)
  401312:	4798      	blx	r3
  401314:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401316:	bf00      	nop
  401318:	24924925 	.word	0x24924925
  40131c:	00400829 	.word	0x00400829
  401320:	cccccccd 	.word	0xcccccccd
  401324:	aaaaaaab 	.word	0xaaaaaaab
  401328:	00400e2d 	.word	0x00400e2d
  40132c:	004007e5 	.word	0x004007e5

00401330 <bpm_display>:
}

// Display 1
void bpm_display(uint16_t bpm) {
  401330:	b538      	push	{r3, r4, r5, lr}
  401332:	4605      	mov	r5, r0
	display_char('B', 28, 1);
  401334:	2201      	movs	r2, #1
  401336:	211c      	movs	r1, #28
  401338:	2042      	movs	r0, #66	; 0x42
  40133a:	4c13      	ldr	r4, [pc, #76]	; (401388 <bpm_display+0x58>)
  40133c:	47a0      	blx	r4
	display_char(' ', 28, 1);
  40133e:	2201      	movs	r2, #1
  401340:	211c      	movs	r1, #28
  401342:	2020      	movs	r0, #32
  401344:	47a0      	blx	r4
	display_char('P', 28, 1);
  401346:	2201      	movs	r2, #1
  401348:	211c      	movs	r1, #28
  40134a:	2050      	movs	r0, #80	; 0x50
  40134c:	47a0      	blx	r4
	display_char(' ', 28, 1);
  40134e:	2201      	movs	r2, #1
  401350:	211c      	movs	r1, #28
  401352:	2020      	movs	r0, #32
  401354:	47a0      	blx	r4
	display_char('M', 28, 1);
  401356:	2201      	movs	r2, #1
  401358:	211c      	movs	r1, #28
  40135a:	204d      	movs	r0, #77	; 0x4d
  40135c:	47a0      	blx	r4
	display_char(' ', 28, 1);
  40135e:	2201      	movs	r2, #1
  401360:	211c      	movs	r1, #28
  401362:	2020      	movs	r0, #32
  401364:	47a0      	blx	r4
	display_char(':', 28, 1);
  401366:	2201      	movs	r2, #1
  401368:	211c      	movs	r1, #28
  40136a:	203a      	movs	r0, #58	; 0x3a
  40136c:	47a0      	blx	r4
	display_char(' ', 28, 1);
  40136e:	2201      	movs	r2, #1
  401370:	211c      	movs	r1, #28
  401372:	2020      	movs	r0, #32
  401374:	47a0      	blx	r4
	display_number(bpm, 28, 1);
  401376:	2201      	movs	r2, #1
  401378:	211c      	movs	r1, #28
  40137a:	4628      	mov	r0, r5
  40137c:	4b03      	ldr	r3, [pc, #12]	; (40138c <bpm_display+0x5c>)
  40137e:	4798      	blx	r3
	finish_display(1);
  401380:	2001      	movs	r0, #1
  401382:	4b03      	ldr	r3, [pc, #12]	; (401390 <bpm_display+0x60>)
  401384:	4798      	blx	r3
  401386:	bd38      	pop	{r3, r4, r5, pc}
  401388:	00400829 	.word	0x00400829
  40138c:	00400e2d 	.word	0x00400e2d
  401390:	004007e5 	.word	0x004007e5

00401394 <res_display>:
}

// Display 2
void res_display(uint8_t res) {
  401394:	b538      	push	{r3, r4, r5, lr}
  401396:	4605      	mov	r5, r0
	display_char('R', 22, 2);
  401398:	2202      	movs	r2, #2
  40139a:	2116      	movs	r1, #22
  40139c:	2052      	movs	r0, #82	; 0x52
  40139e:	4c35      	ldr	r4, [pc, #212]	; (401474 <res_display+0xe0>)
  4013a0:	47a0      	blx	r4
	display_char(' ', 28, 2);
  4013a2:	2202      	movs	r2, #2
  4013a4:	211c      	movs	r1, #28
  4013a6:	2020      	movs	r0, #32
  4013a8:	47a0      	blx	r4
	display_char('E', 22, 2);
  4013aa:	2202      	movs	r2, #2
  4013ac:	2116      	movs	r1, #22
  4013ae:	2045      	movs	r0, #69	; 0x45
  4013b0:	47a0      	blx	r4
	display_char(' ', 28, 2);
  4013b2:	2202      	movs	r2, #2
  4013b4:	211c      	movs	r1, #28
  4013b6:	2020      	movs	r0, #32
  4013b8:	47a0      	blx	r4
	display_char('S', 22, 2);
  4013ba:	2202      	movs	r2, #2
  4013bc:	2116      	movs	r1, #22
  4013be:	2053      	movs	r0, #83	; 0x53
  4013c0:	47a0      	blx	r4
	display_char(' ', 28, 2);
  4013c2:	2202      	movs	r2, #2
  4013c4:	211c      	movs	r1, #28
  4013c6:	2020      	movs	r0, #32
  4013c8:	47a0      	blx	r4
	display_char(':', 22, 2);
  4013ca:	2202      	movs	r2, #2
  4013cc:	2116      	movs	r1, #22
  4013ce:	203a      	movs	r0, #58	; 0x3a
  4013d0:	47a0      	blx	r4
	display_char(' ', 28, 2);
  4013d2:	2202      	movs	r2, #2
  4013d4:	211c      	movs	r1, #28
  4013d6:	2020      	movs	r0, #32
  4013d8:	47a0      	blx	r4
	display_char('1', 22, 2);
  4013da:	2202      	movs	r2, #2
  4013dc:	2116      	movs	r1, #22
  4013de:	2031      	movs	r0, #49	; 0x31
  4013e0:	47a0      	blx	r4
	display_char(' ', 28, 2);
  4013e2:	2202      	movs	r2, #2
  4013e4:	211c      	movs	r1, #28
  4013e6:	2020      	movs	r0, #32
  4013e8:	47a0      	blx	r4
	display_char('/', 22, 2); 
  4013ea:	2202      	movs	r2, #2
  4013ec:	2116      	movs	r1, #22
  4013ee:	202f      	movs	r0, #47	; 0x2f
  4013f0:	47a0      	blx	r4
	display_char(' ', 28, 2);
  4013f2:	2202      	movs	r2, #2
  4013f4:	211c      	movs	r1, #28
  4013f6:	2020      	movs	r0, #32
  4013f8:	47a0      	blx	r4
	if(res == 6) {
  4013fa:	2d06      	cmp	r5, #6
  4013fc:	d109      	bne.n	401412 <res_display+0x7e>
		display_number(4, 22, 2);
  4013fe:	2202      	movs	r2, #2
  401400:	2116      	movs	r1, #22
  401402:	2004      	movs	r0, #4
  401404:	4b1c      	ldr	r3, [pc, #112]	; (401478 <res_display+0xe4>)
  401406:	4798      	blx	r3
		display_char('t', 22, 2);
  401408:	2202      	movs	r2, #2
  40140a:	2116      	movs	r1, #22
  40140c:	2074      	movs	r0, #116	; 0x74
  40140e:	47a0      	blx	r4
  401410:	e02b      	b.n	40146a <res_display+0xd6>
	}
	else if(res == 12) {
  401412:	2d0c      	cmp	r5, #12
  401414:	d10a      	bne.n	40142c <res_display+0x98>
		display_number(8, 22, 2);
  401416:	2202      	movs	r2, #2
  401418:	2116      	movs	r1, #22
  40141a:	2008      	movs	r0, #8
  40141c:	4b16      	ldr	r3, [pc, #88]	; (401478 <res_display+0xe4>)
  40141e:	4798      	blx	r3
		display_char('t', 22, 2);
  401420:	2202      	movs	r2, #2
  401422:	2116      	movs	r1, #22
  401424:	2074      	movs	r0, #116	; 0x74
  401426:	4b13      	ldr	r3, [pc, #76]	; (401474 <res_display+0xe0>)
  401428:	4798      	blx	r3
  40142a:	e01e      	b.n	40146a <res_display+0xd6>
	}
	else if(res == 24) {
  40142c:	2d18      	cmp	r5, #24
  40142e:	d10a      	bne.n	401446 <res_display+0xb2>
		display_number(16, 22, 2);
  401430:	2202      	movs	r2, #2
  401432:	2116      	movs	r1, #22
  401434:	2010      	movs	r0, #16
  401436:	4b10      	ldr	r3, [pc, #64]	; (401478 <res_display+0xe4>)
  401438:	4798      	blx	r3
		display_char('t', 22, 2);
  40143a:	2202      	movs	r2, #2
  40143c:	2116      	movs	r1, #22
  40143e:	2074      	movs	r0, #116	; 0x74
  401440:	4b0c      	ldr	r3, [pc, #48]	; (401474 <res_display+0xe0>)
  401442:	4798      	blx	r3
  401444:	e011      	b.n	40146a <res_display+0xd6>
	}
	else if(res == 48) {
  401446:	2d30      	cmp	r5, #48	; 0x30
  401448:	d10a      	bne.n	401460 <res_display+0xcc>
		display_number(32, 22, 2);
  40144a:	2202      	movs	r2, #2
  40144c:	2116      	movs	r1, #22
  40144e:	2020      	movs	r0, #32
  401450:	4b09      	ldr	r3, [pc, #36]	; (401478 <res_display+0xe4>)
  401452:	4798      	blx	r3
		display_char('t', 22, 2);
  401454:	2202      	movs	r2, #2
  401456:	2116      	movs	r1, #22
  401458:	2074      	movs	r0, #116	; 0x74
  40145a:	4b06      	ldr	r3, [pc, #24]	; (401474 <res_display+0xe0>)
  40145c:	4798      	blx	r3
  40145e:	e004      	b.n	40146a <res_display+0xd6>
	}	
	else {
		display_number(res, 22, 2);
  401460:	2202      	movs	r2, #2
  401462:	2116      	movs	r1, #22
  401464:	4628      	mov	r0, r5
  401466:	4b04      	ldr	r3, [pc, #16]	; (401478 <res_display+0xe4>)
  401468:	4798      	blx	r3
	}
	finish_display(2);  
  40146a:	2002      	movs	r0, #2
  40146c:	4b03      	ldr	r3, [pc, #12]	; (40147c <res_display+0xe8>)
  40146e:	4798      	blx	r3
  401470:	bd38      	pop	{r3, r4, r5, pc}
  401472:	bf00      	nop
  401474:	00400829 	.word	0x00400829
  401478:	00400e2d 	.word	0x00400e2d
  40147c:	004007e5 	.word	0x004007e5

00401480 <page_display>:
		finish_display(2);
	}
}

// Display 3
void page_display(uint8_t page) {
  401480:	b538      	push	{r3, r4, r5, lr}
  401482:	4605      	mov	r5, r0
	display_char('P', 28, 3);
  401484:	2203      	movs	r2, #3
  401486:	211c      	movs	r1, #28
  401488:	2050      	movs	r0, #80	; 0x50
  40148a:	4c0d      	ldr	r4, [pc, #52]	; (4014c0 <page_display+0x40>)
  40148c:	47a0      	blx	r4
	display_char('A', 28, 3);
  40148e:	2203      	movs	r2, #3
  401490:	211c      	movs	r1, #28
  401492:	2041      	movs	r0, #65	; 0x41
  401494:	47a0      	blx	r4
	display_char('G', 28, 3);
  401496:	2203      	movs	r2, #3
  401498:	211c      	movs	r1, #28
  40149a:	2047      	movs	r0, #71	; 0x47
  40149c:	47a0      	blx	r4
	display_char('E', 28, 3);
  40149e:	2203      	movs	r2, #3
  4014a0:	211c      	movs	r1, #28
  4014a2:	2045      	movs	r0, #69	; 0x45
  4014a4:	47a0      	blx	r4
	display_char(':', 28, 3);
  4014a6:	2203      	movs	r2, #3
  4014a8:	211c      	movs	r1, #28
  4014aa:	203a      	movs	r0, #58	; 0x3a
  4014ac:	47a0      	blx	r4
	display_number(page, 28, 3);
  4014ae:	2203      	movs	r2, #3
  4014b0:	211c      	movs	r1, #28
  4014b2:	4628      	mov	r0, r5
  4014b4:	4b03      	ldr	r3, [pc, #12]	; (4014c4 <page_display+0x44>)
  4014b6:	4798      	blx	r3
	finish_display(3);
  4014b8:	2003      	movs	r0, #3
  4014ba:	4b03      	ldr	r3, [pc, #12]	; (4014c8 <page_display+0x48>)
  4014bc:	4798      	blx	r3
  4014be:	bd38      	pop	{r3, r4, r5, pc}
  4014c0:	00400829 	.word	0x00400829
  4014c4:	00400e2d 	.word	0x00400e2d
  4014c8:	004007e5 	.word	0x004007e5

004014cc <loop_display>:
}

void loop_display(uint8_t page_loop) {
  4014cc:	b538      	push	{r3, r4, r5, lr}
  4014ce:	4605      	mov	r5, r0
	display_char('L', 28, 3);
  4014d0:	2203      	movs	r2, #3
  4014d2:	211c      	movs	r1, #28
  4014d4:	204c      	movs	r0, #76	; 0x4c
  4014d6:	4c0d      	ldr	r4, [pc, #52]	; (40150c <loop_display+0x40>)
  4014d8:	47a0      	blx	r4
	display_char('O', 28, 3);
  4014da:	2203      	movs	r2, #3
  4014dc:	211c      	movs	r1, #28
  4014de:	204f      	movs	r0, #79	; 0x4f
  4014e0:	47a0      	blx	r4
	display_char('O', 28, 3);
  4014e2:	2203      	movs	r2, #3
  4014e4:	211c      	movs	r1, #28
  4014e6:	204f      	movs	r0, #79	; 0x4f
  4014e8:	47a0      	blx	r4
	display_char('P', 28, 3);
  4014ea:	2203      	movs	r2, #3
  4014ec:	211c      	movs	r1, #28
  4014ee:	2050      	movs	r0, #80	; 0x50
  4014f0:	47a0      	blx	r4
	display_char(':', 28, 3);
  4014f2:	2203      	movs	r2, #3
  4014f4:	211c      	movs	r1, #28
  4014f6:	203a      	movs	r0, #58	; 0x3a
  4014f8:	47a0      	blx	r4
	display_number(page_loop, 28, 3);
  4014fa:	2203      	movs	r2, #3
  4014fc:	211c      	movs	r1, #28
  4014fe:	4628      	mov	r0, r5
  401500:	4b03      	ldr	r3, [pc, #12]	; (401510 <loop_display+0x44>)
  401502:	4798      	blx	r3
	finish_display(3);
  401504:	2003      	movs	r0, #3
  401506:	4b03      	ldr	r3, [pc, #12]	; (401514 <loop_display+0x48>)
  401508:	4798      	blx	r3
  40150a:	bd38      	pop	{r3, r4, r5, pc}
  40150c:	00400829 	.word	0x00400829
  401510:	00400e2d 	.word	0x00400e2d
  401514:	004007e5 	.word	0x004007e5

00401518 <pattern_display>:
}

// Display 4
void pattern_display(uint8_t pattern) {
  401518:	b538      	push	{r3, r4, r5, lr}
  40151a:	4605      	mov	r5, r0
	display_char('P', 28, 4);
  40151c:	2204      	movs	r2, #4
  40151e:	211c      	movs	r1, #28
  401520:	2050      	movs	r0, #80	; 0x50
  401522:	4c0d      	ldr	r4, [pc, #52]	; (401558 <pattern_display+0x40>)
  401524:	47a0      	blx	r4
	display_char('T', 28, 4);
  401526:	2204      	movs	r2, #4
  401528:	211c      	movs	r1, #28
  40152a:	2054      	movs	r0, #84	; 0x54
  40152c:	47a0      	blx	r4
	display_char('R', 28, 4);
  40152e:	2204      	movs	r2, #4
  401530:	211c      	movs	r1, #28
  401532:	2052      	movs	r0, #82	; 0x52
  401534:	47a0      	blx	r4
	display_char('N', 28, 4);
  401536:	2204      	movs	r2, #4
  401538:	211c      	movs	r1, #28
  40153a:	204e      	movs	r0, #78	; 0x4e
  40153c:	47a0      	blx	r4
	display_char(':', 28, 4);
  40153e:	2204      	movs	r2, #4
  401540:	211c      	movs	r1, #28
  401542:	203a      	movs	r0, #58	; 0x3a
  401544:	47a0      	blx	r4
	display_number(pattern, 28, 4);
  401546:	2204      	movs	r2, #4
  401548:	211c      	movs	r1, #28
  40154a:	4628      	mov	r0, r5
  40154c:	4b03      	ldr	r3, [pc, #12]	; (40155c <pattern_display+0x44>)
  40154e:	4798      	blx	r3
	finish_display(4);
  401550:	2004      	movs	r0, #4
  401552:	4b03      	ldr	r3, [pc, #12]	; (401560 <pattern_display+0x48>)
  401554:	4798      	blx	r3
  401556:	bd38      	pop	{r3, r4, r5, pc}
  401558:	00400829 	.word	0x00400829
  40155c:	00400e2d 	.word	0x00400e2d
  401560:	004007e5 	.word	0x004007e5

00401564 <clr_pattern_display>:
}

void clr_pattern_display(uint8_t pattern, bool yes) {
  401564:	b570      	push	{r4, r5, r6, lr}
  401566:	4606      	mov	r6, r0
  401568:	460d      	mov	r5, r1
	display_char('C', 22, 4);
  40156a:	2204      	movs	r2, #4
  40156c:	2116      	movs	r1, #22
  40156e:	2043      	movs	r0, #67	; 0x43
  401570:	4c30      	ldr	r4, [pc, #192]	; (401634 <clr_pattern_display+0xd0>)
  401572:	47a0      	blx	r4
	display_char(' ', 22, 4);
  401574:	2204      	movs	r2, #4
  401576:	2116      	movs	r1, #22
  401578:	2020      	movs	r0, #32
  40157a:	47a0      	blx	r4
	display_char('L', 22, 4);
  40157c:	2204      	movs	r2, #4
  40157e:	2116      	movs	r1, #22
  401580:	204c      	movs	r0, #76	; 0x4c
  401582:	47a0      	blx	r4
	display_char(' ', 22, 4);
  401584:	2204      	movs	r2, #4
  401586:	2116      	movs	r1, #22
  401588:	2020      	movs	r0, #32
  40158a:	47a0      	blx	r4
	display_char('R', 22, 4);
  40158c:	2204      	movs	r2, #4
  40158e:	2116      	movs	r1, #22
  401590:	2052      	movs	r0, #82	; 0x52
  401592:	47a0      	blx	r4
	display_char(':', 22, 4);
  401594:	2204      	movs	r2, #4
  401596:	2116      	movs	r1, #22
  401598:	203a      	movs	r0, #58	; 0x3a
  40159a:	47a0      	blx	r4
	display_number(pattern, 22, 4);
  40159c:	2204      	movs	r2, #4
  40159e:	2116      	movs	r1, #22
  4015a0:	4630      	mov	r0, r6
  4015a2:	4b25      	ldr	r3, [pc, #148]	; (401638 <clr_pattern_display+0xd4>)
  4015a4:	4798      	blx	r3
	display_char(' ', 22, 4);
  4015a6:	2204      	movs	r2, #4
  4015a8:	2116      	movs	r1, #22
  4015aa:	2020      	movs	r0, #32
  4015ac:	47a0      	blx	r4
	display_char(' ', 22, 4);
  4015ae:	2204      	movs	r2, #4
  4015b0:	2116      	movs	r1, #22
  4015b2:	2020      	movs	r0, #32
  4015b4:	47a0      	blx	r4
	if(yes) {
  4015b6:	b1d5      	cbz	r5, 4015ee <clr_pattern_display+0x8a>
		display_char_inverted(' ', 22, 4);
  4015b8:	2204      	movs	r2, #4
  4015ba:	2116      	movs	r1, #22
  4015bc:	2020      	movs	r0, #32
  4015be:	4c1f      	ldr	r4, [pc, #124]	; (40163c <clr_pattern_display+0xd8>)
  4015c0:	47a0      	blx	r4
		display_char_inverted('Y', 22, 4);
  4015c2:	2204      	movs	r2, #4
  4015c4:	2116      	movs	r1, #22
  4015c6:	2059      	movs	r0, #89	; 0x59
  4015c8:	47a0      	blx	r4
		display_char_inverted(' ', 22, 4);
  4015ca:	2204      	movs	r2, #4
  4015cc:	2116      	movs	r1, #22
  4015ce:	2020      	movs	r0, #32
  4015d0:	47a0      	blx	r4
		display_char('/', 22, 4);
  4015d2:	2204      	movs	r2, #4
  4015d4:	2116      	movs	r1, #22
  4015d6:	202f      	movs	r0, #47	; 0x2f
  4015d8:	4c16      	ldr	r4, [pc, #88]	; (401634 <clr_pattern_display+0xd0>)
  4015da:	47a0      	blx	r4
		display_char(' ', 22, 4);
  4015dc:	2204      	movs	r2, #4
  4015de:	2116      	movs	r1, #22
  4015e0:	2020      	movs	r0, #32
  4015e2:	47a0      	blx	r4
		display_char('N', 22, 4);
  4015e4:	2204      	movs	r2, #4
  4015e6:	2116      	movs	r1, #22
  4015e8:	204e      	movs	r0, #78	; 0x4e
  4015ea:	47a0      	blx	r4
  4015ec:	e01d      	b.n	40162a <clr_pattern_display+0xc6>
	}
	else {
		display_char(' ', 22, 4);
  4015ee:	2204      	movs	r2, #4
  4015f0:	2116      	movs	r1, #22
  4015f2:	2020      	movs	r0, #32
  4015f4:	4c0f      	ldr	r4, [pc, #60]	; (401634 <clr_pattern_display+0xd0>)
  4015f6:	47a0      	blx	r4
		display_char('Y', 22, 4);
  4015f8:	2204      	movs	r2, #4
  4015fa:	2116      	movs	r1, #22
  4015fc:	2059      	movs	r0, #89	; 0x59
  4015fe:	47a0      	blx	r4
		display_char(' ', 22, 4);
  401600:	2204      	movs	r2, #4
  401602:	2116      	movs	r1, #22
  401604:	2020      	movs	r0, #32
  401606:	47a0      	blx	r4
		display_char('/', 22, 4);
  401608:	2204      	movs	r2, #4
  40160a:	2116      	movs	r1, #22
  40160c:	202f      	movs	r0, #47	; 0x2f
  40160e:	47a0      	blx	r4
		display_char_inverted(' ', 22, 4);
  401610:	2204      	movs	r2, #4
  401612:	2116      	movs	r1, #22
  401614:	2020      	movs	r0, #32
  401616:	4c09      	ldr	r4, [pc, #36]	; (40163c <clr_pattern_display+0xd8>)
  401618:	47a0      	blx	r4
		display_char_inverted('N', 22, 4);
  40161a:	2204      	movs	r2, #4
  40161c:	2116      	movs	r1, #22
  40161e:	204e      	movs	r0, #78	; 0x4e
  401620:	47a0      	blx	r4
		display_char_inverted(' ', 22, 4);
  401622:	2204      	movs	r2, #4
  401624:	2116      	movs	r1, #22
  401626:	2020      	movs	r0, #32
  401628:	47a0      	blx	r4
	}

	finish_display(4);
  40162a:	2004      	movs	r0, #4
  40162c:	4b04      	ldr	r3, [pc, #16]	; (401640 <clr_pattern_display+0xdc>)
  40162e:	4798      	blx	r3
  401630:	bd70      	pop	{r4, r5, r6, pc}
  401632:	bf00      	nop
  401634:	00400829 	.word	0x00400829
  401638:	00400e2d 	.word	0x00400e2d
  40163c:	00400af1 	.word	0x00400af1
  401640:	004007e5 	.word	0x004007e5

00401644 <output_display_1>:
}

// Display 5
void output_display_1(uint8_t out1, uint8_t out2) {
  401644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  401646:	4605      	mov	r5, r0
  401648:	460f      	mov	r7, r1
	display_char('0', 22, 5);
  40164a:	2205      	movs	r2, #5
  40164c:	2116      	movs	r1, #22
  40164e:	2030      	movs	r0, #48	; 0x30
  401650:	4c1d      	ldr	r4, [pc, #116]	; (4016c8 <output_display_1+0x84>)
  401652:	47a0      	blx	r4
	display_char(' ', 22, 5);
  401654:	2205      	movs	r2, #5
  401656:	2116      	movs	r1, #22
  401658:	2020      	movs	r0, #32
  40165a:	47a0      	blx	r4
	display_char('1', 18, 5);
  40165c:	2205      	movs	r2, #5
  40165e:	2112      	movs	r1, #18
  401660:	2031      	movs	r0, #49	; 0x31
  401662:	47a0      	blx	r4
	display_char(':', 18, 5);
  401664:	2205      	movs	r2, #5
  401666:	2112      	movs	r1, #18
  401668:	203a      	movs	r0, #58	; 0x3a
  40166a:	47a0      	blx	r4
	display_number(out1, 18, 5);
  40166c:	2205      	movs	r2, #5
  40166e:	2112      	movs	r1, #18
  401670:	4628      	mov	r0, r5
  401672:	4b16      	ldr	r3, [pc, #88]	; (4016cc <output_display_1+0x88>)
  401674:	4798      	blx	r3

	while(disp_ptr_location[5] < 1920) {
  401676:	4b16      	ldr	r3, [pc, #88]	; (4016d0 <output_display_1+0x8c>)
  401678:	895b      	ldrh	r3, [r3, #10]
  40167a:	f5b3 6ff0 	cmp.w	r3, #1920	; 0x780
  40167e:	d209      	bcs.n	401694 <output_display_1+0x50>
		display_data(0, 5);
  401680:	2605      	movs	r6, #5
  401682:	4d14      	ldr	r5, [pc, #80]	; (4016d4 <output_display_1+0x90>)
	display_char(' ', 22, 5);
	display_char('1', 18, 5);
	display_char(':', 18, 5);
	display_number(out1, 18, 5);

	while(disp_ptr_location[5] < 1920) {
  401684:	4c12      	ldr	r4, [pc, #72]	; (4016d0 <output_display_1+0x8c>)
		display_data(0, 5);
  401686:	4631      	mov	r1, r6
  401688:	2000      	movs	r0, #0
  40168a:	47a8      	blx	r5
	display_char(' ', 22, 5);
	display_char('1', 18, 5);
	display_char(':', 18, 5);
	display_number(out1, 18, 5);

	while(disp_ptr_location[5] < 1920) {
  40168c:	8963      	ldrh	r3, [r4, #10]
  40168e:	f5b3 6ff0 	cmp.w	r3, #1920	; 0x780
  401692:	d3f8      	bcc.n	401686 <output_display_1+0x42>
		display_data(0, 5);
	}

	display_char('0', 22, 5);
  401694:	2205      	movs	r2, #5
  401696:	2116      	movs	r1, #22
  401698:	2030      	movs	r0, #48	; 0x30
  40169a:	4c0b      	ldr	r4, [pc, #44]	; (4016c8 <output_display_1+0x84>)
  40169c:	47a0      	blx	r4
	display_char(' ', 22, 5);
  40169e:	2205      	movs	r2, #5
  4016a0:	2116      	movs	r1, #22
  4016a2:	2020      	movs	r0, #32
  4016a4:	47a0      	blx	r4
	display_char('2', 18, 5);
  4016a6:	2205      	movs	r2, #5
  4016a8:	2112      	movs	r1, #18
  4016aa:	2032      	movs	r0, #50	; 0x32
  4016ac:	47a0      	blx	r4
	display_char(':', 18, 5);
  4016ae:	2205      	movs	r2, #5
  4016b0:	2112      	movs	r1, #18
  4016b2:	203a      	movs	r0, #58	; 0x3a
  4016b4:	47a0      	blx	r4
	display_number(out2, 18, 5);
  4016b6:	2205      	movs	r2, #5
  4016b8:	2112      	movs	r1, #18
  4016ba:	4638      	mov	r0, r7
  4016bc:	4b03      	ldr	r3, [pc, #12]	; (4016cc <output_display_1+0x88>)
  4016be:	4798      	blx	r3
	
	finish_display(5);
  4016c0:	2005      	movs	r0, #5
  4016c2:	4b05      	ldr	r3, [pc, #20]	; (4016d8 <output_display_1+0x94>)
  4016c4:	4798      	blx	r3
  4016c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4016c8:	00400829 	.word	0x00400829
  4016cc:	00400e2d 	.word	0x00400e2d
  4016d0:	20000614 	.word	0x20000614
  4016d4:	0040061d 	.word	0x0040061d
  4016d8:	004007e5 	.word	0x004007e5

004016dc <output_display_2>:
}

// Display 6
void output_display_2(uint8_t out3, uint8_t out4) {
  4016dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4016de:	4605      	mov	r5, r0
  4016e0:	460f      	mov	r7, r1
	display_char('0', 22, 6);
  4016e2:	2206      	movs	r2, #6
  4016e4:	2116      	movs	r1, #22
  4016e6:	2030      	movs	r0, #48	; 0x30
  4016e8:	4c1d      	ldr	r4, [pc, #116]	; (401760 <output_display_2+0x84>)
  4016ea:	47a0      	blx	r4
	display_char(' ', 22, 6);
  4016ec:	2206      	movs	r2, #6
  4016ee:	2116      	movs	r1, #22
  4016f0:	2020      	movs	r0, #32
  4016f2:	47a0      	blx	r4
	display_char('3', 18, 6);
  4016f4:	2206      	movs	r2, #6
  4016f6:	2112      	movs	r1, #18
  4016f8:	2033      	movs	r0, #51	; 0x33
  4016fa:	47a0      	blx	r4
	display_char(':', 18, 6);
  4016fc:	2206      	movs	r2, #6
  4016fe:	2112      	movs	r1, #18
  401700:	203a      	movs	r0, #58	; 0x3a
  401702:	47a0      	blx	r4
	display_number(out3, 18, 6);
  401704:	2206      	movs	r2, #6
  401706:	2112      	movs	r1, #18
  401708:	4628      	mov	r0, r5
  40170a:	4b16      	ldr	r3, [pc, #88]	; (401764 <output_display_2+0x88>)
  40170c:	4798      	blx	r3

	while(disp_ptr_location[6] < 1920) {
  40170e:	4b16      	ldr	r3, [pc, #88]	; (401768 <output_display_2+0x8c>)
  401710:	899b      	ldrh	r3, [r3, #12]
  401712:	f5b3 6ff0 	cmp.w	r3, #1920	; 0x780
  401716:	d209      	bcs.n	40172c <output_display_2+0x50>
		display_data(0, 6);
  401718:	2606      	movs	r6, #6
  40171a:	4d14      	ldr	r5, [pc, #80]	; (40176c <output_display_2+0x90>)
	display_char(' ', 22, 6);
	display_char('3', 18, 6);
	display_char(':', 18, 6);
	display_number(out3, 18, 6);

	while(disp_ptr_location[6] < 1920) {
  40171c:	4c12      	ldr	r4, [pc, #72]	; (401768 <output_display_2+0x8c>)
		display_data(0, 6);
  40171e:	4631      	mov	r1, r6
  401720:	2000      	movs	r0, #0
  401722:	47a8      	blx	r5
	display_char(' ', 22, 6);
	display_char('3', 18, 6);
	display_char(':', 18, 6);
	display_number(out3, 18, 6);

	while(disp_ptr_location[6] < 1920) {
  401724:	89a3      	ldrh	r3, [r4, #12]
  401726:	f5b3 6ff0 	cmp.w	r3, #1920	; 0x780
  40172a:	d3f8      	bcc.n	40171e <output_display_2+0x42>
		display_data(0, 6);
	}

	display_char('0', 22, 6);
  40172c:	2206      	movs	r2, #6
  40172e:	2116      	movs	r1, #22
  401730:	2030      	movs	r0, #48	; 0x30
  401732:	4c0b      	ldr	r4, [pc, #44]	; (401760 <output_display_2+0x84>)
  401734:	47a0      	blx	r4
	display_char(' ', 22, 6);
  401736:	2206      	movs	r2, #6
  401738:	2116      	movs	r1, #22
  40173a:	2020      	movs	r0, #32
  40173c:	47a0      	blx	r4
	display_char('4', 18, 6);
  40173e:	2206      	movs	r2, #6
  401740:	2112      	movs	r1, #18
  401742:	2034      	movs	r0, #52	; 0x34
  401744:	47a0      	blx	r4
	display_char(':', 18, 6);
  401746:	2206      	movs	r2, #6
  401748:	2112      	movs	r1, #18
  40174a:	203a      	movs	r0, #58	; 0x3a
  40174c:	47a0      	blx	r4
	display_number(out4, 18, 6);
  40174e:	2206      	movs	r2, #6
  401750:	2112      	movs	r1, #18
  401752:	4638      	mov	r0, r7
  401754:	4b03      	ldr	r3, [pc, #12]	; (401764 <output_display_2+0x88>)
  401756:	4798      	blx	r3
	
	finish_display(6);
  401758:	2006      	movs	r0, #6
  40175a:	4b05      	ldr	r3, [pc, #20]	; (401770 <output_display_2+0x94>)
  40175c:	4798      	blx	r3
  40175e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401760:	00400829 	.word	0x00400829
  401764:	00400e2d 	.word	0x00400e2d
  401768:	20000614 	.word	0x20000614
  40176c:	0040061d 	.word	0x0040061d
  401770:	004007e5 	.word	0x004007e5

00401774 <encoder_direction>:
#include "displays.h"

// uint8_t A_seq;
// uint8_t B_seq;

 void encoder_direction(uint32_t A, uint32_t B, uint8_t step){
  401774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  401776:	4615      	mov	r5, r2

	//read Encoder input A
	bool A_in = REG_PIOC_PDSR & A;
  401778:	4b21      	ldr	r3, [pc, #132]	; (401800 <encoder_direction+0x8c>)
  40177a:	681f      	ldr	r7, [r3, #0]
	//read Encoder input B
	bool B_in = REG_PIOC_PDSR & B;
  40177c:	681b      	ldr	r3, [r3, #0]
	
	A_seq = A_seq << 1;
	A_seq |= A_in;
	
	B_seq = B_seq << 1;
  40177e:	4c21      	ldr	r4, [pc, #132]	; (401804 <encoder_direction+0x90>)
	B_seq |= B_in;
  401780:	7822      	ldrb	r2, [r4, #0]
  401782:	420b      	tst	r3, r1
  401784:	bf14      	ite	ne
  401786:	2301      	movne	r3, #1
  401788:	2300      	moveq	r3, #0
  40178a:	ea43 0242 	orr.w	r2, r3, r2, lsl #1
	//read Encoder input A
	bool A_in = REG_PIOC_PDSR & A;
	//read Encoder input B
	bool B_in = REG_PIOC_PDSR & B;
	
	A_seq = A_seq << 1;
  40178e:	491e      	ldr	r1, [pc, #120]	; (401808 <encoder_direction+0x94>)
	A_seq |= A_in;
	
	B_seq = B_seq << 1;
	B_seq |= B_in;
	
	A_seq &= 0b00001111;
  401790:	780e      	ldrb	r6, [r1, #0]
  401792:	4207      	tst	r7, r0
  401794:	bf14      	ite	ne
  401796:	2301      	movne	r3, #1
  401798:	2300      	moveq	r3, #0
  40179a:	ea43 0346 	orr.w	r3, r3, r6, lsl #1
  40179e:	f003 030f 	and.w	r3, r3, #15
  4017a2:	700b      	strb	r3, [r1, #0]
	B_seq &= 0b00001111;
  4017a4:	f002 020f 	and.w	r2, r2, #15
  4017a8:	7022      	strb	r2, [r4, #0]


	//return true if turned right
	if ((A_seq == 0b00001001) && (B_seq == 0b00000011)){
  4017aa:	2b09      	cmp	r3, #9
  4017ac:	d112      	bne.n	4017d4 <encoder_direction+0x60>
  4017ae:	2a03      	cmp	r2, #3
  4017b0:	d124      	bne.n	4017fc <encoder_direction+0x88>
		notes_inc(step);
  4017b2:	4628      	mov	r0, r5
  4017b4:	4b15      	ldr	r3, [pc, #84]	; (40180c <encoder_direction+0x98>)
  4017b6:	4798      	blx	r3
		note_display(patterns[curr_pattern][display_page][step][0]);
  4017b8:	4b15      	ldr	r3, [pc, #84]	; (401810 <encoder_direction+0x9c>)
  4017ba:	781a      	ldrb	r2, [r3, #0]
  4017bc:	4b15      	ldr	r3, [pc, #84]	; (401814 <encoder_direction+0xa0>)
  4017be:	781b      	ldrb	r3, [r3, #0]
  4017c0:	eb03 1302 	add.w	r3, r3, r2, lsl #4
  4017c4:	eb05 1503 	add.w	r5, r5, r3, lsl #4
  4017c8:	4b13      	ldr	r3, [pc, #76]	; (401818 <encoder_direction+0xa4>)
  4017ca:	f833 0035 	ldrh.w	r0, [r3, r5, lsl #3]
  4017ce:	4b13      	ldr	r3, [pc, #76]	; (40181c <encoder_direction+0xa8>)
  4017d0:	4798      	blx	r3
  4017d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}

	else if ((A_seq == 0b00000011) && (B_seq == 0b00001001)){
  4017d4:	2b03      	cmp	r3, #3
  4017d6:	d111      	bne.n	4017fc <encoder_direction+0x88>
  4017d8:	2a09      	cmp	r2, #9
  4017da:	d10f      	bne.n	4017fc <encoder_direction+0x88>
		notes_dec(step);
  4017dc:	4628      	mov	r0, r5
  4017de:	4b10      	ldr	r3, [pc, #64]	; (401820 <encoder_direction+0xac>)
  4017e0:	4798      	blx	r3
		note_display(patterns[curr_pattern][display_page][step][0]);
  4017e2:	4b0b      	ldr	r3, [pc, #44]	; (401810 <encoder_direction+0x9c>)
  4017e4:	781a      	ldrb	r2, [r3, #0]
  4017e6:	4b0b      	ldr	r3, [pc, #44]	; (401814 <encoder_direction+0xa0>)
  4017e8:	781b      	ldrb	r3, [r3, #0]
  4017ea:	eb03 1302 	add.w	r3, r3, r2, lsl #4
  4017ee:	eb05 1503 	add.w	r5, r5, r3, lsl #4
  4017f2:	4b09      	ldr	r3, [pc, #36]	; (401818 <encoder_direction+0xa4>)
  4017f4:	f833 0035 	ldrh.w	r0, [r3, r5, lsl #3]
  4017f8:	4b08      	ldr	r3, [pc, #32]	; (40181c <encoder_direction+0xa8>)
  4017fa:	4798      	blx	r3
  4017fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4017fe:	bf00      	nop
  401800:	400e123c 	.word	0x400e123c
  401804:	2000070e 	.word	0x2000070e
  401808:	20000703 	.word	0x20000703
  40180c:	0040416d 	.word	0x0040416d
  401810:	200006d0 	.word	0x200006d0
  401814:	200006f4 	.word	0x200006f4
  401818:	20000710 	.word	0x20000710
  40181c:	00400ee5 	.word	0x00400ee5
  401820:	004041a9 	.word	0x004041a9

00401824 <Encoder_init>:

	}
}


void Encoder_init(){
  401824:	b470      	push	{r4, r5, r6}
	A_seq = 0;
  401826:	2300      	movs	r3, #0
  401828:	4aa8      	ldr	r2, [pc, #672]	; (401acc <Encoder_init+0x2a8>)
  40182a:	7013      	strb	r3, [r2, #0]
	B_seq = 0;
  40182c:	4aa8      	ldr	r2, [pc, #672]	; (401ad0 <Encoder_init+0x2ac>)
  40182e:	7013      	strb	r3, [r2, #0]

	//enable clock for PIOC
	REG_PMC_PCER0 |= PMC_PCER0_PID13;
  401830:	4aa8      	ldr	r2, [pc, #672]	; (401ad4 <Encoder_init+0x2b0>)
  401832:	6813      	ldr	r3, [r2, #0]
  401834:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  401838:	6013      	str	r3, [r2, #0]


	/**************			CONFIGURE 16 STEP ENCODERS			**************/

	//Set up PC0 as ENCODER 1 INPUT A
	REG_PIOC_PER |= PIO_PER_P0; //enable PIO controller
  40183a:	4da7      	ldr	r5, [pc, #668]	; (401ad8 <Encoder_init+0x2b4>)
  40183c:	682b      	ldr	r3, [r5, #0]
  40183e:	f043 0301 	orr.w	r3, r3, #1
  401842:	602b      	str	r3, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P0; //disable output
  401844:	4ca5      	ldr	r4, [pc, #660]	; (401adc <Encoder_init+0x2b8>)
  401846:	6823      	ldr	r3, [r4, #0]
  401848:	f043 0301 	orr.w	r3, r3, #1
  40184c:	6023      	str	r3, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P0; //disable pull-down resistor
  40184e:	48a4      	ldr	r0, [pc, #656]	; (401ae0 <Encoder_init+0x2bc>)
  401850:	6803      	ldr	r3, [r0, #0]
  401852:	f043 0301 	orr.w	r3, r3, #1
  401856:	6003      	str	r3, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P0;	//enable pull-up resistor
  401858:	49a2      	ldr	r1, [pc, #648]	; (401ae4 <Encoder_init+0x2c0>)
  40185a:	680b      	ldr	r3, [r1, #0]
  40185c:	f043 0301 	orr.w	r3, r3, #1
  401860:	600b      	str	r3, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P0; //turn on slow clock debounce
  401862:	f602 6274 	addw	r2, r2, #3700	; 0xe74
  401866:	6813      	ldr	r3, [r2, #0]
  401868:	f043 0301 	orr.w	r3, r3, #1
  40186c:	6013      	str	r3, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P0;	//start debounce filter
  40186e:	4b9e      	ldr	r3, [pc, #632]	; (401ae8 <Encoder_init+0x2c4>)
  401870:	681e      	ldr	r6, [r3, #0]
  401872:	f046 0601 	orr.w	r6, r6, #1
  401876:	601e      	str	r6, [r3, #0]

	//Set up PC1 as ENCODER 1 INPUT B
	REG_PIOC_PER |= PIO_PER_P1; //enable PIO controller
  401878:	682e      	ldr	r6, [r5, #0]
  40187a:	f046 0602 	orr.w	r6, r6, #2
  40187e:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P1; //disable output
  401880:	6826      	ldr	r6, [r4, #0]
  401882:	f046 0602 	orr.w	r6, r6, #2
  401886:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P1; //disable pull-down resistor
  401888:	6806      	ldr	r6, [r0, #0]
  40188a:	f046 0602 	orr.w	r6, r6, #2
  40188e:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P1;	//enable pull-up resistor
  401890:	680e      	ldr	r6, [r1, #0]
  401892:	f046 0602 	orr.w	r6, r6, #2
  401896:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P1; //turn on slow clock debounce
  401898:	6816      	ldr	r6, [r2, #0]
  40189a:	f046 0602 	orr.w	r6, r6, #2
  40189e:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P1;	//start debounce filter
  4018a0:	681e      	ldr	r6, [r3, #0]
  4018a2:	f046 0602 	orr.w	r6, r6, #2
  4018a6:	601e      	str	r6, [r3, #0]


	
	//Set up PC2 as ENCODER 2 INPUT A
	REG_PIOC_PER |= PIO_PER_P2; //enable PIO controller
  4018a8:	682e      	ldr	r6, [r5, #0]
  4018aa:	f046 0604 	orr.w	r6, r6, #4
  4018ae:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P2; //disable output
  4018b0:	6826      	ldr	r6, [r4, #0]
  4018b2:	f046 0604 	orr.w	r6, r6, #4
  4018b6:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P2; //disable pull-down resistor
  4018b8:	6806      	ldr	r6, [r0, #0]
  4018ba:	f046 0604 	orr.w	r6, r6, #4
  4018be:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P2;	//enable pull-up resistor
  4018c0:	680e      	ldr	r6, [r1, #0]
  4018c2:	f046 0604 	orr.w	r6, r6, #4
  4018c6:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P2; //turn on slow clock debounce
  4018c8:	6816      	ldr	r6, [r2, #0]
  4018ca:	f046 0604 	orr.w	r6, r6, #4
  4018ce:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P2;	//start debounce filter
  4018d0:	681e      	ldr	r6, [r3, #0]
  4018d2:	f046 0604 	orr.w	r6, r6, #4
  4018d6:	601e      	str	r6, [r3, #0]

	//Set up PC3 as ENCODER 2 INPUT B
	REG_PIOC_PER |= PIO_PER_P3; //enable PIO controller
  4018d8:	682e      	ldr	r6, [r5, #0]
  4018da:	f046 0608 	orr.w	r6, r6, #8
  4018de:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P3; //disable output
  4018e0:	6826      	ldr	r6, [r4, #0]
  4018e2:	f046 0608 	orr.w	r6, r6, #8
  4018e6:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P3; //disable pull-down resistor
  4018e8:	6806      	ldr	r6, [r0, #0]
  4018ea:	f046 0608 	orr.w	r6, r6, #8
  4018ee:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P3;	//enable pull-up resistor
  4018f0:	680e      	ldr	r6, [r1, #0]
  4018f2:	f046 0608 	orr.w	r6, r6, #8
  4018f6:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P3; //turn on slow clock debounce
  4018f8:	6816      	ldr	r6, [r2, #0]
  4018fa:	f046 0608 	orr.w	r6, r6, #8
  4018fe:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P3;	//start debounce filter
  401900:	681e      	ldr	r6, [r3, #0]
  401902:	f046 0608 	orr.w	r6, r6, #8
  401906:	601e      	str	r6, [r3, #0]



	//Set up PC4 as ENCODER 3 INPUT A
	REG_PIOC_PER |= PIO_PER_P4; //enable PIO controller
  401908:	682e      	ldr	r6, [r5, #0]
  40190a:	f046 0610 	orr.w	r6, r6, #16
  40190e:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P4; //disable output
  401910:	6826      	ldr	r6, [r4, #0]
  401912:	f046 0610 	orr.w	r6, r6, #16
  401916:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P4; //disable pull-down resistor
  401918:	6806      	ldr	r6, [r0, #0]
  40191a:	f046 0610 	orr.w	r6, r6, #16
  40191e:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P4;	//enable pull-up resistor
  401920:	680e      	ldr	r6, [r1, #0]
  401922:	f046 0610 	orr.w	r6, r6, #16
  401926:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P4; //turn on slow clock debounce
  401928:	6816      	ldr	r6, [r2, #0]
  40192a:	f046 0610 	orr.w	r6, r6, #16
  40192e:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P4;	//start debounce filter
  401930:	681e      	ldr	r6, [r3, #0]
  401932:	f046 0610 	orr.w	r6, r6, #16
  401936:	601e      	str	r6, [r3, #0]

	//Set up PC5 as ENCODER 3 INPUT B
	REG_PIOC_PER |= PIO_PER_P5; //enable PIO controller
  401938:	682e      	ldr	r6, [r5, #0]
  40193a:	f046 0620 	orr.w	r6, r6, #32
  40193e:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P5; //disable output
  401940:	6826      	ldr	r6, [r4, #0]
  401942:	f046 0620 	orr.w	r6, r6, #32
  401946:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P5; //disable pull-down resistor
  401948:	6806      	ldr	r6, [r0, #0]
  40194a:	f046 0620 	orr.w	r6, r6, #32
  40194e:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P5;	//enable pull-up resistor
  401950:	680e      	ldr	r6, [r1, #0]
  401952:	f046 0620 	orr.w	r6, r6, #32
  401956:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P5; //turn on slow clock debounce
  401958:	6816      	ldr	r6, [r2, #0]
  40195a:	f046 0620 	orr.w	r6, r6, #32
  40195e:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P5;	//start debounce filter
  401960:	681e      	ldr	r6, [r3, #0]
  401962:	f046 0620 	orr.w	r6, r6, #32
  401966:	601e      	str	r6, [r3, #0]



	//Set up PC6 as ENCODER 4 INPUT A
	REG_PIOC_PER |= PIO_PER_P6; //enable PIO controller
  401968:	682e      	ldr	r6, [r5, #0]
  40196a:	f046 0640 	orr.w	r6, r6, #64	; 0x40
  40196e:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P6; //disable output
  401970:	6826      	ldr	r6, [r4, #0]
  401972:	f046 0640 	orr.w	r6, r6, #64	; 0x40
  401976:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P6; //disable pull-down resistor
  401978:	6806      	ldr	r6, [r0, #0]
  40197a:	f046 0640 	orr.w	r6, r6, #64	; 0x40
  40197e:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P6;	//enable pull-up resistor
  401980:	680e      	ldr	r6, [r1, #0]
  401982:	f046 0640 	orr.w	r6, r6, #64	; 0x40
  401986:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P6; //turn on slow clock debounce
  401988:	6816      	ldr	r6, [r2, #0]
  40198a:	f046 0640 	orr.w	r6, r6, #64	; 0x40
  40198e:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P6;	//start debounce filter
  401990:	681e      	ldr	r6, [r3, #0]
  401992:	f046 0640 	orr.w	r6, r6, #64	; 0x40
  401996:	601e      	str	r6, [r3, #0]

	//Set up PC7 as ENCODER 4 INPUT B
	REG_PIOC_PER |= PIO_PER_P7; //enable PIO controller
  401998:	682e      	ldr	r6, [r5, #0]
  40199a:	f046 0680 	orr.w	r6, r6, #128	; 0x80
  40199e:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P7; //disable output
  4019a0:	6826      	ldr	r6, [r4, #0]
  4019a2:	f046 0680 	orr.w	r6, r6, #128	; 0x80
  4019a6:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P7; //disable pull-down resistor
  4019a8:	6806      	ldr	r6, [r0, #0]
  4019aa:	f046 0680 	orr.w	r6, r6, #128	; 0x80
  4019ae:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P7;	//enable pull-up resistor
  4019b0:	680e      	ldr	r6, [r1, #0]
  4019b2:	f046 0680 	orr.w	r6, r6, #128	; 0x80
  4019b6:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P7; //turn on slow clock debounce
  4019b8:	6816      	ldr	r6, [r2, #0]
  4019ba:	f046 0680 	orr.w	r6, r6, #128	; 0x80
  4019be:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P7;	//start debounce filter
  4019c0:	681e      	ldr	r6, [r3, #0]
  4019c2:	f046 0680 	orr.w	r6, r6, #128	; 0x80
  4019c6:	601e      	str	r6, [r3, #0]



	//Set up PC8 as ENCODER 5 INPUT A
	REG_PIOC_PER |= PIO_PER_P8; //enable PIO controller
  4019c8:	682e      	ldr	r6, [r5, #0]
  4019ca:	f446 7680 	orr.w	r6, r6, #256	; 0x100
  4019ce:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P8; //disable output
  4019d0:	6826      	ldr	r6, [r4, #0]
  4019d2:	f446 7680 	orr.w	r6, r6, #256	; 0x100
  4019d6:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P8; //disable pull-down resistor
  4019d8:	6806      	ldr	r6, [r0, #0]
  4019da:	f446 7680 	orr.w	r6, r6, #256	; 0x100
  4019de:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P8;	//enable pull-up resistor
  4019e0:	680e      	ldr	r6, [r1, #0]
  4019e2:	f446 7680 	orr.w	r6, r6, #256	; 0x100
  4019e6:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P8; //turn on slow clock debounce
  4019e8:	6816      	ldr	r6, [r2, #0]
  4019ea:	f446 7680 	orr.w	r6, r6, #256	; 0x100
  4019ee:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P8;	//start debounce filter
  4019f0:	681e      	ldr	r6, [r3, #0]
  4019f2:	f446 7680 	orr.w	r6, r6, #256	; 0x100
  4019f6:	601e      	str	r6, [r3, #0]

	//Set up PC9 as ENCODER 5 INPUT B
	REG_PIOC_PER |= PIO_PER_P9; //enable PIO controller
  4019f8:	682e      	ldr	r6, [r5, #0]
  4019fa:	f446 7600 	orr.w	r6, r6, #512	; 0x200
  4019fe:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P9; //disable output
  401a00:	6826      	ldr	r6, [r4, #0]
  401a02:	f446 7600 	orr.w	r6, r6, #512	; 0x200
  401a06:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P9; //disable pull-down resistor
  401a08:	6806      	ldr	r6, [r0, #0]
  401a0a:	f446 7600 	orr.w	r6, r6, #512	; 0x200
  401a0e:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P9;	//enable pull-up resistor
  401a10:	680e      	ldr	r6, [r1, #0]
  401a12:	f446 7600 	orr.w	r6, r6, #512	; 0x200
  401a16:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P9; //turn on slow clock debounce
  401a18:	6816      	ldr	r6, [r2, #0]
  401a1a:	f446 7600 	orr.w	r6, r6, #512	; 0x200
  401a1e:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P9;	//start debounce filter
  401a20:	681e      	ldr	r6, [r3, #0]
  401a22:	f446 7600 	orr.w	r6, r6, #512	; 0x200
  401a26:	601e      	str	r6, [r3, #0]



	//Set up PC10 as ENCODER 6 INPUT A
	REG_PIOC_PER |= PIO_PER_P10; //enable PIO controller
  401a28:	682e      	ldr	r6, [r5, #0]
  401a2a:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
  401a2e:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P10; //disable output
  401a30:	6826      	ldr	r6, [r4, #0]
  401a32:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
  401a36:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P10; //disable pull-down resistor
  401a38:	6806      	ldr	r6, [r0, #0]
  401a3a:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
  401a3e:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P10;	//enable pull-up resistor
  401a40:	680e      	ldr	r6, [r1, #0]
  401a42:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
  401a46:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P10; //turn on slow clock debounce
  401a48:	6816      	ldr	r6, [r2, #0]
  401a4a:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
  401a4e:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P10;	//start debounce filter
  401a50:	681e      	ldr	r6, [r3, #0]
  401a52:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
  401a56:	601e      	str	r6, [r3, #0]

	//Set up PC11 as ENCODER 6 INPUT B
	REG_PIOC_PER |= PIO_PER_P11; //enable PIO controller
  401a58:	682e      	ldr	r6, [r5, #0]
  401a5a:	f446 6600 	orr.w	r6, r6, #2048	; 0x800
  401a5e:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P11; //disable output
  401a60:	6826      	ldr	r6, [r4, #0]
  401a62:	f446 6600 	orr.w	r6, r6, #2048	; 0x800
  401a66:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P11; //disable pull-down resistor
  401a68:	6806      	ldr	r6, [r0, #0]
  401a6a:	f446 6600 	orr.w	r6, r6, #2048	; 0x800
  401a6e:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P11;	//enable pull-up resistor
  401a70:	680e      	ldr	r6, [r1, #0]
  401a72:	f446 6600 	orr.w	r6, r6, #2048	; 0x800
  401a76:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P11; //turn on slow clock debounce
  401a78:	6816      	ldr	r6, [r2, #0]
  401a7a:	f446 6600 	orr.w	r6, r6, #2048	; 0x800
  401a7e:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P11;	//start debounce filter
  401a80:	681e      	ldr	r6, [r3, #0]
  401a82:	f446 6600 	orr.w	r6, r6, #2048	; 0x800
  401a86:	601e      	str	r6, [r3, #0]



	//Set up PC12 as ENCODER 7 INPUT A
	REG_PIOC_PER |= PIO_PER_P12; //enable PIO controller
  401a88:	682e      	ldr	r6, [r5, #0]
  401a8a:	f446 5680 	orr.w	r6, r6, #4096	; 0x1000
  401a8e:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P12; //disable output
  401a90:	6826      	ldr	r6, [r4, #0]
  401a92:	f446 5680 	orr.w	r6, r6, #4096	; 0x1000
  401a96:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P12; //disable pull-down resistor
  401a98:	6806      	ldr	r6, [r0, #0]
  401a9a:	f446 5680 	orr.w	r6, r6, #4096	; 0x1000
  401a9e:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P12;	//enable pull-up resistor
  401aa0:	680e      	ldr	r6, [r1, #0]
  401aa2:	f446 5680 	orr.w	r6, r6, #4096	; 0x1000
  401aa6:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P12; //turn on slow clock debounce
  401aa8:	6816      	ldr	r6, [r2, #0]
  401aaa:	f446 5680 	orr.w	r6, r6, #4096	; 0x1000
  401aae:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P12;	//start debounce filter
  401ab0:	681e      	ldr	r6, [r3, #0]
  401ab2:	f446 5680 	orr.w	r6, r6, #4096	; 0x1000
  401ab6:	601e      	str	r6, [r3, #0]

	//Set up PC13 as ENCODER 7 INPUT B
	REG_PIOC_PER |= PIO_PER_P13; //enable PIO controller
  401ab8:	682e      	ldr	r6, [r5, #0]
  401aba:	f446 5600 	orr.w	r6, r6, #8192	; 0x2000
  401abe:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P13; //disable output
  401ac0:	6826      	ldr	r6, [r4, #0]
  401ac2:	f446 5600 	orr.w	r6, r6, #8192	; 0x2000
  401ac6:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P13; //disable pull-down resistor
  401ac8:	6806      	ldr	r6, [r0, #0]
  401aca:	e00f      	b.n	401aec <Encoder_init+0x2c8>
  401acc:	20000703 	.word	0x20000703
  401ad0:	2000070e 	.word	0x2000070e
  401ad4:	400e0410 	.word	0x400e0410
  401ad8:	400e1200 	.word	0x400e1200
  401adc:	400e1214 	.word	0x400e1214
  401ae0:	400e1290 	.word	0x400e1290
  401ae4:	400e1264 	.word	0x400e1264
  401ae8:	400e1220 	.word	0x400e1220
  401aec:	f446 5600 	orr.w	r6, r6, #8192	; 0x2000
  401af0:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P13;	//enable pull-up resistor
  401af2:	680e      	ldr	r6, [r1, #0]
  401af4:	f446 5600 	orr.w	r6, r6, #8192	; 0x2000
  401af8:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P13; //turn on slow clock debounce
  401afa:	6816      	ldr	r6, [r2, #0]
  401afc:	f446 5600 	orr.w	r6, r6, #8192	; 0x2000
  401b00:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P13;	//start debounce filter
  401b02:	681e      	ldr	r6, [r3, #0]
  401b04:	f446 5600 	orr.w	r6, r6, #8192	; 0x2000
  401b08:	601e      	str	r6, [r3, #0]



	//Set up PC14 as ENCODER 8 INPUT A
	REG_PIOC_PER |= PIO_PER_P14; //enable PIO controller
  401b0a:	682e      	ldr	r6, [r5, #0]
  401b0c:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
  401b10:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P14; //disable output
  401b12:	6826      	ldr	r6, [r4, #0]
  401b14:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
  401b18:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P14; //disable pull-down resistor
  401b1a:	6806      	ldr	r6, [r0, #0]
  401b1c:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
  401b20:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P14;	//enable pull-up resistor
  401b22:	680e      	ldr	r6, [r1, #0]
  401b24:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
  401b28:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P14; //turn on slow clock debounce
  401b2a:	6816      	ldr	r6, [r2, #0]
  401b2c:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
  401b30:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P14;	//start debounce filter
  401b32:	681e      	ldr	r6, [r3, #0]
  401b34:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
  401b38:	601e      	str	r6, [r3, #0]

	//Set up PC15 as ENCODER 8 INPUT B
	REG_PIOC_PER |= PIO_PER_P15; //enable PIO controller
  401b3a:	682e      	ldr	r6, [r5, #0]
  401b3c:	f446 4600 	orr.w	r6, r6, #32768	; 0x8000
  401b40:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P15; //disable output
  401b42:	6826      	ldr	r6, [r4, #0]
  401b44:	f446 4600 	orr.w	r6, r6, #32768	; 0x8000
  401b48:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P15; //disable pull-down resistor
  401b4a:	6806      	ldr	r6, [r0, #0]
  401b4c:	f446 4600 	orr.w	r6, r6, #32768	; 0x8000
  401b50:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P15;	//enable pull-up resistor
  401b52:	680e      	ldr	r6, [r1, #0]
  401b54:	f446 4600 	orr.w	r6, r6, #32768	; 0x8000
  401b58:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P15; //turn on slow clock debounce
  401b5a:	6816      	ldr	r6, [r2, #0]
  401b5c:	f446 4600 	orr.w	r6, r6, #32768	; 0x8000
  401b60:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P15;	//start debounce filter
  401b62:	681e      	ldr	r6, [r3, #0]
  401b64:	f446 4600 	orr.w	r6, r6, #32768	; 0x8000
  401b68:	601e      	str	r6, [r3, #0]



	//Set up PC16 as ENCODER 9 INPUT A
	REG_PIOC_PER |= PIO_PER_P16; //enable PIO controller
  401b6a:	682e      	ldr	r6, [r5, #0]
  401b6c:	f446 3680 	orr.w	r6, r6, #65536	; 0x10000
  401b70:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P16; //disable output
  401b72:	6826      	ldr	r6, [r4, #0]
  401b74:	f446 3680 	orr.w	r6, r6, #65536	; 0x10000
  401b78:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P16; //disable pull-down resistor
  401b7a:	6806      	ldr	r6, [r0, #0]
  401b7c:	f446 3680 	orr.w	r6, r6, #65536	; 0x10000
  401b80:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P16;	//enable pull-up resistor
  401b82:	680e      	ldr	r6, [r1, #0]
  401b84:	f446 3680 	orr.w	r6, r6, #65536	; 0x10000
  401b88:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P16; //turn on slow clock debounce
  401b8a:	6816      	ldr	r6, [r2, #0]
  401b8c:	f446 3680 	orr.w	r6, r6, #65536	; 0x10000
  401b90:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P16;	//start debounce filter
  401b92:	681e      	ldr	r6, [r3, #0]
  401b94:	f446 3680 	orr.w	r6, r6, #65536	; 0x10000
  401b98:	601e      	str	r6, [r3, #0]

	//Set up PC17 as ENCODER 9 INPUT B
	REG_PIOC_PER |= PIO_PER_P17; //enable PIO controller
  401b9a:	682e      	ldr	r6, [r5, #0]
  401b9c:	f446 3600 	orr.w	r6, r6, #131072	; 0x20000
  401ba0:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P17; //disable output
  401ba2:	6826      	ldr	r6, [r4, #0]
  401ba4:	f446 3600 	orr.w	r6, r6, #131072	; 0x20000
  401ba8:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P17; //disable pull-down resistor
  401baa:	6806      	ldr	r6, [r0, #0]
  401bac:	f446 3600 	orr.w	r6, r6, #131072	; 0x20000
  401bb0:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P17;	//enable pull-up resistor
  401bb2:	680e      	ldr	r6, [r1, #0]
  401bb4:	f446 3600 	orr.w	r6, r6, #131072	; 0x20000
  401bb8:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P17; //turn on slow clock debounce
  401bba:	6816      	ldr	r6, [r2, #0]
  401bbc:	f446 3600 	orr.w	r6, r6, #131072	; 0x20000
  401bc0:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P17;	//start debounce filter
  401bc2:	681e      	ldr	r6, [r3, #0]
  401bc4:	f446 3600 	orr.w	r6, r6, #131072	; 0x20000
  401bc8:	601e      	str	r6, [r3, #0]



	
	//Set up PC18 as ENCODER 10 INPUT A
	REG_PIOC_PER |= PIO_PER_P18; //enable PIO controller
  401bca:	682e      	ldr	r6, [r5, #0]
  401bcc:	f446 2680 	orr.w	r6, r6, #262144	; 0x40000
  401bd0:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P18; //disable output
  401bd2:	6826      	ldr	r6, [r4, #0]
  401bd4:	f446 2680 	orr.w	r6, r6, #262144	; 0x40000
  401bd8:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P18; //disable pull-down resistor
  401bda:	6806      	ldr	r6, [r0, #0]
  401bdc:	f446 2680 	orr.w	r6, r6, #262144	; 0x40000
  401be0:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P18;	//enable pull-up resistor
  401be2:	680e      	ldr	r6, [r1, #0]
  401be4:	f446 2680 	orr.w	r6, r6, #262144	; 0x40000
  401be8:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P18; //turn on slow clock debounce
  401bea:	6816      	ldr	r6, [r2, #0]
  401bec:	f446 2680 	orr.w	r6, r6, #262144	; 0x40000
  401bf0:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P18;	//start debounce filter
  401bf2:	681e      	ldr	r6, [r3, #0]
  401bf4:	f446 2680 	orr.w	r6, r6, #262144	; 0x40000
  401bf8:	601e      	str	r6, [r3, #0]

	//Set up PC19 as ENCODER 10 INPUT B
	REG_PIOC_PER |= PIO_PER_P19; //enable PIO controller
  401bfa:	682e      	ldr	r6, [r5, #0]
  401bfc:	f446 2600 	orr.w	r6, r6, #524288	; 0x80000
  401c00:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P19; //disable output
  401c02:	6826      	ldr	r6, [r4, #0]
  401c04:	f446 2600 	orr.w	r6, r6, #524288	; 0x80000
  401c08:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P19; //disable pull-down resistor
  401c0a:	6806      	ldr	r6, [r0, #0]
  401c0c:	f446 2600 	orr.w	r6, r6, #524288	; 0x80000
  401c10:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P19;	//enable pull-up resistor
  401c12:	680e      	ldr	r6, [r1, #0]
  401c14:	f446 2600 	orr.w	r6, r6, #524288	; 0x80000
  401c18:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P19; //turn on slow clock debounce
  401c1a:	6816      	ldr	r6, [r2, #0]
  401c1c:	f446 2600 	orr.w	r6, r6, #524288	; 0x80000
  401c20:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P19;	//start debounce filter
  401c22:	681e      	ldr	r6, [r3, #0]
  401c24:	f446 2600 	orr.w	r6, r6, #524288	; 0x80000
  401c28:	601e      	str	r6, [r3, #0]



	//Set up PC20 as ENCODER 11 INPUT A
	REG_PIOC_PER |= PIO_PER_P20; //enable PIO controller
  401c2a:	682e      	ldr	r6, [r5, #0]
  401c2c:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
  401c30:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P20; //disable output
  401c32:	6826      	ldr	r6, [r4, #0]
  401c34:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
  401c38:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P20; //disable pull-down resistor
  401c3a:	6806      	ldr	r6, [r0, #0]
  401c3c:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
  401c40:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P20;	//enable pull-up resistor
  401c42:	680e      	ldr	r6, [r1, #0]
  401c44:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
  401c48:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P20; //turn on slow clock debounce
  401c4a:	6816      	ldr	r6, [r2, #0]
  401c4c:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
  401c50:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P20;	//start debounce filter
  401c52:	681e      	ldr	r6, [r3, #0]
  401c54:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
  401c58:	601e      	str	r6, [r3, #0]

	//Set up PC21 as ENCODER 11 INPUT B
	REG_PIOC_PER |= PIO_PER_P21; //enable PIO controller
  401c5a:	682e      	ldr	r6, [r5, #0]
  401c5c:	f446 1600 	orr.w	r6, r6, #2097152	; 0x200000
  401c60:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P21; //disable output
  401c62:	6826      	ldr	r6, [r4, #0]
  401c64:	f446 1600 	orr.w	r6, r6, #2097152	; 0x200000
  401c68:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P21; //disable pull-down resistor
  401c6a:	6806      	ldr	r6, [r0, #0]
  401c6c:	f446 1600 	orr.w	r6, r6, #2097152	; 0x200000
  401c70:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P21;	//enable pull-up resistor
  401c72:	680e      	ldr	r6, [r1, #0]
  401c74:	f446 1600 	orr.w	r6, r6, #2097152	; 0x200000
  401c78:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P21; //turn on slow clock debounce
  401c7a:	6816      	ldr	r6, [r2, #0]
  401c7c:	f446 1600 	orr.w	r6, r6, #2097152	; 0x200000
  401c80:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P21;	//start debounce filter
  401c82:	681e      	ldr	r6, [r3, #0]
  401c84:	f446 1600 	orr.w	r6, r6, #2097152	; 0x200000
  401c88:	601e      	str	r6, [r3, #0]



	//Set up PC22 as ENCODER 12 INPUT A
	REG_PIOC_PER |= PIO_PER_P22; //enable PIO controller
  401c8a:	682e      	ldr	r6, [r5, #0]
  401c8c:	f446 0680 	orr.w	r6, r6, #4194304	; 0x400000
  401c90:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P22; //disable output
  401c92:	6826      	ldr	r6, [r4, #0]
  401c94:	f446 0680 	orr.w	r6, r6, #4194304	; 0x400000
  401c98:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P22; //disable pull-down resistor
  401c9a:	6806      	ldr	r6, [r0, #0]
  401c9c:	f446 0680 	orr.w	r6, r6, #4194304	; 0x400000
  401ca0:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P22;	//enable pull-up resistor
  401ca2:	680e      	ldr	r6, [r1, #0]
  401ca4:	f446 0680 	orr.w	r6, r6, #4194304	; 0x400000
  401ca8:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P22; //turn on slow clock debounce
  401caa:	6816      	ldr	r6, [r2, #0]
  401cac:	f446 0680 	orr.w	r6, r6, #4194304	; 0x400000
  401cb0:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P22;	//start debounce filter
  401cb2:	681e      	ldr	r6, [r3, #0]
  401cb4:	f446 0680 	orr.w	r6, r6, #4194304	; 0x400000
  401cb8:	601e      	str	r6, [r3, #0]

	//Set up PC23 as ENCODER 12 INPUT B
	REG_PIOC_PER |= PIO_PER_P23; //enable PIO controller
  401cba:	682e      	ldr	r6, [r5, #0]
  401cbc:	f446 0600 	orr.w	r6, r6, #8388608	; 0x800000
  401cc0:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P23; //disable output
  401cc2:	6826      	ldr	r6, [r4, #0]
  401cc4:	f446 0600 	orr.w	r6, r6, #8388608	; 0x800000
  401cc8:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P23; //disable pull-down resistor
  401cca:	6806      	ldr	r6, [r0, #0]
  401ccc:	f446 0600 	orr.w	r6, r6, #8388608	; 0x800000
  401cd0:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P23;	//enable pull-up resistor
  401cd2:	680e      	ldr	r6, [r1, #0]
  401cd4:	f446 0600 	orr.w	r6, r6, #8388608	; 0x800000
  401cd8:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P23; //turn on slow clock debounce
  401cda:	6816      	ldr	r6, [r2, #0]
  401cdc:	f446 0600 	orr.w	r6, r6, #8388608	; 0x800000
  401ce0:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P23;	//start debounce filter
  401ce2:	681e      	ldr	r6, [r3, #0]
  401ce4:	f446 0600 	orr.w	r6, r6, #8388608	; 0x800000
  401ce8:	601e      	str	r6, [r3, #0]



	//Set up PC24 as ENCODER 13 INPUT A
	REG_PIOC_PER |= PIO_PER_P24; //enable PIO controller
  401cea:	682e      	ldr	r6, [r5, #0]
  401cec:	f046 7680 	orr.w	r6, r6, #16777216	; 0x1000000
  401cf0:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P24; //disable output
  401cf2:	6826      	ldr	r6, [r4, #0]
  401cf4:	f046 7680 	orr.w	r6, r6, #16777216	; 0x1000000
  401cf8:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P24; //disable pull-down resistor
  401cfa:	6806      	ldr	r6, [r0, #0]
  401cfc:	f046 7680 	orr.w	r6, r6, #16777216	; 0x1000000
  401d00:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P24;	//enable pull-up resistor
  401d02:	680e      	ldr	r6, [r1, #0]
  401d04:	f046 7680 	orr.w	r6, r6, #16777216	; 0x1000000
  401d08:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P24; //turn on slow clock debounce
  401d0a:	6816      	ldr	r6, [r2, #0]
  401d0c:	f046 7680 	orr.w	r6, r6, #16777216	; 0x1000000
  401d10:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P24;	//start debounce filter
  401d12:	681e      	ldr	r6, [r3, #0]
  401d14:	f046 7680 	orr.w	r6, r6, #16777216	; 0x1000000
  401d18:	601e      	str	r6, [r3, #0]

	//Set up PC25 as ENCODER 13 INPUT B
	REG_PIOC_PER |= PIO_PER_P25; //enable PIO controller
  401d1a:	682e      	ldr	r6, [r5, #0]
  401d1c:	f046 7600 	orr.w	r6, r6, #33554432	; 0x2000000
  401d20:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P25; //disable output
  401d22:	6826      	ldr	r6, [r4, #0]
  401d24:	f046 7600 	orr.w	r6, r6, #33554432	; 0x2000000
  401d28:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P25; //disable pull-down resistor
  401d2a:	6806      	ldr	r6, [r0, #0]
  401d2c:	f046 7600 	orr.w	r6, r6, #33554432	; 0x2000000
  401d30:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P25;	//enable pull-up resistor
  401d32:	680e      	ldr	r6, [r1, #0]
  401d34:	f046 7600 	orr.w	r6, r6, #33554432	; 0x2000000
  401d38:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P25; //turn on slow clock debounce
  401d3a:	6816      	ldr	r6, [r2, #0]
  401d3c:	f046 7600 	orr.w	r6, r6, #33554432	; 0x2000000
  401d40:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P25;	//start debounce filter
  401d42:	681e      	ldr	r6, [r3, #0]
  401d44:	f046 7600 	orr.w	r6, r6, #33554432	; 0x2000000
  401d48:	601e      	str	r6, [r3, #0]



	//Set up PC26 as ENCODER 14 INPUT A
	REG_PIOC_PER |= PIO_PER_P26; //enable PIO controller
  401d4a:	682e      	ldr	r6, [r5, #0]
  401d4c:	f046 6680 	orr.w	r6, r6, #67108864	; 0x4000000
  401d50:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P26; //disable output
  401d52:	6826      	ldr	r6, [r4, #0]
  401d54:	f046 6680 	orr.w	r6, r6, #67108864	; 0x4000000
  401d58:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P26; //disable pull-down resistor
  401d5a:	6806      	ldr	r6, [r0, #0]
  401d5c:	f046 6680 	orr.w	r6, r6, #67108864	; 0x4000000
  401d60:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P26;	//enable pull-up resistor
  401d62:	680e      	ldr	r6, [r1, #0]
  401d64:	f046 6680 	orr.w	r6, r6, #67108864	; 0x4000000
  401d68:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P26; //turn on slow clock debounce
  401d6a:	6816      	ldr	r6, [r2, #0]
  401d6c:	f046 6680 	orr.w	r6, r6, #67108864	; 0x4000000
  401d70:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P26;	//start debounce filter
  401d72:	681e      	ldr	r6, [r3, #0]
  401d74:	f046 6680 	orr.w	r6, r6, #67108864	; 0x4000000
  401d78:	601e      	str	r6, [r3, #0]

	//Set up PC27 as ENCODER 14 INPUT B
	REG_PIOC_PER |= PIO_PER_P27; //enable PIO controller
  401d7a:	682e      	ldr	r6, [r5, #0]
  401d7c:	f046 6600 	orr.w	r6, r6, #134217728	; 0x8000000
  401d80:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P27; //disable output
  401d82:	6826      	ldr	r6, [r4, #0]
  401d84:	f046 6600 	orr.w	r6, r6, #134217728	; 0x8000000
  401d88:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P27; //disable pull-down resistor
  401d8a:	6806      	ldr	r6, [r0, #0]
  401d8c:	f046 6600 	orr.w	r6, r6, #134217728	; 0x8000000
  401d90:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P27;	//enable pull-up resistor
  401d92:	680e      	ldr	r6, [r1, #0]
  401d94:	f046 6600 	orr.w	r6, r6, #134217728	; 0x8000000
  401d98:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P27; //turn on slow clock debounce
  401d9a:	6816      	ldr	r6, [r2, #0]
  401d9c:	f046 6600 	orr.w	r6, r6, #134217728	; 0x8000000
  401da0:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P27;	//start debounce filter
  401da2:	681e      	ldr	r6, [r3, #0]
  401da4:	f046 6600 	orr.w	r6, r6, #134217728	; 0x8000000
  401da8:	601e      	str	r6, [r3, #0]



	//Set up PC28 as ENCODER 15 INPUT A
	REG_PIOC_PER |= PIO_PER_P28; //enable PIO controller
  401daa:	682e      	ldr	r6, [r5, #0]
  401dac:	f046 5680 	orr.w	r6, r6, #268435456	; 0x10000000
  401db0:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P28; //disable output
  401db2:	6826      	ldr	r6, [r4, #0]
  401db4:	f046 5680 	orr.w	r6, r6, #268435456	; 0x10000000
  401db8:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P28; //disable pull-down resistor
  401dba:	6806      	ldr	r6, [r0, #0]
  401dbc:	f046 5680 	orr.w	r6, r6, #268435456	; 0x10000000
  401dc0:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P28;	//enable pull-up resistor
  401dc2:	680e      	ldr	r6, [r1, #0]
  401dc4:	f046 5680 	orr.w	r6, r6, #268435456	; 0x10000000
  401dc8:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P28; //turn on slow clock debounce
  401dca:	6816      	ldr	r6, [r2, #0]
  401dcc:	f046 5680 	orr.w	r6, r6, #268435456	; 0x10000000
  401dd0:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P28;	//start debounce filter
  401dd2:	681e      	ldr	r6, [r3, #0]
  401dd4:	f046 5680 	orr.w	r6, r6, #268435456	; 0x10000000
  401dd8:	601e      	str	r6, [r3, #0]

	//Set up PC29 as ENCODER 15 INPUT B
	REG_PIOC_PER |= PIO_PER_P29; //enable PIO controller
  401dda:	682e      	ldr	r6, [r5, #0]
  401ddc:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
  401de0:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P29; //disable output
  401de2:	6826      	ldr	r6, [r4, #0]
  401de4:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
  401de8:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P29; //disable pull-down resistor
  401dea:	6806      	ldr	r6, [r0, #0]
  401dec:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
  401df0:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P29;	//enable pull-up resistor
  401df2:	680e      	ldr	r6, [r1, #0]
  401df4:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
  401df8:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P29; //turn on slow clock debounce
  401dfa:	6816      	ldr	r6, [r2, #0]
  401dfc:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
  401e00:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P29;	//start debounce filter
  401e02:	681e      	ldr	r6, [r3, #0]
  401e04:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
  401e08:	601e      	str	r6, [r3, #0]



	//Set up PC30 as ENCODER 16 INPUT A
	REG_PIOC_PER |= PIO_PER_P30; //enable PIO controller
  401e0a:	682e      	ldr	r6, [r5, #0]
  401e0c:	f046 4680 	orr.w	r6, r6, #1073741824	; 0x40000000
  401e10:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P30; //disable output
  401e12:	6826      	ldr	r6, [r4, #0]
  401e14:	f046 4680 	orr.w	r6, r6, #1073741824	; 0x40000000
  401e18:	6026      	str	r6, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P30; //disable pull-down resistor
  401e1a:	6806      	ldr	r6, [r0, #0]
  401e1c:	f046 4680 	orr.w	r6, r6, #1073741824	; 0x40000000
  401e20:	6006      	str	r6, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P30;	//enable pull-up resistor
  401e22:	680e      	ldr	r6, [r1, #0]
  401e24:	f046 4680 	orr.w	r6, r6, #1073741824	; 0x40000000
  401e28:	600e      	str	r6, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P30; //turn on slow clock debounce
  401e2a:	6816      	ldr	r6, [r2, #0]
  401e2c:	f046 4680 	orr.w	r6, r6, #1073741824	; 0x40000000
  401e30:	6016      	str	r6, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P30;	//start debounce filter
  401e32:	681e      	ldr	r6, [r3, #0]
  401e34:	f046 4680 	orr.w	r6, r6, #1073741824	; 0x40000000
  401e38:	601e      	str	r6, [r3, #0]

	//Set up PC31 as ENCODER 16 INPUT B
	REG_PIOC_PER |= PIO_PER_P31; //enable PIO controller
  401e3a:	682e      	ldr	r6, [r5, #0]
  401e3c:	f046 4600 	orr.w	r6, r6, #2147483648	; 0x80000000
  401e40:	602e      	str	r6, [r5, #0]
	REG_PIOC_ODR |= PIO_ODR_P31; //disable output
  401e42:	6825      	ldr	r5, [r4, #0]
  401e44:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
  401e48:	6025      	str	r5, [r4, #0]
	REG_PIOC_PPDDR |= PIO_PPDDR_P31; //disable pull-down resistor
  401e4a:	6804      	ldr	r4, [r0, #0]
  401e4c:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
  401e50:	6004      	str	r4, [r0, #0]
	REG_PIOC_PUER |= PIO_PUER_P31;	//enable pull-up resistor
  401e52:	6808      	ldr	r0, [r1, #0]
  401e54:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
  401e58:	6008      	str	r0, [r1, #0]
	REG_PIOC_IFSCER |= PIO_IFSCER_P31; //turn on slow clock debounce
  401e5a:	6811      	ldr	r1, [r2, #0]
  401e5c:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
  401e60:	6011      	str	r1, [r2, #0]
	REG_PIOC_IFER |= PIO_IFER_P31;	//start debounce filter
  401e62:	681a      	ldr	r2, [r3, #0]
  401e64:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
  401e68:	601a      	str	r2, [r3, #0]
	


	/**************			CONFIGURE ENCODER INTERRUPTS			**************/

	uint32_t flag_clear = REG_PIOC_ISR;	//clear left over interrupt flags
  401e6a:	332c      	adds	r3, #44	; 0x2c
  401e6c:	681b      	ldr	r3, [r3, #0]

	//Enable interrupts for Encoder 1
	REG_PIOC_IER |= PIO_IER_P0;			//enable input rising edge interrupt
  401e6e:	4b85      	ldr	r3, [pc, #532]	; (402084 <Encoder_init+0x860>)
  401e70:	681a      	ldr	r2, [r3, #0]
  401e72:	f042 0201 	orr.w	r2, r2, #1
  401e76:	601a      	str	r2, [r3, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P0;
  401e78:	4a83      	ldr	r2, [pc, #524]	; (402088 <Encoder_init+0x864>)
  401e7a:	6811      	ldr	r1, [r2, #0]
  401e7c:	f041 0101 	orr.w	r1, r1, #1
  401e80:	6011      	str	r1, [r2, #0]
	REG_PIOC_IER |= PIO_IER_P1;			//enable input rising edge interrupt
  401e82:	6819      	ldr	r1, [r3, #0]
  401e84:	f041 0102 	orr.w	r1, r1, #2
  401e88:	6019      	str	r1, [r3, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P1;
  401e8a:	6811      	ldr	r1, [r2, #0]
  401e8c:	f041 0102 	orr.w	r1, r1, #2
  401e90:	6011      	str	r1, [r2, #0]

	//Enable interrupts for Encoder 2
	REG_PIOC_IER |= PIO_IER_P2;			//enable input rising edge interrupt
  401e92:	6819      	ldr	r1, [r3, #0]
  401e94:	f041 0104 	orr.w	r1, r1, #4
  401e98:	6019      	str	r1, [r3, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P2;
  401e9a:	6812      	ldr	r2, [r2, #0]
  401e9c:	f042 0204 	orr.w	r2, r2, #4
  401ea0:	3394      	adds	r3, #148	; 0x94
  401ea2:	601a      	str	r2, [r3, #0]
	REG_PIOC_IER |= PIO_IER_P3;			//enable input rising edge interrupt
  401ea4:	4a77      	ldr	r2, [pc, #476]	; (402084 <Encoder_init+0x860>)
  401ea6:	6811      	ldr	r1, [r2, #0]
  401ea8:	f041 0108 	orr.w	r1, r1, #8
  401eac:	6011      	str	r1, [r2, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P3;
  401eae:	6819      	ldr	r1, [r3, #0]
  401eb0:	f041 0108 	orr.w	r1, r1, #8
  401eb4:	6019      	str	r1, [r3, #0]

	//Enable interrupts for Encoder 3
	REG_PIOC_IER |= PIO_IER_P4;			//enable input rising edge interrupt
  401eb6:	6811      	ldr	r1, [r2, #0]
  401eb8:	f041 0110 	orr.w	r1, r1, #16
  401ebc:	6011      	str	r1, [r2, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P4;
  401ebe:	6819      	ldr	r1, [r3, #0]
  401ec0:	f041 0110 	orr.w	r1, r1, #16
  401ec4:	6019      	str	r1, [r3, #0]
	REG_PIOC_IER |= PIO_IER_P5;			//enable input rising edge interrupt
  401ec6:	6811      	ldr	r1, [r2, #0]
  401ec8:	f041 0120 	orr.w	r1, r1, #32
  401ecc:	6011      	str	r1, [r2, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P5;
  401ece:	6819      	ldr	r1, [r3, #0]
  401ed0:	f041 0120 	orr.w	r1, r1, #32
  401ed4:	6019      	str	r1, [r3, #0]

	//Enable interrupts for Encoder 4
	REG_PIOC_IER |= PIO_IER_P6;			//enable input rising edge interrupt
  401ed6:	6811      	ldr	r1, [r2, #0]
  401ed8:	f041 0140 	orr.w	r1, r1, #64	; 0x40
  401edc:	6011      	str	r1, [r2, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P6;
  401ede:	6819      	ldr	r1, [r3, #0]
  401ee0:	f041 0140 	orr.w	r1, r1, #64	; 0x40
  401ee4:	6019      	str	r1, [r3, #0]
	REG_PIOC_IER |= PIO_IER_P7;			//enable input rising edge interrupt
  401ee6:	6811      	ldr	r1, [r2, #0]
  401ee8:	f041 0180 	orr.w	r1, r1, #128	; 0x80
  401eec:	6011      	str	r1, [r2, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P7;
  401eee:	6819      	ldr	r1, [r3, #0]
  401ef0:	f041 0180 	orr.w	r1, r1, #128	; 0x80
  401ef4:	6019      	str	r1, [r3, #0]

	//Enable interrupts for Encoder 5
	REG_PIOC_IER |= PIO_IER_P8;			//enable input rising edge interrupt
  401ef6:	6811      	ldr	r1, [r2, #0]
  401ef8:	f441 7180 	orr.w	r1, r1, #256	; 0x100
  401efc:	6011      	str	r1, [r2, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P8;
  401efe:	6819      	ldr	r1, [r3, #0]
  401f00:	f441 7180 	orr.w	r1, r1, #256	; 0x100
  401f04:	6019      	str	r1, [r3, #0]
	REG_PIOC_IER |= PIO_IER_P9;			//enable input rising edge interrupt
  401f06:	6811      	ldr	r1, [r2, #0]
  401f08:	f441 7100 	orr.w	r1, r1, #512	; 0x200
  401f0c:	6011      	str	r1, [r2, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P9;
  401f0e:	6819      	ldr	r1, [r3, #0]
  401f10:	f441 7100 	orr.w	r1, r1, #512	; 0x200
  401f14:	6019      	str	r1, [r3, #0]

	//Enable interrupts for Encoder 6
	REG_PIOC_IER |= PIO_IER_P10;			//enable input rising edge interrupt
  401f16:	6811      	ldr	r1, [r2, #0]
  401f18:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
  401f1c:	6011      	str	r1, [r2, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P10;
  401f1e:	6819      	ldr	r1, [r3, #0]
  401f20:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
  401f24:	6019      	str	r1, [r3, #0]
	REG_PIOC_IER |= PIO_IER_P11;			//enable input rising edge interrupt
  401f26:	6811      	ldr	r1, [r2, #0]
  401f28:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
  401f2c:	6011      	str	r1, [r2, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P11;
  401f2e:	6819      	ldr	r1, [r3, #0]
  401f30:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
  401f34:	6019      	str	r1, [r3, #0]

	//Enable interrupts for Encoder 7
	REG_PIOC_IER |= PIO_IER_P12;			//enable input rising edge interrupt
  401f36:	6811      	ldr	r1, [r2, #0]
  401f38:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
  401f3c:	6011      	str	r1, [r2, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P12;
  401f3e:	6819      	ldr	r1, [r3, #0]
  401f40:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
  401f44:	6019      	str	r1, [r3, #0]
	REG_PIOC_IER |= PIO_IER_P13;			//enable input rising edge interrupt
  401f46:	6811      	ldr	r1, [r2, #0]
  401f48:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
  401f4c:	6011      	str	r1, [r2, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P13;
  401f4e:	6819      	ldr	r1, [r3, #0]
  401f50:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
  401f54:	6019      	str	r1, [r3, #0]

	//Enable interrupts for Encoder 8
	REG_PIOC_IER |= PIO_IER_P14;			//enable input rising edge interrupt
  401f56:	6811      	ldr	r1, [r2, #0]
  401f58:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
  401f5c:	6011      	str	r1, [r2, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P14;
  401f5e:	6819      	ldr	r1, [r3, #0]
  401f60:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
  401f64:	6019      	str	r1, [r3, #0]
	REG_PIOC_IER |= PIO_IER_P15;			//enable input rising edge interrupt
  401f66:	6811      	ldr	r1, [r2, #0]
  401f68:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
  401f6c:	6011      	str	r1, [r2, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P15;
  401f6e:	6819      	ldr	r1, [r3, #0]
  401f70:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
  401f74:	6019      	str	r1, [r3, #0]

	//Enable interrupts for Encoder 9
	REG_PIOC_IER |= PIO_IER_P16;			//enable input rising edge interrupt
  401f76:	6811      	ldr	r1, [r2, #0]
  401f78:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
  401f7c:	6011      	str	r1, [r2, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P16;
  401f7e:	6819      	ldr	r1, [r3, #0]
  401f80:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
  401f84:	6019      	str	r1, [r3, #0]
	REG_PIOC_IER |= PIO_IER_P17;			//enable input rising edge interrupt
  401f86:	6811      	ldr	r1, [r2, #0]
  401f88:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
  401f8c:	6011      	str	r1, [r2, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P17;
  401f8e:	6819      	ldr	r1, [r3, #0]
  401f90:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
  401f94:	6019      	str	r1, [r3, #0]

	//Enable interrupts for Encoder 10
	REG_PIOC_IER |= PIO_IER_P18;			//enable input rising edge interrupt
  401f96:	6811      	ldr	r1, [r2, #0]
  401f98:	f441 2180 	orr.w	r1, r1, #262144	; 0x40000
  401f9c:	6011      	str	r1, [r2, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P18;
  401f9e:	6819      	ldr	r1, [r3, #0]
  401fa0:	f441 2180 	orr.w	r1, r1, #262144	; 0x40000
  401fa4:	6019      	str	r1, [r3, #0]
	REG_PIOC_IER |= PIO_IER_P19;			//enable input rising edge interrupt
  401fa6:	6811      	ldr	r1, [r2, #0]
  401fa8:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
  401fac:	6011      	str	r1, [r2, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P19;
  401fae:	6819      	ldr	r1, [r3, #0]
  401fb0:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
  401fb4:	6019      	str	r1, [r3, #0]

	//Enable interrupts for Encoder 11
	REG_PIOC_IER |= PIO_IER_P20;			//enable input rising edge interrupt
  401fb6:	6811      	ldr	r1, [r2, #0]
  401fb8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  401fbc:	6011      	str	r1, [r2, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P20;
  401fbe:	6819      	ldr	r1, [r3, #0]
  401fc0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  401fc4:	6019      	str	r1, [r3, #0]
	REG_PIOC_IER |= PIO_IER_P21;			//enable input rising edge interrupt
  401fc6:	6811      	ldr	r1, [r2, #0]
  401fc8:	f441 1100 	orr.w	r1, r1, #2097152	; 0x200000
  401fcc:	6011      	str	r1, [r2, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P21;
  401fce:	6819      	ldr	r1, [r3, #0]
  401fd0:	f441 1100 	orr.w	r1, r1, #2097152	; 0x200000
  401fd4:	6019      	str	r1, [r3, #0]

	//Enable interrupts for Encoder 12
	REG_PIOC_IER |= PIO_IER_P22;			//enable input rising edge interrupt
  401fd6:	6811      	ldr	r1, [r2, #0]
  401fd8:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
  401fdc:	6011      	str	r1, [r2, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P22;
  401fde:	6819      	ldr	r1, [r3, #0]
  401fe0:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
  401fe4:	6019      	str	r1, [r3, #0]
	REG_PIOC_IER |= PIO_IER_P23;			//enable input rising edge interrupt
  401fe6:	6811      	ldr	r1, [r2, #0]
  401fe8:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
  401fec:	6011      	str	r1, [r2, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P23;
  401fee:	6819      	ldr	r1, [r3, #0]
  401ff0:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
  401ff4:	6019      	str	r1, [r3, #0]

	//Enable interrupts for Encoder 13
	REG_PIOC_IER |= PIO_IER_P24;			//enable input rising edge interrupt
  401ff6:	6811      	ldr	r1, [r2, #0]
  401ff8:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
  401ffc:	6011      	str	r1, [r2, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P24;
  401ffe:	6819      	ldr	r1, [r3, #0]
  402000:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
  402004:	6019      	str	r1, [r3, #0]
	REG_PIOC_IER |= PIO_IER_P25;			//enable input rising edge interrupt
  402006:	6811      	ldr	r1, [r2, #0]
  402008:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
  40200c:	6011      	str	r1, [r2, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P25;
  40200e:	6819      	ldr	r1, [r3, #0]
  402010:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
  402014:	6019      	str	r1, [r3, #0]

	//Enable interrupts for Encoder 14
	REG_PIOC_IER |= PIO_IER_P26;			//enable input rising edge interrupt
  402016:	6811      	ldr	r1, [r2, #0]
  402018:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
  40201c:	6011      	str	r1, [r2, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P26;
  40201e:	6819      	ldr	r1, [r3, #0]
  402020:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
  402024:	6019      	str	r1, [r3, #0]
	REG_PIOC_IER |= PIO_IER_P27;			//enable input rising edge interrupt
  402026:	6811      	ldr	r1, [r2, #0]
  402028:	f041 6100 	orr.w	r1, r1, #134217728	; 0x8000000
  40202c:	6011      	str	r1, [r2, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P27;
  40202e:	6819      	ldr	r1, [r3, #0]
  402030:	f041 6100 	orr.w	r1, r1, #134217728	; 0x8000000
  402034:	6019      	str	r1, [r3, #0]

	//Enable interrupts for Encoder 15
	REG_PIOC_IER |= PIO_IER_P28;			//enable input rising edge interrupt
  402036:	6811      	ldr	r1, [r2, #0]
  402038:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
  40203c:	6011      	str	r1, [r2, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P28;
  40203e:	6819      	ldr	r1, [r3, #0]
  402040:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
  402044:	6019      	str	r1, [r3, #0]
	REG_PIOC_IER |= PIO_IER_P29;			//enable input rising edge interrupt
  402046:	6811      	ldr	r1, [r2, #0]
  402048:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
  40204c:	6011      	str	r1, [r2, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P29;
  40204e:	6819      	ldr	r1, [r3, #0]
  402050:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
  402054:	6019      	str	r1, [r3, #0]

	//Enable interrupts for Encoder 16
	REG_PIOC_IER |= PIO_IER_P30;			//enable input rising edge interrupt
  402056:	6811      	ldr	r1, [r2, #0]
  402058:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
  40205c:	6011      	str	r1, [r2, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P30;
  40205e:	6819      	ldr	r1, [r3, #0]
  402060:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
  402064:	6019      	str	r1, [r3, #0]
	REG_PIOC_IER |= PIO_IER_P31;			//enable input rising edge interrupt
  402066:	6811      	ldr	r1, [r2, #0]
  402068:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
  40206c:	6011      	str	r1, [r2, #0]
	REG_PIOC_REHLSR |= PIO_REHLSR_P31;
  40206e:	681a      	ldr	r2, [r3, #0]
  402070:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
  402074:	601a      	str	r2, [r3, #0]
  402076:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  40207a:	4b04      	ldr	r3, [pc, #16]	; (40208c <Encoder_init+0x868>)
  40207c:	601a      	str	r2, [r3, #0]

	NVIC_EnableIRQ(PIOC_IRQn);			//enable PORT C interrupts


}
  40207e:	bc70      	pop	{r4, r5, r6}
  402080:	4770      	bx	lr
  402082:	bf00      	nop
  402084:	400e1240 	.word	0x400e1240
  402088:	400e12d4 	.word	0x400e12d4
  40208c:	e000e100 	.word	0xe000e100

00402090 <PIOC_Handler>:



void PIOC_Handler(){
  402090:	b508      	push	{r3, lr}

	uint32_t status = REG_PIOC_ISR;	//read PIOC interrupt status & clear interrupt flags
  402092:	4b56      	ldr	r3, [pc, #344]	; (4021ec <PIOC_Handler+0x15c>)
  402094:	681b      	ldr	r3, [r3, #0]

	//check if Encoder 1 was rotated
	if ( (status & PIO_ISR_P0) || (status & PIO_ISR_P1) ){	
  402096:	f013 0f03 	tst.w	r3, #3
  40209a:	d005      	beq.n	4020a8 <PIOC_Handler+0x18>
		encoder_direction(PIO_ODSR_P0, PIO_ODSR_P1, 0);
  40209c:	2200      	movs	r2, #0
  40209e:	2102      	movs	r1, #2
  4020a0:	2001      	movs	r0, #1
  4020a2:	4b53      	ldr	r3, [pc, #332]	; (4021f0 <PIOC_Handler+0x160>)
  4020a4:	4798      	blx	r3
  4020a6:	bd08      	pop	{r3, pc}
	}

	//check if Encoder 2 was rotated
	else if ( (status & PIO_ISR_P2) || (status & PIO_ISR_P3) ){
  4020a8:	f013 0f0c 	tst.w	r3, #12
  4020ac:	d005      	beq.n	4020ba <PIOC_Handler+0x2a>
		encoder_direction(PIO_ODSR_P2, PIO_ODSR_P3, 1);
  4020ae:	2201      	movs	r2, #1
  4020b0:	2108      	movs	r1, #8
  4020b2:	2004      	movs	r0, #4
  4020b4:	4b4e      	ldr	r3, [pc, #312]	; (4021f0 <PIOC_Handler+0x160>)
  4020b6:	4798      	blx	r3
  4020b8:	bd08      	pop	{r3, pc}
	}

	//check if Encoder 3 was rotated
	else if ( (status & PIO_ISR_P4) || (status & PIO_ISR_P5) ){
  4020ba:	f013 0f30 	tst.w	r3, #48	; 0x30
  4020be:	d005      	beq.n	4020cc <PIOC_Handler+0x3c>
		encoder_direction(PIO_ODSR_P4, PIO_ODSR_P5, 2);
  4020c0:	2202      	movs	r2, #2
  4020c2:	2120      	movs	r1, #32
  4020c4:	2010      	movs	r0, #16
  4020c6:	4b4a      	ldr	r3, [pc, #296]	; (4021f0 <PIOC_Handler+0x160>)
  4020c8:	4798      	blx	r3
  4020ca:	bd08      	pop	{r3, pc}
	}

	//check if Encoder 4 was rotated
	else if ( (status & PIO_ISR_P6) || (status & PIO_ISR_P7) ){
  4020cc:	f013 0fc0 	tst.w	r3, #192	; 0xc0
  4020d0:	d005      	beq.n	4020de <PIOC_Handler+0x4e>
		encoder_direction(PIO_ODSR_P6, PIO_ODSR_P7, 3);
  4020d2:	2203      	movs	r2, #3
  4020d4:	2180      	movs	r1, #128	; 0x80
  4020d6:	2040      	movs	r0, #64	; 0x40
  4020d8:	4b45      	ldr	r3, [pc, #276]	; (4021f0 <PIOC_Handler+0x160>)
  4020da:	4798      	blx	r3
  4020dc:	bd08      	pop	{r3, pc}
	}

	//check if Encoder 5 was rotated
	else if ( (status & PIO_ISR_P8) || (status & PIO_ISR_P9) ){
  4020de:	f413 7f40 	tst.w	r3, #768	; 0x300
  4020e2:	d007      	beq.n	4020f4 <PIOC_Handler+0x64>
		encoder_direction(PIO_ODSR_P8, PIO_ODSR_P9, 4);
  4020e4:	2204      	movs	r2, #4
  4020e6:	f44f 7100 	mov.w	r1, #512	; 0x200
  4020ea:	f44f 7080 	mov.w	r0, #256	; 0x100
  4020ee:	4b40      	ldr	r3, [pc, #256]	; (4021f0 <PIOC_Handler+0x160>)
  4020f0:	4798      	blx	r3
  4020f2:	bd08      	pop	{r3, pc}
	}

	//check if Encoder 6 was rotated
	else if ( (status & PIO_ISR_P10) || (status & PIO_ISR_P11) ){
  4020f4:	f413 6f40 	tst.w	r3, #3072	; 0xc00
  4020f8:	d007      	beq.n	40210a <PIOC_Handler+0x7a>
		encoder_direction(PIO_ODSR_P10, PIO_ODSR_P11, 5);
  4020fa:	2205      	movs	r2, #5
  4020fc:	f44f 6100 	mov.w	r1, #2048	; 0x800
  402100:	f44f 6080 	mov.w	r0, #1024	; 0x400
  402104:	4b3a      	ldr	r3, [pc, #232]	; (4021f0 <PIOC_Handler+0x160>)
  402106:	4798      	blx	r3
  402108:	bd08      	pop	{r3, pc}
	}

	//check if Encoder 7 was rotated
	else if ( (status & PIO_ISR_P12) || (status & PIO_ISR_P13) ){
  40210a:	f413 5f40 	tst.w	r3, #12288	; 0x3000
  40210e:	d007      	beq.n	402120 <PIOC_Handler+0x90>
		encoder_direction(PIO_ODSR_P12, PIO_ODSR_P13, 6);
  402110:	2206      	movs	r2, #6
  402112:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  402116:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  40211a:	4b35      	ldr	r3, [pc, #212]	; (4021f0 <PIOC_Handler+0x160>)
  40211c:	4798      	blx	r3
  40211e:	bd08      	pop	{r3, pc}
	}

	//check if Encoder 8 was rotated
	else if ( (status & PIO_ISR_P14) || (status & PIO_ISR_P15) ){
  402120:	f413 4f40 	tst.w	r3, #49152	; 0xc000
  402124:	d007      	beq.n	402136 <PIOC_Handler+0xa6>
		encoder_direction(PIO_ODSR_P14, PIO_ODSR_P15, 7);
  402126:	2207      	movs	r2, #7
  402128:	f44f 4100 	mov.w	r1, #32768	; 0x8000
  40212c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  402130:	4b2f      	ldr	r3, [pc, #188]	; (4021f0 <PIOC_Handler+0x160>)
  402132:	4798      	blx	r3
  402134:	bd08      	pop	{r3, pc}
	}

	//check if Encoder 9 was rotated
	else if ( (status & PIO_ISR_P16) || (status & PIO_ISR_P17) ){
  402136:	f413 3f40 	tst.w	r3, #196608	; 0x30000
  40213a:	d007      	beq.n	40214c <PIOC_Handler+0xbc>
		encoder_direction(PIO_ODSR_P16, PIO_ODSR_P17, 8);
  40213c:	2208      	movs	r2, #8
  40213e:	f44f 3100 	mov.w	r1, #131072	; 0x20000
  402142:	f44f 3080 	mov.w	r0, #65536	; 0x10000
  402146:	4b2a      	ldr	r3, [pc, #168]	; (4021f0 <PIOC_Handler+0x160>)
  402148:	4798      	blx	r3
  40214a:	bd08      	pop	{r3, pc}
	}

	//check if Encoder 10 was rotated
	else if ( (status & PIO_ISR_P18) || (status & PIO_ISR_P19) ){
  40214c:	f413 2f40 	tst.w	r3, #786432	; 0xc0000
  402150:	d007      	beq.n	402162 <PIOC_Handler+0xd2>
		encoder_direction(PIO_ODSR_P18, PIO_ODSR_P19, 9);
  402152:	2209      	movs	r2, #9
  402154:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  402158:	f44f 2080 	mov.w	r0, #262144	; 0x40000
  40215c:	4b24      	ldr	r3, [pc, #144]	; (4021f0 <PIOC_Handler+0x160>)
  40215e:	4798      	blx	r3
  402160:	bd08      	pop	{r3, pc}
	}

	//check if Encoder 11 was rotated
	else if ( (status & PIO_ISR_P20) || (status & PIO_ISR_P21) ){
  402162:	f413 1f40 	tst.w	r3, #3145728	; 0x300000
  402166:	d007      	beq.n	402178 <PIOC_Handler+0xe8>
		encoder_direction(PIO_ODSR_P20, PIO_ODSR_P21, 10);
  402168:	220a      	movs	r2, #10
  40216a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
  40216e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  402172:	4b1f      	ldr	r3, [pc, #124]	; (4021f0 <PIOC_Handler+0x160>)
  402174:	4798      	blx	r3
  402176:	bd08      	pop	{r3, pc}
	}

	//check if Encoder 12 was rotated
	else if ( (status & PIO_ISR_P22) || (status & PIO_ISR_P23) ){
  402178:	f413 0f40 	tst.w	r3, #12582912	; 0xc00000
  40217c:	d007      	beq.n	40218e <PIOC_Handler+0xfe>
		encoder_direction(PIO_ODSR_P22, PIO_ODSR_P23, 11);
  40217e:	220b      	movs	r2, #11
  402180:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
  402184:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
  402188:	4b19      	ldr	r3, [pc, #100]	; (4021f0 <PIOC_Handler+0x160>)
  40218a:	4798      	blx	r3
  40218c:	bd08      	pop	{r3, pc}
	}

	//check if Encoder 13 was rotated
	else if ( (status & PIO_ISR_P24) || (status & PIO_ISR_P25) ){
  40218e:	f013 7f40 	tst.w	r3, #50331648	; 0x3000000
  402192:	d007      	beq.n	4021a4 <PIOC_Handler+0x114>
		encoder_direction(PIO_ODSR_P24, PIO_ODSR_P25, 12);
  402194:	220c      	movs	r2, #12
  402196:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
  40219a:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
  40219e:	4b14      	ldr	r3, [pc, #80]	; (4021f0 <PIOC_Handler+0x160>)
  4021a0:	4798      	blx	r3
  4021a2:	bd08      	pop	{r3, pc}
	}
	
	//check if Encoder 14 was rotated
	else if ( (status & PIO_ISR_P26) || (status & PIO_ISR_P27) ){
  4021a4:	f013 6f40 	tst.w	r3, #201326592	; 0xc000000
  4021a8:	d007      	beq.n	4021ba <PIOC_Handler+0x12a>
		encoder_direction(PIO_ODSR_P26, PIO_ODSR_P27, 13);
  4021aa:	220d      	movs	r2, #13
  4021ac:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4021b0:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
  4021b4:	4b0e      	ldr	r3, [pc, #56]	; (4021f0 <PIOC_Handler+0x160>)
  4021b6:	4798      	blx	r3
  4021b8:	bd08      	pop	{r3, pc}
	}

	//check if Encoder 15 was rotated
	else if ( (status & PIO_ISR_P28) || (status & PIO_ISR_P29) ){
  4021ba:	f013 5f40 	tst.w	r3, #805306368	; 0x30000000
  4021be:	d007      	beq.n	4021d0 <PIOC_Handler+0x140>
		encoder_direction(PIO_ODSR_P28, PIO_ODSR_P29, 14);
  4021c0:	220e      	movs	r2, #14
  4021c2:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  4021c6:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
  4021ca:	4b09      	ldr	r3, [pc, #36]	; (4021f0 <PIOC_Handler+0x160>)
  4021cc:	4798      	blx	r3
  4021ce:	bd08      	pop	{r3, pc}
	}

	//check if Encoder 16 was rotated
	else if ( (status & PIO_ISR_P30) || (status & PIO_ISR_P31) ){
  4021d0:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
  4021d4:	d101      	bne.n	4021da <PIOC_Handler+0x14a>
  4021d6:	2b00      	cmp	r3, #0
  4021d8:	da06      	bge.n	4021e8 <PIOC_Handler+0x158>
		encoder_direction(PIO_ODSR_P30, PIO_ODSR_P31, 15);
  4021da:	220f      	movs	r2, #15
  4021dc:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  4021e0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  4021e4:	4b02      	ldr	r3, [pc, #8]	; (4021f0 <PIOC_Handler+0x160>)
  4021e6:	4798      	blx	r3
  4021e8:	bd08      	pop	{r3, pc}
  4021ea:	bf00      	nop
  4021ec:	400e124c 	.word	0x400e124c
  4021f0:	00401775 	.word	0x00401775

004021f4 <getWidth_28>:

//______________________________________________________________________________________________________

uint8_t getWidth_28() {
	return 16;
}
  4021f4:	2010      	movs	r0, #16
  4021f6:	4770      	bx	lr

004021f8 <getWidth_22>:

uint8_t getWidth_22() {
	return 12;
}
  4021f8:	200c      	movs	r0, #12
  4021fa:	4770      	bx	lr

004021fc <getWidth_18>:

uint8_t getWidth_18() {
	return 11;
}
  4021fc:	200b      	movs	r0, #11
  4021fe:	4770      	bx	lr

00402200 <getByte_28>:

uint8_t getByte_28(char input, uint16_t byte_offset) {
	// Finds which descriptor to use
	uint16_t index_value = input - oCRAExtended_28ptFontInfo.StartCharacter;
	// Finds the start of the character in the main array using the descriptor
	uint16_t lookup = oCRAExtended_28ptDescriptors[index_value].Offset;
  402200:	3823      	subs	r0, #35	; 0x23
  402202:	b280      	uxth	r0, r0
  402204:	4b03      	ldr	r3, [pc, #12]	; (402214 <getByte_28+0x14>)
  402206:	eb03 0080 	add.w	r0, r3, r0, lsl #2
	// Accesses the intended byte in the character
	return oCRAExtended_28ptBitmaps[lookup + byte_offset];
  40220a:	8842      	ldrh	r2, [r0, #2]
  40220c:	4b02      	ldr	r3, [pc, #8]	; (402218 <getByte_28+0x18>)
  40220e:	4419      	add	r1, r3
}
  402210:	5c88      	ldrb	r0, [r1, r2]
  402212:	4770      	bx	lr
  402214:	00406374 	.word	0x00406374
  402218:	00405c54 	.word	0x00405c54

0040221c <getByte_22>:

uint8_t getByte_22(char input, uint16_t byte_offset) {
  40221c:	b082      	sub	sp, #8
	// Finds which descriptor to use
	volatile uint16_t index_value = input - oCRAExtended_22ptFontInfo.StartCharacter;
  40221e:	3823      	subs	r0, #35	; 0x23
  402220:	b280      	uxth	r0, r0
  402222:	f8ad 0006 	strh.w	r0, [sp, #6]
	// Finds the start of the character in the main array using the descriptor
	volatile uint16_t lookup = oCRAExtended_22ptDescriptors[index_value].Offset;
  402226:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  40222a:	b29a      	uxth	r2, r3
  40222c:	4b06      	ldr	r3, [pc, #24]	; (402248 <getByte_22+0x2c>)
  40222e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  402232:	885b      	ldrh	r3, [r3, #2]
  402234:	f8ad 3004 	strh.w	r3, [sp, #4]
	// Accesses the intended byte in the character
	return oCRAExtended_22ptBitmaps[lookup + byte_offset];
  402238:	f8bd 3004 	ldrh.w	r3, [sp, #4]
  40223c:	4a03      	ldr	r2, [pc, #12]	; (40224c <getByte_22+0x30>)
  40223e:	fa12 f383 	uxtah	r3, r2, r3
}
  402242:	5c58      	ldrb	r0, [r3, r1]
  402244:	b002      	add	sp, #8
  402246:	4770      	bx	lr
  402248:	00405820 	.word	0x00405820
  40224c:	004052c8 	.word	0x004052c8

00402250 <getByte_18>:

uint8_t getByte_18(char input, uint16_t byte_offset) {
  402250:	b082      	sub	sp, #8
	// Finds which descriptor to use
	volatile uint16_t index_value = input - oCRAExtended_18ptFontInfo.StartCharacter;
  402252:	3823      	subs	r0, #35	; 0x23
  402254:	b280      	uxth	r0, r0
  402256:	f8ad 0006 	strh.w	r0, [sp, #6]
	// Finds the start of the character in the main array using the descriptor
	volatile uint16_t lookup = oCRAExtended_18ptDescriptors[index_value].Offset;
  40225a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  40225e:	b29a      	uxth	r2, r3
  402260:	4b06      	ldr	r3, [pc, #24]	; (40227c <getByte_18+0x2c>)
  402262:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  402266:	885b      	ldrh	r3, [r3, #2]
  402268:	f8ad 3004 	strh.w	r3, [sp, #4]
	// Accesses the intended byte in the character
	return oCRAExtended_18ptBitmaps[lookup + byte_offset];
  40226c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
  402270:	4a03      	ldr	r2, [pc, #12]	; (402280 <getByte_18+0x30>)
  402272:	fa12 f383 	uxtah	r3, r2, r3
  402276:	5c58      	ldrb	r0, [r3, r1]
  402278:	b002      	add	sp, #8
  40227a:	4770      	bx	lr
  40227c:	004064bc 	.word	0x004064bc
  402280:	00405968 	.word	0x00405968

00402284 <leds_update_status>:
	SPI_led_init();
	leds_update_cursor(curr_step);
}

/* updates LED statuses for current page being displayed */
void leds_update_status(){
  402284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402286:	4d06      	ldr	r5, [pc, #24]	; (4022a0 <leds_update_status+0x1c>)

	/* match LED status to current display page status */
	for (int i = 0; i < 16; i++){
  402288:	2400      	movs	r4, #0
		leds_status[i] = notes_display_get(display_page, i);
  40228a:	4f06      	ldr	r7, [pc, #24]	; (4022a4 <leds_update_status+0x20>)
  40228c:	4e06      	ldr	r6, [pc, #24]	; (4022a8 <leds_update_status+0x24>)
  40228e:	b2e1      	uxtb	r1, r4
  402290:	7838      	ldrb	r0, [r7, #0]
  402292:	47b0      	blx	r6
  402294:	f845 0f04 	str.w	r0, [r5, #4]!

/* updates LED statuses for current page being displayed */
void leds_update_status(){

	/* match LED status to current display page status */
	for (int i = 0; i < 16; i++){
  402298:	3401      	adds	r4, #1
  40229a:	2c10      	cmp	r4, #16
  40229c:	d1f7      	bne.n	40228e <leds_update_status+0xa>
		leds_status[i] = notes_display_get(display_page, i);
	}

}
  40229e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4022a0:	20000620 	.word	0x20000620
  4022a4:	200006f4 	.word	0x200006f4
  4022a8:	0040394d 	.word	0x0040394d

004022ac <leds_update_display>:
void leds_update_note(uint8_t led_pos){

	leds_update_display();
}

 void leds_update_display(){
  4022ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  4022ae:	b672      	cpsid	i
  4022b0:	f3bf 8f5f 	dmb	sy

	cpu_irq_disable();
  4022b4:	4f90      	ldr	r7, [pc, #576]	; (4024f8 <leds_update_display+0x24c>)
  4022b6:	2300      	movs	r3, #0
  4022b8:	703b      	strb	r3, [r7, #0]

	//Set Write Command, Function, and BC Bits
	SPI_byteSend(0x94);
  4022ba:	2094      	movs	r0, #148	; 0x94
  4022bc:	4c8f      	ldr	r4, [pc, #572]	; (4024fc <leds_update_display+0x250>)
  4022be:	47a0      	blx	r4
	SPI_byteSend(0x5F);
  4022c0:	205f      	movs	r0, #95	; 0x5f
  4022c2:	47a0      	blx	r4
	SPI_byteSend(0xFF);
  4022c4:	20ff      	movs	r0, #255	; 0xff
  4022c6:	47a0      	blx	r4
	SPI_byteSend(0xFF);
  4022c8:	20ff      	movs	r0, #255	; 0xff
  4022ca:	47a0      	blx	r4
// 	for (int i = 11; i > -1; i--){
// 		SPI_byteSend( (uint8_t) (leds_data_1[i] >> 8) );
// 		SPI_byteSend( (uint8_t) (leds_data_1[i]) );
// 	}

	SPI_byteSend( (uint8_t) (leds_data_1[2] >> 8) );
  4022cc:	4d8c      	ldr	r5, [pc, #560]	; (402500 <leds_update_display+0x254>)
  4022ce:	88a8      	ldrh	r0, [r5, #4]
  4022d0:	0a00      	lsrs	r0, r0, #8
  4022d2:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_1[2]) );
  4022d4:	7928      	ldrb	r0, [r5, #4]
  4022d6:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_1[1] >> 8) );
  4022d8:	8868      	ldrh	r0, [r5, #2]
  4022da:	0a00      	lsrs	r0, r0, #8
  4022dc:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_1[1]) );
  4022de:	78a8      	ldrb	r0, [r5, #2]
  4022e0:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_1[0] >> 8) );
  4022e2:	8828      	ldrh	r0, [r5, #0]
  4022e4:	0a00      	lsrs	r0, r0, #8
  4022e6:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_1[0]) );
  4022e8:	7828      	ldrb	r0, [r5, #0]
  4022ea:	47a0      	blx	r4

	SPI_byteSend( (uint8_t) (leds_data_3[2] >> 8) );
  4022ec:	4e85      	ldr	r6, [pc, #532]	; (402504 <leds_update_display+0x258>)
  4022ee:	88b0      	ldrh	r0, [r6, #4]
  4022f0:	0a00      	lsrs	r0, r0, #8
  4022f2:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_3[2]) );
  4022f4:	7930      	ldrb	r0, [r6, #4]
  4022f6:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_3[1] >> 8) );
  4022f8:	8870      	ldrh	r0, [r6, #2]
  4022fa:	0a00      	lsrs	r0, r0, #8
  4022fc:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_3[1]) );
  4022fe:	78b0      	ldrb	r0, [r6, #2]
  402300:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_3[0] >> 8) );
  402302:	8830      	ldrh	r0, [r6, #0]
  402304:	0a00      	lsrs	r0, r0, #8
  402306:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_3[0]) );
  402308:	7830      	ldrb	r0, [r6, #0]
  40230a:	47a0      	blx	r4

	SPI_byteSend( (uint8_t) (leds_data_3[5] >> 8) );
  40230c:	8970      	ldrh	r0, [r6, #10]
  40230e:	0a00      	lsrs	r0, r0, #8
  402310:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_3[5]) );
  402312:	7ab0      	ldrb	r0, [r6, #10]
  402314:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_3[4] >> 8) );
  402316:	8930      	ldrh	r0, [r6, #8]
  402318:	0a00      	lsrs	r0, r0, #8
  40231a:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_3[4]) );
  40231c:	7a30      	ldrb	r0, [r6, #8]
  40231e:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_3[3] >> 8) );
  402320:	88f0      	ldrh	r0, [r6, #6]
  402322:	0a00      	lsrs	r0, r0, #8
  402324:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_3[3]) );
  402326:	79b0      	ldrb	r0, [r6, #6]
  402328:	47a0      	blx	r4

	SPI_byteSend( (uint8_t) (leds_data_1[5] >> 8) );
  40232a:	8968      	ldrh	r0, [r5, #10]
  40232c:	0a00      	lsrs	r0, r0, #8
  40232e:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_1[5]) );
  402330:	7aa8      	ldrb	r0, [r5, #10]
  402332:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_1[4] >> 8) );
  402334:	8928      	ldrh	r0, [r5, #8]
  402336:	0a00      	lsrs	r0, r0, #8
  402338:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_1[4]) );
  40233a:	7a28      	ldrb	r0, [r5, #8]
  40233c:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_1[3] >> 8) );
  40233e:	88e8      	ldrh	r0, [r5, #6]
  402340:	0a00      	lsrs	r0, r0, #8
  402342:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_1[3]) );
  402344:	79a8      	ldrb	r0, [r5, #6]
  402346:	47a0      	blx	r4

	//Set Write Command, Function, and BC Bits
	SPI_byteSend(0x94);
  402348:	2094      	movs	r0, #148	; 0x94
  40234a:	47a0      	blx	r4
	SPI_byteSend(0x5F);
  40234c:	205f      	movs	r0, #95	; 0x5f
  40234e:	47a0      	blx	r4
	SPI_byteSend(0xFF);
  402350:	20ff      	movs	r0, #255	; 0xff
  402352:	47a0      	blx	r4
	SPI_byteSend(0xFF);
  402354:	20ff      	movs	r0, #255	; 0xff
  402356:	47a0      	blx	r4
// 	for (int i = 11; i > -1; i--){
// 		SPI_byteSend( (uint8_t) (leds_data_2[i] >> 8) );
// 		SPI_byteSend( (uint8_t) (leds_data_2[i]) );
// 	}

	SPI_byteSend( (uint8_t) (leds_data_1[8] >> 8) );
  402358:	8a28      	ldrh	r0, [r5, #16]
  40235a:	0a00      	lsrs	r0, r0, #8
  40235c:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_1[8]) );
  40235e:	7c28      	ldrb	r0, [r5, #16]
  402360:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_1[7] >> 8) );
  402362:	89e8      	ldrh	r0, [r5, #14]
  402364:	0a00      	lsrs	r0, r0, #8
  402366:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_1[7]) );
  402368:	7ba8      	ldrb	r0, [r5, #14]
  40236a:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_1[6] >> 8) );
  40236c:	89a8      	ldrh	r0, [r5, #12]
  40236e:	0a00      	lsrs	r0, r0, #8
  402370:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_1[6]) );
  402372:	7b28      	ldrb	r0, [r5, #12]
  402374:	47a0      	blx	r4

	SPI_byteSend( (uint8_t) (leds_data_3[8] >> 8) );
  402376:	8a30      	ldrh	r0, [r6, #16]
  402378:	0a00      	lsrs	r0, r0, #8
  40237a:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_3[8]) );
  40237c:	7c30      	ldrb	r0, [r6, #16]
  40237e:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_3[7] >> 8) );
  402380:	89f0      	ldrh	r0, [r6, #14]
  402382:	0a00      	lsrs	r0, r0, #8
  402384:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_3[7]) );
  402386:	7bb0      	ldrb	r0, [r6, #14]
  402388:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_3[6] >> 8) );
  40238a:	89b0      	ldrh	r0, [r6, #12]
  40238c:	0a00      	lsrs	r0, r0, #8
  40238e:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_3[6]) );
  402390:	7b30      	ldrb	r0, [r6, #12]
  402392:	47a0      	blx	r4

	SPI_byteSend( (uint8_t) (leds_data_3[11] >> 8) );
  402394:	8af0      	ldrh	r0, [r6, #22]
  402396:	0a00      	lsrs	r0, r0, #8
  402398:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_3[11]) );
  40239a:	7db0      	ldrb	r0, [r6, #22]
  40239c:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_3[10] >> 8) );
  40239e:	8ab0      	ldrh	r0, [r6, #20]
  4023a0:	0a00      	lsrs	r0, r0, #8
  4023a2:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_3[10]) );
  4023a4:	7d30      	ldrb	r0, [r6, #20]
  4023a6:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_3[9] >> 8) );
  4023a8:	8a70      	ldrh	r0, [r6, #18]
  4023aa:	0a00      	lsrs	r0, r0, #8
  4023ac:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_3[9]) );
  4023ae:	7cb0      	ldrb	r0, [r6, #18]
  4023b0:	47a0      	blx	r4

	SPI_byteSend( (uint8_t) (leds_data_1[11] >> 8) );
  4023b2:	8ae8      	ldrh	r0, [r5, #22]
  4023b4:	0a00      	lsrs	r0, r0, #8
  4023b6:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_1[11]) );
  4023b8:	7da8      	ldrb	r0, [r5, #22]
  4023ba:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_1[10] >> 8) );
  4023bc:	8aa8      	ldrh	r0, [r5, #20]
  4023be:	0a00      	lsrs	r0, r0, #8
  4023c0:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_1[10]) );
  4023c2:	7d28      	ldrb	r0, [r5, #20]
  4023c4:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_1[9] >> 8) );
  4023c6:	8a68      	ldrh	r0, [r5, #18]
  4023c8:	0a00      	lsrs	r0, r0, #8
  4023ca:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_1[9]) );
  4023cc:	7ca8      	ldrb	r0, [r5, #18]
  4023ce:	47a0      	blx	r4

	//Set Write Command, Function, and BC Bits
	SPI_byteSend(0x94);
  4023d0:	2094      	movs	r0, #148	; 0x94
  4023d2:	47a0      	blx	r4
	SPI_byteSend(0x5F);
  4023d4:	205f      	movs	r0, #95	; 0x5f
  4023d6:	47a0      	blx	r4
	SPI_byteSend(0xFF);
  4023d8:	20ff      	movs	r0, #255	; 0xff
  4023da:	47a0      	blx	r4
	SPI_byteSend(0xFF);
  4023dc:	20ff      	movs	r0, #255	; 0xff
  4023de:	47a0      	blx	r4
// 	for (int i = 11; i > -1; i--){
// 		SPI_byteSend( (uint8_t) (leds_data_3[i] >> 8) );
// 		SPI_byteSend( (uint8_t) (leds_data_3[i]) );
// 	}

	SPI_byteSend( (uint8_t) (leds_data_2[2] >> 8) );
  4023e0:	4d49      	ldr	r5, [pc, #292]	; (402508 <leds_update_display+0x25c>)
  4023e2:	88a8      	ldrh	r0, [r5, #4]
  4023e4:	0a00      	lsrs	r0, r0, #8
  4023e6:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_2[2]) );
  4023e8:	7928      	ldrb	r0, [r5, #4]
  4023ea:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_2[1] >> 8) );
  4023ec:	8868      	ldrh	r0, [r5, #2]
  4023ee:	0a00      	lsrs	r0, r0, #8
  4023f0:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_2[1]) );
  4023f2:	78a8      	ldrb	r0, [r5, #2]
  4023f4:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_2[0] >> 8) );
  4023f6:	8828      	ldrh	r0, [r5, #0]
  4023f8:	0a00      	lsrs	r0, r0, #8
  4023fa:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_2[0]) );
  4023fc:	7828      	ldrb	r0, [r5, #0]
  4023fe:	47a0      	blx	r4

	SPI_byteSend( (uint8_t) (leds_data_4[2] >> 8) );
  402400:	4e42      	ldr	r6, [pc, #264]	; (40250c <leds_update_display+0x260>)
  402402:	88b0      	ldrh	r0, [r6, #4]
  402404:	0a00      	lsrs	r0, r0, #8
  402406:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_4[2]) );
  402408:	7930      	ldrb	r0, [r6, #4]
  40240a:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_4[1] >> 8) );
  40240c:	8870      	ldrh	r0, [r6, #2]
  40240e:	0a00      	lsrs	r0, r0, #8
  402410:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_4[1]) );
  402412:	78b0      	ldrb	r0, [r6, #2]
  402414:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_4[0] >> 8) );
  402416:	8830      	ldrh	r0, [r6, #0]
  402418:	0a00      	lsrs	r0, r0, #8
  40241a:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_4[0]) );
  40241c:	7830      	ldrb	r0, [r6, #0]
  40241e:	47a0      	blx	r4

	SPI_byteSend( (uint8_t) (leds_data_4[5] >> 8) );
  402420:	8970      	ldrh	r0, [r6, #10]
  402422:	0a00      	lsrs	r0, r0, #8
  402424:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_4[5]) );
  402426:	7ab0      	ldrb	r0, [r6, #10]
  402428:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_4[4] >> 8) );
  40242a:	8930      	ldrh	r0, [r6, #8]
  40242c:	0a00      	lsrs	r0, r0, #8
  40242e:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_4[4]) );
  402430:	7a30      	ldrb	r0, [r6, #8]
  402432:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_4[3] >> 8) );
  402434:	88f0      	ldrh	r0, [r6, #6]
  402436:	0a00      	lsrs	r0, r0, #8
  402438:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_4[3]) );
  40243a:	79b0      	ldrb	r0, [r6, #6]
  40243c:	47a0      	blx	r4

	SPI_byteSend( (uint8_t) (leds_data_2[5] >> 8) );
  40243e:	8968      	ldrh	r0, [r5, #10]
  402440:	0a00      	lsrs	r0, r0, #8
  402442:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_2[5]) );
  402444:	7aa8      	ldrb	r0, [r5, #10]
  402446:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_2[4] >> 8) );
  402448:	8928      	ldrh	r0, [r5, #8]
  40244a:	0a00      	lsrs	r0, r0, #8
  40244c:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_2[4]) );
  40244e:	7a28      	ldrb	r0, [r5, #8]
  402450:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_2[3] >> 8) );
  402452:	88e8      	ldrh	r0, [r5, #6]
  402454:	0a00      	lsrs	r0, r0, #8
  402456:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_2[3]) );
  402458:	79a8      	ldrb	r0, [r5, #6]
  40245a:	47a0      	blx	r4

	//Set Write Command, Function, and BC Bits
	SPI_byteSend(0x94);
  40245c:	2094      	movs	r0, #148	; 0x94
  40245e:	47a0      	blx	r4
	SPI_byteSend(0x5F);
  402460:	205f      	movs	r0, #95	; 0x5f
  402462:	47a0      	blx	r4
	SPI_byteSend(0xFF);
  402464:	20ff      	movs	r0, #255	; 0xff
  402466:	47a0      	blx	r4
	SPI_byteSend(0xFF);
  402468:	20ff      	movs	r0, #255	; 0xff
  40246a:	47a0      	blx	r4
// 	for (int i = 11; i > -1; i--){
// 		SPI_byteSend( (uint8_t) (leds_data_4[i] >> 8) );
// 		SPI_byteSend( (uint8_t) (leds_data_4[i]) );
// 	}

	SPI_byteSend( (uint8_t) (leds_data_2[8] >> 8) );
  40246c:	8a28      	ldrh	r0, [r5, #16]
  40246e:	0a00      	lsrs	r0, r0, #8
  402470:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_2[8]) );
  402472:	7c28      	ldrb	r0, [r5, #16]
  402474:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_2[7] >> 8) );
  402476:	89e8      	ldrh	r0, [r5, #14]
  402478:	0a00      	lsrs	r0, r0, #8
  40247a:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_2[7]) );
  40247c:	7ba8      	ldrb	r0, [r5, #14]
  40247e:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_2[6] >> 8) );
  402480:	89a8      	ldrh	r0, [r5, #12]
  402482:	0a00      	lsrs	r0, r0, #8
  402484:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_2[6]) );
  402486:	7b28      	ldrb	r0, [r5, #12]
  402488:	47a0      	blx	r4

	SPI_byteSend( (uint8_t) (leds_data_4[8] >> 8) );
  40248a:	8a30      	ldrh	r0, [r6, #16]
  40248c:	0a00      	lsrs	r0, r0, #8
  40248e:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_4[8]) );
  402490:	7c30      	ldrb	r0, [r6, #16]
  402492:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_4[7] >> 8) );
  402494:	89f0      	ldrh	r0, [r6, #14]
  402496:	0a00      	lsrs	r0, r0, #8
  402498:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_4[7]) );
  40249a:	7bb0      	ldrb	r0, [r6, #14]
  40249c:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_4[6] >> 8) );
  40249e:	89b0      	ldrh	r0, [r6, #12]
  4024a0:	0a00      	lsrs	r0, r0, #8
  4024a2:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_4[6]) );
  4024a4:	7b30      	ldrb	r0, [r6, #12]
  4024a6:	47a0      	blx	r4

	SPI_byteSend( (uint8_t) (leds_data_4[11] >> 8) );
  4024a8:	8af0      	ldrh	r0, [r6, #22]
  4024aa:	0a00      	lsrs	r0, r0, #8
  4024ac:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_4[11]) );
  4024ae:	7db0      	ldrb	r0, [r6, #22]
  4024b0:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_4[10] >> 8) );
  4024b2:	8ab0      	ldrh	r0, [r6, #20]
  4024b4:	0a00      	lsrs	r0, r0, #8
  4024b6:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_4[10]) );
  4024b8:	7d30      	ldrb	r0, [r6, #20]
  4024ba:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_4[9] >> 8) );
  4024bc:	8a70      	ldrh	r0, [r6, #18]
  4024be:	0a00      	lsrs	r0, r0, #8
  4024c0:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_4[9]) );
  4024c2:	7cb0      	ldrb	r0, [r6, #18]
  4024c4:	47a0      	blx	r4

	SPI_byteSend( (uint8_t) (leds_data_2[11] >> 8) );
  4024c6:	8ae8      	ldrh	r0, [r5, #22]
  4024c8:	0a00      	lsrs	r0, r0, #8
  4024ca:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_2[11]) );
  4024cc:	7da8      	ldrb	r0, [r5, #22]
  4024ce:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_2[10] >> 8) );
  4024d0:	8aa8      	ldrh	r0, [r5, #20]
  4024d2:	0a00      	lsrs	r0, r0, #8
  4024d4:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_2[10]) );
  4024d6:	7d28      	ldrb	r0, [r5, #20]
  4024d8:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_2[9] >> 8) );
  4024da:	8a68      	ldrh	r0, [r5, #18]
  4024dc:	0a00      	lsrs	r0, r0, #8
  4024de:	47a0      	blx	r4
	SPI_byteSend( (uint8_t) (leds_data_2[9]) );
  4024e0:	7ca8      	ldrb	r0, [r5, #18]
  4024e2:	47a0      	blx	r4


	delay_ms(2.74);
  4024e4:	f243 70ce 	movw	r0, #14286	; 0x37ce
  4024e8:	4b09      	ldr	r3, [pc, #36]	; (402510 <leds_update_display+0x264>)
  4024ea:	4798      	blx	r3
	cpu_irq_enable();
  4024ec:	2301      	movs	r3, #1
  4024ee:	703b      	strb	r3, [r7, #0]
  4024f0:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  4024f4:	b662      	cpsie	i
  4024f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4024f8:	200001c4 	.word	0x200001c4
  4024fc:	00403811 	.word	0x00403811
  402500:	20000664 	.word	0x20000664
  402504:	20000694 	.word	0x20000694
  402508:	2000067c 	.word	0x2000067c
  40250c:	200006ac 	.word	0x200006ac
  402510:	20000001 	.word	0x20000001

00402514 <leds_update_cursor>:

	/* update note status if button was pressed on current page */
		notes_status_set(display_page, leds_status);
}

void leds_update_cursor(uint8_t curr_step){
  402514:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402518:	4607      	mov	r7, r0

	/* update LEDs status for current page being displayed */
	leds_update_status();
  40251a:	4b7f      	ldr	r3, [pc, #508]	; (402718 <leds_update_cursor+0x204>)
  40251c:	4798      	blx	r3
  40251e:	4c7f      	ldr	r4, [pc, #508]	; (40271c <leds_update_cursor+0x208>)
  402520:	1ca5      	adds	r5, r4, #2
  402522:	497f      	ldr	r1, [pc, #508]	; (402720 <leds_update_cursor+0x20c>)
  402524:	2200      	movs	r2, #0

/* Initialize the Notes that are Enabled as Blue */
	for (int i = 0; i < 16; i++){
  402526:	4613      	mov	r3, r2
					leds_data_3[toffset+1] = 0x0000;
					leds_data_3[toffset+2] = 0x0000;
				}
			}
			else {
				toffset = (i % 12)*3;
  402528:	f8df c224 	ldr.w	ip, [pc, #548]	; 402750 <leds_update_cursor+0x23c>
					leds_data_4[toffset] = 0x0000;
					leds_data_4[toffset+1] = 0x0000;
					leds_data_4[toffset+2] = 0xFFFF;
				}
				else{
					leds_data_4[toffset] = 0x0000;
  40252c:	f8df e218 	ldr.w	lr, [pc, #536]	; 402748 <leds_update_cursor+0x234>
  402530:	4610      	mov	r0, r2
			else {
				toffset = (i % 12)*3;
				if(leds_status[i] == 1){
					leds_data_4[toffset] = 0x0000;
					leds_data_4[toffset+1] = 0x0000;
					leds_data_4[toffset+2] = 0xFFFF;
  402532:	f64f 78ff 	movw	r8, #65535	; 0xffff
					leds_data_3[toffset] = 0x0000;
					leds_data_3[toffset+1] = 0x0000;
					leds_data_3[toffset+2] = 0xFFFF;
				}
				else{
					leds_data_3[toffset] = 0x0000;
  402536:	f8df a208 	ldr.w	sl, [pc, #520]	; 402740 <leds_update_cursor+0x22c>
					leds_data_2[toffset] = 0x0000;
					leds_data_2[toffset+1] = 0x0000;
					leds_data_2[toffset+2] = 0xFFFF;
				}
				else{
					leds_data_2[toffset] = 0x0000;
  40253a:	f8df b200 	ldr.w	fp, [pc, #512]	; 40273c <leds_update_cursor+0x228>
	/* update LEDs status for current page being displayed */
	leds_update_status();

/* Initialize the Notes that are Enabled as Blue */
	for (int i = 0; i < 16; i++){
			if ( (i >= 0) && (i < 4) ){
  40253e:	2b03      	cmp	r3, #3
  402540:	d80a      	bhi.n	402558 <leds_update_cursor+0x44>
				toffset = (i)*3;
				if(leds_status[i] == 1){
  402542:	680e      	ldr	r6, [r1, #0]
  402544:	2e01      	cmp	r6, #1
					leds_data_1[toffset] = 0x0000;
  402546:	f825 0c02 	strh.w	r0, [r5, #-2]
					leds_data_1[toffset+1] = 0x0000;
  40254a:	8060      	strh	r0, [r4, #2]
					leds_data_1[toffset+2] = 0xFFFF;
  40254c:	bf0c      	ite	eq
  40254e:	f8a4 8004 	strheq.w	r8, [r4, #4]
				}
				else{
					leds_data_1[toffset] = 0x0000;
					leds_data_1[toffset+1] = 0x0000;
					leds_data_1[toffset+2] = 0x0000;
  402552:	80a0      	strhne	r0, [r4, #4]
	leds_update_status();

/* Initialize the Notes that are Enabled as Blue */
	for (int i = 0; i < 16; i++){
			if ( (i >= 0) && (i < 4) ){
				toffset = (i)*3;
  402554:	4691      	mov	r9, r2
  402556:	e060      	b.n	40261a <leds_update_cursor+0x106>
					leds_data_1[toffset] = 0x0000;
					leds_data_1[toffset+1] = 0x0000;
					leds_data_1[toffset+2] = 0x0000;
				}
			}
			else if ( (i >= 4) && (i < 8) ){
  402558:	f1a3 0904 	sub.w	r9, r3, #4
  40255c:	f1b9 0f03 	cmp.w	r9, #3
  402560:	d81d      	bhi.n	40259e <leds_update_cursor+0x8a>
				toffset = (i % 4)*3;
  402562:	4e70      	ldr	r6, [pc, #448]	; (402724 <leds_update_cursor+0x210>)
  402564:	ea13 0906 	ands.w	r9, r3, r6
  402568:	d505      	bpl.n	402576 <leds_update_cursor+0x62>
  40256a:	f109 39ff 	add.w	r9, r9, #4294967295
  40256e:	f069 0903 	orn	r9, r9, #3
  402572:	f109 0901 	add.w	r9, r9, #1
  402576:	eb09 0949 	add.w	r9, r9, r9, lsl #1
  40257a:	fa5f f989 	uxtb.w	r9, r9
				if(leds_status[i] == 1){
  40257e:	680e      	ldr	r6, [r1, #0]
  402580:	2e01      	cmp	r6, #1
					leds_data_2[toffset] = 0x0000;
  402582:	f82b 0019 	strh.w	r0, [fp, r9, lsl #1]
					leds_data_2[toffset+1] = 0x0000;
  402586:	f109 0601 	add.w	r6, r9, #1
  40258a:	f82b 0016 	strh.w	r0, [fp, r6, lsl #1]
					leds_data_2[toffset+2] = 0xFFFF;
  40258e:	f109 0602 	add.w	r6, r9, #2
  402592:	bf0c      	ite	eq
  402594:	f82b 8016 	strheq.w	r8, [fp, r6, lsl #1]
				}
				else{
					leds_data_2[toffset] = 0x0000;
					leds_data_2[toffset+1] = 0x0000;
					leds_data_2[toffset+2] = 0x0000;
  402598:	f82b 0016 	strhne.w	r0, [fp, r6, lsl #1]
  40259c:	e03d      	b.n	40261a <leds_update_cursor+0x106>
				}
			}
			else if ( (i >= 8) && (i < 12) ){
  40259e:	f1a3 0608 	sub.w	r6, r3, #8
  4025a2:	2e03      	cmp	r6, #3
  4025a4:	d81d      	bhi.n	4025e2 <leds_update_cursor+0xce>
				toffset = (i % 8)*3;
  4025a6:	4e60      	ldr	r6, [pc, #384]	; (402728 <leds_update_cursor+0x214>)
  4025a8:	ea13 0906 	ands.w	r9, r3, r6
  4025ac:	d505      	bpl.n	4025ba <leds_update_cursor+0xa6>
  4025ae:	f109 39ff 	add.w	r9, r9, #4294967295
  4025b2:	f069 0907 	orn	r9, r9, #7
  4025b6:	f109 0901 	add.w	r9, r9, #1
  4025ba:	eb09 0949 	add.w	r9, r9, r9, lsl #1
  4025be:	fa5f f989 	uxtb.w	r9, r9
				if(leds_status[i] == 1){
  4025c2:	680e      	ldr	r6, [r1, #0]
  4025c4:	2e01      	cmp	r6, #1
					leds_data_3[toffset] = 0x0000;
  4025c6:	f82a 0019 	strh.w	r0, [sl, r9, lsl #1]
					leds_data_3[toffset+1] = 0x0000;
  4025ca:	f109 0601 	add.w	r6, r9, #1
  4025ce:	f82a 0016 	strh.w	r0, [sl, r6, lsl #1]
					leds_data_3[toffset+2] = 0xFFFF;
  4025d2:	f109 0602 	add.w	r6, r9, #2
  4025d6:	bf0c      	ite	eq
  4025d8:	f82a 8016 	strheq.w	r8, [sl, r6, lsl #1]
				}
				else{
					leds_data_3[toffset] = 0x0000;
					leds_data_3[toffset+1] = 0x0000;
					leds_data_3[toffset+2] = 0x0000;
  4025dc:	f82a 0016 	strhne.w	r0, [sl, r6, lsl #1]
  4025e0:	e01b      	b.n	40261a <leds_update_cursor+0x106>
				}
			}
			else {
				toffset = (i % 12)*3;
  4025e2:	fb8c 6903 	smull	r6, r9, ip, r3
  4025e6:	17de      	asrs	r6, r3, #31
  4025e8:	ebc6 0969 	rsb	r9, r6, r9, asr #1
  4025ec:	eb09 0949 	add.w	r9, r9, r9, lsl #1
  4025f0:	eba3 0989 	sub.w	r9, r3, r9, lsl #2
  4025f4:	eb09 0949 	add.w	r9, r9, r9, lsl #1
  4025f8:	fa5f f989 	uxtb.w	r9, r9
				if(leds_status[i] == 1){
  4025fc:	680e      	ldr	r6, [r1, #0]
  4025fe:	2e01      	cmp	r6, #1
					leds_data_4[toffset] = 0x0000;
  402600:	f82e 0019 	strh.w	r0, [lr, r9, lsl #1]
					leds_data_4[toffset+1] = 0x0000;
  402604:	f109 0601 	add.w	r6, r9, #1
  402608:	f82e 0016 	strh.w	r0, [lr, r6, lsl #1]
					leds_data_4[toffset+2] = 0xFFFF;
  40260c:	f109 0602 	add.w	r6, r9, #2
  402610:	bf0c      	ite	eq
  402612:	f82e 8016 	strheq.w	r8, [lr, r6, lsl #1]
				}
				else{
					leds_data_4[toffset] = 0x0000;
					leds_data_4[toffset+1] = 0x0000;
					leds_data_4[toffset+2] = 0x0000;
  402616:	f82e 0016 	strhne.w	r0, [lr, r6, lsl #1]

	/* update LEDs status for current page being displayed */
	leds_update_status();

/* Initialize the Notes that are Enabled as Blue */
	for (int i = 0; i < 16; i++){
  40261a:	3301      	adds	r3, #1
  40261c:	3203      	adds	r2, #3
  40261e:	b2d2      	uxtb	r2, r2
  402620:	3406      	adds	r4, #6
  402622:	3506      	adds	r5, #6
  402624:	3104      	adds	r1, #4
  402626:	2b10      	cmp	r3, #16
  402628:	d189      	bne.n	40253e <leds_update_cursor+0x2a>
  40262a:	4b40      	ldr	r3, [pc, #256]	; (40272c <leds_update_cursor+0x218>)
  40262c:	f883 9000 	strb.w	r9, [r3]
				}
			}
	}

/*check if page being displayed is the current page being output to synth before updating cursor*/
	if (curr_page == display_page){
  402630:	4b3f      	ldr	r3, [pc, #252]	; (402730 <leds_update_cursor+0x21c>)
  402632:	781a      	ldrb	r2, [r3, #0]
  402634:	4b3f      	ldr	r3, [pc, #252]	; (402734 <leds_update_cursor+0x220>)
  402636:	781b      	ldrb	r3, [r3, #0]
  402638:	429a      	cmp	r2, r3
  40263a:	d168      	bne.n	40270e <leds_update_cursor+0x1fa>
		/* Update Cursor to correct position */
			if ( (curr_step >= 0) && (curr_step < 4) ){
  40263c:	2f03      	cmp	r7, #3
  40263e:	d813      	bhi.n	402668 <leds_update_cursor+0x154>
				offset = (curr_step)* 3;
  402640:	eb07 0747 	add.w	r7, r7, r7, lsl #1
  402644:	b2fb      	uxtb	r3, r7
  402646:	4a3c      	ldr	r2, [pc, #240]	; (402738 <leds_update_cursor+0x224>)
  402648:	7013      	strb	r3, [r2, #0]
// 					leds_data_4[9] = 0xFFFF;
// 					leds_data_4[10] = 0x0FFF;
// 					leds_data_4[11] = 0x0000;
// 				}
// 				else{
					leds_data_1[offset] = 0xFFFF;
  40264a:	4a34      	ldr	r2, [pc, #208]	; (40271c <leds_update_cursor+0x208>)
  40264c:	f64f 71ff 	movw	r1, #65535	; 0xffff
  402650:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					leds_data_1[offset+1] = 0x0FFF;
  402654:	1c59      	adds	r1, r3, #1
  402656:	f640 70ff 	movw	r0, #4095	; 0xfff
  40265a:	f822 0011 	strh.w	r0, [r2, r1, lsl #1]
					leds_data_1[offset+2] = 0x0000;
  40265e:	3302      	adds	r3, #2
  402660:	2100      	movs	r1, #0
  402662:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  402666:	e052      	b.n	40270e <leds_update_cursor+0x1fa>
/*				}*/
			}
			else if ( (curr_step >= 4) && (curr_step < 8) ){
  402668:	1f3b      	subs	r3, r7, #4
  40266a:	b2db      	uxtb	r3, r3
  40266c:	2b03      	cmp	r3, #3
  40266e:	d814      	bhi.n	40269a <leds_update_cursor+0x186>
				offset = (curr_step % 4)*3;
  402670:	f007 0703 	and.w	r7, r7, #3
  402674:	eb07 0747 	add.w	r7, r7, r7, lsl #1
  402678:	4b2f      	ldr	r3, [pc, #188]	; (402738 <leds_update_cursor+0x224>)
  40267a:	701f      	strb	r7, [r3, #0]
// 					leds_data_1[9] = 0xFFFF;
// 					leds_data_1[10] = 0x0FFF;
// 					leds_data_1[11] = 0x0000;
// 				}
// 				else{
					leds_data_2[offset] = 0xFFFF;
  40267c:	4b2f      	ldr	r3, [pc, #188]	; (40273c <leds_update_cursor+0x228>)
  40267e:	f64f 72ff 	movw	r2, #65535	; 0xffff
  402682:	f823 2017 	strh.w	r2, [r3, r7, lsl #1]
					leds_data_2[offset+1] = 0x0FFF;
  402686:	1c7a      	adds	r2, r7, #1
  402688:	f640 71ff 	movw	r1, #4095	; 0xfff
  40268c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
					leds_data_2[offset+2] = 0x0000;
  402690:	3702      	adds	r7, #2
  402692:	2200      	movs	r2, #0
  402694:	f823 2017 	strh.w	r2, [r3, r7, lsl #1]
  402698:	e039      	b.n	40270e <leds_update_cursor+0x1fa>
/*				}*/
			}
			else if ( (curr_step >= 8) && (curr_step < 12) ){
  40269a:	f1a7 0308 	sub.w	r3, r7, #8
  40269e:	b2db      	uxtb	r3, r3
  4026a0:	2b03      	cmp	r3, #3
  4026a2:	d814      	bhi.n	4026ce <leds_update_cursor+0x1ba>
				offset = (curr_step % 8)*3;
  4026a4:	f007 0707 	and.w	r7, r7, #7
  4026a8:	eb07 0747 	add.w	r7, r7, r7, lsl #1
  4026ac:	4b22      	ldr	r3, [pc, #136]	; (402738 <leds_update_cursor+0x224>)
  4026ae:	701f      	strb	r7, [r3, #0]
// 					leds_data_2[9] = 0xFFFF;
// 					leds_data_2[10] = 0x0FFF;
// 					leds_data_2[11] = 0x0000;
// 				}
//				else{
					leds_data_3[offset] = 0xFFFF;
  4026b0:	4b23      	ldr	r3, [pc, #140]	; (402740 <leds_update_cursor+0x22c>)
  4026b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
  4026b6:	f823 2017 	strh.w	r2, [r3, r7, lsl #1]
					leds_data_3[offset+1] = 0x0FFF;
  4026ba:	1c7a      	adds	r2, r7, #1
  4026bc:	f640 71ff 	movw	r1, #4095	; 0xfff
  4026c0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
					leds_data_3[offset+2] = 0x0000;
  4026c4:	3702      	adds	r7, #2
  4026c6:	2200      	movs	r2, #0
  4026c8:	f823 2017 	strh.w	r2, [r3, r7, lsl #1]
  4026cc:	e01f      	b.n	40270e <leds_update_cursor+0x1fa>
/*				}*/
			}
			else if ( (curr_step >= 12) && (curr_step < 16) ){
  4026ce:	f1a7 030c 	sub.w	r3, r7, #12
  4026d2:	b2db      	uxtb	r3, r3
  4026d4:	2b03      	cmp	r3, #3
  4026d6:	d81a      	bhi.n	40270e <leds_update_cursor+0x1fa>
				offset = (curr_step % 12)*3;
  4026d8:	4b1a      	ldr	r3, [pc, #104]	; (402744 <leds_update_cursor+0x230>)
  4026da:	fba3 2307 	umull	r2, r3, r3, r7
  4026de:	08db      	lsrs	r3, r3, #3
  4026e0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  4026e4:	eba7 0783 	sub.w	r7, r7, r3, lsl #2
  4026e8:	eb07 0747 	add.w	r7, r7, r7, lsl #1
  4026ec:	b2fb      	uxtb	r3, r7
  4026ee:	4a12      	ldr	r2, [pc, #72]	; (402738 <leds_update_cursor+0x224>)
  4026f0:	7013      	strb	r3, [r2, #0]
// 					leds_data_3[9] = 0xFFFF;
// 					leds_data_3[10] = 0x0FFF;
// 					leds_data_3[11] = 0x0000;
// 				}
/*				else{*/
					leds_data_4[offset] = 0xFFFF;
  4026f2:	4a15      	ldr	r2, [pc, #84]	; (402748 <leds_update_cursor+0x234>)
  4026f4:	f64f 71ff 	movw	r1, #65535	; 0xffff
  4026f8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					leds_data_4[offset+1] = 0x0FFF;
  4026fc:	1c59      	adds	r1, r3, #1
  4026fe:	f640 70ff 	movw	r0, #4095	; 0xfff
  402702:	f822 0011 	strh.w	r0, [r2, r1, lsl #1]
					leds_data_4[offset+2] = 0x0000;
  402706:	3302      	adds	r3, #2
  402708:	2100      	movs	r1, #0
  40270a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
/*				}*/
			}
	}

	leds_update_display();
  40270e:	4b0f      	ldr	r3, [pc, #60]	; (40274c <leds_update_cursor+0x238>)
  402710:	4798      	blx	r3
  402712:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402716:	bf00      	nop
  402718:	00402285 	.word	0x00402285
  40271c:	20000664 	.word	0x20000664
  402720:	20000624 	.word	0x20000624
  402724:	80000003 	.word	0x80000003
  402728:	80000007 	.word	0x80000007
  40272c:	20008720 	.word	0x20008720
  402730:	200006fe 	.word	0x200006fe
  402734:	200006f4 	.word	0x200006f4
  402738:	20008721 	.word	0x20008721
  40273c:	2000067c 	.word	0x2000067c
  402740:	20000694 	.word	0x20000694
  402744:	aaaaaaab 	.word	0xaaaaaaab
  402748:	200006ac 	.word	0x200006ac
  40274c:	004022ad 	.word	0x004022ad
  402750:	2aaaaaab 	.word	0x2aaaaaab

00402754 <led_toggle>:

int leds_status_get(uint8_t curr_step){
	return leds_status[curr_step];
}

void led_toggle(uint8_t top_row, uint8_t bottom_row){
  402754:	b508      	push	{r3, lr}

	switch(bottom_row) {
  402756:	29ef      	cmp	r1, #239	; 0xef
  402758:	d031      	beq.n	4027be <led_toggle+0x6a>
  40275a:	d806      	bhi.n	40276a <led_toggle+0x16>
  40275c:	29bf      	cmp	r1, #191	; 0xbf
  40275e:	d03e      	beq.n	4027de <led_toggle+0x8a>
  402760:	29df      	cmp	r1, #223	; 0xdf
  402762:	d034      	beq.n	4027ce <led_toggle+0x7a>
  402764:	297f      	cmp	r1, #127	; 0x7f
  402766:	d149      	bne.n	4027fc <led_toggle+0xa8>
  402768:	e041      	b.n	4027ee <led_toggle+0x9a>
  40276a:	29fb      	cmp	r1, #251	; 0xfb
  40276c:	d017      	beq.n	40279e <led_toggle+0x4a>
  40276e:	d802      	bhi.n	402776 <led_toggle+0x22>
  402770:	29f7      	cmp	r1, #247	; 0xf7
  402772:	d01c      	beq.n	4027ae <led_toggle+0x5a>
  402774:	e042      	b.n	4027fc <led_toggle+0xa8>
  402776:	29fd      	cmp	r1, #253	; 0xfd
  402778:	d009      	beq.n	40278e <led_toggle+0x3a>
  40277a:	29fe      	cmp	r1, #254	; 0xfe
  40277c:	d13e      	bne.n	4027fc <led_toggle+0xa8>
		case 254 :
			leds_status[15] = abs(leds_status[15] - 1);
  40277e:	4a4f      	ldr	r2, [pc, #316]	; (4028bc <led_toggle+0x168>)
  402780:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
  402782:	3b01      	subs	r3, #1
  402784:	2b00      	cmp	r3, #0
  402786:	bfb8      	it	lt
  402788:	425b      	neglt	r3, r3
  40278a:	63d3      	str	r3, [r2, #60]	; 0x3c
			break;
  40278c:	e036      	b.n	4027fc <led_toggle+0xa8>
		case 253 :
			leds_status[14] = abs(leds_status[14] - 1);
  40278e:	4a4b      	ldr	r2, [pc, #300]	; (4028bc <led_toggle+0x168>)
  402790:	6b93      	ldr	r3, [r2, #56]	; 0x38
  402792:	3b01      	subs	r3, #1
  402794:	2b00      	cmp	r3, #0
  402796:	bfb8      	it	lt
  402798:	425b      	neglt	r3, r3
  40279a:	6393      	str	r3, [r2, #56]	; 0x38
			break;
  40279c:	e02e      	b.n	4027fc <led_toggle+0xa8>
		case 251 :
			leds_status[13] = abs(leds_status[13] - 1);
  40279e:	4a47      	ldr	r2, [pc, #284]	; (4028bc <led_toggle+0x168>)
  4027a0:	6b53      	ldr	r3, [r2, #52]	; 0x34
  4027a2:	3b01      	subs	r3, #1
  4027a4:	2b00      	cmp	r3, #0
  4027a6:	bfb8      	it	lt
  4027a8:	425b      	neglt	r3, r3
  4027aa:	6353      	str	r3, [r2, #52]	; 0x34
			break;
  4027ac:	e026      	b.n	4027fc <led_toggle+0xa8>
		case 247 :
			leds_status[12] = abs(leds_status[12] - 1);
  4027ae:	4a43      	ldr	r2, [pc, #268]	; (4028bc <led_toggle+0x168>)
  4027b0:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4027b2:	3b01      	subs	r3, #1
  4027b4:	2b00      	cmp	r3, #0
  4027b6:	bfb8      	it	lt
  4027b8:	425b      	neglt	r3, r3
  4027ba:	6313      	str	r3, [r2, #48]	; 0x30
			break;
  4027bc:	e01e      	b.n	4027fc <led_toggle+0xa8>
		case 239 :
			leds_status[11] = abs(leds_status[11] - 1);
  4027be:	4a3f      	ldr	r2, [pc, #252]	; (4028bc <led_toggle+0x168>)
  4027c0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
  4027c2:	3b01      	subs	r3, #1
  4027c4:	2b00      	cmp	r3, #0
  4027c6:	bfb8      	it	lt
  4027c8:	425b      	neglt	r3, r3
  4027ca:	62d3      	str	r3, [r2, #44]	; 0x2c
			break;
  4027cc:	e016      	b.n	4027fc <led_toggle+0xa8>
		case 223 :
			leds_status[10] = abs(leds_status[10] - 1);
  4027ce:	4a3b      	ldr	r2, [pc, #236]	; (4028bc <led_toggle+0x168>)
  4027d0:	6a93      	ldr	r3, [r2, #40]	; 0x28
  4027d2:	3b01      	subs	r3, #1
  4027d4:	2b00      	cmp	r3, #0
  4027d6:	bfb8      	it	lt
  4027d8:	425b      	neglt	r3, r3
  4027da:	6293      	str	r3, [r2, #40]	; 0x28
			break;
  4027dc:	e00e      	b.n	4027fc <led_toggle+0xa8>
		case 191 :
			leds_status[9] = abs(leds_status[9] - 1);
  4027de:	4a37      	ldr	r2, [pc, #220]	; (4028bc <led_toggle+0x168>)
  4027e0:	6a53      	ldr	r3, [r2, #36]	; 0x24
  4027e2:	3b01      	subs	r3, #1
  4027e4:	2b00      	cmp	r3, #0
  4027e6:	bfb8      	it	lt
  4027e8:	425b      	neglt	r3, r3
  4027ea:	6253      	str	r3, [r2, #36]	; 0x24
			break;
  4027ec:	e006      	b.n	4027fc <led_toggle+0xa8>
		case 127 :
			leds_status[8] = abs(leds_status[8] - 1);
  4027ee:	4a33      	ldr	r2, [pc, #204]	; (4028bc <led_toggle+0x168>)
  4027f0:	6a13      	ldr	r3, [r2, #32]
  4027f2:	3b01      	subs	r3, #1
  4027f4:	2b00      	cmp	r3, #0
  4027f6:	bfb8      	it	lt
  4027f8:	425b      	neglt	r3, r3
  4027fa:	6213      	str	r3, [r2, #32]
			break;
		default :
			break;
	}

	switch(top_row) {
  4027fc:	28ef      	cmp	r0, #239	; 0xef
  4027fe:	d031      	beq.n	402864 <led_toggle+0x110>
  402800:	d806      	bhi.n	402810 <led_toggle+0xbc>
  402802:	28bf      	cmp	r0, #191	; 0xbf
  402804:	d03e      	beq.n	402884 <led_toggle+0x130>
  402806:	28df      	cmp	r0, #223	; 0xdf
  402808:	d034      	beq.n	402874 <led_toggle+0x120>
  40280a:	287f      	cmp	r0, #127	; 0x7f
  40280c:	d149      	bne.n	4028a2 <led_toggle+0x14e>
  40280e:	e041      	b.n	402894 <led_toggle+0x140>
  402810:	28fb      	cmp	r0, #251	; 0xfb
  402812:	d017      	beq.n	402844 <led_toggle+0xf0>
  402814:	d802      	bhi.n	40281c <led_toggle+0xc8>
  402816:	28f7      	cmp	r0, #247	; 0xf7
  402818:	d01c      	beq.n	402854 <led_toggle+0x100>
  40281a:	e042      	b.n	4028a2 <led_toggle+0x14e>
  40281c:	28fd      	cmp	r0, #253	; 0xfd
  40281e:	d009      	beq.n	402834 <led_toggle+0xe0>
  402820:	28fe      	cmp	r0, #254	; 0xfe
  402822:	d13e      	bne.n	4028a2 <led_toggle+0x14e>
		case 254 :
			leds_status[7] = abs(leds_status[7] - 1);
  402824:	4a25      	ldr	r2, [pc, #148]	; (4028bc <led_toggle+0x168>)
  402826:	69d3      	ldr	r3, [r2, #28]
  402828:	3b01      	subs	r3, #1
  40282a:	2b00      	cmp	r3, #0
  40282c:	bfb8      	it	lt
  40282e:	425b      	neglt	r3, r3
  402830:	61d3      	str	r3, [r2, #28]
			break;
  402832:	e036      	b.n	4028a2 <led_toggle+0x14e>
		case 253 :
			leds_status[6] = abs(leds_status[6] - 1);
  402834:	4a21      	ldr	r2, [pc, #132]	; (4028bc <led_toggle+0x168>)
  402836:	6993      	ldr	r3, [r2, #24]
  402838:	3b01      	subs	r3, #1
  40283a:	2b00      	cmp	r3, #0
  40283c:	bfb8      	it	lt
  40283e:	425b      	neglt	r3, r3
  402840:	6193      	str	r3, [r2, #24]
			break;
  402842:	e02e      	b.n	4028a2 <led_toggle+0x14e>
		case 251 :
			leds_status[5] = abs(leds_status[5] - 1);
  402844:	4a1d      	ldr	r2, [pc, #116]	; (4028bc <led_toggle+0x168>)
  402846:	6953      	ldr	r3, [r2, #20]
  402848:	3b01      	subs	r3, #1
  40284a:	2b00      	cmp	r3, #0
  40284c:	bfb8      	it	lt
  40284e:	425b      	neglt	r3, r3
  402850:	6153      	str	r3, [r2, #20]
			break;
  402852:	e026      	b.n	4028a2 <led_toggle+0x14e>
		case 247 :
			leds_status[4] = abs(leds_status[4] - 1);
  402854:	4a19      	ldr	r2, [pc, #100]	; (4028bc <led_toggle+0x168>)
  402856:	6913      	ldr	r3, [r2, #16]
  402858:	3b01      	subs	r3, #1
  40285a:	2b00      	cmp	r3, #0
  40285c:	bfb8      	it	lt
  40285e:	425b      	neglt	r3, r3
  402860:	6113      	str	r3, [r2, #16]
			break;
  402862:	e01e      	b.n	4028a2 <led_toggle+0x14e>
		case 239 :
			leds_status[3] = abs(leds_status[3] - 1);
  402864:	4a15      	ldr	r2, [pc, #84]	; (4028bc <led_toggle+0x168>)
  402866:	68d3      	ldr	r3, [r2, #12]
  402868:	3b01      	subs	r3, #1
  40286a:	2b00      	cmp	r3, #0
  40286c:	bfb8      	it	lt
  40286e:	425b      	neglt	r3, r3
  402870:	60d3      	str	r3, [r2, #12]
			break;
  402872:	e016      	b.n	4028a2 <led_toggle+0x14e>
		case 223 :
			leds_status[2] = abs(leds_status[2] - 1);
  402874:	4a11      	ldr	r2, [pc, #68]	; (4028bc <led_toggle+0x168>)
  402876:	6893      	ldr	r3, [r2, #8]
  402878:	3b01      	subs	r3, #1
  40287a:	2b00      	cmp	r3, #0
  40287c:	bfb8      	it	lt
  40287e:	425b      	neglt	r3, r3
  402880:	6093      	str	r3, [r2, #8]
			break;
  402882:	e00e      	b.n	4028a2 <led_toggle+0x14e>
		case 191 :
			leds_status[1] = abs(leds_status[1] - 1);
  402884:	4a0d      	ldr	r2, [pc, #52]	; (4028bc <led_toggle+0x168>)
  402886:	6853      	ldr	r3, [r2, #4]
  402888:	3b01      	subs	r3, #1
  40288a:	2b00      	cmp	r3, #0
  40288c:	bfb8      	it	lt
  40288e:	425b      	neglt	r3, r3
  402890:	6053      	str	r3, [r2, #4]
			break;
  402892:	e006      	b.n	4028a2 <led_toggle+0x14e>
		case 127 :
			leds_status[0] = abs(leds_status[0] - 1);
  402894:	4a09      	ldr	r2, [pc, #36]	; (4028bc <led_toggle+0x168>)
  402896:	6813      	ldr	r3, [r2, #0]
  402898:	3b01      	subs	r3, #1
  40289a:	2b00      	cmp	r3, #0
  40289c:	bfb8      	it	lt
  40289e:	425b      	neglt	r3, r3
  4028a0:	6013      	str	r3, [r2, #0]
		default : 
			break;
	}

	/* match note status to display status if changed*/
	notes_status_set(display_page, leds_status);
  4028a2:	4906      	ldr	r1, [pc, #24]	; (4028bc <led_toggle+0x168>)
  4028a4:	4b06      	ldr	r3, [pc, #24]	; (4028c0 <led_toggle+0x16c>)
  4028a6:	7818      	ldrb	r0, [r3, #0]
  4028a8:	4b06      	ldr	r3, [pc, #24]	; (4028c4 <led_toggle+0x170>)
  4028aa:	4798      	blx	r3
	
	SPI_led_init();
  4028ac:	4b06      	ldr	r3, [pc, #24]	; (4028c8 <led_toggle+0x174>)
  4028ae:	4798      	blx	r3
	leds_update_cursor(curr_step);
  4028b0:	4b06      	ldr	r3, [pc, #24]	; (4028cc <led_toggle+0x178>)
  4028b2:	7818      	ldrb	r0, [r3, #0]
  4028b4:	4b06      	ldr	r3, [pc, #24]	; (4028d0 <led_toggle+0x17c>)
  4028b6:	4798      	blx	r3
  4028b8:	bd08      	pop	{r3, pc}
  4028ba:	bf00      	nop
  4028bc:	20000624 	.word	0x20000624
  4028c0:	200006f4 	.word	0x200006f4
  4028c4:	0040396d 	.word	0x0040396d
  4028c8:	00403695 	.word	0x00403695
  4028cc:	200006ec 	.word	0x200006ec
  4028d0:	00402515 	.word	0x00402515

004028d4 <res_to_int>:


}

uint8_t res_to_int(uint8_t res){
	if (res == 0){
  4028d4:	b1b0      	cbz	r0, 402904 <res_to_int+0x30>
		return 1;
	}
	else if (res == 1){
  4028d6:	2801      	cmp	r0, #1
  4028d8:	d016      	beq.n	402908 <res_to_int+0x34>
		return 2;
	}
	else if (res == 2){
  4028da:	2802      	cmp	r0, #2
  4028dc:	d016      	beq.n	40290c <res_to_int+0x38>
		return 4;
	}
	else if (res == 3){
  4028de:	2803      	cmp	r0, #3
  4028e0:	d016      	beq.n	402910 <res_to_int+0x3c>
		return 6;
	}
	else if (res == 4){
  4028e2:	2804      	cmp	r0, #4
  4028e4:	d016      	beq.n	402914 <res_to_int+0x40>
		return 8;
	}
	else if (res == 5){
  4028e6:	2805      	cmp	r0, #5
  4028e8:	d016      	beq.n	402918 <res_to_int+0x44>
		return 12;
	}
	else if (res == 6){
  4028ea:	2806      	cmp	r0, #6
  4028ec:	d016      	beq.n	40291c <res_to_int+0x48>
		return 16;
	}
	else if (res == 7){
  4028ee:	2807      	cmp	r0, #7
  4028f0:	d016      	beq.n	402920 <res_to_int+0x4c>
		return 24;
	}
	else if (res == 8){
  4028f2:	2808      	cmp	r0, #8
  4028f4:	d016      	beq.n	402924 <res_to_int+0x50>
		return 32;
	}
	else if(res == 9) {
  4028f6:	2809      	cmp	r0, #9
  4028f8:	d016      	beq.n	402928 <res_to_int+0x54>
	else if(res == 10) {
		return 64;
	}

	//default
	return 1;
  4028fa:	280a      	cmp	r0, #10
  4028fc:	bf0c      	ite	eq
  4028fe:	2040      	moveq	r0, #64	; 0x40
  402900:	2001      	movne	r0, #1
  402902:	4770      	bx	lr

}

uint8_t res_to_int(uint8_t res){
	if (res == 0){
		return 1;
  402904:	2001      	movs	r0, #1
  402906:	4770      	bx	lr
	}
	else if (res == 1){
		return 2;
  402908:	2002      	movs	r0, #2
  40290a:	4770      	bx	lr
	}
	else if (res == 2){
		return 4;
  40290c:	2004      	movs	r0, #4
  40290e:	4770      	bx	lr
	}
	else if (res == 3){
		return 6;
  402910:	2006      	movs	r0, #6
  402912:	4770      	bx	lr
	}
	else if (res == 4){
		return 8;
  402914:	2008      	movs	r0, #8
  402916:	4770      	bx	lr
	}
	else if (res == 5){
		return 12;
  402918:	200c      	movs	r0, #12
  40291a:	4770      	bx	lr
	}
	else if (res == 6){
		return 16;
  40291c:	2010      	movs	r0, #16
  40291e:	4770      	bx	lr
	}
	else if (res == 7){
		return 24;
  402920:	2018      	movs	r0, #24
  402922:	4770      	bx	lr
	}
	else if (res == 8){
		return 32;
  402924:	2020      	movs	r0, #32
  402926:	4770      	bx	lr
	}
	else if(res == 9) {
		return 48;
  402928:	2030      	movs	r0, #48	; 0x30
		return 64;
	}

	//default
	return 1;
}
  40292a:	4770      	bx	lr

0040292c <res_inc>:

void res_inc(){
	if (resolution < 10){
  40292c:	4b03      	ldr	r3, [pc, #12]	; (40293c <res_inc+0x10>)
  40292e:	681b      	ldr	r3, [r3, #0]
  402930:	2b09      	cmp	r3, #9
  402932:	dc02      	bgt.n	40293a <res_inc+0xe>
		resolution++;
  402934:	3301      	adds	r3, #1
  402936:	4a01      	ldr	r2, [pc, #4]	; (40293c <res_inc+0x10>)
  402938:	6013      	str	r3, [r2, #0]
  40293a:	4770      	bx	lr
  40293c:	200006d8 	.word	0x200006d8

00402940 <res_dec>:
	}
}

void res_dec(){
	if (resolution > 0){
  402940:	4b03      	ldr	r3, [pc, #12]	; (402950 <res_dec+0x10>)
  402942:	681b      	ldr	r3, [r3, #0]
  402944:	2b00      	cmp	r3, #0
  402946:	dd02      	ble.n	40294e <res_dec+0xe>
		resolution--;
  402948:	3b01      	subs	r3, #1
  40294a:	4a01      	ldr	r2, [pc, #4]	; (402950 <res_dec+0x10>)
  40294c:	6013      	str	r3, [r2, #0]
  40294e:	4770      	bx	lr
  402950:	200006d8 	.word	0x200006d8

00402954 <bpm_inc>:
	}
}

 void bpm_inc(){
	if ( (bpm + bpm_adjust) <= 999){
  402954:	4b05      	ldr	r3, [pc, #20]	; (40296c <bpm_inc+0x18>)
  402956:	881a      	ldrh	r2, [r3, #0]
  402958:	4b05      	ldr	r3, [pc, #20]	; (402970 <bpm_inc+0x1c>)
  40295a:	781b      	ldrb	r3, [r3, #0]
  40295c:	18d1      	adds	r1, r2, r3
  40295e:	f5b1 7f7a 	cmp.w	r1, #1000	; 0x3e8
  402962:	da01      	bge.n	402968 <bpm_inc+0x14>
		bpm = bpm + bpm_adjust;
  402964:	4a01      	ldr	r2, [pc, #4]	; (40296c <bpm_inc+0x18>)
  402966:	8011      	strh	r1, [r2, #0]
  402968:	4770      	bx	lr
  40296a:	bf00      	nop
  40296c:	20000706 	.word	0x20000706
  402970:	20000702 	.word	0x20000702

00402974 <bpm_dec>:
	}
}

 void bpm_dec(){
	if ( (bpm - bpm_adjust) >= 20){
  402974:	4b04      	ldr	r3, [pc, #16]	; (402988 <bpm_dec+0x14>)
  402976:	881b      	ldrh	r3, [r3, #0]
  402978:	4a04      	ldr	r2, [pc, #16]	; (40298c <bpm_dec+0x18>)
  40297a:	7812      	ldrb	r2, [r2, #0]
  40297c:	1a99      	subs	r1, r3, r2
  40297e:	2913      	cmp	r1, #19
  402980:	dd01      	ble.n	402986 <bpm_dec+0x12>
		bpm = bpm - bpm_adjust;
  402982:	4a01      	ldr	r2, [pc, #4]	; (402988 <bpm_dec+0x14>)
  402984:	8011      	strh	r1, [r2, #0]
  402986:	4770      	bx	lr
  402988:	20000706 	.word	0x20000706
  40298c:	20000702 	.word	0x20000702

00402990 <bpm_toggle>:
	}
}

void bpm_toggle(){
	if (bpm_adjust == 1){
  402990:	4b0c      	ldr	r3, [pc, #48]	; (4029c4 <bpm_toggle+0x34>)
  402992:	781b      	ldrb	r3, [r3, #0]
  402994:	2b01      	cmp	r3, #1
  402996:	d103      	bne.n	4029a0 <bpm_toggle+0x10>
		bpm_adjust = 5;
  402998:	2205      	movs	r2, #5
  40299a:	4b0a      	ldr	r3, [pc, #40]	; (4029c4 <bpm_toggle+0x34>)
  40299c:	701a      	strb	r2, [r3, #0]
  40299e:	4770      	bx	lr
	}
	else if (bpm_adjust == 5){
  4029a0:	2b05      	cmp	r3, #5
  4029a2:	d103      	bne.n	4029ac <bpm_toggle+0x1c>
		bpm_adjust = 10;
  4029a4:	220a      	movs	r2, #10
  4029a6:	4b07      	ldr	r3, [pc, #28]	; (4029c4 <bpm_toggle+0x34>)
  4029a8:	701a      	strb	r2, [r3, #0]
  4029aa:	4770      	bx	lr
	}
	else if (bpm_adjust == 10){
  4029ac:	2b0a      	cmp	r3, #10
  4029ae:	d103      	bne.n	4029b8 <bpm_toggle+0x28>
		bpm_adjust = 20;
  4029b0:	2214      	movs	r2, #20
  4029b2:	4b04      	ldr	r3, [pc, #16]	; (4029c4 <bpm_toggle+0x34>)
  4029b4:	701a      	strb	r2, [r3, #0]
  4029b6:	4770      	bx	lr
	}
	else if (bpm_adjust == 20){
  4029b8:	2b14      	cmp	r3, #20
  4029ba:	d102      	bne.n	4029c2 <bpm_toggle+0x32>
		bpm_adjust = 1;
  4029bc:	2201      	movs	r2, #1
  4029be:	4b01      	ldr	r3, [pc, #4]	; (4029c4 <bpm_toggle+0x34>)
  4029c0:	701a      	strb	r2, [r3, #0]
  4029c2:	4770      	bx	lr
  4029c4:	20000702 	.word	0x20000702

004029c8 <display_page_inc>:
	}
}

 void display_page_inc(){
	if (display_page < 15){
  4029c8:	4b03      	ldr	r3, [pc, #12]	; (4029d8 <display_page_inc+0x10>)
  4029ca:	781b      	ldrb	r3, [r3, #0]
  4029cc:	2b0e      	cmp	r3, #14
  4029ce:	d802      	bhi.n	4029d6 <display_page_inc+0xe>
		display_page++;
  4029d0:	3301      	adds	r3, #1
  4029d2:	4a01      	ldr	r2, [pc, #4]	; (4029d8 <display_page_inc+0x10>)
  4029d4:	7013      	strb	r3, [r2, #0]
  4029d6:	4770      	bx	lr
  4029d8:	200006f4 	.word	0x200006f4

004029dc <display_page_dec>:
	}
}

 void display_page_dec(){
	if (display_page > 0){
  4029dc:	4b03      	ldr	r3, [pc, #12]	; (4029ec <display_page_dec+0x10>)
  4029de:	781b      	ldrb	r3, [r3, #0]
  4029e0:	b113      	cbz	r3, 4029e8 <display_page_dec+0xc>
		display_page--;
  4029e2:	3b01      	subs	r3, #1
  4029e4:	4a01      	ldr	r2, [pc, #4]	; (4029ec <display_page_dec+0x10>)
  4029e6:	7013      	strb	r3, [r2, #0]
  4029e8:	4770      	bx	lr
  4029ea:	bf00      	nop
  4029ec:	200006f4 	.word	0x200006f4

004029f0 <pattern_inc>:
	}
}

 void pattern_inc(){
	  if (curr_pattern < 15){
  4029f0:	4b03      	ldr	r3, [pc, #12]	; (402a00 <pattern_inc+0x10>)
  4029f2:	781b      	ldrb	r3, [r3, #0]
  4029f4:	2b0e      	cmp	r3, #14
  4029f6:	d802      	bhi.n	4029fe <pattern_inc+0xe>
		  curr_pattern++;
  4029f8:	3301      	adds	r3, #1
  4029fa:	4a01      	ldr	r2, [pc, #4]	; (402a00 <pattern_inc+0x10>)
  4029fc:	7013      	strb	r3, [r2, #0]
  4029fe:	4770      	bx	lr
  402a00:	200006d0 	.word	0x200006d0

00402a04 <pattern_dec>:
	  }
 }

 void pattern_dec(){
	  if (curr_pattern > 0){
  402a04:	4b03      	ldr	r3, [pc, #12]	; (402a14 <pattern_dec+0x10>)
  402a06:	781b      	ldrb	r3, [r3, #0]
  402a08:	b113      	cbz	r3, 402a10 <pattern_dec+0xc>
		  curr_pattern--;
  402a0a:	3b01      	subs	r3, #1
  402a0c:	4a01      	ldr	r2, [pc, #4]	; (402a14 <pattern_dec+0x10>)
  402a0e:	7013      	strb	r3, [r2, #0]
  402a10:	4770      	bx	lr
  402a12:	bf00      	nop
  402a14:	200006d0 	.word	0x200006d0

00402a18 <pattern_up>:
	  }
 }

void pattern_up(uint8_t channel){
	if (curr_pattern_ch[channel] < 15){
  402a18:	4b03      	ldr	r3, [pc, #12]	; (402a28 <pattern_up+0x10>)
  402a1a:	5c1b      	ldrb	r3, [r3, r0]
  402a1c:	2b0e      	cmp	r3, #14
  402a1e:	d802      	bhi.n	402a26 <pattern_up+0xe>
		curr_pattern_ch[channel]++;
  402a20:	3301      	adds	r3, #1
  402a22:	4a01      	ldr	r2, [pc, #4]	; (402a28 <pattern_up+0x10>)
  402a24:	5413      	strb	r3, [r2, r0]
  402a26:	4770      	bx	lr
  402a28:	200006e8 	.word	0x200006e8

00402a2c <pattern_down>:
	}
}

void pattern_down(uint8_t channel){
	  if (curr_pattern_ch[channel] > 0){
  402a2c:	4b03      	ldr	r3, [pc, #12]	; (402a3c <pattern_down+0x10>)
  402a2e:	5c1b      	ldrb	r3, [r3, r0]
  402a30:	b113      	cbz	r3, 402a38 <pattern_down+0xc>
		  curr_pattern_ch[channel]--;
  402a32:	3b01      	subs	r3, #1
  402a34:	4a01      	ldr	r2, [pc, #4]	; (402a3c <pattern_down+0x10>)
  402a36:	5413      	strb	r3, [r2, r0]
  402a38:	4770      	bx	lr
  402a3a:	bf00      	nop
  402a3c:	200006e8 	.word	0x200006e8

00402a40 <page_loop_inc>:
	  }
}

void page_loop_inc(){
	if (patterns_loop[curr_pattern] < 15){
  402a40:	4b04      	ldr	r3, [pc, #16]	; (402a54 <page_loop_inc+0x14>)
  402a42:	781a      	ldrb	r2, [r3, #0]
  402a44:	4b04      	ldr	r3, [pc, #16]	; (402a58 <page_loop_inc+0x18>)
  402a46:	5c9b      	ldrb	r3, [r3, r2]
  402a48:	2b0e      	cmp	r3, #14
  402a4a:	d802      	bhi.n	402a52 <page_loop_inc+0x12>
		patterns_loop[curr_pattern]++;
  402a4c:	3301      	adds	r3, #1
  402a4e:	4902      	ldr	r1, [pc, #8]	; (402a58 <page_loop_inc+0x18>)
  402a50:	548b      	strb	r3, [r1, r2]
  402a52:	4770      	bx	lr
  402a54:	200006d0 	.word	0x200006d0
  402a58:	20008710 	.word	0x20008710

00402a5c <page_loop_dec>:
	}
}

void page_loop_dec(){
	if (patterns_loop[curr_pattern] > 0){
  402a5c:	4b04      	ldr	r3, [pc, #16]	; (402a70 <page_loop_dec+0x14>)
  402a5e:	781a      	ldrb	r2, [r3, #0]
  402a60:	4b04      	ldr	r3, [pc, #16]	; (402a74 <page_loop_dec+0x18>)
  402a62:	5c9b      	ldrb	r3, [r3, r2]
  402a64:	b113      	cbz	r3, 402a6c <page_loop_dec+0x10>
		patterns_loop[curr_pattern]--;
  402a66:	3b01      	subs	r3, #1
  402a68:	4902      	ldr	r1, [pc, #8]	; (402a74 <page_loop_dec+0x18>)
  402a6a:	548b      	strb	r3, [r1, r2]
  402a6c:	4770      	bx	lr
  402a6e:	bf00      	nop
  402a70:	200006d0 	.word	0x200006d0
  402a74:	20008710 	.word	0x20008710

00402a78 <control_direction>:
 #include "displays.h"
 #include "notes.h"
 #include "dac.h"


 void control_direction(uint32_t A, uint32_t B, uint8_t aux_control){
  402a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	//read Encoder input A
	bool A_in = REG_PIOA_PDSR & A;
  402a7a:	4b88      	ldr	r3, [pc, #544]	; (402c9c <control_direction+0x224>)
  402a7c:	681f      	ldr	r7, [r3, #0]
	//read Encoder input B
	bool B_in = REG_PIOA_PDSR & B;
  402a7e:	681d      	ldr	r5, [r3, #0]
	
	A_seq = A_seq << 1;
	A_seq |= A_in;
	
	B_seq = B_seq << 1;
  402a80:	4c87      	ldr	r4, [pc, #540]	; (402ca0 <control_direction+0x228>)
	B_seq |= B_in;
  402a82:	7823      	ldrb	r3, [r4, #0]
  402a84:	420d      	tst	r5, r1
  402a86:	bf14      	ite	ne
  402a88:	2101      	movne	r1, #1
  402a8a:	2100      	moveq	r1, #0
  402a8c:	ea41 0143 	orr.w	r1, r1, r3, lsl #1
	//read Encoder input A
	bool A_in = REG_PIOA_PDSR & A;
	//read Encoder input B
	bool B_in = REG_PIOA_PDSR & B;
	
	A_seq = A_seq << 1;
  402a90:	4d84      	ldr	r5, [pc, #528]	; (402ca4 <control_direction+0x22c>)
	A_seq |= A_in;
	
	B_seq = B_seq << 1;
	B_seq |= B_in;
	
	A_seq &= 0b00001111;
  402a92:	782e      	ldrb	r6, [r5, #0]
  402a94:	4207      	tst	r7, r0
  402a96:	bf14      	ite	ne
  402a98:	2301      	movne	r3, #1
  402a9a:	2300      	moveq	r3, #0
  402a9c:	ea43 0346 	orr.w	r3, r3, r6, lsl #1
  402aa0:	f003 030f 	and.w	r3, r3, #15
  402aa4:	702b      	strb	r3, [r5, #0]
	B_seq &= 0b00001111;
  402aa6:	f001 010f 	and.w	r1, r1, #15
  402aaa:	7021      	strb	r1, [r4, #0]


	//return true if turned right
	if ((A_seq == 0b00001001) && (B_seq == 0b00000011)){
  402aac:	2b09      	cmp	r3, #9
  402aae:	f040 808a 	bne.w	402bc6 <control_direction+0x14e>
  402ab2:	2903      	cmp	r1, #3
  402ab4:	f040 815a 	bne.w	402d6c <control_direction+0x2f4>
		if (aux_control == 0){
  402ab8:	b94a      	cbnz	r2, 402ace <control_direction+0x56>
			bpm_inc();
  402aba:	4b7b      	ldr	r3, [pc, #492]	; (402ca8 <control_direction+0x230>)
  402abc:	4798      	blx	r3
			update_timers(bpm);
  402abe:	4c7b      	ldr	r4, [pc, #492]	; (402cac <control_direction+0x234>)
  402ac0:	8820      	ldrh	r0, [r4, #0]
  402ac2:	4b7b      	ldr	r3, [pc, #492]	; (402cb0 <control_direction+0x238>)
  402ac4:	4798      	blx	r3
			bpm_display(bpm);
  402ac6:	8820      	ldrh	r0, [r4, #0]
  402ac8:	4b7a      	ldr	r3, [pc, #488]	; (402cb4 <control_direction+0x23c>)
  402aca:	4798      	blx	r3
  402acc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		}
		else if (aux_control == 1){
  402ace:	2a01      	cmp	r2, #1
  402ad0:	d10c      	bne.n	402aec <control_direction+0x74>
			res_inc();
  402ad2:	4b79      	ldr	r3, [pc, #484]	; (402cb8 <control_direction+0x240>)
  402ad4:	4798      	blx	r3
			update_timers(bpm);
  402ad6:	4b75      	ldr	r3, [pc, #468]	; (402cac <control_direction+0x234>)
  402ad8:	8818      	ldrh	r0, [r3, #0]
  402ada:	4b75      	ldr	r3, [pc, #468]	; (402cb0 <control_direction+0x238>)
  402adc:	4798      	blx	r3
			res_display(res_to_int(resolution));
  402ade:	4b77      	ldr	r3, [pc, #476]	; (402cbc <control_direction+0x244>)
  402ae0:	7818      	ldrb	r0, [r3, #0]
  402ae2:	4b77      	ldr	r3, [pc, #476]	; (402cc0 <control_direction+0x248>)
  402ae4:	4798      	blx	r3
  402ae6:	4b77      	ldr	r3, [pc, #476]	; (402cc4 <control_direction+0x24c>)
  402ae8:	4798      	blx	r3
  402aea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		}
		else if (aux_control == 2){
  402aec:	2a02      	cmp	r2, #2
  402aee:	d119      	bne.n	402b24 <control_direction+0xac>
			if (page_or_loop == 0){
  402af0:	4b75      	ldr	r3, [pc, #468]	; (402cc8 <control_direction+0x250>)
  402af2:	781b      	ldrb	r3, [r3, #0]
  402af4:	b953      	cbnz	r3, 402b0c <control_direction+0x94>
				display_page_inc();
  402af6:	4b75      	ldr	r3, [pc, #468]	; (402ccc <control_direction+0x254>)
  402af8:	4798      	blx	r3
				leds_update_cursor(curr_step);
  402afa:	4b75      	ldr	r3, [pc, #468]	; (402cd0 <control_direction+0x258>)
  402afc:	7818      	ldrb	r0, [r3, #0]
  402afe:	4b75      	ldr	r3, [pc, #468]	; (402cd4 <control_direction+0x25c>)
  402b00:	4798      	blx	r3
				page_display(display_page);
  402b02:	4b75      	ldr	r3, [pc, #468]	; (402cd8 <control_direction+0x260>)
  402b04:	7818      	ldrb	r0, [r3, #0]
  402b06:	4b75      	ldr	r3, [pc, #468]	; (402cdc <control_direction+0x264>)
  402b08:	4798      	blx	r3
  402b0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			}
			else if (page_or_loop == 1){
  402b0c:	2b01      	cmp	r3, #1
  402b0e:	f040 812d 	bne.w	402d6c <control_direction+0x2f4>
				page_loop_inc();
  402b12:	4b73      	ldr	r3, [pc, #460]	; (402ce0 <control_direction+0x268>)
  402b14:	4798      	blx	r3
				loop_display(patterns_loop[curr_pattern]);
  402b16:	4b73      	ldr	r3, [pc, #460]	; (402ce4 <control_direction+0x26c>)
  402b18:	781b      	ldrb	r3, [r3, #0]
  402b1a:	4a73      	ldr	r2, [pc, #460]	; (402ce8 <control_direction+0x270>)
  402b1c:	5cd0      	ldrb	r0, [r2, r3]
  402b1e:	4b73      	ldr	r3, [pc, #460]	; (402cec <control_direction+0x274>)
  402b20:	4798      	blx	r3
  402b22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			}
		}
		else if (aux_control == 3){
  402b24:	2a03      	cmp	r2, #3
  402b26:	d121      	bne.n	402b6c <control_direction+0xf4>
			if(pattern_clr == 1) {
  402b28:	4b71      	ldr	r3, [pc, #452]	; (402cf0 <control_direction+0x278>)
  402b2a:	781b      	ldrb	r3, [r3, #0]
  402b2c:	2b01      	cmp	r3, #1
  402b2e:	d107      	bne.n	402b40 <control_direction+0xc8>
				clr_yes = 0;
  402b30:	2100      	movs	r1, #0
  402b32:	4b70      	ldr	r3, [pc, #448]	; (402cf4 <control_direction+0x27c>)
  402b34:	7019      	strb	r1, [r3, #0]
				if(clr_yes) {
					clr_pattern_display(curr_pattern, 1);
				}
				else {
					clr_pattern_display(curr_pattern, 0);
  402b36:	4b6b      	ldr	r3, [pc, #428]	; (402ce4 <control_direction+0x26c>)
  402b38:	7818      	ldrb	r0, [r3, #0]
  402b3a:	4b6f      	ldr	r3, [pc, #444]	; (402cf8 <control_direction+0x280>)
  402b3c:	4798      	blx	r3
  402b3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				}
			}
			else {
				pattern_inc();
  402b40:	4b6e      	ldr	r3, [pc, #440]	; (402cfc <control_direction+0x284>)
  402b42:	4798      	blx	r3
				leds_update_cursor(curr_step);
  402b44:	4b62      	ldr	r3, [pc, #392]	; (402cd0 <control_direction+0x258>)
  402b46:	7818      	ldrb	r0, [r3, #0]
  402b48:	4b62      	ldr	r3, [pc, #392]	; (402cd4 <control_direction+0x25c>)
  402b4a:	4798      	blx	r3
				pattern_display(curr_pattern);
  402b4c:	4b65      	ldr	r3, [pc, #404]	; (402ce4 <control_direction+0x26c>)
  402b4e:	7818      	ldrb	r0, [r3, #0]
  402b50:	4b6b      	ldr	r3, [pc, #428]	; (402d00 <control_direction+0x288>)
  402b52:	4798      	blx	r3
				if(page_or_loop == 1) {
  402b54:	4b5c      	ldr	r3, [pc, #368]	; (402cc8 <control_direction+0x250>)
  402b56:	781b      	ldrb	r3, [r3, #0]
  402b58:	2b01      	cmp	r3, #1
  402b5a:	f040 8107 	bne.w	402d6c <control_direction+0x2f4>
					loop_display(patterns_loop[curr_pattern]);
  402b5e:	4b61      	ldr	r3, [pc, #388]	; (402ce4 <control_direction+0x26c>)
  402b60:	781b      	ldrb	r3, [r3, #0]
  402b62:	4a61      	ldr	r2, [pc, #388]	; (402ce8 <control_direction+0x270>)
  402b64:	5cd0      	ldrb	r0, [r2, r3]
  402b66:	4b61      	ldr	r3, [pc, #388]	; (402cec <control_direction+0x274>)
  402b68:	4798      	blx	r3
  402b6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				}
			}
		}
		else if (aux_control == 4){
  402b6c:	2a04      	cmp	r2, #4
  402b6e:	d108      	bne.n	402b82 <control_direction+0x10a>
			pattern_up(CHANNEL_1);
  402b70:	2000      	movs	r0, #0
  402b72:	4b64      	ldr	r3, [pc, #400]	; (402d04 <control_direction+0x28c>)
  402b74:	4798      	blx	r3
			output_display_1(curr_pattern_ch[0], curr_pattern_ch[1]);
  402b76:	4b64      	ldr	r3, [pc, #400]	; (402d08 <control_direction+0x290>)
  402b78:	7859      	ldrb	r1, [r3, #1]
  402b7a:	7818      	ldrb	r0, [r3, #0]
  402b7c:	4b63      	ldr	r3, [pc, #396]	; (402d0c <control_direction+0x294>)
  402b7e:	4798      	blx	r3
  402b80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		}
		else if (aux_control == 5){
  402b82:	2a05      	cmp	r2, #5
  402b84:	d108      	bne.n	402b98 <control_direction+0x120>
			pattern_up(CHANNEL_2);
  402b86:	2001      	movs	r0, #1
  402b88:	4b5e      	ldr	r3, [pc, #376]	; (402d04 <control_direction+0x28c>)
  402b8a:	4798      	blx	r3
			output_display_1(curr_pattern_ch[0], curr_pattern_ch[1]);
  402b8c:	4b5e      	ldr	r3, [pc, #376]	; (402d08 <control_direction+0x290>)
  402b8e:	7859      	ldrb	r1, [r3, #1]
  402b90:	7818      	ldrb	r0, [r3, #0]
  402b92:	4b5e      	ldr	r3, [pc, #376]	; (402d0c <control_direction+0x294>)
  402b94:	4798      	blx	r3
  402b96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		}
		else if (aux_control == 6){
  402b98:	2a06      	cmp	r2, #6
  402b9a:	d108      	bne.n	402bae <control_direction+0x136>
			pattern_up(CHANNEL_3);
  402b9c:	2002      	movs	r0, #2
  402b9e:	4b59      	ldr	r3, [pc, #356]	; (402d04 <control_direction+0x28c>)
  402ba0:	4798      	blx	r3
			output_display_2(curr_pattern_ch[2], curr_pattern_ch[3]);
  402ba2:	4b59      	ldr	r3, [pc, #356]	; (402d08 <control_direction+0x290>)
  402ba4:	78d9      	ldrb	r1, [r3, #3]
  402ba6:	7898      	ldrb	r0, [r3, #2]
  402ba8:	4b59      	ldr	r3, [pc, #356]	; (402d10 <control_direction+0x298>)
  402baa:	4798      	blx	r3
  402bac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		}
		else if (aux_control == 7){
  402bae:	2a07      	cmp	r2, #7
  402bb0:	f040 80dc 	bne.w	402d6c <control_direction+0x2f4>
			pattern_up(CHANNEL_4);
  402bb4:	2003      	movs	r0, #3
  402bb6:	4b53      	ldr	r3, [pc, #332]	; (402d04 <control_direction+0x28c>)
  402bb8:	4798      	blx	r3
			output_display_2(curr_pattern_ch[2], curr_pattern_ch[3]);
  402bba:	4b53      	ldr	r3, [pc, #332]	; (402d08 <control_direction+0x290>)
  402bbc:	78d9      	ldrb	r1, [r3, #3]
  402bbe:	7898      	ldrb	r0, [r3, #2]
  402bc0:	4b53      	ldr	r3, [pc, #332]	; (402d10 <control_direction+0x298>)
  402bc2:	4798      	blx	r3
  402bc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		}

	}

	else if ((A_seq == 0b00000011) && (B_seq == 0b00001001)){
  402bc6:	2b03      	cmp	r3, #3
  402bc8:	f040 80d0 	bne.w	402d6c <control_direction+0x2f4>
  402bcc:	2909      	cmp	r1, #9
  402bce:	f040 80cd 	bne.w	402d6c <control_direction+0x2f4>

		if (aux_control == 0){
  402bd2:	b94a      	cbnz	r2, 402be8 <control_direction+0x170>
			bpm_dec();
  402bd4:	4b4f      	ldr	r3, [pc, #316]	; (402d14 <control_direction+0x29c>)
  402bd6:	4798      	blx	r3
			update_timers(bpm);
  402bd8:	4c34      	ldr	r4, [pc, #208]	; (402cac <control_direction+0x234>)
  402bda:	8820      	ldrh	r0, [r4, #0]
  402bdc:	4b34      	ldr	r3, [pc, #208]	; (402cb0 <control_direction+0x238>)
  402bde:	4798      	blx	r3
			bpm_display(bpm);
  402be0:	8820      	ldrh	r0, [r4, #0]
  402be2:	4b34      	ldr	r3, [pc, #208]	; (402cb4 <control_direction+0x23c>)
  402be4:	4798      	blx	r3
  402be6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		}
		else if (aux_control == 1){
  402be8:	2a01      	cmp	r2, #1
  402bea:	d10c      	bne.n	402c06 <control_direction+0x18e>
			res_dec();
  402bec:	4b4a      	ldr	r3, [pc, #296]	; (402d18 <control_direction+0x2a0>)
  402bee:	4798      	blx	r3
			update_timers(bpm);
  402bf0:	4b2e      	ldr	r3, [pc, #184]	; (402cac <control_direction+0x234>)
  402bf2:	8818      	ldrh	r0, [r3, #0]
  402bf4:	4b2e      	ldr	r3, [pc, #184]	; (402cb0 <control_direction+0x238>)
  402bf6:	4798      	blx	r3
			res_display(res_to_int(resolution));
  402bf8:	4b30      	ldr	r3, [pc, #192]	; (402cbc <control_direction+0x244>)
  402bfa:	7818      	ldrb	r0, [r3, #0]
  402bfc:	4b30      	ldr	r3, [pc, #192]	; (402cc0 <control_direction+0x248>)
  402bfe:	4798      	blx	r3
  402c00:	4b30      	ldr	r3, [pc, #192]	; (402cc4 <control_direction+0x24c>)
  402c02:	4798      	blx	r3
  402c04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		}
		else if (aux_control == 2){
  402c06:	2a02      	cmp	r2, #2
  402c08:	d119      	bne.n	402c3e <control_direction+0x1c6>
			if (page_or_loop == 0){
  402c0a:	4b2f      	ldr	r3, [pc, #188]	; (402cc8 <control_direction+0x250>)
  402c0c:	781b      	ldrb	r3, [r3, #0]
  402c0e:	b953      	cbnz	r3, 402c26 <control_direction+0x1ae>
				display_page_dec();
  402c10:	4b42      	ldr	r3, [pc, #264]	; (402d1c <control_direction+0x2a4>)
  402c12:	4798      	blx	r3
				leds_update_cursor(curr_step);
  402c14:	4b2e      	ldr	r3, [pc, #184]	; (402cd0 <control_direction+0x258>)
  402c16:	7818      	ldrb	r0, [r3, #0]
  402c18:	4b2e      	ldr	r3, [pc, #184]	; (402cd4 <control_direction+0x25c>)
  402c1a:	4798      	blx	r3
				page_display(display_page);
  402c1c:	4b2e      	ldr	r3, [pc, #184]	; (402cd8 <control_direction+0x260>)
  402c1e:	7818      	ldrb	r0, [r3, #0]
  402c20:	4b2e      	ldr	r3, [pc, #184]	; (402cdc <control_direction+0x264>)
  402c22:	4798      	blx	r3
  402c24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			}
			else if (page_or_loop == 1){
  402c26:	2b01      	cmp	r3, #1
  402c28:	f040 80a0 	bne.w	402d6c <control_direction+0x2f4>
				page_loop_dec();
  402c2c:	4b3c      	ldr	r3, [pc, #240]	; (402d20 <control_direction+0x2a8>)
  402c2e:	4798      	blx	r3
				loop_display(patterns_loop[curr_pattern]);
  402c30:	4b2c      	ldr	r3, [pc, #176]	; (402ce4 <control_direction+0x26c>)
  402c32:	781b      	ldrb	r3, [r3, #0]
  402c34:	4a2c      	ldr	r2, [pc, #176]	; (402ce8 <control_direction+0x270>)
  402c36:	5cd0      	ldrb	r0, [r2, r3]
  402c38:	4b2c      	ldr	r3, [pc, #176]	; (402cec <control_direction+0x274>)
  402c3a:	4798      	blx	r3
  402c3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			}
		}
		else if (aux_control == 3){
  402c3e:	2a03      	cmp	r2, #3
  402c40:	d120      	bne.n	402c84 <control_direction+0x20c>
			if(pattern_clr == 1) {
  402c42:	4b2b      	ldr	r3, [pc, #172]	; (402cf0 <control_direction+0x278>)
  402c44:	781b      	ldrb	r3, [r3, #0]
  402c46:	2b01      	cmp	r3, #1
  402c48:	d107      	bne.n	402c5a <control_direction+0x1e2>
				clr_yes = 1;
  402c4a:	2101      	movs	r1, #1
  402c4c:	4b29      	ldr	r3, [pc, #164]	; (402cf4 <control_direction+0x27c>)
  402c4e:	7019      	strb	r1, [r3, #0]
				if(clr_yes) {
					clr_pattern_display(curr_pattern, 1);
  402c50:	4b24      	ldr	r3, [pc, #144]	; (402ce4 <control_direction+0x26c>)
  402c52:	7818      	ldrb	r0, [r3, #0]
  402c54:	4b28      	ldr	r3, [pc, #160]	; (402cf8 <control_direction+0x280>)
  402c56:	4798      	blx	r3
  402c58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				else {
					clr_pattern_display(curr_pattern, 0);
				}
			}
			else {
				pattern_dec();
  402c5a:	4b32      	ldr	r3, [pc, #200]	; (402d24 <control_direction+0x2ac>)
  402c5c:	4798      	blx	r3
				leds_update_cursor(curr_step);
  402c5e:	4b1c      	ldr	r3, [pc, #112]	; (402cd0 <control_direction+0x258>)
  402c60:	7818      	ldrb	r0, [r3, #0]
  402c62:	4b1c      	ldr	r3, [pc, #112]	; (402cd4 <control_direction+0x25c>)
  402c64:	4798      	blx	r3
				pattern_display(curr_pattern);
  402c66:	4b1f      	ldr	r3, [pc, #124]	; (402ce4 <control_direction+0x26c>)
  402c68:	7818      	ldrb	r0, [r3, #0]
  402c6a:	4b25      	ldr	r3, [pc, #148]	; (402d00 <control_direction+0x288>)
  402c6c:	4798      	blx	r3
				if(page_or_loop == 1) {
  402c6e:	4b16      	ldr	r3, [pc, #88]	; (402cc8 <control_direction+0x250>)
  402c70:	781b      	ldrb	r3, [r3, #0]
  402c72:	2b01      	cmp	r3, #1
  402c74:	d17a      	bne.n	402d6c <control_direction+0x2f4>
					loop_display(patterns_loop[curr_pattern]);
  402c76:	4b1b      	ldr	r3, [pc, #108]	; (402ce4 <control_direction+0x26c>)
  402c78:	781b      	ldrb	r3, [r3, #0]
  402c7a:	4a1b      	ldr	r2, [pc, #108]	; (402ce8 <control_direction+0x270>)
  402c7c:	5cd0      	ldrb	r0, [r2, r3]
  402c7e:	4b1b      	ldr	r3, [pc, #108]	; (402cec <control_direction+0x274>)
  402c80:	4798      	blx	r3
  402c82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				}
			}
		}
		else if (aux_control == 4){
  402c84:	2a04      	cmp	r2, #4
  402c86:	d151      	bne.n	402d2c <control_direction+0x2b4>
			pattern_down(CHANNEL_1);
  402c88:	2000      	movs	r0, #0
  402c8a:	4b27      	ldr	r3, [pc, #156]	; (402d28 <control_direction+0x2b0>)
  402c8c:	4798      	blx	r3
			output_display_1(curr_pattern_ch[0], curr_pattern_ch[1]);
  402c8e:	4b1e      	ldr	r3, [pc, #120]	; (402d08 <control_direction+0x290>)
  402c90:	7859      	ldrb	r1, [r3, #1]
  402c92:	7818      	ldrb	r0, [r3, #0]
  402c94:	4b1d      	ldr	r3, [pc, #116]	; (402d0c <control_direction+0x294>)
  402c96:	4798      	blx	r3
  402c98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402c9a:	bf00      	nop
  402c9c:	400e0e3c 	.word	0x400e0e3c
  402ca0:	2000070e 	.word	0x2000070e
  402ca4:	20000703 	.word	0x20000703
  402ca8:	00402955 	.word	0x00402955
  402cac:	20000706 	.word	0x20000706
  402cb0:	004042e5 	.word	0x004042e5
  402cb4:	00401331 	.word	0x00401331
  402cb8:	0040292d 	.word	0x0040292d
  402cbc:	200006d8 	.word	0x200006d8
  402cc0:	004028d5 	.word	0x004028d5
  402cc4:	00401395 	.word	0x00401395
  402cc8:	2000070d 	.word	0x2000070d
  402ccc:	004029c9 	.word	0x004029c9
  402cd0:	200006ec 	.word	0x200006ec
  402cd4:	00402515 	.word	0x00402515
  402cd8:	200006f4 	.word	0x200006f4
  402cdc:	00401481 	.word	0x00401481
  402ce0:	00402a41 	.word	0x00402a41
  402ce4:	200006d0 	.word	0x200006d0
  402ce8:	20008710 	.word	0x20008710
  402cec:	004014cd 	.word	0x004014cd
  402cf0:	20000701 	.word	0x20000701
  402cf4:	2000070c 	.word	0x2000070c
  402cf8:	00401565 	.word	0x00401565
  402cfc:	004029f1 	.word	0x004029f1
  402d00:	00401519 	.word	0x00401519
  402d04:	00402a19 	.word	0x00402a19
  402d08:	200006e8 	.word	0x200006e8
  402d0c:	00401645 	.word	0x00401645
  402d10:	004016dd 	.word	0x004016dd
  402d14:	00402975 	.word	0x00402975
  402d18:	00402941 	.word	0x00402941
  402d1c:	004029dd 	.word	0x004029dd
  402d20:	00402a5d 	.word	0x00402a5d
  402d24:	00402a05 	.word	0x00402a05
  402d28:	00402a2d 	.word	0x00402a2d
		}
		else if (aux_control == 5){
  402d2c:	2a05      	cmp	r2, #5
  402d2e:	d108      	bne.n	402d42 <control_direction+0x2ca>
			pattern_down(CHANNEL_2);
  402d30:	2001      	movs	r0, #1
  402d32:	4b0f      	ldr	r3, [pc, #60]	; (402d70 <control_direction+0x2f8>)
  402d34:	4798      	blx	r3
			output_display_1(curr_pattern_ch[0], curr_pattern_ch[1]);
  402d36:	4b0f      	ldr	r3, [pc, #60]	; (402d74 <control_direction+0x2fc>)
  402d38:	7859      	ldrb	r1, [r3, #1]
  402d3a:	7818      	ldrb	r0, [r3, #0]
  402d3c:	4b0e      	ldr	r3, [pc, #56]	; (402d78 <control_direction+0x300>)
  402d3e:	4798      	blx	r3
  402d40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		}
		else if (aux_control == 6){
  402d42:	2a06      	cmp	r2, #6
  402d44:	d108      	bne.n	402d58 <control_direction+0x2e0>
			pattern_down(CHANNEL_3);
  402d46:	2002      	movs	r0, #2
  402d48:	4b09      	ldr	r3, [pc, #36]	; (402d70 <control_direction+0x2f8>)
  402d4a:	4798      	blx	r3
			output_display_2(curr_pattern_ch[2], curr_pattern_ch[3]);
  402d4c:	4b09      	ldr	r3, [pc, #36]	; (402d74 <control_direction+0x2fc>)
  402d4e:	78d9      	ldrb	r1, [r3, #3]
  402d50:	7898      	ldrb	r0, [r3, #2]
  402d52:	4b0a      	ldr	r3, [pc, #40]	; (402d7c <control_direction+0x304>)
  402d54:	4798      	blx	r3
  402d56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		}
		else if (aux_control == 7){
  402d58:	2a07      	cmp	r2, #7
  402d5a:	d107      	bne.n	402d6c <control_direction+0x2f4>
			pattern_down(CHANNEL_4);
  402d5c:	2003      	movs	r0, #3
  402d5e:	4b04      	ldr	r3, [pc, #16]	; (402d70 <control_direction+0x2f8>)
  402d60:	4798      	blx	r3
			output_display_2(curr_pattern_ch[2], curr_pattern_ch[3]);
  402d62:	4b04      	ldr	r3, [pc, #16]	; (402d74 <control_direction+0x2fc>)
  402d64:	78d9      	ldrb	r1, [r3, #3]
  402d66:	7898      	ldrb	r0, [r3, #2]
  402d68:	4b04      	ldr	r3, [pc, #16]	; (402d7c <control_direction+0x304>)
  402d6a:	4798      	blx	r3
  402d6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402d6e:	bf00      	nop
  402d70:	00402a2d 	.word	0x00402a2d
  402d74:	200006e8 	.word	0x200006e8
  402d78:	00401645 	.word	0x00401645
  402d7c:	004016dd 	.word	0x004016dd

00402d80 <synch_to_page>:
	}
}

void synch_to_page(){
	for (int i = 0; i < 4; i++){
		curr_page_ch[i] = 0;
  402d80:	4b03      	ldr	r3, [pc, #12]	; (402d90 <synch_to_page+0x10>)
  402d82:	2200      	movs	r2, #0
  402d84:	701a      	strb	r2, [r3, #0]
  402d86:	705a      	strb	r2, [r3, #1]
  402d88:	709a      	strb	r2, [r3, #2]
  402d8a:	70da      	strb	r2, [r3, #3]
  402d8c:	4770      	bx	lr
  402d8e:	bf00      	nop
  402d90:	200006e0 	.word	0x200006e0

00402d94 <aux_toggle>:
	}
}

void aux_toggle(uint8_t button_row, uint8_t aux_encoders){
  402d94:	b510      	push	{r4, lr}
  402d96:	4604      	mov	r4, r0

	switch(aux_encoders) {
  402d98:	29ef      	cmp	r1, #239	; 0xef
  402d9a:	d055      	beq.n	402e48 <aux_toggle+0xb4>
  402d9c:	d806      	bhi.n	402dac <aux_toggle+0x18>
  402d9e:	29bf      	cmp	r1, #191	; 0xbf
  402da0:	d068      	beq.n	402e74 <aux_toggle+0xe0>
  402da2:	29df      	cmp	r1, #223	; 0xdf
  402da4:	d05b      	beq.n	402e5e <aux_toggle+0xca>
  402da6:	297f      	cmp	r1, #127	; 0x7f
  402da8:	d179      	bne.n	402e9e <aux_toggle+0x10a>
  402daa:	e06e      	b.n	402e8a <aux_toggle+0xf6>
  402dac:	29fb      	cmp	r1, #251	; 0xfb
  402dae:	d007      	beq.n	402dc0 <aux_toggle+0x2c>
  402db0:	29fe      	cmp	r1, #254	; 0xfe
  402db2:	d002      	beq.n	402dba <aux_toggle+0x26>
  402db4:	29f7      	cmp	r1, #247	; 0xf7
  402db6:	d172      	bne.n	402e9e <aux_toggle+0x10a>
  402db8:	e019      	b.n	402dee <aux_toggle+0x5a>
		case 254 :
			//change bpm inc/dec scale
			bpm_toggle();
  402dba:	4b74      	ldr	r3, [pc, #464]	; (402f8c <aux_toggle+0x1f8>)
  402dbc:	4798      	blx	r3
			break;
  402dbe:	e06e      	b.n	402e9e <aux_toggle+0x10a>
		case 253 :
			//toggle resolution or scale?
			break;
		case 251 :
			//toggle between page & loop variables
			page_or_loop = abs(page_or_loop - 1);
  402dc0:	4a73      	ldr	r2, [pc, #460]	; (402f90 <aux_toggle+0x1fc>)
  402dc2:	7813      	ldrb	r3, [r2, #0]
  402dc4:	3b01      	subs	r3, #1
  402dc6:	2b00      	cmp	r3, #0
  402dc8:	bfb8      	it	lt
  402dca:	425b      	neglt	r3, r3
  402dcc:	b2db      	uxtb	r3, r3
  402dce:	7013      	strb	r3, [r2, #0]
			if (page_or_loop == 0){
  402dd0:	b923      	cbnz	r3, 402ddc <aux_toggle+0x48>
				page_display(display_page);
  402dd2:	4b70      	ldr	r3, [pc, #448]	; (402f94 <aux_toggle+0x200>)
  402dd4:	7818      	ldrb	r0, [r3, #0]
  402dd6:	4b70      	ldr	r3, [pc, #448]	; (402f98 <aux_toggle+0x204>)
  402dd8:	4798      	blx	r3
  402dda:	e060      	b.n	402e9e <aux_toggle+0x10a>
			}
			else if (page_or_loop == 1){
  402ddc:	2b01      	cmp	r3, #1
  402dde:	d15e      	bne.n	402e9e <aux_toggle+0x10a>
				loop_display(patterns_loop[curr_pattern]);
  402de0:	4b6e      	ldr	r3, [pc, #440]	; (402f9c <aux_toggle+0x208>)
  402de2:	781b      	ldrb	r3, [r3, #0]
  402de4:	4a6e      	ldr	r2, [pc, #440]	; (402fa0 <aux_toggle+0x20c>)
  402de6:	5cd0      	ldrb	r0, [r2, r3]
  402de8:	4b6e      	ldr	r3, [pc, #440]	; (402fa4 <aux_toggle+0x210>)
  402dea:	4798      	blx	r3
  402dec:	e057      	b.n	402e9e <aux_toggle+0x10a>
// 				pattern_clr = 0;					//reset clear variable
// 				REG_TC0_CCR1 |= TC_CCR_CLKDIS;		//disable timer counter
// 				notes_clear(curr_pattern);			//clear the current pattern
// 				pattern_display(curr_pattern);		//return display to default
// 			}
			if (pattern_clr == 0){
  402dee:	4b6e      	ldr	r3, [pc, #440]	; (402fa8 <aux_toggle+0x214>)
  402df0:	781b      	ldrb	r3, [r3, #0]
  402df2:	b9ab      	cbnz	r3, 402e20 <aux_toggle+0x8c>
				clr_pattern_display(curr_pattern, 0);	//output clear message to display
  402df4:	2100      	movs	r1, #0
  402df6:	4b69      	ldr	r3, [pc, #420]	; (402f9c <aux_toggle+0x208>)
  402df8:	7818      	ldrb	r0, [r3, #0]
  402dfa:	4b6c      	ldr	r3, [pc, #432]	; (402fac <aux_toggle+0x218>)
  402dfc:	4798      	blx	r3
				pattern_clr = 1;
  402dfe:	2201      	movs	r2, #1
  402e00:	4b69      	ldr	r3, [pc, #420]	; (402fa8 <aux_toggle+0x214>)
  402e02:	701a      	strb	r2, [r3, #0]
			break;
		default :
			break;
	}

	switch(button_row) {
  402e04:	2cdf      	cmp	r4, #223	; 0xdf
  402e06:	d069      	beq.n	402edc <aux_toggle+0x148>
  402e08:	d805      	bhi.n	402e16 <aux_toggle+0x82>
  402e0a:	2c7f      	cmp	r4, #127	; 0x7f
  402e0c:	f000 8097 	beq.w	402f3e <aux_toggle+0x1aa>
  402e10:	2cbf      	cmp	r4, #191	; 0xbf
  402e12:	d073      	beq.n	402efc <aux_toggle+0x168>
  402e14:	bd10      	pop	{r4, pc}
  402e16:	2cef      	cmp	r4, #239	; 0xef
  402e18:	d050      	beq.n	402ebc <aux_toggle+0x128>
  402e1a:	2cfe      	cmp	r4, #254	; 0xfe
  402e1c:	d04b      	beq.n	402eb6 <aux_toggle+0x122>
  402e1e:	bd10      	pop	{r4, pc}
// 			}
			if (pattern_clr == 0){
				clr_pattern_display(curr_pattern, 0);	//output clear message to display
				pattern_clr = 1;
			}
			else if (pattern_clr == 1){
  402e20:	2b01      	cmp	r3, #1
  402e22:	f040 80a5 	bne.w	402f70 <aux_toggle+0x1dc>
				if(clr_yes) {
  402e26:	4b62      	ldr	r3, [pc, #392]	; (402fb0 <aux_toggle+0x21c>)
  402e28:	781b      	ldrb	r3, [r3, #0]
  402e2a:	b11b      	cbz	r3, 402e34 <aux_toggle+0xa0>
					notes_clear(curr_pattern);			//clear the current pattern
  402e2c:	4b5b      	ldr	r3, [pc, #364]	; (402f9c <aux_toggle+0x208>)
  402e2e:	7818      	ldrb	r0, [r3, #0]
  402e30:	4b60      	ldr	r3, [pc, #384]	; (402fb4 <aux_toggle+0x220>)
  402e32:	4798      	blx	r3
				}
				clr_yes = 0;
  402e34:	2300      	movs	r3, #0
  402e36:	4a5e      	ldr	r2, [pc, #376]	; (402fb0 <aux_toggle+0x21c>)
  402e38:	7013      	strb	r3, [r2, #0]
				pattern_clr = 0;
  402e3a:	4a5b      	ldr	r2, [pc, #364]	; (402fa8 <aux_toggle+0x214>)
  402e3c:	7013      	strb	r3, [r2, #0]
				pattern_display(curr_pattern);		//return display to default
  402e3e:	4b57      	ldr	r3, [pc, #348]	; (402f9c <aux_toggle+0x208>)
  402e40:	7818      	ldrb	r0, [r3, #0]
  402e42:	4b5d      	ldr	r3, [pc, #372]	; (402fb8 <aux_toggle+0x224>)
  402e44:	4798      	blx	r3
  402e46:	e02a      	b.n	402e9e <aux_toggle+0x10a>
			}
			break;
		case 239 :
			channel_mute[CHANNEL_1] = abs(channel_mute[CHANNEL_1] - 1);
  402e48:	4a5c      	ldr	r2, [pc, #368]	; (402fbc <aux_toggle+0x228>)
  402e4a:	7813      	ldrb	r3, [r2, #0]
  402e4c:	3b01      	subs	r3, #1
  402e4e:	2b00      	cmp	r3, #0
  402e50:	bfb8      	it	lt
  402e52:	425b      	neglt	r3, r3
  402e54:	7013      	strb	r3, [r2, #0]
			DAC_write_gate_off(CHANNEL_1);
  402e56:	2000      	movs	r0, #0
  402e58:	4b59      	ldr	r3, [pc, #356]	; (402fc0 <aux_toggle+0x22c>)
  402e5a:	4798      	blx	r3
			break;
  402e5c:	e01f      	b.n	402e9e <aux_toggle+0x10a>
		case 223 :
			channel_mute[CHANNEL_2] = abs(channel_mute[CHANNEL_2] - 1);
  402e5e:	4a57      	ldr	r2, [pc, #348]	; (402fbc <aux_toggle+0x228>)
  402e60:	7853      	ldrb	r3, [r2, #1]
  402e62:	3b01      	subs	r3, #1
  402e64:	2b00      	cmp	r3, #0
  402e66:	bfb8      	it	lt
  402e68:	425b      	neglt	r3, r3
  402e6a:	7053      	strb	r3, [r2, #1]
			DAC_write_gate_off(CHANNEL_2);
  402e6c:	2001      	movs	r0, #1
  402e6e:	4b54      	ldr	r3, [pc, #336]	; (402fc0 <aux_toggle+0x22c>)
  402e70:	4798      	blx	r3
			break;
  402e72:	e014      	b.n	402e9e <aux_toggle+0x10a>
		case 191 :
			channel_mute[CHANNEL_3] = abs(channel_mute[CHANNEL_3] - 1);
  402e74:	4a51      	ldr	r2, [pc, #324]	; (402fbc <aux_toggle+0x228>)
  402e76:	7893      	ldrb	r3, [r2, #2]
  402e78:	3b01      	subs	r3, #1
  402e7a:	2b00      	cmp	r3, #0
  402e7c:	bfb8      	it	lt
  402e7e:	425b      	neglt	r3, r3
  402e80:	7093      	strb	r3, [r2, #2]
			DAC_write_gate_off(CHANNEL_3);
  402e82:	2002      	movs	r0, #2
  402e84:	4b4e      	ldr	r3, [pc, #312]	; (402fc0 <aux_toggle+0x22c>)
  402e86:	4798      	blx	r3
			break;
  402e88:	e009      	b.n	402e9e <aux_toggle+0x10a>
		case 127 :
			channel_mute[CHANNEL_4] = abs(channel_mute[CHANNEL_4] - 1);
  402e8a:	4a4c      	ldr	r2, [pc, #304]	; (402fbc <aux_toggle+0x228>)
  402e8c:	78d3      	ldrb	r3, [r2, #3]
  402e8e:	3b01      	subs	r3, #1
  402e90:	2b00      	cmp	r3, #0
  402e92:	bfb8      	it	lt
  402e94:	425b      	neglt	r3, r3
  402e96:	70d3      	strb	r3, [r2, #3]
			DAC_write_gate_off(CHANNEL_4);
  402e98:	2003      	movs	r0, #3
  402e9a:	4b49      	ldr	r3, [pc, #292]	; (402fc0 <aux_toggle+0x22c>)
  402e9c:	4798      	blx	r3
			break;
		default :
			break;
	}

	switch(button_row) {
  402e9e:	2cdf      	cmp	r4, #223	; 0xdf
  402ea0:	d01c      	beq.n	402edc <aux_toggle+0x148>
  402ea2:	d804      	bhi.n	402eae <aux_toggle+0x11a>
  402ea4:	2c7f      	cmp	r4, #127	; 0x7f
  402ea6:	d046      	beq.n	402f36 <aux_toggle+0x1a2>
  402ea8:	2cbf      	cmp	r4, #191	; 0xbf
  402eaa:	d027      	beq.n	402efc <aux_toggle+0x168>
  402eac:	bd10      	pop	{r4, pc}
  402eae:	2cef      	cmp	r4, #239	; 0xef
  402eb0:	d004      	beq.n	402ebc <aux_toggle+0x128>
  402eb2:	2cfe      	cmp	r4, #254	; 0xfe
  402eb4:	d168      	bne.n	402f88 <aux_toggle+0x1f4>
		case 254 :
			synch_to_page();
  402eb6:	4b43      	ldr	r3, [pc, #268]	; (402fc4 <aux_toggle+0x230>)
  402eb8:	4798      	blx	r3
			break;
  402eba:	bd10      	pop	{r4, pc}
			break;
		case 247 :
			
			break;
		case 239 :
			notes_dec(6);
  402ebc:	2006      	movs	r0, #6
  402ebe:	4b42      	ldr	r3, [pc, #264]	; (402fc8 <aux_toggle+0x234>)
  402ec0:	4798      	blx	r3
			note_display(patterns[curr_pattern][display_page][6][0]);
  402ec2:	4b36      	ldr	r3, [pc, #216]	; (402f9c <aux_toggle+0x208>)
  402ec4:	781a      	ldrb	r2, [r3, #0]
  402ec6:	4b33      	ldr	r3, [pc, #204]	; (402f94 <aux_toggle+0x200>)
  402ec8:	781b      	ldrb	r3, [r3, #0]
  402eca:	eb03 1202 	add.w	r2, r3, r2, lsl #4
  402ece:	4b3f      	ldr	r3, [pc, #252]	; (402fcc <aux_toggle+0x238>)
  402ed0:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
  402ed4:	8e18      	ldrh	r0, [r3, #48]	; 0x30
  402ed6:	4b3e      	ldr	r3, [pc, #248]	; (402fd0 <aux_toggle+0x23c>)
  402ed8:	4798      	blx	r3
			break;
  402eda:	bd10      	pop	{r4, pc}
		case 223 :
			notes_inc(6);
  402edc:	2006      	movs	r0, #6
  402ede:	4b3d      	ldr	r3, [pc, #244]	; (402fd4 <aux_toggle+0x240>)
  402ee0:	4798      	blx	r3
			note_display(patterns[curr_pattern][display_page][6][0]);
  402ee2:	4b2e      	ldr	r3, [pc, #184]	; (402f9c <aux_toggle+0x208>)
  402ee4:	781a      	ldrb	r2, [r3, #0]
  402ee6:	4b2b      	ldr	r3, [pc, #172]	; (402f94 <aux_toggle+0x200>)
  402ee8:	781b      	ldrb	r3, [r3, #0]
  402eea:	eb03 1202 	add.w	r2, r3, r2, lsl #4
  402eee:	4b37      	ldr	r3, [pc, #220]	; (402fcc <aux_toggle+0x238>)
  402ef0:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
  402ef4:	8e18      	ldrh	r0, [r3, #48]	; 0x30
  402ef6:	4b36      	ldr	r3, [pc, #216]	; (402fd0 <aux_toggle+0x23c>)
  402ef8:	4798      	blx	r3
			break;
  402efa:	bd10      	pop	{r4, pc}
		case 191 :
			if(pattern_clr == 1) {
  402efc:	4b2a      	ldr	r3, [pc, #168]	; (402fa8 <aux_toggle+0x214>)
  402efe:	781b      	ldrb	r3, [r3, #0]
  402f00:	2b01      	cmp	r3, #1
  402f02:	d111      	bne.n	402f28 <aux_toggle+0x194>
				clr_yes = !clr_yes;
  402f04:	4a2a      	ldr	r2, [pc, #168]	; (402fb0 <aux_toggle+0x21c>)
  402f06:	7813      	ldrb	r3, [r2, #0]
  402f08:	f083 0301 	eor.w	r3, r3, #1
  402f0c:	7013      	strb	r3, [r2, #0]
				if(clr_yes) {
  402f0e:	b12b      	cbz	r3, 402f1c <aux_toggle+0x188>
					clr_pattern_display(curr_pattern, 1);
  402f10:	2101      	movs	r1, #1
  402f12:	4b22      	ldr	r3, [pc, #136]	; (402f9c <aux_toggle+0x208>)
  402f14:	7818      	ldrb	r0, [r3, #0]
  402f16:	4b25      	ldr	r3, [pc, #148]	; (402fac <aux_toggle+0x218>)
  402f18:	4798      	blx	r3
  402f1a:	bd10      	pop	{r4, pc}
				}
				else {
					clr_pattern_display(curr_pattern, 0);
  402f1c:	2100      	movs	r1, #0
  402f1e:	4b1f      	ldr	r3, [pc, #124]	; (402f9c <aux_toggle+0x208>)
  402f20:	7818      	ldrb	r0, [r3, #0]
  402f22:	4b22      	ldr	r3, [pc, #136]	; (402fac <aux_toggle+0x218>)
  402f24:	4798      	blx	r3
  402f26:	bd10      	pop	{r4, pc}
				}
			}
			else {
				pattern_dec();
  402f28:	4b2b      	ldr	r3, [pc, #172]	; (402fd8 <aux_toggle+0x244>)
  402f2a:	4798      	blx	r3
				pattern_display(curr_pattern);
  402f2c:	4b1b      	ldr	r3, [pc, #108]	; (402f9c <aux_toggle+0x208>)
  402f2e:	7818      	ldrb	r0, [r3, #0]
  402f30:	4b21      	ldr	r3, [pc, #132]	; (402fb8 <aux_toggle+0x224>)
  402f32:	4798      	blx	r3
  402f34:	bd10      	pop	{r4, pc}
			}
			break;
		case 127 :
			if(pattern_clr == 1) {
  402f36:	4b1c      	ldr	r3, [pc, #112]	; (402fa8 <aux_toggle+0x214>)
  402f38:	781b      	ldrb	r3, [r3, #0]
  402f3a:	2b01      	cmp	r3, #1
  402f3c:	d111      	bne.n	402f62 <aux_toggle+0x1ce>
				clr_yes = !clr_yes;
  402f3e:	4a1c      	ldr	r2, [pc, #112]	; (402fb0 <aux_toggle+0x21c>)
  402f40:	7813      	ldrb	r3, [r2, #0]
  402f42:	f083 0301 	eor.w	r3, r3, #1
  402f46:	7013      	strb	r3, [r2, #0]
				if(clr_yes) {
  402f48:	b12b      	cbz	r3, 402f56 <aux_toggle+0x1c2>
					clr_pattern_display(curr_pattern, 1);
  402f4a:	2101      	movs	r1, #1
  402f4c:	4b13      	ldr	r3, [pc, #76]	; (402f9c <aux_toggle+0x208>)
  402f4e:	7818      	ldrb	r0, [r3, #0]
  402f50:	4b16      	ldr	r3, [pc, #88]	; (402fac <aux_toggle+0x218>)
  402f52:	4798      	blx	r3
  402f54:	bd10      	pop	{r4, pc}
				}
				else {
					clr_pattern_display(curr_pattern, 0);
  402f56:	2100      	movs	r1, #0
  402f58:	4b10      	ldr	r3, [pc, #64]	; (402f9c <aux_toggle+0x208>)
  402f5a:	7818      	ldrb	r0, [r3, #0]
  402f5c:	4b13      	ldr	r3, [pc, #76]	; (402fac <aux_toggle+0x218>)
  402f5e:	4798      	blx	r3
  402f60:	bd10      	pop	{r4, pc}
				}
			}
			else {
				pattern_inc();
  402f62:	4b1e      	ldr	r3, [pc, #120]	; (402fdc <aux_toggle+0x248>)
  402f64:	4798      	blx	r3
				pattern_display(curr_pattern);
  402f66:	4b0d      	ldr	r3, [pc, #52]	; (402f9c <aux_toggle+0x208>)
  402f68:	7818      	ldrb	r0, [r3, #0]
  402f6a:	4b13      	ldr	r3, [pc, #76]	; (402fb8 <aux_toggle+0x224>)
  402f6c:	4798      	blx	r3
			break;
		default :
			break;

}
}
  402f6e:	bd10      	pop	{r4, pc}
			break;
		default :
			break;
	}

	switch(button_row) {
  402f70:	28df      	cmp	r0, #223	; 0xdf
  402f72:	d0b3      	beq.n	402edc <aux_toggle+0x148>
  402f74:	d804      	bhi.n	402f80 <aux_toggle+0x1ec>
  402f76:	287f      	cmp	r0, #127	; 0x7f
  402f78:	d0f3      	beq.n	402f62 <aux_toggle+0x1ce>
  402f7a:	28bf      	cmp	r0, #191	; 0xbf
  402f7c:	d0be      	beq.n	402efc <aux_toggle+0x168>
  402f7e:	bd10      	pop	{r4, pc}
  402f80:	28ef      	cmp	r0, #239	; 0xef
  402f82:	d09b      	beq.n	402ebc <aux_toggle+0x128>
  402f84:	28fe      	cmp	r0, #254	; 0xfe
  402f86:	d096      	beq.n	402eb6 <aux_toggle+0x122>
  402f88:	bd10      	pop	{r4, pc}
  402f8a:	bf00      	nop
  402f8c:	00402991 	.word	0x00402991
  402f90:	2000070d 	.word	0x2000070d
  402f94:	200006f4 	.word	0x200006f4
  402f98:	00401481 	.word	0x00401481
  402f9c:	200006d0 	.word	0x200006d0
  402fa0:	20008710 	.word	0x20008710
  402fa4:	004014cd 	.word	0x004014cd
  402fa8:	20000701 	.word	0x20000701
  402fac:	00401565 	.word	0x00401565
  402fb0:	2000070c 	.word	0x2000070c
  402fb4:	00403995 	.word	0x00403995
  402fb8:	00401519 	.word	0x00401519
  402fbc:	200006f0 	.word	0x200006f0
  402fc0:	00400461 	.word	0x00400461
  402fc4:	00402d81 	.word	0x00402d81
  402fc8:	004041a9 	.word	0x004041a9
  402fcc:	20000710 	.word	0x20000710
  402fd0:	00400ee5 	.word	0x00400ee5
  402fd4:	0040416d 	.word	0x0040416d
  402fd8:	00402a05 	.word	0x00402a05
  402fdc:	004029f1 	.word	0x004029f1

00402fe0 <init_sequencer_controls>:

}
}


 void init_sequencer_controls(){
  402fe0:	b470      	push	{r4, r5, r6}

	bpm = 120;
  402fe2:	2278      	movs	r2, #120	; 0x78
  402fe4:	4ba8      	ldr	r3, [pc, #672]	; (403288 <init_sequencer_controls+0x2a8>)
  402fe6:	801a      	strh	r2, [r3, #0]
	bpm_adjust = 1;
  402fe8:	2201      	movs	r2, #1
  402fea:	4ba8      	ldr	r3, [pc, #672]	; (40328c <init_sequencer_controls+0x2ac>)
  402fec:	701a      	strb	r2, [r3, #0]

	page_or_loop = 0;
  402fee:	2300      	movs	r3, #0
  402ff0:	4aa7      	ldr	r2, [pc, #668]	; (403290 <init_sequencer_controls+0x2b0>)
  402ff2:	7013      	strb	r3, [r2, #0]
	pattern_clr = 0;
  402ff4:	4aa7      	ldr	r2, [pc, #668]	; (403294 <init_sequencer_controls+0x2b4>)
  402ff6:	7013      	strb	r3, [r2, #0]
	clr_yes = 0;
  402ff8:	4aa7      	ldr	r2, [pc, #668]	; (403298 <init_sequencer_controls+0x2b8>)
  402ffa:	7013      	strb	r3, [r2, #0]
	pause = 0;
  402ffc:	4aa7      	ldr	r2, [pc, #668]	; (40329c <init_sequencer_controls+0x2bc>)
  402ffe:	7013      	strb	r3, [r2, #0]
	pause_count = 0;
  403000:	4aa7      	ldr	r2, [pc, #668]	; (4032a0 <init_sequencer_controls+0x2c0>)
  403002:	7013      	strb	r3, [r2, #0]

	A_seq = 0;
  403004:	4aa7      	ldr	r2, [pc, #668]	; (4032a4 <init_sequencer_controls+0x2c4>)
  403006:	7013      	strb	r3, [r2, #0]
	B_seq = 0;
  403008:	4aa7      	ldr	r2, [pc, #668]	; (4032a8 <init_sequencer_controls+0x2c8>)
  40300a:	7013      	strb	r3, [r2, #0]

	//enable clock for PIOA
	REG_PMC_PCER0 |= PMC_PCER0_PID11;
  40300c:	4aa7      	ldr	r2, [pc, #668]	; (4032ac <init_sequencer_controls+0x2cc>)
  40300e:	6813      	ldr	r3, [r2, #0]
  403010:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  403014:	6013      	str	r3, [r2, #0]

	/**************			CONFIGURE PAUSE/PLAY BUTTON				**************/
	//set up PA2 as pause/play interrupt pin
	REG_PIOA_PER |= PIO_PER_P2; //enable PIO controller
  403016:	4da6      	ldr	r5, [pc, #664]	; (4032b0 <init_sequencer_controls+0x2d0>)
  403018:	682b      	ldr	r3, [r5, #0]
  40301a:	f043 0304 	orr.w	r3, r3, #4
  40301e:	602b      	str	r3, [r5, #0]
	REG_PIOA_ODR |= PIO_ODR_P2; //disable output
  403020:	4ca4      	ldr	r4, [pc, #656]	; (4032b4 <init_sequencer_controls+0x2d4>)
  403022:	6823      	ldr	r3, [r4, #0]
  403024:	f043 0304 	orr.w	r3, r3, #4
  403028:	6023      	str	r3, [r4, #0]
	REG_PIOA_PPDDR |= PIO_PPDDR_P2; //disable pull-down resistor
  40302a:	48a3      	ldr	r0, [pc, #652]	; (4032b8 <init_sequencer_controls+0x2d8>)
  40302c:	6803      	ldr	r3, [r0, #0]
  40302e:	f043 0304 	orr.w	r3, r3, #4
  403032:	6003      	str	r3, [r0, #0]
	REG_PIOA_PUER |= PIO_PUER_P2;	//enable pull-up resistor
  403034:	4ba1      	ldr	r3, [pc, #644]	; (4032bc <init_sequencer_controls+0x2dc>)
  403036:	681a      	ldr	r2, [r3, #0]
  403038:	f042 0204 	orr.w	r2, r2, #4
  40303c:	601a      	str	r2, [r3, #0]

	//set PA18 as pause/play LED output
	REG_PIOA_OER |= PIO_OER_P18;
  40303e:	49a0      	ldr	r1, [pc, #640]	; (4032c0 <init_sequencer_controls+0x2e0>)
  403040:	680a      	ldr	r2, [r1, #0]
  403042:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
  403046:	600a      	str	r2, [r1, #0]
	REG_PIOA_SODR |= PIO_SODR_P18; 
  403048:	3120      	adds	r1, #32
  40304a:	680a      	ldr	r2, [r1, #0]
  40304c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
  403050:	600a      	str	r2, [r1, #0]

	/**************			CONFIGURE 8 STEP AUX ENCODERS			**************/

	//Set up PA0 as AUX ENC 0 INPUT A
	REG_PIOA_PER |= PIO_PER_P0; //enable PIO controller
  403052:	682a      	ldr	r2, [r5, #0]
  403054:	f042 0201 	orr.w	r2, r2, #1
  403058:	602a      	str	r2, [r5, #0]
	REG_PIOA_ODR |= PIO_ODR_P0; //disable output
  40305a:	6822      	ldr	r2, [r4, #0]
  40305c:	f042 0201 	orr.w	r2, r2, #1
  403060:	6022      	str	r2, [r4, #0]
	REG_PIOA_PPDDR |= PIO_PPDDR_P0; //disable pull-down resistor
  403062:	6802      	ldr	r2, [r0, #0]
  403064:	f042 0201 	orr.w	r2, r2, #1
  403068:	6002      	str	r2, [r0, #0]
	REG_PIOA_PUER |= PIO_PUER_P0;	//enable pull-up resistor
  40306a:	681a      	ldr	r2, [r3, #0]
  40306c:	f042 0201 	orr.w	r2, r2, #1
  403070:	601a      	str	r2, [r3, #0]
	REG_PIOA_IFSCER |= PIO_IFSCER_P0; //turn on slow clock debounce
  403072:	3154      	adds	r1, #84	; 0x54
  403074:	680a      	ldr	r2, [r1, #0]
  403076:	f042 0201 	orr.w	r2, r2, #1
  40307a:	600a      	str	r2, [r1, #0]
	REG_PIOA_IFER |= PIO_IFER_P0;	//start debounce filter
  40307c:	4a91      	ldr	r2, [pc, #580]	; (4032c4 <init_sequencer_controls+0x2e4>)
  40307e:	6816      	ldr	r6, [r2, #0]
  403080:	f046 0601 	orr.w	r6, r6, #1
  403084:	6016      	str	r6, [r2, #0]

	//Set up PA1 as AUX ENC 0 INPUT B
	REG_PIOA_PER |= PIO_PER_P1; //enable PIO controller
  403086:	682e      	ldr	r6, [r5, #0]
  403088:	f046 0602 	orr.w	r6, r6, #2
  40308c:	602e      	str	r6, [r5, #0]
	REG_PIOA_ODR |= PIO_ODR_P1; //disable output
  40308e:	6826      	ldr	r6, [r4, #0]
  403090:	f046 0602 	orr.w	r6, r6, #2
  403094:	6026      	str	r6, [r4, #0]
	REG_PIOA_PPDDR |= PIO_PPDDR_P1; //disable pull-down resistor
  403096:	6806      	ldr	r6, [r0, #0]
  403098:	f046 0602 	orr.w	r6, r6, #2
  40309c:	6006      	str	r6, [r0, #0]
	REG_PIOA_PUER |= PIO_PUER_P1;	//enable pull-up resistor
  40309e:	681e      	ldr	r6, [r3, #0]
  4030a0:	f046 0602 	orr.w	r6, r6, #2
  4030a4:	601e      	str	r6, [r3, #0]
	REG_PIOA_IFSCER |= PIO_IFSCER_P1; //turn on slow clock debounce
  4030a6:	680e      	ldr	r6, [r1, #0]
  4030a8:	f046 0602 	orr.w	r6, r6, #2
  4030ac:	600e      	str	r6, [r1, #0]
	REG_PIOA_IFER |= PIO_IFER_P1;	//start debounce filter
  4030ae:	6816      	ldr	r6, [r2, #0]
  4030b0:	f046 0602 	orr.w	r6, r6, #2
  4030b4:	6016      	str	r6, [r2, #0]



	//Set up PA6 as AUX ENC 1 INPUT A
	REG_PIOA_PER |= PIO_PER_P6; //enable PIO controller
  4030b6:	682e      	ldr	r6, [r5, #0]
  4030b8:	f046 0640 	orr.w	r6, r6, #64	; 0x40
  4030bc:	602e      	str	r6, [r5, #0]
	REG_PIOA_ODR |= PIO_ODR_P6; //disable output
  4030be:	6826      	ldr	r6, [r4, #0]
  4030c0:	f046 0640 	orr.w	r6, r6, #64	; 0x40
  4030c4:	6026      	str	r6, [r4, #0]
	REG_PIOA_PPDDR |= PIO_PPDDR_P6; //disable pull-down resistor
  4030c6:	6806      	ldr	r6, [r0, #0]
  4030c8:	f046 0640 	orr.w	r6, r6, #64	; 0x40
  4030cc:	6006      	str	r6, [r0, #0]
	REG_PIOA_PUER |= PIO_PUER_P6;	//enable pull-up resistor
  4030ce:	681e      	ldr	r6, [r3, #0]
  4030d0:	f046 0640 	orr.w	r6, r6, #64	; 0x40
  4030d4:	601e      	str	r6, [r3, #0]
	REG_PIOA_IFSCER |= PIO_IFSCER_P6; //turn on slow clock debounce
  4030d6:	680e      	ldr	r6, [r1, #0]
  4030d8:	f046 0640 	orr.w	r6, r6, #64	; 0x40
  4030dc:	600e      	str	r6, [r1, #0]
	REG_PIOA_IFER |= PIO_IFER_P6;	//start debounce filter
  4030de:	6816      	ldr	r6, [r2, #0]
  4030e0:	f046 0640 	orr.w	r6, r6, #64	; 0x40
  4030e4:	6016      	str	r6, [r2, #0]

	//Set up PA7 as AUX ENC 1 INPUT B
	REG_PIOA_PER |= PIO_PER_P7; //enable PIO controller
  4030e6:	682e      	ldr	r6, [r5, #0]
  4030e8:	f046 0680 	orr.w	r6, r6, #128	; 0x80
  4030ec:	602e      	str	r6, [r5, #0]
	REG_PIOA_ODR |= PIO_ODR_P7; //disable output
  4030ee:	6826      	ldr	r6, [r4, #0]
  4030f0:	f046 0680 	orr.w	r6, r6, #128	; 0x80
  4030f4:	6026      	str	r6, [r4, #0]
	REG_PIOA_PPDDR |= PIO_PPDDR_P7; //disable pull-down resistor
  4030f6:	6806      	ldr	r6, [r0, #0]
  4030f8:	f046 0680 	orr.w	r6, r6, #128	; 0x80
  4030fc:	6006      	str	r6, [r0, #0]
	REG_PIOA_PUER |= PIO_PUER_P7;	//enable pull-up resistor
  4030fe:	681e      	ldr	r6, [r3, #0]
  403100:	f046 0680 	orr.w	r6, r6, #128	; 0x80
  403104:	601e      	str	r6, [r3, #0]
	REG_PIOA_IFSCER |= PIO_IFSCER_P7; //turn on slow clock debounce
  403106:	680e      	ldr	r6, [r1, #0]
  403108:	f046 0680 	orr.w	r6, r6, #128	; 0x80
  40310c:	600e      	str	r6, [r1, #0]
	REG_PIOA_IFER |= PIO_IFER_P7;	//start debounce filte3
  40310e:	6816      	ldr	r6, [r2, #0]
  403110:	f046 0680 	orr.w	r6, r6, #128	; 0x80
  403114:	6016      	str	r6, [r2, #0]


	
	//Set up PA8 as AUX ENC 2 INPUT A
	REG_PIOA_PER |= PIO_PER_P8; //enable PIO controller
  403116:	682e      	ldr	r6, [r5, #0]
  403118:	f446 7680 	orr.w	r6, r6, #256	; 0x100
  40311c:	602e      	str	r6, [r5, #0]
	REG_PIOA_ODR |= PIO_ODR_P8; //disable output
  40311e:	6826      	ldr	r6, [r4, #0]
  403120:	f446 7680 	orr.w	r6, r6, #256	; 0x100
  403124:	6026      	str	r6, [r4, #0]
	REG_PIOA_PPDDR |= PIO_PPDDR_P8; //disable pull-down resistor
  403126:	6806      	ldr	r6, [r0, #0]
  403128:	f446 7680 	orr.w	r6, r6, #256	; 0x100
  40312c:	6006      	str	r6, [r0, #0]
	REG_PIOA_PUER |= PIO_PUER_P8;	//enable pull-up resistor
  40312e:	681e      	ldr	r6, [r3, #0]
  403130:	f446 7680 	orr.w	r6, r6, #256	; 0x100
  403134:	601e      	str	r6, [r3, #0]
	REG_PIOA_IFSCER |= PIO_IFSCER_P8; //turn on slow clock debounce
  403136:	680e      	ldr	r6, [r1, #0]
  403138:	f446 7680 	orr.w	r6, r6, #256	; 0x100
  40313c:	600e      	str	r6, [r1, #0]
	REG_PIOA_IFER |= PIO_IFER_P8;	//start debounce filter
  40313e:	6816      	ldr	r6, [r2, #0]
  403140:	f446 7680 	orr.w	r6, r6, #256	; 0x100
  403144:	6016      	str	r6, [r2, #0]

	//Set up PA9 as AUX ENC 2 INPUT B
	REG_PIOA_PER |= PIO_PER_P9; //enable PIO controller
  403146:	682e      	ldr	r6, [r5, #0]
  403148:	f446 7600 	orr.w	r6, r6, #512	; 0x200
  40314c:	602e      	str	r6, [r5, #0]
	REG_PIOA_ODR |= PIO_ODR_P9; //disable output
  40314e:	6826      	ldr	r6, [r4, #0]
  403150:	f446 7600 	orr.w	r6, r6, #512	; 0x200
  403154:	6026      	str	r6, [r4, #0]
	REG_PIOA_PPDDR |= PIO_PPDDR_P9; //disable pull-down resistor
  403156:	6806      	ldr	r6, [r0, #0]
  403158:	f446 7600 	orr.w	r6, r6, #512	; 0x200
  40315c:	6006      	str	r6, [r0, #0]
	REG_PIOA_PUER |= PIO_PUER_P9;	//enable pull-up resistor
  40315e:	681e      	ldr	r6, [r3, #0]
  403160:	f446 7600 	orr.w	r6, r6, #512	; 0x200
  403164:	601e      	str	r6, [r3, #0]
	REG_PIOA_IFSCER |= PIO_IFSCER_P9; //turn on slow clock debounce
  403166:	680e      	ldr	r6, [r1, #0]
  403168:	f446 7600 	orr.w	r6, r6, #512	; 0x200
  40316c:	600e      	str	r6, [r1, #0]
	REG_PIOA_IFER |= PIO_IFER_P9;	//start debounce filter
  40316e:	6816      	ldr	r6, [r2, #0]
  403170:	f446 7600 	orr.w	r6, r6, #512	; 0x200
  403174:	6016      	str	r6, [r2, #0]



	//Set up PA16 as AUX ENC 3 INPUT A
	REG_PIOA_PER |= PIO_PER_P16; //enable PIO controller
  403176:	682e      	ldr	r6, [r5, #0]
  403178:	f446 3680 	orr.w	r6, r6, #65536	; 0x10000
  40317c:	602e      	str	r6, [r5, #0]
	REG_PIOA_ODR |= PIO_ODR_P16; //disable output
  40317e:	6826      	ldr	r6, [r4, #0]
  403180:	f446 3680 	orr.w	r6, r6, #65536	; 0x10000
  403184:	6026      	str	r6, [r4, #0]
	REG_PIOA_PPDDR |= PIO_PPDDR_P16; //disable pull-down resistor
  403186:	6806      	ldr	r6, [r0, #0]
  403188:	f446 3680 	orr.w	r6, r6, #65536	; 0x10000
  40318c:	6006      	str	r6, [r0, #0]
	REG_PIOA_PUER |= PIO_PUER_P16;	//enable pull-up resistor
  40318e:	681e      	ldr	r6, [r3, #0]
  403190:	f446 3680 	orr.w	r6, r6, #65536	; 0x10000
  403194:	601e      	str	r6, [r3, #0]
	REG_PIOA_IFSCER |= PIO_IFSCER_P16; //turn on slow clock debounce
  403196:	680e      	ldr	r6, [r1, #0]
  403198:	f446 3680 	orr.w	r6, r6, #65536	; 0x10000
  40319c:	600e      	str	r6, [r1, #0]
	REG_PIOA_IFER |= PIO_IFER_P16;	//start debounce filter
  40319e:	6816      	ldr	r6, [r2, #0]
  4031a0:	f446 3680 	orr.w	r6, r6, #65536	; 0x10000
  4031a4:	6016      	str	r6, [r2, #0]

	//Set up PA17 as AUX ENC 3 INPUT B
	REG_PIOA_PER |= PIO_PER_P17; //enable PIO controller
  4031a6:	682e      	ldr	r6, [r5, #0]
  4031a8:	f446 3600 	orr.w	r6, r6, #131072	; 0x20000
  4031ac:	602e      	str	r6, [r5, #0]
	REG_PIOA_ODR |= PIO_ODR_P17; //disable output
  4031ae:	6826      	ldr	r6, [r4, #0]
  4031b0:	f446 3600 	orr.w	r6, r6, #131072	; 0x20000
  4031b4:	6026      	str	r6, [r4, #0]
	REG_PIOA_PPDDR |= PIO_PPDDR_P17; //disable pull-down resistor
  4031b6:	6806      	ldr	r6, [r0, #0]
  4031b8:	f446 3600 	orr.w	r6, r6, #131072	; 0x20000
  4031bc:	6006      	str	r6, [r0, #0]
	REG_PIOA_PUER |= PIO_PUER_P17;	//enable pull-up resistor
  4031be:	681e      	ldr	r6, [r3, #0]
  4031c0:	f446 3600 	orr.w	r6, r6, #131072	; 0x20000
  4031c4:	601e      	str	r6, [r3, #0]
	REG_PIOA_IFSCER |= PIO_IFSCER_P17; //turn on slow clock debounce
  4031c6:	680e      	ldr	r6, [r1, #0]
  4031c8:	f446 3600 	orr.w	r6, r6, #131072	; 0x20000
  4031cc:	600e      	str	r6, [r1, #0]
	REG_PIOA_IFER |= PIO_IFER_P17;	//start debounce filter
  4031ce:	6816      	ldr	r6, [r2, #0]
  4031d0:	f446 3600 	orr.w	r6, r6, #131072	; 0x20000
  4031d4:	6016      	str	r6, [r2, #0]



	//Set up PA20 as AUX ENC 4 INPUT A
	REG_PIOA_PER |= PIO_PER_P20; //enable PIO controller
  4031d6:	682e      	ldr	r6, [r5, #0]
  4031d8:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
  4031dc:	602e      	str	r6, [r5, #0]
	REG_PIOA_ODR |= PIO_ODR_P20; //disable output
  4031de:	6826      	ldr	r6, [r4, #0]
  4031e0:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
  4031e4:	6026      	str	r6, [r4, #0]
	REG_PIOA_PPDDR |= PIO_PPDDR_P20; //disable pull-down resistor
  4031e6:	6806      	ldr	r6, [r0, #0]
  4031e8:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
  4031ec:	6006      	str	r6, [r0, #0]
	REG_PIOA_PUER |= PIO_PUER_P20;	//enable pull-up resistor
  4031ee:	681e      	ldr	r6, [r3, #0]
  4031f0:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
  4031f4:	601e      	str	r6, [r3, #0]
	REG_PIOA_IFSCER |= PIO_IFSCER_P20; //turn on slow clock debounce
  4031f6:	680e      	ldr	r6, [r1, #0]
  4031f8:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
  4031fc:	600e      	str	r6, [r1, #0]
	REG_PIOA_IFER |= PIO_IFER_P20;	//start debounce filter
  4031fe:	6816      	ldr	r6, [r2, #0]
  403200:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
  403204:	6016      	str	r6, [r2, #0]

	//Set up PA21 as AUX ENC 4 INPUT B
	REG_PIOA_PER |= PIO_PER_P21; //enable PIO controller
  403206:	682e      	ldr	r6, [r5, #0]
  403208:	f446 1600 	orr.w	r6, r6, #2097152	; 0x200000
  40320c:	602e      	str	r6, [r5, #0]
	REG_PIOA_ODR |= PIO_ODR_P21; //disable output
  40320e:	6826      	ldr	r6, [r4, #0]
  403210:	f446 1600 	orr.w	r6, r6, #2097152	; 0x200000
  403214:	6026      	str	r6, [r4, #0]
	REG_PIOA_PPDDR |= PIO_PPDDR_P21; //disable pull-down resistor
  403216:	6806      	ldr	r6, [r0, #0]
  403218:	f446 1600 	orr.w	r6, r6, #2097152	; 0x200000
  40321c:	6006      	str	r6, [r0, #0]
	REG_PIOA_PUER |= PIO_PUER_P21;	//enable pull-up resistor
  40321e:	681e      	ldr	r6, [r3, #0]
  403220:	f446 1600 	orr.w	r6, r6, #2097152	; 0x200000
  403224:	601e      	str	r6, [r3, #0]
	REG_PIOA_IFSCER |= PIO_IFSCER_P21; //turn on slow clock debounce
  403226:	680e      	ldr	r6, [r1, #0]
  403228:	f446 1600 	orr.w	r6, r6, #2097152	; 0x200000
  40322c:	600e      	str	r6, [r1, #0]
	REG_PIOA_IFER |= PIO_IFER_P21;	//start debounce filter
  40322e:	6816      	ldr	r6, [r2, #0]
  403230:	f446 1600 	orr.w	r6, r6, #2097152	; 0x200000
  403234:	6016      	str	r6, [r2, #0]



	//Set up PA22 as AUX ENC 5 INPUT A
	REG_PIOA_PER |= PIO_PER_P22; //enable PIO controller
  403236:	682e      	ldr	r6, [r5, #0]
  403238:	f446 0680 	orr.w	r6, r6, #4194304	; 0x400000
  40323c:	602e      	str	r6, [r5, #0]
	REG_PIOA_ODR |= PIO_ODR_P22; //disable output
  40323e:	6826      	ldr	r6, [r4, #0]
  403240:	f446 0680 	orr.w	r6, r6, #4194304	; 0x400000
  403244:	6026      	str	r6, [r4, #0]
	REG_PIOA_PPDDR |= PIO_PPDDR_P22; //disable pull-down resistor
  403246:	6806      	ldr	r6, [r0, #0]
  403248:	f446 0680 	orr.w	r6, r6, #4194304	; 0x400000
  40324c:	6006      	str	r6, [r0, #0]
	REG_PIOA_PUER |= PIO_PUER_P22;	//enable pull-up resistor
  40324e:	681e      	ldr	r6, [r3, #0]
  403250:	f446 0680 	orr.w	r6, r6, #4194304	; 0x400000
  403254:	601e      	str	r6, [r3, #0]
	REG_PIOA_IFSCER |= PIO_IFSCER_P22; //turn on slow clock debounce
  403256:	680e      	ldr	r6, [r1, #0]
  403258:	f446 0680 	orr.w	r6, r6, #4194304	; 0x400000
  40325c:	600e      	str	r6, [r1, #0]
	REG_PIOA_IFER |= PIO_IFER_P22;	//start debounce filter
  40325e:	6816      	ldr	r6, [r2, #0]
  403260:	f446 0680 	orr.w	r6, r6, #4194304	; 0x400000
  403264:	6016      	str	r6, [r2, #0]

	//Set up PA23 as AUX ENC 5 INPUT B
	REG_PIOA_PER |= PIO_PER_P23; //enable PIO controller
  403266:	682e      	ldr	r6, [r5, #0]
  403268:	f446 0600 	orr.w	r6, r6, #8388608	; 0x800000
  40326c:	602e      	str	r6, [r5, #0]
	REG_PIOA_ODR |= PIO_ODR_P23; //disable output
  40326e:	6826      	ldr	r6, [r4, #0]
  403270:	f446 0600 	orr.w	r6, r6, #8388608	; 0x800000
  403274:	6026      	str	r6, [r4, #0]
	REG_PIOA_PPDDR |= PIO_PPDDR_P23; //disable pull-down resistor
  403276:	6806      	ldr	r6, [r0, #0]
  403278:	f446 0600 	orr.w	r6, r6, #8388608	; 0x800000
  40327c:	6006      	str	r6, [r0, #0]
	REG_PIOA_PUER |= PIO_PUER_P23;	//enable pull-up resistor
  40327e:	681e      	ldr	r6, [r3, #0]
  403280:	f446 0600 	orr.w	r6, r6, #8388608	; 0x800000
  403284:	601e      	str	r6, [r3, #0]
  403286:	e01f      	b.n	4032c8 <init_sequencer_controls+0x2e8>
  403288:	20000706 	.word	0x20000706
  40328c:	20000702 	.word	0x20000702
  403290:	2000070d 	.word	0x2000070d
  403294:	20000701 	.word	0x20000701
  403298:	2000070c 	.word	0x2000070c
  40329c:	20000700 	.word	0x20000700
  4032a0:	20000704 	.word	0x20000704
  4032a4:	20000703 	.word	0x20000703
  4032a8:	2000070e 	.word	0x2000070e
  4032ac:	400e0410 	.word	0x400e0410
  4032b0:	400e0e00 	.word	0x400e0e00
  4032b4:	400e0e14 	.word	0x400e0e14
  4032b8:	400e0e90 	.word	0x400e0e90
  4032bc:	400e0e64 	.word	0x400e0e64
  4032c0:	400e0e10 	.word	0x400e0e10
  4032c4:	400e0e20 	.word	0x400e0e20
	REG_PIOA_IFSCER |= PIO_IFSCER_P23; //turn on slow clock debounce
  4032c8:	680e      	ldr	r6, [r1, #0]
  4032ca:	f446 0600 	orr.w	r6, r6, #8388608	; 0x800000
  4032ce:	600e      	str	r6, [r1, #0]
	REG_PIOA_IFER |= PIO_IFER_P23;	//start debounce filter
  4032d0:	6816      	ldr	r6, [r2, #0]
  4032d2:	f446 0600 	orr.w	r6, r6, #8388608	; 0x800000
  4032d6:	6016      	str	r6, [r2, #0]



	//Set up PA24 as AUX ENC 6 INPUT A
	REG_PIOA_PER |= PIO_PER_P24; //enable PIO controller
  4032d8:	682e      	ldr	r6, [r5, #0]
  4032da:	f046 7680 	orr.w	r6, r6, #16777216	; 0x1000000
  4032de:	602e      	str	r6, [r5, #0]
	REG_PIOA_ODR |= PIO_ODR_P24; //disable output
  4032e0:	6826      	ldr	r6, [r4, #0]
  4032e2:	f046 7680 	orr.w	r6, r6, #16777216	; 0x1000000
  4032e6:	6026      	str	r6, [r4, #0]
	REG_PIOA_PPDDR |= PIO_PPDDR_P24; //disable pull-down resistor
  4032e8:	6806      	ldr	r6, [r0, #0]
  4032ea:	f046 7680 	orr.w	r6, r6, #16777216	; 0x1000000
  4032ee:	6006      	str	r6, [r0, #0]
	REG_PIOA_PUER |= PIO_PUER_P24;	//enable pull-up resistor
  4032f0:	681e      	ldr	r6, [r3, #0]
  4032f2:	f046 7680 	orr.w	r6, r6, #16777216	; 0x1000000
  4032f6:	601e      	str	r6, [r3, #0]
	REG_PIOA_IFSCER |= PIO_IFSCER_P24; //turn on slow clock debounce
  4032f8:	680e      	ldr	r6, [r1, #0]
  4032fa:	f046 7680 	orr.w	r6, r6, #16777216	; 0x1000000
  4032fe:	600e      	str	r6, [r1, #0]
	REG_PIOA_IFER |= PIO_IFER_P24;	//start debounce filter
  403300:	6816      	ldr	r6, [r2, #0]
  403302:	f046 7680 	orr.w	r6, r6, #16777216	; 0x1000000
  403306:	6016      	str	r6, [r2, #0]

	//Set up PA25 as AUX ENC 6 INPUT B
	REG_PIOA_PER |= PIO_PER_P25; //enable PIO controller
  403308:	682e      	ldr	r6, [r5, #0]
  40330a:	f046 7600 	orr.w	r6, r6, #33554432	; 0x2000000
  40330e:	602e      	str	r6, [r5, #0]
	REG_PIOA_ODR |= PIO_ODR_P25; //disable output
  403310:	6826      	ldr	r6, [r4, #0]
  403312:	f046 7600 	orr.w	r6, r6, #33554432	; 0x2000000
  403316:	6026      	str	r6, [r4, #0]
	REG_PIOA_PPDDR |= PIO_PPDDR_P25; //disable pull-down resistor
  403318:	6806      	ldr	r6, [r0, #0]
  40331a:	f046 7600 	orr.w	r6, r6, #33554432	; 0x2000000
  40331e:	6006      	str	r6, [r0, #0]
	REG_PIOA_PUER |= PIO_PUER_P25;	//enable pull-up resistor
  403320:	681e      	ldr	r6, [r3, #0]
  403322:	f046 7600 	orr.w	r6, r6, #33554432	; 0x2000000
  403326:	601e      	str	r6, [r3, #0]
	REG_PIOA_IFSCER |= PIO_IFSCER_P25; //turn on slow clock debounce
  403328:	680e      	ldr	r6, [r1, #0]
  40332a:	f046 7600 	orr.w	r6, r6, #33554432	; 0x2000000
  40332e:	600e      	str	r6, [r1, #0]
	REG_PIOA_IFER |= PIO_IFER_P25;	//start debounce filter
  403330:	6816      	ldr	r6, [r2, #0]
  403332:	f046 7600 	orr.w	r6, r6, #33554432	; 0x2000000
  403336:	6016      	str	r6, [r2, #0]



	//Set up PA26 as AUX ENC 7 INPUT A
	REG_PIOA_PER |= PIO_PER_P26; //enable PIO controller
  403338:	682e      	ldr	r6, [r5, #0]
  40333a:	f046 6680 	orr.w	r6, r6, #67108864	; 0x4000000
  40333e:	602e      	str	r6, [r5, #0]
	REG_PIOA_ODR |= PIO_ODR_P26; //disable output
  403340:	6826      	ldr	r6, [r4, #0]
  403342:	f046 6680 	orr.w	r6, r6, #67108864	; 0x4000000
  403346:	6026      	str	r6, [r4, #0]
	REG_PIOA_PPDDR |= PIO_PPDDR_P26; //disable pull-down resistor
  403348:	6806      	ldr	r6, [r0, #0]
  40334a:	f046 6680 	orr.w	r6, r6, #67108864	; 0x4000000
  40334e:	6006      	str	r6, [r0, #0]
	REG_PIOA_PUER |= PIO_PUER_P26;	//enable pull-up resistor
  403350:	681e      	ldr	r6, [r3, #0]
  403352:	f046 6680 	orr.w	r6, r6, #67108864	; 0x4000000
  403356:	601e      	str	r6, [r3, #0]
	REG_PIOA_IFSCER |= PIO_IFSCER_P26; //turn on slow clock debounce
  403358:	680e      	ldr	r6, [r1, #0]
  40335a:	f046 6680 	orr.w	r6, r6, #67108864	; 0x4000000
  40335e:	600e      	str	r6, [r1, #0]
	REG_PIOA_IFER |= PIO_IFER_P26;	//start debounce filter
  403360:	6816      	ldr	r6, [r2, #0]
  403362:	f046 6680 	orr.w	r6, r6, #67108864	; 0x4000000
  403366:	6016      	str	r6, [r2, #0]

	//Set up PA27 as AUX ENC 7 INPUT B
	REG_PIOA_PER |= PIO_PER_P27; //enable PIO controller
  403368:	682e      	ldr	r6, [r5, #0]
  40336a:	f046 6600 	orr.w	r6, r6, #134217728	; 0x8000000
  40336e:	602e      	str	r6, [r5, #0]
	REG_PIOA_ODR |= PIO_ODR_P27; //disable output
  403370:	6825      	ldr	r5, [r4, #0]
  403372:	f045 6500 	orr.w	r5, r5, #134217728	; 0x8000000
  403376:	6025      	str	r5, [r4, #0]
	REG_PIOA_PPDDR |= PIO_PPDDR_P27; //disable pull-down resistor
  403378:	6804      	ldr	r4, [r0, #0]
  40337a:	f044 6400 	orr.w	r4, r4, #134217728	; 0x8000000
  40337e:	6004      	str	r4, [r0, #0]
	REG_PIOA_PUER |= PIO_PUER_P27;	//enable pull-up resistor
  403380:	6818      	ldr	r0, [r3, #0]
  403382:	f040 6000 	orr.w	r0, r0, #134217728	; 0x8000000
  403386:	6018      	str	r0, [r3, #0]
	REG_PIOA_IFSCER |= PIO_IFSCER_P27; //turn on slow clock debounce
  403388:	680b      	ldr	r3, [r1, #0]
  40338a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
  40338e:	600b      	str	r3, [r1, #0]
	REG_PIOA_IFER |= PIO_IFER_P27;	//start debounce filter
  403390:	6813      	ldr	r3, [r2, #0]
  403392:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
  403396:	6013      	str	r3, [r2, #0]


	/**************			CONFIGURE AUX ENCODER INTERRUPTS			**************/

	uint32_t flag_clear = REG_PIOA_ISR;	//clear left over interrupt flags
  403398:	4b4d      	ldr	r3, [pc, #308]	; (4034d0 <init_sequencer_controls+0x4f0>)
  40339a:	681b      	ldr	r3, [r3, #0]

	//configure interrupt for pause/play button
	REG_PIOA_IER |= PIO_IER_P2;			//enable input rising edge interrupt
  40339c:	4b4d      	ldr	r3, [pc, #308]	; (4034d4 <init_sequencer_controls+0x4f4>)
  40339e:	6818      	ldr	r0, [r3, #0]
  4033a0:	f040 0004 	orr.w	r0, r0, #4
  4033a4:	6018      	str	r0, [r3, #0]
	REG_PIOA_FELLSR |= PIO_FELLSR_P2;
  4033a6:	4c4c      	ldr	r4, [pc, #304]	; (4034d8 <init_sequencer_controls+0x4f8>)
  4033a8:	6820      	ldr	r0, [r4, #0]
  4033aa:	f040 0004 	orr.w	r0, r0, #4
  4033ae:	6020      	str	r0, [r4, #0]
	REG_PIOA_IFSCER |= PIO_IFSCER_P2; //turn on slow clock debounce
  4033b0:	6808      	ldr	r0, [r1, #0]
  4033b2:	f040 0004 	orr.w	r0, r0, #4
  4033b6:	6008      	str	r0, [r1, #0]
	REG_PIOA_IFER |= PIO_IFER_P2;	//start debounce filter
  4033b8:	6811      	ldr	r1, [r2, #0]
  4033ba:	f041 0104 	orr.w	r1, r1, #4
  4033be:	6011      	str	r1, [r2, #0]

	//Enable interrupts for Aux Encoder 0
	REG_PIOA_IER |= PIO_IER_P0;			//enable input rising edge interrupt
  4033c0:	681a      	ldr	r2, [r3, #0]
  4033c2:	f042 0201 	orr.w	r2, r2, #1
  4033c6:	601a      	str	r2, [r3, #0]
	REG_PIOA_REHLSR |= PIO_REHLSR_P0;
  4033c8:	4a44      	ldr	r2, [pc, #272]	; (4034dc <init_sequencer_controls+0x4fc>)
  4033ca:	6811      	ldr	r1, [r2, #0]
  4033cc:	f041 0101 	orr.w	r1, r1, #1
  4033d0:	6011      	str	r1, [r2, #0]
	REG_PIOA_IER |= PIO_IER_P1;			//enable input rising edge interrupt
  4033d2:	6819      	ldr	r1, [r3, #0]
  4033d4:	f041 0102 	orr.w	r1, r1, #2
  4033d8:	6019      	str	r1, [r3, #0]
	REG_PIOA_REHLSR |= PIO_REHLSR_P1;
  4033da:	6811      	ldr	r1, [r2, #0]
  4033dc:	f041 0102 	orr.w	r1, r1, #2
  4033e0:	6011      	str	r1, [r2, #0]

	//Enable interrupts for Aux Encoder 1
	REG_PIOA_IER |= PIO_IER_P6;			//enable input rising edge interrupt
  4033e2:	6819      	ldr	r1, [r3, #0]
  4033e4:	f041 0140 	orr.w	r1, r1, #64	; 0x40
  4033e8:	6019      	str	r1, [r3, #0]
	REG_PIOA_REHLSR |= PIO_REHLSR_P6;
  4033ea:	6811      	ldr	r1, [r2, #0]
  4033ec:	f041 0140 	orr.w	r1, r1, #64	; 0x40
  4033f0:	6011      	str	r1, [r2, #0]
	REG_PIOA_IER |= PIO_IER_P7;			//enable input rising edge interrupt
  4033f2:	6819      	ldr	r1, [r3, #0]
  4033f4:	f041 0180 	orr.w	r1, r1, #128	; 0x80
  4033f8:	6019      	str	r1, [r3, #0]
	REG_PIOA_REHLSR |= PIO_REHLSR_P7;
  4033fa:	6811      	ldr	r1, [r2, #0]
  4033fc:	f041 0180 	orr.w	r1, r1, #128	; 0x80
  403400:	6011      	str	r1, [r2, #0]

	//Enable interrupts for Aux Encoder 2
	REG_PIOA_IER |= PIO_IER_P8;			//enable input rising edge interrupt
  403402:	6819      	ldr	r1, [r3, #0]
  403404:	f441 7180 	orr.w	r1, r1, #256	; 0x100
  403408:	6019      	str	r1, [r3, #0]
	REG_PIOA_REHLSR |= PIO_REHLSR_P8;
  40340a:	6811      	ldr	r1, [r2, #0]
  40340c:	f441 7180 	orr.w	r1, r1, #256	; 0x100
  403410:	6011      	str	r1, [r2, #0]
	REG_PIOA_IER |= PIO_IER_P9;			//enable input rising edge interrupt
  403412:	6819      	ldr	r1, [r3, #0]
  403414:	f441 7100 	orr.w	r1, r1, #512	; 0x200
  403418:	6019      	str	r1, [r3, #0]
	REG_PIOA_REHLSR |= PIO_REHLSR_P9;
  40341a:	6811      	ldr	r1, [r2, #0]
  40341c:	f441 7100 	orr.w	r1, r1, #512	; 0x200
  403420:	6011      	str	r1, [r2, #0]

	//Enable interrupts for Aux Encoder 3
	REG_PIOA_IER |= PIO_IER_P16;			//enable input rising edge interrupt
  403422:	6819      	ldr	r1, [r3, #0]
  403424:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
  403428:	6019      	str	r1, [r3, #0]
	REG_PIOA_REHLSR |= PIO_REHLSR_P16;
  40342a:	6811      	ldr	r1, [r2, #0]
  40342c:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
  403430:	6011      	str	r1, [r2, #0]
	REG_PIOA_IER |= PIO_IER_P17;			//enable input rising edge interrupt
  403432:	6819      	ldr	r1, [r3, #0]
  403434:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
  403438:	6019      	str	r1, [r3, #0]
	REG_PIOA_REHLSR |= PIO_REHLSR_P17;
  40343a:	6811      	ldr	r1, [r2, #0]
  40343c:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
  403440:	6011      	str	r1, [r2, #0]

	//Enable interrupts for Aux Encoder 4
	REG_PIOA_IER |= PIO_IER_P20;			//enable input rising edge interrupt
  403442:	6819      	ldr	r1, [r3, #0]
  403444:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  403448:	6019      	str	r1, [r3, #0]
	REG_PIOA_REHLSR |= PIO_REHLSR_P20;
  40344a:	6811      	ldr	r1, [r2, #0]
  40344c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  403450:	6011      	str	r1, [r2, #0]
	REG_PIOA_IER |= PIO_IER_P21;			//enable input rising edge interrupt
  403452:	6819      	ldr	r1, [r3, #0]
  403454:	f441 1100 	orr.w	r1, r1, #2097152	; 0x200000
  403458:	6019      	str	r1, [r3, #0]
	REG_PIOA_REHLSR |= PIO_REHLSR_P21;
  40345a:	6811      	ldr	r1, [r2, #0]
  40345c:	f441 1100 	orr.w	r1, r1, #2097152	; 0x200000
  403460:	6011      	str	r1, [r2, #0]

	//Enable interrupts for Aux Encoder 5
	REG_PIOA_IER |= PIO_IER_P22;			//enable input rising edge interrupt
  403462:	6819      	ldr	r1, [r3, #0]
  403464:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
  403468:	6019      	str	r1, [r3, #0]
	REG_PIOA_REHLSR |= PIO_REHLSR_P22;
  40346a:	6811      	ldr	r1, [r2, #0]
  40346c:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
  403470:	6011      	str	r1, [r2, #0]
	REG_PIOA_IER |= PIO_IER_P23;			//enable input rising edge interrupt
  403472:	6819      	ldr	r1, [r3, #0]
  403474:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
  403478:	6019      	str	r1, [r3, #0]
	REG_PIOA_REHLSR |= PIO_REHLSR_P23;
  40347a:	6811      	ldr	r1, [r2, #0]
  40347c:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
  403480:	6011      	str	r1, [r2, #0]

	//Enable interrupts for Aux Encoder 6
	REG_PIOA_IER |= PIO_IER_P24;			//enable input rising edge interrupt
  403482:	6819      	ldr	r1, [r3, #0]
  403484:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
  403488:	6019      	str	r1, [r3, #0]
	REG_PIOA_REHLSR |= PIO_REHLSR_P24;
  40348a:	6811      	ldr	r1, [r2, #0]
  40348c:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
  403490:	6011      	str	r1, [r2, #0]
	REG_PIOA_IER |= PIO_IER_P25;			//enable input rising edge interrupt
  403492:	6819      	ldr	r1, [r3, #0]
  403494:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
  403498:	6019      	str	r1, [r3, #0]
	REG_PIOA_REHLSR |= PIO_REHLSR_P25;
  40349a:	6811      	ldr	r1, [r2, #0]
  40349c:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
  4034a0:	6011      	str	r1, [r2, #0]

	//Enable interrupts for Aux Encoder 7
	REG_PIOA_IER |= PIO_IER_P26;			//enable input rising edge interrupt
  4034a2:	6819      	ldr	r1, [r3, #0]
  4034a4:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
  4034a8:	6019      	str	r1, [r3, #0]
	REG_PIOA_REHLSR |= PIO_REHLSR_P26;
  4034aa:	6811      	ldr	r1, [r2, #0]
  4034ac:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
  4034b0:	6011      	str	r1, [r2, #0]
	REG_PIOA_IER |= PIO_IER_P27;			//enable input rising edge interrupt
  4034b2:	6819      	ldr	r1, [r3, #0]
  4034b4:	f041 6100 	orr.w	r1, r1, #134217728	; 0x8000000
  4034b8:	6019      	str	r1, [r3, #0]
	REG_PIOA_REHLSR |= PIO_REHLSR_P27;
  4034ba:	6813      	ldr	r3, [r2, #0]
  4034bc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
  4034c0:	6013      	str	r3, [r2, #0]
  4034c2:	f44f 6200 	mov.w	r2, #2048	; 0x800
  4034c6:	4b06      	ldr	r3, [pc, #24]	; (4034e0 <init_sequencer_controls+0x500>)
  4034c8:	601a      	str	r2, [r3, #0]

	NVIC_EnableIRQ(PIOA_IRQn);			//enable PORT A interrupts


 }
  4034ca:	bc70      	pop	{r4, r5, r6}
  4034cc:	4770      	bx	lr
  4034ce:	bf00      	nop
  4034d0:	400e0e4c 	.word	0x400e0e4c
  4034d4:	400e0e40 	.word	0x400e0e40
  4034d8:	400e0ed0 	.word	0x400e0ed0
  4034dc:	400e0ed4 	.word	0x400e0ed4
  4034e0:	e000e100 	.word	0xe000e100

004034e4 <PIOA_Handler>:


 void PIOA_Handler(){
  4034e4:	b538      	push	{r3, r4, r5, lr}

	 uint32_t status = REG_PIOA_ISR;	//read PIOC interrupt status & clear interrupt flags
  4034e6:	4b49      	ldr	r3, [pc, #292]	; (40360c <PIOA_Handler+0x128>)
  4034e8:	681b      	ldr	r3, [r3, #0]

	 //check if Aux Encoder 1 was rotated
	 if ( (status & PIO_ISR_P0) || (status & PIO_ISR_P1) ){
  4034ea:	f013 0f03 	tst.w	r3, #3
  4034ee:	d005      	beq.n	4034fc <PIOA_Handler+0x18>
		 control_direction(PIO_ODSR_P0, PIO_ODSR_P1, 0);
  4034f0:	2200      	movs	r2, #0
  4034f2:	2102      	movs	r1, #2
  4034f4:	2001      	movs	r0, #1
  4034f6:	4b46      	ldr	r3, [pc, #280]	; (403610 <PIOA_Handler+0x12c>)
  4034f8:	4798      	blx	r3
  4034fa:	bd38      	pop	{r3, r4, r5, pc}
	 }
	 
	 //check if Pause/Play button was pushed
	 else if ( (status & PIO_ISR_P2) ){
  4034fc:	f013 0f04 	tst.w	r3, #4
  403500:	d036      	beq.n	403570 <PIOA_Handler+0x8c>
		pause_count++;
  403502:	4a44      	ldr	r2, [pc, #272]	; (403614 <PIOA_Handler+0x130>)
  403504:	7813      	ldrb	r3, [r2, #0]
  403506:	3301      	adds	r3, #1
  403508:	b2db      	uxtb	r3, r3
  40350a:	7013      	strb	r3, [r2, #0]
		if (pause_count == 2){
  40350c:	2b02      	cmp	r3, #2
  40350e:	d17c      	bne.n	40360a <PIOA_Handler+0x126>
			if (pause == 0){
  403510:	4b41      	ldr	r3, [pc, #260]	; (403618 <PIOA_Handler+0x134>)
  403512:	781b      	ldrb	r3, [r3, #0]
  403514:	b9cb      	cbnz	r3, 40354a <PIOA_Handler+0x66>
				REG_PIOA_CODR |= PIO_CODR_P18;
  403516:	4a41      	ldr	r2, [pc, #260]	; (40361c <PIOA_Handler+0x138>)
  403518:	6813      	ldr	r3, [r2, #0]
  40351a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
  40351e:	6013      	str	r3, [r2, #0]
				pause = 1;
  403520:	2501      	movs	r5, #1
  403522:	4b3d      	ldr	r3, [pc, #244]	; (403618 <PIOA_Handler+0x134>)
  403524:	701d      	strb	r5, [r3, #0]

				DAC_write_gate_off(CHANNEL_1);
  403526:	2000      	movs	r0, #0
  403528:	4c3d      	ldr	r4, [pc, #244]	; (403620 <PIOA_Handler+0x13c>)
  40352a:	47a0      	blx	r4
				DAC_write_gate_off(CHANNEL_2);
  40352c:	4628      	mov	r0, r5
  40352e:	47a0      	blx	r4
				DAC_write_gate_off(CHANNEL_3);
  403530:	2002      	movs	r0, #2
  403532:	47a0      	blx	r4
				DAC_write_gate_off(CHANNEL_4);
  403534:	2003      	movs	r0, #3
  403536:	47a0      	blx	r4

				overflow_count = 0;	
  403538:	2200      	movs	r2, #0
  40353a:	4b3a      	ldr	r3, [pc, #232]	; (403624 <PIOA_Handler+0x140>)
  40353c:	801a      	strh	r2, [r3, #0]
				REG_TC0_CCR0 |= TC_CCR_CLKDIS;
  40353e:	4a3a      	ldr	r2, [pc, #232]	; (403628 <PIOA_Handler+0x144>)
  403540:	6813      	ldr	r3, [r2, #0]
  403542:	f043 0302 	orr.w	r3, r3, #2
  403546:	6013      	str	r3, [r2, #0]
  403548:	e00e      	b.n	403568 <PIOA_Handler+0x84>
			}
			else if (pause == 1){
  40354a:	2b01      	cmp	r3, #1
  40354c:	d10c      	bne.n	403568 <PIOA_Handler+0x84>
				REG_PIOA_SODR |= PIO_SODR_P18; 
  40354e:	4a37      	ldr	r2, [pc, #220]	; (40362c <PIOA_Handler+0x148>)
  403550:	6813      	ldr	r3, [r2, #0]
  403552:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
  403556:	6013      	str	r3, [r2, #0]
				pause = 0;
  403558:	2200      	movs	r2, #0
  40355a:	4b2f      	ldr	r3, [pc, #188]	; (403618 <PIOA_Handler+0x134>)
  40355c:	701a      	strb	r2, [r3, #0]
				REG_TC0_CCR0 |= TC_CCR_CLKEN | TC_CCR_SWTRG;
  40355e:	4a32      	ldr	r2, [pc, #200]	; (403628 <PIOA_Handler+0x144>)
  403560:	6813      	ldr	r3, [r2, #0]
  403562:	f043 0305 	orr.w	r3, r3, #5
  403566:	6013      	str	r3, [r2, #0]
			}
			pause_count= 0;
  403568:	2200      	movs	r2, #0
  40356a:	4b2a      	ldr	r3, [pc, #168]	; (403614 <PIOA_Handler+0x130>)
  40356c:	701a      	strb	r2, [r3, #0]
  40356e:	bd38      	pop	{r3, r4, r5, pc}
		}
	 }

	 //check if Aux Encoder 2 was rotated
	 else if ( (status & PIO_ISR_P6) || (status & PIO_ISR_P7) ){
  403570:	f013 0fc0 	tst.w	r3, #192	; 0xc0
  403574:	d005      	beq.n	403582 <PIOA_Handler+0x9e>
		 control_direction(PIO_ODSR_P6, PIO_ODSR_P7, 1);
  403576:	2201      	movs	r2, #1
  403578:	2180      	movs	r1, #128	; 0x80
  40357a:	2040      	movs	r0, #64	; 0x40
  40357c:	4b24      	ldr	r3, [pc, #144]	; (403610 <PIOA_Handler+0x12c>)
  40357e:	4798      	blx	r3
  403580:	bd38      	pop	{r3, r4, r5, pc}
	 }

	 //check if Aux Encoder 3 was rotated
	 else if ( (status & PIO_ISR_P8) || (status & PIO_ISR_P9) ){
  403582:	f413 7f40 	tst.w	r3, #768	; 0x300
  403586:	d007      	beq.n	403598 <PIOA_Handler+0xb4>
		control_direction(PIO_ODSR_P8, PIO_ODSR_P9, 2);
  403588:	2202      	movs	r2, #2
  40358a:	f44f 7100 	mov.w	r1, #512	; 0x200
  40358e:	f44f 7080 	mov.w	r0, #256	; 0x100
  403592:	4b1f      	ldr	r3, [pc, #124]	; (403610 <PIOA_Handler+0x12c>)
  403594:	4798      	blx	r3
  403596:	bd38      	pop	{r3, r4, r5, pc}
	 }

	 else if ( (status & PIO_ISR_P10) ){
  403598:	f413 6f80 	tst.w	r3, #1024	; 0x400
  40359c:	d135      	bne.n	40360a <PIOA_Handler+0x126>
		/***************CLOCK IN INT***************/
	 }

	 //check if Aux Encoder 4 was rotated
	 else if ( (status & PIO_ISR_P16) || (status & PIO_ISR_P17) ){
  40359e:	f413 3f40 	tst.w	r3, #196608	; 0x30000
  4035a2:	d007      	beq.n	4035b4 <PIOA_Handler+0xd0>
		control_direction(PIO_ODSR_P16, PIO_ODSR_P17, 3);
  4035a4:	2203      	movs	r2, #3
  4035a6:	f44f 3100 	mov.w	r1, #131072	; 0x20000
  4035aa:	f44f 3080 	mov.w	r0, #65536	; 0x10000
  4035ae:	4b18      	ldr	r3, [pc, #96]	; (403610 <PIOA_Handler+0x12c>)
  4035b0:	4798      	blx	r3
  4035b2:	bd38      	pop	{r3, r4, r5, pc}
	 }

	 //check if Aux Encoder 5 was rotated
	 else if ( (status & PIO_ISR_P20) || (status & PIO_ISR_P21) ){
  4035b4:	f413 1f40 	tst.w	r3, #3145728	; 0x300000
  4035b8:	d007      	beq.n	4035ca <PIOA_Handler+0xe6>
		control_direction(PIO_ODSR_P20, PIO_ODSR_P21, 4);
  4035ba:	2204      	movs	r2, #4
  4035bc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
  4035c0:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  4035c4:	4b12      	ldr	r3, [pc, #72]	; (403610 <PIOA_Handler+0x12c>)
  4035c6:	4798      	blx	r3
  4035c8:	bd38      	pop	{r3, r4, r5, pc}
	 }

	 //check if Aux Encoder 6 was rotated
	 else if ( (status & PIO_ISR_P22) || (status & PIO_ISR_P23) ){
  4035ca:	f413 0f40 	tst.w	r3, #12582912	; 0xc00000
  4035ce:	d007      	beq.n	4035e0 <PIOA_Handler+0xfc>
		control_direction(PIO_ODSR_P22, PIO_ODSR_P23, 5);
  4035d0:	2205      	movs	r2, #5
  4035d2:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
  4035d6:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
  4035da:	4b0d      	ldr	r3, [pc, #52]	; (403610 <PIOA_Handler+0x12c>)
  4035dc:	4798      	blx	r3
  4035de:	bd38      	pop	{r3, r4, r5, pc}
	 }

	 //check if Aux Encoder 7 was rotated
	 else if ( (status & PIO_ISR_P24) || (status & PIO_ISR_P25) ){
  4035e0:	f013 7f40 	tst.w	r3, #50331648	; 0x3000000
  4035e4:	d007      	beq.n	4035f6 <PIOA_Handler+0x112>
		 control_direction(PIO_ODSR_P24, PIO_ODSR_P25, 6);
  4035e6:	2206      	movs	r2, #6
  4035e8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
  4035ec:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
  4035f0:	4b07      	ldr	r3, [pc, #28]	; (403610 <PIOA_Handler+0x12c>)
  4035f2:	4798      	blx	r3
  4035f4:	bd38      	pop	{r3, r4, r5, pc}
	 }
	 
	 //check if Aux Encoder 8 was rotated
	 else if ( (status & PIO_ISR_P26) || (status & PIO_ISR_P27) ){
  4035f6:	f013 6f40 	tst.w	r3, #201326592	; 0xc000000
  4035fa:	d006      	beq.n	40360a <PIOA_Handler+0x126>
		 control_direction(PIO_ODSR_P26, PIO_ODSR_P27, 7);
  4035fc:	2207      	movs	r2, #7
  4035fe:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  403602:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
  403606:	4b02      	ldr	r3, [pc, #8]	; (403610 <PIOA_Handler+0x12c>)
  403608:	4798      	blx	r3
  40360a:	bd38      	pop	{r3, r4, r5, pc}
  40360c:	400e0e4c 	.word	0x400e0e4c
  403610:	00402a79 	.word	0x00402a79
  403614:	20000704 	.word	0x20000704
  403618:	20000700 	.word	0x20000700
  40361c:	400e0e34 	.word	0x400e0e34
  403620:	00400461 	.word	0x00400461
  403624:	200006e4 	.word	0x200006e4
  403628:	40010000 	.word	0x40010000
  40362c:	400e0e30 	.word	0x400e0e30

00403630 <SPI_modeSelect>:
    Mode0		0		1
    Mode1		0		0
    Mode2		1		1
    Mode3		1		0
    */
    if (mode == 0){
  403630:	b948      	cbnz	r0, 403646 <SPI_modeSelect+0x16>
        REG_SPI_CSR &= ~SPI_CSR_CPOL;
  403632:	4b17      	ldr	r3, [pc, #92]	; (403690 <SPI_modeSelect+0x60>)
  403634:	681a      	ldr	r2, [r3, #0]
  403636:	f022 0201 	bic.w	r2, r2, #1
  40363a:	601a      	str	r2, [r3, #0]
        REG_SPI_CSR |= SPI_CSR_NCPHA;
  40363c:	681a      	ldr	r2, [r3, #0]
  40363e:	f042 0202 	orr.w	r2, r2, #2
  403642:	601a      	str	r2, [r3, #0]
  403644:	4770      	bx	lr
    }
    else if (mode == 1){
  403646:	2801      	cmp	r0, #1
  403648:	d109      	bne.n	40365e <SPI_modeSelect+0x2e>
        REG_SPI_CSR &= ~SPI_CSR_CPOL;
  40364a:	4b11      	ldr	r3, [pc, #68]	; (403690 <SPI_modeSelect+0x60>)
  40364c:	681a      	ldr	r2, [r3, #0]
  40364e:	f022 0201 	bic.w	r2, r2, #1
  403652:	601a      	str	r2, [r3, #0]
        REG_SPI_CSR &= ~SPI_CSR_NCPHA;
  403654:	681a      	ldr	r2, [r3, #0]
  403656:	f022 0202 	bic.w	r2, r2, #2
  40365a:	601a      	str	r2, [r3, #0]
  40365c:	4770      	bx	lr
    }
    else if (mode == 2){
  40365e:	2802      	cmp	r0, #2
  403660:	d109      	bne.n	403676 <SPI_modeSelect+0x46>
        REG_SPI_CSR |= SPI_CSR_CPOL;
  403662:	4b0b      	ldr	r3, [pc, #44]	; (403690 <SPI_modeSelect+0x60>)
  403664:	681a      	ldr	r2, [r3, #0]
  403666:	f042 0201 	orr.w	r2, r2, #1
  40366a:	601a      	str	r2, [r3, #0]
        REG_SPI_CSR |= SPI_CSR_NCPHA;
  40366c:	681a      	ldr	r2, [r3, #0]
  40366e:	f042 0202 	orr.w	r2, r2, #2
  403672:	601a      	str	r2, [r3, #0]
  403674:	4770      	bx	lr
    }
    else if (mode == 3){
  403676:	2803      	cmp	r0, #3
  403678:	d108      	bne.n	40368c <SPI_modeSelect+0x5c>
        REG_SPI_CSR |= SPI_CSR_CPOL;
  40367a:	4b05      	ldr	r3, [pc, #20]	; (403690 <SPI_modeSelect+0x60>)
  40367c:	681a      	ldr	r2, [r3, #0]
  40367e:	f042 0201 	orr.w	r2, r2, #1
  403682:	601a      	str	r2, [r3, #0]
        REG_SPI_CSR &= ~SPI_CSR_NCPHA;
  403684:	681a      	ldr	r2, [r3, #0]
  403686:	f022 0202 	bic.w	r2, r2, #2
  40368a:	601a      	str	r2, [r3, #0]
  40368c:	4770      	bx	lr
  40368e:	bf00      	nop
  403690:	40008030 	.word	0x40008030

00403694 <SPI_led_init>:
    }
}

void SPI_led_init(){
  403694:	b508      	push	{r3, lr}

	//enable peripheral clock
	REG_PMC_PCER0 |= PMC_PCER0_PID21;
  403696:	4a14      	ldr	r2, [pc, #80]	; (4036e8 <SPI_led_init+0x54>)
  403698:	6813      	ldr	r3, [r2, #0]
  40369a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
  40369e:	6013      	str	r3, [r2, #0]

	//set spi master mode
	REG_SPI_MR |= SPI_MR_MSTR;
  4036a0:	4b12      	ldr	r3, [pc, #72]	; (4036ec <SPI_led_init+0x58>)
  4036a2:	681a      	ldr	r2, [r3, #0]
  4036a4:	f042 0201 	orr.w	r2, r2, #1
  4036a8:	601a      	str	r2, [r3, #0]

	//set fixed peripheral select(peripheral chosen in SP_MR.PCS instead of SPI_THR.PCS)
	REG_SPI_MR &= ~SPI_MR_PS;
  4036aa:	681a      	ldr	r2, [r3, #0]
  4036ac:	f022 0202 	bic.w	r2, r2, #2
  4036b0:	601a      	str	r2, [r3, #0]
	//REG_SPI_MR |= SPI_MR_PCS(0b1110);

	//set polarity and clock phase to rising edge sample, falling edge shift
	SPI_modeSelect(0);
  4036b2:	2000      	movs	r0, #0
  4036b4:	4b0e      	ldr	r3, [pc, #56]	; (4036f0 <SPI_led_init+0x5c>)
  4036b6:	4798      	blx	r3

	//set clock generator (1 = peripheral clock rate), otherwise a divisor
	//SCBR = fperipheral clock / SPCK Bit Rate
	REG_SPI_CSR |= SPI_CSR_SCBR(5);
  4036b8:	4a0e      	ldr	r2, [pc, #56]	; (4036f4 <SPI_led_init+0x60>)
  4036ba:	6813      	ldr	r3, [r2, #0]
  4036bc:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
  4036c0:	6013      	str	r3, [r2, #0]

	//chip select remains low after transfer
	//REG_SPI_CSR |= SPI_CSR_CSNAAT;

	//give peripheral control of pins 
	REG_PIOA_PDR |= PIO_PDR_P11; //NPCS0
  4036c2:	4b0d      	ldr	r3, [pc, #52]	; (4036f8 <SPI_led_init+0x64>)
  4036c4:	681a      	ldr	r2, [r3, #0]
  4036c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
  4036ca:	601a      	str	r2, [r3, #0]
	REG_PIOA_PDR |= PIO_PDR_P13; //MOSI
  4036cc:	681a      	ldr	r2, [r3, #0]
  4036ce:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  4036d2:	601a      	str	r2, [r3, #0]
	REG_PIOA_PDR |= PIO_PDR_P14; //SSCK
  4036d4:	681a      	ldr	r2, [r3, #0]
  4036d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
  4036da:	601a      	str	r2, [r3, #0]

	//enable SPI
	REG_SPI_CR |= SPI_CR_SPIEN;
  4036dc:	4a07      	ldr	r2, [pc, #28]	; (4036fc <SPI_led_init+0x68>)
  4036de:	6813      	ldr	r3, [r2, #0]
  4036e0:	f043 0301 	orr.w	r3, r3, #1
  4036e4:	6013      	str	r3, [r2, #0]
  4036e6:	bd08      	pop	{r3, pc}
  4036e8:	400e0410 	.word	0x400e0410
  4036ec:	40008004 	.word	0x40008004
  4036f0:	00403631 	.word	0x00403631
  4036f4:	40008030 	.word	0x40008030
  4036f8:	400e0e04 	.word	0x400e0e04
  4036fc:	40008000 	.word	0x40008000

00403700 <SPI_dac_init>:


}

void SPI_dac_init(){
  403700:	b508      	push	{r3, lr}

	//Chip Selects for the DACs / CVs
	REG_PIOB_PER |= PIO_PER_P13; //enable PIO controller on PB13
  403702:	493a      	ldr	r1, [pc, #232]	; (4037ec <SPI_dac_init+0xec>)
  403704:	680b      	ldr	r3, [r1, #0]
  403706:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  40370a:	600b      	str	r3, [r1, #0]
	REG_PIOB_OER |= PIO_PER_P13; //enable output on pin PB13
  40370c:	4a38      	ldr	r2, [pc, #224]	; (4037f0 <SPI_dac_init+0xf0>)
  40370e:	6813      	ldr	r3, [r2, #0]
  403710:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  403714:	6013      	str	r3, [r2, #0]
	REG_PIOB_SODR |=  PIO_PER_P13;
  403716:	4b37      	ldr	r3, [pc, #220]	; (4037f4 <SPI_dac_init+0xf4>)
  403718:	6818      	ldr	r0, [r3, #0]
  40371a:	f440 5000 	orr.w	r0, r0, #8192	; 0x2000
  40371e:	6018      	str	r0, [r3, #0]

	REG_PIOB_PER |= PIO_PER_P14; //enable PIO controller on PB14
  403720:	6808      	ldr	r0, [r1, #0]
  403722:	f440 4080 	orr.w	r0, r0, #16384	; 0x4000
  403726:	6008      	str	r0, [r1, #0]
	REG_PIOB_OER |= PIO_PER_P14; //enable output on pin PB14
  403728:	6810      	ldr	r0, [r2, #0]
  40372a:	f440 4080 	orr.w	r0, r0, #16384	; 0x4000
  40372e:	6010      	str	r0, [r2, #0]
	REG_PIOB_SODR |=  PIO_PER_P14;
  403730:	6818      	ldr	r0, [r3, #0]
  403732:	f440 4080 	orr.w	r0, r0, #16384	; 0x4000
  403736:	6018      	str	r0, [r3, #0]

	//Outputs for the Gates
	REG_PIOB_PER |= PIO_PER_P0; //enable PIO controller on PB13
  403738:	6808      	ldr	r0, [r1, #0]
  40373a:	f040 0001 	orr.w	r0, r0, #1
  40373e:	6008      	str	r0, [r1, #0]
	REG_PIOB_OER |= PIO_PER_P0; //enable output on pin PB13
  403740:	6810      	ldr	r0, [r2, #0]
  403742:	f040 0001 	orr.w	r0, r0, #1
  403746:	6010      	str	r0, [r2, #0]
	REG_PIOB_SODR |=  PIO_PER_P0;
  403748:	6818      	ldr	r0, [r3, #0]
  40374a:	f040 0001 	orr.w	r0, r0, #1
  40374e:	6018      	str	r0, [r3, #0]

	REG_PIOB_PER |= PIO_PER_P1; //enable PIO controller on PB13
  403750:	6808      	ldr	r0, [r1, #0]
  403752:	f040 0002 	orr.w	r0, r0, #2
  403756:	6008      	str	r0, [r1, #0]
	REG_PIOB_OER |= PIO_PER_P1; //enable output on pin PB13
  403758:	6810      	ldr	r0, [r2, #0]
  40375a:	f040 0002 	orr.w	r0, r0, #2
  40375e:	6010      	str	r0, [r2, #0]
	REG_PIOB_SODR |=  PIO_PER_P1;
  403760:	6818      	ldr	r0, [r3, #0]
  403762:	f040 0002 	orr.w	r0, r0, #2
  403766:	6018      	str	r0, [r3, #0]

	REG_PIOB_PER |= PIO_PER_P2; //enable PIO controller on PB13
  403768:	6808      	ldr	r0, [r1, #0]
  40376a:	f040 0004 	orr.w	r0, r0, #4
  40376e:	6008      	str	r0, [r1, #0]
	REG_PIOB_OER |= PIO_PER_P2; //enable output on pin PB13
  403770:	6810      	ldr	r0, [r2, #0]
  403772:	f040 0004 	orr.w	r0, r0, #4
  403776:	6010      	str	r0, [r2, #0]
	REG_PIOB_SODR |=  PIO_PER_P2;
  403778:	6818      	ldr	r0, [r3, #0]
  40377a:	f040 0004 	orr.w	r0, r0, #4
  40377e:	6018      	str	r0, [r3, #0]

	REG_PIOB_PER |= PIO_PER_P3; //enable PIO controller on PB13
  403780:	6808      	ldr	r0, [r1, #0]
  403782:	f040 0008 	orr.w	r0, r0, #8
  403786:	6008      	str	r0, [r1, #0]
	REG_PIOB_OER |= PIO_PER_P3; //enable output on pin PB13
  403788:	6811      	ldr	r1, [r2, #0]
  40378a:	f041 0108 	orr.w	r1, r1, #8
  40378e:	6011      	str	r1, [r2, #0]
	REG_PIOB_SODR |=  PIO_PER_P3;
  403790:	681a      	ldr	r2, [r3, #0]
  403792:	f042 0208 	orr.w	r2, r2, #8
  403796:	601a      	str	r2, [r3, #0]

	//enable peripheral clock
	REG_PMC_PCER0 |= PMC_PCER0_PID21;
  403798:	4a17      	ldr	r2, [pc, #92]	; (4037f8 <SPI_dac_init+0xf8>)
  40379a:	6813      	ldr	r3, [r2, #0]
  40379c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
  4037a0:	6013      	str	r3, [r2, #0]

	//set spi master mode
	REG_SPI_MR |= SPI_MR_MSTR;
  4037a2:	4b16      	ldr	r3, [pc, #88]	; (4037fc <SPI_dac_init+0xfc>)
  4037a4:	681a      	ldr	r2, [r3, #0]
  4037a6:	f042 0201 	orr.w	r2, r2, #1
  4037aa:	601a      	str	r2, [r3, #0]

	//set fixed peripheral select(peripheral chosen in SP_MR.PCS instead of SPI_THR.PCS)
	REG_SPI_MR &= ~SPI_MR_PS;
  4037ac:	681a      	ldr	r2, [r3, #0]
  4037ae:	f022 0202 	bic.w	r2, r2, #2
  4037b2:	601a      	str	r2, [r3, #0]
	//REG_SPI_MR |= SPI_MR_PCS(0b1101);

	//set polarity and clock phase to rising edge sample, falling edge shift
	SPI_modeSelect(0);
  4037b4:	2000      	movs	r0, #0
  4037b6:	4b12      	ldr	r3, [pc, #72]	; (403800 <SPI_dac_init+0x100>)
  4037b8:	4798      	blx	r3

	//set clock generator (1 = peripheral clock rate), otherwise a divisor
	//SCBR = fperipheral clock / SPCK Bit Rate
	REG_SPI_CSR |= SPI_CSR_SCBR(20);
  4037ba:	4a12      	ldr	r2, [pc, #72]	; (403804 <SPI_dac_init+0x104>)
  4037bc:	6813      	ldr	r3, [r2, #0]
  4037be:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
  4037c2:	6013      	str	r3, [r2, #0]

	//chip select remains low after transfer
	//REG_SPI_CSR |= SPI_CSR_CSNAAT;

	//give peripheral control of pins
	REG_PIOA_PDR |= PIO_PDR_P11; //NPCS1
  4037c4:	4b10      	ldr	r3, [pc, #64]	; (403808 <SPI_dac_init+0x108>)
  4037c6:	681a      	ldr	r2, [r3, #0]
  4037c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
  4037cc:	601a      	str	r2, [r3, #0]
	REG_PIOA_PDR |= PIO_PDR_P13; //MOSI
  4037ce:	681a      	ldr	r2, [r3, #0]
  4037d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  4037d4:	601a      	str	r2, [r3, #0]
	REG_PIOA_PDR |= PIO_PDR_P14; //SSCK
  4037d6:	681a      	ldr	r2, [r3, #0]
  4037d8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
  4037dc:	601a      	str	r2, [r3, #0]

	//enable SPI
	REG_SPI_CR |= SPI_CR_SPIEN;
  4037de:	4a0b      	ldr	r2, [pc, #44]	; (40380c <SPI_dac_init+0x10c>)
  4037e0:	6813      	ldr	r3, [r2, #0]
  4037e2:	f043 0301 	orr.w	r3, r3, #1
  4037e6:	6013      	str	r3, [r2, #0]
  4037e8:	bd08      	pop	{r3, pc}
  4037ea:	bf00      	nop
  4037ec:	400e1000 	.word	0x400e1000
  4037f0:	400e1010 	.word	0x400e1010
  4037f4:	400e1030 	.word	0x400e1030
  4037f8:	400e0410 	.word	0x400e0410
  4037fc:	40008004 	.word	0x40008004
  403800:	00403631 	.word	0x00403631
  403804:	40008030 	.word	0x40008030
  403808:	400e0e04 	.word	0x400e0e04
  40380c:	40008000 	.word	0x40008000

00403810 <SPI_byteSend>:

}

void SPI_byteSend(uint8_t data){
	//wait for transmit register to be empty
	while (!(REG_SPI_SR & SPI_SR_TDRE));
  403810:	4a04      	ldr	r2, [pc, #16]	; (403824 <SPI_byteSend+0x14>)
  403812:	6813      	ldr	r3, [r2, #0]
  403814:	f013 0f02 	tst.w	r3, #2
  403818:	d0fb      	beq.n	403812 <SPI_byteSend+0x2>
	//send data to transmit register
	REG_SPI_TDR |= (data);
  40381a:	4a03      	ldr	r2, [pc, #12]	; (403828 <SPI_byteSend+0x18>)
  40381c:	6813      	ldr	r3, [r2, #0]
  40381e:	4318      	orrs	r0, r3
  403820:	6010      	str	r0, [r2, #0]
  403822:	4770      	bx	lr
  403824:	40008010 	.word	0x40008010
  403828:	4000800c 	.word	0x4000800c

0040382c <notes_get>:
	//test initializations

float notes_get(uint8_t curr_step, uint8_t channel){
	int lookup_index;

	if (channel == CHANNEL_1){
  40382c:	b959      	cbnz	r1, 403846 <notes_get+0x1a>
		lookup_index = patterns[curr_pattern_ch[0]][curr_page_ch[0]][curr_step][0];
  40382e:	4b1c      	ldr	r3, [pc, #112]	; (4038a0 <notes_get+0x74>)
  403830:	781a      	ldrb	r2, [r3, #0]
  403832:	4b1c      	ldr	r3, [pc, #112]	; (4038a4 <notes_get+0x78>)
  403834:	781b      	ldrb	r3, [r3, #0]
  403836:	eb03 1302 	add.w	r3, r3, r2, lsl #4
  40383a:	eb00 1003 	add.w	r0, r0, r3, lsl #4
  40383e:	4b1a      	ldr	r3, [pc, #104]	; (4038a8 <notes_get+0x7c>)
  403840:	f853 2030 	ldr.w	r2, [r3, r0, lsl #3]
  403844:	e028      	b.n	403898 <notes_get+0x6c>
	}
	else if (channel == CHANNEL_2){
  403846:	2901      	cmp	r1, #1
  403848:	d10b      	bne.n	403862 <notes_get+0x36>
		lookup_index = patterns[curr_pattern_ch[1]][curr_page_ch[1]][curr_step][0];
  40384a:	4b15      	ldr	r3, [pc, #84]	; (4038a0 <notes_get+0x74>)
  40384c:	785a      	ldrb	r2, [r3, #1]
  40384e:	4b15      	ldr	r3, [pc, #84]	; (4038a4 <notes_get+0x78>)
  403850:	785b      	ldrb	r3, [r3, #1]
  403852:	eb03 1302 	add.w	r3, r3, r2, lsl #4
  403856:	eb00 1003 	add.w	r0, r0, r3, lsl #4
  40385a:	4b13      	ldr	r3, [pc, #76]	; (4038a8 <notes_get+0x7c>)
  40385c:	f853 2030 	ldr.w	r2, [r3, r0, lsl #3]
  403860:	e01a      	b.n	403898 <notes_get+0x6c>
	}
	else if (channel == CHANNEL_3){
  403862:	2902      	cmp	r1, #2
  403864:	d10b      	bne.n	40387e <notes_get+0x52>
		lookup_index = patterns[curr_pattern_ch[2]][curr_page_ch[2]][curr_step][0];
  403866:	4b0e      	ldr	r3, [pc, #56]	; (4038a0 <notes_get+0x74>)
  403868:	789a      	ldrb	r2, [r3, #2]
  40386a:	4b0e      	ldr	r3, [pc, #56]	; (4038a4 <notes_get+0x78>)
  40386c:	789b      	ldrb	r3, [r3, #2]
  40386e:	eb03 1302 	add.w	r3, r3, r2, lsl #4
  403872:	eb00 1003 	add.w	r0, r0, r3, lsl #4
  403876:	4b0c      	ldr	r3, [pc, #48]	; (4038a8 <notes_get+0x7c>)
  403878:	f853 2030 	ldr.w	r2, [r3, r0, lsl #3]
  40387c:	e00c      	b.n	403898 <notes_get+0x6c>
	}
	else if (channel == CHANNEL_4){
  40387e:	2903      	cmp	r1, #3
  403880:	d10a      	bne.n	403898 <notes_get+0x6c>
		lookup_index = patterns[curr_pattern_ch[3]][curr_page_ch[3]][curr_step][0];
  403882:	4b07      	ldr	r3, [pc, #28]	; (4038a0 <notes_get+0x74>)
  403884:	78da      	ldrb	r2, [r3, #3]
  403886:	4b07      	ldr	r3, [pc, #28]	; (4038a4 <notes_get+0x78>)
  403888:	78db      	ldrb	r3, [r3, #3]
  40388a:	eb03 1302 	add.w	r3, r3, r2, lsl #4
  40388e:	eb00 1003 	add.w	r0, r0, r3, lsl #4
  403892:	4b05      	ldr	r3, [pc, #20]	; (4038a8 <notes_get+0x7c>)
  403894:	f853 2030 	ldr.w	r2, [r3, r0, lsl #3]
	}
	
	return notes_lookup[lookup_index];
}
  403898:	4b04      	ldr	r3, [pc, #16]	; (4038ac <notes_get+0x80>)
  40389a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
  40389e:	4770      	bx	lr
  4038a0:	200006e8 	.word	0x200006e8
  4038a4:	200006e0 	.word	0x200006e0
  4038a8:	20000710 	.word	0x20000710
  4038ac:	20000010 	.word	0x20000010

004038b0 <notes_status_get>:

uint8_t notes_status_get(uint8_t curr_step, uint8_t channel){

	if (channel == CHANNEL_1){
  4038b0:	b961      	cbnz	r1, 4038cc <notes_status_get+0x1c>
		return patterns[curr_pattern_ch[0]][curr_page_ch[0]][curr_step][1];
  4038b2:	4b23      	ldr	r3, [pc, #140]	; (403940 <notes_status_get+0x90>)
  4038b4:	781a      	ldrb	r2, [r3, #0]
  4038b6:	4b23      	ldr	r3, [pc, #140]	; (403944 <notes_status_get+0x94>)
  4038b8:	781b      	ldrb	r3, [r3, #0]
  4038ba:	eb03 1302 	add.w	r3, r3, r2, lsl #4
  4038be:	eb00 1003 	add.w	r0, r0, r3, lsl #4
  4038c2:	4b21      	ldr	r3, [pc, #132]	; (403948 <notes_status_get+0x98>)
  4038c4:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
  4038c8:	7900      	ldrb	r0, [r0, #4]
  4038ca:	4770      	bx	lr
	}
	else if (channel == CHANNEL_2){
  4038cc:	2901      	cmp	r1, #1
  4038ce:	d10c      	bne.n	4038ea <notes_status_get+0x3a>
		return patterns[curr_pattern_ch[1]][curr_page_ch[1]][curr_step][1];
  4038d0:	4b1b      	ldr	r3, [pc, #108]	; (403940 <notes_status_get+0x90>)
  4038d2:	785a      	ldrb	r2, [r3, #1]
  4038d4:	4b1b      	ldr	r3, [pc, #108]	; (403944 <notes_status_get+0x94>)
  4038d6:	785b      	ldrb	r3, [r3, #1]
  4038d8:	eb03 1302 	add.w	r3, r3, r2, lsl #4
  4038dc:	eb00 1003 	add.w	r0, r0, r3, lsl #4
  4038e0:	4b19      	ldr	r3, [pc, #100]	; (403948 <notes_status_get+0x98>)
  4038e2:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
  4038e6:	7900      	ldrb	r0, [r0, #4]
  4038e8:	4770      	bx	lr
	}
	else if (channel == CHANNEL_3){
  4038ea:	2902      	cmp	r1, #2
  4038ec:	d10c      	bne.n	403908 <notes_status_get+0x58>
		return patterns[curr_pattern_ch[2]][curr_page_ch[2]][curr_step][1];
  4038ee:	4b14      	ldr	r3, [pc, #80]	; (403940 <notes_status_get+0x90>)
  4038f0:	789a      	ldrb	r2, [r3, #2]
  4038f2:	4b14      	ldr	r3, [pc, #80]	; (403944 <notes_status_get+0x94>)
  4038f4:	789b      	ldrb	r3, [r3, #2]
  4038f6:	eb03 1302 	add.w	r3, r3, r2, lsl #4
  4038fa:	eb00 1003 	add.w	r0, r0, r3, lsl #4
  4038fe:	4b12      	ldr	r3, [pc, #72]	; (403948 <notes_status_get+0x98>)
  403900:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
  403904:	7900      	ldrb	r0, [r0, #4]
  403906:	4770      	bx	lr
	}
	else if (channel == CHANNEL_4){
  403908:	2903      	cmp	r1, #3
  40390a:	d10c      	bne.n	403926 <notes_status_get+0x76>
		return patterns[curr_pattern_ch[3]][curr_page_ch[3]][curr_step][1];
  40390c:	4b0c      	ldr	r3, [pc, #48]	; (403940 <notes_status_get+0x90>)
  40390e:	78da      	ldrb	r2, [r3, #3]
  403910:	4b0c      	ldr	r3, [pc, #48]	; (403944 <notes_status_get+0x94>)
  403912:	78db      	ldrb	r3, [r3, #3]
  403914:	eb03 1302 	add.w	r3, r3, r2, lsl #4
  403918:	eb00 1003 	add.w	r0, r0, r3, lsl #4
  40391c:	4b0a      	ldr	r3, [pc, #40]	; (403948 <notes_status_get+0x98>)
  40391e:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
  403922:	7900      	ldrb	r0, [r0, #4]
  403924:	4770      	bx	lr
	}

	//default
	return patterns[curr_pattern_ch[0]][curr_page_ch[0]][curr_step][1];
  403926:	4b06      	ldr	r3, [pc, #24]	; (403940 <notes_status_get+0x90>)
  403928:	781a      	ldrb	r2, [r3, #0]
  40392a:	4b06      	ldr	r3, [pc, #24]	; (403944 <notes_status_get+0x94>)
  40392c:	781b      	ldrb	r3, [r3, #0]
  40392e:	eb03 1302 	add.w	r3, r3, r2, lsl #4
  403932:	eb00 1003 	add.w	r0, r0, r3, lsl #4
  403936:	4b04      	ldr	r3, [pc, #16]	; (403948 <notes_status_get+0x98>)
  403938:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
  40393c:	7900      	ldrb	r0, [r0, #4]
}
  40393e:	4770      	bx	lr
  403940:	200006e8 	.word	0x200006e8
  403944:	200006e0 	.word	0x200006e0
  403948:	20000710 	.word	0x20000710

0040394c <notes_display_get>:

uint8_t notes_display_get(uint8_t display_page, uint8_t step){
	return patterns[curr_pattern][display_page][step][1];
  40394c:	4b05      	ldr	r3, [pc, #20]	; (403964 <notes_display_get+0x18>)
  40394e:	781b      	ldrb	r3, [r3, #0]
  403950:	eb00 1003 	add.w	r0, r0, r3, lsl #4
  403954:	eb01 1000 	add.w	r0, r1, r0, lsl #4
  403958:	4903      	ldr	r1, [pc, #12]	; (403968 <notes_display_get+0x1c>)
  40395a:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
}
  40395e:	7900      	ldrb	r0, [r0, #4]
  403960:	4770      	bx	lr
  403962:	bf00      	nop
  403964:	200006d0 	.word	0x200006d0
  403968:	20000710 	.word	0x20000710

0040396c <notes_status_set>:

void notes_status_set(uint8_t display_page, int leds_status[]){

	/* match notes status to current display page status */
	for (int i = 0; i < 16; i++){
		patterns[curr_pattern][display_page][i][1] = leds_status[i];
  40396c:	4b07      	ldr	r3, [pc, #28]	; (40398c <notes_status_set+0x20>)
  40396e:	781b      	ldrb	r3, [r3, #0]
  403970:	1f0a      	subs	r2, r1, #4
  403972:	eb00 1003 	add.w	r0, r0, r3, lsl #4
  403976:	4b06      	ldr	r3, [pc, #24]	; (403990 <notes_status_set+0x24>)
  403978:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
  40397c:	313c      	adds	r1, #60	; 0x3c
  40397e:	f852 3f04 	ldr.w	r3, [r2, #4]!
  403982:	6043      	str	r3, [r0, #4]
  403984:	3008      	adds	r0, #8
}

void notes_status_set(uint8_t display_page, int leds_status[]){

	/* match notes status to current display page status */
	for (int i = 0; i < 16; i++){
  403986:	428a      	cmp	r2, r1
  403988:	d1f9      	bne.n	40397e <notes_status_set+0x12>
		patterns[curr_pattern][display_page][i][1] = leds_status[i];
	}

}
  40398a:	4770      	bx	lr
  40398c:	200006d0 	.word	0x200006d0
  403990:	20000710 	.word	0x20000710

00403994 <notes_clear>:

void notes_clear(uint8_t curr_pattern){
  403994:	b410      	push	{r4}
  403996:	4a0b      	ldr	r2, [pc, #44]	; (4039c4 <notes_clear+0x30>)
  403998:	eb02 23c0 	add.w	r3, r2, r0, lsl #11
  40399c:	3001      	adds	r0, #1
  40399e:	eb02 24c0 	add.w	r4, r2, r0, lsl #11
	for (int i = 0; i < 16; i++){
		for (int j = 0; j < 16; j++){
			patterns[curr_pattern][i][j][0] = 48; //set note to C4
  4039a2:	2030      	movs	r0, #48	; 0x30
			patterns[curr_pattern][i][j][1]= 0;	  //turn notes all OFF
  4039a4:	2100      	movs	r1, #0
  4039a6:	e007      	b.n	4039b8 <notes_clear+0x24>
}

void notes_clear(uint8_t curr_pattern){
	for (int i = 0; i < 16; i++){
		for (int j = 0; j < 16; j++){
			patterns[curr_pattern][i][j][0] = 48; //set note to C4
  4039a8:	6018      	str	r0, [r3, #0]
			patterns[curr_pattern][i][j][1]= 0;	  //turn notes all OFF
  4039aa:	6059      	str	r1, [r3, #4]
  4039ac:	3308      	adds	r3, #8

}

void notes_clear(uint8_t curr_pattern){
	for (int i = 0; i < 16; i++){
		for (int j = 0; j < 16; j++){
  4039ae:	4293      	cmp	r3, r2
  4039b0:	d1fa      	bne.n	4039a8 <notes_clear+0x14>
  4039b2:	4613      	mov	r3, r2
	}

}

void notes_clear(uint8_t curr_pattern){
	for (int i = 0; i < 16; i++){
  4039b4:	4294      	cmp	r4, r2
  4039b6:	d002      	beq.n	4039be <notes_clear+0x2a>
  4039b8:	f103 0280 	add.w	r2, r3, #128	; 0x80
  4039bc:	e7f4      	b.n	4039a8 <notes_clear+0x14>
		for (int j = 0; j < 16; j++){
			patterns[curr_pattern][i][j][0] = 48; //set note to C4
			patterns[curr_pattern][i][j][1]= 0;	  //turn notes all OFF
		}
	}
}
  4039be:	bc10      	pop	{r4}
  4039c0:	4770      	bx	lr
  4039c2:	bf00      	nop
  4039c4:	20000710 	.word	0x20000710

004039c8 <notes_default>:

void notes_default(){
  4039c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4039cc:	4c0b      	ldr	r4, [pc, #44]	; (4039fc <notes_default+0x34>)
  4039ce:	f504 4500 	add.w	r5, r4, #32768	; 0x8000
	for (int i = 0; i < 16; i++){
		for (int j = 0; j < 16; j++){
			for (int k = 0; k < 16; k++){
				patterns[i][j][k][0] = 48; //set note to C4
  4039d2:	2030      	movs	r0, #48	; 0x30
				patterns[i][j][k][1]= 0;	  //turn notes all OFF
  4039d4:	2100      	movs	r1, #0
  4039d6:	e00e      	b.n	4039f6 <notes_default+0x2e>

void notes_default(){
	for (int i = 0; i < 16; i++){
		for (int j = 0; j < 16; j++){
			for (int k = 0; k < 16; k++){
				patterns[i][j][k][0] = 48; //set note to C4
  4039d8:	6018      	str	r0, [r3, #0]
				patterns[i][j][k][1]= 0;	  //turn notes all OFF
  4039da:	6059      	str	r1, [r3, #4]
  4039dc:	3308      	adds	r3, #8
}

void notes_default(){
	for (int i = 0; i < 16; i++){
		for (int j = 0; j < 16; j++){
			for (int k = 0; k < 16; k++){
  4039de:	4293      	cmp	r3, r2
  4039e0:	d1fa      	bne.n	4039d8 <notes_default+0x10>
  4039e2:	4613      	mov	r3, r2
	}
}

void notes_default(){
	for (int i = 0; i < 16; i++){
		for (int j = 0; j < 16; j++){
  4039e4:	4294      	cmp	r4, r2
  4039e6:	d002      	beq.n	4039ee <notes_default+0x26>
  4039e8:	f103 0280 	add.w	r2, r3, #128	; 0x80
  4039ec:	e7f4      	b.n	4039d8 <notes_default+0x10>
  4039ee:	f504 6400 	add.w	r4, r4, #2048	; 0x800
		}
	}
}

void notes_default(){
	for (int i = 0; i < 16; i++){
  4039f2:	42ac      	cmp	r4, r5
  4039f4:	d004      	beq.n	403a00 <notes_default+0x38>
  4039f6:	f5a4 6300 	sub.w	r3, r4, #2048	; 0x800
  4039fa:	e7f5      	b.n	4039e8 <notes_default+0x20>
  4039fc:	20000f10 	.word	0x20000f10
				patterns[i][j][k][1]= 0;	  //turn notes all OFF
			}
		}
	}

	patterns[4][0][0][0] = LUT_D1;
  403a00:	4bd2      	ldr	r3, [pc, #840]	; (403d4c <notes_default+0x384>)
  403a02:	f503 5200 	add.w	r2, r3, #8192	; 0x2000
  403a06:	f04f 0c0e 	mov.w	ip, #14
  403a0a:	f8c2 c000 	str.w	ip, [r2]
	patterns[4][0][0][1] = 1;
  403a0e:	2201      	movs	r2, #1
  403a10:	f242 0104 	movw	r1, #8196	; 0x2004
  403a14:	505a      	str	r2, [r3, r1]
	patterns[4][0][1][0] = LUT_D1;
  403a16:	f242 0108 	movw	r1, #8200	; 0x2008
  403a1a:	f843 c001 	str.w	ip, [r3, r1]
	patterns[4][0][1][1] = 0;
  403a1e:	2100      	movs	r1, #0
  403a20:	f242 000c 	movw	r0, #8204	; 0x200c
  403a24:	5019      	str	r1, [r3, r0]

	patterns[4][0][2][0] = LUT_A2;
  403a26:	2521      	movs	r5, #33	; 0x21
  403a28:	f242 0010 	movw	r0, #8208	; 0x2010
  403a2c:	501d      	str	r5, [r3, r0]
	patterns[4][0][2][1] = 1;
  403a2e:	f242 0014 	movw	r0, #8212	; 0x2014
  403a32:	501a      	str	r2, [r3, r0]
	patterns[4][0][3][0] = LUT_A2;
  403a34:	f242 0018 	movw	r0, #8216	; 0x2018
  403a38:	501d      	str	r5, [r3, r0]
	patterns[4][0][3][1] = 0;
  403a3a:	f242 001c 	movw	r0, #8220	; 0x201c
  403a3e:	5019      	str	r1, [r3, r0]

	patterns[4][0][4][0] = LUT_A2;
  403a40:	f242 0020 	movw	r0, #8224	; 0x2020
  403a44:	501d      	str	r5, [r3, r0]
	patterns[4][0][4][1] = 1;
  403a46:	f242 0024 	movw	r0, #8228	; 0x2024
  403a4a:	501a      	str	r2, [r3, r0]
	patterns[4][0][5][0] = LUT_A2;
  403a4c:	f242 0028 	movw	r0, #8232	; 0x2028
  403a50:	501d      	str	r5, [r3, r0]
	patterns[4][0][5][1] = 0;
  403a52:	f242 002c 	movw	r0, #8236	; 0x202c
  403a56:	5019      	str	r1, [r3, r0]

	patterns[4][0][6][0] = LUT_E1;
  403a58:	2710      	movs	r7, #16
  403a5a:	f242 0030 	movw	r0, #8240	; 0x2030
  403a5e:	501f      	str	r7, [r3, r0]
	patterns[4][0][6][1] = 1;
  403a60:	f242 0034 	movw	r0, #8244	; 0x2034
  403a64:	501a      	str	r2, [r3, r0]

	patterns[4][0][7][0] = LUT_E2;
  403a66:	261c      	movs	r6, #28
  403a68:	f242 0038 	movw	r0, #8248	; 0x2038
  403a6c:	501e      	str	r6, [r3, r0]
	patterns[4][0][7][1] = 1;
  403a6e:	f242 003c 	movw	r0, #8252	; 0x203c
  403a72:	501a      	str	r2, [r3, r0]

	patterns[4][0][8][0] = LUT_B2;
  403a74:	f503 5401 	add.w	r4, r3, #8256	; 0x2040
  403a78:	2023      	movs	r0, #35	; 0x23
  403a7a:	6020      	str	r0, [r4, #0]
	patterns[4][0][8][1] = 1;
  403a7c:	f242 0444 	movw	r4, #8260	; 0x2044
  403a80:	511a      	str	r2, [r3, r4]
	patterns[4][0][9][0] = LUT_B2;
  403a82:	f242 0448 	movw	r4, #8264	; 0x2048
  403a86:	5118      	str	r0, [r3, r4]
	patterns[4][0][9][1] = 0;
  403a88:	f242 044c 	movw	r4, #8268	; 0x204c
  403a8c:	5119      	str	r1, [r3, r4]
	patterns[4][0][10][0] = LUT_B2;
  403a8e:	f242 0450 	movw	r4, #8272	; 0x2050
  403a92:	5118      	str	r0, [r3, r4]
	patterns[4][0][10][1] = 0;
  403a94:	f242 0454 	movw	r4, #8276	; 0x2054
  403a98:	5119      	str	r1, [r3, r4]
	patterns[4][0][11][0] = LUT_B2;
  403a9a:	f242 0458 	movw	r4, #8280	; 0x2058
  403a9e:	5118      	str	r0, [r3, r4]
	patterns[4][0][11][1] = 0;
  403aa0:	f242 045c 	movw	r4, #8284	; 0x205c
  403aa4:	5119      	str	r1, [r3, r4]

	patterns[4][0][12][0] = LUT_F1;
  403aa6:	f04f 0e11 	mov.w	lr, #17
  403aaa:	f242 0460 	movw	r4, #8288	; 0x2060
  403aae:	f843 e004 	str.w	lr, [r3, r4]
	patterns[4][0][12][1] = 1;
  403ab2:	f242 0464 	movw	r4, #8292	; 0x2064
  403ab6:	511a      	str	r2, [r3, r4]
	patterns[4][0][13][0] = LUT_F1;
  403ab8:	f242 0468 	movw	r4, #8296	; 0x2068
  403abc:	f843 e004 	str.w	lr, [r3, r4]
	patterns[4][0][13][1] = 0;
  403ac0:	f242 046c 	movw	r4, #8300	; 0x206c
  403ac4:	5119      	str	r1, [r3, r4]

	patterns[4][0][14][0] = LUT_C3;
  403ac6:	2424      	movs	r4, #36	; 0x24
  403ac8:	f242 0870 	movw	r8, #8304	; 0x2070
  403acc:	f843 4008 	str.w	r4, [r3, r8]
	patterns[4][0][14][1] = 1;
  403ad0:	f242 0874 	movw	r8, #8308	; 0x2074
  403ad4:	f843 2008 	str.w	r2, [r3, r8]
	patterns[4][0][15][0] = LUT_C3;
  403ad8:	f242 0878 	movw	r8, #8312	; 0x2078
  403adc:	f843 4008 	str.w	r4, [r3, r8]
	patterns[4][0][15][1] = 0;
  403ae0:	f242 087c 	movw	r8, #8316	; 0x207c
  403ae4:	f843 1008 	str.w	r1, [r3, r8]

	patterns[4][1][0][0] = LUT_C3;
  403ae8:	f503 5802 	add.w	r8, r3, #8320	; 0x2080
  403aec:	f8c8 4000 	str.w	r4, [r8]
	patterns[4][1][0][1] = 1;
  403af0:	f242 0884 	movw	r8, #8324	; 0x2084
  403af4:	f843 2008 	str.w	r2, [r3, r8]
	patterns[4][1][1][0] = LUT_C3;
  403af8:	f242 0888 	movw	r8, #8328	; 0x2088
  403afc:	f843 4008 	str.w	r4, [r3, r8]
	patterns[4][1][1][1] = 0;
  403b00:	f242 088c 	movw	r8, #8332	; 0x208c
  403b04:	f843 1008 	str.w	r1, [r3, r8]

	patterns[4][1][2][0] = LUT_E1;
  403b08:	f242 0890 	movw	r8, #8336	; 0x2090
  403b0c:	f843 7008 	str.w	r7, [r3, r8]
	patterns[4][1][2][1] = 1;
  403b10:	f242 0894 	movw	r8, #8340	; 0x2094
  403b14:	f843 2008 	str.w	r2, [r3, r8]

	patterns[4][1][3][0] = LUT_E2;
  403b18:	f242 0898 	movw	r8, #8344	; 0x2098
  403b1c:	f843 6008 	str.w	r6, [r3, r8]
	patterns[4][1][3][1] = 1;
  403b20:	f242 089c 	movw	r8, #8348	; 0x209c
  403b24:	f843 2008 	str.w	r2, [r3, r8]

	patterns[4][1][4][0] = LUT_B2;
  403b28:	f242 08a0 	movw	r8, #8352	; 0x20a0
  403b2c:	f843 0008 	str.w	r0, [r3, r8]
	patterns[4][1][4][1] = 1;
  403b30:	f242 08a4 	movw	r8, #8356	; 0x20a4
  403b34:	f843 2008 	str.w	r2, [r3, r8]
	patterns[4][1][5][0] = LUT_B2;
  403b38:	f242 08a8 	movw	r8, #8360	; 0x20a8
  403b3c:	f843 0008 	str.w	r0, [r3, r8]
	patterns[4][1][5][1] = 0;
  403b40:	f242 08ac 	movw	r8, #8364	; 0x20ac
  403b44:	f843 1008 	str.w	r1, [r3, r8]
	patterns[4][1][6][0] = LUT_B2;
  403b48:	f242 08b0 	movw	r8, #8368	; 0x20b0
  403b4c:	f843 0008 	str.w	r0, [r3, r8]
	patterns[4][1][6][1] = 0;
  403b50:	f242 08b4 	movw	r8, #8372	; 0x20b4
  403b54:	f843 1008 	str.w	r1, [r3, r8]
	patterns[4][1][7][0] = LUT_B2;
  403b58:	f242 08b8 	movw	r8, #8376	; 0x20b8
  403b5c:	f843 0008 	str.w	r0, [r3, r8]
	patterns[4][1][7][1] = 0;
  403b60:	f242 08bc 	movw	r8, #8380	; 0x20bc
  403b64:	f843 1008 	str.w	r1, [r3, r8]

	
	patterns[4][1][8][0] = LUT_D1;
  403b68:	f503 5803 	add.w	r8, r3, #8384	; 0x20c0
  403b6c:	f8c8 c000 	str.w	ip, [r8]
	patterns[4][1][8][1] = 1;
  403b70:	f242 08c4 	movw	r8, #8388	; 0x20c4
  403b74:	f843 2008 	str.w	r2, [r3, r8]
	patterns[4][1][9][0] = LUT_D1;
  403b78:	f242 08c8 	movw	r8, #8392	; 0x20c8
  403b7c:	f843 c008 	str.w	ip, [r3, r8]
	patterns[4][1][9][1] = 0;
  403b80:	f242 0ccc 	movw	ip, #8396	; 0x20cc
  403b84:	f843 100c 	str.w	r1, [r3, ip]

	patterns[4][1][10][0] = LUT_A2;
  403b88:	f242 0cd0 	movw	ip, #8400	; 0x20d0
  403b8c:	f843 500c 	str.w	r5, [r3, ip]
	patterns[4][1][10][1] = 1;
  403b90:	f242 0cd4 	movw	ip, #8404	; 0x20d4
  403b94:	f843 200c 	str.w	r2, [r3, ip]
	patterns[4][1][11][0] = LUT_A2;
  403b98:	f242 0cd8 	movw	ip, #8408	; 0x20d8
  403b9c:	f843 500c 	str.w	r5, [r3, ip]
	patterns[4][1][11][1] = 0;
  403ba0:	f242 0cdc 	movw	ip, #8412	; 0x20dc
  403ba4:	f843 100c 	str.w	r1, [r3, ip]

	patterns[4][1][12][0] = LUT_A2;
  403ba8:	f242 0ce0 	movw	ip, #8416	; 0x20e0
  403bac:	f843 500c 	str.w	r5, [r3, ip]
	patterns[4][1][12][1] = 1;
  403bb0:	f242 0ce4 	movw	ip, #8420	; 0x20e4
  403bb4:	f843 200c 	str.w	r2, [r3, ip]
	patterns[4][1][13][0] = LUT_A2;
  403bb8:	f242 0ce8 	movw	ip, #8424	; 0x20e8
  403bbc:	f843 500c 	str.w	r5, [r3, ip]
	patterns[4][1][13][1] = 0;
  403bc0:	f242 05ec 	movw	r5, #8428	; 0x20ec
  403bc4:	5159      	str	r1, [r3, r5]

	patterns[4][1][14][0] = LUT_E1;
  403bc6:	f242 05f0 	movw	r5, #8432	; 0x20f0
  403bca:	515f      	str	r7, [r3, r5]
	patterns[4][1][14][1] = 1;
  403bcc:	f242 05f4 	movw	r5, #8436	; 0x20f4
  403bd0:	515a      	str	r2, [r3, r5]
	patterns[4][1][15][0] = LUT_E2;
  403bd2:	f242 05f8 	movw	r5, #8440	; 0x20f8
  403bd6:	515e      	str	r6, [r3, r5]
	patterns[4][1][15][1] = 1;
  403bd8:	f242 05fc 	movw	r5, #8444	; 0x20fc
  403bdc:	515a      	str	r2, [r3, r5]

	patterns[4][2][0][0] = LUT_B2;
  403bde:	f503 5504 	add.w	r5, r3, #8448	; 0x2100
  403be2:	6028      	str	r0, [r5, #0]
	patterns[4][2][0][1] = 1;
  403be4:	f242 1504 	movw	r5, #8452	; 0x2104
  403be8:	515a      	str	r2, [r3, r5]
	patterns[4][2][1][0] = LUT_B2;
  403bea:	f242 1508 	movw	r5, #8456	; 0x2108
  403bee:	5158      	str	r0, [r3, r5]
	patterns[4][2][1][1] = 0;
  403bf0:	f242 150c 	movw	r5, #8460	; 0x210c
  403bf4:	5159      	str	r1, [r3, r5]
	patterns[4][2][2][0] = LUT_B2;
  403bf6:	f242 1510 	movw	r5, #8464	; 0x2110
  403bfa:	5158      	str	r0, [r3, r5]
	patterns[4][2][2][1] = 0;
  403bfc:	f242 1514 	movw	r5, #8468	; 0x2114
  403c00:	5159      	str	r1, [r3, r5]
	patterns[4][2][3][0] = LUT_B2;
  403c02:	f242 1518 	movw	r5, #8472	; 0x2118
  403c06:	5158      	str	r0, [r3, r5]
	patterns[4][2][3][1] = 0;
  403c08:	f242 151c 	movw	r5, #8476	; 0x211c
  403c0c:	5159      	str	r1, [r3, r5]

	patterns[4][2][4][0] = LUT_F1;
  403c0e:	f242 1520 	movw	r5, #8480	; 0x2120
  403c12:	f843 e005 	str.w	lr, [r3, r5]
	patterns[4][2][4][1] = 1;
  403c16:	f242 1524 	movw	r5, #8484	; 0x2124
  403c1a:	515a      	str	r2, [r3, r5]
	patterns[4][2][5][0] = LUT_F1;
  403c1c:	f242 1528 	movw	r5, #8488	; 0x2128
  403c20:	f843 e005 	str.w	lr, [r3, r5]
	patterns[4][2][5][1] = 0;
  403c24:	f242 152c 	movw	r5, #8492	; 0x212c
  403c28:	5159      	str	r1, [r3, r5]

	patterns[4][2][6][0] = LUT_C3;
  403c2a:	f242 1530 	movw	r5, #8496	; 0x2130
  403c2e:	515c      	str	r4, [r3, r5]
	patterns[4][2][6][1] = 1;
  403c30:	f242 1534 	movw	r5, #8500	; 0x2134
  403c34:	515a      	str	r2, [r3, r5]
	patterns[4][2][7][0] = LUT_C3;
  403c36:	f242 1538 	movw	r5, #8504	; 0x2138
  403c3a:	515c      	str	r4, [r3, r5]
	patterns[4][2][7][1] = 0;
  403c3c:	f242 153c 	movw	r5, #8508	; 0x213c
  403c40:	5159      	str	r1, [r3, r5]

	patterns[4][2][8][0] = LUT_C3;
  403c42:	f503 5505 	add.w	r5, r3, #8512	; 0x2140
  403c46:	602c      	str	r4, [r5, #0]
	patterns[4][2][8][1] = 1;
  403c48:	f242 1544 	movw	r5, #8516	; 0x2144
  403c4c:	515a      	str	r2, [r3, r5]
	patterns[4][2][9][0] = LUT_C3;
  403c4e:	f242 1548 	movw	r5, #8520	; 0x2148
  403c52:	515c      	str	r4, [r3, r5]
	patterns[4][2][9][1] = 0;
  403c54:	f242 144c 	movw	r4, #8524	; 0x214c
  403c58:	5119      	str	r1, [r3, r4]

	patterns[4][2][10][0] = LUT_E1;
  403c5a:	f242 1450 	movw	r4, #8528	; 0x2150
  403c5e:	511f      	str	r7, [r3, r4]
	patterns[4][2][10][1] = 1;
  403c60:	f242 1454 	movw	r4, #8532	; 0x2154
  403c64:	511a      	str	r2, [r3, r4]

	patterns[4][2][11][0] = LUT_E2;
  403c66:	f242 1458 	movw	r4, #8536	; 0x2158
  403c6a:	511e      	str	r6, [r3, r4]
	patterns[4][2][11][1] = 1;
  403c6c:	f242 145c 	movw	r4, #8540	; 0x215c
  403c70:	511a      	str	r2, [r3, r4]

	patterns[4][2][12][0] = LUT_B2;
  403c72:	f242 1460 	movw	r4, #8544	; 0x2160
  403c76:	5118      	str	r0, [r3, r4]
	patterns[4][2][12][1] = 1;
  403c78:	f242 1464 	movw	r4, #8548	; 0x2164
  403c7c:	511a      	str	r2, [r3, r4]
	patterns[4][2][13][0] = LUT_B2;
  403c7e:	f242 1468 	movw	r4, #8552	; 0x2168
  403c82:	5118      	str	r0, [r3, r4]
	patterns[4][2][13][1] = 0;
  403c84:	f242 146c 	movw	r4, #8556	; 0x216c
  403c88:	5119      	str	r1, [r3, r4]
	patterns[4][2][14][0] = LUT_B2;
  403c8a:	f242 1470 	movw	r4, #8560	; 0x2170
  403c8e:	5118      	str	r0, [r3, r4]
	patterns[4][2][14][1] = 0;
  403c90:	f242 1474 	movw	r4, #8564	; 0x2174
  403c94:	5119      	str	r1, [r3, r4]
	patterns[4][2][15][0] = LUT_B2;
  403c96:	f242 1478 	movw	r4, #8568	; 0x2178
  403c9a:	5118      	str	r0, [r3, r4]
	patterns[4][2][15][1] = 0;
  403c9c:	f242 107c 	movw	r0, #8572	; 0x217c
  403ca0:	5019      	str	r1, [r3, r0]
	
	patterns[4][3][0][0] = LUT_D3;
  403ca2:	f503 5006 	add.w	r0, r3, #8576	; 0x2180
  403ca6:	2526      	movs	r5, #38	; 0x26
  403ca8:	6005      	str	r5, [r0, #0]
	patterns[4][3][0][1] = 1;
  403caa:	f242 1084 	movw	r0, #8580	; 0x2184
  403cae:	501a      	str	r2, [r3, r0]

	patterns[4][3][1][0] = LUT_F3;
  403cb0:	2629      	movs	r6, #41	; 0x29
  403cb2:	f242 1088 	movw	r0, #8584	; 0x2188
  403cb6:	501e      	str	r6, [r3, r0]
	patterns[4][3][1][1] = 1;
  403cb8:	f242 108c 	movw	r0, #8588	; 0x218c
  403cbc:	501a      	str	r2, [r3, r0]

	patterns[4][3][2][0] = LUT_D4;
  403cbe:	2032      	movs	r0, #50	; 0x32
  403cc0:	f242 1490 	movw	r4, #8592	; 0x2190
  403cc4:	5118      	str	r0, [r3, r4]
	patterns[4][3][2][1] = 1;
  403cc6:	f242 1494 	movw	r4, #8596	; 0x2194
  403cca:	511a      	str	r2, [r3, r4]
	patterns[4][3][3][0] = LUT_D4;
  403ccc:	f242 1498 	movw	r4, #8600	; 0x2198
  403cd0:	5118      	str	r0, [r3, r4]
	patterns[4][3][3][1] = 0;
  403cd2:	f242 149c 	movw	r4, #8604	; 0x219c
  403cd6:	5119      	str	r1, [r3, r4]
	patterns[4][3][4][0] = LUT_D4;
  403cd8:	f242 14a0 	movw	r4, #8608	; 0x21a0
  403cdc:	5118      	str	r0, [r3, r4]
	patterns[4][3][4][1] = 0;
  403cde:	f242 14a4 	movw	r4, #8612	; 0x21a4
  403ce2:	5119      	str	r1, [r3, r4]
	patterns[4][3][5][0] = LUT_D4;
  403ce4:	f242 14a8 	movw	r4, #8616	; 0x21a8
  403ce8:	5118      	str	r0, [r3, r4]
	patterns[4][3][5][1] = 0;
  403cea:	f242 14ac 	movw	r4, #8620	; 0x21ac
  403cee:	5119      	str	r1, [r3, r4]

	patterns[4][3][6][0] = LUT_D3;
  403cf0:	f242 14b0 	movw	r4, #8624	; 0x21b0
  403cf4:	511d      	str	r5, [r3, r4]
	patterns[4][3][6][1] = 1;
  403cf6:	f242 14b4 	movw	r4, #8628	; 0x21b4
  403cfa:	511a      	str	r2, [r3, r4]
	patterns[4][3][7][0] = LUT_F3;
  403cfc:	f242 14b8 	movw	r4, #8632	; 0x21b8
  403d00:	511e      	str	r6, [r3, r4]
	patterns[4][3][7][1] = 1;
  403d02:	f242 14bc 	movw	r4, #8636	; 0x21bc
  403d06:	511a      	str	r2, [r3, r4]
	patterns[4][3][8][0] = LUT_D4;
  403d08:	f503 5407 	add.w	r4, r3, #8640	; 0x21c0
  403d0c:	6020      	str	r0, [r4, #0]
	patterns[4][3][8][1] = 1;
  403d0e:	f242 14c4 	movw	r4, #8644	; 0x21c4
  403d12:	511a      	str	r2, [r3, r4]
	patterns[4][3][9][0] = LUT_D4;
  403d14:	f242 14c8 	movw	r4, #8648	; 0x21c8
  403d18:	5118      	str	r0, [r3, r4]
	patterns[4][3][9][1] = 0;
  403d1a:	f242 14cc 	movw	r4, #8652	; 0x21cc
  403d1e:	5119      	str	r1, [r3, r4]
	patterns[4][3][10][0] = LUT_D4;
  403d20:	f242 14d0 	movw	r4, #8656	; 0x21d0
  403d24:	5118      	str	r0, [r3, r4]
	patterns[4][3][10][1] = 0;
  403d26:	f242 14d4 	movw	r4, #8660	; 0x21d4
  403d2a:	5119      	str	r1, [r3, r4]
	patterns[4][3][11][0] = LUT_D4;
  403d2c:	f242 14d8 	movw	r4, #8664	; 0x21d8
  403d30:	5118      	str	r0, [r3, r4]
	patterns[4][3][11][1] = 0;
  403d32:	f242 14dc 	movw	r4, #8668	; 0x21dc
  403d36:	5119      	str	r1, [r3, r4]

	patterns[4][3][12][0] = LUT_E4;
  403d38:	2434      	movs	r4, #52	; 0x34
  403d3a:	f242 17e0 	movw	r7, #8672	; 0x21e0
  403d3e:	51dc      	str	r4, [r3, r7]
	patterns[4][3][12][1] = 1;
  403d40:	f242 17e4 	movw	r7, #8676	; 0x21e4
  403d44:	51da      	str	r2, [r3, r7]
	patterns[4][3][13][0] = LUT_E4;
  403d46:	f242 17e8 	movw	r7, #8680	; 0x21e8
  403d4a:	e001      	b.n	403d50 <notes_default+0x388>
  403d4c:	20000710 	.word	0x20000710
  403d50:	51dc      	str	r4, [r3, r7]
	patterns[4][3][13][1] = 0;
  403d52:	f242 17ec 	movw	r7, #8684	; 0x21ec
  403d56:	51d9      	str	r1, [r3, r7]
	patterns[4][3][14][0] = LUT_E4;
  403d58:	f242 17f0 	movw	r7, #8688	; 0x21f0
  403d5c:	51dc      	str	r4, [r3, r7]
	patterns[4][3][14][1] = 0;
  403d5e:	f242 17f4 	movw	r7, #8692	; 0x21f4
  403d62:	51d9      	str	r1, [r3, r7]

	patterns[4][3][15][0] = LUT_F4;
  403d64:	2735      	movs	r7, #53	; 0x35
  403d66:	f242 1ef8 	movw	lr, #8696	; 0x21f8
  403d6a:	f843 700e 	str.w	r7, [r3, lr]
	patterns[4][3][15][1] = 1;
  403d6e:	f242 1efc 	movw	lr, #8700	; 0x21fc
  403d72:	f843 200e 	str.w	r2, [r3, lr]
	patterns[4][4][0][0] = LUT_E4;
  403d76:	f503 5e08 	add.w	lr, r3, #8704	; 0x2200
  403d7a:	f8ce 4000 	str.w	r4, [lr]
	patterns[4][4][0][1] = 1;
  403d7e:	f242 2e04 	movw	lr, #8708	; 0x2204
  403d82:	f843 200e 	str.w	r2, [r3, lr]
	patterns[4][4][1][0] = LUT_F4;
  403d86:	f242 2e08 	movw	lr, #8712	; 0x2208
  403d8a:	f843 700e 	str.w	r7, [r3, lr]
	patterns[4][4][1][1] = 1;
  403d8e:	f242 270c 	movw	r7, #8716	; 0x220c
  403d92:	51da      	str	r2, [r3, r7]
	patterns[4][4][2][0] = LUT_E4;
  403d94:	f242 2710 	movw	r7, #8720	; 0x2210
  403d98:	51dc      	str	r4, [r3, r7]
	patterns[4][4][2][1] = 1;
  403d9a:	f242 2414 	movw	r4, #8724	; 0x2214
  403d9e:	511a      	str	r2, [r3, r4]
	patterns[4][4][3][0] = LUT_C4;
  403da0:	2730      	movs	r7, #48	; 0x30
  403da2:	f242 2418 	movw	r4, #8728	; 0x2218
  403da6:	511f      	str	r7, [r3, r4]
	patterns[4][4][3][1] = 1;
  403da8:	f242 241c 	movw	r4, #8732	; 0x221c
  403dac:	511a      	str	r2, [r3, r4]
	patterns[4][4][4][0] = LUT_A3;
  403dae:	242d      	movs	r4, #45	; 0x2d
  403db0:	f242 2720 	movw	r7, #8736	; 0x2220
  403db4:	51dc      	str	r4, [r3, r7]
	patterns[4][4][4][1] = 1;
  403db6:	f242 2724 	movw	r7, #8740	; 0x2224
  403dba:	51da      	str	r2, [r3, r7]
	patterns[4][4][5][0] = LUT_A3;
  403dbc:	f242 2728 	movw	r7, #8744	; 0x2228
  403dc0:	51dc      	str	r4, [r3, r7]
	patterns[4][4][5][1] = 0;
  403dc2:	f242 272c 	movw	r7, #8748	; 0x222c
  403dc6:	51d9      	str	r1, [r3, r7]
	patterns[4][4][6][0] = LUT_A3;
  403dc8:	f242 2730 	movw	r7, #8752	; 0x2230
  403dcc:	51dc      	str	r4, [r3, r7]
	patterns[4][4][6][1] = 0;
  403dce:	f242 2734 	movw	r7, #8756	; 0x2234
  403dd2:	51d9      	str	r1, [r3, r7]
	patterns[4][4][7][0] = LUT_A3;
  403dd4:	f242 2738 	movw	r7, #8760	; 0x2238
  403dd8:	51dc      	str	r4, [r3, r7]
	patterns[4][4][7][1] = 0;
  403dda:	f242 273c 	movw	r7, #8764	; 0x223c
  403dde:	51d9      	str	r1, [r3, r7]

	patterns[4][4][8][0] = LUT_A3;
  403de0:	f503 5709 	add.w	r7, r3, #8768	; 0x2240
  403de4:	603c      	str	r4, [r7, #0]
	patterns[4][4][8][1] = 1;
  403de6:	f242 2744 	movw	r7, #8772	; 0x2244
  403dea:	51da      	str	r2, [r3, r7]
	patterns[4][4][9][0] = LUT_A3;
  403dec:	f242 2748 	movw	r7, #8776	; 0x2248
  403df0:	51dc      	str	r4, [r3, r7]
	patterns[4][4][9][1] = 0;
  403df2:	f242 274c 	movw	r7, #8780	; 0x224c
  403df6:	51d9      	str	r1, [r3, r7]

	patterns[4][4][10][0] = LUT_D3;
  403df8:	f242 2750 	movw	r7, #8784	; 0x2250
  403dfc:	51dd      	str	r5, [r3, r7]
	patterns[4][4][10][1] = 1;
  403dfe:	f242 2754 	movw	r7, #8788	; 0x2254
  403e02:	51da      	str	r2, [r3, r7]
	patterns[4][4][11][0] = LUT_D3;
  403e04:	f242 2758 	movw	r7, #8792	; 0x2258
  403e08:	51dd      	str	r5, [r3, r7]
	patterns[4][4][11][1] = 0;
  403e0a:	f242 275c 	movw	r7, #8796	; 0x225c
  403e0e:	51d9      	str	r1, [r3, r7]

	patterns[4][4][12][0] = LUT_F3;
  403e10:	f242 2760 	movw	r7, #8800	; 0x2260
  403e14:	51de      	str	r6, [r3, r7]
	patterns[4][4][12][1] = 1;
  403e16:	f242 2764 	movw	r7, #8804	; 0x2264
  403e1a:	51da      	str	r2, [r3, r7]
	patterns[4][4][13][0] = LUT_G3;
  403e1c:	272b      	movs	r7, #43	; 0x2b
  403e1e:	f242 2e68 	movw	lr, #8808	; 0x2268
  403e22:	f843 700e 	str.w	r7, [r3, lr]
	patterns[4][4][13][1] = 1;
  403e26:	f242 2e6c 	movw	lr, #8812	; 0x226c
  403e2a:	f843 200e 	str.w	r2, [r3, lr]
	patterns[4][4][14][0] = LUT_A3;
  403e2e:	f242 2e70 	movw	lr, #8816	; 0x2270
  403e32:	f843 400e 	str.w	r4, [r3, lr]
	patterns[4][4][14][1] = 1;
  403e36:	f242 2e74 	movw	lr, #8820	; 0x2274
  403e3a:	f843 200e 	str.w	r2, [r3, lr]
	patterns[4][4][15][0] = LUT_A3;
  403e3e:	f242 2e78 	movw	lr, #8824	; 0x2278
  403e42:	f843 400e 	str.w	r4, [r3, lr]
	patterns[4][4][15][1] = 0;
  403e46:	f242 2e7c 	movw	lr, #8828	; 0x227c
  403e4a:	f843 100e 	str.w	r1, [r3, lr]
	patterns[4][5][0][0] = LUT_A3;
  403e4e:	f503 5e0a 	add.w	lr, r3, #8832	; 0x2280
  403e52:	f8ce 4000 	str.w	r4, [lr]
	patterns[4][5][0][1] = 0;
  403e56:	f242 2e84 	movw	lr, #8836	; 0x2284
  403e5a:	f843 100e 	str.w	r1, [r3, lr]
	patterns[4][5][1][0] = LUT_A3;
  403e5e:	f242 2e88 	movw	lr, #8840	; 0x2288
  403e62:	f843 400e 	str.w	r4, [r3, lr]
	patterns[4][5][1][1] = 0;
  403e66:	f242 2e8c 	movw	lr, #8844	; 0x228c
  403e6a:	f843 100e 	str.w	r1, [r3, lr]

	patterns[4][5][2][0] = LUT_A3;
  403e6e:	f242 2e90 	movw	lr, #8848	; 0x2290
  403e72:	f843 400e 	str.w	r4, [r3, lr]
	patterns[4][5][2][1] = 1;
  403e76:	f242 2e94 	movw	lr, #8852	; 0x2294
  403e7a:	f843 200e 	str.w	r2, [r3, lr]
	patterns[4][5][3][0] = LUT_A3;
  403e7e:	f242 2e98 	movw	lr, #8856	; 0x2298
  403e82:	f843 400e 	str.w	r4, [r3, lr]
	patterns[4][5][3][1] = 0;
  403e86:	f242 249c 	movw	r4, #8860	; 0x229c
  403e8a:	5119      	str	r1, [r3, r4]

	patterns[4][5][4][0] = LUT_D3;
  403e8c:	f242 24a0 	movw	r4, #8864	; 0x22a0
  403e90:	511d      	str	r5, [r3, r4]
	patterns[4][5][4][1] = 1;
  403e92:	f242 24a4 	movw	r4, #8868	; 0x22a4
  403e96:	511a      	str	r2, [r3, r4]
	patterns[4][5][5][0] = LUT_D3;
  403e98:	f242 24a8 	movw	r4, #8872	; 0x22a8
  403e9c:	511d      	str	r5, [r3, r4]
	patterns[4][5][5][1] = 0;
  403e9e:	f242 24ac 	movw	r4, #8876	; 0x22ac
  403ea2:	5119      	str	r1, [r3, r4]

	patterns[4][5][6][0] = LUT_F3;
  403ea4:	f242 24b0 	movw	r4, #8880	; 0x22b0
  403ea8:	511e      	str	r6, [r3, r4]
	patterns[4][5][6][1] = 1;
  403eaa:	f242 24b4 	movw	r4, #8884	; 0x22b4
  403eae:	511a      	str	r2, [r3, r4]
	patterns[4][5][7][0] = LUT_G3;
  403eb0:	f242 24b8 	movw	r4, #8888	; 0x22b8
  403eb4:	511f      	str	r7, [r3, r4]
	patterns[4][5][7][1] = 1;
  403eb6:	f242 24bc 	movw	r4, #8892	; 0x22bc
  403eba:	511a      	str	r2, [r3, r4]

	patterns[4][5][8][0] = LUT_E3;
  403ebc:	f503 570b 	add.w	r7, r3, #8896	; 0x22c0
  403ec0:	2428      	movs	r4, #40	; 0x28
  403ec2:	603c      	str	r4, [r7, #0]
	patterns[4][5][8][1] = 1;
  403ec4:	f242 27c4 	movw	r7, #8900	; 0x22c4
  403ec8:	51da      	str	r2, [r3, r7]
	patterns[4][5][9][0] = LUT_E3;
  403eca:	f242 27c8 	movw	r7, #8904	; 0x22c8
  403ece:	51dc      	str	r4, [r3, r7]
	patterns[4][5][9][1] = 0;
  403ed0:	f242 27cc 	movw	r7, #8908	; 0x22cc
  403ed4:	51d9      	str	r1, [r3, r7]
	patterns[4][5][10][0] = LUT_E3;
  403ed6:	f242 27d0 	movw	r7, #8912	; 0x22d0
  403eda:	51dc      	str	r4, [r3, r7]
	patterns[4][5][10][1] = 0;
  403edc:	f242 27d4 	movw	r7, #8916	; 0x22d4
  403ee0:	51d9      	str	r1, [r3, r7]
	patterns[4][5][11][0] = LUT_E3;
  403ee2:	f242 27d8 	movw	r7, #8920	; 0x22d8
  403ee6:	51dc      	str	r4, [r3, r7]
	patterns[4][5][11][1] = 0;
  403ee8:	f242 24dc 	movw	r4, #8924	; 0x22dc
  403eec:	5119      	str	r1, [r3, r4]

	patterns[4][5][12][0] = LUT_D3;
  403eee:	f242 24e0 	movw	r4, #8928	; 0x22e0
  403ef2:	511d      	str	r5, [r3, r4]
	patterns[4][5][12][1] = 1;
  403ef4:	f242 24e4 	movw	r4, #8932	; 0x22e4
  403ef8:	511a      	str	r2, [r3, r4]
	patterns[4][5][13][0] = LUT_F3;
  403efa:	f242 24e8 	movw	r4, #8936	; 0x22e8
  403efe:	511e      	str	r6, [r3, r4]
	patterns[4][5][13][1] = 1;
  403f00:	f242 24ec 	movw	r4, #8940	; 0x22ec
  403f04:	511a      	str	r2, [r3, r4]

	patterns[4][5][14][0] = LUT_D4;
  403f06:	f242 24f0 	movw	r4, #8944	; 0x22f0
  403f0a:	5118      	str	r0, [r3, r4]
	patterns[4][5][14][1] = 1;
  403f0c:	f242 24f4 	movw	r4, #8948	; 0x22f4
  403f10:	511a      	str	r2, [r3, r4]
	patterns[4][5][15][0] = LUT_D4;
  403f12:	f242 24f8 	movw	r4, #8952	; 0x22f8
  403f16:	5118      	str	r0, [r3, r4]
	patterns[4][5][15][1] = 0;
  403f18:	f242 24fc 	movw	r4, #8956	; 0x22fc
  403f1c:	5119      	str	r1, [r3, r4]
	patterns[4][6][0][0] = LUT_D4;
  403f1e:	f503 540c 	add.w	r4, r3, #8960	; 0x2300
  403f22:	6020      	str	r0, [r4, #0]
	patterns[4][6][0][1] = 0;
  403f24:	f242 3404 	movw	r4, #8964	; 0x2304
  403f28:	5119      	str	r1, [r3, r4]
	patterns[4][6][1][0] = LUT_D4;
  403f2a:	f242 3408 	movw	r4, #8968	; 0x2308
  403f2e:	5118      	str	r0, [r3, r4]
	patterns[4][6][1][1] = 0;
  403f30:	f242 340c 	movw	r4, #8972	; 0x230c
  403f34:	5119      	str	r1, [r3, r4]

	patterns[4][6][2][0] = LUT_D3;
  403f36:	f242 3110 	movw	r1, #8976	; 0x2310
  403f3a:	505d      	str	r5, [r3, r1]
	patterns[4][6][2][1] = 1;
  403f3c:	f242 3114 	movw	r1, #8980	; 0x2314
  403f40:	505a      	str	r2, [r3, r1]
	patterns[4][6][3][0] = LUT_F3;
  403f42:	f242 3118 	movw	r1, #8984	; 0x2318
  403f46:	505e      	str	r6, [r3, r1]
	patterns[4][6][3][1] = 1;
  403f48:	f242 311c 	movw	r1, #8988	; 0x231c
  403f4c:	505a      	str	r2, [r3, r1]

	patterns[4][6][4][0] = LUT_D4;
  403f4e:	f242 3120 	movw	r1, #8992	; 0x2320
  403f52:	5058      	str	r0, [r3, r1]
	patterns[4][6][4][1] = 1;
  403f54:	f242 3124 	movw	r1, #8996	; 0x2324
  403f58:	505a      	str	r2, [r3, r1]
	patterns[4][6][5][0] = LUT_D4;
  403f5a:	f242 3228 	movw	r2, #9000	; 0x2328
  403f5e:	5098      	str	r0, [r3, r2]
	patterns[4][6][5][1] = 0;
  403f60:	2200      	movs	r2, #0
  403f62:	f242 312c 	movw	r1, #9004	; 0x232c
  403f66:	505a      	str	r2, [r3, r1]
	patterns[4][6][6][0] = LUT_D4;
  403f68:	4601      	mov	r1, r0
  403f6a:	f242 3030 	movw	r0, #9008	; 0x2330
  403f6e:	5019      	str	r1, [r3, r0]
	patterns[4][6][6][1] = 0;
  403f70:	f242 3034 	movw	r0, #9012	; 0x2334
  403f74:	501a      	str	r2, [r3, r0]
	patterns[4][6][7][0] = LUT_D4;
  403f76:	f242 3038 	movw	r0, #9016	; 0x2338
  403f7a:	5019      	str	r1, [r3, r0]
	patterns[4][6][7][1] = 0;
  403f7c:	f242 313c 	movw	r1, #9020	; 0x233c
  403f80:	505a      	str	r2, [r3, r1]

	patterns[4][6][8][0] = LUT_E4;
  403f82:	f503 510d 	add.w	r1, r3, #9024	; 0x2340
  403f86:	2034      	movs	r0, #52	; 0x34
  403f88:	6008      	str	r0, [r1, #0]
	patterns[4][6][8][1] = 1;
  403f8a:	2101      	movs	r1, #1
  403f8c:	f242 3444 	movw	r4, #9028	; 0x2344
  403f90:	5119      	str	r1, [r3, r4]
	patterns[4][6][9][0] = LUT_E4;
  403f92:	f242 3448 	movw	r4, #9032	; 0x2348
  403f96:	5118      	str	r0, [r3, r4]
	patterns[4][6][9][1] = 0;
  403f98:	f242 344c 	movw	r4, #9036	; 0x234c
  403f9c:	511a      	str	r2, [r3, r4]
	patterns[4][6][10][0] = LUT_E4;
  403f9e:	f242 3450 	movw	r4, #9040	; 0x2350
  403fa2:	5118      	str	r0, [r3, r4]
	patterns[4][6][10][1] = 0;
  403fa4:	f242 3454 	movw	r4, #9044	; 0x2354
  403fa8:	511a      	str	r2, [r3, r4]

	patterns[4][6][11][0] = LUT_F4;
  403faa:	2435      	movs	r4, #53	; 0x35
  403fac:	f242 3558 	movw	r5, #9048	; 0x2358
  403fb0:	515c      	str	r4, [r3, r5]
	patterns[4][6][11][1] = 1;
  403fb2:	f242 355c 	movw	r5, #9052	; 0x235c
  403fb6:	5159      	str	r1, [r3, r5]
	patterns[4][6][12][0] = LUT_E4;
  403fb8:	f242 3560 	movw	r5, #9056	; 0x2360
  403fbc:	5158      	str	r0, [r3, r5]
	patterns[4][6][12][1] = 1;
  403fbe:	f242 3564 	movw	r5, #9060	; 0x2364
  403fc2:	5159      	str	r1, [r3, r5]
	patterns[4][6][13][0] = LUT_F4;
  403fc4:	f242 3568 	movw	r5, #9064	; 0x2368
  403fc8:	515c      	str	r4, [r3, r5]
	patterns[4][6][13][1] = 1;
  403fca:	f242 346c 	movw	r4, #9068	; 0x236c
  403fce:	5119      	str	r1, [r3, r4]
	patterns[4][6][14][0] = LUT_E4;
  403fd0:	f242 3470 	movw	r4, #9072	; 0x2370
  403fd4:	5118      	str	r0, [r3, r4]
	patterns[4][6][14][1] = 1;
  403fd6:	f242 3074 	movw	r0, #9076	; 0x2374
  403fda:	5019      	str	r1, [r3, r0]
	patterns[4][6][15][0] = LUT_C4;
  403fdc:	2430      	movs	r4, #48	; 0x30
  403fde:	f242 3078 	movw	r0, #9080	; 0x2378
  403fe2:	501c      	str	r4, [r3, r0]
	patterns[4][6][15][1] = 1;
  403fe4:	f242 307c 	movw	r0, #9084	; 0x237c
  403fe8:	5019      	str	r1, [r3, r0]
	patterns[4][7][0][0] = LUT_A3;
  403fea:	f503 540e 	add.w	r4, r3, #9088	; 0x2380
  403fee:	202d      	movs	r0, #45	; 0x2d
  403ff0:	6020      	str	r0, [r4, #0]
	patterns[4][7][0][1] = 1;
  403ff2:	f242 3484 	movw	r4, #9092	; 0x2384
  403ff6:	5119      	str	r1, [r3, r4]
	patterns[4][7][1][0] = LUT_A3;
  403ff8:	f242 3488 	movw	r4, #9096	; 0x2388
  403ffc:	5118      	str	r0, [r3, r4]
	patterns[4][7][1][1] = 0;
  403ffe:	f242 348c 	movw	r4, #9100	; 0x238c
  404002:	511a      	str	r2, [r3, r4]
	patterns[4][7][2][0] = LUT_A3;
  404004:	f242 3490 	movw	r4, #9104	; 0x2390
  404008:	5118      	str	r0, [r3, r4]
	patterns[4][7][2][1] = 0;
  40400a:	f242 3494 	movw	r4, #9108	; 0x2394
  40400e:	511a      	str	r2, [r3, r4]
	patterns[4][7][3][0] = LUT_A3;
  404010:	f242 3498 	movw	r4, #9112	; 0x2398
  404014:	5118      	str	r0, [r3, r4]
	patterns[4][7][3][1] = 0;
  404016:	f242 349c 	movw	r4, #9116	; 0x239c
  40401a:	511a      	str	r2, [r3, r4]

	patterns[4][7][4][0] = LUT_A3;
  40401c:	f242 34a0 	movw	r4, #9120	; 0x23a0
  404020:	5118      	str	r0, [r3, r4]
	patterns[4][7][4][1] = 1;
  404022:	f242 34a4 	movw	r4, #9124	; 0x23a4
  404026:	5119      	str	r1, [r3, r4]
	patterns[4][7][5][0] = LUT_A3;
  404028:	f242 34a8 	movw	r4, #9128	; 0x23a8
  40402c:	5118      	str	r0, [r3, r4]
	patterns[4][7][5][1] = 0;
  40402e:	f242 34ac 	movw	r4, #9132	; 0x23ac
  404032:	511a      	str	r2, [r3, r4]

	patterns[4][7][6][0] = LUT_D3;
  404034:	2526      	movs	r5, #38	; 0x26
  404036:	f242 34b0 	movw	r4, #9136	; 0x23b0
  40403a:	511d      	str	r5, [r3, r4]
	patterns[4][7][6][1] = 1;
  40403c:	f242 34b4 	movw	r4, #9140	; 0x23b4
  404040:	5119      	str	r1, [r3, r4]
	patterns[4][7][7][0] = LUT_D3;
  404042:	f242 34b8 	movw	r4, #9144	; 0x23b8
  404046:	511d      	str	r5, [r3, r4]
	patterns[4][7][7][1] = 0;
  404048:	f242 34bc 	movw	r4, #9148	; 0x23bc
  40404c:	511a      	str	r2, [r3, r4]

	patterns[4][7][8][0] = LUT_F3;
  40404e:	f503 540f 	add.w	r4, r3, #9152	; 0x23c0
  404052:	6026      	str	r6, [r4, #0]
	patterns[4][7][8][1] = 1;
  404054:	f242 34c4 	movw	r4, #9156	; 0x23c4
  404058:	5119      	str	r1, [r3, r4]
	patterns[4][7][9][0] = LUT_G3;
  40405a:	262b      	movs	r6, #43	; 0x2b
  40405c:	f242 34c8 	movw	r4, #9160	; 0x23c8
  404060:	511e      	str	r6, [r3, r4]
	patterns[4][7][9][1] = 1;
  404062:	f242 34cc 	movw	r4, #9164	; 0x23cc
  404066:	5119      	str	r1, [r3, r4]

	patterns[4][7][10][0] = LUT_A3;
  404068:	f242 34d0 	movw	r4, #9168	; 0x23d0
  40406c:	5118      	str	r0, [r3, r4]
	patterns[4][7][10][1] = 1;
  40406e:	f242 34d4 	movw	r4, #9172	; 0x23d4
  404072:	5119      	str	r1, [r3, r4]
	patterns[4][7][11][0] = LUT_A3;
  404074:	f242 34d8 	movw	r4, #9176	; 0x23d8
  404078:	5118      	str	r0, [r3, r4]
	patterns[4][7][11][1] = 0;
  40407a:	f242 34dc 	movw	r4, #9180	; 0x23dc
  40407e:	511a      	str	r2, [r3, r4]

	patterns[4][7][12][0] = LUT_A2;
  404080:	2421      	movs	r4, #33	; 0x21
  404082:	f242 36e0 	movw	r6, #9184	; 0x23e0
  404086:	519c      	str	r4, [r3, r6]
	patterns[4][7][12][1] = 1;
  404088:	f242 36e4 	movw	r6, #9188	; 0x23e4
  40408c:	5199      	str	r1, [r3, r6]
	patterns[4][7][13][0] = LUT_A2;
  40408e:	f242 36e8 	movw	r6, #9192	; 0x23e8
  404092:	519c      	str	r4, [r3, r6]
	patterns[4][7][13][1] = 0;
  404094:	f242 36ec 	movw	r6, #9196	; 0x23ec
  404098:	519a      	str	r2, [r3, r6]

	patterns[4][7][14][0] = LUT_A3;
  40409a:	f242 36f0 	movw	r6, #9200	; 0x23f0
  40409e:	5198      	str	r0, [r3, r6]
	patterns[4][7][14][1] = 1;
  4040a0:	f242 36f4 	movw	r6, #9204	; 0x23f4
  4040a4:	5199      	str	r1, [r3, r6]
	patterns[4][7][15][0] = LUT_A3;
  4040a6:	f242 36f8 	movw	r6, #9208	; 0x23f8
  4040aa:	5198      	str	r0, [r3, r6]
	patterns[4][7][15][1] = 0;
  4040ac:	f242 30fc 	movw	r0, #9212	; 0x23fc
  4040b0:	501a      	str	r2, [r3, r0]

	patterns[4][8][0][0] = LUT_D3;
  4040b2:	f503 5010 	add.w	r0, r3, #9216	; 0x2400
  4040b6:	6005      	str	r5, [r0, #0]
	patterns[4][8][0][1] = 1;
  4040b8:	f242 4004 	movw	r0, #9220	; 0x2404
  4040bc:	5019      	str	r1, [r3, r0]
	patterns[4][8][1][0] = LUT_D3;
  4040be:	f242 4008 	movw	r0, #9224	; 0x2408
  4040c2:	501d      	str	r5, [r3, r0]
	patterns[4][8][1][1] = 0;
  4040c4:	f242 400c 	movw	r0, #9228	; 0x240c
  4040c8:	501a      	str	r2, [r3, r0]

	patterns[4][8][2][0] = LUT_A2;
  4040ca:	f242 4010 	movw	r0, #9232	; 0x2410
  4040ce:	501c      	str	r4, [r3, r0]
	patterns[4][8][2][1] = 1;
  4040d0:	f242 4014 	movw	r0, #9236	; 0x2414
  4040d4:	5019      	str	r1, [r3, r0]
	patterns[4][8][3][0] = LUT_A2;
  4040d6:	f242 4018 	movw	r0, #9240	; 0x2418
  4040da:	501c      	str	r4, [r3, r0]
	patterns[4][8][3][1] = 0;
  4040dc:	f242 401c 	movw	r0, #9244	; 0x241c
  4040e0:	501a      	str	r2, [r3, r0]
	patterns[4][8][4][0] = LUT_A2;
  4040e2:	f242 4020 	movw	r0, #9248	; 0x2420
  4040e6:	501c      	str	r4, [r3, r0]
	patterns[4][8][4][1] = 1;
  4040e8:	f242 4024 	movw	r0, #9252	; 0x2424
  4040ec:	5019      	str	r1, [r3, r0]
	patterns[4][8][5][0] = LUT_A2;
  4040ee:	f242 4028 	movw	r0, #9256	; 0x2428
  4040f2:	501c      	str	r4, [r3, r0]
	patterns[4][8][5][1] = 0;
  4040f4:	f242 402c 	movw	r0, #9260	; 0x242c
  4040f8:	501a      	str	r2, [r3, r0]

	patterns[4][8][6][0] = LUT_E2;
  4040fa:	201c      	movs	r0, #28
  4040fc:	f242 4430 	movw	r4, #9264	; 0x2430
  404100:	5118      	str	r0, [r3, r4]
	patterns[4][8][6][1] = 1;
	patterns[4][8][7][0] = LUT_E2;
  404102:	f242 4438 	movw	r4, #9272	; 0x2438
  404106:	5118      	str	r0, [r3, r4]
	patterns[4][8][6][1] = 0;
  404108:	f242 4034 	movw	r0, #9268	; 0x2434
  40410c:	501a      	str	r2, [r3, r0]

	patterns[4][8][8][0] = LUT_B2;
  40410e:	f503 5411 	add.w	r4, r3, #9280	; 0x2440
  404112:	2023      	movs	r0, #35	; 0x23
  404114:	6020      	str	r0, [r4, #0]
	patterns[4][8][8][1] = 1;
  404116:	f242 4444 	movw	r4, #9284	; 0x2444
  40411a:	5119      	str	r1, [r3, r4]
	patterns[4][8][9][0] = LUT_B2;
  40411c:	f242 4448 	movw	r4, #9288	; 0x2448
  404120:	5118      	str	r0, [r3, r4]
	patterns[4][8][9][1] = 0;
  404122:	f242 444c 	movw	r4, #9292	; 0x244c
  404126:	511a      	str	r2, [r3, r4]
	patterns[4][8][10][0] = LUT_B2;
  404128:	f242 4450 	movw	r4, #9296	; 0x2450
  40412c:	5118      	str	r0, [r3, r4]
	patterns[4][8][10][1] = 0;
  40412e:	f242 4454 	movw	r4, #9300	; 0x2454
  404132:	511a      	str	r2, [r3, r4]
	patterns[4][8][11][0] = LUT_B2;
  404134:	f242 4458 	movw	r4, #9304	; 0x2458
  404138:	5118      	str	r0, [r3, r4]
	patterns[4][8][11][1] = 0;
  40413a:	f242 405c 	movw	r0, #9308	; 0x245c
  40413e:	501a      	str	r2, [r3, r0]

	patterns[4][8][12][1] = 0;
  404140:	f242 4064 	movw	r0, #9316	; 0x2464
  404144:	501a      	str	r2, [r3, r0]
	patterns[4][8][13][1] = 0;
  404146:	f242 406c 	movw	r0, #9324	; 0x246c
  40414a:	501a      	str	r2, [r3, r0]

	patterns[4][8][14][0] = LUT_C3;
  40414c:	2024      	movs	r0, #36	; 0x24
  40414e:	f242 4470 	movw	r4, #9328	; 0x2470
  404152:	5118      	str	r0, [r3, r4]
	patterns[4][8][14][1] = 1;
  404154:	f242 4474 	movw	r4, #9332	; 0x2474
  404158:	5119      	str	r1, [r3, r4]
	patterns[4][8][15][0] = LUT_C3;
  40415a:	f242 4178 	movw	r1, #9336	; 0x2478
  40415e:	5058      	str	r0, [r3, r1]
	patterns[4][8][15][1] = 0;
  404160:	f242 417c 	movw	r1, #9340	; 0x247c
  404164:	505a      	str	r2, [r3, r1]
  404166:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40416a:	bf00      	nop

0040416c <notes_inc>:


}


void notes_inc(uint8_t step){
  40416c:	b410      	push	{r4}
	if (patterns[curr_pattern][display_page][step][0] < 108){
  40416e:	4b0b      	ldr	r3, [pc, #44]	; (40419c <notes_inc+0x30>)
  404170:	7819      	ldrb	r1, [r3, #0]
  404172:	4b0b      	ldr	r3, [pc, #44]	; (4041a0 <notes_inc+0x34>)
  404174:	781a      	ldrb	r2, [r3, #0]
  404176:	eb02 1301 	add.w	r3, r2, r1, lsl #4
  40417a:	eb00 1303 	add.w	r3, r0, r3, lsl #4
  40417e:	4c09      	ldr	r4, [pc, #36]	; (4041a4 <notes_inc+0x38>)
  404180:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
  404184:	2b6b      	cmp	r3, #107	; 0x6b
  404186:	dc06      	bgt.n	404196 <notes_inc+0x2a>
		patterns[curr_pattern][display_page][step][0]++;
  404188:	eb02 1201 	add.w	r2, r2, r1, lsl #4
  40418c:	eb00 1002 	add.w	r0, r0, r2, lsl #4
  404190:	3301      	adds	r3, #1
  404192:	f844 3030 	str.w	r3, [r4, r0, lsl #3]
// 	patterns[curr_pattern_ch[1]][curr_page_ch[1]][11][1] = 1;
// 	patterns[curr_pattern_ch[1]][curr_page_ch[1]][12][1] = 1;
// 	patterns[curr_pattern_ch[1]][curr_page_ch[1]][13][1] = 1;
// 	patterns[curr_pattern_ch[1]][curr_page_ch[1]][14][1] = 0;
// 	patterns[curr_pattern_ch[1]][curr_page_ch[1]][15][1] = 1;
}
  404196:	bc10      	pop	{r4}
  404198:	4770      	bx	lr
  40419a:	bf00      	nop
  40419c:	200006d0 	.word	0x200006d0
  4041a0:	200006f4 	.word	0x200006f4
  4041a4:	20000710 	.word	0x20000710

004041a8 <notes_dec>:

void notes_dec(uint8_t step){
  4041a8:	b410      	push	{r4}
	if (patterns[curr_pattern][display_page][step][0] > 0){
  4041aa:	4b0b      	ldr	r3, [pc, #44]	; (4041d8 <notes_dec+0x30>)
  4041ac:	7819      	ldrb	r1, [r3, #0]
  4041ae:	4b0b      	ldr	r3, [pc, #44]	; (4041dc <notes_dec+0x34>)
  4041b0:	781a      	ldrb	r2, [r3, #0]
  4041b2:	eb02 1301 	add.w	r3, r2, r1, lsl #4
  4041b6:	eb00 1303 	add.w	r3, r0, r3, lsl #4
  4041ba:	4c09      	ldr	r4, [pc, #36]	; (4041e0 <notes_dec+0x38>)
  4041bc:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
  4041c0:	2b00      	cmp	r3, #0
  4041c2:	dd06      	ble.n	4041d2 <notes_dec+0x2a>
		patterns[curr_pattern][display_page][step][0]--;
  4041c4:	eb02 1201 	add.w	r2, r2, r1, lsl #4
  4041c8:	eb00 1002 	add.w	r0, r0, r2, lsl #4
  4041cc:	3b01      	subs	r3, #1
  4041ce:	f844 3030 	str.w	r3, [r4, r0, lsl #3]
// 	patterns[curr_pattern_ch[1]][curr_page_ch[1]][11][1] = 1;
// 	patterns[curr_pattern_ch[1]][curr_page_ch[1]][12][1] = 1;
// 	patterns[curr_pattern_ch[1]][curr_page_ch[1]][13][1] = 1;
// 	patterns[curr_pattern_ch[1]][curr_page_ch[1]][14][1] = 0;
// 	patterns[curr_pattern_ch[1]][curr_page_ch[1]][15][1] = 1;
}
  4041d2:	bc10      	pop	{r4}
  4041d4:	4770      	bx	lr
  4041d6:	bf00      	nop
  4041d8:	200006d0 	.word	0x200006d0
  4041dc:	200006f4 	.word	0x200006f4
  4041e0:	20000710 	.word	0x20000710

004041e4 <timers_init>:
 #include "displays.h"


 void timers_init(void) {

	overflow_count = 0;
  4041e4:	2300      	movs	r3, #0
  4041e6:	4a2d      	ldr	r2, [pc, #180]	; (40429c <timers_init+0xb8>)
  4041e8:	8013      	strh	r3, [r2, #0]
	note_overflow_count = 0;
  4041ea:	4a2d      	ldr	r2, [pc, #180]	; (4042a0 <timers_init+0xbc>)
  4041ec:	8013      	strh	r3, [r2, #0]
	refresh_overflow_count = 0;
  4041ee:	4a2d      	ldr	r2, [pc, #180]	; (4042a4 <timers_init+0xc0>)
  4041f0:	8013      	strh	r3, [r2, #0]
	resolution = 2;
  4041f2:	2102      	movs	r1, #2
  4041f4:	4a2c      	ldr	r2, [pc, #176]	; (4042a8 <timers_init+0xc4>)
  4041f6:	6011      	str	r1, [r2, #0]
	display_page = 0;
  4041f8:	4a2c      	ldr	r2, [pc, #176]	; (4042ac <timers_init+0xc8>)
  4041fa:	7013      	strb	r3, [r2, #0]
	page_loop = 0;
  4041fc:	4a2c      	ldr	r2, [pc, #176]	; (4042b0 <timers_init+0xcc>)
  4041fe:	7013      	strb	r3, [r2, #0]
	curr_step = 0;
  404200:	4a2c      	ldr	r2, [pc, #176]	; (4042b4 <timers_init+0xd0>)
  404202:	7013      	strb	r3, [r2, #0]
	curr_page = 0;
  404204:	4a2c      	ldr	r2, [pc, #176]	; (4042b8 <timers_init+0xd4>)
  404206:	7013      	strb	r3, [r2, #0]
	curr_pattern = 0;
  404208:	4a2c      	ldr	r2, [pc, #176]	; (4042bc <timers_init+0xd8>)
  40420a:	7013      	strb	r3, [r2, #0]

	curr_pattern_ch[0] = 0;
  40420c:	4a2c      	ldr	r2, [pc, #176]	; (4042c0 <timers_init+0xdc>)
  40420e:	7013      	strb	r3, [r2, #0]
	curr_pattern_ch[1] = 1;
  404210:	2001      	movs	r0, #1
  404212:	7050      	strb	r0, [r2, #1]
	curr_pattern_ch[2] = 2;
  404214:	7091      	strb	r1, [r2, #2]
	curr_pattern_ch[3] = 3;
  404216:	2103      	movs	r1, #3
  404218:	70d1      	strb	r1, [r2, #3]

	curr_page_ch[0] = 0;
  40421a:	4a2a      	ldr	r2, [pc, #168]	; (4042c4 <timers_init+0xe0>)
  40421c:	7013      	strb	r3, [r2, #0]
	curr_page_ch[1] = 0;
  40421e:	7053      	strb	r3, [r2, #1]
	curr_page_ch[2] = 0;
  404220:	7093      	strb	r3, [r2, #2]
	curr_page_ch[3] = 0;
  404222:	70d3      	strb	r3, [r2, #3]

	page_loop_ch[0] = 0;
  404224:	4a28      	ldr	r2, [pc, #160]	; (4042c8 <timers_init+0xe4>)
  404226:	7013      	strb	r3, [r2, #0]
	page_loop_ch[1] = 0;
  404228:	7053      	strb	r3, [r2, #1]
	page_loop_ch[2] = 0;
  40422a:	7093      	strb	r3, [r2, #2]
	page_loop_ch[3] = 0;
  40422c:	70d3      	strb	r3, [r2, #3]

	channel_mute[0] = 0;
  40422e:	4a27      	ldr	r2, [pc, #156]	; (4042cc <timers_init+0xe8>)
  404230:	7013      	strb	r3, [r2, #0]
	channel_mute[1] = 0;
  404232:	7053      	strb	r3, [r2, #1]
	channel_mute[2] = 0;
  404234:	7093      	strb	r3, [r2, #2]
	channel_mute[3] = 0;
  404236:	70d3      	strb	r3, [r2, #3]
  404238:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  40423c:	4b24      	ldr	r3, [pc, #144]	; (4042d0 <timers_init+0xec>)
  40423e:	601a      	str	r2, [r3, #0]
	NVIC_EnableIRQ(TC0_IRQn);
	//NVIC_EnableIRQ(TC1_IRQn);

	// Enable peripheral clock for TC0
	// Peripheral ID (PID) for TC0 is 23
	REG_PMC_PCER0 |= PMC_PCER0_PID23;
  404240:	4b24      	ldr	r3, [pc, #144]	; (4042d4 <timers_init+0xf0>)
  404242:	681a      	ldr	r2, [r3, #0]
  404244:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
  404248:	601a      	str	r2, [r3, #0]
	
	// Enable peripheral clock for TC1
	// Peripheral ID (PID) for TC1 is 24
	REG_PMC_PCER0 |= PMC_PCER0_PID24;
  40424a:	681a      	ldr	r2, [r3, #0]
  40424c:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
  404250:	601a      	str	r2, [r3, #0]
	// TIMER_CLOCK1 = MCK/2
	// TIMER_CLOCK2 = MCK/8
	// TIMER_CLOCK3 = MCK/32
	// TIMER_CLOCK4 = MCK/128
	// TIMER_CLOCK5 = SCLK
	REG_TC0_CMR0 |= TC_CMR_TCCLKS_TIMER_CLOCK2 | TC_CMR_CPCTRG;
  404252:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
  404256:	f101 1101 	add.w	r1, r1, #65537	; 0x10001
  40425a:	680a      	ldr	r2, [r1, #0]
  40425c:	f244 0301 	movw	r3, #16385	; 0x4001
  404260:	431a      	orrs	r2, r3
  404262:	600a      	str	r2, [r1, #0]
	REG_TC0_CMR1 |= TC_CMR_TCCLKS_TIMER_CLOCK2 | TC_CMR_CPCTRG;
  404264:	4a1c      	ldr	r2, [pc, #112]	; (4042d8 <timers_init+0xf4>)
  404266:	6811      	ldr	r1, [r2, #0]
  404268:	430b      	orrs	r3, r1
  40426a:	6013      	str	r3, [r2, #0]
	// REG_TC0_CMR2 |= TC_CMR_TCCLKS_TIMER_CLOCK4 | TC_CMR_CPCTRG;
	// Set interrupt on compare to RC value
	REG_TC0_IER0 |= TC_IER_CPCS;
  40426c:	3a20      	subs	r2, #32
  40426e:	6813      	ldr	r3, [r2, #0]
  404270:	f043 0310 	orr.w	r3, r3, #16
  404274:	6013      	str	r3, [r2, #0]
	REG_TC0_IER1 |= TC_IER_CPCS;
  404276:	3240      	adds	r2, #64	; 0x40
  404278:	6813      	ldr	r3, [r2, #0]
  40427a:	f043 0310 	orr.w	r3, r3, #16
  40427e:	6013      	str	r3, [r2, #0]
	// REG_TC0_IER2 |= TC_IER_CPCS;

	// 60 BPM = 1 Hz. MCK/8 = 12.5 MHz. 12.5 million counts per second, 1 interrupt per cycle
	// Anticipating 10000 overflows (10000*1250 is 12.5 million counts)
	REG_TC0_RC0 = 1250;
  404280:	f240 42e2 	movw	r2, #1250	; 0x4e2
  404284:	4b15      	ldr	r3, [pc, #84]	; (4042dc <timers_init+0xf8>)
  404286:	601a      	str	r2, [r3, #0]

	// 2 seconds = 0.5 Hz. MCK/8 = 12.5 MHz. 25 million counts
	// Anticipating 10000 overflows (10000*2500 is 25 million counts)
	REG_TC0_RC1 = 2500;
  404288:	f640 12c4 	movw	r2, #2500	; 0x9c4
  40428c:	3340      	adds	r3, #64	; 0x40
  40428e:	601a      	str	r2, [r3, #0]
// 	REG_PIOA_PER |= PIO_PER_0; //enable PIO controller on PA11
// 	REG_PIOA_OER |= PIO_PER_P20; //enable output on pin PA11
	/*REG_PMC_PCER0 |= PMC_PCER0_PID11; //Enable PMC control for PA11*/

	// TC0 control register enables timer and triggers it to start
	REG_TC0_CCR0 |= TC_CCR_CLKEN | TC_CCR_SWTRG;
  404290:	4a13      	ldr	r2, [pc, #76]	; (4042e0 <timers_init+0xfc>)
  404292:	6813      	ldr	r3, [r2, #0]
  404294:	f043 0305 	orr.w	r3, r3, #5
  404298:	6013      	str	r3, [r2, #0]
  40429a:	4770      	bx	lr
  40429c:	200006e4 	.word	0x200006e4
  4042a0:	200006d2 	.word	0x200006d2
  4042a4:	200006d4 	.word	0x200006d4
  4042a8:	200006d8 	.word	0x200006d8
  4042ac:	200006f4 	.word	0x200006f4
  4042b0:	200006dc 	.word	0x200006dc
  4042b4:	200006ec 	.word	0x200006ec
  4042b8:	200006fe 	.word	0x200006fe
  4042bc:	200006d0 	.word	0x200006d0
  4042c0:	200006e8 	.word	0x200006e8
  4042c4:	200006e0 	.word	0x200006e0
  4042c8:	200006f8 	.word	0x200006f8
  4042cc:	200006f0 	.word	0x200006f0
  4042d0:	e000e100 	.word	0xe000e100
  4042d4:	400e0410 	.word	0x400e0410
  4042d8:	40010044 	.word	0x40010044
  4042dc:	4001001c 	.word	0x4001001c
  4042e0:	40010000 	.word	0x40010000

004042e4 <update_timers>:

 void update_timers(int bpm) {
// 	// (SCK/2) / (bpm/60); SCK*60/2 = 960000
// 	// Offset is needed, possible not with the crystals working
// 	REG_TC0_RC0 = (uint16_t)(960000/bpm - 420);
	if(bpm > 1) {
  4042e4:	2801      	cmp	r0, #1
  4042e6:	dd0e      	ble.n	404306 <update_timers+0x22>
	REG_TC0_CCR0 |= TC_CCR_CLKEN | TC_CCR_SWTRG;
//	REG_TC0_CCR1 |= TC_CCR_CLKEN | TC_CCR_SWTRG;
//	REG_TC0_CCR2 |= TC_CCR_CLKEN | TC_CCR_SWTRG;
 }

 void update_timers(int bpm) {
  4042e8:	b510      	push	{r4, lr}
  4042ea:	4604      	mov	r4, r0
// 	// (SCK/2) / (bpm/60); SCK*60/2 = 960000
// 	// Offset is needed, possible not with the crystals working
// 	REG_TC0_RC0 = (uint16_t)(960000/bpm - 420);
	if(bpm > 1) {
		REG_TC0_RC0 = (uint16_t)(75000/(bpm*res_to_int(resolution)));
  4042ec:	4b06      	ldr	r3, [pc, #24]	; (404308 <update_timers+0x24>)
  4042ee:	7818      	ldrb	r0, [r3, #0]
  4042f0:	4b06      	ldr	r3, [pc, #24]	; (40430c <update_timers+0x28>)
  4042f2:	4798      	blx	r3
  4042f4:	fb04 f000 	mul.w	r0, r4, r0
  4042f8:	4c05      	ldr	r4, [pc, #20]	; (404310 <update_timers+0x2c>)
  4042fa:	fb94 f0f0 	sdiv	r0, r4, r0
  4042fe:	b280      	uxth	r0, r0
  404300:	4b04      	ldr	r3, [pc, #16]	; (404314 <update_timers+0x30>)
  404302:	6018      	str	r0, [r3, #0]
  404304:	bd10      	pop	{r4, pc}
  404306:	4770      	bx	lr
  404308:	200006d8 	.word	0x200006d8
  40430c:	004028d5 	.word	0x004028d5
  404310:	000124f8 	.word	0x000124f8
  404314:	4001001c 	.word	0x4001001c

00404318 <TC0_Handler>:
	}

 }

  void TC0_Handler() {
  404318:	b570      	push	{r4, r5, r6, lr}

	  // Step count timer
	  // Test code, normally trigger next step, output clock
	  if((REG_TC0_SR0 & TC_SR_CPCS) >= 1) {
  40431a:	4b6d      	ldr	r3, [pc, #436]	; (4044d0 <TC0_Handler+0x1b8>)
  40431c:	681b      	ldr	r3, [r3, #0]
  40431e:	f013 0f10 	tst.w	r3, #16
  404322:	f000 80b7 	beq.w	404494 <TC0_Handler+0x17c>

		  //turn off gates for each channel
		  if ( (overflow_count == note_length)){ //note_length
  404326:	4b6b      	ldr	r3, [pc, #428]	; (4044d4 <TC0_Handler+0x1bc>)
  404328:	881a      	ldrh	r2, [r3, #0]
  40432a:	4b6b      	ldr	r3, [pc, #428]	; (4044d8 <TC0_Handler+0x1c0>)
  40432c:	881b      	ldrh	r3, [r3, #0]
  40432e:	429a      	cmp	r2, r3
  404330:	d108      	bne.n	404344 <TC0_Handler+0x2c>
			  DAC_write_gate_off(CHANNEL_1);
  404332:	2000      	movs	r0, #0
  404334:	4c69      	ldr	r4, [pc, #420]	; (4044dc <TC0_Handler+0x1c4>)
  404336:	47a0      	blx	r4
			  DAC_write_gate_off(CHANNEL_2);
  404338:	2001      	movs	r0, #1
  40433a:	47a0      	blx	r4
			  DAC_write_gate_off(CHANNEL_3);
  40433c:	2002      	movs	r0, #2
  40433e:	47a0      	blx	r4
			  DAC_write_gate_off(CHANNEL_4);
  404340:	2003      	movs	r0, #3
  404342:	47a0      	blx	r4
		  }

		  if(overflow_count == 20000) {
  404344:	4b63      	ldr	r3, [pc, #396]	; (4044d4 <TC0_Handler+0x1bc>)
  404346:	881a      	ldrh	r2, [r3, #0]
  404348:	f644 6320 	movw	r3, #20000	; 0x4e20
  40434c:	429a      	cmp	r2, r3
  40434e:	f040 8093 	bne.w	404478 <TC0_Handler+0x160>

			  //update the CVs for each channel
			  //update the gates for each channel
			  SPI_dac_init();
  404352:	4b63      	ldr	r3, [pc, #396]	; (4044e0 <TC0_Handler+0x1c8>)
  404354:	4798      	blx	r3

			  if ( (notes_status_get(curr_step, CHANNEL_1) == 1) && channel_mute[CHANNEL_1] == 0){
  404356:	2100      	movs	r1, #0
  404358:	4b62      	ldr	r3, [pc, #392]	; (4044e4 <TC0_Handler+0x1cc>)
  40435a:	7818      	ldrb	r0, [r3, #0]
  40435c:	4b62      	ldr	r3, [pc, #392]	; (4044e8 <TC0_Handler+0x1d0>)
  40435e:	4798      	blx	r3
  404360:	2801      	cmp	r0, #1
  404362:	d10d      	bne.n	404380 <TC0_Handler+0x68>
  404364:	4b61      	ldr	r3, [pc, #388]	; (4044ec <TC0_Handler+0x1d4>)
  404366:	781b      	ldrb	r3, [r3, #0]
  404368:	b953      	cbnz	r3, 404380 <TC0_Handler+0x68>
				  DAC_write_cv(notes_get(curr_step, CHANNEL_1), CHANNEL_1);
  40436a:	2100      	movs	r1, #0
  40436c:	4b5d      	ldr	r3, [pc, #372]	; (4044e4 <TC0_Handler+0x1cc>)
  40436e:	7818      	ldrb	r0, [r3, #0]
  404370:	4b5f      	ldr	r3, [pc, #380]	; (4044f0 <TC0_Handler+0x1d8>)
  404372:	4798      	blx	r3
  404374:	2100      	movs	r1, #0
  404376:	4b5f      	ldr	r3, [pc, #380]	; (4044f4 <TC0_Handler+0x1dc>)
  404378:	4798      	blx	r3
				  DAC_write_gate_on(CHANNEL_1);
  40437a:	2000      	movs	r0, #0
  40437c:	4b5e      	ldr	r3, [pc, #376]	; (4044f8 <TC0_Handler+0x1e0>)
  40437e:	4798      	blx	r3
			  }
			  if ( (notes_status_get(curr_step, CHANNEL_2) == 1) && channel_mute[CHANNEL_2] == 0){
  404380:	2101      	movs	r1, #1
  404382:	4b58      	ldr	r3, [pc, #352]	; (4044e4 <TC0_Handler+0x1cc>)
  404384:	7818      	ldrb	r0, [r3, #0]
  404386:	4b58      	ldr	r3, [pc, #352]	; (4044e8 <TC0_Handler+0x1d0>)
  404388:	4798      	blx	r3
  40438a:	2801      	cmp	r0, #1
  40438c:	d10d      	bne.n	4043aa <TC0_Handler+0x92>
  40438e:	4b57      	ldr	r3, [pc, #348]	; (4044ec <TC0_Handler+0x1d4>)
  404390:	785b      	ldrb	r3, [r3, #1]
  404392:	b953      	cbnz	r3, 4043aa <TC0_Handler+0x92>
				   DAC_write_cv(notes_get(curr_step, CHANNEL_2), CHANNEL_2);
  404394:	2101      	movs	r1, #1
  404396:	4b53      	ldr	r3, [pc, #332]	; (4044e4 <TC0_Handler+0x1cc>)
  404398:	7818      	ldrb	r0, [r3, #0]
  40439a:	4b55      	ldr	r3, [pc, #340]	; (4044f0 <TC0_Handler+0x1d8>)
  40439c:	4798      	blx	r3
  40439e:	2101      	movs	r1, #1
  4043a0:	4b54      	ldr	r3, [pc, #336]	; (4044f4 <TC0_Handler+0x1dc>)
  4043a2:	4798      	blx	r3
				   DAC_write_gate_on(CHANNEL_2);
  4043a4:	2001      	movs	r0, #1
  4043a6:	4b54      	ldr	r3, [pc, #336]	; (4044f8 <TC0_Handler+0x1e0>)
  4043a8:	4798      	blx	r3
			  }
			  if ( (notes_status_get(curr_step, CHANNEL_3) == 1) && channel_mute[CHANNEL_3] == 0){
  4043aa:	2102      	movs	r1, #2
  4043ac:	4b4d      	ldr	r3, [pc, #308]	; (4044e4 <TC0_Handler+0x1cc>)
  4043ae:	7818      	ldrb	r0, [r3, #0]
  4043b0:	4b4d      	ldr	r3, [pc, #308]	; (4044e8 <TC0_Handler+0x1d0>)
  4043b2:	4798      	blx	r3
  4043b4:	2801      	cmp	r0, #1
  4043b6:	d10d      	bne.n	4043d4 <TC0_Handler+0xbc>
  4043b8:	4b4c      	ldr	r3, [pc, #304]	; (4044ec <TC0_Handler+0x1d4>)
  4043ba:	789b      	ldrb	r3, [r3, #2]
  4043bc:	b953      	cbnz	r3, 4043d4 <TC0_Handler+0xbc>
				  DAC_write_cv(notes_get(curr_step, CHANNEL_3), CHANNEL_3);
  4043be:	2102      	movs	r1, #2
  4043c0:	4b48      	ldr	r3, [pc, #288]	; (4044e4 <TC0_Handler+0x1cc>)
  4043c2:	7818      	ldrb	r0, [r3, #0]
  4043c4:	4b4a      	ldr	r3, [pc, #296]	; (4044f0 <TC0_Handler+0x1d8>)
  4043c6:	4798      	blx	r3
  4043c8:	2102      	movs	r1, #2
  4043ca:	4b4a      	ldr	r3, [pc, #296]	; (4044f4 <TC0_Handler+0x1dc>)
  4043cc:	4798      	blx	r3
				  DAC_write_gate_on(CHANNEL_3);
  4043ce:	2002      	movs	r0, #2
  4043d0:	4b49      	ldr	r3, [pc, #292]	; (4044f8 <TC0_Handler+0x1e0>)
  4043d2:	4798      	blx	r3
			  }
			  if ( (notes_status_get(curr_step, CHANNEL_4) == 1) && channel_mute[CHANNEL_4] == 0){
  4043d4:	2103      	movs	r1, #3
  4043d6:	4b43      	ldr	r3, [pc, #268]	; (4044e4 <TC0_Handler+0x1cc>)
  4043d8:	7818      	ldrb	r0, [r3, #0]
  4043da:	4b43      	ldr	r3, [pc, #268]	; (4044e8 <TC0_Handler+0x1d0>)
  4043dc:	4798      	blx	r3
  4043de:	2801      	cmp	r0, #1
  4043e0:	d10d      	bne.n	4043fe <TC0_Handler+0xe6>
  4043e2:	4b42      	ldr	r3, [pc, #264]	; (4044ec <TC0_Handler+0x1d4>)
  4043e4:	78db      	ldrb	r3, [r3, #3]
  4043e6:	b953      	cbnz	r3, 4043fe <TC0_Handler+0xe6>
				  DAC_write_cv(notes_get(curr_step, CHANNEL_4), CHANNEL_4);
  4043e8:	2103      	movs	r1, #3
  4043ea:	4b3e      	ldr	r3, [pc, #248]	; (4044e4 <TC0_Handler+0x1cc>)
  4043ec:	7818      	ldrb	r0, [r3, #0]
  4043ee:	4b40      	ldr	r3, [pc, #256]	; (4044f0 <TC0_Handler+0x1d8>)
  4043f0:	4798      	blx	r3
  4043f2:	2103      	movs	r1, #3
  4043f4:	4b3f      	ldr	r3, [pc, #252]	; (4044f4 <TC0_Handler+0x1dc>)
  4043f6:	4798      	blx	r3
				  DAC_write_gate_on(CHANNEL_4);
  4043f8:	2003      	movs	r0, #3
  4043fa:	4b3f      	ldr	r3, [pc, #252]	; (4044f8 <TC0_Handler+0x1e0>)
  4043fc:	4798      	blx	r3
			  }

			  REG_ADC_CR |= ADC_CR_START;
  4043fe:	4a3f      	ldr	r2, [pc, #252]	; (4044fc <TC0_Handler+0x1e4>)
  404400:	6813      	ldr	r3, [r2, #0]
  404402:	f043 0302 	orr.w	r3, r3, #2
  404406:	6013      	str	r3, [r2, #0]
		  }
		  if(overflow_count == 20000) {
  404408:	4b32      	ldr	r3, [pc, #200]	; (4044d4 <TC0_Handler+0x1bc>)
  40440a:	881a      	ldrh	r2, [r3, #0]
  40440c:	f644 6320 	movw	r3, #20000	; 0x4e20
  404410:	429a      	cmp	r2, r3
  404412:	d131      	bne.n	404478 <TC0_Handler+0x160>
			  SPI_led_init();
  404414:	4b3a      	ldr	r3, [pc, #232]	; (404500 <TC0_Handler+0x1e8>)
  404416:	4798      	blx	r3
			  leds_update_cursor(curr_step);
  404418:	4c32      	ldr	r4, [pc, #200]	; (4044e4 <TC0_Handler+0x1cc>)
  40441a:	7820      	ldrb	r0, [r4, #0]
  40441c:	4b39      	ldr	r3, [pc, #228]	; (404504 <TC0_Handler+0x1ec>)
  40441e:	4798      	blx	r3

			  if (curr_step == 15){
  404420:	7823      	ldrb	r3, [r4, #0]
  404422:	2b0f      	cmp	r3, #15
  404424:	d125      	bne.n	404472 <TC0_Handler+0x15a>
				  //increment to next page or go back to first page

				  //update display page
				  if (curr_page < patterns_loop[curr_pattern]){
  404426:	4b38      	ldr	r3, [pc, #224]	; (404508 <TC0_Handler+0x1f0>)
  404428:	781b      	ldrb	r3, [r3, #0]
  40442a:	4a38      	ldr	r2, [pc, #224]	; (40450c <TC0_Handler+0x1f4>)
  40442c:	7812      	ldrb	r2, [r2, #0]
  40442e:	4938      	ldr	r1, [pc, #224]	; (404510 <TC0_Handler+0x1f8>)
  404430:	5c8a      	ldrb	r2, [r1, r2]
  404432:	429a      	cmp	r2, r3
  404434:	d903      	bls.n	40443e <TC0_Handler+0x126>
					  curr_page++;
  404436:	3301      	adds	r3, #1
  404438:	4a33      	ldr	r2, [pc, #204]	; (404508 <TC0_Handler+0x1f0>)
  40443a:	7013      	strb	r3, [r2, #0]
  40443c:	e002      	b.n	404444 <TC0_Handler+0x12c>
				  }
				  else{
					  curr_page = 0;
  40443e:	2200      	movs	r2, #0
  404440:	4b31      	ldr	r3, [pc, #196]	; (404508 <TC0_Handler+0x1f0>)
  404442:	701a      	strb	r2, [r3, #0]
  404444:	4b33      	ldr	r3, [pc, #204]	; (404514 <TC0_Handler+0x1fc>)
  404446:	4934      	ldr	r1, [pc, #208]	; (404518 <TC0_Handler+0x200>)
  404448:	1d1d      	adds	r5, r3, #4
				  }

				  //update note / page for each channel output
				  for (int i = 0; i < 4; i++){

					  if (curr_page_ch[i] < patterns_loop[curr_pattern_ch[i]]){
  40444a:	4c31      	ldr	r4, [pc, #196]	; (404510 <TC0_Handler+0x1f8>)
						  curr_page_ch[i]++;
					  }
					  else{
						  curr_page_ch[i] = 0;
  40444c:	2600      	movs	r6, #0
				  }

				  //update note / page for each channel output
				  for (int i = 0; i < 4; i++){

					  if (curr_page_ch[i] < patterns_loop[curr_pattern_ch[i]]){
  40444e:	f813 2b01 	ldrb.w	r2, [r3], #1
  404452:	f811 0b01 	ldrb.w	r0, [r1], #1
  404456:	5c20      	ldrb	r0, [r4, r0]
  404458:	4290      	cmp	r0, r2
						  curr_page_ch[i]++;
  40445a:	bf86      	itte	hi
  40445c:	3201      	addhi	r2, #1
  40445e:	f803 2c01 	strbhi.w	r2, [r3, #-1]
					  }
					  else{
						  curr_page_ch[i] = 0;
  404462:	f803 6c01 	strbls.w	r6, [r3, #-1]
				  else{
					  curr_page = 0;
				  }

				  //update note / page for each channel output
				  for (int i = 0; i < 4; i++){
  404466:	42ab      	cmp	r3, r5
  404468:	d1f1      	bne.n	40444e <TC0_Handler+0x136>

				  }


				  //return to first step on next page
				  curr_step = 0;
  40446a:	2200      	movs	r2, #0
  40446c:	4b1d      	ldr	r3, [pc, #116]	; (4044e4 <TC0_Handler+0x1cc>)
  40446e:	701a      	strb	r2, [r3, #0]
  404470:	e002      	b.n	404478 <TC0_Handler+0x160>
			  }
			  else{
				  curr_step++;
  404472:	3301      	adds	r3, #1
  404474:	4a1b      	ldr	r2, [pc, #108]	; (4044e4 <TC0_Handler+0x1cc>)
  404476:	7013      	strb	r3, [r2, #0]
			  }
		  }

		  overflow_count++;
  404478:	4b16      	ldr	r3, [pc, #88]	; (4044d4 <TC0_Handler+0x1bc>)
  40447a:	881b      	ldrh	r3, [r3, #0]
  40447c:	3301      	adds	r3, #1
  40447e:	b29b      	uxth	r3, r3
		  if (overflow_count >= 40001){
  404480:	f649 4240 	movw	r2, #40000	; 0x9c40
  404484:	4293      	cmp	r3, r2
  404486:	d802      	bhi.n	40448e <TC0_Handler+0x176>
			  else{
				  curr_step++;
			  }
		  }

		  overflow_count++;
  404488:	4a12      	ldr	r2, [pc, #72]	; (4044d4 <TC0_Handler+0x1bc>)
  40448a:	8013      	strh	r3, [r2, #0]
  40448c:	e002      	b.n	404494 <TC0_Handler+0x17c>
		  if (overflow_count >= 40001){
			  overflow_count = 0;
  40448e:	2200      	movs	r2, #0
  404490:	4b10      	ldr	r3, [pc, #64]	; (4044d4 <TC0_Handler+0x1bc>)
  404492:	801a      	strh	r2, [r3, #0]


	  }

// Timeout timer for note displays
	if((REG_TC0_SR1 & TC_SR_CPCS) >= 1) {
  404494:	4b21      	ldr	r3, [pc, #132]	; (40451c <TC0_Handler+0x204>)
  404496:	681b      	ldr	r3, [r3, #0]
  404498:	f013 0f10 	tst.w	r3, #16
  40449c:	d003      	beq.n	4044a6 <TC0_Handler+0x18e>
		note_overflow_count++;
  40449e:	4a20      	ldr	r2, [pc, #128]	; (404520 <TC0_Handler+0x208>)
  4044a0:	8813      	ldrh	r3, [r2, #0]
  4044a2:	3301      	adds	r3, #1
  4044a4:	8013      	strh	r3, [r2, #0]
	}

	if (note_overflow_count >= 10000){
  4044a6:	4b1e      	ldr	r3, [pc, #120]	; (404520 <TC0_Handler+0x208>)
  4044a8:	881a      	ldrh	r2, [r3, #0]
  4044aa:	f242 730f 	movw	r3, #9999	; 0x270f
  4044ae:	429a      	cmp	r2, r3
  4044b0:	d90d      	bls.n	4044ce <TC0_Handler+0x1b6>
		pattern_clr = 0;
  4044b2:	2300      	movs	r3, #0
  4044b4:	4a1b      	ldr	r2, [pc, #108]	; (404524 <TC0_Handler+0x20c>)
  4044b6:	7013      	strb	r3, [r2, #0]
		note_overflow_count = 0;
  4044b8:	4a19      	ldr	r2, [pc, #100]	; (404520 <TC0_Handler+0x208>)
  4044ba:	8013      	strh	r3, [r2, #0]
		REG_TC0_CCR1 |= TC_CCR_CLKDIS;
  4044bc:	4a1a      	ldr	r2, [pc, #104]	; (404528 <TC0_Handler+0x210>)
  4044be:	6813      	ldr	r3, [r2, #0]
  4044c0:	f043 0302 	orr.w	r3, r3, #2
  4044c4:	6013      	str	r3, [r2, #0]
		pattern_display(curr_pattern);
  4044c6:	4b11      	ldr	r3, [pc, #68]	; (40450c <TC0_Handler+0x1f4>)
  4044c8:	7818      	ldrb	r0, [r3, #0]
  4044ca:	4b18      	ldr	r3, [pc, #96]	; (40452c <TC0_Handler+0x214>)
  4044cc:	4798      	blx	r3
  4044ce:	bd70      	pop	{r4, r5, r6, pc}
  4044d0:	40010020 	.word	0x40010020
  4044d4:	200006e4 	.word	0x200006e4
  4044d8:	200006fc 	.word	0x200006fc
  4044dc:	00400461 	.word	0x00400461
  4044e0:	00403701 	.word	0x00403701
  4044e4:	200006ec 	.word	0x200006ec
  4044e8:	004038b1 	.word	0x004038b1
  4044ec:	200006f0 	.word	0x200006f0
  4044f0:	0040382d 	.word	0x0040382d
  4044f4:	00400341 	.word	0x00400341
  4044f8:	00400429 	.word	0x00400429
  4044fc:	40038000 	.word	0x40038000
  404500:	00403695 	.word	0x00403695
  404504:	00402515 	.word	0x00402515
  404508:	200006fe 	.word	0x200006fe
  40450c:	200006d0 	.word	0x200006d0
  404510:	20008710 	.word	0x20008710
  404514:	200006e0 	.word	0x200006e0
  404518:	200006e8 	.word	0x200006e8
  40451c:	40010060 	.word	0x40010060
  404520:	200006d2 	.word	0x200006d2
  404524:	20000701 	.word	0x20000701
  404528:	40010040 	.word	0x40010040
  40452c:	00401519 	.word	0x00401519

00404530 <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
  404530:	4770      	bx	lr
  404532:	bf00      	nop

00404534 <sysclk_init>:
  404534:	b510      	push	{r4, lr}
  404536:	480e      	ldr	r0, [pc, #56]	; (404570 <sysclk_init+0x3c>)
  404538:	4b0e      	ldr	r3, [pc, #56]	; (404574 <sysclk_init+0x40>)
  40453a:	4798      	blx	r3
  40453c:	2010      	movs	r0, #16
  40453e:	4b0e      	ldr	r3, [pc, #56]	; (404578 <sysclk_init+0x44>)
  404540:	4798      	blx	r3
  404542:	4c0e      	ldr	r4, [pc, #56]	; (40457c <sysclk_init+0x48>)
  404544:	47a0      	blx	r4
  404546:	2800      	cmp	r0, #0
  404548:	d0fc      	beq.n	404544 <sysclk_init+0x10>
  40454a:	4b0d      	ldr	r3, [pc, #52]	; (404580 <sysclk_init+0x4c>)
  40454c:	4798      	blx	r3
  40454e:	4a0d      	ldr	r2, [pc, #52]	; (404584 <sysclk_init+0x50>)
  404550:	4b0d      	ldr	r3, [pc, #52]	; (404588 <sysclk_init+0x54>)
  404552:	629a      	str	r2, [r3, #40]	; 0x28
  404554:	4c0d      	ldr	r4, [pc, #52]	; (40458c <sysclk_init+0x58>)
  404556:	47a0      	blx	r4
  404558:	2800      	cmp	r0, #0
  40455a:	d0fc      	beq.n	404556 <sysclk_init+0x22>
  40455c:	2010      	movs	r0, #16
  40455e:	4b0c      	ldr	r3, [pc, #48]	; (404590 <sysclk_init+0x5c>)
  404560:	4798      	blx	r3
  404562:	4b0c      	ldr	r3, [pc, #48]	; (404594 <sysclk_init+0x60>)
  404564:	4798      	blx	r3
  404566:	4802      	ldr	r0, [pc, #8]	; (404570 <sysclk_init+0x3c>)
  404568:	4b02      	ldr	r3, [pc, #8]	; (404574 <sysclk_init+0x40>)
  40456a:	4798      	blx	r3
  40456c:	bd10      	pop	{r4, pc}
  40456e:	bf00      	nop
  404570:	05f5e100 	.word	0x05f5e100
  404574:	00404829 	.word	0x00404829
  404578:	00404601 	.word	0x00404601
  40457c:	0040464d 	.word	0x0040464d
  404580:	0040465d 	.word	0x0040465d
  404584:	20183f01 	.word	0x20183f01
  404588:	400e0400 	.word	0x400e0400
  40458c:	0040466d 	.word	0x0040466d
  404590:	00404599 	.word	0x00404599
  404594:	00404719 	.word	0x00404719

00404598 <pmc_switch_mck_to_pllack>:
  404598:	4a18      	ldr	r2, [pc, #96]	; (4045fc <pmc_switch_mck_to_pllack+0x64>)
  40459a:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40459c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  4045a0:	4318      	orrs	r0, r3
  4045a2:	6310      	str	r0, [r2, #48]	; 0x30
  4045a4:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4045a6:	f013 0f08 	tst.w	r3, #8
  4045aa:	d003      	beq.n	4045b4 <pmc_switch_mck_to_pllack+0x1c>
  4045ac:	e009      	b.n	4045c2 <pmc_switch_mck_to_pllack+0x2a>
  4045ae:	3b01      	subs	r3, #1
  4045b0:	d103      	bne.n	4045ba <pmc_switch_mck_to_pllack+0x22>
  4045b2:	e01e      	b.n	4045f2 <pmc_switch_mck_to_pllack+0x5a>
  4045b4:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4045b8:	4910      	ldr	r1, [pc, #64]	; (4045fc <pmc_switch_mck_to_pllack+0x64>)
  4045ba:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4045bc:	f012 0f08 	tst.w	r2, #8
  4045c0:	d0f5      	beq.n	4045ae <pmc_switch_mck_to_pllack+0x16>
  4045c2:	4a0e      	ldr	r2, [pc, #56]	; (4045fc <pmc_switch_mck_to_pllack+0x64>)
  4045c4:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4045c6:	f023 0303 	bic.w	r3, r3, #3
  4045ca:	f043 0302 	orr.w	r3, r3, #2
  4045ce:	6313      	str	r3, [r2, #48]	; 0x30
  4045d0:	6e90      	ldr	r0, [r2, #104]	; 0x68
  4045d2:	f010 0008 	ands.w	r0, r0, #8
  4045d6:	d004      	beq.n	4045e2 <pmc_switch_mck_to_pllack+0x4a>
  4045d8:	2000      	movs	r0, #0
  4045da:	4770      	bx	lr
  4045dc:	3b01      	subs	r3, #1
  4045de:	d103      	bne.n	4045e8 <pmc_switch_mck_to_pllack+0x50>
  4045e0:	e009      	b.n	4045f6 <pmc_switch_mck_to_pllack+0x5e>
  4045e2:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4045e6:	4905      	ldr	r1, [pc, #20]	; (4045fc <pmc_switch_mck_to_pllack+0x64>)
  4045e8:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4045ea:	f012 0f08 	tst.w	r2, #8
  4045ee:	d0f5      	beq.n	4045dc <pmc_switch_mck_to_pllack+0x44>
  4045f0:	4770      	bx	lr
  4045f2:	2001      	movs	r0, #1
  4045f4:	4770      	bx	lr
  4045f6:	2001      	movs	r0, #1
  4045f8:	4770      	bx	lr
  4045fa:	bf00      	nop
  4045fc:	400e0400 	.word	0x400e0400

00404600 <pmc_switch_mainck_to_fastrc>:
  404600:	4b11      	ldr	r3, [pc, #68]	; (404648 <pmc_switch_mainck_to_fastrc+0x48>)
  404602:	6a1a      	ldr	r2, [r3, #32]
  404604:	f442 125c 	orr.w	r2, r2, #3604480	; 0x370000
  404608:	f042 0208 	orr.w	r2, r2, #8
  40460c:	621a      	str	r2, [r3, #32]
  40460e:	461a      	mov	r2, r3
  404610:	6e93      	ldr	r3, [r2, #104]	; 0x68
  404612:	f413 3f00 	tst.w	r3, #131072	; 0x20000
  404616:	d0fb      	beq.n	404610 <pmc_switch_mainck_to_fastrc+0x10>
  404618:	4a0b      	ldr	r2, [pc, #44]	; (404648 <pmc_switch_mainck_to_fastrc+0x48>)
  40461a:	6a13      	ldr	r3, [r2, #32]
  40461c:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  404620:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  404624:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  404628:	4303      	orrs	r3, r0
  40462a:	6213      	str	r3, [r2, #32]
  40462c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40462e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
  404632:	d0fb      	beq.n	40462c <pmc_switch_mainck_to_fastrc+0x2c>
  404634:	4a04      	ldr	r2, [pc, #16]	; (404648 <pmc_switch_mainck_to_fastrc+0x48>)
  404636:	6a13      	ldr	r3, [r2, #32]
  404638:	f023 739b 	bic.w	r3, r3, #20316160	; 0x1360000
  40463c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  404640:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  404644:	6213      	str	r3, [r2, #32]
  404646:	4770      	bx	lr
  404648:	400e0400 	.word	0x400e0400

0040464c <pmc_osc_is_ready_mainck>:
  40464c:	4b02      	ldr	r3, [pc, #8]	; (404658 <pmc_osc_is_ready_mainck+0xc>)
  40464e:	6e98      	ldr	r0, [r3, #104]	; 0x68
  404650:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  404654:	4770      	bx	lr
  404656:	bf00      	nop
  404658:	400e0400 	.word	0x400e0400

0040465c <pmc_disable_pllack>:
  40465c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  404660:	4b01      	ldr	r3, [pc, #4]	; (404668 <pmc_disable_pllack+0xc>)
  404662:	629a      	str	r2, [r3, #40]	; 0x28
  404664:	4770      	bx	lr
  404666:	bf00      	nop
  404668:	400e0400 	.word	0x400e0400

0040466c <pmc_is_locked_pllack>:
  40466c:	4b02      	ldr	r3, [pc, #8]	; (404678 <pmc_is_locked_pllack+0xc>)
  40466e:	6e98      	ldr	r0, [r3, #104]	; 0x68
  404670:	f000 0002 	and.w	r0, r0, #2
  404674:	4770      	bx	lr
  404676:	bf00      	nop
  404678:	400e0400 	.word	0x400e0400

0040467c <Dummy_Handler>:
  40467c:	e7fe      	b.n	40467c <Dummy_Handler>
  40467e:	bf00      	nop

00404680 <Reset_Handler>:
  404680:	b508      	push	{r3, lr}
  404682:	4b19      	ldr	r3, [pc, #100]	; (4046e8 <Reset_Handler+0x68>)
  404684:	4a19      	ldr	r2, [pc, #100]	; (4046ec <Reset_Handler+0x6c>)
  404686:	429a      	cmp	r2, r3
  404688:	d003      	beq.n	404692 <Reset_Handler+0x12>
  40468a:	4b19      	ldr	r3, [pc, #100]	; (4046f0 <Reset_Handler+0x70>)
  40468c:	4a16      	ldr	r2, [pc, #88]	; (4046e8 <Reset_Handler+0x68>)
  40468e:	429a      	cmp	r2, r3
  404690:	d304      	bcc.n	40469c <Reset_Handler+0x1c>
  404692:	4b18      	ldr	r3, [pc, #96]	; (4046f4 <Reset_Handler+0x74>)
  404694:	4a18      	ldr	r2, [pc, #96]	; (4046f8 <Reset_Handler+0x78>)
  404696:	429a      	cmp	r2, r3
  404698:	d30f      	bcc.n	4046ba <Reset_Handler+0x3a>
  40469a:	e01a      	b.n	4046d2 <Reset_Handler+0x52>
  40469c:	4912      	ldr	r1, [pc, #72]	; (4046e8 <Reset_Handler+0x68>)
  40469e:	4b17      	ldr	r3, [pc, #92]	; (4046fc <Reset_Handler+0x7c>)
  4046a0:	1a5b      	subs	r3, r3, r1
  4046a2:	f023 0303 	bic.w	r3, r3, #3
  4046a6:	3304      	adds	r3, #4
  4046a8:	4a10      	ldr	r2, [pc, #64]	; (4046ec <Reset_Handler+0x6c>)
  4046aa:	4413      	add	r3, r2
  4046ac:	f852 0b04 	ldr.w	r0, [r2], #4
  4046b0:	f841 0b04 	str.w	r0, [r1], #4
  4046b4:	429a      	cmp	r2, r3
  4046b6:	d1f9      	bne.n	4046ac <Reset_Handler+0x2c>
  4046b8:	e7eb      	b.n	404692 <Reset_Handler+0x12>
  4046ba:	4b11      	ldr	r3, [pc, #68]	; (404700 <Reset_Handler+0x80>)
  4046bc:	4a11      	ldr	r2, [pc, #68]	; (404704 <Reset_Handler+0x84>)
  4046be:	1ad2      	subs	r2, r2, r3
  4046c0:	f022 0203 	bic.w	r2, r2, #3
  4046c4:	441a      	add	r2, r3
  4046c6:	3b04      	subs	r3, #4
  4046c8:	2100      	movs	r1, #0
  4046ca:	f843 1b04 	str.w	r1, [r3], #4
  4046ce:	4293      	cmp	r3, r2
  4046d0:	d1fb      	bne.n	4046ca <Reset_Handler+0x4a>
  4046d2:	4a0d      	ldr	r2, [pc, #52]	; (404708 <Reset_Handler+0x88>)
  4046d4:	4b0d      	ldr	r3, [pc, #52]	; (40470c <Reset_Handler+0x8c>)
  4046d6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  4046da:	6093      	str	r3, [r2, #8]
  4046dc:	4b0c      	ldr	r3, [pc, #48]	; (404710 <Reset_Handler+0x90>)
  4046de:	4798      	blx	r3
  4046e0:	4b0c      	ldr	r3, [pc, #48]	; (404714 <Reset_Handler+0x94>)
  4046e2:	4798      	blx	r3
  4046e4:	e7fe      	b.n	4046e4 <Reset_Handler+0x64>
  4046e6:	bf00      	nop
  4046e8:	20000000 	.word	0x20000000
  4046ec:	00406638 	.word	0x00406638
  4046f0:	200005f8 	.word	0x200005f8
  4046f4:	20008724 	.word	0x20008724
  4046f8:	200005f8 	.word	0x200005f8
  4046fc:	200005f7 	.word	0x200005f7
  404700:	200005fc 	.word	0x200005fc
  404704:	20008727 	.word	0x20008727
  404708:	e000ed00 	.word	0xe000ed00
  40470c:	00400000 	.word	0x00400000
  404710:	0040518d 	.word	0x0040518d
  404714:	00404ae5 	.word	0x00404ae5

00404718 <SystemCoreClockUpdate>:
  404718:	4b3c      	ldr	r3, [pc, #240]	; (40480c <SystemCoreClockUpdate+0xf4>)
  40471a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40471c:	f003 0303 	and.w	r3, r3, #3
  404720:	2b01      	cmp	r3, #1
  404722:	d00f      	beq.n	404744 <SystemCoreClockUpdate+0x2c>
  404724:	b113      	cbz	r3, 40472c <SystemCoreClockUpdate+0x14>
  404726:	2b02      	cmp	r3, #2
  404728:	d029      	beq.n	40477e <SystemCoreClockUpdate+0x66>
  40472a:	e057      	b.n	4047dc <SystemCoreClockUpdate+0xc4>
  40472c:	4b38      	ldr	r3, [pc, #224]	; (404810 <SystemCoreClockUpdate+0xf8>)
  40472e:	695b      	ldr	r3, [r3, #20]
  404730:	f013 0f80 	tst.w	r3, #128	; 0x80
  404734:	bf14      	ite	ne
  404736:	f44f 4200 	movne.w	r2, #32768	; 0x8000
  40473a:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  40473e:	4b35      	ldr	r3, [pc, #212]	; (404814 <SystemCoreClockUpdate+0xfc>)
  404740:	601a      	str	r2, [r3, #0]
  404742:	e04b      	b.n	4047dc <SystemCoreClockUpdate+0xc4>
  404744:	4b31      	ldr	r3, [pc, #196]	; (40480c <SystemCoreClockUpdate+0xf4>)
  404746:	6a1b      	ldr	r3, [r3, #32]
  404748:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  40474c:	d003      	beq.n	404756 <SystemCoreClockUpdate+0x3e>
  40474e:	4a32      	ldr	r2, [pc, #200]	; (404818 <SystemCoreClockUpdate+0x100>)
  404750:	4b30      	ldr	r3, [pc, #192]	; (404814 <SystemCoreClockUpdate+0xfc>)
  404752:	601a      	str	r2, [r3, #0]
  404754:	e042      	b.n	4047dc <SystemCoreClockUpdate+0xc4>
  404756:	4a31      	ldr	r2, [pc, #196]	; (40481c <SystemCoreClockUpdate+0x104>)
  404758:	4b2e      	ldr	r3, [pc, #184]	; (404814 <SystemCoreClockUpdate+0xfc>)
  40475a:	601a      	str	r2, [r3, #0]
  40475c:	4b2b      	ldr	r3, [pc, #172]	; (40480c <SystemCoreClockUpdate+0xf4>)
  40475e:	6a1b      	ldr	r3, [r3, #32]
  404760:	f003 0370 	and.w	r3, r3, #112	; 0x70
  404764:	2b10      	cmp	r3, #16
  404766:	d002      	beq.n	40476e <SystemCoreClockUpdate+0x56>
  404768:	2b20      	cmp	r3, #32
  40476a:	d004      	beq.n	404776 <SystemCoreClockUpdate+0x5e>
  40476c:	e036      	b.n	4047dc <SystemCoreClockUpdate+0xc4>
  40476e:	4a2c      	ldr	r2, [pc, #176]	; (404820 <SystemCoreClockUpdate+0x108>)
  404770:	4b28      	ldr	r3, [pc, #160]	; (404814 <SystemCoreClockUpdate+0xfc>)
  404772:	601a      	str	r2, [r3, #0]
  404774:	e032      	b.n	4047dc <SystemCoreClockUpdate+0xc4>
  404776:	4a28      	ldr	r2, [pc, #160]	; (404818 <SystemCoreClockUpdate+0x100>)
  404778:	4b26      	ldr	r3, [pc, #152]	; (404814 <SystemCoreClockUpdate+0xfc>)
  40477a:	601a      	str	r2, [r3, #0]
  40477c:	e02e      	b.n	4047dc <SystemCoreClockUpdate+0xc4>
  40477e:	4b23      	ldr	r3, [pc, #140]	; (40480c <SystemCoreClockUpdate+0xf4>)
  404780:	6a1b      	ldr	r3, [r3, #32]
  404782:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  404786:	d003      	beq.n	404790 <SystemCoreClockUpdate+0x78>
  404788:	4a23      	ldr	r2, [pc, #140]	; (404818 <SystemCoreClockUpdate+0x100>)
  40478a:	4b22      	ldr	r3, [pc, #136]	; (404814 <SystemCoreClockUpdate+0xfc>)
  40478c:	601a      	str	r2, [r3, #0]
  40478e:	e012      	b.n	4047b6 <SystemCoreClockUpdate+0x9e>
  404790:	4a22      	ldr	r2, [pc, #136]	; (40481c <SystemCoreClockUpdate+0x104>)
  404792:	4b20      	ldr	r3, [pc, #128]	; (404814 <SystemCoreClockUpdate+0xfc>)
  404794:	601a      	str	r2, [r3, #0]
  404796:	4b1d      	ldr	r3, [pc, #116]	; (40480c <SystemCoreClockUpdate+0xf4>)
  404798:	6a1b      	ldr	r3, [r3, #32]
  40479a:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40479e:	2b10      	cmp	r3, #16
  4047a0:	d002      	beq.n	4047a8 <SystemCoreClockUpdate+0x90>
  4047a2:	2b20      	cmp	r3, #32
  4047a4:	d004      	beq.n	4047b0 <SystemCoreClockUpdate+0x98>
  4047a6:	e006      	b.n	4047b6 <SystemCoreClockUpdate+0x9e>
  4047a8:	4a1d      	ldr	r2, [pc, #116]	; (404820 <SystemCoreClockUpdate+0x108>)
  4047aa:	4b1a      	ldr	r3, [pc, #104]	; (404814 <SystemCoreClockUpdate+0xfc>)
  4047ac:	601a      	str	r2, [r3, #0]
  4047ae:	e002      	b.n	4047b6 <SystemCoreClockUpdate+0x9e>
  4047b0:	4a19      	ldr	r2, [pc, #100]	; (404818 <SystemCoreClockUpdate+0x100>)
  4047b2:	4b18      	ldr	r3, [pc, #96]	; (404814 <SystemCoreClockUpdate+0xfc>)
  4047b4:	601a      	str	r2, [r3, #0]
  4047b6:	4b15      	ldr	r3, [pc, #84]	; (40480c <SystemCoreClockUpdate+0xf4>)
  4047b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4047ba:	f003 0303 	and.w	r3, r3, #3
  4047be:	2b02      	cmp	r3, #2
  4047c0:	d10c      	bne.n	4047dc <SystemCoreClockUpdate+0xc4>
  4047c2:	4a12      	ldr	r2, [pc, #72]	; (40480c <SystemCoreClockUpdate+0xf4>)
  4047c4:	6a93      	ldr	r3, [r2, #40]	; 0x28
  4047c6:	6a92      	ldr	r2, [r2, #40]	; 0x28
  4047c8:	4812      	ldr	r0, [pc, #72]	; (404814 <SystemCoreClockUpdate+0xfc>)
  4047ca:	f3c3 410a 	ubfx	r1, r3, #16, #11
  4047ce:	6803      	ldr	r3, [r0, #0]
  4047d0:	fb01 3303 	mla	r3, r1, r3, r3
  4047d4:	b2d2      	uxtb	r2, r2
  4047d6:	fbb3 f3f2 	udiv	r3, r3, r2
  4047da:	6003      	str	r3, [r0, #0]
  4047dc:	4b0b      	ldr	r3, [pc, #44]	; (40480c <SystemCoreClockUpdate+0xf4>)
  4047de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4047e0:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4047e4:	2b70      	cmp	r3, #112	; 0x70
  4047e6:	d107      	bne.n	4047f8 <SystemCoreClockUpdate+0xe0>
  4047e8:	4a0a      	ldr	r2, [pc, #40]	; (404814 <SystemCoreClockUpdate+0xfc>)
  4047ea:	6813      	ldr	r3, [r2, #0]
  4047ec:	490d      	ldr	r1, [pc, #52]	; (404824 <SystemCoreClockUpdate+0x10c>)
  4047ee:	fba1 1303 	umull	r1, r3, r1, r3
  4047f2:	085b      	lsrs	r3, r3, #1
  4047f4:	6013      	str	r3, [r2, #0]
  4047f6:	4770      	bx	lr
  4047f8:	4b04      	ldr	r3, [pc, #16]	; (40480c <SystemCoreClockUpdate+0xf4>)
  4047fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4047fc:	4905      	ldr	r1, [pc, #20]	; (404814 <SystemCoreClockUpdate+0xfc>)
  4047fe:	f3c3 1202 	ubfx	r2, r3, #4, #3
  404802:	680b      	ldr	r3, [r1, #0]
  404804:	40d3      	lsrs	r3, r2
  404806:	600b      	str	r3, [r1, #0]
  404808:	4770      	bx	lr
  40480a:	bf00      	nop
  40480c:	400e0400 	.word	0x400e0400
  404810:	400e1410 	.word	0x400e1410
  404814:	200001c8 	.word	0x200001c8
  404818:	00b71b00 	.word	0x00b71b00
  40481c:	003d0900 	.word	0x003d0900
  404820:	007a1200 	.word	0x007a1200
  404824:	aaaaaaab 	.word	0xaaaaaaab

00404828 <system_init_flash>:
  404828:	4b0f      	ldr	r3, [pc, #60]	; (404868 <system_init_flash+0x40>)
  40482a:	4298      	cmp	r0, r3
  40482c:	d804      	bhi.n	404838 <system_init_flash+0x10>
  40482e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  404832:	4b0e      	ldr	r3, [pc, #56]	; (40486c <system_init_flash+0x44>)
  404834:	601a      	str	r2, [r3, #0]
  404836:	4770      	bx	lr
  404838:	4b0d      	ldr	r3, [pc, #52]	; (404870 <system_init_flash+0x48>)
  40483a:	4298      	cmp	r0, r3
  40483c:	d803      	bhi.n	404846 <system_init_flash+0x1e>
  40483e:	4a0d      	ldr	r2, [pc, #52]	; (404874 <system_init_flash+0x4c>)
  404840:	4b0a      	ldr	r3, [pc, #40]	; (40486c <system_init_flash+0x44>)
  404842:	601a      	str	r2, [r3, #0]
  404844:	4770      	bx	lr
  404846:	4b0c      	ldr	r3, [pc, #48]	; (404878 <system_init_flash+0x50>)
  404848:	4298      	cmp	r0, r3
  40484a:	d803      	bhi.n	404854 <system_init_flash+0x2c>
  40484c:	4a0b      	ldr	r2, [pc, #44]	; (40487c <system_init_flash+0x54>)
  40484e:	4b07      	ldr	r3, [pc, #28]	; (40486c <system_init_flash+0x44>)
  404850:	601a      	str	r2, [r3, #0]
  404852:	4770      	bx	lr
  404854:	4b0a      	ldr	r3, [pc, #40]	; (404880 <system_init_flash+0x58>)
  404856:	4298      	cmp	r0, r3
  404858:	bf94      	ite	ls
  40485a:	4a0a      	ldrls	r2, [pc, #40]	; (404884 <system_init_flash+0x5c>)
  40485c:	f04f 2204 	movhi.w	r2, #67109888	; 0x4000400
  404860:	4b02      	ldr	r3, [pc, #8]	; (40486c <system_init_flash+0x44>)
  404862:	601a      	str	r2, [r3, #0]
  404864:	4770      	bx	lr
  404866:	bf00      	nop
  404868:	01312cff 	.word	0x01312cff
  40486c:	400e0a00 	.word	0x400e0a00
  404870:	026259ff 	.word	0x026259ff
  404874:	04000100 	.word	0x04000100
  404878:	039386ff 	.word	0x039386ff
  40487c:	04000200 	.word	0x04000200
  404880:	04c4b3ff 	.word	0x04c4b3ff
  404884:	04000300 	.word	0x04000300

00404888 <init_IO_int>:
 #define MAX7314_inputPortLow 0x00
 #define MAX7314_inputPortHigh 0x01

 #define MAX7314_slaveAddress (uint8_t) 0b0100000 //7bit address when AD0 = GND

 void init_IO_int(){
  404888:	b470      	push	{r4, r5, r6}

	//enable clock for PIOB
	REG_PMC_PCER0 |= PMC_PCER0_PID12;
  40488a:	4a2b      	ldr	r2, [pc, #172]	; (404938 <init_IO_int+0xb0>)
  40488c:	6813      	ldr	r3, [r2, #0]
  40488e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  404892:	6013      	str	r3, [r2, #0]

	//Set up PB10 as Button IO Expander Input
	REG_PIOB_PER |= PIO_PER_P10; //enable PIO controller
  404894:	4d29      	ldr	r5, [pc, #164]	; (40493c <init_IO_int+0xb4>)
  404896:	682b      	ldr	r3, [r5, #0]
  404898:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
  40489c:	602b      	str	r3, [r5, #0]
	REG_PIOB_ODR |= PIO_ODR_P10; //disable output
  40489e:	4c28      	ldr	r4, [pc, #160]	; (404940 <init_IO_int+0xb8>)
  4048a0:	6823      	ldr	r3, [r4, #0]
  4048a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
  4048a6:	6023      	str	r3, [r4, #0]
	REG_PIOB_PPDDR |= PIO_PPDDR_P10; //disable pull-down resistor
  4048a8:	4826      	ldr	r0, [pc, #152]	; (404944 <init_IO_int+0xbc>)
  4048aa:	6803      	ldr	r3, [r0, #0]
  4048ac:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
  4048b0:	6003      	str	r3, [r0, #0]
	REG_PIOB_PUER |= PIO_PUER_P10;	//enable pull-up resistor
  4048b2:	4925      	ldr	r1, [pc, #148]	; (404948 <init_IO_int+0xc0>)
  4048b4:	680b      	ldr	r3, [r1, #0]
  4048b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
  4048ba:	600b      	str	r3, [r1, #0]
	REG_PIOB_IFSCER |= PIO_IFSCER_P10; //turn on slow clock debounce
  4048bc:	f602 4274 	addw	r2, r2, #3188	; 0xc74
  4048c0:	6813      	ldr	r3, [r2, #0]
  4048c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
  4048c6:	6013      	str	r3, [r2, #0]
	REG_PIOB_IFER |= PIO_IFER_P10;	//start debounce filter
  4048c8:	4b20      	ldr	r3, [pc, #128]	; (40494c <init_IO_int+0xc4>)
  4048ca:	681e      	ldr	r6, [r3, #0]
  4048cc:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
  4048d0:	601e      	str	r6, [r3, #0]

	//Set up PB11 as Encoder IO Expander Input
	REG_PIOB_PER |= PIO_PER_P11; //enable PIO controller
  4048d2:	682e      	ldr	r6, [r5, #0]
  4048d4:	f446 6600 	orr.w	r6, r6, #2048	; 0x800
  4048d8:	602e      	str	r6, [r5, #0]
	REG_PIOB_ODR |= PIO_ODR_P11; //disable output
  4048da:	6825      	ldr	r5, [r4, #0]
  4048dc:	f445 6500 	orr.w	r5, r5, #2048	; 0x800
  4048e0:	6025      	str	r5, [r4, #0]
	REG_PIOB_PPDDR |= PIO_PPDDR_P11; //disable pull-down resistor
  4048e2:	6804      	ldr	r4, [r0, #0]
  4048e4:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
  4048e8:	6004      	str	r4, [r0, #0]
	REG_PIOB_PUER |= PIO_PUER_P11;	//enable pull-up resistor
  4048ea:	6808      	ldr	r0, [r1, #0]
  4048ec:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
  4048f0:	6008      	str	r0, [r1, #0]
	REG_PIOB_IFSCER |= PIO_IFSCER_P11; //turn on slow clock debounce
  4048f2:	6811      	ldr	r1, [r2, #0]
  4048f4:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
  4048f8:	6011      	str	r1, [r2, #0]
	REG_PIOB_IFER |= PIO_IFER_P11;	//start debounce filter
  4048fa:	681a      	ldr	r2, [r3, #0]
  4048fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
  404900:	601a      	str	r2, [r3, #0]

	uint32_t flag_clear = REG_PIOB_ISR;	//clear left over interrupt flags
  404902:	332c      	adds	r3, #44	; 0x2c
  404904:	681b      	ldr	r3, [r3, #0]

	//Enable interrupts for PB10
	REG_PIOB_IER |= PIO_IER_P10;			//enable falling edge change interrupt
  404906:	4a12      	ldr	r2, [pc, #72]	; (404950 <init_IO_int+0xc8>)
  404908:	6813      	ldr	r3, [r2, #0]
  40490a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
  40490e:	6013      	str	r3, [r2, #0]
	REG_PIOB_FELLSR |= PIO_FELLSR_P10;
  404910:	4b10      	ldr	r3, [pc, #64]	; (404954 <init_IO_int+0xcc>)
  404912:	6819      	ldr	r1, [r3, #0]
  404914:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
  404918:	6019      	str	r1, [r3, #0]

	//Enable interrupts for PB10
	REG_PIOB_IER |= PIO_IER_P11;			//enable falling edge change interrupt
  40491a:	6811      	ldr	r1, [r2, #0]
  40491c:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
  404920:	6011      	str	r1, [r2, #0]
	REG_PIOB_FELLSR |= PIO_FELLSR_P11;
  404922:	681a      	ldr	r2, [r3, #0]
  404924:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
  404928:	601a      	str	r2, [r3, #0]
  40492a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  40492e:	4b0a      	ldr	r3, [pc, #40]	; (404958 <init_IO_int+0xd0>)
  404930:	601a      	str	r2, [r3, #0]

	NVIC_EnableIRQ(PIOB_IRQn);

 }
  404932:	bc70      	pop	{r4, r5, r6}
  404934:	4770      	bx	lr
  404936:	bf00      	nop
  404938:	400e0410 	.word	0x400e0410
  40493c:	400e1000 	.word	0x400e1000
  404940:	400e1014 	.word	0x400e1014
  404944:	400e1090 	.word	0x400e1090
  404948:	400e1064 	.word	0x400e1064
  40494c:	400e1020 	.word	0x400e1020
  404950:	400e1040 	.word	0x400e1040
  404954:	400e10d0 	.word	0x400e10d0
  404958:	e000e100 	.word	0xe000e100

0040495c <i2c_init>:

 void i2c_init(){

	REG_TWI0_CR = TWI_CR_SWRST;
  40495c:	4b12      	ldr	r3, [pc, #72]	; (4049a8 <i2c_init+0x4c>)
  40495e:	2280      	movs	r2, #128	; 0x80
  404960:	601a      	str	r2, [r3, #0]

	//enable peripheral clock for i2c using TWI0
	REG_PMC_PCER0 |= PMC_PCER0_PID19;
  404962:	4912      	ldr	r1, [pc, #72]	; (4049ac <i2c_init+0x50>)
  404964:	680a      	ldr	r2, [r1, #0]
  404966:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
  40496a:	600a      	str	r2, [r1, #0]

	//disable GPIO control of i2c pins
	REG_PIOA_PDR |= PIO_PDR_P3;
  40496c:	4a10      	ldr	r2, [pc, #64]	; (4049b0 <i2c_init+0x54>)
  40496e:	6811      	ldr	r1, [r2, #0]
  404970:	f041 0108 	orr.w	r1, r1, #8
  404974:	6011      	str	r1, [r2, #0]
	REG_PIOA_PDR |= PIO_PDR_P4;
  404976:	6811      	ldr	r1, [r2, #0]
  404978:	f041 0110 	orr.w	r1, r1, #16
  40497c:	6011      	str	r1, [r2, #0]

	// tlow = ((CLDIV * 2^CKDIV) + 4) * Tper
	// thigh = ((CHDIV * 2^CKDIV) + 4) * Tper
	// thigh = tlow => 400kHz (supposedly...)
	//set TWI0 clock to 400kHz (supported by IO expander)
	REG_TWI0_CWGR |= TWI_CWGR_CLDIV(121);
  40497e:	f5a2 2248 	sub.w	r2, r2, #819200	; 0xc8000
  404982:	f6a2 52f4 	subw	r2, r2, #3572	; 0xdf4
  404986:	6811      	ldr	r1, [r2, #0]
  404988:	f041 0179 	orr.w	r1, r1, #121	; 0x79
  40498c:	6011      	str	r1, [r2, #0]
	REG_TWI0_CWGR |= TWI_CWGR_CHDIV(121);
  40498e:	6811      	ldr	r1, [r2, #0]
  404990:	f441 41f2 	orr.w	r1, r1, #30976	; 0x7900
  404994:	6011      	str	r1, [r2, #0]

	//disable slave mode & enable master mode
	REG_TWI0_CR |= TWI_CR_SVDIS;
  404996:	681a      	ldr	r2, [r3, #0]
  404998:	f042 0220 	orr.w	r2, r2, #32
  40499c:	601a      	str	r2, [r3, #0]
	REG_TWI0_CR |= TWI_CR_MSEN;
  40499e:	681a      	ldr	r2, [r3, #0]
  4049a0:	f042 0204 	orr.w	r2, r2, #4
  4049a4:	601a      	str	r2, [r3, #0]
  4049a6:	4770      	bx	lr
  4049a8:	40018000 	.word	0x40018000
  4049ac:	400e0410 	.word	0x400e0410
  4049b0:	400e0e04 	.word	0x400e0e04

004049b4 <config_MAX7314>:
		}
	 }

 }

 void config_MAX7314(){
  4049b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4049b8:	b089      	sub	sp, #36	; 0x24
	twi_packet_t packet_tx;
	uint8_t config_data[] = {MAX7314_configRegister, 0x08};
  4049ba:	f8df 808c 	ldr.w	r8, [pc, #140]	; 404a48 <config_MAX7314+0x94>
  4049be:	af02      	add	r7, sp, #8
  4049c0:	f8b8 3000 	ldrh.w	r3, [r8]
  4049c4:	f8ad 3008 	strh.w	r3, [sp, #8]

	/* Configure the Chip Config Register */
	packet_tx.chip        = 0b0100000;
  4049c8:	2620      	movs	r6, #32
  4049ca:	f88d 601c 	strb.w	r6, [sp, #28]
	packet_tx.addr_length = 0;
  4049ce:	2500      	movs	r5, #0
  4049d0:	9504      	str	r5, [sp, #16]
	packet_tx.buffer      = (uint8_t *) config_data;
  4049d2:	9705      	str	r7, [sp, #20]
	packet_tx.length      = 2;
  4049d4:	f04f 0b02 	mov.w	fp, #2
  4049d8:	f8cd b018 	str.w	fp, [sp, #24]
	twi_master_write(BOARD_BASE_TWI, &packet_tx);
  4049dc:	a903      	add	r1, sp, #12
  4049de:	4818      	ldr	r0, [pc, #96]	; (404a40 <config_MAX7314+0x8c>)
  4049e0:	4c18      	ldr	r4, [pc, #96]	; (404a44 <config_MAX7314+0x90>)
  4049e2:	47a0      	blx	r4


	uint8_t port_data_write_encoders[] = {MAX7314_portConfigRegisterLow, 0xFF, 0xFF};
  4049e4:	aa01      	add	r2, sp, #4
  4049e6:	4643      	mov	r3, r8
  4049e8:	f833 af04 	ldrh.w	sl, [r3, #4]!
  4049ec:	f893 9002 	ldrb.w	r9, [r3, #2]
  4049f0:	f8ad a004 	strh.w	sl, [sp, #4]
  4049f4:	f88d 9006 	strb.w	r9, [sp, #6]

	/* Configure the Chip Ports as Inputs */
	packet_tx.chip        = 0b0100000;
  4049f8:	f88d 601c 	strb.w	r6, [sp, #28]
	packet_tx.addr_length = 0;
  4049fc:	9504      	str	r5, [sp, #16]
	packet_tx.buffer      = (uint8_t *) port_data_write_encoders;
  4049fe:	9205      	str	r2, [sp, #20]
	packet_tx.length      = 3;
  404a00:	2603      	movs	r6, #3
  404a02:	9606      	str	r6, [sp, #24]
	twi_master_write(BOARD_BASE_TWI, &packet_tx);
  404a04:	a903      	add	r1, sp, #12
  404a06:	480e      	ldr	r0, [pc, #56]	; (404a40 <config_MAX7314+0x8c>)
  404a08:	47a0      	blx	r4

	/* Configure the Chip Config Register */
	packet_tx.chip        = 0b0100100;
  404a0a:	f04f 0824 	mov.w	r8, #36	; 0x24
  404a0e:	f88d 801c 	strb.w	r8, [sp, #28]
	packet_tx.addr_length = 0;
  404a12:	9504      	str	r5, [sp, #16]
	packet_tx.buffer      = (uint8_t *) config_data;
  404a14:	9705      	str	r7, [sp, #20]
	packet_tx.length      = 2;
  404a16:	f8cd b018 	str.w	fp, [sp, #24]
	twi_master_write(BOARD_BASE_TWI, &packet_tx);
  404a1a:	a903      	add	r1, sp, #12
  404a1c:	4808      	ldr	r0, [pc, #32]	; (404a40 <config_MAX7314+0x8c>)
  404a1e:	47a0      	blx	r4


	uint8_t port_data_write_buttons[] = {MAX7314_portConfigRegisterLow, 0xFF, 0xFF};
  404a20:	f8ad a000 	strh.w	sl, [sp]
  404a24:	f88d 9002 	strb.w	r9, [sp, #2]

	/* Configure the Chip Ports as Inputs */
	packet_tx.chip        = 0b0100100;
  404a28:	f88d 801c 	strb.w	r8, [sp, #28]
	packet_tx.addr_length = 0;
  404a2c:	9504      	str	r5, [sp, #16]
	packet_tx.buffer      = (uint8_t *) port_data_write_buttons;
  404a2e:	f8cd d014 	str.w	sp, [sp, #20]
	packet_tx.length      = 3;
  404a32:	9606      	str	r6, [sp, #24]
	twi_master_write(BOARD_BASE_TWI, &packet_tx);
  404a34:	a903      	add	r1, sp, #12
  404a36:	4802      	ldr	r0, [pc, #8]	; (404a40 <config_MAX7314+0x8c>)
  404a38:	47a0      	blx	r4
 }
  404a3a:	b009      	add	sp, #36	; 0x24
  404a3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404a40:	40018000 	.word	0x40018000
  404a44:	004002bd 	.word	0x004002bd
  404a48:	00406604 	.word	0x00406604

00404a4c <read_encoder_MAX7314>:

 void read_encoder_MAX7314(uint8_t *data){
  404a4c:	b5f0      	push	{r4, r5, r6, r7, lr}
  404a4e:	b08d      	sub	sp, #52	; 0x34
  404a50:	4607      	mov	r7, r0
	/* Data Packets for tx/rx */
	twi_packet_t packet_rx, packet_tx;
	uint8_t port_addr[] = {MAX7314_inputPortLow};
  404a52:	2400      	movs	r4, #0
  404a54:	f88d 4004 	strb.w	r4, [sp, #4]

	
	/* Write the command byte address to be the Low byte of the Input Port */
	packet_tx.chip        = 0b0100000;
  404a58:	2620      	movs	r6, #32
  404a5a:	f88d 6018 	strb.w	r6, [sp, #24]
	packet_tx.addr_length = 0;
  404a5e:	9403      	str	r4, [sp, #12]
	packet_tx.buffer      = (uint8_t *) port_addr;
  404a60:	ab01      	add	r3, sp, #4
  404a62:	9304      	str	r3, [sp, #16]
	packet_tx.length      = 1;
  404a64:	2301      	movs	r3, #1
  404a66:	9305      	str	r3, [sp, #20]
	twi_master_write(BOARD_BASE_TWI, &packet_tx);
  404a68:	4d08      	ldr	r5, [pc, #32]	; (404a8c <read_encoder_MAX7314+0x40>)
  404a6a:	a902      	add	r1, sp, #8
  404a6c:	4628      	mov	r0, r5
  404a6e:	4b08      	ldr	r3, [pc, #32]	; (404a90 <read_encoder_MAX7314+0x44>)
  404a70:	4798      	blx	r3


	/* Read Data from the Low and High Input Ports */
	packet_rx.chip        = 0b0100000;
  404a72:	f88d 602c 	strb.w	r6, [sp, #44]	; 0x2c
	packet_rx.addr_length = 0;
  404a76:	9408      	str	r4, [sp, #32]
	packet_rx.buffer      = data;
  404a78:	9709      	str	r7, [sp, #36]	; 0x24
	packet_rx.length      = 2;
  404a7a:	2302      	movs	r3, #2
  404a7c:	930a      	str	r3, [sp, #40]	; 0x28
	twi_master_read(BOARD_BASE_TWI, &packet_rx);
  404a7e:	a907      	add	r1, sp, #28
  404a80:	4628      	mov	r0, r5
  404a82:	4b04      	ldr	r3, [pc, #16]	; (404a94 <read_encoder_MAX7314+0x48>)
  404a84:	4798      	blx	r3


 }
  404a86:	b00d      	add	sp, #52	; 0x34
  404a88:	bdf0      	pop	{r4, r5, r6, r7, pc}
  404a8a:	bf00      	nop
  404a8c:	40018000 	.word	0x40018000
  404a90:	004002bd 	.word	0x004002bd
  404a94:	004001c1 	.word	0x004001c1

00404a98 <read_button_MAX7314>:

void read_button_MAX7314(uint8_t *data){
  404a98:	b5f0      	push	{r4, r5, r6, r7, lr}
  404a9a:	b08d      	sub	sp, #52	; 0x34
  404a9c:	4607      	mov	r7, r0
	/* Data Packets for tx/rx */
	twi_packet_t packet_rx, packet_tx;
	uint8_t port_addr[] = {MAX7314_inputPortLow};
  404a9e:	2400      	movs	r4, #0
  404aa0:	f88d 4004 	strb.w	r4, [sp, #4]

	  
	/* Write the command byte address to be the Low byte of the Input Port */
	packet_tx.chip        = 0b0100100;
  404aa4:	2624      	movs	r6, #36	; 0x24
  404aa6:	f88d 6018 	strb.w	r6, [sp, #24]
	packet_tx.addr_length = 0;
  404aaa:	9403      	str	r4, [sp, #12]
	packet_tx.buffer      = (uint8_t *) port_addr;
  404aac:	ab01      	add	r3, sp, #4
  404aae:	9304      	str	r3, [sp, #16]
	packet_tx.length      = 1;
  404ab0:	2301      	movs	r3, #1
  404ab2:	9305      	str	r3, [sp, #20]
	twi_master_write(BOARD_BASE_TWI, &packet_tx);
  404ab4:	4d08      	ldr	r5, [pc, #32]	; (404ad8 <read_button_MAX7314+0x40>)
  404ab6:	a902      	add	r1, sp, #8
  404ab8:	4628      	mov	r0, r5
  404aba:	4b08      	ldr	r3, [pc, #32]	; (404adc <read_button_MAX7314+0x44>)
  404abc:	4798      	blx	r3


	/* Read Data from the Low and High Input Ports */
	packet_rx.chip        = 0b0100100;
  404abe:	f88d 602c 	strb.w	r6, [sp, #44]	; 0x2c
	packet_rx.addr_length = 0;
  404ac2:	9408      	str	r4, [sp, #32]
	packet_rx.buffer      = data;
  404ac4:	9709      	str	r7, [sp, #36]	; 0x24
	packet_rx.length      = 2;
  404ac6:	2302      	movs	r3, #2
  404ac8:	930a      	str	r3, [sp, #40]	; 0x28
	twi_master_read(BOARD_BASE_TWI, &packet_rx);
  404aca:	a907      	add	r1, sp, #28
  404acc:	4628      	mov	r0, r5
  404ace:	4b04      	ldr	r3, [pc, #16]	; (404ae0 <read_button_MAX7314+0x48>)
  404ad0:	4798      	blx	r3


}
  404ad2:	b00d      	add	sp, #52	; 0x34
  404ad4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  404ad6:	bf00      	nop
  404ad8:	40018000 	.word	0x40018000
  404adc:	004002bd 	.word	0x004002bd
  404ae0:	004001c1 	.word	0x004001c1

00404ae4 <main>:
void read_button_MAX7314(uint8_t *port_data);
void read_encoder_MAX7314(uint8_t *port_data);


int main (void)
{
  404ae4:	b508      	push	{r3, lr}
	sysclk_init();				//initialize system clock
  404ae6:	4b21      	ldr	r3, [pc, #132]	; (404b6c <main+0x88>)
  404ae8:	4798      	blx	r3
	WDT->WDT_MR = WDT_MR_WDDIS; //disable watchdog timer
  404aea:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  404aee:	4b20      	ldr	r3, [pc, #128]	; (404b70 <main+0x8c>)
  404af0:	605a      	str	r2, [r3, #4]

	board_init();				//board init (currently empty)
  404af2:	4b20      	ldr	r3, [pc, #128]	; (404b74 <main+0x90>)
  404af4:	4798      	blx	r3
	
	SPI_led_init();
  404af6:	4b20      	ldr	r3, [pc, #128]	; (404b78 <main+0x94>)
  404af8:	4798      	blx	r3
	i2c_init();
  404afa:	4b20      	ldr	r3, [pc, #128]	; (404b7c <main+0x98>)
  404afc:	4798      	blx	r3
	init_IO_int();
  404afe:	4b20      	ldr	r3, [pc, #128]	; (404b80 <main+0x9c>)
  404b00:	4798      	blx	r3
	timers_init();
  404b02:	4b20      	ldr	r3, [pc, #128]	; (404b84 <main+0xa0>)
  404b04:	4798      	blx	r3
	ADC_init();
  404b06:	4b20      	ldr	r3, [pc, #128]	; (404b88 <main+0xa4>)
  404b08:	4798      	blx	r3
	Encoder_init();				//initialize encoders
  404b0a:	4b20      	ldr	r3, [pc, #128]	; (404b8c <main+0xa8>)
  404b0c:	4798      	blx	r3
	all_displays_init();
  404b0e:	4b20      	ldr	r3, [pc, #128]	; (404b90 <main+0xac>)
  404b10:	4798      	blx	r3
	init_sequencer_controls();
  404b12:	4b20      	ldr	r3, [pc, #128]	; (404b94 <main+0xb0>)
  404b14:	4798      	blx	r3

	leds_update_display();
  404b16:	4b20      	ldr	r3, [pc, #128]	; (404b98 <main+0xb4>)
  404b18:	4798      	blx	r3
	update_timers(bpm);
  404b1a:	4c20      	ldr	r4, [pc, #128]	; (404b9c <main+0xb8>)
  404b1c:	8820      	ldrh	r0, [r4, #0]
  404b1e:	4b20      	ldr	r3, [pc, #128]	; (404ba0 <main+0xbc>)
  404b20:	4798      	blx	r3
	config_MAX7314();
  404b22:	4b20      	ldr	r3, [pc, #128]	; (404ba4 <main+0xc0>)
  404b24:	4798      	blx	r3
	read_button_MAX7314(button_port_data);
  404b26:	4820      	ldr	r0, [pc, #128]	; (404ba8 <main+0xc4>)
  404b28:	4b20      	ldr	r3, [pc, #128]	; (404bac <main+0xc8>)
  404b2a:	4798      	blx	r3

	notes_default();
  404b2c:	4b20      	ldr	r3, [pc, #128]	; (404bb0 <main+0xcc>)
  404b2e:	4798      	blx	r3

	note_display(48);
  404b30:	2030      	movs	r0, #48	; 0x30
  404b32:	4b20      	ldr	r3, [pc, #128]	; (404bb4 <main+0xd0>)
  404b34:	4798      	blx	r3
 	bpm_display(bpm);
  404b36:	8820      	ldrh	r0, [r4, #0]
  404b38:	4b1f      	ldr	r3, [pc, #124]	; (404bb8 <main+0xd4>)
  404b3a:	4798      	blx	r3
 	res_display(res_to_int(resolution));
  404b3c:	4b1f      	ldr	r3, [pc, #124]	; (404bbc <main+0xd8>)
  404b3e:	7818      	ldrb	r0, [r3, #0]
  404b40:	4b1f      	ldr	r3, [pc, #124]	; (404bc0 <main+0xdc>)
  404b42:	4798      	blx	r3
  404b44:	4b1f      	ldr	r3, [pc, #124]	; (404bc4 <main+0xe0>)
  404b46:	4798      	blx	r3
 	page_display(curr_page);
  404b48:	4b1f      	ldr	r3, [pc, #124]	; (404bc8 <main+0xe4>)
  404b4a:	7818      	ldrb	r0, [r3, #0]
  404b4c:	4b1f      	ldr	r3, [pc, #124]	; (404bcc <main+0xe8>)
  404b4e:	4798      	blx	r3
 	pattern_display(curr_pattern);
  404b50:	4b1f      	ldr	r3, [pc, #124]	; (404bd0 <main+0xec>)
  404b52:	7818      	ldrb	r0, [r3, #0]
  404b54:	4b1f      	ldr	r3, [pc, #124]	; (404bd4 <main+0xf0>)
  404b56:	4798      	blx	r3
 	output_display_1(curr_pattern_ch[0], curr_pattern_ch[1]);
  404b58:	4c1f      	ldr	r4, [pc, #124]	; (404bd8 <main+0xf4>)
  404b5a:	7861      	ldrb	r1, [r4, #1]
  404b5c:	7820      	ldrb	r0, [r4, #0]
  404b5e:	4b1f      	ldr	r3, [pc, #124]	; (404bdc <main+0xf8>)
  404b60:	4798      	blx	r3
 	output_display_2(curr_pattern_ch[2], curr_pattern_ch[3]);
  404b62:	78e1      	ldrb	r1, [r4, #3]
  404b64:	78a0      	ldrb	r0, [r4, #2]
  404b66:	4b1e      	ldr	r3, [pc, #120]	; (404be0 <main+0xfc>)
  404b68:	4798      	blx	r3
  404b6a:	e7fe      	b.n	404b6a <main+0x86>
  404b6c:	00404535 	.word	0x00404535
  404b70:	400e1450 	.word	0x400e1450
  404b74:	00404531 	.word	0x00404531
  404b78:	00403695 	.word	0x00403695
  404b7c:	0040495d 	.word	0x0040495d
  404b80:	00404889 	.word	0x00404889
  404b84:	004041e5 	.word	0x004041e5
  404b88:	0040011d 	.word	0x0040011d
  404b8c:	00401825 	.word	0x00401825
  404b90:	00400769 	.word	0x00400769
  404b94:	00402fe1 	.word	0x00402fe1
  404b98:	004022ad 	.word	0x004022ad
  404b9c:	20000706 	.word	0x20000706
  404ba0:	004042e5 	.word	0x004042e5
  404ba4:	004049b5 	.word	0x004049b5
  404ba8:	200006cc 	.word	0x200006cc
  404bac:	00404a99 	.word	0x00404a99
  404bb0:	004039c9 	.word	0x004039c9
  404bb4:	00400ee5 	.word	0x00400ee5
  404bb8:	00401331 	.word	0x00401331
  404bbc:	200006d8 	.word	0x200006d8
  404bc0:	004028d5 	.word	0x004028d5
  404bc4:	00401395 	.word	0x00401395
  404bc8:	200006fe 	.word	0x200006fe
  404bcc:	00401481 	.word	0x00401481
  404bd0:	200006d0 	.word	0x200006d0
  404bd4:	00401519 	.word	0x00401519
  404bd8:	200006e8 	.word	0x200006e8
  404bdc:	00401645 	.word	0x00401645
  404be0:	004016dd 	.word	0x004016dd

00404be4 <PIOB_Handler>:
	{
	
	}
}

 void PIOB_Handler(){
  404be4:	b510      	push	{r4, lr}

	 uint32_t status = REG_PIOB_ISR;	//read PIOB interrupt status & clear interrupt flags
  404be6:	4b20      	ldr	r3, [pc, #128]	; (404c68 <PIOB_Handler+0x84>)
  404be8:	681b      	ldr	r3, [r3, #0]
 
	 //check if Io expander interrupt was driven
	 if (status & PIO_ISR_P10){
  404bea:	f413 6f80 	tst.w	r3, #1024	; 0x400
  404bee:	d01b      	beq.n	404c28 <PIOB_Handler+0x44>
		read_button_MAX7314(temp_data);
  404bf0:	4c1e      	ldr	r4, [pc, #120]	; (404c6c <PIOB_Handler+0x88>)
  404bf2:	4620      	mov	r0, r4
  404bf4:	4b1e      	ldr	r3, [pc, #120]	; (404c70 <PIOB_Handler+0x8c>)
  404bf6:	4798      	blx	r3

		if  ( !((temp_data[0] == 255) && (temp_data[1] == 255)) ){
  404bf8:	7820      	ldrb	r0, [r4, #0]
  404bfa:	28ff      	cmp	r0, #255	; 0xff
  404bfc:	d102      	bne.n	404c04 <PIOB_Handler+0x20>
  404bfe:	7863      	ldrb	r3, [r4, #1]
  404c00:	2bff      	cmp	r3, #255	; 0xff
  404c02:	d02f      	beq.n	404c64 <PIOB_Handler+0x80>
			button_port_data[0] = temp_data[0];
  404c04:	4b1b      	ldr	r3, [pc, #108]	; (404c74 <PIOB_Handler+0x90>)
  404c06:	7018      	strb	r0, [r3, #0]
			button_port_data[1] = temp_data[1];
  404c08:	4a18      	ldr	r2, [pc, #96]	; (404c6c <PIOB_Handler+0x88>)
  404c0a:	7851      	ldrb	r1, [r2, #1]
  404c0c:	7059      	strb	r1, [r3, #1]

			button_count++;
  404c0e:	4a1a      	ldr	r2, [pc, #104]	; (404c78 <PIOB_Handler+0x94>)
  404c10:	7813      	ldrb	r3, [r2, #0]
  404c12:	3301      	adds	r3, #1
  404c14:	b2db      	uxtb	r3, r3
  404c16:	7013      	strb	r3, [r2, #0]
			if (button_count >= 2){
  404c18:	2b01      	cmp	r3, #1
  404c1a:	d923      	bls.n	404c64 <PIOB_Handler+0x80>
				led_toggle(button_port_data[0], button_port_data[1]);
  404c1c:	4b17      	ldr	r3, [pc, #92]	; (404c7c <PIOB_Handler+0x98>)
  404c1e:	4798      	blx	r3
				button_count = 0;
  404c20:	2200      	movs	r2, #0
  404c22:	4b15      	ldr	r3, [pc, #84]	; (404c78 <PIOB_Handler+0x94>)
  404c24:	701a      	strb	r2, [r3, #0]
  404c26:	bd10      	pop	{r4, pc}
			}
		}
		
	 }

	 else if (status & PIO_ISR_P11) {
  404c28:	f413 6f00 	tst.w	r3, #2048	; 0x800
  404c2c:	d01a      	beq.n	404c64 <PIOB_Handler+0x80>
		read_encoder_MAX7314(temp_data);
  404c2e:	4c0f      	ldr	r4, [pc, #60]	; (404c6c <PIOB_Handler+0x88>)
  404c30:	4620      	mov	r0, r4
  404c32:	4b13      	ldr	r3, [pc, #76]	; (404c80 <PIOB_Handler+0x9c>)
  404c34:	4798      	blx	r3
		
		if  ( !((temp_data[0] == 255) && (temp_data[1] == 255)) ){
  404c36:	7820      	ldrb	r0, [r4, #0]
  404c38:	28ff      	cmp	r0, #255	; 0xff
  404c3a:	d102      	bne.n	404c42 <PIOB_Handler+0x5e>
  404c3c:	7863      	ldrb	r3, [r4, #1]
  404c3e:	2bff      	cmp	r3, #255	; 0xff
  404c40:	d010      	beq.n	404c64 <PIOB_Handler+0x80>
			encoder_port_data[0] = temp_data[0];
  404c42:	4b10      	ldr	r3, [pc, #64]	; (404c84 <PIOB_Handler+0xa0>)
  404c44:	7018      	strb	r0, [r3, #0]
			encoder_port_data[1] = temp_data[1];
  404c46:	4a09      	ldr	r2, [pc, #36]	; (404c6c <PIOB_Handler+0x88>)
  404c48:	7851      	ldrb	r1, [r2, #1]
  404c4a:	7059      	strb	r1, [r3, #1]

			encoder_count++;
  404c4c:	4a0e      	ldr	r2, [pc, #56]	; (404c88 <PIOB_Handler+0xa4>)
  404c4e:	7813      	ldrb	r3, [r2, #0]
  404c50:	3301      	adds	r3, #1
  404c52:	b2db      	uxtb	r3, r3
  404c54:	7013      	strb	r3, [r2, #0]
			if (encoder_count >= 2){
  404c56:	2b01      	cmp	r3, #1
  404c58:	d904      	bls.n	404c64 <PIOB_Handler+0x80>
				aux_toggle(encoder_port_data[0], encoder_port_data[1]);
  404c5a:	4b0c      	ldr	r3, [pc, #48]	; (404c8c <PIOB_Handler+0xa8>)
  404c5c:	4798      	blx	r3
				encoder_count = 0;
  404c5e:	2200      	movs	r2, #0
  404c60:	4b09      	ldr	r3, [pc, #36]	; (404c88 <PIOB_Handler+0xa4>)
  404c62:	701a      	strb	r2, [r3, #0]
  404c64:	bd10      	pop	{r4, pc}
  404c66:	bf00      	nop
  404c68:	400e104c 	.word	0x400e104c
  404c6c:	200006c4 	.word	0x200006c4
  404c70:	00404a99 	.word	0x00404a99
  404c74:	200006cc 	.word	0x200006cc
  404c78:	200006cf 	.word	0x200006cf
  404c7c:	00402755 	.word	0x00402755
  404c80:	00404a4d 	.word	0x00404a4d
  404c84:	200006c8 	.word	0x200006c8
  404c88:	200006ce 	.word	0x200006ce
  404c8c:	00402d95 	.word	0x00402d95

00404c90 <__aeabi_frsub>:
  404c90:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
  404c94:	e002      	b.n	404c9c <__addsf3>
  404c96:	bf00      	nop

00404c98 <__aeabi_fsub>:
  404c98:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00404c9c <__addsf3>:
  404c9c:	0042      	lsls	r2, r0, #1
  404c9e:	bf1f      	itttt	ne
  404ca0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
  404ca4:	ea92 0f03 	teqne	r2, r3
  404ca8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
  404cac:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
  404cb0:	d06a      	beq.n	404d88 <__addsf3+0xec>
  404cb2:	ea4f 6212 	mov.w	r2, r2, lsr #24
  404cb6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
  404cba:	bfc1      	itttt	gt
  404cbc:	18d2      	addgt	r2, r2, r3
  404cbe:	4041      	eorgt	r1, r0
  404cc0:	4048      	eorgt	r0, r1
  404cc2:	4041      	eorgt	r1, r0
  404cc4:	bfb8      	it	lt
  404cc6:	425b      	neglt	r3, r3
  404cc8:	2b19      	cmp	r3, #25
  404cca:	bf88      	it	hi
  404ccc:	4770      	bxhi	lr
  404cce:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
  404cd2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  404cd6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
  404cda:	bf18      	it	ne
  404cdc:	4240      	negne	r0, r0
  404cde:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  404ce2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
  404ce6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
  404cea:	bf18      	it	ne
  404cec:	4249      	negne	r1, r1
  404cee:	ea92 0f03 	teq	r2, r3
  404cf2:	d03f      	beq.n	404d74 <__addsf3+0xd8>
  404cf4:	f1a2 0201 	sub.w	r2, r2, #1
  404cf8:	fa41 fc03 	asr.w	ip, r1, r3
  404cfc:	eb10 000c 	adds.w	r0, r0, ip
  404d00:	f1c3 0320 	rsb	r3, r3, #32
  404d04:	fa01 f103 	lsl.w	r1, r1, r3
  404d08:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
  404d0c:	d502      	bpl.n	404d14 <__addsf3+0x78>
  404d0e:	4249      	negs	r1, r1
  404d10:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
  404d14:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
  404d18:	d313      	bcc.n	404d42 <__addsf3+0xa6>
  404d1a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
  404d1e:	d306      	bcc.n	404d2e <__addsf3+0x92>
  404d20:	0840      	lsrs	r0, r0, #1
  404d22:	ea4f 0131 	mov.w	r1, r1, rrx
  404d26:	f102 0201 	add.w	r2, r2, #1
  404d2a:	2afe      	cmp	r2, #254	; 0xfe
  404d2c:	d251      	bcs.n	404dd2 <__addsf3+0x136>
  404d2e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
  404d32:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
  404d36:	bf08      	it	eq
  404d38:	f020 0001 	biceq.w	r0, r0, #1
  404d3c:	ea40 0003 	orr.w	r0, r0, r3
  404d40:	4770      	bx	lr
  404d42:	0049      	lsls	r1, r1, #1
  404d44:	eb40 0000 	adc.w	r0, r0, r0
  404d48:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
  404d4c:	f1a2 0201 	sub.w	r2, r2, #1
  404d50:	d1ed      	bne.n	404d2e <__addsf3+0x92>
  404d52:	fab0 fc80 	clz	ip, r0
  404d56:	f1ac 0c08 	sub.w	ip, ip, #8
  404d5a:	ebb2 020c 	subs.w	r2, r2, ip
  404d5e:	fa00 f00c 	lsl.w	r0, r0, ip
  404d62:	bfaa      	itet	ge
  404d64:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
  404d68:	4252      	neglt	r2, r2
  404d6a:	4318      	orrge	r0, r3
  404d6c:	bfbc      	itt	lt
  404d6e:	40d0      	lsrlt	r0, r2
  404d70:	4318      	orrlt	r0, r3
  404d72:	4770      	bx	lr
  404d74:	f092 0f00 	teq	r2, #0
  404d78:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
  404d7c:	bf06      	itte	eq
  404d7e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
  404d82:	3201      	addeq	r2, #1
  404d84:	3b01      	subne	r3, #1
  404d86:	e7b5      	b.n	404cf4 <__addsf3+0x58>
  404d88:	ea4f 0341 	mov.w	r3, r1, lsl #1
  404d8c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
  404d90:	bf18      	it	ne
  404d92:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
  404d96:	d021      	beq.n	404ddc <__addsf3+0x140>
  404d98:	ea92 0f03 	teq	r2, r3
  404d9c:	d004      	beq.n	404da8 <__addsf3+0x10c>
  404d9e:	f092 0f00 	teq	r2, #0
  404da2:	bf08      	it	eq
  404da4:	4608      	moveq	r0, r1
  404da6:	4770      	bx	lr
  404da8:	ea90 0f01 	teq	r0, r1
  404dac:	bf1c      	itt	ne
  404dae:	2000      	movne	r0, #0
  404db0:	4770      	bxne	lr
  404db2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
  404db6:	d104      	bne.n	404dc2 <__addsf3+0x126>
  404db8:	0040      	lsls	r0, r0, #1
  404dba:	bf28      	it	cs
  404dbc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
  404dc0:	4770      	bx	lr
  404dc2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
  404dc6:	bf3c      	itt	cc
  404dc8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
  404dcc:	4770      	bxcc	lr
  404dce:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
  404dd2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
  404dd6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  404dda:	4770      	bx	lr
  404ddc:	ea7f 6222 	mvns.w	r2, r2, asr #24
  404de0:	bf16      	itet	ne
  404de2:	4608      	movne	r0, r1
  404de4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
  404de8:	4601      	movne	r1, r0
  404dea:	0242      	lsls	r2, r0, #9
  404dec:	bf06      	itte	eq
  404dee:	ea5f 2341 	movseq.w	r3, r1, lsl #9
  404df2:	ea90 0f01 	teqeq	r0, r1
  404df6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
  404dfa:	4770      	bx	lr

00404dfc <__aeabi_ui2f>:
  404dfc:	f04f 0300 	mov.w	r3, #0
  404e00:	e004      	b.n	404e0c <__aeabi_i2f+0x8>
  404e02:	bf00      	nop

00404e04 <__aeabi_i2f>:
  404e04:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
  404e08:	bf48      	it	mi
  404e0a:	4240      	negmi	r0, r0
  404e0c:	ea5f 0c00 	movs.w	ip, r0
  404e10:	bf08      	it	eq
  404e12:	4770      	bxeq	lr
  404e14:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
  404e18:	4601      	mov	r1, r0
  404e1a:	f04f 0000 	mov.w	r0, #0
  404e1e:	e01c      	b.n	404e5a <__aeabi_l2f+0x2a>

00404e20 <__aeabi_ul2f>:
  404e20:	ea50 0201 	orrs.w	r2, r0, r1
  404e24:	bf08      	it	eq
  404e26:	4770      	bxeq	lr
  404e28:	f04f 0300 	mov.w	r3, #0
  404e2c:	e00a      	b.n	404e44 <__aeabi_l2f+0x14>
  404e2e:	bf00      	nop

00404e30 <__aeabi_l2f>:
  404e30:	ea50 0201 	orrs.w	r2, r0, r1
  404e34:	bf08      	it	eq
  404e36:	4770      	bxeq	lr
  404e38:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
  404e3c:	d502      	bpl.n	404e44 <__aeabi_l2f+0x14>
  404e3e:	4240      	negs	r0, r0
  404e40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  404e44:	ea5f 0c01 	movs.w	ip, r1
  404e48:	bf02      	ittt	eq
  404e4a:	4684      	moveq	ip, r0
  404e4c:	4601      	moveq	r1, r0
  404e4e:	2000      	moveq	r0, #0
  404e50:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
  404e54:	bf08      	it	eq
  404e56:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
  404e5a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
  404e5e:	fabc f28c 	clz	r2, ip
  404e62:	3a08      	subs	r2, #8
  404e64:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
  404e68:	db10      	blt.n	404e8c <__aeabi_l2f+0x5c>
  404e6a:	fa01 fc02 	lsl.w	ip, r1, r2
  404e6e:	4463      	add	r3, ip
  404e70:	fa00 fc02 	lsl.w	ip, r0, r2
  404e74:	f1c2 0220 	rsb	r2, r2, #32
  404e78:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  404e7c:	fa20 f202 	lsr.w	r2, r0, r2
  404e80:	eb43 0002 	adc.w	r0, r3, r2
  404e84:	bf08      	it	eq
  404e86:	f020 0001 	biceq.w	r0, r0, #1
  404e8a:	4770      	bx	lr
  404e8c:	f102 0220 	add.w	r2, r2, #32
  404e90:	fa01 fc02 	lsl.w	ip, r1, r2
  404e94:	f1c2 0220 	rsb	r2, r2, #32
  404e98:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
  404e9c:	fa21 f202 	lsr.w	r2, r1, r2
  404ea0:	eb43 0002 	adc.w	r0, r3, r2
  404ea4:	bf08      	it	eq
  404ea6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
  404eaa:	4770      	bx	lr

00404eac <__aeabi_fmul>:
  404eac:	f04f 0cff 	mov.w	ip, #255	; 0xff
  404eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
  404eb4:	bf1e      	ittt	ne
  404eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
  404eba:	ea92 0f0c 	teqne	r2, ip
  404ebe:	ea93 0f0c 	teqne	r3, ip
  404ec2:	d06f      	beq.n	404fa4 <__aeabi_fmul+0xf8>
  404ec4:	441a      	add	r2, r3
  404ec6:	ea80 0c01 	eor.w	ip, r0, r1
  404eca:	0240      	lsls	r0, r0, #9
  404ecc:	bf18      	it	ne
  404ece:	ea5f 2141 	movsne.w	r1, r1, lsl #9
  404ed2:	d01e      	beq.n	404f12 <__aeabi_fmul+0x66>
  404ed4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
  404ed8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
  404edc:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
  404ee0:	fba0 3101 	umull	r3, r1, r0, r1
  404ee4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
  404ee8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
  404eec:	bf3e      	ittt	cc
  404eee:	0049      	lslcc	r1, r1, #1
  404ef0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
  404ef4:	005b      	lslcc	r3, r3, #1
  404ef6:	ea40 0001 	orr.w	r0, r0, r1
  404efa:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
  404efe:	2afd      	cmp	r2, #253	; 0xfd
  404f00:	d81d      	bhi.n	404f3e <__aeabi_fmul+0x92>
  404f02:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
  404f06:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
  404f0a:	bf08      	it	eq
  404f0c:	f020 0001 	biceq.w	r0, r0, #1
  404f10:	4770      	bx	lr
  404f12:	f090 0f00 	teq	r0, #0
  404f16:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
  404f1a:	bf08      	it	eq
  404f1c:	0249      	lsleq	r1, r1, #9
  404f1e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
  404f22:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
  404f26:	3a7f      	subs	r2, #127	; 0x7f
  404f28:	bfc2      	ittt	gt
  404f2a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
  404f2e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
  404f32:	4770      	bxgt	lr
  404f34:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  404f38:	f04f 0300 	mov.w	r3, #0
  404f3c:	3a01      	subs	r2, #1
  404f3e:	dc5d      	bgt.n	404ffc <__aeabi_fmul+0x150>
  404f40:	f112 0f19 	cmn.w	r2, #25
  404f44:	bfdc      	itt	le
  404f46:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
  404f4a:	4770      	bxle	lr
  404f4c:	f1c2 0200 	rsb	r2, r2, #0
  404f50:	0041      	lsls	r1, r0, #1
  404f52:	fa21 f102 	lsr.w	r1, r1, r2
  404f56:	f1c2 0220 	rsb	r2, r2, #32
  404f5a:	fa00 fc02 	lsl.w	ip, r0, r2
  404f5e:	ea5f 0031 	movs.w	r0, r1, rrx
  404f62:	f140 0000 	adc.w	r0, r0, #0
  404f66:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
  404f6a:	bf08      	it	eq
  404f6c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
  404f70:	4770      	bx	lr
  404f72:	f092 0f00 	teq	r2, #0
  404f76:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
  404f7a:	bf02      	ittt	eq
  404f7c:	0040      	lsleq	r0, r0, #1
  404f7e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
  404f82:	3a01      	subeq	r2, #1
  404f84:	d0f9      	beq.n	404f7a <__aeabi_fmul+0xce>
  404f86:	ea40 000c 	orr.w	r0, r0, ip
  404f8a:	f093 0f00 	teq	r3, #0
  404f8e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  404f92:	bf02      	ittt	eq
  404f94:	0049      	lsleq	r1, r1, #1
  404f96:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
  404f9a:	3b01      	subeq	r3, #1
  404f9c:	d0f9      	beq.n	404f92 <__aeabi_fmul+0xe6>
  404f9e:	ea41 010c 	orr.w	r1, r1, ip
  404fa2:	e78f      	b.n	404ec4 <__aeabi_fmul+0x18>
  404fa4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
  404fa8:	ea92 0f0c 	teq	r2, ip
  404fac:	bf18      	it	ne
  404fae:	ea93 0f0c 	teqne	r3, ip
  404fb2:	d00a      	beq.n	404fca <__aeabi_fmul+0x11e>
  404fb4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
  404fb8:	bf18      	it	ne
  404fba:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
  404fbe:	d1d8      	bne.n	404f72 <__aeabi_fmul+0xc6>
  404fc0:	ea80 0001 	eor.w	r0, r0, r1
  404fc4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
  404fc8:	4770      	bx	lr
  404fca:	f090 0f00 	teq	r0, #0
  404fce:	bf17      	itett	ne
  404fd0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
  404fd4:	4608      	moveq	r0, r1
  404fd6:	f091 0f00 	teqne	r1, #0
  404fda:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
  404fde:	d014      	beq.n	40500a <__aeabi_fmul+0x15e>
  404fe0:	ea92 0f0c 	teq	r2, ip
  404fe4:	d101      	bne.n	404fea <__aeabi_fmul+0x13e>
  404fe6:	0242      	lsls	r2, r0, #9
  404fe8:	d10f      	bne.n	40500a <__aeabi_fmul+0x15e>
  404fea:	ea93 0f0c 	teq	r3, ip
  404fee:	d103      	bne.n	404ff8 <__aeabi_fmul+0x14c>
  404ff0:	024b      	lsls	r3, r1, #9
  404ff2:	bf18      	it	ne
  404ff4:	4608      	movne	r0, r1
  404ff6:	d108      	bne.n	40500a <__aeabi_fmul+0x15e>
  404ff8:	ea80 0001 	eor.w	r0, r0, r1
  404ffc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
  405000:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  405004:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  405008:	4770      	bx	lr
  40500a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  40500e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
  405012:	4770      	bx	lr

00405014 <__aeabi_fdiv>:
  405014:	f04f 0cff 	mov.w	ip, #255	; 0xff
  405018:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
  40501c:	bf1e      	ittt	ne
  40501e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
  405022:	ea92 0f0c 	teqne	r2, ip
  405026:	ea93 0f0c 	teqne	r3, ip
  40502a:	d069      	beq.n	405100 <__aeabi_fdiv+0xec>
  40502c:	eba2 0203 	sub.w	r2, r2, r3
  405030:	ea80 0c01 	eor.w	ip, r0, r1
  405034:	0249      	lsls	r1, r1, #9
  405036:	ea4f 2040 	mov.w	r0, r0, lsl #9
  40503a:	d037      	beq.n	4050ac <__aeabi_fdiv+0x98>
  40503c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  405040:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
  405044:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
  405048:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
  40504c:	428b      	cmp	r3, r1
  40504e:	bf38      	it	cc
  405050:	005b      	lslcc	r3, r3, #1
  405052:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
  405056:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
  40505a:	428b      	cmp	r3, r1
  40505c:	bf24      	itt	cs
  40505e:	1a5b      	subcs	r3, r3, r1
  405060:	ea40 000c 	orrcs.w	r0, r0, ip
  405064:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
  405068:	bf24      	itt	cs
  40506a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
  40506e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  405072:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
  405076:	bf24      	itt	cs
  405078:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
  40507c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  405080:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
  405084:	bf24      	itt	cs
  405086:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
  40508a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  40508e:	011b      	lsls	r3, r3, #4
  405090:	bf18      	it	ne
  405092:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
  405096:	d1e0      	bne.n	40505a <__aeabi_fdiv+0x46>
  405098:	2afd      	cmp	r2, #253	; 0xfd
  40509a:	f63f af50 	bhi.w	404f3e <__aeabi_fmul+0x92>
  40509e:	428b      	cmp	r3, r1
  4050a0:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
  4050a4:	bf08      	it	eq
  4050a6:	f020 0001 	biceq.w	r0, r0, #1
  4050aa:	4770      	bx	lr
  4050ac:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
  4050b0:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
  4050b4:	327f      	adds	r2, #127	; 0x7f
  4050b6:	bfc2      	ittt	gt
  4050b8:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
  4050bc:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
  4050c0:	4770      	bxgt	lr
  4050c2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  4050c6:	f04f 0300 	mov.w	r3, #0
  4050ca:	3a01      	subs	r2, #1
  4050cc:	e737      	b.n	404f3e <__aeabi_fmul+0x92>
  4050ce:	f092 0f00 	teq	r2, #0
  4050d2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
  4050d6:	bf02      	ittt	eq
  4050d8:	0040      	lsleq	r0, r0, #1
  4050da:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
  4050de:	3a01      	subeq	r2, #1
  4050e0:	d0f9      	beq.n	4050d6 <__aeabi_fdiv+0xc2>
  4050e2:	ea40 000c 	orr.w	r0, r0, ip
  4050e6:	f093 0f00 	teq	r3, #0
  4050ea:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  4050ee:	bf02      	ittt	eq
  4050f0:	0049      	lsleq	r1, r1, #1
  4050f2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
  4050f6:	3b01      	subeq	r3, #1
  4050f8:	d0f9      	beq.n	4050ee <__aeabi_fdiv+0xda>
  4050fa:	ea41 010c 	orr.w	r1, r1, ip
  4050fe:	e795      	b.n	40502c <__aeabi_fdiv+0x18>
  405100:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
  405104:	ea92 0f0c 	teq	r2, ip
  405108:	d108      	bne.n	40511c <__aeabi_fdiv+0x108>
  40510a:	0242      	lsls	r2, r0, #9
  40510c:	f47f af7d 	bne.w	40500a <__aeabi_fmul+0x15e>
  405110:	ea93 0f0c 	teq	r3, ip
  405114:	f47f af70 	bne.w	404ff8 <__aeabi_fmul+0x14c>
  405118:	4608      	mov	r0, r1
  40511a:	e776      	b.n	40500a <__aeabi_fmul+0x15e>
  40511c:	ea93 0f0c 	teq	r3, ip
  405120:	d104      	bne.n	40512c <__aeabi_fdiv+0x118>
  405122:	024b      	lsls	r3, r1, #9
  405124:	f43f af4c 	beq.w	404fc0 <__aeabi_fmul+0x114>
  405128:	4608      	mov	r0, r1
  40512a:	e76e      	b.n	40500a <__aeabi_fmul+0x15e>
  40512c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
  405130:	bf18      	it	ne
  405132:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
  405136:	d1ca      	bne.n	4050ce <__aeabi_fdiv+0xba>
  405138:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
  40513c:	f47f af5c 	bne.w	404ff8 <__aeabi_fmul+0x14c>
  405140:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
  405144:	f47f af3c 	bne.w	404fc0 <__aeabi_fmul+0x114>
  405148:	e75f      	b.n	40500a <__aeabi_fmul+0x15e>
  40514a:	bf00      	nop

0040514c <__aeabi_f2uiz>:
  40514c:	0042      	lsls	r2, r0, #1
  40514e:	d20e      	bcs.n	40516e <__aeabi_f2uiz+0x22>
  405150:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
  405154:	d30b      	bcc.n	40516e <__aeabi_f2uiz+0x22>
  405156:	f04f 039e 	mov.w	r3, #158	; 0x9e
  40515a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
  40515e:	d409      	bmi.n	405174 <__aeabi_f2uiz+0x28>
  405160:	ea4f 2300 	mov.w	r3, r0, lsl #8
  405164:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  405168:	fa23 f002 	lsr.w	r0, r3, r2
  40516c:	4770      	bx	lr
  40516e:	f04f 0000 	mov.w	r0, #0
  405172:	4770      	bx	lr
  405174:	f112 0f61 	cmn.w	r2, #97	; 0x61
  405178:	d101      	bne.n	40517e <__aeabi_f2uiz+0x32>
  40517a:	0242      	lsls	r2, r0, #9
  40517c:	d102      	bne.n	405184 <__aeabi_f2uiz+0x38>
  40517e:	f04f 30ff 	mov.w	r0, #4294967295
  405182:	4770      	bx	lr
  405184:	f04f 0000 	mov.w	r0, #0
  405188:	4770      	bx	lr
  40518a:	bf00      	nop

0040518c <__libc_init_array>:
  40518c:	b570      	push	{r4, r5, r6, lr}
  40518e:	4e0f      	ldr	r6, [pc, #60]	; (4051cc <__libc_init_array+0x40>)
  405190:	4d0f      	ldr	r5, [pc, #60]	; (4051d0 <__libc_init_array+0x44>)
  405192:	1b76      	subs	r6, r6, r5
  405194:	10b6      	asrs	r6, r6, #2
  405196:	bf18      	it	ne
  405198:	2400      	movne	r4, #0
  40519a:	d005      	beq.n	4051a8 <__libc_init_array+0x1c>
  40519c:	3401      	adds	r4, #1
  40519e:	f855 3b04 	ldr.w	r3, [r5], #4
  4051a2:	4798      	blx	r3
  4051a4:	42a6      	cmp	r6, r4
  4051a6:	d1f9      	bne.n	40519c <__libc_init_array+0x10>
  4051a8:	4e0a      	ldr	r6, [pc, #40]	; (4051d4 <__libc_init_array+0x48>)
  4051aa:	4d0b      	ldr	r5, [pc, #44]	; (4051d8 <__libc_init_array+0x4c>)
  4051ac:	1b76      	subs	r6, r6, r5
  4051ae:	f001 fa31 	bl	406614 <_init>
  4051b2:	10b6      	asrs	r6, r6, #2
  4051b4:	bf18      	it	ne
  4051b6:	2400      	movne	r4, #0
  4051b8:	d006      	beq.n	4051c8 <__libc_init_array+0x3c>
  4051ba:	3401      	adds	r4, #1
  4051bc:	f855 3b04 	ldr.w	r3, [r5], #4
  4051c0:	4798      	blx	r3
  4051c2:	42a6      	cmp	r6, r4
  4051c4:	d1f9      	bne.n	4051ba <__libc_init_array+0x2e>
  4051c6:	bd70      	pop	{r4, r5, r6, pc}
  4051c8:	bd70      	pop	{r4, r5, r6, pc}
  4051ca:	bf00      	nop
  4051cc:	00406620 	.word	0x00406620
  4051d0:	00406620 	.word	0x00406620
  4051d4:	00406628 	.word	0x00406628
  4051d8:	00406620 	.word	0x00406620

004051dc <register_fini>:
  4051dc:	4b02      	ldr	r3, [pc, #8]	; (4051e8 <register_fini+0xc>)
  4051de:	b113      	cbz	r3, 4051e6 <register_fini+0xa>
  4051e0:	4802      	ldr	r0, [pc, #8]	; (4051ec <register_fini+0x10>)
  4051e2:	f000 b805 	b.w	4051f0 <atexit>
  4051e6:	4770      	bx	lr
  4051e8:	00000000 	.word	0x00000000
  4051ec:	004051fd 	.word	0x004051fd

004051f0 <atexit>:
  4051f0:	2300      	movs	r3, #0
  4051f2:	4601      	mov	r1, r0
  4051f4:	461a      	mov	r2, r3
  4051f6:	4618      	mov	r0, r3
  4051f8:	f000 b814 	b.w	405224 <__register_exitproc>

004051fc <__libc_fini_array>:
  4051fc:	b538      	push	{r3, r4, r5, lr}
  4051fe:	4d07      	ldr	r5, [pc, #28]	; (40521c <__libc_fini_array+0x20>)
  405200:	4c07      	ldr	r4, [pc, #28]	; (405220 <__libc_fini_array+0x24>)
  405202:	1b2c      	subs	r4, r5, r4
  405204:	10a4      	asrs	r4, r4, #2
  405206:	d005      	beq.n	405214 <__libc_fini_array+0x18>
  405208:	3c01      	subs	r4, #1
  40520a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  40520e:	4798      	blx	r3
  405210:	2c00      	cmp	r4, #0
  405212:	d1f9      	bne.n	405208 <__libc_fini_array+0xc>
  405214:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  405218:	f001 ba06 	b.w	406628 <_fini>
  40521c:	00406638 	.word	0x00406638
  405220:	00406634 	.word	0x00406634

00405224 <__register_exitproc>:
  405224:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  405228:	4c25      	ldr	r4, [pc, #148]	; (4052c0 <__register_exitproc+0x9c>)
  40522a:	6825      	ldr	r5, [r4, #0]
  40522c:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
  405230:	4606      	mov	r6, r0
  405232:	4688      	mov	r8, r1
  405234:	4692      	mov	sl, r2
  405236:	4699      	mov	r9, r3
  405238:	b3c4      	cbz	r4, 4052ac <__register_exitproc+0x88>
  40523a:	6860      	ldr	r0, [r4, #4]
  40523c:	281f      	cmp	r0, #31
  40523e:	dc17      	bgt.n	405270 <__register_exitproc+0x4c>
  405240:	1c43      	adds	r3, r0, #1
  405242:	b176      	cbz	r6, 405262 <__register_exitproc+0x3e>
  405244:	eb04 0580 	add.w	r5, r4, r0, lsl #2
  405248:	2201      	movs	r2, #1
  40524a:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
  40524e:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
  405252:	4082      	lsls	r2, r0
  405254:	4311      	orrs	r1, r2
  405256:	2e02      	cmp	r6, #2
  405258:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
  40525c:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
  405260:	d01e      	beq.n	4052a0 <__register_exitproc+0x7c>
  405262:	3002      	adds	r0, #2
  405264:	6063      	str	r3, [r4, #4]
  405266:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
  40526a:	2000      	movs	r0, #0
  40526c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  405270:	4b14      	ldr	r3, [pc, #80]	; (4052c4 <__register_exitproc+0xa0>)
  405272:	b303      	cbz	r3, 4052b6 <__register_exitproc+0x92>
  405274:	f44f 70c8 	mov.w	r0, #400	; 0x190
  405278:	f3af 8000 	nop.w
  40527c:	4604      	mov	r4, r0
  40527e:	b1d0      	cbz	r0, 4052b6 <__register_exitproc+0x92>
  405280:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
  405284:	2700      	movs	r7, #0
  405286:	e880 0088 	stmia.w	r0, {r3, r7}
  40528a:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  40528e:	4638      	mov	r0, r7
  405290:	2301      	movs	r3, #1
  405292:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  405296:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
  40529a:	2e00      	cmp	r6, #0
  40529c:	d0e1      	beq.n	405262 <__register_exitproc+0x3e>
  40529e:	e7d1      	b.n	405244 <__register_exitproc+0x20>
  4052a0:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
  4052a4:	430a      	orrs	r2, r1
  4052a6:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  4052aa:	e7da      	b.n	405262 <__register_exitproc+0x3e>
  4052ac:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
  4052b0:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  4052b4:	e7c1      	b.n	40523a <__register_exitproc+0x16>
  4052b6:	f04f 30ff 	mov.w	r0, #4294967295
  4052ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4052be:	bf00      	nop
  4052c0:	00406610 	.word	0x00406610
  4052c4:	00000000 	.word	0x00000000

004052c8 <oCRAExtended_22ptBitmaps>:
  4052c8:	ffff3030 30303030 3030ffff ffff0c0c     00..0000..00....
  4052d8:	0c0c0c0c 0c0cffff 00000000 00000000     ................
	...
  4052fc:	f0f0f0f0 00000000 00000000 00000000     ................
	...
  405314:	e0800000 030f3c70 70e08000 01030f3c     ....p<.....p<...
  405324:	00000000 00010706 00000000 00000000     ................
  405334:	0303fffe 03030303 feff0303 0000ffff     ................
  405344:	00000000 ffff0000 06060703 06060606     ................
  405354:	03070606 03030303 00ffff03 00000000     ................
  405364:	00000000 00ffff00 f8f80000 06060606     ................
  405374:	06070706 07070606 03030303 03030303     ................
  405384:	feff0303 0303fffe 03030303 01030303     ................
  405394:	06060707 06060606 06060606 03030303     ................
  4053a4:	03030303 feff0303 03030000 03030303     ................
  4053b4:	fcff0303 06060606 06060606 03070606     ................
  4053c4:	00ffff00 00000000 00fcfc00 0c0f0f00     ................
  4053d4:	0c0c0c0c 0cffff0c 00000000 00000000     ................
  4053e4:	00070700 ffff0000 03030303 03030303     ................
  4053f4:	03030000 03030303 feff0303 06070303     ................
  405404:	06060606 03070606 0003ffff 00000000     ................
  405414:	00000000 0c0cffff 0c0c0c0c fcfc0c0c     ................
  405424:	06060707 06060606 07070606 03030707     ................
  405434:	03030303 ffff0303 00000000 0efcf800     ................
  405444:	00010306 00000000 00070700 00000000     ................
  405454:	ffff0000 03030303 0000ffff 0303fffe     ................
  405464:	03030303 feff0303 06060703 06060606     ................
  405474:	03070606 8383ffff 83838383 ffff8383     ................
  405484:	01010101 01010101 ffff0101 00000000     ................
  405494:	00000000 07070600 00000000 78787878     ............xxxx
	...
  4054ac:	78787878 00000000 00000000 00000000     xxxx............
  4054bc:	00000000 6060c080 8c0c1830 387cc6c7     ......``0.....|8
  4054cc:	7c780001 01030606 00000001 06060000     ..x|............
	...
  4054e4:	c0000000 f87f7ff8 000000c0 3ffce000     ...............?
  4054f4:	33303033 00e0fc3f 00000707 00000000     3003?...........
  405504:	07070000 0303ffff 03030303 f8fe8603     ................
  405514:	0303ffff 03030303 fcff0703 06060707     ................
  405524:	06060606 00030306 1e78e080 03030307     ..........x.....
  405534:	03030303 c0f03f0f 00000000 00000000     .....?..........
  405544:	03000000 06060607 06060606 ffff0303     ................
  405554:	07030303 80e0781e ffff0000 00000000     .....x..........
  405564:	0f3ff0c0 07070606 07060606 00000003     ..?.............
  405574:	0303ffff 03030303 03030303 0303ffff     ................
  405584:	00030303 00000000 06060707 06060606     ................
  405594:	06060606 c3c3ffff c3c3c3c3 0303c3c3     ................
  4055a4:	0000ffff 00000000 00000000 00000707     ................
	...
  4055bc:	1c38e0c0 0303070e 03030303 0000ffff     ..8.............
  4055cc:	0c0c0000 fcfc0c0c 06060301 06060606     ................
  4055dc:	01030606 0000ffff 00000000 ffff0000     ................
  4055ec:	0303ffff 03030303 ffff0303 00000707     ................
  4055fc:	00000000 07070000 03030303 03ffff03     ................
  40560c:	03030303 00000000 00ffff00 00000000     ................
  40561c:	06060606 06070706 06060606 00000000     ................
  40562c:	00000000 00ffff00 00fcfc00 00000000     ................
  40563c:	00ffff00 06030100 06060606 00010306     ................
  40564c:	8000ffff 183060c0 0103060c 0d0fffff     .....`0.........
  40565c:	c0603018 00000080 00000707 00000000     .0`.............
  40566c:	04060301 0000ffff 00000000 00000000     ................
  40567c:	0000ffff 00000000 00000000 06060707     ................
  40568c:	06060606 06060606 1c0fffff 78e0e078     ............x..x
  40569c:	ffff0e1c 0000ffff 00010100 ffff0000     ................
  4056ac:	00000707 00000000 07070000 7c1effff     ...............|
  4056bc:	0000c0f0 ffff0000 0000ffff 7c1f0701     ...............|
  4056cc:	ffffc0f0 00000707 00000000 07070301     ................
  4056dc:	3ef8e080 0f03030f 80e0f83e e0f83f0f     ...>....>....?..
  4056ec:	80000080 0f3ff8e0 03000000 07060607     ......?.........
  4056fc:	00000003 0303ffff 03030303 fcfe0303     ................
  40570c:	0c0cffff 0c0c0c0c 03070c0c 00000707     ................
	...
  405724:	8383ffff 83838383 7cfe8383 0101ffff     ...........|....
  405734:	3d0f0301 0080e171 00000707 00000000     ...=q...........
  405744:	06070100 e3731f0e 030383c3 0e0f0303     ......s.........
  405754:	00008080 1c0e0301 80c07038 06060703     ........8p......
  405764:	06060606 03070606 03030f0f 03ffff03     ................
  405774:	0f0f0303 00000000 00ffff00 00000000     ................
  405784:	00000000 00070700 00000000 0080ff7f     ................
  405794:	00000000 7fff8000 3e0f0100 f8c0c0f8     ...........>....
  4057a4:	00010f3e 00000000 01070701 00000000     >...............
  4057b4:	e0703f1f c08080c0 1f3f70e0 00000000     .?p......p?.....
  4057c4:	01ffff01 00000000 00000000 00070700     ................
  4057d4:	00000000 c080ffff 60606060 0080c060     ........`````...
  4057e4:	0081ffff 00000000 ffff0000 03030707     ................
  4057f4:	06060606 00010306 fefe6060 60606060     ........``..````
  405804:	00606060 ffff0000 00000000 80800000     ```.............
  405814:	03010000 06060606 01030706              ............

00405820 <oCRAExtended_22ptDescriptors>:
  405820:	0000030c 00000000 00000000 00000000     ................
	...
  40584c:	0024030c 0048030c 006c030c 0090030c     ..$...H...l.....
  40585c:	00b4030c 00d8030c 00fc030c 0120030c     .............. .
  40586c:	0144030c 0168030c 018c030c 01b0030c     ..D...h.........
  40587c:	01d4030c 00000000 00000000 00000000     ................
  40588c:	00000000 01f8030c 00000000 021c030c     ................
  40589c:	0240030c 0264030c 0288030c 02ac030c     ..@...d.........
  4058ac:	02d0030c 02f4030c 0318030c 033c030c     ..............<.
  4058bc:	0360030c 0384030c 03a8030c 03cc030c     ..`.............
  4058cc:	03f0030c 0414030c 0438030c 00000000     ..........8.....
  4058dc:	045c030c 0480030c 04a4030c 00000000     ..\.............
  4058ec:	04c8030c 00000000 00000000 04ec030c     ................
	...
  40591c:	0510030c 00000000 00000000 00000000     ................
	...
  405964:	0534030c                                ..4.

00405968 <oCRAExtended_18ptBitmaps>:
  405968:	ffff1818 ff181818 031818ff 031f1f03     ................
  405978:	1f1f0303 00000303 c0000000 0f1c78e0     .............x..
  405988:	3870c003 0003071e 00000000 0303fffe     ..p8............
  405998:	03030303 7ffeff03 c0c0c0ff c0c0c0c0     ................
  4059a8:	03007fff ff030303 000000ff c0c00000     ................
  4059b8:	ffffc0c0 fefec0c0 83838303 83838383     ................
  4059c8:	fffeff83 c1c1c1ff c1c1c1c1 0303c0c1     ................
  4059d8:	83838383 7eff8383 c1c0c000 c1c1c1c1     .......~........
  4059e8:	007effc1 00ffff00 fc000000 000000fc     ..~.............
  4059f8:	06060707 ffff0606 00000006 8383ffff     ................
  405a08:	83838383 e1606003 c1c1c1c1 7fffc1c1     .....``.........
  405a18:	0003ffff 00000000 ff000000 c6c6c6ff     ................
  405a28:	c6c6c6c6 0700fefe 03030307 ff830303     ................
  405a38:	0000007f fefe0000 00000103 ffff8000     ................
  405a48:	ff838383 7f0080ff c1c1c1ff c1c1c1c1     ................
  405a58:	7f7f7fff 63636363 ff636363 000000ff     ....ccccccc.....
  405a68:	00000000 ffffc000 00000000 00707070     ............ppp.
  405a78:	00000000 1c000000 00001c1c 00000000     ................
  405a88:	1ffce000 0000e0fc 3ff8e000 0c0c0c0f     ...........?....
  405a98:	e0f83f0f 8383ffff c7838383 ff007cfe     .?...........|..
  405aa8:	c1c1c1ff 7fe3c1c1 f0c0003e 03030e3c     ........>...<...
  405ab8:	03030303 3c0f0300 c0c0c070 00c0c0c0     .......<p.......
  405ac8:	ffff0303 3c0e0303 c000c0f0 c0ffffc0     .......<........
  405ad8:	0f3c70c0 ffff0003 83838383 03030303     .p<.............
  405ae8:	c1ffff00 c0c1c1c1 00c0c0c0 6363ffff     ..............cc
  405af8:	63636363 ff000303 000000ff 00000000     cccc............
  405b08:	f0e00000 03060c18 03030303 c0ff7f03     ................
  405b18:	c6c6c0c0 7efec6c6 8080ffff 80808080     .......~........
  405b28:	ffffff80 010101ff 01010101 0303ffff     ................
  405b38:	ffff0303 03030303 c0c0c000 c0ffffc0     ................
  405b48:	00c0c0c0 00000000 ff000000 000000ff     ................
  405b58:	c0c0fe7e 7fffc0c0 ffff0000 183060c0     ~............`0.
  405b68:	0103060c 01ffff00 380c0603 0080c060     ...........8`...
  405b78:	0000ffff 00000000 ff000000 c0c0c0ff     ................
  405b88:	c0c0c0c0 ffffc0c0 70701c0e ffff0e1c     ..........pp....
  405b98:	00ffff00 00000000 00ffff00 3c0fffff     ...............<
  405ba8:	0080c0f0 ffffff00 000000ff 781e0701     ...............x
  405bb8:	f0c0ffff 03071e3c f03c1e07 3c0f03c0     ....<.....<....<
  405bc8:	e0c0e078 030f3c78 0303ffff 03030303     x...x<..........
  405bd8:	fffeff03 030303ff 03030303 ffff0101     ................
  405be8:	e3636363 7f6363e3 00ffff3e 07010000     ccc..cc.>.......
  405bf8:	c0f0380e 63331f0e 030383c3 700e0f03     .8....3c.......p
  405c08:	c0c0c0f0 ccc6c3c1 0f0070f8 ff03030f     .........p......
  405c18:	0f0303ff 0000000f ffff0000 00000000     ................
  405c28:	3060ffff 30303030 ffc0e070 c0c060ff     ..`00000p....`..
  405c38:	e0c0c0c0 30303f7f 3030fefe 00303030     .....?00..00000.
  405c48:	7f000000 c0c0c0ff 0070f0c0              ..........p.

00405c54 <oCRAExtended_28ptBitmaps>:
  405c54:	e0e0e000 e0ffffff ffffffe0 00e0e0e0     ................
  405c64:	70707000 70ffffff ffffff70 00707070     .ppp...pp...ppp.
  405c74:	00000000 000f0f0f 0f0f0f00 00000000     ................
	...
  405c98:	80808000 00008080 00000000 00000000     ................
  405ca8:	0f0f0f00 00000f0f 00000000 00000000     ................
  405cb8:	00000000 fcf0c000 00071f7f 00000000     ................
  405cc8:	fcf0c080 01030f3f 00000000 fef8e000     ....?...........
  405cd8:	00030f3f 00000000 00000000 fffffe00     ?...............
  405ce8:	07070707 07070707 00feffff ffffff00     ................
	...
  405d00:	00ffffff ffff7f00 e0e0e0e0 e0e0e0e0     ................
  405d10:	007fffff 07070700 ff070707 0000ffff     ................
	...
  405d28:	ff000000 0000ffff e0e0e000 e0e0e000     ................
  405d38:	ffe0e0e0 e0e0ffff ffffffe0 07070700     ................
  405d48:	07070707 07070707 00feffff fcfcf800     ................
  405d58:	1c1c1c1c 1c1c1c1c 000f1f1f ffffff00     ................
  405d68:	e0e0e0e0 e0e0e0e0 00e0e0e0 07070700     ................
  405d78:	07070707 07070707 feffff07 00000000     ................
  405d88:	1c1c1c1c 1c1c1c1c e7ffff1c e0e0e000     ................
  405d98:	e0e0e0e0 e0e0e0e0 7fffffe0 ffff0000     ................
  405da8:	000000ff f8000000 0000f8f8 ffff0000     ................
  405db8:	e0e0e0ff ffe0e0e0 e0e0ffff 00000000     ................
  405dc8:	00000000 ff000000 0000ffff 00000000     ................
  405dd8:	07ffffff 07070707 00070707 00000000     ................
  405de8:	1c1f1f1f 1c1c1c1c 00f8fcfc 70707000     .............ppp
  405df8:	e0e0e0e0 e0e0e0e0 007fffff ffffff00     ................
  405e08:	00000707 00000000 00000000 ffffff00     ................
  405e18:	e0e0e0e0 e0e0e0e0 00e0e0e0 ffffff00     ................
  405e28:	e0e0e0e0 e0e0e0e0 00ffffff 0f0f0f00     ................
  405e38:	07070707 07070707 ffffff07 00000000     ................
  405e48:	c0000000 3c78f0e0 07070f1e 00000000     ......x<........
  405e58:	ff000000 0000ffff 00000000 00000000     ................
  405e68:	07ffffff ffffff07 00000000 fcfcf800     ................
  405e78:	1c1f1f1f 1f1f1f1c 00f8fcfc ffff7f00     ................
  405e88:	e0e0e0e0 e0e0e0e0 007fffff ffffff00     ................
  405e98:	07070707 07070707 00ffffff 07070700     ................
  405ea8:	07070707 07070707 00ffffff 00000000     ................
  405eb8:	00000000 e0c00000 00ffffff 00000000     ................
  405ec8:	f0f0f000 0000f0f0 00000000 00000000     ................
  405ed8:	c1c1c100 0000c1c1 00000000 00000000     ................
  405ee8:	07070700 00000707 00000000 c0800000     ................
  405ef8:	3870e0e0 8f0f1e3c 00f8f8fe 03070700     ..p8<...........
  405f08:	78f0e0c1 070f1e3c 00000103 00000000     ...x<...........
  405f18:	00e7e7e7 00000000 00000000 00000000     ................
  405f28:	fffee000 00e0feff 00000000 f0000000     ................
  405f38:	011ffffe feff1f01 000000e0 fffff000     ................
  405f48:	0707071f 1f070707 00f0ffff ffffff00     ................
  405f58:	07070707 07070707 f8fcfe0f ffffff00     ................
  405f68:	1c1c1c1c 1c1c1c1c c1f7ff3e ffffff00     ........>.......
  405f78:	e0e0e0e0 e0e0e0e0 0f3f7f70 e0800000     ........p.?.....
  405f88:	0f3efcf8 07070707 07070707 ffff7e00     ..>..........~..
  405f98:	000000c3 00000000 00000000 07010000     ................
  405fa8:	f07c3f1f e0e0e0e0 e0e0e0e0 07070700     .?|.............
  405fb8:	07ffffff fe3e0f07 0080e0f8 00000000     ......>.........
  405fc8:	00ffffff 00000000 7effffc3 e0e0e000     ...........~....
  405fd8:	e0ffffff 3f7cf0e0 0001071f ffffff00     ......|?........
  405fe8:	07070707 07070707 07070707 ffffff00     ................
  405ff8:	1c1c1c1c 00001c1c 00000000 ffffff00     ................
  406008:	e0e0e0e0 e0e0e0e0 e0e0e0e0 ffffff00     ................
  406018:	07070707 07070707 07070707 ffffff00     ................
  406028:	07070707 07070707 00000007 ffffff00     ................
	...
  406044:	e0800000 1f3e78f0 07070707 00070707     .....x>.........
  406054:	ffffff00 00000001 e0e0e0e0 00e0e0e0     ................
  406064:	ff7f3f00 e0e0e0e0 e0e0e0e0 003f7fff     .?............?.
  406074:	fefffe00 00000000 00000000 00fefffe     ................
  406084:	ffffff00 1c1c1c1c 1c1c1c1c 00ffffff     ................
  406094:	7fff7f00 00000000 00000000 007fff7f     ................
  4060a4:	07070702 ffff0707 070707ff 00020707     ................
  4060b4:	00000000 ffff0000 000000ff 00000000     ................
  4060c4:	e0e0e040 ffffe0e0 e0e0e0ff 0040e0e0     @.............@.
	...
  4060dc:	ff000000 0000ffff e0e00000 000000e0     ................
  4060ec:	ff000000 0000ffff 7f1f0000 e0e0e0ff     ................
  4060fc:	ffe0e0e0 00003f7f ffffff00 c0808000     .....?..........
  40610c:	3c78f0e0 03070f1e ffffff00 c1e3f77f     ..x<............
  40611c:	00000080 00000000 ffffff00 03010000     ................
  40612c:	3c1e0f07 c0e0f078 ffffff00 00000000     ...<x...........
	...
  406144:	ffffff00 00000000 00000000 00000000     ................
  406154:	ffffff00 e0e0e0e0 e0e0e0e0 00e0e0e0     ................
  406164:	ffffff00 e0fc7f1f ff1f7ffc 0000ffff     ................
  406174:	ffffff00 07070000 ff000007 0000ffff     ................
  406184:	ffffff00 00000000 ff000000 0000ffff     ................
  406194:	ffffff00 c0f8fe3f 00000000 00ffffff     ....?...........
  4061a4:	ffffff00 7f0f0100 0080f0fe 00ffffff     ................
  4061b4:	ffffff00 00000000 fc7f1f03 00ffffff     ................
  4061c4:	e0800000 071f7ef8 f8fe1f07 000080e0     .....~..........
  4061d4:	ffff7e00 000000c3 c3000000 007effff     .~............~.
  4061e4:	07010000 e0f87f1f 1f7ff8e0 00000107     ................
  4061f4:	ffffff00 07070707 07070707 00fcfeff     ................
  406204:	ffffff00 70707070 70707070 001f3f7f     ....pppppppp.?..
  406214:	ffffff00 00000000 00000000 00000000     ................
  406224:	ffffff00 07070707 07070707 00fcfeff     ................
  406234:	ffffff00 3f1f0707 07c7f7ff 00010307     .......?........
  406244:	ffffff00 00000000 3f0f0300 00e0f87e     ...........?~...
  406254:	ff7e1c00 0787c7e7 07070707 003c3e3f     ..~.........?><.
  406264:	00000000 3e0f0703 c0e0f07c 00000000     .......>|.......
  406274:	fc7c3c00 e0e0e0e0 e7e3e1e0 0038feff     .<|...........8.
  406284:	3f3f3f00 ff070707 0707ffff 3f3f3f07     .???.........???
  406294:	00000000 ff000000 0000ffff 00000000     ................
  4062a4:	00000000 ff000000 0000ffff 00000000     ................
  4062b4:	fefffe00 00000000 00000000 00fefffe     ................
  4062c4:	3f0f0100 00c0f8ff fff8c000 00010f3f     ...?........?...
  4062d4:	00000000 fe7f0f01 010f7ffe 00000000     ................
  4062e4:	7f3f1f00 0080e0f0 e0800000 1f3f7ff0     ..?...........?.
  4062f4:	00000000 ff070301 0307fffe 00000001     ................
  406304:	00000000 ff000000 0000ffff 00000000     ................
  406314:	ffffff00 80800000 80808080 00000000     ................
  406324:	ffffff00 0303070e 07030303 00fcfeff     ................
  406334:	ffffff00 e0e07038 f0e0e0e0 001f3f7f     ....8p.......?..
  406344:	80808000 80fcfcfc 80808080 00008080     ................
  406354:	03030300 03ffffff 03030303 00000303     ................
  406364:	00000000 e0ff7f3f e0e0e0e0 1c7cfcf0     ....?.........|.

00406374 <oCRAExtended_28ptDescriptors>:
  406374:	00000310 00000000 00000000 00000000     ................
	...
  4063a0:	00300310 00600310 00900310 00c00310     ..0...`.........
  4063b0:	00f00310 01200310 01500310 01800310     ...... ...P.....
  4063c0:	01b00310 01e00310 02100310 02400310     ..............@.
  4063d0:	02700310 00000000 00000000 00000000     ..p.............
  4063e0:	00000000 02a00310 00000000 02d00310     ................
  4063f0:	03000310 03300310 03600310 03900310     ......0...`.....
  406400:	03c00310 03f00310 04200310 04500310     .......... ...P.
  406410:	04800310 04b00310 04e00310 05100310     ................
  406420:	05400310 05700310 05a00310 00000000     ..@...p.........
  406430:	05d00310 06000310 06300310 00000000     ..........0.....
  406440:	06600310 00000000 00000000 06900310     ..`.............
	...
  406470:	06c00310 00000000 00000000 00000000     ................
	...
  4064b8:	06f00310                                ....

004064bc <oCRAExtended_18ptDescriptors>:
  4064bc:	0000020b 00000000 00000000 00000000     ................
	...
  4064ec:	0016020b 002c020b 0042020b 0058020b     ......,...B...X.
  4064fc:	006e020b 0084020b 009a020b 00b0020b     ..n.............
  40650c:	00c6020b 00dc020b 00f2020b 0108020b     ................
	...
  406534:	011e020b 0134020b 014a020b 0160020b     ......4...J...`.
  406544:	0176020b 018c020b 01a2020b 01b8020b     ..v.............
  406554:	01ce020b 01e4020b 01fa020b 0210020b     ................
  406564:	0226020b 023c020b 0252020b 0268020b     ..&...<...R...h.
  406574:	00000000 027e020b 0294020b 02aa020b     ......~.........
	...
  4065b8:	02c0020b 00000000 00000000 00000000     ................
	...
  406600:	02d6020b 0000080f 00ffff06 00000043     ............C...

00406610 <_global_impure_ptr>:
  406610:	200001d0                                ... 

00406614 <_init>:
  406614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  406616:	bf00      	nop
  406618:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40661a:	bc08      	pop	{r3}
  40661c:	469e      	mov	lr, r3
  40661e:	4770      	bx	lr

00406620 <__init_array_start>:
  406620:	004051dd 	.word	0x004051dd

00406624 <__frame_dummy_init_array_entry>:
  406624:	004000e5                                ..@.

00406628 <_fini>:
  406628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40662a:	bf00      	nop
  40662c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40662e:	bc08      	pop	{r3}
  406630:	469e      	mov	lr, r3
  406632:	4770      	bx	lr

00406634 <__fini_array_start>:
  406634:	004000c1 	.word	0x004000c1

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	d1fb      	bne.n	20000000 <portable_delay_cycles>
20000008:	4770      	bx	lr
2000000a:	bf00      	nop

2000000c <curr_display>:
2000000c:	0007 0000                                   ....

20000010 <notes_lookup>:
20000010:	0000 3f80 a993 3f8a 5326 3f95 fcb9 3f9f     ...?...?&S.?...?
20000020:	a64c 3faa 4fdf 3fb5 f972 3fbf a305 3fca     L..?.O.?r..?...?
20000030:	4c98 3fd5 f62b 3fdf 9fbe 3fea 4952 3ff5     .L.?+..?...?RI.?
20000040:	0000 4000 54ca 4005 a993 400a fe5d 400f     ...@.T.@...@]..@
20000050:	5326 4015 a7f0 401a fcb9 401f 5183 4025     &S.@...@...@.Q%@
20000060:	a64c 402a fb16 402f 4fdf 4035 a4a9 403a     L.*@../@.O5@..:@
20000070:	0000 4040 54ca 4045 a993 404a fe5d 404f     ..@@.TE@..J@].O@
20000080:	5326 4055 a7f0 405a fcb9 405f 5183 4065     &SU@..Z@.._@.Qe@
20000090:	a64c 406a fb16 406f 4fdf 4075 a4a9 407a     L.j@..o@.Ou@..z@
200000a0:	0000 4080 aa65 4082 54ca 4085 ff2e 4087     ...@e..@.T.@...@
200000b0:	a993 408a 53f8 408d fe5d 408f a8c1 4092     ...@.S.@]..@...@
200000c0:	5326 4095 fd8b 4097 a7f0 409a 5254 409d     &S.@...@...@TR.@
200000d0:	0000 40a0 aa65 40a2 54ca 40a5 ff2e 40a7     ...@e..@.T.@...@
200000e0:	a993 40aa 53f8 40ad fe5d 40af a8c1 40b2     ...@.S.@]..@...@
200000f0:	5326 40b5 fd8b 40b7 a7f0 40ba 5254 40bd     &S.@...@...@TR.@
20000100:	0000 40c0 aa65 40c2 54ca 40c5 ff2e 40c7     ...@e..@.T.@...@
20000110:	a993 40ca 53f8 40cd fe5d 40cf a8c1 40d2     ...@.S.@]..@...@
20000120:	5326 40d5 fd8b 40d7 a7f0 40da 5254 40dd     &S.@...@...@TR.@
20000130:	0000 40e0 aa65 40e2 54ca 40e5 ff2e 40e7     ...@e..@.T.@...@
20000140:	a993 40ea 53f8 40ed fe5d 40ef a8c1 40f2     ...@.S.@]..@...@
20000150:	5326 40f5 fd8b 40f7 a7f0 40fa 5254 40fd     &S.@...@...@TR.@
20000160:	0000 4100 5532 4101 aa65 4102 ff97 4103     ...A2U.Ae..A...A
20000170:	54ca 4105 a9fc 4106 ff2e 4107 5461 4109     .T.A...A...AaT.A
20000180:	a993 410a fec5 410b 53f8 410d a92a 410e     ...A...A.S.A*..A
20000190:	0000 4110 5532 4111 aa65 4112 ff97 4113     ...A2U.Ae..A...A
200001a0:	54ca 4115 a9fc 4116 ff2e 4117 5461 4119     .T.A...A...AaT.A
200001b0:	a993 411a fec5 411b 53f8 411d a92a 411e     ...A...A.S.A*..A
200001c0:	0000 4120                                   .. A

200001c4 <g_interrupt_enabled>:
200001c4:	0001 0000                                   ....

200001c8 <SystemCoreClock>:
200001c8:	0900 003d 0000 0000                         ..=.....

200001d0 <impure_data>:
200001d0:	0000 0000 04bc 2000 0524 2000 058c 2000     ....... $.. ... 
	...
20000204:	660c 0040 0000 0000 0000 0000 0000 0000     .f@.............
	...
20000278:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
20000288:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...
