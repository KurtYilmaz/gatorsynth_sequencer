
gatorsynth_sequencer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000063c  00400000  00400000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000438  20000000  0040063c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  2 .bss          0000001c  20000438  00400a74  00020438  2**2
                  ALLOC
  3 .stack        00003004  20000454  00400a90  00020438  2**0
                  ALLOC
  4 .ARM.attributes 0000002a  00000000  00000000  00020438  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020462  2**0
                  CONTENTS, READONLY
  6 .debug_info   000026bf  00000000  00000000  000204bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009c6  00000000  00000000  00022b7a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 000002d0  00000000  00000000  00023540  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000250  00000000  00000000  00023810  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_macro  0000cf59  00000000  00000000  00023a60  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00004ace  00000000  00000000  000309b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0003caf0  00000000  00000000  00035487  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00000628  00000000  00000000  00071f78  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000d06  00000000  00000000  000725a0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <_sfixed>:
  400000:	20003458 	.word	0x20003458
  400004:	0040026d 	.word	0x0040026d
  400008:	00400269 	.word	0x00400269
  40000c:	00400269 	.word	0x00400269
  400010:	00400269 	.word	0x00400269
  400014:	00400269 	.word	0x00400269
  400018:	00400269 	.word	0x00400269
	...
  40002c:	00400269 	.word	0x00400269
  400030:	00400269 	.word	0x00400269
  400034:	00000000 	.word	0x00000000
  400038:	00400269 	.word	0x00400269
  40003c:	00400269 	.word	0x00400269
  400040:	00400269 	.word	0x00400269
  400044:	00400269 	.word	0x00400269
  400048:	00400269 	.word	0x00400269
  40004c:	00400269 	.word	0x00400269
  400050:	00400269 	.word	0x00400269
  400054:	00400269 	.word	0x00400269
  400058:	00400269 	.word	0x00400269
  40005c:	00000000 	.word	0x00000000
  400060:	00400269 	.word	0x00400269
  400064:	00400269 	.word	0x00400269
  400068:	00400269 	.word	0x00400269
  40006c:	00400269 	.word	0x00400269
  400070:	00400269 	.word	0x00400269
  400074:	00400269 	.word	0x00400269
  400078:	00400269 	.word	0x00400269
  40007c:	00400269 	.word	0x00400269
  400080:	00400269 	.word	0x00400269
  400084:	00400269 	.word	0x00400269
  400088:	00000000 	.word	0x00000000
  40008c:	00400269 	.word	0x00400269
  400090:	00400269 	.word	0x00400269
  400094:	00400269 	.word	0x00400269
  400098:	00400269 	.word	0x00400269
  40009c:	00400269 	.word	0x00400269
  4000a0:	00400269 	.word	0x00400269
  4000a4:	00400269 	.word	0x00400269
  4000a8:	00400269 	.word	0x00400269
  4000ac:	00400269 	.word	0x00400269
  4000b0:	00400269 	.word	0x00400269
  4000b4:	00400269 	.word	0x00400269
  4000b8:	00400269 	.word	0x00400269
  4000bc:	00400269 	.word	0x00400269

004000c0 <__do_global_dtors_aux>:
  4000c0:	b510      	push	{r4, lr}
  4000c2:	4c05      	ldr	r4, [pc, #20]	; (4000d8 <__do_global_dtors_aux+0x18>)
  4000c4:	7823      	ldrb	r3, [r4, #0]
  4000c6:	b933      	cbnz	r3, 4000d6 <__do_global_dtors_aux+0x16>
  4000c8:	4b04      	ldr	r3, [pc, #16]	; (4000dc <__do_global_dtors_aux+0x1c>)
  4000ca:	b113      	cbz	r3, 4000d2 <__do_global_dtors_aux+0x12>
  4000cc:	4804      	ldr	r0, [pc, #16]	; (4000e0 <__do_global_dtors_aux+0x20>)
  4000ce:	f3af 8000 	nop.w
  4000d2:	2301      	movs	r3, #1
  4000d4:	7023      	strb	r3, [r4, #0]
  4000d6:	bd10      	pop	{r4, pc}
  4000d8:	20000438 	.word	0x20000438
  4000dc:	00000000 	.word	0x00000000
  4000e0:	0040063c 	.word	0x0040063c

004000e4 <frame_dummy>:
  4000e4:	4b08      	ldr	r3, [pc, #32]	; (400108 <frame_dummy+0x24>)
  4000e6:	b510      	push	{r4, lr}
  4000e8:	b11b      	cbz	r3, 4000f2 <frame_dummy+0xe>
  4000ea:	4908      	ldr	r1, [pc, #32]	; (40010c <frame_dummy+0x28>)
  4000ec:	4808      	ldr	r0, [pc, #32]	; (400110 <frame_dummy+0x2c>)
  4000ee:	f3af 8000 	nop.w
  4000f2:	4808      	ldr	r0, [pc, #32]	; (400114 <frame_dummy+0x30>)
  4000f4:	6803      	ldr	r3, [r0, #0]
  4000f6:	b903      	cbnz	r3, 4000fa <frame_dummy+0x16>
  4000f8:	bd10      	pop	{r4, pc}
  4000fa:	4b07      	ldr	r3, [pc, #28]	; (400118 <frame_dummy+0x34>)
  4000fc:	2b00      	cmp	r3, #0
  4000fe:	d0fb      	beq.n	4000f8 <frame_dummy+0x14>
  400100:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400104:	4718      	bx	r3
  400106:	bf00      	nop
  400108:	00000000 	.word	0x00000000
  40010c:	2000043c 	.word	0x2000043c
  400110:	0040063c 	.word	0x0040063c
  400114:	0040063c 	.word	0x0040063c
  400118:	00000000 	.word	0x00000000

0040011c <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
  40011c:	4770      	bx	lr
  40011e:	bf00      	nop

00400120 <sysclk_init>:

	SystemCoreClockUpdate();
}

void sysclk_init(void)
{
  400120:	b510      	push	{r4, lr}
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  400122:	480e      	ldr	r0, [pc, #56]	; (40015c <sysclk_init+0x3c>)
  400124:	4b0e      	ldr	r3, [pc, #56]	; (400160 <sysclk_init+0x40>)
  400126:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
		break;

	case OSC_MAINCK_8M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
  400128:	2010      	movs	r0, #16
  40012a:	4b0e      	ldr	r3, [pc, #56]	; (400164 <sysclk_init+0x44>)
  40012c:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  40012e:	4c0e      	ldr	r4, [pc, #56]	; (400168 <sysclk_init+0x48>)
  400130:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  400132:	2800      	cmp	r0, #0
  400134:	d0fc      	beq.n	400130 <sysclk_init+0x10>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  400136:	4b0d      	ldr	r3, [pc, #52]	; (40016c <sysclk_init+0x4c>)
  400138:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  40013a:	4a0d      	ldr	r2, [pc, #52]	; (400170 <sysclk_init+0x50>)
  40013c:	4b0d      	ldr	r3, [pc, #52]	; (400174 <sysclk_init+0x54>)
  40013e:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
  400140:	4c0d      	ldr	r4, [pc, #52]	; (400178 <sysclk_init+0x58>)
  400142:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  400144:	2800      	cmp	r0, #0
  400146:	d0fc      	beq.n	400142 <sysclk_init+0x22>

		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  400148:	2010      	movs	r0, #16
  40014a:	4b0c      	ldr	r3, [pc, #48]	; (40017c <sysclk_init+0x5c>)
  40014c:	4798      	blx	r3
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  40014e:	4b0c      	ldr	r3, [pc, #48]	; (400180 <sysclk_init+0x60>)
  400150:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  400152:	4802      	ldr	r0, [pc, #8]	; (40015c <sysclk_init+0x3c>)
  400154:	4b02      	ldr	r3, [pc, #8]	; (400160 <sysclk_init+0x40>)
  400156:	4798      	blx	r3
  400158:	bd10      	pop	{r4, pc}
  40015a:	bf00      	nop
  40015c:	05f5e100 	.word	0x05f5e100
  400160:	0040040d 	.word	0x0040040d
  400164:	004001ed 	.word	0x004001ed
  400168:	00400239 	.word	0x00400239
  40016c:	00400249 	.word	0x00400249
  400170:	20183f01 	.word	0x20183f01
  400174:	400e0400 	.word	0x400e0400
  400178:	00400259 	.word	0x00400259
  40017c:	00400185 	.word	0x00400185
  400180:	00400305 	.word	0x00400305

00400184 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  400184:	4a18      	ldr	r2, [pc, #96]	; (4001e8 <pmc_switch_mck_to_pllack+0x64>)
  400186:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400188:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  40018c:	4318      	orrs	r0, r3
  40018e:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400190:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400192:	f013 0f08 	tst.w	r3, #8
  400196:	d003      	beq.n	4001a0 <pmc_switch_mck_to_pllack+0x1c>
  400198:	e009      	b.n	4001ae <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  40019a:	3b01      	subs	r3, #1
  40019c:	d103      	bne.n	4001a6 <pmc_switch_mck_to_pllack+0x22>
  40019e:	e01e      	b.n	4001de <pmc_switch_mck_to_pllack+0x5a>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4001a0:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4001a4:	4910      	ldr	r1, [pc, #64]	; (4001e8 <pmc_switch_mck_to_pllack+0x64>)
  4001a6:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4001a8:	f012 0f08 	tst.w	r2, #8
  4001ac:	d0f5      	beq.n	40019a <pmc_switch_mck_to_pllack+0x16>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  4001ae:	4a0e      	ldr	r2, [pc, #56]	; (4001e8 <pmc_switch_mck_to_pllack+0x64>)
  4001b0:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4001b2:	f023 0303 	bic.w	r3, r3, #3
  4001b6:	f043 0302 	orr.w	r3, r3, #2
  4001ba:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4001bc:	6e90      	ldr	r0, [r2, #104]	; 0x68
  4001be:	f010 0008 	ands.w	r0, r0, #8
  4001c2:	d004      	beq.n	4001ce <pmc_switch_mck_to_pllack+0x4a>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
  4001c4:	2000      	movs	r0, #0
  4001c6:	4770      	bx	lr
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
  4001c8:	3b01      	subs	r3, #1
  4001ca:	d103      	bne.n	4001d4 <pmc_switch_mck_to_pllack+0x50>
  4001cc:	e009      	b.n	4001e2 <pmc_switch_mck_to_pllack+0x5e>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4001ce:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4001d2:	4905      	ldr	r1, [pc, #20]	; (4001e8 <pmc_switch_mck_to_pllack+0x64>)
  4001d4:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4001d6:	f012 0f08 	tst.w	r2, #8
  4001da:	d0f5      	beq.n	4001c8 <pmc_switch_mck_to_pllack+0x44>
  4001dc:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  4001de:	2001      	movs	r0, #1
  4001e0:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  4001e2:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  4001e4:	4770      	bx	lr
  4001e6:	bf00      	nop
  4001e8:	400e0400 	.word	0x400e0400

004001ec <pmc_switch_mainck_to_fastrc>:
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
  4001ec:	4b11      	ldr	r3, [pc, #68]	; (400234 <pmc_switch_mainck_to_fastrc+0x48>)
  4001ee:	6a1a      	ldr	r2, [r3, #32]
  4001f0:	f442 125c 	orr.w	r2, r2, #3604480	; 0x370000
  4001f4:	f042 0208 	orr.w	r2, r2, #8
  4001f8:	621a      	str	r2, [r3, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  4001fa:	461a      	mov	r2, r3
  4001fc:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4001fe:	f413 3f00 	tst.w	r3, #131072	; 0x20000
  400202:	d0fb      	beq.n	4001fc <pmc_switch_mainck_to_fastrc+0x10>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  400204:	4a0b      	ldr	r2, [pc, #44]	; (400234 <pmc_switch_mainck_to_fastrc+0x48>)
  400206:	6a13      	ldr	r3, [r2, #32]
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
  400208:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  40020c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  400210:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  400214:	4303      	orrs	r3, r0

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  400216:	6213      	str	r3, [r2, #32]
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  400218:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40021a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
  40021e:	d0fb      	beq.n	400218 <pmc_switch_mainck_to_fastrc+0x2c>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  400220:	4a04      	ldr	r2, [pc, #16]	; (400234 <pmc_switch_mainck_to_fastrc+0x48>)
  400222:	6a13      	ldr	r3, [r2, #32]
  400224:	f023 739b 	bic.w	r3, r3, #20316160	; 0x1360000
  400228:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  40022c:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  400230:	6213      	str	r3, [r2, #32]
  400232:	4770      	bx	lr
  400234:	400e0400 	.word	0x400e0400

00400238 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  400238:	4b02      	ldr	r3, [pc, #8]	; (400244 <pmc_osc_is_ready_mainck+0xc>)
  40023a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  40023c:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  400240:	4770      	bx	lr
  400242:	bf00      	nop
  400244:	400e0400 	.word	0x400e0400

00400248 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  400248:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  40024c:	4b01      	ldr	r3, [pc, #4]	; (400254 <pmc_disable_pllack+0xc>)
  40024e:	629a      	str	r2, [r3, #40]	; 0x28
  400250:	4770      	bx	lr
  400252:	bf00      	nop
  400254:	400e0400 	.word	0x400e0400

00400258 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  400258:	4b02      	ldr	r3, [pc, #8]	; (400264 <pmc_is_locked_pllack+0xc>)
  40025a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  40025c:	f000 0002 	and.w	r0, r0, #2
  400260:	4770      	bx	lr
  400262:	bf00      	nop
  400264:	400e0400 	.word	0x400e0400

00400268 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  400268:	e7fe      	b.n	400268 <Dummy_Handler>
  40026a:	bf00      	nop

0040026c <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  40026c:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
  40026e:	4b19      	ldr	r3, [pc, #100]	; (4002d4 <Reset_Handler+0x68>)
  400270:	4a19      	ldr	r2, [pc, #100]	; (4002d8 <Reset_Handler+0x6c>)
  400272:	429a      	cmp	r2, r3
  400274:	d003      	beq.n	40027e <Reset_Handler+0x12>
		for (; pDest < &_erelocate;) {
  400276:	4b19      	ldr	r3, [pc, #100]	; (4002dc <Reset_Handler+0x70>)
  400278:	4a16      	ldr	r2, [pc, #88]	; (4002d4 <Reset_Handler+0x68>)
  40027a:	429a      	cmp	r2, r3
  40027c:	d304      	bcc.n	400288 <Reset_Handler+0x1c>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  40027e:	4b18      	ldr	r3, [pc, #96]	; (4002e0 <Reset_Handler+0x74>)
  400280:	4a18      	ldr	r2, [pc, #96]	; (4002e4 <Reset_Handler+0x78>)
  400282:	429a      	cmp	r2, r3
  400284:	d30f      	bcc.n	4002a6 <Reset_Handler+0x3a>
  400286:	e01a      	b.n	4002be <Reset_Handler+0x52>
  400288:	4912      	ldr	r1, [pc, #72]	; (4002d4 <Reset_Handler+0x68>)
  40028a:	4b17      	ldr	r3, [pc, #92]	; (4002e8 <Reset_Handler+0x7c>)
  40028c:	1a5b      	subs	r3, r3, r1
  40028e:	f023 0303 	bic.w	r3, r3, #3
  400292:	3304      	adds	r3, #4
  400294:	4a10      	ldr	r2, [pc, #64]	; (4002d8 <Reset_Handler+0x6c>)
  400296:	4413      	add	r3, r2
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
			*pDest++ = *pSrc++;
  400298:	f852 0b04 	ldr.w	r0, [r2], #4
  40029c:	f841 0b04 	str.w	r0, [r1], #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
  4002a0:	429a      	cmp	r2, r3
  4002a2:	d1f9      	bne.n	400298 <Reset_Handler+0x2c>
  4002a4:	e7eb      	b.n	40027e <Reset_Handler+0x12>
  4002a6:	4b11      	ldr	r3, [pc, #68]	; (4002ec <Reset_Handler+0x80>)
  4002a8:	4a11      	ldr	r2, [pc, #68]	; (4002f0 <Reset_Handler+0x84>)
  4002aa:	1ad2      	subs	r2, r2, r3
  4002ac:	f022 0203 	bic.w	r2, r2, #3
  4002b0:	441a      	add	r2, r3
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  4002b2:	3b04      	subs	r3, #4
		*pDest++ = 0;
  4002b4:	2100      	movs	r1, #0
  4002b6:	f843 1b04 	str.w	r1, [r3], #4
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  4002ba:	4293      	cmp	r3, r2
  4002bc:	d1fb      	bne.n	4002b6 <Reset_Handler+0x4a>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  4002be:	4a0d      	ldr	r2, [pc, #52]	; (4002f4 <Reset_Handler+0x88>)
  4002c0:	4b0d      	ldr	r3, [pc, #52]	; (4002f8 <Reset_Handler+0x8c>)
  4002c2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  4002c6:	6093      	str	r3, [r2, #8]

	/* Initialize the C library */
	__libc_init_array();
  4002c8:	4b0c      	ldr	r3, [pc, #48]	; (4002fc <Reset_Handler+0x90>)
  4002ca:	4798      	blx	r3

	/* Branch to main function */
	main();
  4002cc:	4b0c      	ldr	r3, [pc, #48]	; (400300 <Reset_Handler+0x94>)
  4002ce:	4798      	blx	r3
  4002d0:	e7fe      	b.n	4002d0 <Reset_Handler+0x64>
  4002d2:	bf00      	nop
  4002d4:	20000000 	.word	0x20000000
  4002d8:	0040063c 	.word	0x0040063c
  4002dc:	20000438 	.word	0x20000438
  4002e0:	20000454 	.word	0x20000454
  4002e4:	20000438 	.word	0x20000438
  4002e8:	20000437 	.word	0x20000437
  4002ec:	2000043c 	.word	0x2000043c
  4002f0:	20000457 	.word	0x20000457
  4002f4:	e000ed00 	.word	0xe000ed00
  4002f8:	00400000 	.word	0x00400000
  4002fc:	004004d5 	.word	0x004004d5
  400300:	0040046d 	.word	0x0040046d

00400304 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) {
  400304:	4b3a      	ldr	r3, [pc, #232]	; (4003f0 <SystemCoreClockUpdate+0xec>)
  400306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400308:	f003 0303 	and.w	r3, r3, #3
  40030c:	2b01      	cmp	r3, #1
  40030e:	d00f      	beq.n	400330 <SystemCoreClockUpdate+0x2c>
  400310:	b113      	cbz	r3, 400318 <SystemCoreClockUpdate+0x14>
  400312:	2b02      	cmp	r3, #2
  400314:	d027      	beq.n	400366 <SystemCoreClockUpdate+0x62>
  400316:	e053      	b.n	4003c0 <SystemCoreClockUpdate+0xbc>
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
  400318:	4b36      	ldr	r3, [pc, #216]	; (4003f4 <SystemCoreClockUpdate+0xf0>)
  40031a:	695b      	ldr	r3, [r3, #20]
  40031c:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
  400320:	bf14      	ite	ne
  400322:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
  400326:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  40032a:	4b33      	ldr	r3, [pc, #204]	; (4003f8 <SystemCoreClockUpdate+0xf4>)
  40032c:	601a      	str	r2, [r3, #0]
  40032e:	e047      	b.n	4003c0 <SystemCoreClockUpdate+0xbc>
		}
		break;

	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
  400330:	4b2f      	ldr	r3, [pc, #188]	; (4003f0 <SystemCoreClockUpdate+0xec>)
  400332:	6a1b      	ldr	r3, [r3, #32]
  400334:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400338:	d003      	beq.n	400342 <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
  40033a:	4a30      	ldr	r2, [pc, #192]	; (4003fc <SystemCoreClockUpdate+0xf8>)
  40033c:	4b2e      	ldr	r3, [pc, #184]	; (4003f8 <SystemCoreClockUpdate+0xf4>)
  40033e:	601a      	str	r2, [r3, #0]
  400340:	e03e      	b.n	4003c0 <SystemCoreClockUpdate+0xbc>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400342:	4a2f      	ldr	r2, [pc, #188]	; (400400 <SystemCoreClockUpdate+0xfc>)
  400344:	4b2c      	ldr	r3, [pc, #176]	; (4003f8 <SystemCoreClockUpdate+0xf4>)
  400346:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
  400348:	4b29      	ldr	r3, [pc, #164]	; (4003f0 <SystemCoreClockUpdate+0xec>)
  40034a:	6a1b      	ldr	r3, [r3, #32]
  40034c:	f013 0370 	ands.w	r3, r3, #112	; 0x70
  400350:	d005      	beq.n	40035e <SystemCoreClockUpdate+0x5a>
  400352:	2b10      	cmp	r3, #16
  400354:	d134      	bne.n	4003c0 <SystemCoreClockUpdate+0xbc>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;

			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
  400356:	4a2b      	ldr	r2, [pc, #172]	; (400404 <SystemCoreClockUpdate+0x100>)
  400358:	4b27      	ldr	r3, [pc, #156]	; (4003f8 <SystemCoreClockUpdate+0xf4>)
  40035a:	601a      	str	r2, [r3, #0]
				break;
  40035c:	e030      	b.n	4003c0 <SystemCoreClockUpdate+0xbc>

			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
  40035e:	4a27      	ldr	r2, [pc, #156]	; (4003fc <SystemCoreClockUpdate+0xf8>)
  400360:	4b25      	ldr	r3, [pc, #148]	; (4003f8 <SystemCoreClockUpdate+0xf4>)
  400362:	601a      	str	r2, [r3, #0]
				break;
  400364:	e02c      	b.n	4003c0 <SystemCoreClockUpdate+0xbc>
			}
		}
		break;

	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
  400366:	4b22      	ldr	r3, [pc, #136]	; (4003f0 <SystemCoreClockUpdate+0xec>)
  400368:	6a1b      	ldr	r3, [r3, #32]
  40036a:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  40036e:	d003      	beq.n	400378 <SystemCoreClockUpdate+0x74>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
  400370:	4a22      	ldr	r2, [pc, #136]	; (4003fc <SystemCoreClockUpdate+0xf8>)
  400372:	4b21      	ldr	r3, [pc, #132]	; (4003f8 <SystemCoreClockUpdate+0xf4>)
  400374:	601a      	str	r2, [r3, #0]
  400376:	e010      	b.n	40039a <SystemCoreClockUpdate+0x96>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400378:	4a21      	ldr	r2, [pc, #132]	; (400400 <SystemCoreClockUpdate+0xfc>)
  40037a:	4b1f      	ldr	r3, [pc, #124]	; (4003f8 <SystemCoreClockUpdate+0xf4>)
  40037c:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
  40037e:	4b1c      	ldr	r3, [pc, #112]	; (4003f0 <SystemCoreClockUpdate+0xec>)
  400380:	6a1b      	ldr	r3, [r3, #32]
  400382:	f013 0370 	ands.w	r3, r3, #112	; 0x70
  400386:	d005      	beq.n	400394 <SystemCoreClockUpdate+0x90>
  400388:	2b10      	cmp	r3, #16
  40038a:	d106      	bne.n	40039a <SystemCoreClockUpdate+0x96>
				/* So the 4MHz RC selection is forbidden */
				Assert(false);
				break;

			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
  40038c:	4a1d      	ldr	r2, [pc, #116]	; (400404 <SystemCoreClockUpdate+0x100>)
  40038e:	4b1a      	ldr	r3, [pc, #104]	; (4003f8 <SystemCoreClockUpdate+0xf4>)
  400390:	601a      	str	r2, [r3, #0]
				break;
  400392:	e002      	b.n	40039a <SystemCoreClockUpdate+0x96>

			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
  400394:	4a19      	ldr	r2, [pc, #100]	; (4003fc <SystemCoreClockUpdate+0xf8>)
  400396:	4b18      	ldr	r3, [pc, #96]	; (4003f8 <SystemCoreClockUpdate+0xf4>)
  400398:	601a      	str	r2, [r3, #0]
			default:
				break;
			}
		}

		if ((uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
  40039a:	4b15      	ldr	r3, [pc, #84]	; (4003f0 <SystemCoreClockUpdate+0xec>)
  40039c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40039e:	f003 0303 	and.w	r3, r3, #3
  4003a2:	2b02      	cmp	r3, #2
  4003a4:	d10c      	bne.n	4003c0 <SystemCoreClockUpdate+0xbc>
				PMC_MCKR_CSS_PLLA_CLK) {
			SystemCoreClock *=
					((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  4003a6:	4a12      	ldr	r2, [pc, #72]	; (4003f0 <SystemCoreClockUpdate+0xec>)
  4003a8:	6a93      	ldr	r3, [r2, #40]	; 0x28
					>> CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  4003aa:	6a92      	ldr	r2, [r2, #40]	; 0x28
  4003ac:	4812      	ldr	r0, [pc, #72]	; (4003f8 <SystemCoreClockUpdate+0xf4>)
  4003ae:	f3c3 410a 	ubfx	r1, r3, #16, #11
  4003b2:	6803      	ldr	r3, [r0, #0]
  4003b4:	fb01 3303 	mla	r3, r1, r3, r3
  4003b8:	b2d2      	uxtb	r2, r2
  4003ba:	fbb3 f3f2 	udiv	r3, r3, r2
  4003be:	6003      	str	r3, [r0, #0]

	default:
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
  4003c0:	4b0b      	ldr	r3, [pc, #44]	; (4003f0 <SystemCoreClockUpdate+0xec>)
  4003c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4003c4:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4003c8:	2b70      	cmp	r3, #112	; 0x70
  4003ca:	d107      	bne.n	4003dc <SystemCoreClockUpdate+0xd8>
		SystemCoreClock /= 3U;
  4003cc:	4a0a      	ldr	r2, [pc, #40]	; (4003f8 <SystemCoreClockUpdate+0xf4>)
  4003ce:	6813      	ldr	r3, [r2, #0]
  4003d0:	490d      	ldr	r1, [pc, #52]	; (400408 <SystemCoreClockUpdate+0x104>)
  4003d2:	fba1 1303 	umull	r1, r3, r1, r3
  4003d6:	085b      	lsrs	r3, r3, #1
  4003d8:	6013      	str	r3, [r2, #0]
  4003da:	4770      	bx	lr
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >>
  4003dc:	4b04      	ldr	r3, [pc, #16]	; (4003f0 <SystemCoreClockUpdate+0xec>)
  4003de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4003e0:	4905      	ldr	r1, [pc, #20]	; (4003f8 <SystemCoreClockUpdate+0xf4>)
  4003e2:	f3c3 1202 	ubfx	r2, r3, #4, #3
  4003e6:	680b      	ldr	r3, [r1, #0]
  4003e8:	40d3      	lsrs	r3, r2
  4003ea:	600b      	str	r3, [r1, #0]
  4003ec:	4770      	bx	lr
  4003ee:	bf00      	nop
  4003f0:	400e0400 	.word	0x400e0400
  4003f4:	400e1410 	.word	0x400e1410
  4003f8:	2000000c 	.word	0x2000000c
  4003fc:	00b71b00 	.word	0x00b71b00
  400400:	003d0900 	.word	0x003d0900
  400404:	007a1200 	.word	0x007a1200
  400408:	aaaaaaab 	.word	0xaaaaaaab

0040040c <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
  40040c:	4b0f      	ldr	r3, [pc, #60]	; (40044c <system_init_flash+0x40>)
  40040e:	4298      	cmp	r0, r3
  400410:	d804      	bhi.n	40041c <system_init_flash+0x10>
		EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  400412:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  400416:	4b0e      	ldr	r3, [pc, #56]	; (400450 <system_init_flash+0x44>)
  400418:	601a      	str	r2, [r3, #0]
  40041a:	4770      	bx	lr
	} else {
		if (ul_clk < CHIP_FREQ_FWS_1) {
  40041c:	4b0d      	ldr	r3, [pc, #52]	; (400454 <system_init_flash+0x48>)
  40041e:	4298      	cmp	r0, r3
  400420:	d803      	bhi.n	40042a <system_init_flash+0x1e>
			EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  400422:	4a0d      	ldr	r2, [pc, #52]	; (400458 <system_init_flash+0x4c>)
  400424:	4b0a      	ldr	r3, [pc, #40]	; (400450 <system_init_flash+0x44>)
  400426:	601a      	str	r2, [r3, #0]
  400428:	4770      	bx	lr
		} else {
			if (ul_clk < CHIP_FREQ_FWS_2) {
  40042a:	4b0c      	ldr	r3, [pc, #48]	; (40045c <system_init_flash+0x50>)
  40042c:	4298      	cmp	r0, r3
  40042e:	d803      	bhi.n	400438 <system_init_flash+0x2c>
				EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  400430:	4a0b      	ldr	r2, [pc, #44]	; (400460 <system_init_flash+0x54>)
  400432:	4b07      	ldr	r3, [pc, #28]	; (400450 <system_init_flash+0x44>)
  400434:	601a      	str	r2, [r3, #0]
  400436:	4770      	bx	lr
			} else {
				if (ul_clk < CHIP_FREQ_FWS_3) {
  400438:	4b0a      	ldr	r3, [pc, #40]	; (400464 <system_init_flash+0x58>)
  40043a:	4298      	cmp	r0, r3
					EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  40043c:	bf94      	ite	ls
  40043e:	4a0a      	ldrls	r2, [pc, #40]	; (400468 <system_init_flash+0x5c>)
				} else {
					EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  400440:	f04f 2204 	movhi.w	r2, #67109888	; 0x4000400
  400444:	4b02      	ldr	r3, [pc, #8]	; (400450 <system_init_flash+0x44>)
  400446:	601a      	str	r2, [r3, #0]
  400448:	4770      	bx	lr
  40044a:	bf00      	nop
  40044c:	01312cff 	.word	0x01312cff
  400450:	400e0a00 	.word	0x400e0a00
  400454:	026259ff 	.word	0x026259ff
  400458:	04000100 	.word	0x04000100
  40045c:	039386ff 	.word	0x039386ff
  400460:	04000200 	.word	0x04000200
  400464:	04c4b3ff 	.word	0x04c4b3ff
  400468:	04000300 	.word	0x04000300

0040046c <main>:
 * Support and FAQ: visit <a href="http://www.atmel.com/design-support/">Atmel Support</a>
 */
#include <asf.h>

int main (void)
{
  40046c:	b580      	push	{r7, lr}
	/* Insert system clock initialization code here (sysclk_init()). */

	sysclk_init();
  40046e:	4b11      	ldr	r3, [pc, #68]	; (4004b4 <main+0x48>)
  400470:	4798      	blx	r3
	board_init();
  400472:	4b11      	ldr	r3, [pc, #68]	; (4004b8 <main+0x4c>)
  400474:	4798      	blx	r3
	WDT->WDT_MR = WDT_MR_WDDIS;
  400476:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  40047a:	4b10      	ldr	r3, [pc, #64]	; (4004bc <main+0x50>)
  40047c:	605a      	str	r2, [r3, #4]

	REG_PIOA_PER |= PIO_PER_P11; //enable PIO controller on PA11
  40047e:	4a10      	ldr	r2, [pc, #64]	; (4004c0 <main+0x54>)
  400480:	6813      	ldr	r3, [r2, #0]
  400482:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  400486:	6013      	str	r3, [r2, #0]
	REG_PIOA_OER |= PIO_PER_P11; //enable output on pin PA11
  400488:	3210      	adds	r2, #16
  40048a:	6813      	ldr	r3, [r2, #0]
  40048c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  400490:	6013      	str	r3, [r2, #0]

	/* Replace with your application code */
	while (1)
	{

		REG_PIOA_SODR |= PIO_PER_P11; //set output high on pin PA11
  400492:	4f0c      	ldr	r7, [pc, #48]	; (4004c4 <main+0x58>)
		delay_ms(500);
  400494:	4e0c      	ldr	r6, [pc, #48]	; (4004c8 <main+0x5c>)

		REG_PIOA_CODR |= PIO_PER_P11; //set output low on pin PA11
  400496:	4d0d      	ldr	r5, [pc, #52]	; (4004cc <main+0x60>)

	/* Replace with your application code */
	while (1)
	{

		REG_PIOA_SODR |= PIO_PER_P11; //set output high on pin PA11
  400498:	683b      	ldr	r3, [r7, #0]
  40049a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  40049e:	603b      	str	r3, [r7, #0]
		delay_ms(500);
  4004a0:	4630      	mov	r0, r6
  4004a2:	4c0b      	ldr	r4, [pc, #44]	; (4004d0 <main+0x64>)
  4004a4:	47a0      	blx	r4

		REG_PIOA_CODR |= PIO_PER_P11; //set output low on pin PA11
  4004a6:	682b      	ldr	r3, [r5, #0]
  4004a8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  4004ac:	602b      	str	r3, [r5, #0]
		delay_ms(500);
  4004ae:	4630      	mov	r0, r6
  4004b0:	47a0      	blx	r4
  4004b2:	e7f1      	b.n	400498 <main+0x2c>
  4004b4:	00400121 	.word	0x00400121
  4004b8:	0040011d 	.word	0x0040011d
  4004bc:	400e1450 	.word	0x400e1450
  4004c0:	400e0e00 	.word	0x400e0e00
  4004c4:	400e0e30 	.word	0x400e0e30
  4004c8:	00367ee5 	.word	0x00367ee5
  4004cc:	400e0e34 	.word	0x400e0e34
  4004d0:	20000001 	.word	0x20000001

004004d4 <__libc_init_array>:
  4004d4:	b570      	push	{r4, r5, r6, lr}
  4004d6:	4e0f      	ldr	r6, [pc, #60]	; (400514 <__libc_init_array+0x40>)
  4004d8:	4d0f      	ldr	r5, [pc, #60]	; (400518 <__libc_init_array+0x44>)
  4004da:	1b76      	subs	r6, r6, r5
  4004dc:	10b6      	asrs	r6, r6, #2
  4004de:	bf18      	it	ne
  4004e0:	2400      	movne	r4, #0
  4004e2:	d005      	beq.n	4004f0 <__libc_init_array+0x1c>
  4004e4:	3401      	adds	r4, #1
  4004e6:	f855 3b04 	ldr.w	r3, [r5], #4
  4004ea:	4798      	blx	r3
  4004ec:	42a6      	cmp	r6, r4
  4004ee:	d1f9      	bne.n	4004e4 <__libc_init_array+0x10>
  4004f0:	4e0a      	ldr	r6, [pc, #40]	; (40051c <__libc_init_array+0x48>)
  4004f2:	4d0b      	ldr	r5, [pc, #44]	; (400520 <__libc_init_array+0x4c>)
  4004f4:	1b76      	subs	r6, r6, r5
  4004f6:	f000 f88f 	bl	400618 <_init>
  4004fa:	10b6      	asrs	r6, r6, #2
  4004fc:	bf18      	it	ne
  4004fe:	2400      	movne	r4, #0
  400500:	d006      	beq.n	400510 <__libc_init_array+0x3c>
  400502:	3401      	adds	r4, #1
  400504:	f855 3b04 	ldr.w	r3, [r5], #4
  400508:	4798      	blx	r3
  40050a:	42a6      	cmp	r6, r4
  40050c:	d1f9      	bne.n	400502 <__libc_init_array+0x2e>
  40050e:	bd70      	pop	{r4, r5, r6, pc}
  400510:	bd70      	pop	{r4, r5, r6, pc}
  400512:	bf00      	nop
  400514:	00400624 	.word	0x00400624
  400518:	00400624 	.word	0x00400624
  40051c:	0040062c 	.word	0x0040062c
  400520:	00400624 	.word	0x00400624

00400524 <register_fini>:
  400524:	4b02      	ldr	r3, [pc, #8]	; (400530 <register_fini+0xc>)
  400526:	b113      	cbz	r3, 40052e <register_fini+0xa>
  400528:	4802      	ldr	r0, [pc, #8]	; (400534 <register_fini+0x10>)
  40052a:	f000 b805 	b.w	400538 <atexit>
  40052e:	4770      	bx	lr
  400530:	00000000 	.word	0x00000000
  400534:	00400545 	.word	0x00400545

00400538 <atexit>:
  400538:	2300      	movs	r3, #0
  40053a:	4601      	mov	r1, r0
  40053c:	461a      	mov	r2, r3
  40053e:	4618      	mov	r0, r3
  400540:	f000 b814 	b.w	40056c <__register_exitproc>

00400544 <__libc_fini_array>:
  400544:	b538      	push	{r3, r4, r5, lr}
  400546:	4d07      	ldr	r5, [pc, #28]	; (400564 <__libc_fini_array+0x20>)
  400548:	4c07      	ldr	r4, [pc, #28]	; (400568 <__libc_fini_array+0x24>)
  40054a:	1b2c      	subs	r4, r5, r4
  40054c:	10a4      	asrs	r4, r4, #2
  40054e:	d005      	beq.n	40055c <__libc_fini_array+0x18>
  400550:	3c01      	subs	r4, #1
  400552:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  400556:	4798      	blx	r3
  400558:	2c00      	cmp	r4, #0
  40055a:	d1f9      	bne.n	400550 <__libc_fini_array+0xc>
  40055c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  400560:	f000 b864 	b.w	40062c <_fini>
  400564:	0040063c 	.word	0x0040063c
  400568:	00400638 	.word	0x00400638

0040056c <__register_exitproc>:
  40056c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  400570:	4c25      	ldr	r4, [pc, #148]	; (400608 <__register_exitproc+0x9c>)
  400572:	6825      	ldr	r5, [r4, #0]
  400574:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
  400578:	4606      	mov	r6, r0
  40057a:	4688      	mov	r8, r1
  40057c:	4692      	mov	sl, r2
  40057e:	4699      	mov	r9, r3
  400580:	b3c4      	cbz	r4, 4005f4 <__register_exitproc+0x88>
  400582:	6860      	ldr	r0, [r4, #4]
  400584:	281f      	cmp	r0, #31
  400586:	dc17      	bgt.n	4005b8 <__register_exitproc+0x4c>
  400588:	1c43      	adds	r3, r0, #1
  40058a:	b176      	cbz	r6, 4005aa <__register_exitproc+0x3e>
  40058c:	eb04 0580 	add.w	r5, r4, r0, lsl #2
  400590:	2201      	movs	r2, #1
  400592:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
  400596:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
  40059a:	4082      	lsls	r2, r0
  40059c:	4311      	orrs	r1, r2
  40059e:	2e02      	cmp	r6, #2
  4005a0:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
  4005a4:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
  4005a8:	d01e      	beq.n	4005e8 <__register_exitproc+0x7c>
  4005aa:	3002      	adds	r0, #2
  4005ac:	6063      	str	r3, [r4, #4]
  4005ae:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
  4005b2:	2000      	movs	r0, #0
  4005b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4005b8:	4b14      	ldr	r3, [pc, #80]	; (40060c <__register_exitproc+0xa0>)
  4005ba:	b303      	cbz	r3, 4005fe <__register_exitproc+0x92>
  4005bc:	f44f 70c8 	mov.w	r0, #400	; 0x190
  4005c0:	f3af 8000 	nop.w
  4005c4:	4604      	mov	r4, r0
  4005c6:	b1d0      	cbz	r0, 4005fe <__register_exitproc+0x92>
  4005c8:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
  4005cc:	2700      	movs	r7, #0
  4005ce:	e880 0088 	stmia.w	r0, {r3, r7}
  4005d2:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  4005d6:	4638      	mov	r0, r7
  4005d8:	2301      	movs	r3, #1
  4005da:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  4005de:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
  4005e2:	2e00      	cmp	r6, #0
  4005e4:	d0e1      	beq.n	4005aa <__register_exitproc+0x3e>
  4005e6:	e7d1      	b.n	40058c <__register_exitproc+0x20>
  4005e8:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
  4005ec:	430a      	orrs	r2, r1
  4005ee:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  4005f2:	e7da      	b.n	4005aa <__register_exitproc+0x3e>
  4005f4:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
  4005f8:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  4005fc:	e7c1      	b.n	400582 <__register_exitproc+0x16>
  4005fe:	f04f 30ff 	mov.w	r0, #4294967295
  400602:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  400606:	bf00      	nop
  400608:	00400614 	.word	0x00400614
  40060c:	00000000 	.word	0x00000000
  400610:	00000043 	.word	0x00000043

00400614 <_global_impure_ptr>:
  400614:	20000010                                ... 

00400618 <_init>:
  400618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40061a:	bf00      	nop
  40061c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40061e:	bc08      	pop	{r3}
  400620:	469e      	mov	lr, r3
  400622:	4770      	bx	lr

00400624 <__init_array_start>:
  400624:	00400525 	.word	0x00400525

00400628 <__frame_dummy_init_array_entry>:
  400628:	004000e5                                ..@.

0040062c <_fini>:
  40062c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40062e:	bf00      	nop
  400630:	bcf8      	pop	{r3, r4, r5, r6, r7}
  400632:	bc08      	pop	{r3}
  400634:	469e      	mov	lr, r3
  400636:	4770      	bx	lr

00400638 <__fini_array_start>:
  400638:	004000c1 	.word	0x004000c1

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	d1fb      	bne.n	20000000 <portable_delay_cycles>
20000008:	4770      	bx	lr
2000000a:	bf00      	nop

2000000c <SystemCoreClock>:
2000000c:	0900 003d                                   ..=.

20000010 <impure_data>:
20000010:	0000 0000 02fc 2000 0364 2000 03cc 2000     ....... d.. ... 
	...
20000044:	0610 0040 0000 0000 0000 0000 0000 0000     ..@.............
	...
200000b8:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
200000c8:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...
