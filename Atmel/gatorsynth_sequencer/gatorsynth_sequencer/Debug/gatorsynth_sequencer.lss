
gatorsynth_sequencer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000009c8  00400000  00400000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000438  20000000  004009c8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000024  20000438  00400e00  00020438  2**2
                  ALLOC
  3 .stack        00003004  2000045c  00400e24  00020438  2**0
                  ALLOC
  4 .ARM.attributes 0000002a  00000000  00000000  00020438  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020462  2**0
                  CONTENTS, READONLY
  6 .debug_info   00002da8  00000000  00000000  000204bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b81  00000000  00000000  00023263  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000e0f  00000000  00000000  00023de4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000002f8  00000000  00000000  00024bf3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000290  00000000  00000000  00024eeb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0000d233  00000000  00000000  0002517b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00005813  00000000  00000000  000323ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0003bbb4  00000000  00000000  00037bc1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000698  00000000  00000000  00073778  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <_sfixed>:
  400000:	20003460 	.word	0x20003460
  400004:	004004c1 	.word	0x004004c1
  400008:	004004bd 	.word	0x004004bd
  40000c:	004004bd 	.word	0x004004bd
  400010:	004004bd 	.word	0x004004bd
  400014:	004004bd 	.word	0x004004bd
  400018:	004004bd 	.word	0x004004bd
	...
  40002c:	004004bd 	.word	0x004004bd
  400030:	004004bd 	.word	0x004004bd
  400034:	00000000 	.word	0x00000000
  400038:	004004bd 	.word	0x004004bd
  40003c:	004004bd 	.word	0x004004bd
  400040:	004004bd 	.word	0x004004bd
  400044:	004004bd 	.word	0x004004bd
  400048:	004004bd 	.word	0x004004bd
  40004c:	004004bd 	.word	0x004004bd
  400050:	004004bd 	.word	0x004004bd
  400054:	004004bd 	.word	0x004004bd
  400058:	004004bd 	.word	0x004004bd
  40005c:	00000000 	.word	0x00000000
  400060:	004004bd 	.word	0x004004bd
  400064:	004004bd 	.word	0x004004bd
  400068:	004004bd 	.word	0x004004bd
  40006c:	00400701 	.word	0x00400701
  400070:	004004bd 	.word	0x004004bd
  400074:	004004bd 	.word	0x004004bd
  400078:	004004bd 	.word	0x004004bd
  40007c:	004004bd 	.word	0x004004bd
  400080:	004004bd 	.word	0x004004bd
  400084:	004004bd 	.word	0x004004bd
  400088:	00000000 	.word	0x00000000
  40008c:	004004bd 	.word	0x004004bd
  400090:	004004bd 	.word	0x004004bd
  400094:	004004bd 	.word	0x004004bd
  400098:	004004bd 	.word	0x004004bd
  40009c:	004001b1 	.word	0x004001b1
  4000a0:	004004bd 	.word	0x004004bd
  4000a4:	004004bd 	.word	0x004004bd
  4000a8:	004004bd 	.word	0x004004bd
  4000ac:	004004bd 	.word	0x004004bd
  4000b0:	004004bd 	.word	0x004004bd
  4000b4:	004004bd 	.word	0x004004bd
  4000b8:	004004bd 	.word	0x004004bd
  4000bc:	004004bd 	.word	0x004004bd

004000c0 <__do_global_dtors_aux>:
  4000c0:	b510      	push	{r4, lr}
  4000c2:	4c05      	ldr	r4, [pc, #20]	; (4000d8 <__do_global_dtors_aux+0x18>)
  4000c4:	7823      	ldrb	r3, [r4, #0]
  4000c6:	b933      	cbnz	r3, 4000d6 <__do_global_dtors_aux+0x16>
  4000c8:	4b04      	ldr	r3, [pc, #16]	; (4000dc <__do_global_dtors_aux+0x1c>)
  4000ca:	b113      	cbz	r3, 4000d2 <__do_global_dtors_aux+0x12>
  4000cc:	4804      	ldr	r0, [pc, #16]	; (4000e0 <__do_global_dtors_aux+0x20>)
  4000ce:	f3af 8000 	nop.w
  4000d2:	2301      	movs	r3, #1
  4000d4:	7023      	strb	r3, [r4, #0]
  4000d6:	bd10      	pop	{r4, pc}
  4000d8:	20000438 	.word	0x20000438
  4000dc:	00000000 	.word	0x00000000
  4000e0:	004009c8 	.word	0x004009c8

004000e4 <frame_dummy>:
  4000e4:	4b08      	ldr	r3, [pc, #32]	; (400108 <frame_dummy+0x24>)
  4000e6:	b510      	push	{r4, lr}
  4000e8:	b11b      	cbz	r3, 4000f2 <frame_dummy+0xe>
  4000ea:	4908      	ldr	r1, [pc, #32]	; (40010c <frame_dummy+0x28>)
  4000ec:	4808      	ldr	r0, [pc, #32]	; (400110 <frame_dummy+0x2c>)
  4000ee:	f3af 8000 	nop.w
  4000f2:	4808      	ldr	r0, [pc, #32]	; (400114 <frame_dummy+0x30>)
  4000f4:	6803      	ldr	r3, [r0, #0]
  4000f6:	b903      	cbnz	r3, 4000fa <frame_dummy+0x16>
  4000f8:	bd10      	pop	{r4, pc}
  4000fa:	4b07      	ldr	r3, [pc, #28]	; (400118 <frame_dummy+0x34>)
  4000fc:	2b00      	cmp	r3, #0
  4000fe:	d0fb      	beq.n	4000f8 <frame_dummy+0x14>
  400100:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400104:	4718      	bx	r3
  400106:	bf00      	nop
  400108:	00000000 	.word	0x00000000
  40010c:	2000043c 	.word	0x2000043c
  400110:	004009c8 	.word	0x004009c8
  400114:	004009c8 	.word	0x004009c8
  400118:	00000000 	.word	0x00000000

0040011c <timers_init>:
 #include <stdbool.h>
 #include "timers.h"

 void timers_init(void) {

	overflow_count = 0;
  40011c:	2200      	movs	r2, #0
  40011e:	4b17      	ldr	r3, [pc, #92]	; (40017c <timers_init+0x60>)
  400120:	801a      	strh	r2, [r3, #0]
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  400122:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  400126:	4b16      	ldr	r3, [pc, #88]	; (400180 <timers_init+0x64>)
  400128:	601a      	str	r2, [r3, #0]

	NVIC_EnableIRQ(TC0_IRQn);

	// Enable peripheral clock for TC0
	// Peripheral ID (PID) for TC0 is 23
	REG_PMC_PCER0 |= PMC_PCER0_PID23;
  40012a:	4a16      	ldr	r2, [pc, #88]	; (400184 <timers_init+0x68>)
  40012c:	6813      	ldr	r3, [r2, #0]
  40012e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
  400132:	6013      	str	r3, [r2, #0]
	// TIMER_CLOCK1 = MCK/2
	// TIMER_CLOCK2 = MCK/8
	// TIMER_CLOCK3 = MCK/32
	// TIMER_CLOCK4 = MCK/128
	// TIMER_CLOCK5 = SCLK
	REG_TC0_CMR0 |= TC_CMR_TCCLKS_TIMER_CLOCK2 | TC_CMR_CPCTRG;
  400134:	4914      	ldr	r1, [pc, #80]	; (400188 <timers_init+0x6c>)
  400136:	680b      	ldr	r3, [r1, #0]
  400138:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  40013c:	f043 0301 	orr.w	r3, r3, #1
  400140:	600b      	str	r3, [r1, #0]
	// Set interrupt on compare to RC value
	REG_TC0_IER0 |= TC_IER_CPCS;
  400142:	3120      	adds	r1, #32
  400144:	680b      	ldr	r3, [r1, #0]
  400146:	f043 0310 	orr.w	r3, r3, #16
  40014a:	600b      	str	r3, [r1, #0]
// 	// 60 BPM = 1 Hz. SCK = 32 KHz. 16,000 counts per half second, 2 interrupts per cycle
// 	REG_TC0_RC0 = 16000;

	// 60 BPM = 1 Hz. MCK/8 = 12.5 MHz. 6.25 mil counts per half second, 2 interrupts per cycle
	// Anticipating 5000 overflows (5000*1250 is 6.25 mil)
	REG_TC0_RC0 = 1250;
  40014c:	f240 41e2 	movw	r1, #1250	; 0x4e2
  400150:	4b0e      	ldr	r3, [pc, #56]	; (40018c <timers_init+0x70>)
  400152:	6019      	str	r1, [r3, #0]

	// For the interrupt
	REG_PIOA_PER |= PIO_PER_P11; //enable PIO controller on PA11
  400154:	490e      	ldr	r1, [pc, #56]	; (400190 <timers_init+0x74>)
  400156:	680b      	ldr	r3, [r1, #0]
  400158:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  40015c:	600b      	str	r3, [r1, #0]
	REG_PIOA_OER |= PIO_PER_P11; //enable output on pin PA11
  40015e:	3110      	adds	r1, #16
  400160:	680b      	ldr	r3, [r1, #0]
  400162:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  400166:	600b      	str	r3, [r1, #0]
	REG_PMC_PCER0 |= PMC_PCER0_PID11; //Enable PMC control for PA11
  400168:	6813      	ldr	r3, [r2, #0]
  40016a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  40016e:	6013      	str	r3, [r2, #0]

	// TC0 control register enables timer and triggers it to start
	REG_TC0_CCR0 |= TC_CCR_CLKEN | TC_CCR_SWTRG;
  400170:	4a08      	ldr	r2, [pc, #32]	; (400194 <timers_init+0x78>)
  400172:	6813      	ldr	r3, [r2, #0]
  400174:	f043 0305 	orr.w	r3, r3, #5
  400178:	6013      	str	r3, [r2, #0]
  40017a:	4770      	bx	lr
  40017c:	2000045a 	.word	0x2000045a
  400180:	e000e100 	.word	0xe000e100
  400184:	400e0410 	.word	0x400e0410
  400188:	40010004 	.word	0x40010004
  40018c:	4001001c 	.word	0x4001001c
  400190:	400e0e00 	.word	0x400e0e00
  400194:	40010000 	.word	0x40010000

00400198 <update_timers>:
 void update_timers(int bpm) {
// 	// (SCK/2) / (bpm/60); SCK*60/2 = 960000
// 	// Offset is needed, possible not with the crystals working
// 	REG_TC0_RC0 = (uint16_t)(960000/bpm - 420);
	
	REG_TC0_RC0 = (uint16_t)(75000/bpm);
  400198:	4b03      	ldr	r3, [pc, #12]	; (4001a8 <update_timers+0x10>)
  40019a:	fb93 f0f0 	sdiv	r0, r3, r0
  40019e:	b280      	uxth	r0, r0
  4001a0:	4b02      	ldr	r3, [pc, #8]	; (4001ac <update_timers+0x14>)
  4001a2:	6018      	str	r0, [r3, #0]
  4001a4:	4770      	bx	lr
  4001a6:	bf00      	nop
  4001a8:	000124f8 	.word	0x000124f8
  4001ac:	4001001c 	.word	0x4001001c

004001b0 <TC0_Handler>:

 void TC0_Handler() {
	 // Handling timer = RC

	 // Test code, normally trigger next step, output clock
	 if((REG_TC0_SR0 & TC_SR_CPCS) >= 0) {
  4001b0:	4b0c      	ldr	r3, [pc, #48]	; (4001e4 <TC0_Handler+0x34>)
  4001b2:	681b      	ldr	r3, [r3, #0]
		overflow_count += 1;
  4001b4:	4a0c      	ldr	r2, [pc, #48]	; (4001e8 <TC0_Handler+0x38>)
  4001b6:	8813      	ldrh	r3, [r2, #0]
  4001b8:	3301      	adds	r3, #1
  4001ba:	b29b      	uxth	r3, r3
  4001bc:	8013      	strh	r3, [r2, #0]
	 }

	 if(overflow_count >= 5000) {
  4001be:	f241 3287 	movw	r2, #4999	; 0x1387
  4001c2:	4293      	cmp	r3, r2
  4001c4:	d90d      	bls.n	4001e2 <TC0_Handler+0x32>
		if((REG_PIOA_PDSR & PIO_ODSR_P11) >= 1) {
  4001c6:	4b09      	ldr	r3, [pc, #36]	; (4001ec <TC0_Handler+0x3c>)
  4001c8:	681b      	ldr	r3, [r3, #0]
  4001ca:	f413 6f00 	tst.w	r3, #2048	; 0x800
			REG_PIOA_CODR |= PIO_CODR_P11;
  4001ce:	bf14      	ite	ne
  4001d0:	4a07      	ldrne	r2, [pc, #28]	; (4001f0 <TC0_Handler+0x40>)
		}
		else {
			REG_PIOA_SODR |= PIO_SODR_P11;
  4001d2:	4a08      	ldreq	r2, [pc, #32]	; (4001f4 <TC0_Handler+0x44>)
  4001d4:	6813      	ldr	r3, [r2, #0]
  4001d6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  4001da:	6013      	str	r3, [r2, #0]
		}
		overflow_count = 0;
  4001dc:	2200      	movs	r2, #0
  4001de:	4b02      	ldr	r3, [pc, #8]	; (4001e8 <TC0_Handler+0x38>)
  4001e0:	801a      	strh	r2, [r3, #0]
  4001e2:	4770      	bx	lr
  4001e4:	40010020 	.word	0x40010020
  4001e8:	2000045a 	.word	0x2000045a
  4001ec:	400e0e3c 	.word	0x400e0e3c
  4001f0:	400e0e34 	.word	0x400e0e34
  4001f4:	400e0e30 	.word	0x400e0e30

004001f8 <LED_init>:
#include <board.h>
#include <conf_board.h>

void LED_init(){
	 //enable clock for PIOA
	 REG_PMC_PCER0 |= PMC_PCER0_PID11;
  4001f8:	4a16      	ldr	r2, [pc, #88]	; (400254 <LED_init+0x5c>)
  4001fa:	6813      	ldr	r3, [r2, #0]
  4001fc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  400200:	6013      	str	r3, [r2, #0]

	 //Set up PA11 as LED OUTPUT
	 REG_PIOA_PER |= PIO_PER_P11; //enable PIO controller on PA11
  400202:	4915      	ldr	r1, [pc, #84]	; (400258 <LED_init+0x60>)
  400204:	680b      	ldr	r3, [r1, #0]
  400206:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  40020a:	600b      	str	r3, [r1, #0]
	 REG_PIOA_OER |= PIO_PER_P11; //enable output on pin PA11
  40020c:	f502 6220 	add.w	r2, r2, #2560	; 0xa00
  400210:	6813      	ldr	r3, [r2, #0]
  400212:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  400216:	6013      	str	r3, [r2, #0]
	 REG_PIOA_CODR |= PIO_PER_P11; //set output low on PA11 as default
  400218:	4b10      	ldr	r3, [pc, #64]	; (40025c <LED_init+0x64>)
  40021a:	6818      	ldr	r0, [r3, #0]
  40021c:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
  400220:	6018      	str	r0, [r3, #0]

	  //Set up PA15 as Left LED OUTPUT
	  REG_PIOA_PER |= PIO_PER_P15; //enable PIO controller on PA15
  400222:	6808      	ldr	r0, [r1, #0]
  400224:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
  400228:	6008      	str	r0, [r1, #0]
	  REG_PIOA_OER |= PIO_PER_P15; //enable output on pin PA15
  40022a:	6810      	ldr	r0, [r2, #0]
  40022c:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
  400230:	6010      	str	r0, [r2, #0]
	  REG_PIOA_CODR |= PIO_PER_P15; //set output low on PA15 as default
  400232:	6818      	ldr	r0, [r3, #0]
  400234:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
  400238:	6018      	str	r0, [r3, #0]

	  //Set up PA16 as Right LED OUTPUT
	  REG_PIOA_PER |= PIO_PER_P16; //enable PIO controller on PA16
  40023a:	6808      	ldr	r0, [r1, #0]
  40023c:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
  400240:	6008      	str	r0, [r1, #0]
	  REG_PIOA_OER |= PIO_PER_P16; //enable output on pin PA16
  400242:	6811      	ldr	r1, [r2, #0]
  400244:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
  400248:	6011      	str	r1, [r2, #0]
	  REG_PIOA_CODR |= PIO_PER_P16; //set output low on PA16 as default
  40024a:	681a      	ldr	r2, [r3, #0]
  40024c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  400250:	601a      	str	r2, [r3, #0]
  400252:	4770      	bx	lr
  400254:	400e0410 	.word	0x400e0410
  400258:	400e0e00 	.word	0x400e0e00
  40025c:	400e0e34 	.word	0x400e0e34

00400260 <Encoder_init>:
}

void Encoder_init(){
  400260:	b470      	push	{r4, r5, r6}
	 //Set up PA12 as BUTTON INPUT
	 REG_PIOA_PER |= PIO_PER_P12; //enable PIO controller on PA12
  400262:	4d36      	ldr	r5, [pc, #216]	; (40033c <Encoder_init+0xdc>)
  400264:	682b      	ldr	r3, [r5, #0]
  400266:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  40026a:	602b      	str	r3, [r5, #0]
	 REG_PIOA_ODR |= PIO_ODR_P12; //disable output on pin PA12
  40026c:	4c34      	ldr	r4, [pc, #208]	; (400340 <Encoder_init+0xe0>)
  40026e:	6823      	ldr	r3, [r4, #0]
  400270:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  400274:	6023      	str	r3, [r4, #0]
	 REG_PIOA_PPDDR |= PIO_PPDDR_P12; //disable pull-down resistor on PA12
  400276:	4833      	ldr	r0, [pc, #204]	; (400344 <Encoder_init+0xe4>)
  400278:	6803      	ldr	r3, [r0, #0]
  40027a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  40027e:	6003      	str	r3, [r0, #0]
	 REG_PIOA_PUER |= PIO_PUER_P12;	//enable pull-up resistor on PA12
  400280:	4931      	ldr	r1, [pc, #196]	; (400348 <Encoder_init+0xe8>)
  400282:	680b      	ldr	r3, [r1, #0]
  400284:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  400288:	600b      	str	r3, [r1, #0]
	 REG_PIOA_IFSCER |= PIO_IFSCER_P12; //turn on slow clock debounce
  40028a:	4a30      	ldr	r2, [pc, #192]	; (40034c <Encoder_init+0xec>)
  40028c:	6813      	ldr	r3, [r2, #0]
  40028e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  400292:	6013      	str	r3, [r2, #0]
	 REG_PIOA_IFER |= PIO_IFER_P12;	//start debounce filter
  400294:	4b2e      	ldr	r3, [pc, #184]	; (400350 <Encoder_init+0xf0>)
  400296:	681e      	ldr	r6, [r3, #0]
  400298:	f446 5680 	orr.w	r6, r6, #4096	; 0x1000
  40029c:	601e      	str	r6, [r3, #0]

	 //Set up PA13 as ENCODER INPUT A
	 REG_PIOA_PER |= PIO_PER_P13; //enable PIO controller on PA13
  40029e:	682e      	ldr	r6, [r5, #0]
  4002a0:	f446 5600 	orr.w	r6, r6, #8192	; 0x2000
  4002a4:	602e      	str	r6, [r5, #0]
	 REG_PIOA_ODR |= PIO_ODR_P13; //disable output on pin PA13
  4002a6:	6826      	ldr	r6, [r4, #0]
  4002a8:	f446 5600 	orr.w	r6, r6, #8192	; 0x2000
  4002ac:	6026      	str	r6, [r4, #0]
	 REG_PIOA_PPDDR |= PIO_PPDDR_P13; //disable pull-down resistor on PA13
  4002ae:	6806      	ldr	r6, [r0, #0]
  4002b0:	f446 5600 	orr.w	r6, r6, #8192	; 0x2000
  4002b4:	6006      	str	r6, [r0, #0]
	 REG_PIOA_PUER |= PIO_PUER_P13;	//enable pull-up resistor on PA13
  4002b6:	680e      	ldr	r6, [r1, #0]
  4002b8:	f446 5600 	orr.w	r6, r6, #8192	; 0x2000
  4002bc:	600e      	str	r6, [r1, #0]
	 REG_PIOA_IFSCER |= PIO_IFSCER_P13; //turn on slow clock debounce
  4002be:	6816      	ldr	r6, [r2, #0]
  4002c0:	f446 5600 	orr.w	r6, r6, #8192	; 0x2000
  4002c4:	6016      	str	r6, [r2, #0]
	 REG_PIOA_IFER |= PIO_IFER_P13;	//start debounce filter
  4002c6:	681e      	ldr	r6, [r3, #0]
  4002c8:	f446 5600 	orr.w	r6, r6, #8192	; 0x2000
  4002cc:	601e      	str	r6, [r3, #0]

	 //Set up PA12 as ENCODER INPUT B
	 REG_PIOA_PER |= PIO_PER_P14; //enable PIO controller on PA14
  4002ce:	682e      	ldr	r6, [r5, #0]
  4002d0:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
  4002d4:	602e      	str	r6, [r5, #0]
	 REG_PIOA_ODR |= PIO_ODR_P14; //disable output on pin PA14
  4002d6:	6825      	ldr	r5, [r4, #0]
  4002d8:	f445 4580 	orr.w	r5, r5, #16384	; 0x4000
  4002dc:	6025      	str	r5, [r4, #0]
	 REG_PIOA_PPDDR |= PIO_PPDDR_P14; //disable pull-down resistor on PA14
  4002de:	6804      	ldr	r4, [r0, #0]
  4002e0:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
  4002e4:	6004      	str	r4, [r0, #0]
	 REG_PIOA_PUER |= PIO_PUER_P14;	//enable pull-up resistor on PA14
  4002e6:	6808      	ldr	r0, [r1, #0]
  4002e8:	f440 4080 	orr.w	r0, r0, #16384	; 0x4000
  4002ec:	6008      	str	r0, [r1, #0]
	 REG_PIOA_IFSCER |= PIO_IFSCER_P14; //turn on slow clock debounce
  4002ee:	6811      	ldr	r1, [r2, #0]
  4002f0:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
  4002f4:	6011      	str	r1, [r2, #0]
	 REG_PIOA_IFER |= PIO_IFER_P14;	//start debounce filter
  4002f6:	681a      	ldr	r2, [r3, #0]
  4002f8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
  4002fc:	601a      	str	r2, [r3, #0]
	 

	 uint32_t flag_clear = REG_PIOA_ISR;	//clear left over interrupt flags
  4002fe:	332c      	adds	r3, #44	; 0x2c
  400300:	681b      	ldr	r3, [r3, #0]
	 REG_PIOA_IER |= PIO_IER_P12;			//enable input level change interrupt on P12
  400302:	4b14      	ldr	r3, [pc, #80]	; (400354 <Encoder_init+0xf4>)
  400304:	681a      	ldr	r2, [r3, #0]
  400306:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
  40030a:	601a      	str	r2, [r3, #0]
	 REG_PIOA_IER |= PIO_IER_P13;			//enable input level change interrupt on P13
  40030c:	681a      	ldr	r2, [r3, #0]
  40030e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  400312:	601a      	str	r2, [r3, #0]
	 REG_PIOA_REHLSR |= PIO_REHLSR_P13;
  400314:	4a10      	ldr	r2, [pc, #64]	; (400358 <Encoder_init+0xf8>)
  400316:	6811      	ldr	r1, [r2, #0]
  400318:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
  40031c:	6011      	str	r1, [r2, #0]
	 REG_PIOA_IER |= PIO_IER_P14;			//enable input level change interrupt on P14
  40031e:	6819      	ldr	r1, [r3, #0]
  400320:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
  400324:	6019      	str	r1, [r3, #0]
	 REG_PIOA_REHLSR |= PIO_REHLSR_P14;
  400326:	6813      	ldr	r3, [r2, #0]
  400328:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  40032c:	6013      	str	r3, [r2, #0]
  40032e:	f44f 6200 	mov.w	r2, #2048	; 0x800
  400332:	4b0a      	ldr	r3, [pc, #40]	; (40035c <Encoder_init+0xfc>)
  400334:	601a      	str	r2, [r3, #0]
	 NVIC_EnableIRQ(PIOA_IRQn);				//enable PORT A interrupts
}
  400336:	bc70      	pop	{r4, r5, r6}
  400338:	4770      	bx	lr
  40033a:	bf00      	nop
  40033c:	400e0e00 	.word	0x400e0e00
  400340:	400e0e14 	.word	0x400e0e14
  400344:	400e0e90 	.word	0x400e0e90
  400348:	400e0e64 	.word	0x400e0e64
  40034c:	400e0e84 	.word	0x400e0e84
  400350:	400e0e20 	.word	0x400e0e20
  400354:	400e0e40 	.word	0x400e0e40
  400358:	400e0ed4 	.word	0x400e0ed4
  40035c:	e000e100 	.word	0xe000e100

00400360 <board_init>:

void board_init(void)
{
  400360:	b508      	push	{r3, lr}
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
	 LED_init();
  400362:	4b02      	ldr	r3, [pc, #8]	; (40036c <board_init+0xc>)
  400364:	4798      	blx	r3
	 Encoder_init();
  400366:	4b02      	ldr	r3, [pc, #8]	; (400370 <board_init+0x10>)
  400368:	4798      	blx	r3
  40036a:	bd08      	pop	{r3, pc}
  40036c:	004001f9 	.word	0x004001f9
  400370:	00400261 	.word	0x00400261

00400374 <sysclk_init>:

	SystemCoreClockUpdate();
}

void sysclk_init(void)
{
  400374:	b510      	push	{r4, lr}
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  400376:	480e      	ldr	r0, [pc, #56]	; (4003b0 <sysclk_init+0x3c>)
  400378:	4b0e      	ldr	r3, [pc, #56]	; (4003b4 <sysclk_init+0x40>)
  40037a:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
		break;

	case OSC_MAINCK_8M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
  40037c:	2010      	movs	r0, #16
  40037e:	4b0e      	ldr	r3, [pc, #56]	; (4003b8 <sysclk_init+0x44>)
  400380:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  400382:	4c0e      	ldr	r4, [pc, #56]	; (4003bc <sysclk_init+0x48>)
  400384:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  400386:	2800      	cmp	r0, #0
  400388:	d0fc      	beq.n	400384 <sysclk_init+0x10>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  40038a:	4b0d      	ldr	r3, [pc, #52]	; (4003c0 <sysclk_init+0x4c>)
  40038c:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  40038e:	4a0d      	ldr	r2, [pc, #52]	; (4003c4 <sysclk_init+0x50>)
  400390:	4b0d      	ldr	r3, [pc, #52]	; (4003c8 <sysclk_init+0x54>)
  400392:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
  400394:	4c0d      	ldr	r4, [pc, #52]	; (4003cc <sysclk_init+0x58>)
  400396:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  400398:	2800      	cmp	r0, #0
  40039a:	d0fc      	beq.n	400396 <sysclk_init+0x22>

		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  40039c:	2010      	movs	r0, #16
  40039e:	4b0c      	ldr	r3, [pc, #48]	; (4003d0 <sysclk_init+0x5c>)
  4003a0:	4798      	blx	r3
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  4003a2:	4b0c      	ldr	r3, [pc, #48]	; (4003d4 <sysclk_init+0x60>)
  4003a4:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  4003a6:	4802      	ldr	r0, [pc, #8]	; (4003b0 <sysclk_init+0x3c>)
  4003a8:	4b02      	ldr	r3, [pc, #8]	; (4003b4 <sysclk_init+0x40>)
  4003aa:	4798      	blx	r3
  4003ac:	bd10      	pop	{r4, pc}
  4003ae:	bf00      	nop
  4003b0:	05f5e100 	.word	0x05f5e100
  4003b4:	00400669 	.word	0x00400669
  4003b8:	00400441 	.word	0x00400441
  4003bc:	0040048d 	.word	0x0040048d
  4003c0:	0040049d 	.word	0x0040049d
  4003c4:	20183f01 	.word	0x20183f01
  4003c8:	400e0400 	.word	0x400e0400
  4003cc:	004004ad 	.word	0x004004ad
  4003d0:	004003d9 	.word	0x004003d9
  4003d4:	00400559 	.word	0x00400559

004003d8 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  4003d8:	4a18      	ldr	r2, [pc, #96]	; (40043c <pmc_switch_mck_to_pllack+0x64>)
  4003da:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4003dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  4003e0:	4318      	orrs	r0, r3
  4003e2:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4003e4:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4003e6:	f013 0f08 	tst.w	r3, #8
  4003ea:	d003      	beq.n	4003f4 <pmc_switch_mck_to_pllack+0x1c>
  4003ec:	e009      	b.n	400402 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4003ee:	3b01      	subs	r3, #1
  4003f0:	d103      	bne.n	4003fa <pmc_switch_mck_to_pllack+0x22>
  4003f2:	e01e      	b.n	400432 <pmc_switch_mck_to_pllack+0x5a>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4003f4:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4003f8:	4910      	ldr	r1, [pc, #64]	; (40043c <pmc_switch_mck_to_pllack+0x64>)
  4003fa:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4003fc:	f012 0f08 	tst.w	r2, #8
  400400:	d0f5      	beq.n	4003ee <pmc_switch_mck_to_pllack+0x16>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  400402:	4a0e      	ldr	r2, [pc, #56]	; (40043c <pmc_switch_mck_to_pllack+0x64>)
  400404:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400406:	f023 0303 	bic.w	r3, r3, #3
  40040a:	f043 0302 	orr.w	r3, r3, #2
  40040e:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400410:	6e90      	ldr	r0, [r2, #104]	; 0x68
  400412:	f010 0008 	ands.w	r0, r0, #8
  400416:	d004      	beq.n	400422 <pmc_switch_mck_to_pllack+0x4a>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
  400418:	2000      	movs	r0, #0
  40041a:	4770      	bx	lr
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
  40041c:	3b01      	subs	r3, #1
  40041e:	d103      	bne.n	400428 <pmc_switch_mck_to_pllack+0x50>
  400420:	e009      	b.n	400436 <pmc_switch_mck_to_pllack+0x5e>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400422:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400426:	4905      	ldr	r1, [pc, #20]	; (40043c <pmc_switch_mck_to_pllack+0x64>)
  400428:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  40042a:	f012 0f08 	tst.w	r2, #8
  40042e:	d0f5      	beq.n	40041c <pmc_switch_mck_to_pllack+0x44>
  400430:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  400432:	2001      	movs	r0, #1
  400434:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  400436:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  400438:	4770      	bx	lr
  40043a:	bf00      	nop
  40043c:	400e0400 	.word	0x400e0400

00400440 <pmc_switch_mainck_to_fastrc>:
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
  400440:	4b11      	ldr	r3, [pc, #68]	; (400488 <pmc_switch_mainck_to_fastrc+0x48>)
  400442:	6a1a      	ldr	r2, [r3, #32]
  400444:	f442 125c 	orr.w	r2, r2, #3604480	; 0x370000
  400448:	f042 0208 	orr.w	r2, r2, #8
  40044c:	621a      	str	r2, [r3, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  40044e:	461a      	mov	r2, r3
  400450:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400452:	f413 3f00 	tst.w	r3, #131072	; 0x20000
  400456:	d0fb      	beq.n	400450 <pmc_switch_mainck_to_fastrc+0x10>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  400458:	4a0b      	ldr	r2, [pc, #44]	; (400488 <pmc_switch_mainck_to_fastrc+0x48>)
  40045a:	6a13      	ldr	r3, [r2, #32]
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
  40045c:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  400460:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  400464:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  400468:	4303      	orrs	r3, r0

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  40046a:	6213      	str	r3, [r2, #32]
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  40046c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40046e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
  400472:	d0fb      	beq.n	40046c <pmc_switch_mainck_to_fastrc+0x2c>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  400474:	4a04      	ldr	r2, [pc, #16]	; (400488 <pmc_switch_mainck_to_fastrc+0x48>)
  400476:	6a13      	ldr	r3, [r2, #32]
  400478:	f023 739b 	bic.w	r3, r3, #20316160	; 0x1360000
  40047c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  400480:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  400484:	6213      	str	r3, [r2, #32]
  400486:	4770      	bx	lr
  400488:	400e0400 	.word	0x400e0400

0040048c <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  40048c:	4b02      	ldr	r3, [pc, #8]	; (400498 <pmc_osc_is_ready_mainck+0xc>)
  40048e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400490:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  400494:	4770      	bx	lr
  400496:	bf00      	nop
  400498:	400e0400 	.word	0x400e0400

0040049c <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  40049c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  4004a0:	4b01      	ldr	r3, [pc, #4]	; (4004a8 <pmc_disable_pllack+0xc>)
  4004a2:	629a      	str	r2, [r3, #40]	; 0x28
  4004a4:	4770      	bx	lr
  4004a6:	bf00      	nop
  4004a8:	400e0400 	.word	0x400e0400

004004ac <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  4004ac:	4b02      	ldr	r3, [pc, #8]	; (4004b8 <pmc_is_locked_pllack+0xc>)
  4004ae:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4004b0:	f000 0002 	and.w	r0, r0, #2
  4004b4:	4770      	bx	lr
  4004b6:	bf00      	nop
  4004b8:	400e0400 	.word	0x400e0400

004004bc <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  4004bc:	e7fe      	b.n	4004bc <Dummy_Handler>
  4004be:	bf00      	nop

004004c0 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  4004c0:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
  4004c2:	4b19      	ldr	r3, [pc, #100]	; (400528 <Reset_Handler+0x68>)
  4004c4:	4a19      	ldr	r2, [pc, #100]	; (40052c <Reset_Handler+0x6c>)
  4004c6:	429a      	cmp	r2, r3
  4004c8:	d003      	beq.n	4004d2 <Reset_Handler+0x12>
		for (; pDest < &_erelocate;) {
  4004ca:	4b19      	ldr	r3, [pc, #100]	; (400530 <Reset_Handler+0x70>)
  4004cc:	4a16      	ldr	r2, [pc, #88]	; (400528 <Reset_Handler+0x68>)
  4004ce:	429a      	cmp	r2, r3
  4004d0:	d304      	bcc.n	4004dc <Reset_Handler+0x1c>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  4004d2:	4b18      	ldr	r3, [pc, #96]	; (400534 <Reset_Handler+0x74>)
  4004d4:	4a18      	ldr	r2, [pc, #96]	; (400538 <Reset_Handler+0x78>)
  4004d6:	429a      	cmp	r2, r3
  4004d8:	d30f      	bcc.n	4004fa <Reset_Handler+0x3a>
  4004da:	e01a      	b.n	400512 <Reset_Handler+0x52>
  4004dc:	4912      	ldr	r1, [pc, #72]	; (400528 <Reset_Handler+0x68>)
  4004de:	4b17      	ldr	r3, [pc, #92]	; (40053c <Reset_Handler+0x7c>)
  4004e0:	1a5b      	subs	r3, r3, r1
  4004e2:	f023 0303 	bic.w	r3, r3, #3
  4004e6:	3304      	adds	r3, #4
  4004e8:	4a10      	ldr	r2, [pc, #64]	; (40052c <Reset_Handler+0x6c>)
  4004ea:	4413      	add	r3, r2
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
			*pDest++ = *pSrc++;
  4004ec:	f852 0b04 	ldr.w	r0, [r2], #4
  4004f0:	f841 0b04 	str.w	r0, [r1], #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
  4004f4:	429a      	cmp	r2, r3
  4004f6:	d1f9      	bne.n	4004ec <Reset_Handler+0x2c>
  4004f8:	e7eb      	b.n	4004d2 <Reset_Handler+0x12>
  4004fa:	4b11      	ldr	r3, [pc, #68]	; (400540 <Reset_Handler+0x80>)
  4004fc:	4a11      	ldr	r2, [pc, #68]	; (400544 <Reset_Handler+0x84>)
  4004fe:	1ad2      	subs	r2, r2, r3
  400500:	f022 0203 	bic.w	r2, r2, #3
  400504:	441a      	add	r2, r3
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  400506:	3b04      	subs	r3, #4
		*pDest++ = 0;
  400508:	2100      	movs	r1, #0
  40050a:	f843 1b04 	str.w	r1, [r3], #4
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  40050e:	4293      	cmp	r3, r2
  400510:	d1fb      	bne.n	40050a <Reset_Handler+0x4a>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  400512:	4a0d      	ldr	r2, [pc, #52]	; (400548 <Reset_Handler+0x88>)
  400514:	4b0d      	ldr	r3, [pc, #52]	; (40054c <Reset_Handler+0x8c>)
  400516:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  40051a:	6093      	str	r3, [r2, #8]

	/* Initialize the C library */
	__libc_init_array();
  40051c:	4b0c      	ldr	r3, [pc, #48]	; (400550 <Reset_Handler+0x90>)
  40051e:	4798      	blx	r3

	/* Branch to main function */
	main();
  400520:	4b0c      	ldr	r3, [pc, #48]	; (400554 <Reset_Handler+0x94>)
  400522:	4798      	blx	r3
  400524:	e7fe      	b.n	400524 <Reset_Handler+0x64>
  400526:	bf00      	nop
  400528:	20000000 	.word	0x20000000
  40052c:	004009c8 	.word	0x004009c8
  400530:	20000438 	.word	0x20000438
  400534:	2000045c 	.word	0x2000045c
  400538:	20000438 	.word	0x20000438
  40053c:	20000437 	.word	0x20000437
  400540:	2000043c 	.word	0x2000043c
  400544:	2000045f 	.word	0x2000045f
  400548:	e000ed00 	.word	0xe000ed00
  40054c:	00400000 	.word	0x00400000
  400550:	00400861 	.word	0x00400861
  400554:	004006c9 	.word	0x004006c9

00400558 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) {
  400558:	4b3c      	ldr	r3, [pc, #240]	; (40064c <SystemCoreClockUpdate+0xf4>)
  40055a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40055c:	f003 0303 	and.w	r3, r3, #3
  400560:	2b01      	cmp	r3, #1
  400562:	d00f      	beq.n	400584 <SystemCoreClockUpdate+0x2c>
  400564:	b113      	cbz	r3, 40056c <SystemCoreClockUpdate+0x14>
  400566:	2b02      	cmp	r3, #2
  400568:	d029      	beq.n	4005be <SystemCoreClockUpdate+0x66>
  40056a:	e057      	b.n	40061c <SystemCoreClockUpdate+0xc4>
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
  40056c:	4b38      	ldr	r3, [pc, #224]	; (400650 <SystemCoreClockUpdate+0xf8>)
  40056e:	695b      	ldr	r3, [r3, #20]
  400570:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
  400574:	bf14      	ite	ne
  400576:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
  40057a:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  40057e:	4b35      	ldr	r3, [pc, #212]	; (400654 <SystemCoreClockUpdate+0xfc>)
  400580:	601a      	str	r2, [r3, #0]
  400582:	e04b      	b.n	40061c <SystemCoreClockUpdate+0xc4>
		}
		break;

	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
  400584:	4b31      	ldr	r3, [pc, #196]	; (40064c <SystemCoreClockUpdate+0xf4>)
  400586:	6a1b      	ldr	r3, [r3, #32]
  400588:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  40058c:	d003      	beq.n	400596 <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
  40058e:	4a32      	ldr	r2, [pc, #200]	; (400658 <SystemCoreClockUpdate+0x100>)
  400590:	4b30      	ldr	r3, [pc, #192]	; (400654 <SystemCoreClockUpdate+0xfc>)
  400592:	601a      	str	r2, [r3, #0]
  400594:	e042      	b.n	40061c <SystemCoreClockUpdate+0xc4>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400596:	4a31      	ldr	r2, [pc, #196]	; (40065c <SystemCoreClockUpdate+0x104>)
  400598:	4b2e      	ldr	r3, [pc, #184]	; (400654 <SystemCoreClockUpdate+0xfc>)
  40059a:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
  40059c:	4b2b      	ldr	r3, [pc, #172]	; (40064c <SystemCoreClockUpdate+0xf4>)
  40059e:	6a1b      	ldr	r3, [r3, #32]
  4005a0:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4005a4:	2b10      	cmp	r3, #16
  4005a6:	d002      	beq.n	4005ae <SystemCoreClockUpdate+0x56>
  4005a8:	2b20      	cmp	r3, #32
  4005aa:	d004      	beq.n	4005b6 <SystemCoreClockUpdate+0x5e>
  4005ac:	e036      	b.n	40061c <SystemCoreClockUpdate+0xc4>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;

			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
  4005ae:	4a2c      	ldr	r2, [pc, #176]	; (400660 <SystemCoreClockUpdate+0x108>)
  4005b0:	4b28      	ldr	r3, [pc, #160]	; (400654 <SystemCoreClockUpdate+0xfc>)
  4005b2:	601a      	str	r2, [r3, #0]
				break;
  4005b4:	e032      	b.n	40061c <SystemCoreClockUpdate+0xc4>

			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
  4005b6:	4a28      	ldr	r2, [pc, #160]	; (400658 <SystemCoreClockUpdate+0x100>)
  4005b8:	4b26      	ldr	r3, [pc, #152]	; (400654 <SystemCoreClockUpdate+0xfc>)
  4005ba:	601a      	str	r2, [r3, #0]
				break;
  4005bc:	e02e      	b.n	40061c <SystemCoreClockUpdate+0xc4>
			}
		}
		break;

	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
  4005be:	4b23      	ldr	r3, [pc, #140]	; (40064c <SystemCoreClockUpdate+0xf4>)
  4005c0:	6a1b      	ldr	r3, [r3, #32]
  4005c2:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4005c6:	d003      	beq.n	4005d0 <SystemCoreClockUpdate+0x78>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
  4005c8:	4a23      	ldr	r2, [pc, #140]	; (400658 <SystemCoreClockUpdate+0x100>)
  4005ca:	4b22      	ldr	r3, [pc, #136]	; (400654 <SystemCoreClockUpdate+0xfc>)
  4005cc:	601a      	str	r2, [r3, #0]
  4005ce:	e012      	b.n	4005f6 <SystemCoreClockUpdate+0x9e>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4005d0:	4a22      	ldr	r2, [pc, #136]	; (40065c <SystemCoreClockUpdate+0x104>)
  4005d2:	4b20      	ldr	r3, [pc, #128]	; (400654 <SystemCoreClockUpdate+0xfc>)
  4005d4:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
  4005d6:	4b1d      	ldr	r3, [pc, #116]	; (40064c <SystemCoreClockUpdate+0xf4>)
  4005d8:	6a1b      	ldr	r3, [r3, #32]
  4005da:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4005de:	2b10      	cmp	r3, #16
  4005e0:	d002      	beq.n	4005e8 <SystemCoreClockUpdate+0x90>
  4005e2:	2b20      	cmp	r3, #32
  4005e4:	d004      	beq.n	4005f0 <SystemCoreClockUpdate+0x98>
  4005e6:	e006      	b.n	4005f6 <SystemCoreClockUpdate+0x9e>
				/* So the 4MHz RC selection is forbidden */
				Assert(false);
				break;

			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
  4005e8:	4a1d      	ldr	r2, [pc, #116]	; (400660 <SystemCoreClockUpdate+0x108>)
  4005ea:	4b1a      	ldr	r3, [pc, #104]	; (400654 <SystemCoreClockUpdate+0xfc>)
  4005ec:	601a      	str	r2, [r3, #0]
				break;
  4005ee:	e002      	b.n	4005f6 <SystemCoreClockUpdate+0x9e>

			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
  4005f0:	4a19      	ldr	r2, [pc, #100]	; (400658 <SystemCoreClockUpdate+0x100>)
  4005f2:	4b18      	ldr	r3, [pc, #96]	; (400654 <SystemCoreClockUpdate+0xfc>)
  4005f4:	601a      	str	r2, [r3, #0]
			default:
				break;
			}
		}

		if ((uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
  4005f6:	4b15      	ldr	r3, [pc, #84]	; (40064c <SystemCoreClockUpdate+0xf4>)
  4005f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4005fa:	f003 0303 	and.w	r3, r3, #3
  4005fe:	2b02      	cmp	r3, #2
  400600:	d10c      	bne.n	40061c <SystemCoreClockUpdate+0xc4>
				PMC_MCKR_CSS_PLLA_CLK) {
			SystemCoreClock *=
					((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  400602:	4a12      	ldr	r2, [pc, #72]	; (40064c <SystemCoreClockUpdate+0xf4>)
  400604:	6a93      	ldr	r3, [r2, #40]	; 0x28
					>> CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  400606:	6a92      	ldr	r2, [r2, #40]	; 0x28
  400608:	4812      	ldr	r0, [pc, #72]	; (400654 <SystemCoreClockUpdate+0xfc>)
  40060a:	f3c3 410a 	ubfx	r1, r3, #16, #11
  40060e:	6803      	ldr	r3, [r0, #0]
  400610:	fb01 3303 	mla	r3, r1, r3, r3
  400614:	b2d2      	uxtb	r2, r2
  400616:	fbb3 f3f2 	udiv	r3, r3, r2
  40061a:	6003      	str	r3, [r0, #0]

	default:
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
  40061c:	4b0b      	ldr	r3, [pc, #44]	; (40064c <SystemCoreClockUpdate+0xf4>)
  40061e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400620:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400624:	2b70      	cmp	r3, #112	; 0x70
  400626:	d107      	bne.n	400638 <SystemCoreClockUpdate+0xe0>
		SystemCoreClock /= 3U;
  400628:	4a0a      	ldr	r2, [pc, #40]	; (400654 <SystemCoreClockUpdate+0xfc>)
  40062a:	6813      	ldr	r3, [r2, #0]
  40062c:	490d      	ldr	r1, [pc, #52]	; (400664 <SystemCoreClockUpdate+0x10c>)
  40062e:	fba1 1303 	umull	r1, r3, r1, r3
  400632:	085b      	lsrs	r3, r3, #1
  400634:	6013      	str	r3, [r2, #0]
  400636:	4770      	bx	lr
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >>
  400638:	4b04      	ldr	r3, [pc, #16]	; (40064c <SystemCoreClockUpdate+0xf4>)
  40063a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40063c:	4905      	ldr	r1, [pc, #20]	; (400654 <SystemCoreClockUpdate+0xfc>)
  40063e:	f3c3 1202 	ubfx	r2, r3, #4, #3
  400642:	680b      	ldr	r3, [r1, #0]
  400644:	40d3      	lsrs	r3, r2
  400646:	600b      	str	r3, [r1, #0]
  400648:	4770      	bx	lr
  40064a:	bf00      	nop
  40064c:	400e0400 	.word	0x400e0400
  400650:	400e1410 	.word	0x400e1410
  400654:	20000000 	.word	0x20000000
  400658:	00b71b00 	.word	0x00b71b00
  40065c:	003d0900 	.word	0x003d0900
  400660:	007a1200 	.word	0x007a1200
  400664:	aaaaaaab 	.word	0xaaaaaaab

00400668 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
  400668:	4b0f      	ldr	r3, [pc, #60]	; (4006a8 <system_init_flash+0x40>)
  40066a:	4298      	cmp	r0, r3
  40066c:	d804      	bhi.n	400678 <system_init_flash+0x10>
		EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  40066e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  400672:	4b0e      	ldr	r3, [pc, #56]	; (4006ac <system_init_flash+0x44>)
  400674:	601a      	str	r2, [r3, #0]
  400676:	4770      	bx	lr
	} else {
		if (ul_clk < CHIP_FREQ_FWS_1) {
  400678:	4b0d      	ldr	r3, [pc, #52]	; (4006b0 <system_init_flash+0x48>)
  40067a:	4298      	cmp	r0, r3
  40067c:	d803      	bhi.n	400686 <system_init_flash+0x1e>
			EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  40067e:	4a0d      	ldr	r2, [pc, #52]	; (4006b4 <system_init_flash+0x4c>)
  400680:	4b0a      	ldr	r3, [pc, #40]	; (4006ac <system_init_flash+0x44>)
  400682:	601a      	str	r2, [r3, #0]
  400684:	4770      	bx	lr
		} else {
			if (ul_clk < CHIP_FREQ_FWS_2) {
  400686:	4b0c      	ldr	r3, [pc, #48]	; (4006b8 <system_init_flash+0x50>)
  400688:	4298      	cmp	r0, r3
  40068a:	d803      	bhi.n	400694 <system_init_flash+0x2c>
				EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  40068c:	4a0b      	ldr	r2, [pc, #44]	; (4006bc <system_init_flash+0x54>)
  40068e:	4b07      	ldr	r3, [pc, #28]	; (4006ac <system_init_flash+0x44>)
  400690:	601a      	str	r2, [r3, #0]
  400692:	4770      	bx	lr
			} else {
				if (ul_clk < CHIP_FREQ_FWS_3) {
  400694:	4b0a      	ldr	r3, [pc, #40]	; (4006c0 <system_init_flash+0x58>)
  400696:	4298      	cmp	r0, r3
					EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  400698:	bf94      	ite	ls
  40069a:	4a0a      	ldrls	r2, [pc, #40]	; (4006c4 <system_init_flash+0x5c>)
				} else {
					EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  40069c:	f04f 2204 	movhi.w	r2, #67109888	; 0x4000400
  4006a0:	4b02      	ldr	r3, [pc, #8]	; (4006ac <system_init_flash+0x44>)
  4006a2:	601a      	str	r2, [r3, #0]
  4006a4:	4770      	bx	lr
  4006a6:	bf00      	nop
  4006a8:	01312cff 	.word	0x01312cff
  4006ac:	400e0a00 	.word	0x400e0a00
  4006b0:	026259ff 	.word	0x026259ff
  4006b4:	04000100 	.word	0x04000100
  4006b8:	039386ff 	.word	0x039386ff
  4006bc:	04000200 	.word	0x04000200
  4006c0:	04c4b3ff 	.word	0x04c4b3ff
  4006c4:	04000300 	.word	0x04000300

004006c8 <main>:
uint8_t count_right = 0;

int bpm = 128;
bool bpm_input = true;

int main (void) {
  4006c8:	b508      	push	{r3, lr}

	sysclk_init();				//initialize system clock
  4006ca:	4b07      	ldr	r3, [pc, #28]	; (4006e8 <main+0x20>)
  4006cc:	4798      	blx	r3
	board_init();				//board init (currently empty)
  4006ce:	4b07      	ldr	r3, [pc, #28]	; (4006ec <main+0x24>)
  4006d0:	4798      	blx	r3
	timers_init();				//initiate timer for LED on PA11
  4006d2:	4b07      	ldr	r3, [pc, #28]	; (4006f0 <main+0x28>)
  4006d4:	4798      	blx	r3
	WDT->WDT_MR = WDT_MR_WDDIS; //disable watchdog timer
  4006d6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4006da:	4b06      	ldr	r3, [pc, #24]	; (4006f4 <main+0x2c>)
  4006dc:	605a      	str	r2, [r3, #4]
	update_timers(bpm);
  4006de:	4b06      	ldr	r3, [pc, #24]	; (4006f8 <main+0x30>)
  4006e0:	6818      	ldr	r0, [r3, #0]
  4006e2:	4b06      	ldr	r3, [pc, #24]	; (4006fc <main+0x34>)
  4006e4:	4798      	blx	r3
  4006e6:	e7fe      	b.n	4006e6 <main+0x1e>
  4006e8:	00400375 	.word	0x00400375
  4006ec:	00400361 	.word	0x00400361
  4006f0:	0040011d 	.word	0x0040011d
  4006f4:	400e1450 	.word	0x400e1450
  4006f8:	20000008 	.word	0x20000008
  4006fc:	00400199 	.word	0x00400199

00400700 <PIOA_Handler>:
}

//turn LED ON/OFF when interrupt triggered on PA12
void PIOA_Handler(void){

	uint32_t status = REG_PIOA_ISR;	//read PIOA interrupt status & clear interrupt flags
  400700:	4b4a      	ldr	r3, [pc, #296]	; (40082c <PIOA_Handler+0x12c>)
  400702:	681b      	ldr	r3, [r3, #0]

	if ((status & PIO_ISR_P12)){	//check if Encoder Button was pressed
  400704:	f413 5f80 	tst.w	r3, #4096	; 0x1000
  400708:	d00b      	beq.n	400722 <PIOA_Handler+0x22>
		//check if PA11 is HIGH or LOW
				if ( (REG_PIOA_PDSR & PIO_ODSR_P12) >= 1){	//if PA12 is HIGH
  40070a:	4b49      	ldr	r3, [pc, #292]	; (400830 <PIOA_Handler+0x130>)
  40070c:	681b      	ldr	r3, [r3, #0]
  40070e:	f413 5f80 	tst.w	r3, #4096	; 0x1000
					Right = false;
  400712:	bf14      	ite	ne
  400714:	2300      	movne	r3, #0
					Left = false;
				}
				else{
					Right = true;
  400716:	2301      	moveq	r3, #1
  400718:	4a46      	ldr	r2, [pc, #280]	; (400834 <PIOA_Handler+0x134>)
  40071a:	7013      	strb	r3, [r2, #0]
					Left = true;
  40071c:	4a46      	ldr	r2, [pc, #280]	; (400838 <PIOA_Handler+0x138>)
  40071e:	7013      	strb	r3, [r2, #0]
  400720:	4770      	bx	lr
	while (1) {
	}
}

//turn LED ON/OFF when interrupt triggered on PA12
void PIOA_Handler(void){
  400722:	b510      	push	{r4, lr}
				}
	}

	//  handle Encoder signal inputs
 	else {	
		bpm_input = true;
  400724:	2201      	movs	r2, #1
  400726:	4b45      	ldr	r3, [pc, #276]	; (40083c <PIOA_Handler+0x13c>)
  400728:	701a      	strb	r2, [r3, #0]
		//read Encoder input A
		bool A_in = REG_PIOA_PDSR & PIO_ODSR_P13;
  40072a:	4a41      	ldr	r2, [pc, #260]	; (400830 <PIOA_Handler+0x130>)
  40072c:	6813      	ldr	r3, [r2, #0]
		//read Encoder input B
		bool B_in = REG_PIOA_PDSR & PIO_ODSR_P14;
  40072e:	6812      	ldr	r2, [r2, #0]

		A_seq = A_seq << 1;
		A_seq |= A_in;

		B_seq = B_seq << 1;
  400730:	4943      	ldr	r1, [pc, #268]	; (400840 <PIOA_Handler+0x140>)
		B_seq |= B_in;
  400732:	7808      	ldrb	r0, [r1, #0]
  400734:	f3c2 3280 	ubfx	r2, r2, #14, #1
  400738:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
		//read Encoder input A
		bool A_in = REG_PIOA_PDSR & PIO_ODSR_P13;
		//read Encoder input B
		bool B_in = REG_PIOA_PDSR & PIO_ODSR_P14;

		A_seq = A_seq << 1;
  40073c:	4841      	ldr	r0, [pc, #260]	; (400844 <PIOA_Handler+0x144>)
		A_seq |= A_in;

		B_seq = B_seq << 1;
		B_seq |= B_in;

		A_seq &= 0b00001111;
  40073e:	7804      	ldrb	r4, [r0, #0]
  400740:	f3c3 3340 	ubfx	r3, r3, #13, #1
  400744:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
  400748:	f003 030f 	and.w	r3, r3, #15
  40074c:	7003      	strb	r3, [r0, #0]
		B_seq &= 0b00001111;
  40074e:	f002 020f 	and.w	r2, r2, #15
  400752:	700a      	strb	r2, [r1, #0]

		if ((A_seq == 0b00001001) && (B_seq == 0b00000011)){
  400754:	2b09      	cmp	r3, #9
  400756:	d110      	bne.n	40077a <PIOA_Handler+0x7a>
  400758:	2a03      	cmp	r2, #3
  40075a:	d121      	bne.n	4007a0 <PIOA_Handler+0xa0>
			Left = false;
  40075c:	2200      	movs	r2, #0
  40075e:	4b36      	ldr	r3, [pc, #216]	; (400838 <PIOA_Handler+0x138>)
  400760:	701a      	strb	r2, [r3, #0]
			Right = true;
  400762:	2201      	movs	r2, #1
  400764:	4b33      	ldr	r3, [pc, #204]	; (400834 <PIOA_Handler+0x134>)
  400766:	701a      	strb	r2, [r3, #0]
			count_right++;
  400768:	4a37      	ldr	r2, [pc, #220]	; (400848 <PIOA_Handler+0x148>)
  40076a:	7813      	ldrb	r3, [r2, #0]
  40076c:	3301      	adds	r3, #1
  40076e:	7013      	strb	r3, [r2, #0]
			bpm+=1;
  400770:	4a36      	ldr	r2, [pc, #216]	; (40084c <PIOA_Handler+0x14c>)
  400772:	6813      	ldr	r3, [r2, #0]
  400774:	3301      	adds	r3, #1
  400776:	6013      	str	r3, [r2, #0]
  400778:	e04d      	b.n	400816 <PIOA_Handler+0x116>
		}

		else if ((A_seq == 0b00000011) && (B_seq == 0b00001001)){
  40077a:	2b03      	cmp	r3, #3
  40077c:	d110      	bne.n	4007a0 <PIOA_Handler+0xa0>
  40077e:	2a09      	cmp	r2, #9
  400780:	d10e      	bne.n	4007a0 <PIOA_Handler+0xa0>
			Left = true;
  400782:	2201      	movs	r2, #1
  400784:	4b2c      	ldr	r3, [pc, #176]	; (400838 <PIOA_Handler+0x138>)
  400786:	701a      	strb	r2, [r3, #0]
			Right = false;
  400788:	2200      	movs	r2, #0
  40078a:	4b2a      	ldr	r3, [pc, #168]	; (400834 <PIOA_Handler+0x134>)
  40078c:	701a      	strb	r2, [r3, #0]
			count_left++;
  40078e:	4a30      	ldr	r2, [pc, #192]	; (400850 <PIOA_Handler+0x150>)
  400790:	7813      	ldrb	r3, [r2, #0]
  400792:	3301      	adds	r3, #1
  400794:	7013      	strb	r3, [r2, #0]
			bpm-=1;
  400796:	4a2d      	ldr	r2, [pc, #180]	; (40084c <PIOA_Handler+0x14c>)
  400798:	6813      	ldr	r3, [r2, #0]
  40079a:	3b01      	subs	r3, #1
  40079c:	6013      	str	r3, [r2, #0]
  40079e:	e013      	b.n	4007c8 <PIOA_Handler+0xc8>
		}

		if ((Right == true) && (Left == true)){
  4007a0:	4b24      	ldr	r3, [pc, #144]	; (400834 <PIOA_Handler+0x134>)
  4007a2:	781b      	ldrb	r3, [r3, #0]
  4007a4:	b183      	cbz	r3, 4007c8 <PIOA_Handler+0xc8>
  4007a6:	4b24      	ldr	r3, [pc, #144]	; (400838 <PIOA_Handler+0x138>)
  4007a8:	781b      	ldrb	r3, [r3, #0]
  4007aa:	2b00      	cmp	r3, #0
  4007ac:	d033      	beq.n	400816 <PIOA_Handler+0x116>
			REG_PIOA_SODR |= PIO_PER_P15;	//turn Left LED ON
  4007ae:	4b29      	ldr	r3, [pc, #164]	; (400854 <PIOA_Handler+0x154>)
  4007b0:	681a      	ldr	r2, [r3, #0]
  4007b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
  4007b6:	601a      	str	r2, [r3, #0]
			REG_PIOA_SODR |= PIO_PER_P16;	//turn Right LED ON
  4007b8:	681a      	ldr	r2, [r3, #0]
  4007ba:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  4007be:	601a      	str	r2, [r3, #0]
		}
		if ((Right == false) && (Left == false)){
  4007c0:	4b1c      	ldr	r3, [pc, #112]	; (400834 <PIOA_Handler+0x134>)
  4007c2:	781b      	ldrb	r3, [r3, #0]
  4007c4:	2b00      	cmp	r3, #0
  4007c6:	d12b      	bne.n	400820 <PIOA_Handler+0x120>
  4007c8:	4b1b      	ldr	r3, [pc, #108]	; (400838 <PIOA_Handler+0x138>)
  4007ca:	781b      	ldrb	r3, [r3, #0]
  4007cc:	b94b      	cbnz	r3, 4007e2 <PIOA_Handler+0xe2>
			REG_PIOA_CODR |= PIO_PER_P15;	//turn Left LED ON
  4007ce:	4b22      	ldr	r3, [pc, #136]	; (400858 <PIOA_Handler+0x158>)
  4007d0:	681a      	ldr	r2, [r3, #0]
  4007d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
  4007d6:	601a      	str	r2, [r3, #0]
			REG_PIOA_CODR |= PIO_PER_P16;	//turn Right LED ON
  4007d8:	681a      	ldr	r2, [r3, #0]
  4007da:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  4007de:	601a      	str	r2, [r3, #0]
  4007e0:	e014      	b.n	40080c <PIOA_Handler+0x10c>
		}
		else if (Left == true){
			REG_PIOA_SODR |= PIO_PER_P15;	//turn Left LED ON
  4007e2:	4a1c      	ldr	r2, [pc, #112]	; (400854 <PIOA_Handler+0x154>)
  4007e4:	6813      	ldr	r3, [r2, #0]
  4007e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
  4007ea:	6013      	str	r3, [r2, #0]
			REG_PIOA_CODR |= PIO_PER_P16;	//turn Right LED Off
  4007ec:	3204      	adds	r2, #4
  4007ee:	6813      	ldr	r3, [r2, #0]
  4007f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  4007f4:	6013      	str	r3, [r2, #0]
  4007f6:	e009      	b.n	40080c <PIOA_Handler+0x10c>
		}
		else if (Right == true){
			REG_PIOA_CODR |= PIO_PER_P15;	//turn Left LED Off
  4007f8:	4a17      	ldr	r2, [pc, #92]	; (400858 <PIOA_Handler+0x158>)
  4007fa:	6813      	ldr	r3, [r2, #0]
  4007fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
  400800:	6013      	str	r3, [r2, #0]
			REG_PIOA_SODR |= PIO_PER_P16;	//turn Right LED ON
  400802:	3a04      	subs	r2, #4
  400804:	6813      	ldr	r3, [r2, #0]
  400806:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  40080a:	6013      	str	r3, [r2, #0]
		}

		update_timers(bpm);
  40080c:	4b0f      	ldr	r3, [pc, #60]	; (40084c <PIOA_Handler+0x14c>)
  40080e:	6818      	ldr	r0, [r3, #0]
  400810:	4b12      	ldr	r3, [pc, #72]	; (40085c <PIOA_Handler+0x15c>)
  400812:	4798      	blx	r3
// 			count_left++;
// 		}

	}

}
  400814:	bd10      	pop	{r4, pc}

		if ((Right == true) && (Left == true)){
			REG_PIOA_SODR |= PIO_PER_P15;	//turn Left LED ON
			REG_PIOA_SODR |= PIO_PER_P16;	//turn Right LED ON
		}
		if ((Right == false) && (Left == false)){
  400816:	4b07      	ldr	r3, [pc, #28]	; (400834 <PIOA_Handler+0x134>)
		}
		else if (Left == true){
			REG_PIOA_SODR |= PIO_PER_P15;	//turn Left LED ON
			REG_PIOA_CODR |= PIO_PER_P16;	//turn Right LED Off
		}
		else if (Right == true){
  400818:	781b      	ldrb	r3, [r3, #0]
  40081a:	2b00      	cmp	r3, #0
  40081c:	d0f6      	beq.n	40080c <PIOA_Handler+0x10c>
  40081e:	e7eb      	b.n	4007f8 <PIOA_Handler+0xf8>
		}
		if ((Right == false) && (Left == false)){
			REG_PIOA_CODR |= PIO_PER_P15;	//turn Left LED ON
			REG_PIOA_CODR |= PIO_PER_P16;	//turn Right LED ON
		}
		else if (Left == true){
  400820:	4b05      	ldr	r3, [pc, #20]	; (400838 <PIOA_Handler+0x138>)
  400822:	781b      	ldrb	r3, [r3, #0]
  400824:	2b00      	cmp	r3, #0
  400826:	d0e7      	beq.n	4007f8 <PIOA_Handler+0xf8>
  400828:	e7db      	b.n	4007e2 <PIOA_Handler+0xe2>
  40082a:	bf00      	nop
  40082c:	400e0e4c 	.word	0x400e0e4c
  400830:	400e0e3c 	.word	0x400e0e3c
  400834:	20000455 	.word	0x20000455
  400838:	20000458 	.word	0x20000458
  40083c:	20000004 	.word	0x20000004
  400840:	20000457 	.word	0x20000457
  400844:	20000456 	.word	0x20000456
  400848:	20000454 	.word	0x20000454
  40084c:	20000008 	.word	0x20000008
  400850:	20000459 	.word	0x20000459
  400854:	400e0e30 	.word	0x400e0e30
  400858:	400e0e34 	.word	0x400e0e34
  40085c:	00400199 	.word	0x00400199

00400860 <__libc_init_array>:
  400860:	b570      	push	{r4, r5, r6, lr}
  400862:	4e0f      	ldr	r6, [pc, #60]	; (4008a0 <__libc_init_array+0x40>)
  400864:	4d0f      	ldr	r5, [pc, #60]	; (4008a4 <__libc_init_array+0x44>)
  400866:	1b76      	subs	r6, r6, r5
  400868:	10b6      	asrs	r6, r6, #2
  40086a:	bf18      	it	ne
  40086c:	2400      	movne	r4, #0
  40086e:	d005      	beq.n	40087c <__libc_init_array+0x1c>
  400870:	3401      	adds	r4, #1
  400872:	f855 3b04 	ldr.w	r3, [r5], #4
  400876:	4798      	blx	r3
  400878:	42a6      	cmp	r6, r4
  40087a:	d1f9      	bne.n	400870 <__libc_init_array+0x10>
  40087c:	4e0a      	ldr	r6, [pc, #40]	; (4008a8 <__libc_init_array+0x48>)
  40087e:	4d0b      	ldr	r5, [pc, #44]	; (4008ac <__libc_init_array+0x4c>)
  400880:	1b76      	subs	r6, r6, r5
  400882:	f000 f88f 	bl	4009a4 <_init>
  400886:	10b6      	asrs	r6, r6, #2
  400888:	bf18      	it	ne
  40088a:	2400      	movne	r4, #0
  40088c:	d006      	beq.n	40089c <__libc_init_array+0x3c>
  40088e:	3401      	adds	r4, #1
  400890:	f855 3b04 	ldr.w	r3, [r5], #4
  400894:	4798      	blx	r3
  400896:	42a6      	cmp	r6, r4
  400898:	d1f9      	bne.n	40088e <__libc_init_array+0x2e>
  40089a:	bd70      	pop	{r4, r5, r6, pc}
  40089c:	bd70      	pop	{r4, r5, r6, pc}
  40089e:	bf00      	nop
  4008a0:	004009b0 	.word	0x004009b0
  4008a4:	004009b0 	.word	0x004009b0
  4008a8:	004009b8 	.word	0x004009b8
  4008ac:	004009b0 	.word	0x004009b0

004008b0 <register_fini>:
  4008b0:	4b02      	ldr	r3, [pc, #8]	; (4008bc <register_fini+0xc>)
  4008b2:	b113      	cbz	r3, 4008ba <register_fini+0xa>
  4008b4:	4802      	ldr	r0, [pc, #8]	; (4008c0 <register_fini+0x10>)
  4008b6:	f000 b805 	b.w	4008c4 <atexit>
  4008ba:	4770      	bx	lr
  4008bc:	00000000 	.word	0x00000000
  4008c0:	004008d1 	.word	0x004008d1

004008c4 <atexit>:
  4008c4:	2300      	movs	r3, #0
  4008c6:	4601      	mov	r1, r0
  4008c8:	461a      	mov	r2, r3
  4008ca:	4618      	mov	r0, r3
  4008cc:	f000 b814 	b.w	4008f8 <__register_exitproc>

004008d0 <__libc_fini_array>:
  4008d0:	b538      	push	{r3, r4, r5, lr}
  4008d2:	4d07      	ldr	r5, [pc, #28]	; (4008f0 <__libc_fini_array+0x20>)
  4008d4:	4c07      	ldr	r4, [pc, #28]	; (4008f4 <__libc_fini_array+0x24>)
  4008d6:	1b2c      	subs	r4, r5, r4
  4008d8:	10a4      	asrs	r4, r4, #2
  4008da:	d005      	beq.n	4008e8 <__libc_fini_array+0x18>
  4008dc:	3c01      	subs	r4, #1
  4008de:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  4008e2:	4798      	blx	r3
  4008e4:	2c00      	cmp	r4, #0
  4008e6:	d1f9      	bne.n	4008dc <__libc_fini_array+0xc>
  4008e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  4008ec:	f000 b864 	b.w	4009b8 <_fini>
  4008f0:	004009c8 	.word	0x004009c8
  4008f4:	004009c4 	.word	0x004009c4

004008f8 <__register_exitproc>:
  4008f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4008fc:	4c25      	ldr	r4, [pc, #148]	; (400994 <__register_exitproc+0x9c>)
  4008fe:	6825      	ldr	r5, [r4, #0]
  400900:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
  400904:	4606      	mov	r6, r0
  400906:	4688      	mov	r8, r1
  400908:	4692      	mov	sl, r2
  40090a:	4699      	mov	r9, r3
  40090c:	b3c4      	cbz	r4, 400980 <__register_exitproc+0x88>
  40090e:	6860      	ldr	r0, [r4, #4]
  400910:	281f      	cmp	r0, #31
  400912:	dc17      	bgt.n	400944 <__register_exitproc+0x4c>
  400914:	1c43      	adds	r3, r0, #1
  400916:	b176      	cbz	r6, 400936 <__register_exitproc+0x3e>
  400918:	eb04 0580 	add.w	r5, r4, r0, lsl #2
  40091c:	2201      	movs	r2, #1
  40091e:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
  400922:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
  400926:	4082      	lsls	r2, r0
  400928:	4311      	orrs	r1, r2
  40092a:	2e02      	cmp	r6, #2
  40092c:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
  400930:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
  400934:	d01e      	beq.n	400974 <__register_exitproc+0x7c>
  400936:	3002      	adds	r0, #2
  400938:	6063      	str	r3, [r4, #4]
  40093a:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
  40093e:	2000      	movs	r0, #0
  400940:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  400944:	4b14      	ldr	r3, [pc, #80]	; (400998 <__register_exitproc+0xa0>)
  400946:	b303      	cbz	r3, 40098a <__register_exitproc+0x92>
  400948:	f44f 70c8 	mov.w	r0, #400	; 0x190
  40094c:	f3af 8000 	nop.w
  400950:	4604      	mov	r4, r0
  400952:	b1d0      	cbz	r0, 40098a <__register_exitproc+0x92>
  400954:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
  400958:	2700      	movs	r7, #0
  40095a:	e880 0088 	stmia.w	r0, {r3, r7}
  40095e:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  400962:	4638      	mov	r0, r7
  400964:	2301      	movs	r3, #1
  400966:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  40096a:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
  40096e:	2e00      	cmp	r6, #0
  400970:	d0e1      	beq.n	400936 <__register_exitproc+0x3e>
  400972:	e7d1      	b.n	400918 <__register_exitproc+0x20>
  400974:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
  400978:	430a      	orrs	r2, r1
  40097a:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  40097e:	e7da      	b.n	400936 <__register_exitproc+0x3e>
  400980:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
  400984:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  400988:	e7c1      	b.n	40090e <__register_exitproc+0x16>
  40098a:	f04f 30ff 	mov.w	r0, #4294967295
  40098e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  400992:	bf00      	nop
  400994:	004009a0 	.word	0x004009a0
  400998:	00000000 	.word	0x00000000
  40099c:	00000043 	.word	0x00000043

004009a0 <_global_impure_ptr>:
  4009a0:	20000010                                ... 

004009a4 <_init>:
  4009a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4009a6:	bf00      	nop
  4009a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4009aa:	bc08      	pop	{r3}
  4009ac:	469e      	mov	lr, r3
  4009ae:	4770      	bx	lr

004009b0 <__init_array_start>:
  4009b0:	004008b1 	.word	0x004008b1

004009b4 <__frame_dummy_init_array_entry>:
  4009b4:	004000e5                                ..@.

004009b8 <_fini>:
  4009b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4009ba:	bf00      	nop
  4009bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4009be:	bc08      	pop	{r3}
  4009c0:	469e      	mov	lr, r3
  4009c2:	4770      	bx	lr

004009c4 <__fini_array_start>:
  4009c4:	004000c1 	.word	0x004000c1
