
TWI_TWI_EEPROM_EXAMPLE1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000028fc  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000844  20000000  004028fc  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000068  20000844  00403140  00020844  2**2
                  ALLOC
  3 .stack        00003004  200008ac  004031a8  00020844  2**0
                  ALLOC
  4 .ARM.attributes 0000002a  00000000  00000000  00020844  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0002086e  2**0
                  CONTENTS, READONLY
  6 .debug_info   000082b8  00000000  00000000  000208c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001846  00000000  00000000  00028b7f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000304a  00000000  00000000  0002a3c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000006d0  00000000  00000000  0002d40f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000600  00000000  00000000  0002dadf  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0000fb9c  00000000  00000000  0002e0df  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00008acc  00000000  00000000  0003dc7b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00041ee8  00000000  00000000  00046747  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000016cc  00000000  00000000  00088630  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <_sfixed>:
  400000:	200038b0 	.word	0x200038b0
  400004:	004005c9 	.word	0x004005c9
  400008:	004005c5 	.word	0x004005c5
  40000c:	004005c5 	.word	0x004005c5
  400010:	004005c5 	.word	0x004005c5
  400014:	004005c5 	.word	0x004005c5
  400018:	004005c5 	.word	0x004005c5
	...
  40002c:	004005c5 	.word	0x004005c5
  400030:	004005c5 	.word	0x004005c5
  400034:	00000000 	.word	0x00000000
  400038:	004005c5 	.word	0x004005c5
  40003c:	004009cd 	.word	0x004009cd
  400040:	004005c5 	.word	0x004005c5
  400044:	004005c5 	.word	0x004005c5
  400048:	004005c5 	.word	0x004005c5
  40004c:	004005c5 	.word	0x004005c5
  400050:	004005c5 	.word	0x004005c5
  400054:	004005c5 	.word	0x004005c5
  400058:	004005c5 	.word	0x004005c5
  40005c:	00000000 	.word	0x00000000
  400060:	004005c5 	.word	0x004005c5
  400064:	004005c5 	.word	0x004005c5
  400068:	004005c5 	.word	0x004005c5
  40006c:	004005c5 	.word	0x004005c5
  400070:	004005c5 	.word	0x004005c5
  400074:	004005c5 	.word	0x004005c5
  400078:	004005c5 	.word	0x004005c5
  40007c:	004005c5 	.word	0x004005c5
  400080:	004005c5 	.word	0x004005c5
  400084:	004005c5 	.word	0x004005c5
  400088:	00000000 	.word	0x00000000
  40008c:	004005c5 	.word	0x004005c5
  400090:	004005c5 	.word	0x004005c5
  400094:	004005c5 	.word	0x004005c5
  400098:	004005c5 	.word	0x004005c5
  40009c:	004005c5 	.word	0x004005c5
  4000a0:	004005c5 	.word	0x004005c5
  4000a4:	004005c5 	.word	0x004005c5
  4000a8:	004005c5 	.word	0x004005c5
  4000ac:	004005c5 	.word	0x004005c5
  4000b0:	004005c5 	.word	0x004005c5
  4000b4:	004005c5 	.word	0x004005c5
  4000b8:	004005c5 	.word	0x004005c5
  4000bc:	004005c5 	.word	0x004005c5

004000c0 <__do_global_dtors_aux>:
  4000c0:	b510      	push	{r4, lr}
  4000c2:	4c05      	ldr	r4, [pc, #20]	; (4000d8 <__do_global_dtors_aux+0x18>)
  4000c4:	7823      	ldrb	r3, [r4, #0]
  4000c6:	b933      	cbnz	r3, 4000d6 <__do_global_dtors_aux+0x16>
  4000c8:	4b04      	ldr	r3, [pc, #16]	; (4000dc <__do_global_dtors_aux+0x1c>)
  4000ca:	b113      	cbz	r3, 4000d2 <__do_global_dtors_aux+0x12>
  4000cc:	4804      	ldr	r0, [pc, #16]	; (4000e0 <__do_global_dtors_aux+0x20>)
  4000ce:	f3af 8000 	nop.w
  4000d2:	2301      	movs	r3, #1
  4000d4:	7023      	strb	r3, [r4, #0]
  4000d6:	bd10      	pop	{r4, pc}
  4000d8:	20000844 	.word	0x20000844
  4000dc:	00000000 	.word	0x00000000
  4000e0:	004028fc 	.word	0x004028fc

004000e4 <frame_dummy>:
  4000e4:	4b08      	ldr	r3, [pc, #32]	; (400108 <frame_dummy+0x24>)
  4000e6:	b510      	push	{r4, lr}
  4000e8:	b11b      	cbz	r3, 4000f2 <frame_dummy+0xe>
  4000ea:	4908      	ldr	r1, [pc, #32]	; (40010c <frame_dummy+0x28>)
  4000ec:	4808      	ldr	r0, [pc, #32]	; (400110 <frame_dummy+0x2c>)
  4000ee:	f3af 8000 	nop.w
  4000f2:	4808      	ldr	r0, [pc, #32]	; (400114 <frame_dummy+0x30>)
  4000f4:	6803      	ldr	r3, [r0, #0]
  4000f6:	b903      	cbnz	r3, 4000fa <frame_dummy+0x16>
  4000f8:	bd10      	pop	{r4, pc}
  4000fa:	4b07      	ldr	r3, [pc, #28]	; (400118 <frame_dummy+0x34>)
  4000fc:	2b00      	cmp	r3, #0
  4000fe:	d0fb      	beq.n	4000f8 <frame_dummy+0x14>
  400100:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400104:	4718      	bx	r3
  400106:	bf00      	nop
  400108:	00000000 	.word	0x00000000
  40010c:	20000848 	.word	0x20000848
  400110:	004028fc 	.word	0x004028fc
  400114:	004028fc 	.word	0x004028fc
  400118:	00000000 	.word	0x00000000

0040011c <sysclk_init>:

	SystemCoreClockUpdate();
}

void sysclk_init(void)
{
  40011c:	b510      	push	{r4, lr}
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  40011e:	480e      	ldr	r0, [pc, #56]	; (400158 <sysclk_init+0x3c>)
  400120:	4b0e      	ldr	r3, [pc, #56]	; (40015c <sysclk_init+0x40>)
  400122:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
		break;

	case OSC_MAINCK_8M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
  400124:	2010      	movs	r0, #16
  400126:	4b0e      	ldr	r3, [pc, #56]	; (400160 <sysclk_init+0x44>)
  400128:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  40012a:	4c0e      	ldr	r4, [pc, #56]	; (400164 <sysclk_init+0x48>)
  40012c:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  40012e:	2800      	cmp	r0, #0
  400130:	d0fc      	beq.n	40012c <sysclk_init+0x10>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  400132:	4b0d      	ldr	r3, [pc, #52]	; (400168 <sysclk_init+0x4c>)
  400134:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  400136:	4a0d      	ldr	r2, [pc, #52]	; (40016c <sysclk_init+0x50>)
  400138:	4b0d      	ldr	r3, [pc, #52]	; (400170 <sysclk_init+0x54>)
  40013a:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
  40013c:	4c0d      	ldr	r4, [pc, #52]	; (400174 <sysclk_init+0x58>)
  40013e:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  400140:	2800      	cmp	r0, #0
  400142:	d0fc      	beq.n	40013e <sysclk_init+0x22>

		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  400144:	2010      	movs	r0, #16
  400146:	4b0c      	ldr	r3, [pc, #48]	; (400178 <sysclk_init+0x5c>)
  400148:	4798      	blx	r3
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  40014a:	4b0c      	ldr	r3, [pc, #48]	; (40017c <sysclk_init+0x60>)
  40014c:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  40014e:	4802      	ldr	r0, [pc, #8]	; (400158 <sysclk_init+0x3c>)
  400150:	4b02      	ldr	r3, [pc, #8]	; (40015c <sysclk_init+0x40>)
  400152:	4798      	blx	r3
  400154:	bd10      	pop	{r4, pc}
  400156:	bf00      	nop
  400158:	05f5e100 	.word	0x05f5e100
  40015c:	00400771 	.word	0x00400771
  400160:	00400365 	.word	0x00400365
  400164:	004003b1 	.word	0x004003b1
  400168:	004003c1 	.word	0x004003c1
  40016c:	20183f01 	.word	0x20183f01
  400170:	400e0400 	.word	0x400e0400
  400174:	004003d1 	.word	0x004003d1
  400178:	004002fd 	.word	0x004002fd
  40017c:	00400661 	.word	0x00400661

00400180 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
  400180:	b990      	cbnz	r0, 4001a8 <_read+0x28>
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  400182:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400186:	460c      	mov	r4, r1
  400188:	4690      	mov	r8, r2

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  40018a:	2a00      	cmp	r2, #0
  40018c:	dd0f      	ble.n	4001ae <_read+0x2e>
  40018e:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  400190:	4e08      	ldr	r6, [pc, #32]	; (4001b4 <_read+0x34>)
  400192:	4d09      	ldr	r5, [pc, #36]	; (4001b8 <_read+0x38>)
  400194:	6830      	ldr	r0, [r6, #0]
  400196:	4621      	mov	r1, r4
  400198:	682b      	ldr	r3, [r5, #0]
  40019a:	4798      	blx	r3
		ptr++;
  40019c:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  40019e:	42a7      	cmp	r7, r4
  4001a0:	d1f8      	bne.n	400194 <_read+0x14>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
  4001a2:	4640      	mov	r0, r8
  4001a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
  4001a8:	f04f 30ff 	mov.w	r0, #4294967295
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
  4001ac:	4770      	bx	lr

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  4001ae:	2000      	movs	r0, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
  4001b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4001b4:	200008a4 	.word	0x200008a4
  4001b8:	2000089c 	.word	0x2000089c

004001bc <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  4001bc:	3801      	subs	r0, #1
  4001be:	2802      	cmp	r0, #2
  4001c0:	d815      	bhi.n	4001ee <_write+0x32>
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
  4001c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4001c6:	460e      	mov	r6, r1
  4001c8:	4614      	mov	r4, r2

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  4001ca:	b19a      	cbz	r2, 4001f4 <_write+0x38>
  4001cc:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  4001ce:	f8df 8038 	ldr.w	r8, [pc, #56]	; 400208 <_write+0x4c>
  4001d2:	4f0c      	ldr	r7, [pc, #48]	; (400204 <_write+0x48>)
  4001d4:	f8d8 0000 	ldr.w	r0, [r8]
  4001d8:	f815 1b01 	ldrb.w	r1, [r5], #1
  4001dc:	683b      	ldr	r3, [r7, #0]
  4001de:	4798      	blx	r3
  4001e0:	2800      	cmp	r0, #0
  4001e2:	db0a      	blt.n	4001fa <_write+0x3e>
  4001e4:	1ba8      	subs	r0, r5, r6

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  4001e6:	3c01      	subs	r4, #1
  4001e8:	d1f4      	bne.n	4001d4 <_write+0x18>
  4001ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
  4001ee:	f04f 30ff 	mov.w	r0, #4294967295
			return -1;
		}
		++nChars;
	}
	return nChars;
}
  4001f2:	4770      	bx	lr

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  4001f4:	2000      	movs	r0, #0
  4001f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
  4001fa:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  4001fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400202:	bf00      	nop
  400204:	200008a0 	.word	0x200008a0
  400208:	200008a4 	.word	0x200008a4

0040020c <board_init>:
		ioport_set_pin_mode(pin, mode);\
		ioport_disable_pin(pin);\
	} while (0)
	
void board_init(void)
{
  40020c:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  40020e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400212:	4b36      	ldr	r3, [pc, #216]	; (4002ec <board_init+0xe0>)
  400214:	605a      	str	r2, [r3, #4]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  400216:	200b      	movs	r0, #11
  400218:	4c35      	ldr	r4, [pc, #212]	; (4002f0 <board_init+0xe4>)
  40021a:	47a0      	blx	r4
  40021c:	200c      	movs	r0, #12
  40021e:	47a0      	blx	r4
  400220:	200d      	movs	r0, #13
  400222:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400224:	4b33      	ldr	r3, [pc, #204]	; (4002f4 <board_init+0xe8>)
  400226:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  40022a:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40022c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400230:	631a      	str	r2, [r3, #48]	; 0x30
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400232:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
  400236:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  40023a:	615a      	str	r2, [r3, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40023c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
  400240:	665a      	str	r2, [r3, #100]	; 0x64

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  400242:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  400246:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  400248:	625a      	str	r2, [r3, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  40024a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  40024e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400250:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
  400254:	671a      	str	r2, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  400256:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400258:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
  40025c:	675a      	str	r2, [r3, #116]	; 0x74
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40025e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  400262:	631a      	str	r2, [r3, #48]	; 0x30
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400264:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400266:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40026a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  40026e:	631a      	str	r2, [r3, #48]	; 0x30
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400270:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400272:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400276:	4920      	ldr	r1, [pc, #128]	; (4002f8 <board_init+0xec>)
  400278:	2208      	movs	r2, #8
  40027a:	630a      	str	r2, [r1, #48]	; 0x30
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40027c:	610a      	str	r2, [r1, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40027e:	f8c1 20a0 	str.w	r2, [r1, #160]	; 0xa0
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  400282:	f44f 61c0 	mov.w	r1, #1536	; 0x600
  400286:	6619      	str	r1, [r3, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  400288:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  40028c:	6559      	str	r1, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  40028e:	6259      	str	r1, [r3, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  400290:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  400294:	6f18      	ldr	r0, [r3, #112]	; 0x70
  400296:	f420 60c0 	bic.w	r0, r0, #1536	; 0x600
  40029a:	6718      	str	r0, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  40029c:	6f58      	ldr	r0, [r3, #116]	; 0x74
  40029e:	f420 60c0 	bic.w	r0, r0, #1536	; 0x600
  4002a2:	6758      	str	r0, [r3, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4002a4:	6059      	str	r1, [r3, #4]
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  4002a6:	661a      	str	r2, [r3, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  4002a8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  4002ac:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  4002ae:	625a      	str	r2, [r3, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  4002b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  4002b4:	6f19      	ldr	r1, [r3, #112]	; 0x70
  4002b6:	f021 0108 	bic.w	r1, r1, #8
  4002ba:	6719      	str	r1, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  4002bc:	6f59      	ldr	r1, [r3, #116]	; 0x74
  4002be:	f021 0108 	bic.w	r1, r1, #8
  4002c2:	6759      	str	r1, [r3, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4002c4:	605a      	str	r2, [r3, #4]
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
  4002c6:	2210      	movs	r2, #16
  4002c8:	661a      	str	r2, [r3, #96]	; 0x60

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  4002ca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  4002ce:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  4002d0:	625a      	str	r2, [r3, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  4002d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  4002d6:	6f19      	ldr	r1, [r3, #112]	; 0x70
  4002d8:	f021 0110 	bic.w	r1, r1, #16
  4002dc:	6719      	str	r1, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  4002de:	6f59      	ldr	r1, [r3, #116]	; 0x74
  4002e0:	f021 0110 	bic.w	r1, r1, #16
  4002e4:	6759      	str	r1, [r3, #116]	; 0x74
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4002e6:	605a      	str	r2, [r3, #4]
  4002e8:	bd10      	pop	{r4, pc}
  4002ea:	bf00      	nop
  4002ec:	400e1450 	.word	0x400e1450
  4002f0:	004003e1 	.word	0x004003e1
  4002f4:	400e1000 	.word	0x400e1000
  4002f8:	400e1200 	.word	0x400e1200

004002fc <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  4002fc:	4a18      	ldr	r2, [pc, #96]	; (400360 <pmc_switch_mck_to_pllack+0x64>)
  4002fe:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400300:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  400304:	4318      	orrs	r0, r3
  400306:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400308:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40030a:	f013 0f08 	tst.w	r3, #8
  40030e:	d003      	beq.n	400318 <pmc_switch_mck_to_pllack+0x1c>
  400310:	e009      	b.n	400326 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400312:	3b01      	subs	r3, #1
  400314:	d103      	bne.n	40031e <pmc_switch_mck_to_pllack+0x22>
  400316:	e01e      	b.n	400356 <pmc_switch_mck_to_pllack+0x5a>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400318:	f44f 6300 	mov.w	r3, #2048	; 0x800
  40031c:	4910      	ldr	r1, [pc, #64]	; (400360 <pmc_switch_mck_to_pllack+0x64>)
  40031e:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400320:	f012 0f08 	tst.w	r2, #8
  400324:	d0f5      	beq.n	400312 <pmc_switch_mck_to_pllack+0x16>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  400326:	4a0e      	ldr	r2, [pc, #56]	; (400360 <pmc_switch_mck_to_pllack+0x64>)
  400328:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40032a:	f023 0303 	bic.w	r3, r3, #3
  40032e:	f043 0302 	orr.w	r3, r3, #2
  400332:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400334:	6e90      	ldr	r0, [r2, #104]	; 0x68
  400336:	f010 0008 	ands.w	r0, r0, #8
  40033a:	d004      	beq.n	400346 <pmc_switch_mck_to_pllack+0x4a>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
  40033c:	2000      	movs	r0, #0
  40033e:	4770      	bx	lr
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
  400340:	3b01      	subs	r3, #1
  400342:	d103      	bne.n	40034c <pmc_switch_mck_to_pllack+0x50>
  400344:	e009      	b.n	40035a <pmc_switch_mck_to_pllack+0x5e>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400346:	f44f 6300 	mov.w	r3, #2048	; 0x800
  40034a:	4905      	ldr	r1, [pc, #20]	; (400360 <pmc_switch_mck_to_pllack+0x64>)
  40034c:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  40034e:	f012 0f08 	tst.w	r2, #8
  400352:	d0f5      	beq.n	400340 <pmc_switch_mck_to_pllack+0x44>
  400354:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  400356:	2001      	movs	r0, #1
  400358:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  40035a:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  40035c:	4770      	bx	lr
  40035e:	bf00      	nop
  400360:	400e0400 	.word	0x400e0400

00400364 <pmc_switch_mainck_to_fastrc>:
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
  400364:	4b11      	ldr	r3, [pc, #68]	; (4003ac <pmc_switch_mainck_to_fastrc+0x48>)
  400366:	6a1a      	ldr	r2, [r3, #32]
  400368:	f442 125c 	orr.w	r2, r2, #3604480	; 0x370000
  40036c:	f042 0208 	orr.w	r2, r2, #8
  400370:	621a      	str	r2, [r3, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  400372:	461a      	mov	r2, r3
  400374:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400376:	f413 3f00 	tst.w	r3, #131072	; 0x20000
  40037a:	d0fb      	beq.n	400374 <pmc_switch_mainck_to_fastrc+0x10>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  40037c:	4a0b      	ldr	r2, [pc, #44]	; (4003ac <pmc_switch_mainck_to_fastrc+0x48>)
  40037e:	6a13      	ldr	r3, [r2, #32]
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
  400380:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  400384:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  400388:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  40038c:	4303      	orrs	r3, r0

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  40038e:	6213      	str	r3, [r2, #32]
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  400390:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400392:	f413 3f00 	tst.w	r3, #131072	; 0x20000
  400396:	d0fb      	beq.n	400390 <pmc_switch_mainck_to_fastrc+0x2c>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  400398:	4a04      	ldr	r2, [pc, #16]	; (4003ac <pmc_switch_mainck_to_fastrc+0x48>)
  40039a:	6a13      	ldr	r3, [r2, #32]
  40039c:	f023 739b 	bic.w	r3, r3, #20316160	; 0x1360000
  4003a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  4003a4:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  4003a8:	6213      	str	r3, [r2, #32]
  4003aa:	4770      	bx	lr
  4003ac:	400e0400 	.word	0x400e0400

004003b0 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  4003b0:	4b02      	ldr	r3, [pc, #8]	; (4003bc <pmc_osc_is_ready_mainck+0xc>)
  4003b2:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4003b4:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  4003b8:	4770      	bx	lr
  4003ba:	bf00      	nop
  4003bc:	400e0400 	.word	0x400e0400

004003c0 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  4003c0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  4003c4:	4b01      	ldr	r3, [pc, #4]	; (4003cc <pmc_disable_pllack+0xc>)
  4003c6:	629a      	str	r2, [r3, #40]	; 0x28
  4003c8:	4770      	bx	lr
  4003ca:	bf00      	nop
  4003cc:	400e0400 	.word	0x400e0400

004003d0 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  4003d0:	4b02      	ldr	r3, [pc, #8]	; (4003dc <pmc_is_locked_pllack+0xc>)
  4003d2:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4003d4:	f000 0002 	and.w	r0, r0, #2
  4003d8:	4770      	bx	lr
  4003da:	bf00      	nop
  4003dc:	400e0400 	.word	0x400e0400

004003e0 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  4003e0:	281f      	cmp	r0, #31
  4003e2:	d80c      	bhi.n	4003fe <pmc_enable_periph_clk+0x1e>
		return 1;
	}

	if (ul_id < 32) {
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  4003e4:	4b08      	ldr	r3, [pc, #32]	; (400408 <pmc_enable_periph_clk+0x28>)
  4003e6:	699a      	ldr	r2, [r3, #24]
  4003e8:	2301      	movs	r3, #1
  4003ea:	4083      	lsls	r3, r0
  4003ec:	4393      	bics	r3, r2
  4003ee:	d008      	beq.n	400402 <pmc_enable_periph_clk+0x22>
			PMC->PMC_PCER0 = 1 << ul_id;
  4003f0:	2301      	movs	r3, #1
  4003f2:	fa03 f000 	lsl.w	r0, r3, r0
  4003f6:	4b04      	ldr	r3, [pc, #16]	; (400408 <pmc_enable_periph_clk+0x28>)
  4003f8:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  4003fa:	2000      	movs	r0, #0
  4003fc:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
  4003fe:	2001      	movs	r0, #1
  400400:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  400402:	2000      	movs	r0, #0
}
  400404:	4770      	bx	lr
  400406:	bf00      	nop
  400408:	400e0400 	.word	0x400e0400

0040040c <twi_set_speed>:
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
	uint32_t ckdiv = 0;
	uint32_t c_lh_div;

	if (ul_speed > I2C_FAST_MODE_SPEED) {
  40040c:	4b0f      	ldr	r3, [pc, #60]	; (40044c <twi_set_speed+0x40>)
  40040e:	4299      	cmp	r1, r3
  400410:	d819      	bhi.n	400446 <twi_set_speed+0x3a>
		return FAIL;
	}

	c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
  400412:	0049      	lsls	r1, r1, #1
  400414:	fbb2 f2f1 	udiv	r2, r2, r1
  400418:	3a04      	subs	r2, #4

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  40041a:	2aff      	cmp	r2, #255	; 0xff
  40041c:	d907      	bls.n	40042e <twi_set_speed+0x22>
  40041e:	2300      	movs	r3, #0
		/* Increase clock divider */
		ckdiv++;
  400420:	3301      	adds	r3, #1
		/* Divide cldiv value */
		c_lh_div /= TWI_CLK_DIVIDER;
  400422:	0852      	lsrs	r2, r2, #1
	}

	c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  400424:	2aff      	cmp	r2, #255	; 0xff
  400426:	d903      	bls.n	400430 <twi_set_speed+0x24>
  400428:	2b07      	cmp	r3, #7
  40042a:	d1f9      	bne.n	400420 <twi_set_speed+0x14>
  40042c:	e000      	b.n	400430 <twi_set_speed+0x24>
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
	uint32_t ckdiv = 0;
  40042e:	2300      	movs	r3, #0
		c_lh_div /= TWI_CLK_DIVIDER;
	}

	/* set clock waveform generator register */
	p_twi->TWI_CWGR =
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
  400430:	0211      	lsls	r1, r2, #8
  400432:	b289      	uxth	r1, r1
  400434:	041b      	lsls	r3, r3, #16
  400436:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
  40043a:	430b      	orrs	r3, r1
  40043c:	b2d2      	uxtb	r2, r2
  40043e:	431a      	orrs	r2, r3
		/* Divide cldiv value */
		c_lh_div /= TWI_CLK_DIVIDER;
	}

	/* set clock waveform generator register */
	p_twi->TWI_CWGR =
  400440:	6102      	str	r2, [r0, #16]
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
			TWI_CWGR_CKDIV(ckdiv);

	return PASS;
  400442:	2000      	movs	r0, #0
  400444:	4770      	bx	lr
{
	uint32_t ckdiv = 0;
	uint32_t c_lh_div;

	if (ul_speed > I2C_FAST_MODE_SPEED) {
		return FAIL;
  400446:	2001      	movs	r0, #1
	p_twi->TWI_CWGR =
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
			TWI_CWGR_CKDIV(ckdiv);

	return PASS;
}
  400448:	4770      	bx	lr
  40044a:	bf00      	nop
  40044c:	00061a80 	.word	0x00061a80

00400450 <twi_master_init>:
 * \param p_opt Options for initializing the TWI module (see \ref twi_options_t).
 *
 * \return TWI_SUCCESS if initialization is complete, error code otherwise.
 */
uint32_t twi_master_init(Twi *p_twi, const twi_options_t *p_opt)
{
  400450:	b538      	push	{r3, r4, r5, lr}
  400452:	4604      	mov	r4, r0
  400454:	460d      	mov	r5, r1
	uint32_t status = TWI_SUCCESS;

	/* Disable TWI interrupts */
	p_twi->TWI_IDR = ~0UL;
  400456:	f04f 33ff 	mov.w	r3, #4294967295
  40045a:	6283      	str	r3, [r0, #40]	; 0x28

	/* Dummy read in status register */
	p_twi->TWI_SR;
  40045c:	6a03      	ldr	r3, [r0, #32]
 * \param p_twi Pointer to a TWI instance.
 */
void twi_reset(Twi *p_twi)
{
	/* Set SWRST bit to reset TWI peripheral */
	p_twi->TWI_CR = TWI_CR_SWRST;
  40045e:	2380      	movs	r3, #128	; 0x80
  400460:	6003      	str	r3, [r0, #0]
	p_twi->TWI_RHR;
  400462:	6b03      	ldr	r3, [r0, #48]	; 0x30
 * \param p_twi Pointer to a TWI instance.
 */
void twi_enable_master_mode(Twi *p_twi)
{
	/* Set Master Disable bit and Slave Disable bit */
	p_twi->TWI_CR = TWI_CR_MSDIS;
  400464:	2308      	movs	r3, #8
  400466:	6003      	str	r3, [r0, #0]
	p_twi->TWI_CR = TWI_CR_SVDIS;
  400468:	2320      	movs	r3, #32
  40046a:	6003      	str	r3, [r0, #0]

	/* Set Master Enable bit */
	p_twi->TWI_CR = TWI_CR_MSEN;
  40046c:	2304      	movs	r3, #4
  40046e:	6003      	str	r3, [r0, #0]
	twi_reset(p_twi);

	twi_enable_master_mode(p_twi);

	/* Select the speed */
	if (twi_set_speed(p_twi, p_opt->speed, p_opt->master_clk) == FAIL) {
  400470:	680a      	ldr	r2, [r1, #0]
  400472:	6849      	ldr	r1, [r1, #4]
  400474:	4b05      	ldr	r3, [pc, #20]	; (40048c <twi_master_init+0x3c>)
  400476:	4798      	blx	r3
 *
 * \return TWI_SUCCESS if initialization is complete, error code otherwise.
 */
uint32_t twi_master_init(Twi *p_twi, const twi_options_t *p_opt)
{
	uint32_t status = TWI_SUCCESS;
  400478:	2801      	cmp	r0, #1
  40047a:	bf14      	ite	ne
  40047c:	2000      	movne	r0, #0
  40047e:	2001      	moveq	r0, #1
	if (twi_set_speed(p_twi, p_opt->speed, p_opt->master_clk) == FAIL) {
		/* The desired speed setting is rejected */
		status = TWI_INVALID_ARGUMENT;
	}

	if (p_opt->smbus == 1) {
  400480:	7a6b      	ldrb	r3, [r5, #9]
  400482:	2b01      	cmp	r3, #1
		p_twi->TWI_CR = TWI_CR_QUICK;
  400484:	bf04      	itt	eq
  400486:	2340      	moveq	r3, #64	; 0x40
  400488:	6023      	streq	r3, [r4, #0]
	}

	return status;
}
  40048a:	bd38      	pop	{r3, r4, r5, pc}
  40048c:	0040040d 	.word	0x0040040d

00400490 <twi_mk_addr>:
 */
uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
	uint32_t val;

	if (len == 0)
  400490:	460a      	mov	r2, r1
  400492:	b159      	cbz	r1, 4004ac <twi_mk_addr+0x1c>
		return 0;

	val = addr[0];
  400494:	7803      	ldrb	r3, [r0, #0]
	if (len > 1) {
  400496:	2901      	cmp	r1, #1
		val <<= 8;
		val |= addr[1];
  400498:	bfc4      	itt	gt
  40049a:	7841      	ldrbgt	r1, [r0, #1]
  40049c:	ea41 2303 	orrgt.w	r3, r1, r3, lsl #8
	}
	if (len > 2) {
  4004a0:	2a02      	cmp	r2, #2
  4004a2:	dd05      	ble.n	4004b0 <twi_mk_addr+0x20>
		val <<= 8;
		val |= addr[2];
  4004a4:	7880      	ldrb	r0, [r0, #2]
  4004a6:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
  4004aa:	4770      	bx	lr
uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
	uint32_t val;

	if (len == 0)
		return 0;
  4004ac:	2000      	movs	r0, #0
  4004ae:	4770      	bx	lr
  4004b0:	4618      	mov	r0, r3
	if (len > 2) {
		val <<= 8;
		val |= addr[2];
	}
	return val;
}
  4004b2:	4770      	bx	lr

004004b4 <twi_master_write>:
 * \param p_packet Packet information and data (see \ref twi_packet_t).
 *
 * \return TWI_SUCCESS if all bytes were written, error code otherwise.
 */
uint32_t twi_master_write(Twi *p_twi, twi_packet_t *p_packet)
{
  4004b4:	b570      	push	{r4, r5, r6, lr}
	uint32_t status;
	uint32_t cnt = p_packet->length;
  4004b6:	68cd      	ldr	r5, [r1, #12]
	uint8_t *buffer = p_packet->buffer;

	/* Check argument */
	if (cnt == 0) {
  4004b8:	2d00      	cmp	r5, #0
  4004ba:	d034      	beq.n	400526 <twi_master_write+0x72>
  4004bc:	460b      	mov	r3, r1
  4004be:	4604      	mov	r4, r0
 */
uint32_t twi_master_write(Twi *p_twi, twi_packet_t *p_packet)
{
	uint32_t status;
	uint32_t cnt = p_packet->length;
	uint8_t *buffer = p_packet->buffer;
  4004c0:	688e      	ldr	r6, [r1, #8]
	if (cnt == 0) {
		return TWI_INVALID_ARGUMENT;
	}

	/* Set write mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
  4004c2:	2000      	movs	r0, #0
  4004c4:	6060      	str	r0, [r4, #4]
	p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip) |
  4004c6:	7c0a      	ldrb	r2, [r1, #16]
  4004c8:	0412      	lsls	r2, r2, #16
  4004ca:	f402 01fe 	and.w	r1, r2, #8323072	; 0x7f0000
  4004ce:	685a      	ldr	r2, [r3, #4]
  4004d0:	0212      	lsls	r2, r2, #8
  4004d2:	f402 7240 	and.w	r2, r2, #768	; 0x300
  4004d6:	430a      	orrs	r2, r1
  4004d8:	6062      	str	r2, [r4, #4]
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
  4004da:	60e0      	str	r0, [r4, #12]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
  4004dc:	6859      	ldr	r1, [r3, #4]
  4004de:	4618      	mov	r0, r3
  4004e0:	4b15      	ldr	r3, [pc, #84]	; (400538 <twi_master_write+0x84>)
  4004e2:	4798      	blx	r3
  4004e4:	60e0      	str	r0, [r4, #12]

	/* Send all bytes */
	while (cnt > 0) {
		status = p_twi->TWI_SR;
  4004e6:	6a23      	ldr	r3, [r4, #32]
		if (status & TWI_SR_NACK) {
  4004e8:	f413 7f80 	tst.w	r3, #256	; 0x100
  4004ec:	d004      	beq.n	4004f8 <twi_master_write+0x44>
  4004ee:	e01c      	b.n	40052a <twi_master_write+0x76>
	p_twi->TWI_IADR = 0;
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);

	/* Send all bytes */
	while (cnt > 0) {
		status = p_twi->TWI_SR;
  4004f0:	6a23      	ldr	r3, [r4, #32]
		if (status & TWI_SR_NACK) {
  4004f2:	f413 7f80 	tst.w	r3, #256	; 0x100
  4004f6:	d11a      	bne.n	40052e <twi_master_write+0x7a>
			return TWI_RECEIVE_NACK;
		}

		if (!(status & TWI_SR_TXRDY)) {
  4004f8:	f013 0f04 	tst.w	r3, #4
  4004fc:	d003      	beq.n	400506 <twi_master_write+0x52>
			continue;
		}
		p_twi->TWI_THR = *buffer++;
  4004fe:	7833      	ldrb	r3, [r6, #0]
  400500:	6363      	str	r3, [r4, #52]	; 0x34

		cnt--;
  400502:	3d01      	subs	r5, #1
		}

		if (!(status & TWI_SR_TXRDY)) {
			continue;
		}
		p_twi->TWI_THR = *buffer++;
  400504:	3601      	adds	r6, #1
	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);

	/* Send all bytes */
	while (cnt > 0) {
  400506:	2d00      	cmp	r5, #0
  400508:	d1f2      	bne.n	4004f0 <twi_master_write+0x3c>

		cnt--;
	}

	while (1) {
		status = p_twi->TWI_SR;
  40050a:	6a23      	ldr	r3, [r4, #32]
		if (status & TWI_SR_NACK) {
  40050c:	f413 7080 	ands.w	r0, r3, #256	; 0x100
  400510:	d10f      	bne.n	400532 <twi_master_write+0x7e>
			return TWI_RECEIVE_NACK;
		}

		if (status & TWI_SR_TXRDY) {
  400512:	f013 0f04 	tst.w	r3, #4
  400516:	d0f8      	beq.n	40050a <twi_master_write+0x56>
			break;
		}
	}

	p_twi->TWI_CR = TWI_CR_STOP;
  400518:	2302      	movs	r3, #2
  40051a:	6023      	str	r3, [r4, #0]

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
  40051c:	6a23      	ldr	r3, [r4, #32]
  40051e:	f013 0f01 	tst.w	r3, #1
  400522:	d0fb      	beq.n	40051c <twi_master_write+0x68>
  400524:	bd70      	pop	{r4, r5, r6, pc}
	uint32_t cnt = p_packet->length;
	uint8_t *buffer = p_packet->buffer;

	/* Check argument */
	if (cnt == 0) {
		return TWI_INVALID_ARGUMENT;
  400526:	2001      	movs	r0, #1
  400528:	bd70      	pop	{r4, r5, r6, pc}

	/* Send all bytes */
	while (cnt > 0) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
  40052a:	2005      	movs	r0, #5
  40052c:	bd70      	pop	{r4, r5, r6, pc}
  40052e:	2005      	movs	r0, #5
  400530:	bd70      	pop	{r4, r5, r6, pc}
	}

	while (1) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
  400532:	2005      	movs	r0, #5

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
	}

	return TWI_SUCCESS;
}
  400534:	bd70      	pop	{r4, r5, r6, pc}
  400536:	bf00      	nop
  400538:	00400491 	.word	0x00400491

0040053c <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
  40053c:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
  40053e:	23ac      	movs	r3, #172	; 0xac
  400540:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
  400542:	680b      	ldr	r3, [r1, #0]
  400544:	684a      	ldr	r2, [r1, #4]
  400546:	fbb3 f3f2 	udiv	r3, r3, r2
  40054a:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
  40054c:	1e5c      	subs	r4, r3, #1
  40054e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
  400552:	4294      	cmp	r4, r2
  400554:	d80a      	bhi.n	40056c <uart_init+0x30>
		return 1;

	p_uart->UART_BRGR = cd;
  400556:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
  400558:	688b      	ldr	r3, [r1, #8]
  40055a:	6043      	str	r3, [r0, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
  40055c:	f240 2302 	movw	r3, #514	; 0x202
  400560:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  400564:	2350      	movs	r3, #80	; 0x50
  400566:	6003      	str	r3, [r0, #0]

	return 0;
  400568:	2000      	movs	r0, #0
  40056a:	e000      	b.n	40056e <uart_init+0x32>

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
		return 1;
  40056c:	2001      	movs	r0, #1

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;

	return 0;
}
  40056e:	bc10      	pop	{r4}
  400570:	4770      	bx	lr
  400572:	bf00      	nop

00400574 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  400574:	6943      	ldr	r3, [r0, #20]
  400576:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  40057a:	bf1a      	itte	ne
  40057c:	61c1      	strne	r1, [r0, #28]
	return 0;
  40057e:	2000      	movne	r0, #0
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
		return 1;
  400580:	2001      	moveq	r0, #1

	/* Send character */
	p_uart->UART_THR = uc_data;
	return 0;
}
  400582:	4770      	bx	lr

00400584 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  400584:	6943      	ldr	r3, [r0, #20]
  400586:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  40058a:	bf1d      	ittte	ne
  40058c:	6983      	ldrne	r3, [r0, #24]
  40058e:	700b      	strbne	r3, [r1, #0]
	return 0;
  400590:	2000      	movne	r0, #0
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
		return 1;
  400592:	2001      	moveq	r0, #1

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
	return 0;
}
  400594:	4770      	bx	lr
  400596:	bf00      	nop

00400598 <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  400598:	6943      	ldr	r3, [r0, #20]
  40059a:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  40059e:	bf1d      	ittte	ne
  4005a0:	f3c1 0108 	ubfxne	r1, r1, #0, #9
  4005a4:	61c1      	strne	r1, [r0, #28]
	return 0;
  4005a6:	2000      	movne	r0, #0
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
		return 1;
  4005a8:	2001      	moveq	r0, #1
	}

	p_usart->US_THR = US_THR_TXCHR(c);
	return 0;
}
  4005aa:	4770      	bx	lr

004005ac <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  4005ac:	6943      	ldr	r3, [r0, #20]
  4005ae:	f013 0f01 	tst.w	r3, #1
  4005b2:	d005      	beq.n	4005c0 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  4005b4:	6983      	ldr	r3, [r0, #24]
  4005b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
  4005ba:	600b      	str	r3, [r1, #0]

	return 0;
  4005bc:	2000      	movs	r0, #0
  4005be:	4770      	bx	lr
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
		return 1;
  4005c0:	2001      	movs	r0, #1

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;

	return 0;
}
  4005c2:	4770      	bx	lr

004005c4 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  4005c4:	e7fe      	b.n	4005c4 <Dummy_Handler>
  4005c6:	bf00      	nop

004005c8 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  4005c8:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
  4005ca:	4b19      	ldr	r3, [pc, #100]	; (400630 <Reset_Handler+0x68>)
  4005cc:	4a19      	ldr	r2, [pc, #100]	; (400634 <Reset_Handler+0x6c>)
  4005ce:	429a      	cmp	r2, r3
  4005d0:	d003      	beq.n	4005da <Reset_Handler+0x12>
		for (; pDest < &_erelocate;) {
  4005d2:	4b19      	ldr	r3, [pc, #100]	; (400638 <Reset_Handler+0x70>)
  4005d4:	4a16      	ldr	r2, [pc, #88]	; (400630 <Reset_Handler+0x68>)
  4005d6:	429a      	cmp	r2, r3
  4005d8:	d304      	bcc.n	4005e4 <Reset_Handler+0x1c>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  4005da:	4b18      	ldr	r3, [pc, #96]	; (40063c <Reset_Handler+0x74>)
  4005dc:	4a18      	ldr	r2, [pc, #96]	; (400640 <Reset_Handler+0x78>)
  4005de:	429a      	cmp	r2, r3
  4005e0:	d30f      	bcc.n	400602 <Reset_Handler+0x3a>
  4005e2:	e01a      	b.n	40061a <Reset_Handler+0x52>
  4005e4:	4912      	ldr	r1, [pc, #72]	; (400630 <Reset_Handler+0x68>)
  4005e6:	4b17      	ldr	r3, [pc, #92]	; (400644 <Reset_Handler+0x7c>)
  4005e8:	1a5b      	subs	r3, r3, r1
  4005ea:	f023 0303 	bic.w	r3, r3, #3
  4005ee:	3304      	adds	r3, #4
  4005f0:	4a10      	ldr	r2, [pc, #64]	; (400634 <Reset_Handler+0x6c>)
  4005f2:	4413      	add	r3, r2
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
			*pDest++ = *pSrc++;
  4005f4:	f852 0b04 	ldr.w	r0, [r2], #4
  4005f8:	f841 0b04 	str.w	r0, [r1], #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
  4005fc:	429a      	cmp	r2, r3
  4005fe:	d1f9      	bne.n	4005f4 <Reset_Handler+0x2c>
  400600:	e7eb      	b.n	4005da <Reset_Handler+0x12>
  400602:	4b11      	ldr	r3, [pc, #68]	; (400648 <Reset_Handler+0x80>)
  400604:	4a11      	ldr	r2, [pc, #68]	; (40064c <Reset_Handler+0x84>)
  400606:	1ad2      	subs	r2, r2, r3
  400608:	f022 0203 	bic.w	r2, r2, #3
  40060c:	441a      	add	r2, r3
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  40060e:	3b04      	subs	r3, #4
		*pDest++ = 0;
  400610:	2100      	movs	r1, #0
  400612:	f843 1b04 	str.w	r1, [r3], #4
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  400616:	4293      	cmp	r3, r2
  400618:	d1fb      	bne.n	400612 <Reset_Handler+0x4a>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  40061a:	4a0d      	ldr	r2, [pc, #52]	; (400650 <Reset_Handler+0x88>)
  40061c:	4b0d      	ldr	r3, [pc, #52]	; (400654 <Reset_Handler+0x8c>)
  40061e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  400622:	6093      	str	r3, [r2, #8]

	/* Initialize the C library */
	__libc_init_array();
  400624:	4b0c      	ldr	r3, [pc, #48]	; (400658 <Reset_Handler+0x90>)
  400626:	4798      	blx	r3

	/* Branch to main function */
	main();
  400628:	4b0c      	ldr	r3, [pc, #48]	; (40065c <Reset_Handler+0x94>)
  40062a:	4798      	blx	r3
  40062c:	e7fe      	b.n	40062c <Reset_Handler+0x64>
  40062e:	bf00      	nop
  400630:	20000000 	.word	0x20000000
  400634:	004028fc 	.word	0x004028fc
  400638:	20000844 	.word	0x20000844
  40063c:	200008ac 	.word	0x200008ac
  400640:	20000844 	.word	0x20000844
  400644:	20000843 	.word	0x20000843
  400648:	20000848 	.word	0x20000848
  40064c:	200008af 	.word	0x200008af
  400650:	e000ed00 	.word	0xe000ed00
  400654:	00400000 	.word	0x00400000
  400658:	00400b11 	.word	0x00400b11
  40065c:	004009dd 	.word	0x004009dd

00400660 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) {
  400660:	4b3c      	ldr	r3, [pc, #240]	; (400754 <SystemCoreClockUpdate+0xf4>)
  400662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400664:	f003 0303 	and.w	r3, r3, #3
  400668:	2b01      	cmp	r3, #1
  40066a:	d00f      	beq.n	40068c <SystemCoreClockUpdate+0x2c>
  40066c:	b113      	cbz	r3, 400674 <SystemCoreClockUpdate+0x14>
  40066e:	2b02      	cmp	r3, #2
  400670:	d029      	beq.n	4006c6 <SystemCoreClockUpdate+0x66>
  400672:	e057      	b.n	400724 <SystemCoreClockUpdate+0xc4>
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
  400674:	4b38      	ldr	r3, [pc, #224]	; (400758 <SystemCoreClockUpdate+0xf8>)
  400676:	695b      	ldr	r3, [r3, #20]
  400678:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
  40067c:	bf14      	ite	ne
  40067e:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
  400682:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  400686:	4b35      	ldr	r3, [pc, #212]	; (40075c <SystemCoreClockUpdate+0xfc>)
  400688:	601a      	str	r2, [r3, #0]
  40068a:	e04b      	b.n	400724 <SystemCoreClockUpdate+0xc4>
		}
		break;

	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
  40068c:	4b31      	ldr	r3, [pc, #196]	; (400754 <SystemCoreClockUpdate+0xf4>)
  40068e:	6a1b      	ldr	r3, [r3, #32]
  400690:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400694:	d003      	beq.n	40069e <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
  400696:	4a32      	ldr	r2, [pc, #200]	; (400760 <SystemCoreClockUpdate+0x100>)
  400698:	4b30      	ldr	r3, [pc, #192]	; (40075c <SystemCoreClockUpdate+0xfc>)
  40069a:	601a      	str	r2, [r3, #0]
  40069c:	e042      	b.n	400724 <SystemCoreClockUpdate+0xc4>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40069e:	4a31      	ldr	r2, [pc, #196]	; (400764 <SystemCoreClockUpdate+0x104>)
  4006a0:	4b2e      	ldr	r3, [pc, #184]	; (40075c <SystemCoreClockUpdate+0xfc>)
  4006a2:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
  4006a4:	4b2b      	ldr	r3, [pc, #172]	; (400754 <SystemCoreClockUpdate+0xf4>)
  4006a6:	6a1b      	ldr	r3, [r3, #32]
  4006a8:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4006ac:	2b10      	cmp	r3, #16
  4006ae:	d002      	beq.n	4006b6 <SystemCoreClockUpdate+0x56>
  4006b0:	2b20      	cmp	r3, #32
  4006b2:	d004      	beq.n	4006be <SystemCoreClockUpdate+0x5e>
  4006b4:	e036      	b.n	400724 <SystemCoreClockUpdate+0xc4>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;

			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
  4006b6:	4a2c      	ldr	r2, [pc, #176]	; (400768 <SystemCoreClockUpdate+0x108>)
  4006b8:	4b28      	ldr	r3, [pc, #160]	; (40075c <SystemCoreClockUpdate+0xfc>)
  4006ba:	601a      	str	r2, [r3, #0]
				break;
  4006bc:	e032      	b.n	400724 <SystemCoreClockUpdate+0xc4>

			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
  4006be:	4a28      	ldr	r2, [pc, #160]	; (400760 <SystemCoreClockUpdate+0x100>)
  4006c0:	4b26      	ldr	r3, [pc, #152]	; (40075c <SystemCoreClockUpdate+0xfc>)
  4006c2:	601a      	str	r2, [r3, #0]
				break;
  4006c4:	e02e      	b.n	400724 <SystemCoreClockUpdate+0xc4>
			}
		}
		break;

	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
  4006c6:	4b23      	ldr	r3, [pc, #140]	; (400754 <SystemCoreClockUpdate+0xf4>)
  4006c8:	6a1b      	ldr	r3, [r3, #32]
  4006ca:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4006ce:	d003      	beq.n	4006d8 <SystemCoreClockUpdate+0x78>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
  4006d0:	4a23      	ldr	r2, [pc, #140]	; (400760 <SystemCoreClockUpdate+0x100>)
  4006d2:	4b22      	ldr	r3, [pc, #136]	; (40075c <SystemCoreClockUpdate+0xfc>)
  4006d4:	601a      	str	r2, [r3, #0]
  4006d6:	e012      	b.n	4006fe <SystemCoreClockUpdate+0x9e>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4006d8:	4a22      	ldr	r2, [pc, #136]	; (400764 <SystemCoreClockUpdate+0x104>)
  4006da:	4b20      	ldr	r3, [pc, #128]	; (40075c <SystemCoreClockUpdate+0xfc>)
  4006dc:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
  4006de:	4b1d      	ldr	r3, [pc, #116]	; (400754 <SystemCoreClockUpdate+0xf4>)
  4006e0:	6a1b      	ldr	r3, [r3, #32]
  4006e2:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4006e6:	2b10      	cmp	r3, #16
  4006e8:	d002      	beq.n	4006f0 <SystemCoreClockUpdate+0x90>
  4006ea:	2b20      	cmp	r3, #32
  4006ec:	d004      	beq.n	4006f8 <SystemCoreClockUpdate+0x98>
  4006ee:	e006      	b.n	4006fe <SystemCoreClockUpdate+0x9e>
				/* So the 4MHz RC selection is forbidden */
				Assert(false);
				break;

			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
  4006f0:	4a1d      	ldr	r2, [pc, #116]	; (400768 <SystemCoreClockUpdate+0x108>)
  4006f2:	4b1a      	ldr	r3, [pc, #104]	; (40075c <SystemCoreClockUpdate+0xfc>)
  4006f4:	601a      	str	r2, [r3, #0]
				break;
  4006f6:	e002      	b.n	4006fe <SystemCoreClockUpdate+0x9e>

			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
  4006f8:	4a19      	ldr	r2, [pc, #100]	; (400760 <SystemCoreClockUpdate+0x100>)
  4006fa:	4b18      	ldr	r3, [pc, #96]	; (40075c <SystemCoreClockUpdate+0xfc>)
  4006fc:	601a      	str	r2, [r3, #0]
			default:
				break;
			}
		}

		if ((uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
  4006fe:	4b15      	ldr	r3, [pc, #84]	; (400754 <SystemCoreClockUpdate+0xf4>)
  400700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400702:	f003 0303 	and.w	r3, r3, #3
  400706:	2b02      	cmp	r3, #2
  400708:	d10c      	bne.n	400724 <SystemCoreClockUpdate+0xc4>
				PMC_MCKR_CSS_PLLA_CLK) {
			SystemCoreClock *=
					((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  40070a:	4a12      	ldr	r2, [pc, #72]	; (400754 <SystemCoreClockUpdate+0xf4>)
  40070c:	6a93      	ldr	r3, [r2, #40]	; 0x28
					>> CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  40070e:	6a92      	ldr	r2, [r2, #40]	; 0x28
  400710:	4812      	ldr	r0, [pc, #72]	; (40075c <SystemCoreClockUpdate+0xfc>)
  400712:	f3c3 410a 	ubfx	r1, r3, #16, #11
  400716:	6803      	ldr	r3, [r0, #0]
  400718:	fb01 3303 	mla	r3, r1, r3, r3
  40071c:	b2d2      	uxtb	r2, r2
  40071e:	fbb3 f3f2 	udiv	r3, r3, r2
  400722:	6003      	str	r3, [r0, #0]

	default:
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
  400724:	4b0b      	ldr	r3, [pc, #44]	; (400754 <SystemCoreClockUpdate+0xf4>)
  400726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400728:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40072c:	2b70      	cmp	r3, #112	; 0x70
  40072e:	d107      	bne.n	400740 <SystemCoreClockUpdate+0xe0>
		SystemCoreClock /= 3U;
  400730:	4a0a      	ldr	r2, [pc, #40]	; (40075c <SystemCoreClockUpdate+0xfc>)
  400732:	6813      	ldr	r3, [r2, #0]
  400734:	490d      	ldr	r1, [pc, #52]	; (40076c <SystemCoreClockUpdate+0x10c>)
  400736:	fba1 1303 	umull	r1, r3, r1, r3
  40073a:	085b      	lsrs	r3, r3, #1
  40073c:	6013      	str	r3, [r2, #0]
  40073e:	4770      	bx	lr
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >>
  400740:	4b04      	ldr	r3, [pc, #16]	; (400754 <SystemCoreClockUpdate+0xf4>)
  400742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400744:	4905      	ldr	r1, [pc, #20]	; (40075c <SystemCoreClockUpdate+0xfc>)
  400746:	f3c3 1202 	ubfx	r2, r3, #4, #3
  40074a:	680b      	ldr	r3, [r1, #0]
  40074c:	40d3      	lsrs	r3, r2
  40074e:	600b      	str	r3, [r1, #0]
  400750:	4770      	bx	lr
  400752:	bf00      	nop
  400754:	400e0400 	.word	0x400e0400
  400758:	400e1410 	.word	0x400e1410
  40075c:	20000000 	.word	0x20000000
  400760:	00b71b00 	.word	0x00b71b00
  400764:	003d0900 	.word	0x003d0900
  400768:	007a1200 	.word	0x007a1200
  40076c:	aaaaaaab 	.word	0xaaaaaaab

00400770 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
  400770:	4b0f      	ldr	r3, [pc, #60]	; (4007b0 <system_init_flash+0x40>)
  400772:	4298      	cmp	r0, r3
  400774:	d804      	bhi.n	400780 <system_init_flash+0x10>
		EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  400776:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  40077a:	4b0e      	ldr	r3, [pc, #56]	; (4007b4 <system_init_flash+0x44>)
  40077c:	601a      	str	r2, [r3, #0]
  40077e:	4770      	bx	lr
	} else {
		if (ul_clk < CHIP_FREQ_FWS_1) {
  400780:	4b0d      	ldr	r3, [pc, #52]	; (4007b8 <system_init_flash+0x48>)
  400782:	4298      	cmp	r0, r3
  400784:	d803      	bhi.n	40078e <system_init_flash+0x1e>
			EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  400786:	4a0d      	ldr	r2, [pc, #52]	; (4007bc <system_init_flash+0x4c>)
  400788:	4b0a      	ldr	r3, [pc, #40]	; (4007b4 <system_init_flash+0x44>)
  40078a:	601a      	str	r2, [r3, #0]
  40078c:	4770      	bx	lr
		} else {
			if (ul_clk < CHIP_FREQ_FWS_2) {
  40078e:	4b0c      	ldr	r3, [pc, #48]	; (4007c0 <system_init_flash+0x50>)
  400790:	4298      	cmp	r0, r3
  400792:	d803      	bhi.n	40079c <system_init_flash+0x2c>
				EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  400794:	4a0b      	ldr	r2, [pc, #44]	; (4007c4 <system_init_flash+0x54>)
  400796:	4b07      	ldr	r3, [pc, #28]	; (4007b4 <system_init_flash+0x44>)
  400798:	601a      	str	r2, [r3, #0]
  40079a:	4770      	bx	lr
			} else {
				if (ul_clk < CHIP_FREQ_FWS_3) {
  40079c:	4b0a      	ldr	r3, [pc, #40]	; (4007c8 <system_init_flash+0x58>)
  40079e:	4298      	cmp	r0, r3
					EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  4007a0:	bf94      	ite	ls
  4007a2:	4a0a      	ldrls	r2, [pc, #40]	; (4007cc <system_init_flash+0x5c>)
				} else {
					EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  4007a4:	f04f 2204 	movhi.w	r2, #67109888	; 0x4000400
  4007a8:	4b02      	ldr	r3, [pc, #8]	; (4007b4 <system_init_flash+0x44>)
  4007aa:	601a      	str	r2, [r3, #0]
  4007ac:	4770      	bx	lr
  4007ae:	bf00      	nop
  4007b0:	01312cff 	.word	0x01312cff
  4007b4:	400e0a00 	.word	0x400e0a00
  4007b8:	026259ff 	.word	0x026259ff
  4007bc:	04000100 	.word	0x04000100
  4007c0:	039386ff 	.word	0x039386ff
  4007c4:	04000200 	.word	0x04000200
  4007c8:	04c4b3ff 	.word	0x04c4b3ff
  4007cc:	04000300 	.word	0x04000300

004007d0 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  4007d0:	4b09      	ldr	r3, [pc, #36]	; (4007f8 <_sbrk+0x28>)
  4007d2:	681b      	ldr	r3, [r3, #0]
  4007d4:	b913      	cbnz	r3, 4007dc <_sbrk+0xc>
		heap = (unsigned char *)&_end;
  4007d6:	4a09      	ldr	r2, [pc, #36]	; (4007fc <_sbrk+0x2c>)
  4007d8:	4b07      	ldr	r3, [pc, #28]	; (4007f8 <_sbrk+0x28>)
  4007da:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
  4007dc:	4b06      	ldr	r3, [pc, #24]	; (4007f8 <_sbrk+0x28>)
  4007de:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  4007e0:	181a      	adds	r2, r3, r0
  4007e2:	4907      	ldr	r1, [pc, #28]	; (400800 <_sbrk+0x30>)
  4007e4:	4291      	cmp	r1, r2
  4007e6:	db04      	blt.n	4007f2 <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
  4007e8:	4610      	mov	r0, r2
  4007ea:	4a03      	ldr	r2, [pc, #12]	; (4007f8 <_sbrk+0x28>)
  4007ec:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  4007ee:	4618      	mov	r0, r3
  4007f0:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
  4007f2:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
  4007f6:	4770      	bx	lr
  4007f8:	20000860 	.word	0x20000860
  4007fc:	200038b0 	.word	0x200038b0
  400800:	20013ffc 	.word	0x20013ffc

00400804 <_close>:
}

extern int _close(int file)
{
	return -1;
}
  400804:	f04f 30ff 	mov.w	r0, #4294967295
  400808:	4770      	bx	lr
  40080a:	bf00      	nop

0040080c <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  40080c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  400810:	604b      	str	r3, [r1, #4]

	return 0;
}
  400812:	2000      	movs	r0, #0
  400814:	4770      	bx	lr
  400816:	bf00      	nop

00400818 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  400818:	2001      	movs	r0, #1
  40081a:	4770      	bx	lr

0040081c <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  40081c:	2000      	movs	r0, #0
  40081e:	4770      	bx	lr

00400820 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  400820:	b5f0      	push	{r4, r5, r6, r7, lr}
  400822:	b083      	sub	sp, #12
  400824:	4605      	mov	r5, r0
  400826:	460c      	mov	r4, r1
	uint32_t val = 0;
  400828:	2300      	movs	r3, #0
  40082a:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  40082c:	4b29      	ldr	r3, [pc, #164]	; (4008d4 <usart_serial_getchar+0xb4>)
  40082e:	4298      	cmp	r0, r3
  400830:	d107      	bne.n	400842 <usart_serial_getchar+0x22>
		while (uart_read((Uart*)p_usart, data));
  400832:	461f      	mov	r7, r3
  400834:	4e28      	ldr	r6, [pc, #160]	; (4008d8 <usart_serial_getchar+0xb8>)
  400836:	4621      	mov	r1, r4
  400838:	4638      	mov	r0, r7
  40083a:	47b0      	blx	r6
  40083c:	2800      	cmp	r0, #0
  40083e:	d1fa      	bne.n	400836 <usart_serial_getchar+0x16>
  400840:	e015      	b.n	40086e <usart_serial_getchar+0x4e>
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  400842:	4b26      	ldr	r3, [pc, #152]	; (4008dc <usart_serial_getchar+0xbc>)
  400844:	4298      	cmp	r0, r3
  400846:	d107      	bne.n	400858 <usart_serial_getchar+0x38>
		while (uart_read((Uart*)p_usart, data));
  400848:	461f      	mov	r7, r3
  40084a:	4e23      	ldr	r6, [pc, #140]	; (4008d8 <usart_serial_getchar+0xb8>)
  40084c:	4621      	mov	r1, r4
  40084e:	4638      	mov	r0, r7
  400850:	47b0      	blx	r6
  400852:	2800      	cmp	r0, #0
  400854:	d1fa      	bne.n	40084c <usart_serial_getchar+0x2c>
  400856:	e015      	b.n	400884 <usart_serial_getchar+0x64>
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  400858:	4b21      	ldr	r3, [pc, #132]	; (4008e0 <usart_serial_getchar+0xc0>)
  40085a:	4298      	cmp	r0, r3
  40085c:	d107      	bne.n	40086e <usart_serial_getchar+0x4e>
		while (uart_read((Uart*)p_usart, data));
  40085e:	461f      	mov	r7, r3
  400860:	4e1d      	ldr	r6, [pc, #116]	; (4008d8 <usart_serial_getchar+0xb8>)
  400862:	4621      	mov	r1, r4
  400864:	4638      	mov	r0, r7
  400866:	47b0      	blx	r6
  400868:	2800      	cmp	r0, #0
  40086a:	d1fa      	bne.n	400862 <usart_serial_getchar+0x42>
  40086c:	e017      	b.n	40089e <usart_serial_getchar+0x7e>
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  40086e:	4b1d      	ldr	r3, [pc, #116]	; (4008e4 <usart_serial_getchar+0xc4>)
  400870:	429d      	cmp	r5, r3
  400872:	d107      	bne.n	400884 <usart_serial_getchar+0x64>
		while (uart_read((Uart*)p_usart, data));
  400874:	461f      	mov	r7, r3
  400876:	4e18      	ldr	r6, [pc, #96]	; (4008d8 <usart_serial_getchar+0xb8>)
  400878:	4621      	mov	r1, r4
  40087a:	4638      	mov	r0, r7
  40087c:	47b0      	blx	r6
  40087e:	2800      	cmp	r0, #0
  400880:	d1fa      	bne.n	400878 <usart_serial_getchar+0x58>
  400882:	e019      	b.n	4008b8 <usart_serial_getchar+0x98>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  400884:	4b18      	ldr	r3, [pc, #96]	; (4008e8 <usart_serial_getchar+0xc8>)
  400886:	429d      	cmp	r5, r3
  400888:	d109      	bne.n	40089e <usart_serial_getchar+0x7e>
		while (usart_read(p_usart, &val));
  40088a:	461e      	mov	r6, r3
  40088c:	4d17      	ldr	r5, [pc, #92]	; (4008ec <usart_serial_getchar+0xcc>)
  40088e:	a901      	add	r1, sp, #4
  400890:	4630      	mov	r0, r6
  400892:	47a8      	blx	r5
  400894:	2800      	cmp	r0, #0
  400896:	d1fa      	bne.n	40088e <usart_serial_getchar+0x6e>
		*data = (uint8_t)(val & 0xFF);
  400898:	9b01      	ldr	r3, [sp, #4]
  40089a:	7023      	strb	r3, [r4, #0]
  40089c:	e018      	b.n	4008d0 <usart_serial_getchar+0xb0>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  40089e:	4b14      	ldr	r3, [pc, #80]	; (4008f0 <usart_serial_getchar+0xd0>)
  4008a0:	429d      	cmp	r5, r3
  4008a2:	d109      	bne.n	4008b8 <usart_serial_getchar+0x98>
		while (usart_read(p_usart, &val));
  4008a4:	461e      	mov	r6, r3
  4008a6:	4d11      	ldr	r5, [pc, #68]	; (4008ec <usart_serial_getchar+0xcc>)
  4008a8:	a901      	add	r1, sp, #4
  4008aa:	4630      	mov	r0, r6
  4008ac:	47a8      	blx	r5
  4008ae:	2800      	cmp	r0, #0
  4008b0:	d1fa      	bne.n	4008a8 <usart_serial_getchar+0x88>
		*data = (uint8_t)(val & 0xFF);
  4008b2:	9b01      	ldr	r3, [sp, #4]
  4008b4:	7023      	strb	r3, [r4, #0]
  4008b6:	e00b      	b.n	4008d0 <usart_serial_getchar+0xb0>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  4008b8:	4b0e      	ldr	r3, [pc, #56]	; (4008f4 <usart_serial_getchar+0xd4>)
  4008ba:	429d      	cmp	r5, r3
  4008bc:	d108      	bne.n	4008d0 <usart_serial_getchar+0xb0>
		while (usart_read(p_usart, &val));
  4008be:	461e      	mov	r6, r3
  4008c0:	4d0a      	ldr	r5, [pc, #40]	; (4008ec <usart_serial_getchar+0xcc>)
  4008c2:	a901      	add	r1, sp, #4
  4008c4:	4630      	mov	r0, r6
  4008c6:	47a8      	blx	r5
  4008c8:	2800      	cmp	r0, #0
  4008ca:	d1fa      	bne.n	4008c2 <usart_serial_getchar+0xa2>
		*data = (uint8_t)(val & 0xFF);
  4008cc:	9b01      	ldr	r3, [sp, #4]
  4008ce:	7023      	strb	r3, [r4, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  4008d0:	b003      	add	sp, #12
  4008d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4008d4:	400e0600 	.word	0x400e0600
  4008d8:	00400585 	.word	0x00400585
  4008dc:	400e0800 	.word	0x400e0800
  4008e0:	40044000 	.word	0x40044000
  4008e4:	40048000 	.word	0x40048000
  4008e8:	40024000 	.word	0x40024000
  4008ec:	004005ad 	.word	0x004005ad
  4008f0:	40028000 	.word	0x40028000
  4008f4:	4002c000 	.word	0x4002c000

004008f8 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
  4008f8:	b570      	push	{r4, r5, r6, lr}
  4008fa:	460c      	mov	r4, r1
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  4008fc:	4b2a      	ldr	r3, [pc, #168]	; (4009a8 <usart_serial_putchar+0xb0>)
  4008fe:	4298      	cmp	r0, r3
  400900:	d108      	bne.n	400914 <usart_serial_putchar+0x1c>
		while (uart_write((Uart*)p_usart, c)!=0);
  400902:	461e      	mov	r6, r3
  400904:	4d29      	ldr	r5, [pc, #164]	; (4009ac <usart_serial_putchar+0xb4>)
  400906:	4621      	mov	r1, r4
  400908:	4630      	mov	r0, r6
  40090a:	47a8      	blx	r5
  40090c:	2800      	cmp	r0, #0
  40090e:	d1fa      	bne.n	400906 <usart_serial_putchar+0xe>
		return 1;
  400910:	2001      	movs	r0, #1
  400912:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  400914:	4b26      	ldr	r3, [pc, #152]	; (4009b0 <usart_serial_putchar+0xb8>)
  400916:	4298      	cmp	r0, r3
  400918:	d108      	bne.n	40092c <usart_serial_putchar+0x34>
		while (uart_write((Uart*)p_usart, c)!=0);
  40091a:	461e      	mov	r6, r3
  40091c:	4d23      	ldr	r5, [pc, #140]	; (4009ac <usart_serial_putchar+0xb4>)
  40091e:	4621      	mov	r1, r4
  400920:	4630      	mov	r0, r6
  400922:	47a8      	blx	r5
  400924:	2800      	cmp	r0, #0
  400926:	d1fa      	bne.n	40091e <usart_serial_putchar+0x26>
		return 1;
  400928:	2001      	movs	r0, #1
  40092a:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  40092c:	4b21      	ldr	r3, [pc, #132]	; (4009b4 <usart_serial_putchar+0xbc>)
  40092e:	4298      	cmp	r0, r3
  400930:	d108      	bne.n	400944 <usart_serial_putchar+0x4c>
		while (uart_write((Uart*)p_usart, c)!=0);
  400932:	461e      	mov	r6, r3
  400934:	4d1d      	ldr	r5, [pc, #116]	; (4009ac <usart_serial_putchar+0xb4>)
  400936:	4621      	mov	r1, r4
  400938:	4630      	mov	r0, r6
  40093a:	47a8      	blx	r5
  40093c:	2800      	cmp	r0, #0
  40093e:	d1fa      	bne.n	400936 <usart_serial_putchar+0x3e>
		return 1;
  400940:	2001      	movs	r0, #1
  400942:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  400944:	4b1c      	ldr	r3, [pc, #112]	; (4009b8 <usart_serial_putchar+0xc0>)
  400946:	4298      	cmp	r0, r3
  400948:	d108      	bne.n	40095c <usart_serial_putchar+0x64>
		while (uart_write((Uart*)p_usart, c)!=0);
  40094a:	461e      	mov	r6, r3
  40094c:	4d17      	ldr	r5, [pc, #92]	; (4009ac <usart_serial_putchar+0xb4>)
  40094e:	4621      	mov	r1, r4
  400950:	4630      	mov	r0, r6
  400952:	47a8      	blx	r5
  400954:	2800      	cmp	r0, #0
  400956:	d1fa      	bne.n	40094e <usart_serial_putchar+0x56>
		return 1;
  400958:	2001      	movs	r0, #1
  40095a:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  40095c:	4b17      	ldr	r3, [pc, #92]	; (4009bc <usart_serial_putchar+0xc4>)
  40095e:	4298      	cmp	r0, r3
  400960:	d108      	bne.n	400974 <usart_serial_putchar+0x7c>
		while (usart_write(p_usart, c)!=0);
  400962:	461e      	mov	r6, r3
  400964:	4d16      	ldr	r5, [pc, #88]	; (4009c0 <usart_serial_putchar+0xc8>)
  400966:	4621      	mov	r1, r4
  400968:	4630      	mov	r0, r6
  40096a:	47a8      	blx	r5
  40096c:	2800      	cmp	r0, #0
  40096e:	d1fa      	bne.n	400966 <usart_serial_putchar+0x6e>
		return 1;
  400970:	2001      	movs	r0, #1
  400972:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  400974:	4b13      	ldr	r3, [pc, #76]	; (4009c4 <usart_serial_putchar+0xcc>)
  400976:	4298      	cmp	r0, r3
  400978:	d108      	bne.n	40098c <usart_serial_putchar+0x94>
		while (usart_write(p_usart, c)!=0);
  40097a:	461e      	mov	r6, r3
  40097c:	4d10      	ldr	r5, [pc, #64]	; (4009c0 <usart_serial_putchar+0xc8>)
  40097e:	4621      	mov	r1, r4
  400980:	4630      	mov	r0, r6
  400982:	47a8      	blx	r5
  400984:	2800      	cmp	r0, #0
  400986:	d1fa      	bne.n	40097e <usart_serial_putchar+0x86>
		return 1;
  400988:	2001      	movs	r0, #1
  40098a:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  40098c:	4b0e      	ldr	r3, [pc, #56]	; (4009c8 <usart_serial_putchar+0xd0>)
  40098e:	4298      	cmp	r0, r3
  400990:	d108      	bne.n	4009a4 <usart_serial_putchar+0xac>
		while (usart_write(p_usart, c)!=0);
  400992:	461e      	mov	r6, r3
  400994:	4d0a      	ldr	r5, [pc, #40]	; (4009c0 <usart_serial_putchar+0xc8>)
  400996:	4621      	mov	r1, r4
  400998:	4630      	mov	r0, r6
  40099a:	47a8      	blx	r5
  40099c:	2800      	cmp	r0, #0
  40099e:	d1fa      	bne.n	400996 <usart_serial_putchar+0x9e>
		return 1;
  4009a0:	2001      	movs	r0, #1
  4009a2:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
  4009a4:	2000      	movs	r0, #0
}
  4009a6:	bd70      	pop	{r4, r5, r6, pc}
  4009a8:	400e0600 	.word	0x400e0600
  4009ac:	00400575 	.word	0x00400575
  4009b0:	400e0800 	.word	0x400e0800
  4009b4:	40044000 	.word	0x40044000
  4009b8:	40048000 	.word	0x40048000
  4009bc:	40024000 	.word	0x40024000
  4009c0:	00400599 	.word	0x00400599
  4009c4:	40028000 	.word	0x40028000
  4009c8:	4002c000 	.word	0x4002c000

004009cc <SysTick_Handler>:
 *  Process System Tick Event
 *  increments the timestamp counter.
 */
void SysTick_Handler(void)
{
	g_ul_ms_ticks++;
  4009cc:	4a02      	ldr	r2, [pc, #8]	; (4009d8 <SysTick_Handler+0xc>)
  4009ce:	6813      	ldr	r3, [r2, #0]
  4009d0:	3301      	adds	r3, #1
  4009d2:	6013      	str	r3, [r2, #0]
  4009d4:	4770      	bx	lr
  4009d6:	bf00      	nop
  4009d8:	20000864 	.word	0x20000864

004009dc <main>:
 * \brief Application entry point for TWI EEPROM example.
 *
 * \return Unused (ANSI-C compatibility).
 */
int main(void)
{
  4009dc:	b5f0      	push	{r4, r5, r6, r7, lr}
  4009de:	b08d      	sub	sp, #52	; 0x34
	uint32_t i;
	twi_options_t opt;
	twi_packet_t packet_tx, packet_rx;

	/* Initialize the SAM system */
	sysclk_init();
  4009e0:	4b30      	ldr	r3, [pc, #192]	; (400aa4 <main+0xc8>)
  4009e2:	4798      	blx	r3

	/* Initialize the board */
	board_init();
  4009e4:	4b30      	ldr	r3, [pc, #192]	; (400aa8 <main+0xcc>)
  4009e6:	4798      	blx	r3
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4009e8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  4009ec:	4b2f      	ldr	r3, [pc, #188]	; (400aac <main+0xd0>)
  4009ee:	631a      	str	r2, [r3, #48]	; 0x30
  4009f0:	2008      	movs	r0, #8
  4009f2:	4d2f      	ldr	r5, [pc, #188]	; (400ab0 <main+0xd4>)
  4009f4:	47a8      	blx	r5
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  4009f6:	4c2f      	ldr	r4, [pc, #188]	; (400ab4 <main+0xd8>)
  4009f8:	4b2f      	ldr	r3, [pc, #188]	; (400ab8 <main+0xdc>)
  4009fa:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  4009fc:	4a2f      	ldr	r2, [pc, #188]	; (400abc <main+0xe0>)
  4009fe:	4b30      	ldr	r3, [pc, #192]	; (400ac0 <main+0xe4>)
  400a00:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  400a02:	4a30      	ldr	r2, [pc, #192]	; (400ac4 <main+0xe8>)
  400a04:	4b30      	ldr	r3, [pc, #192]	; (400ac8 <main+0xec>)
  400a06:	601a      	str	r2, [r3, #0]
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
#if ((!SAM4L) && (!SAMG55))
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
  400a08:	4e30      	ldr	r6, [pc, #192]	; (400acc <main+0xf0>)
  400a0a:	9601      	str	r6, [sp, #4]
	uart_settings.ul_baudrate = opt->baudrate;
  400a0c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  400a10:	9302      	str	r3, [sp, #8]
	uart_settings.ul_mode = opt->paritytype;
  400a12:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400a16:	9303      	str	r3, [sp, #12]
  400a18:	2008      	movs	r0, #8
  400a1a:	47a8      	blx	r5
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
		sysclk_enable_peripheral_clock(ID_UART0);
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  400a1c:	a901      	add	r1, sp, #4
  400a1e:	4620      	mov	r0, r4
  400a20:	4b2b      	ldr	r3, [pc, #172]	; (400ad0 <main+0xf4>)
  400a22:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  400a24:	4f2b      	ldr	r7, [pc, #172]	; (400ad4 <main+0xf8>)
  400a26:	683b      	ldr	r3, [r7, #0]
  400a28:	2100      	movs	r1, #0
  400a2a:	6898      	ldr	r0, [r3, #8]
  400a2c:	4c2a      	ldr	r4, [pc, #168]	; (400ad8 <main+0xfc>)
  400a2e:	47a0      	blx	r4
	setbuf(stdin, NULL);
  400a30:	683b      	ldr	r3, [r7, #0]
  400a32:	2100      	movs	r1, #0
  400a34:	6858      	ldr	r0, [r3, #4]
  400a36:	47a0      	blx	r4
#endif
	/* Initialize the console UART */
	configure_console();

	/* Output example information */
	puts(STRING_HEADER);
  400a38:	4828      	ldr	r0, [pc, #160]	; (400adc <main+0x100>)
  400a3a:	4c29      	ldr	r4, [pc, #164]	; (400ae0 <main+0x104>)
  400a3c:	47a0      	blx	r4

	/* Configure systick for 1 ms */
	puts("Configure system tick to get 1ms tick period.\r");
  400a3e:	4829      	ldr	r0, [pc, #164]	; (400ae4 <main+0x108>)
  400a40:	47a0      	blx	r4
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  400a42:	4b29      	ldr	r3, [pc, #164]	; (400ae8 <main+0x10c>)
  400a44:	4a29      	ldr	r2, [pc, #164]	; (400aec <main+0x110>)
  400a46:	605a      	str	r2, [r3, #4]
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  400a48:	21f0      	movs	r1, #240	; 0xf0
  400a4a:	4a29      	ldr	r2, [pc, #164]	; (400af0 <main+0x114>)
  400a4c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
  400a50:	2400      	movs	r4, #0
  400a52:	609c      	str	r4, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
  400a54:	2207      	movs	r2, #7
  400a56:	601a      	str	r2, [r3, #0]
	/* Enable the peripheral and set TWI mode. */
	flexcom_enable(BOARD_FLEXCOM_TWI);
	flexcom_set_opmode(BOARD_FLEXCOM_TWI, FLEXCOM_TWI);
#else
	/* Enable the peripheral clock for TWI */
	pmc_enable_periph_clk(BOARD_ID_TWI_EEPROM);
  400a58:	2013      	movs	r0, #19
  400a5a:	47a8      	blx	r5
#endif

	/* Configure the options of TWI driver */
	opt.master_clk = sysclk_get_cpu_hz();
  400a5c:	9609      	str	r6, [sp, #36]	; 0x24
	opt.speed      = TWI_CLK;
  400a5e:	4b25      	ldr	r3, [pc, #148]	; (400af4 <main+0x118>)
  400a60:	930a      	str	r3, [sp, #40]	; 0x28

	/* Configure the data packet to be transmitted */
	packet_tx.chip        = 0b0100000;
  400a62:	2320      	movs	r3, #32
  400a64:	f88d 3020 	strb.w	r3, [sp, #32]
	packet_tx.addr[0]     = EEPROM_MEM_ADDR >> 8;
  400a68:	f88d 4010 	strb.w	r4, [sp, #16]
	packet_tx.addr[1]     = EEPROM_MEM_ADDR;
  400a6c:	f88d 4011 	strb.w	r4, [sp, #17]
	packet_tx.addr_length = 0;
  400a70:	9405      	str	r4, [sp, #20]
	packet_tx.buffer      = (uint8_t *) test_data_tx;
  400a72:	4b21      	ldr	r3, [pc, #132]	; (400af8 <main+0x11c>)
  400a74:	9306      	str	r3, [sp, #24]
	packet_tx.length      = TEST_DATA_LENGTH;
  400a76:	2301      	movs	r3, #1
  400a78:	9307      	str	r3, [sp, #28]
	packet_rx.addr[1]     = packet_tx.addr[1];
	packet_rx.addr_length = packet_tx.addr_length;
	packet_rx.buffer      = gs_uc_test_data_rx;
	packet_rx.length      = packet_tx.length;

	if (twi_master_init(BOARD_BASE_TWI_EEPROM, &opt) != TWI_SUCCESS) {
  400a7a:	a909      	add	r1, sp, #36	; 0x24
  400a7c:	481f      	ldr	r0, [pc, #124]	; (400afc <main+0x120>)
  400a7e:	4b20      	ldr	r3, [pc, #128]	; (400b00 <main+0x124>)
  400a80:	4798      	blx	r3
  400a82:	b118      	cbz	r0, 400a8c <main+0xb0>
		puts("-E-\tTWI master initialization failed.\r");
  400a84:	481f      	ldr	r0, [pc, #124]	; (400b04 <main+0x128>)
  400a86:	4b16      	ldr	r3, [pc, #88]	; (400ae0 <main+0x104>)
  400a88:	4798      	blx	r3
  400a8a:	e7fe      	b.n	400a8a <main+0xae>
		}
	}

	while(1){
	/* Send test pattern to EEPROM */
	if (twi_master_write(BOARD_BASE_TWI_EEPROM, &packet_tx) != TWI_SUCCESS) {
  400a8c:	4d1b      	ldr	r5, [pc, #108]	; (400afc <main+0x120>)
  400a8e:	4c1e      	ldr	r4, [pc, #120]	; (400b08 <main+0x12c>)
  400a90:	a904      	add	r1, sp, #16
  400a92:	4628      	mov	r0, r5
  400a94:	47a0      	blx	r4
  400a96:	2800      	cmp	r0, #0
  400a98:	d0fa      	beq.n	400a90 <main+0xb4>
		puts("-E-\tTWI master write packet failed.\r");
  400a9a:	481c      	ldr	r0, [pc, #112]	; (400b0c <main+0x130>)
  400a9c:	4b10      	ldr	r3, [pc, #64]	; (400ae0 <main+0x104>)
  400a9e:	4798      	blx	r3
  400aa0:	e7fe      	b.n	400aa0 <main+0xc4>
  400aa2:	bf00      	nop
  400aa4:	0040011d 	.word	0x0040011d
  400aa8:	0040020d 	.word	0x0040020d
  400aac:	400e1000 	.word	0x400e1000
  400ab0:	004003e1 	.word	0x004003e1
  400ab4:	400e0600 	.word	0x400e0600
  400ab8:	200008a4 	.word	0x200008a4
  400abc:	004008f9 	.word	0x004008f9
  400ac0:	200008a0 	.word	0x200008a0
  400ac4:	00400821 	.word	0x00400821
  400ac8:	2000089c 	.word	0x2000089c
  400acc:	05f5e100 	.word	0x05f5e100
  400ad0:	0040053d 	.word	0x0040053d
  400ad4:	20000430 	.word	0x20000430
  400ad8:	00400c75 	.word	0x00400c75
  400adc:	004027ec 	.word	0x004027ec
  400ae0:	00400c65 	.word	0x00400c65
  400ae4:	00402848 	.word	0x00402848
  400ae8:	e000e010 	.word	0xe000e010
  400aec:	0001869f 	.word	0x0001869f
  400af0:	e000ed00 	.word	0xe000ed00
  400af4:	00061a80 	.word	0x00061a80
  400af8:	004028c8 	.word	0x004028c8
  400afc:	40018000 	.word	0x40018000
  400b00:	00400451 	.word	0x00400451
  400b04:	00402878 	.word	0x00402878
  400b08:	004004b5 	.word	0x004004b5
  400b0c:	004028a0 	.word	0x004028a0

00400b10 <__libc_init_array>:
  400b10:	b570      	push	{r4, r5, r6, lr}
  400b12:	4e0f      	ldr	r6, [pc, #60]	; (400b50 <__libc_init_array+0x40>)
  400b14:	4d0f      	ldr	r5, [pc, #60]	; (400b54 <__libc_init_array+0x44>)
  400b16:	1b76      	subs	r6, r6, r5
  400b18:	10b6      	asrs	r6, r6, #2
  400b1a:	bf18      	it	ne
  400b1c:	2400      	movne	r4, #0
  400b1e:	d005      	beq.n	400b2c <__libc_init_array+0x1c>
  400b20:	3401      	adds	r4, #1
  400b22:	f855 3b04 	ldr.w	r3, [r5], #4
  400b26:	4798      	blx	r3
  400b28:	42a6      	cmp	r6, r4
  400b2a:	d1f9      	bne.n	400b20 <__libc_init_array+0x10>
  400b2c:	4e0a      	ldr	r6, [pc, #40]	; (400b58 <__libc_init_array+0x48>)
  400b2e:	4d0b      	ldr	r5, [pc, #44]	; (400b5c <__libc_init_array+0x4c>)
  400b30:	1b76      	subs	r6, r6, r5
  400b32:	f001 fed1 	bl	4028d8 <_init>
  400b36:	10b6      	asrs	r6, r6, #2
  400b38:	bf18      	it	ne
  400b3a:	2400      	movne	r4, #0
  400b3c:	d006      	beq.n	400b4c <__libc_init_array+0x3c>
  400b3e:	3401      	adds	r4, #1
  400b40:	f855 3b04 	ldr.w	r3, [r5], #4
  400b44:	4798      	blx	r3
  400b46:	42a6      	cmp	r6, r4
  400b48:	d1f9      	bne.n	400b3e <__libc_init_array+0x2e>
  400b4a:	bd70      	pop	{r4, r5, r6, pc}
  400b4c:	bd70      	pop	{r4, r5, r6, pc}
  400b4e:	bf00      	nop
  400b50:	004028e4 	.word	0x004028e4
  400b54:	004028e4 	.word	0x004028e4
  400b58:	004028ec 	.word	0x004028ec
  400b5c:	004028e4 	.word	0x004028e4

00400b60 <memset>:
  400b60:	b470      	push	{r4, r5, r6}
  400b62:	0784      	lsls	r4, r0, #30
  400b64:	d046      	beq.n	400bf4 <memset+0x94>
  400b66:	1e54      	subs	r4, r2, #1
  400b68:	2a00      	cmp	r2, #0
  400b6a:	d041      	beq.n	400bf0 <memset+0x90>
  400b6c:	b2cd      	uxtb	r5, r1
  400b6e:	4603      	mov	r3, r0
  400b70:	e002      	b.n	400b78 <memset+0x18>
  400b72:	1e62      	subs	r2, r4, #1
  400b74:	b3e4      	cbz	r4, 400bf0 <memset+0x90>
  400b76:	4614      	mov	r4, r2
  400b78:	f803 5b01 	strb.w	r5, [r3], #1
  400b7c:	079a      	lsls	r2, r3, #30
  400b7e:	d1f8      	bne.n	400b72 <memset+0x12>
  400b80:	2c03      	cmp	r4, #3
  400b82:	d92e      	bls.n	400be2 <memset+0x82>
  400b84:	b2cd      	uxtb	r5, r1
  400b86:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  400b8a:	2c0f      	cmp	r4, #15
  400b8c:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  400b90:	d919      	bls.n	400bc6 <memset+0x66>
  400b92:	f103 0210 	add.w	r2, r3, #16
  400b96:	4626      	mov	r6, r4
  400b98:	3e10      	subs	r6, #16
  400b9a:	2e0f      	cmp	r6, #15
  400b9c:	f842 5c10 	str.w	r5, [r2, #-16]
  400ba0:	f842 5c0c 	str.w	r5, [r2, #-12]
  400ba4:	f842 5c08 	str.w	r5, [r2, #-8]
  400ba8:	f842 5c04 	str.w	r5, [r2, #-4]
  400bac:	f102 0210 	add.w	r2, r2, #16
  400bb0:	d8f2      	bhi.n	400b98 <memset+0x38>
  400bb2:	f1a4 0210 	sub.w	r2, r4, #16
  400bb6:	f022 020f 	bic.w	r2, r2, #15
  400bba:	f004 040f 	and.w	r4, r4, #15
  400bbe:	3210      	adds	r2, #16
  400bc0:	2c03      	cmp	r4, #3
  400bc2:	4413      	add	r3, r2
  400bc4:	d90d      	bls.n	400be2 <memset+0x82>
  400bc6:	461e      	mov	r6, r3
  400bc8:	4622      	mov	r2, r4
  400bca:	3a04      	subs	r2, #4
  400bcc:	2a03      	cmp	r2, #3
  400bce:	f846 5b04 	str.w	r5, [r6], #4
  400bd2:	d8fa      	bhi.n	400bca <memset+0x6a>
  400bd4:	1f22      	subs	r2, r4, #4
  400bd6:	f022 0203 	bic.w	r2, r2, #3
  400bda:	3204      	adds	r2, #4
  400bdc:	4413      	add	r3, r2
  400bde:	f004 0403 	and.w	r4, r4, #3
  400be2:	b12c      	cbz	r4, 400bf0 <memset+0x90>
  400be4:	b2c9      	uxtb	r1, r1
  400be6:	441c      	add	r4, r3
  400be8:	f803 1b01 	strb.w	r1, [r3], #1
  400bec:	42a3      	cmp	r3, r4
  400bee:	d1fb      	bne.n	400be8 <memset+0x88>
  400bf0:	bc70      	pop	{r4, r5, r6}
  400bf2:	4770      	bx	lr
  400bf4:	4614      	mov	r4, r2
  400bf6:	4603      	mov	r3, r0
  400bf8:	e7c2      	b.n	400b80 <memset+0x20>
  400bfa:	bf00      	nop

00400bfc <_puts_r>:
  400bfc:	b5f0      	push	{r4, r5, r6, r7, lr}
  400bfe:	4605      	mov	r5, r0
  400c00:	b089      	sub	sp, #36	; 0x24
  400c02:	4608      	mov	r0, r1
  400c04:	460c      	mov	r4, r1
  400c06:	f000 f8fb 	bl	400e00 <strlen>
  400c0a:	6bab      	ldr	r3, [r5, #56]	; 0x38
  400c0c:	4f14      	ldr	r7, [pc, #80]	; (400c60 <_puts_r+0x64>)
  400c0e:	9404      	str	r4, [sp, #16]
  400c10:	2601      	movs	r6, #1
  400c12:	1c44      	adds	r4, r0, #1
  400c14:	a904      	add	r1, sp, #16
  400c16:	2202      	movs	r2, #2
  400c18:	9403      	str	r4, [sp, #12]
  400c1a:	9005      	str	r0, [sp, #20]
  400c1c:	68ac      	ldr	r4, [r5, #8]
  400c1e:	9706      	str	r7, [sp, #24]
  400c20:	9607      	str	r6, [sp, #28]
  400c22:	9101      	str	r1, [sp, #4]
  400c24:	9202      	str	r2, [sp, #8]
  400c26:	b1b3      	cbz	r3, 400c56 <_puts_r+0x5a>
  400c28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  400c2c:	049a      	lsls	r2, r3, #18
  400c2e:	d406      	bmi.n	400c3e <_puts_r+0x42>
  400c30:	6e62      	ldr	r2, [r4, #100]	; 0x64
  400c32:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  400c36:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  400c3a:	81a3      	strh	r3, [r4, #12]
  400c3c:	6662      	str	r2, [r4, #100]	; 0x64
  400c3e:	4621      	mov	r1, r4
  400c40:	4628      	mov	r0, r5
  400c42:	aa01      	add	r2, sp, #4
  400c44:	f000 fc4a 	bl	4014dc <__sfvwrite_r>
  400c48:	2800      	cmp	r0, #0
  400c4a:	bf14      	ite	ne
  400c4c:	f04f 30ff 	movne.w	r0, #4294967295
  400c50:	200a      	moveq	r0, #10
  400c52:	b009      	add	sp, #36	; 0x24
  400c54:	bdf0      	pop	{r4, r5, r6, r7, pc}
  400c56:	4628      	mov	r0, r5
  400c58:	f000 faec 	bl	401234 <__sinit>
  400c5c:	e7e4      	b.n	400c28 <_puts_r+0x2c>
  400c5e:	bf00      	nop
  400c60:	004028d4 	.word	0x004028d4

00400c64 <puts>:
  400c64:	4b02      	ldr	r3, [pc, #8]	; (400c70 <puts+0xc>)
  400c66:	4601      	mov	r1, r0
  400c68:	6818      	ldr	r0, [r3, #0]
  400c6a:	f7ff bfc7 	b.w	400bfc <_puts_r>
  400c6e:	bf00      	nop
  400c70:	20000430 	.word	0x20000430

00400c74 <setbuf>:
  400c74:	2900      	cmp	r1, #0
  400c76:	bf0c      	ite	eq
  400c78:	2202      	moveq	r2, #2
  400c7a:	2200      	movne	r2, #0
  400c7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  400c80:	f000 b800 	b.w	400c84 <setvbuf>

00400c84 <setvbuf>:
  400c84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  400c88:	4c51      	ldr	r4, [pc, #324]	; (400dd0 <setvbuf+0x14c>)
  400c8a:	6825      	ldr	r5, [r4, #0]
  400c8c:	b083      	sub	sp, #12
  400c8e:	4604      	mov	r4, r0
  400c90:	460f      	mov	r7, r1
  400c92:	4690      	mov	r8, r2
  400c94:	461e      	mov	r6, r3
  400c96:	b115      	cbz	r5, 400c9e <setvbuf+0x1a>
  400c98:	6bab      	ldr	r3, [r5, #56]	; 0x38
  400c9a:	2b00      	cmp	r3, #0
  400c9c:	d079      	beq.n	400d92 <setvbuf+0x10e>
  400c9e:	f1b8 0f02 	cmp.w	r8, #2
  400ca2:	d004      	beq.n	400cae <setvbuf+0x2a>
  400ca4:	f1b8 0f01 	cmp.w	r8, #1
  400ca8:	d87f      	bhi.n	400daa <setvbuf+0x126>
  400caa:	2e00      	cmp	r6, #0
  400cac:	db7d      	blt.n	400daa <setvbuf+0x126>
  400cae:	4621      	mov	r1, r4
  400cb0:	4628      	mov	r0, r5
  400cb2:	f000 fa2b 	bl	40110c <_fflush_r>
  400cb6:	6b21      	ldr	r1, [r4, #48]	; 0x30
  400cb8:	b141      	cbz	r1, 400ccc <setvbuf+0x48>
  400cba:	f104 0340 	add.w	r3, r4, #64	; 0x40
  400cbe:	4299      	cmp	r1, r3
  400cc0:	d002      	beq.n	400cc8 <setvbuf+0x44>
  400cc2:	4628      	mov	r0, r5
  400cc4:	f000 fb22 	bl	40130c <_free_r>
  400cc8:	2300      	movs	r3, #0
  400cca:	6323      	str	r3, [r4, #48]	; 0x30
  400ccc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  400cd0:	2200      	movs	r2, #0
  400cd2:	61a2      	str	r2, [r4, #24]
  400cd4:	6062      	str	r2, [r4, #4]
  400cd6:	061a      	lsls	r2, r3, #24
  400cd8:	d454      	bmi.n	400d84 <setvbuf+0x100>
  400cda:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  400cde:	f023 0303 	bic.w	r3, r3, #3
  400ce2:	f1b8 0f02 	cmp.w	r8, #2
  400ce6:	81a3      	strh	r3, [r4, #12]
  400ce8:	d039      	beq.n	400d5e <setvbuf+0xda>
  400cea:	ab01      	add	r3, sp, #4
  400cec:	466a      	mov	r2, sp
  400cee:	4621      	mov	r1, r4
  400cf0:	4628      	mov	r0, r5
  400cf2:	f000 fd9f 	bl	401834 <__swhatbuf_r>
  400cf6:	89a3      	ldrh	r3, [r4, #12]
  400cf8:	4318      	orrs	r0, r3
  400cfa:	81a0      	strh	r0, [r4, #12]
  400cfc:	b326      	cbz	r6, 400d48 <setvbuf+0xc4>
  400cfe:	b327      	cbz	r7, 400d4a <setvbuf+0xc6>
  400d00:	6bab      	ldr	r3, [r5, #56]	; 0x38
  400d02:	2b00      	cmp	r3, #0
  400d04:	d04d      	beq.n	400da2 <setvbuf+0x11e>
  400d06:	9b00      	ldr	r3, [sp, #0]
  400d08:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
  400d0c:	6027      	str	r7, [r4, #0]
  400d0e:	429e      	cmp	r6, r3
  400d10:	bf1c      	itt	ne
  400d12:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
  400d16:	81a0      	strhne	r0, [r4, #12]
  400d18:	f1b8 0f01 	cmp.w	r8, #1
  400d1c:	bf08      	it	eq
  400d1e:	f040 0001 	orreq.w	r0, r0, #1
  400d22:	b283      	uxth	r3, r0
  400d24:	bf08      	it	eq
  400d26:	81a0      	strheq	r0, [r4, #12]
  400d28:	f003 0008 	and.w	r0, r3, #8
  400d2c:	b280      	uxth	r0, r0
  400d2e:	6127      	str	r7, [r4, #16]
  400d30:	6166      	str	r6, [r4, #20]
  400d32:	b318      	cbz	r0, 400d7c <setvbuf+0xf8>
  400d34:	f013 0001 	ands.w	r0, r3, #1
  400d38:	d02f      	beq.n	400d9a <setvbuf+0x116>
  400d3a:	2000      	movs	r0, #0
  400d3c:	4276      	negs	r6, r6
  400d3e:	61a6      	str	r6, [r4, #24]
  400d40:	60a0      	str	r0, [r4, #8]
  400d42:	b003      	add	sp, #12
  400d44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  400d48:	9e00      	ldr	r6, [sp, #0]
  400d4a:	4630      	mov	r0, r6
  400d4c:	f000 fde6 	bl	40191c <malloc>
  400d50:	4607      	mov	r7, r0
  400d52:	b368      	cbz	r0, 400db0 <setvbuf+0x12c>
  400d54:	89a3      	ldrh	r3, [r4, #12]
  400d56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  400d5a:	81a3      	strh	r3, [r4, #12]
  400d5c:	e7d0      	b.n	400d00 <setvbuf+0x7c>
  400d5e:	2000      	movs	r0, #0
  400d60:	f104 0243 	add.w	r2, r4, #67	; 0x43
  400d64:	f043 0302 	orr.w	r3, r3, #2
  400d68:	2500      	movs	r5, #0
  400d6a:	2101      	movs	r1, #1
  400d6c:	81a3      	strh	r3, [r4, #12]
  400d6e:	60a5      	str	r5, [r4, #8]
  400d70:	6022      	str	r2, [r4, #0]
  400d72:	6122      	str	r2, [r4, #16]
  400d74:	6161      	str	r1, [r4, #20]
  400d76:	b003      	add	sp, #12
  400d78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  400d7c:	60a0      	str	r0, [r4, #8]
  400d7e:	b003      	add	sp, #12
  400d80:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  400d84:	6921      	ldr	r1, [r4, #16]
  400d86:	4628      	mov	r0, r5
  400d88:	f000 fac0 	bl	40130c <_free_r>
  400d8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  400d90:	e7a3      	b.n	400cda <setvbuf+0x56>
  400d92:	4628      	mov	r0, r5
  400d94:	f000 fa4e 	bl	401234 <__sinit>
  400d98:	e781      	b.n	400c9e <setvbuf+0x1a>
  400d9a:	60a6      	str	r6, [r4, #8]
  400d9c:	b003      	add	sp, #12
  400d9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  400da2:	4628      	mov	r0, r5
  400da4:	f000 fa46 	bl	401234 <__sinit>
  400da8:	e7ad      	b.n	400d06 <setvbuf+0x82>
  400daa:	f04f 30ff 	mov.w	r0, #4294967295
  400dae:	e7e2      	b.n	400d76 <setvbuf+0xf2>
  400db0:	f8dd 9000 	ldr.w	r9, [sp]
  400db4:	45b1      	cmp	r9, r6
  400db6:	d006      	beq.n	400dc6 <setvbuf+0x142>
  400db8:	4648      	mov	r0, r9
  400dba:	f000 fdaf 	bl	40191c <malloc>
  400dbe:	4607      	mov	r7, r0
  400dc0:	b108      	cbz	r0, 400dc6 <setvbuf+0x142>
  400dc2:	464e      	mov	r6, r9
  400dc4:	e7c6      	b.n	400d54 <setvbuf+0xd0>
  400dc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  400dca:	f04f 30ff 	mov.w	r0, #4294967295
  400dce:	e7c7      	b.n	400d60 <setvbuf+0xdc>
  400dd0:	20000430 	.word	0x20000430
	...

00400e00 <strlen>:
  400e00:	f890 f000 	pld	[r0]
  400e04:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  400e08:	f020 0107 	bic.w	r1, r0, #7
  400e0c:	f06f 0c00 	mvn.w	ip, #0
  400e10:	f010 0407 	ands.w	r4, r0, #7
  400e14:	f891 f020 	pld	[r1, #32]
  400e18:	f040 8049 	bne.w	400eae <strlen+0xae>
  400e1c:	f04f 0400 	mov.w	r4, #0
  400e20:	f06f 0007 	mvn.w	r0, #7
  400e24:	e9d1 2300 	ldrd	r2, r3, [r1]
  400e28:	f891 f040 	pld	[r1, #64]	; 0x40
  400e2c:	f100 0008 	add.w	r0, r0, #8
  400e30:	fa82 f24c 	uadd8	r2, r2, ip
  400e34:	faa4 f28c 	sel	r2, r4, ip
  400e38:	fa83 f34c 	uadd8	r3, r3, ip
  400e3c:	faa2 f38c 	sel	r3, r2, ip
  400e40:	bb4b      	cbnz	r3, 400e96 <strlen+0x96>
  400e42:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  400e46:	fa82 f24c 	uadd8	r2, r2, ip
  400e4a:	f100 0008 	add.w	r0, r0, #8
  400e4e:	faa4 f28c 	sel	r2, r4, ip
  400e52:	fa83 f34c 	uadd8	r3, r3, ip
  400e56:	faa2 f38c 	sel	r3, r2, ip
  400e5a:	b9e3      	cbnz	r3, 400e96 <strlen+0x96>
  400e5c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  400e60:	fa82 f24c 	uadd8	r2, r2, ip
  400e64:	f100 0008 	add.w	r0, r0, #8
  400e68:	faa4 f28c 	sel	r2, r4, ip
  400e6c:	fa83 f34c 	uadd8	r3, r3, ip
  400e70:	faa2 f38c 	sel	r3, r2, ip
  400e74:	b97b      	cbnz	r3, 400e96 <strlen+0x96>
  400e76:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  400e7a:	f101 0120 	add.w	r1, r1, #32
  400e7e:	fa82 f24c 	uadd8	r2, r2, ip
  400e82:	f100 0008 	add.w	r0, r0, #8
  400e86:	faa4 f28c 	sel	r2, r4, ip
  400e8a:	fa83 f34c 	uadd8	r3, r3, ip
  400e8e:	faa2 f38c 	sel	r3, r2, ip
  400e92:	2b00      	cmp	r3, #0
  400e94:	d0c6      	beq.n	400e24 <strlen+0x24>
  400e96:	2a00      	cmp	r2, #0
  400e98:	bf04      	itt	eq
  400e9a:	3004      	addeq	r0, #4
  400e9c:	461a      	moveq	r2, r3
  400e9e:	ba12      	rev	r2, r2
  400ea0:	fab2 f282 	clz	r2, r2
  400ea4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  400ea8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  400eac:	4770      	bx	lr
  400eae:	e9d1 2300 	ldrd	r2, r3, [r1]
  400eb2:	f004 0503 	and.w	r5, r4, #3
  400eb6:	f1c4 0000 	rsb	r0, r4, #0
  400eba:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  400ebe:	f014 0f04 	tst.w	r4, #4
  400ec2:	f891 f040 	pld	[r1, #64]	; 0x40
  400ec6:	fa0c f505 	lsl.w	r5, ip, r5
  400eca:	ea62 0205 	orn	r2, r2, r5
  400ece:	bf1c      	itt	ne
  400ed0:	ea63 0305 	ornne	r3, r3, r5
  400ed4:	4662      	movne	r2, ip
  400ed6:	f04f 0400 	mov.w	r4, #0
  400eda:	e7a9      	b.n	400e30 <strlen+0x30>

00400edc <__swsetup_r>:
  400edc:	b538      	push	{r3, r4, r5, lr}
  400ede:	4b30      	ldr	r3, [pc, #192]	; (400fa0 <__swsetup_r+0xc4>)
  400ee0:	681b      	ldr	r3, [r3, #0]
  400ee2:	4605      	mov	r5, r0
  400ee4:	460c      	mov	r4, r1
  400ee6:	b113      	cbz	r3, 400eee <__swsetup_r+0x12>
  400ee8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  400eea:	2a00      	cmp	r2, #0
  400eec:	d038      	beq.n	400f60 <__swsetup_r+0x84>
  400eee:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  400ef2:	b293      	uxth	r3, r2
  400ef4:	0718      	lsls	r0, r3, #28
  400ef6:	d50c      	bpl.n	400f12 <__swsetup_r+0x36>
  400ef8:	6920      	ldr	r0, [r4, #16]
  400efa:	b1a8      	cbz	r0, 400f28 <__swsetup_r+0x4c>
  400efc:	f013 0201 	ands.w	r2, r3, #1
  400f00:	d01e      	beq.n	400f40 <__swsetup_r+0x64>
  400f02:	6963      	ldr	r3, [r4, #20]
  400f04:	2200      	movs	r2, #0
  400f06:	425b      	negs	r3, r3
  400f08:	61a3      	str	r3, [r4, #24]
  400f0a:	60a2      	str	r2, [r4, #8]
  400f0c:	b1f0      	cbz	r0, 400f4c <__swsetup_r+0x70>
  400f0e:	2000      	movs	r0, #0
  400f10:	bd38      	pop	{r3, r4, r5, pc}
  400f12:	06d9      	lsls	r1, r3, #27
  400f14:	d53c      	bpl.n	400f90 <__swsetup_r+0xb4>
  400f16:	0758      	lsls	r0, r3, #29
  400f18:	d426      	bmi.n	400f68 <__swsetup_r+0x8c>
  400f1a:	6920      	ldr	r0, [r4, #16]
  400f1c:	f042 0308 	orr.w	r3, r2, #8
  400f20:	81a3      	strh	r3, [r4, #12]
  400f22:	b29b      	uxth	r3, r3
  400f24:	2800      	cmp	r0, #0
  400f26:	d1e9      	bne.n	400efc <__swsetup_r+0x20>
  400f28:	f403 7220 	and.w	r2, r3, #640	; 0x280
  400f2c:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  400f30:	d0e4      	beq.n	400efc <__swsetup_r+0x20>
  400f32:	4628      	mov	r0, r5
  400f34:	4621      	mov	r1, r4
  400f36:	f000 fcad 	bl	401894 <__smakebuf_r>
  400f3a:	89a3      	ldrh	r3, [r4, #12]
  400f3c:	6920      	ldr	r0, [r4, #16]
  400f3e:	e7dd      	b.n	400efc <__swsetup_r+0x20>
  400f40:	0799      	lsls	r1, r3, #30
  400f42:	bf58      	it	pl
  400f44:	6962      	ldrpl	r2, [r4, #20]
  400f46:	60a2      	str	r2, [r4, #8]
  400f48:	2800      	cmp	r0, #0
  400f4a:	d1e0      	bne.n	400f0e <__swsetup_r+0x32>
  400f4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  400f50:	061a      	lsls	r2, r3, #24
  400f52:	d5dd      	bpl.n	400f10 <__swsetup_r+0x34>
  400f54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  400f58:	81a3      	strh	r3, [r4, #12]
  400f5a:	f04f 30ff 	mov.w	r0, #4294967295
  400f5e:	bd38      	pop	{r3, r4, r5, pc}
  400f60:	4618      	mov	r0, r3
  400f62:	f000 f967 	bl	401234 <__sinit>
  400f66:	e7c2      	b.n	400eee <__swsetup_r+0x12>
  400f68:	6b21      	ldr	r1, [r4, #48]	; 0x30
  400f6a:	b151      	cbz	r1, 400f82 <__swsetup_r+0xa6>
  400f6c:	f104 0340 	add.w	r3, r4, #64	; 0x40
  400f70:	4299      	cmp	r1, r3
  400f72:	d004      	beq.n	400f7e <__swsetup_r+0xa2>
  400f74:	4628      	mov	r0, r5
  400f76:	f000 f9c9 	bl	40130c <_free_r>
  400f7a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  400f7e:	2300      	movs	r3, #0
  400f80:	6323      	str	r3, [r4, #48]	; 0x30
  400f82:	2300      	movs	r3, #0
  400f84:	6920      	ldr	r0, [r4, #16]
  400f86:	6063      	str	r3, [r4, #4]
  400f88:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  400f8c:	6020      	str	r0, [r4, #0]
  400f8e:	e7c5      	b.n	400f1c <__swsetup_r+0x40>
  400f90:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  400f94:	2309      	movs	r3, #9
  400f96:	602b      	str	r3, [r5, #0]
  400f98:	f04f 30ff 	mov.w	r0, #4294967295
  400f9c:	81a2      	strh	r2, [r4, #12]
  400f9e:	bd38      	pop	{r3, r4, r5, pc}
  400fa0:	20000430 	.word	0x20000430

00400fa4 <register_fini>:
  400fa4:	4b02      	ldr	r3, [pc, #8]	; (400fb0 <register_fini+0xc>)
  400fa6:	b113      	cbz	r3, 400fae <register_fini+0xa>
  400fa8:	4802      	ldr	r0, [pc, #8]	; (400fb4 <register_fini+0x10>)
  400faa:	f000 b805 	b.w	400fb8 <atexit>
  400fae:	4770      	bx	lr
  400fb0:	00000000 	.word	0x00000000
  400fb4:	00401249 	.word	0x00401249

00400fb8 <atexit>:
  400fb8:	2300      	movs	r3, #0
  400fba:	4601      	mov	r1, r0
  400fbc:	461a      	mov	r2, r3
  400fbe:	4618      	mov	r0, r3
  400fc0:	f001 bb1c 	b.w	4025fc <__register_exitproc>

00400fc4 <__sflush_r>:
  400fc4:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  400fc8:	b29a      	uxth	r2, r3
  400fca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400fce:	460d      	mov	r5, r1
  400fd0:	0711      	lsls	r1, r2, #28
  400fd2:	4680      	mov	r8, r0
  400fd4:	d43c      	bmi.n	401050 <__sflush_r+0x8c>
  400fd6:	686a      	ldr	r2, [r5, #4]
  400fd8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  400fdc:	2a00      	cmp	r2, #0
  400fde:	81ab      	strh	r3, [r5, #12]
  400fe0:	dd73      	ble.n	4010ca <__sflush_r+0x106>
  400fe2:	6aac      	ldr	r4, [r5, #40]	; 0x28
  400fe4:	2c00      	cmp	r4, #0
  400fe6:	d04b      	beq.n	401080 <__sflush_r+0xbc>
  400fe8:	b29b      	uxth	r3, r3
  400fea:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
  400fee:	2100      	movs	r1, #0
  400ff0:	b292      	uxth	r2, r2
  400ff2:	f8d8 6000 	ldr.w	r6, [r8]
  400ff6:	f8c8 1000 	str.w	r1, [r8]
  400ffa:	2a00      	cmp	r2, #0
  400ffc:	d069      	beq.n	4010d2 <__sflush_r+0x10e>
  400ffe:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  401000:	075f      	lsls	r7, r3, #29
  401002:	d505      	bpl.n	401010 <__sflush_r+0x4c>
  401004:	6869      	ldr	r1, [r5, #4]
  401006:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  401008:	1a52      	subs	r2, r2, r1
  40100a:	b10b      	cbz	r3, 401010 <__sflush_r+0x4c>
  40100c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  40100e:	1ad2      	subs	r2, r2, r3
  401010:	2300      	movs	r3, #0
  401012:	69e9      	ldr	r1, [r5, #28]
  401014:	4640      	mov	r0, r8
  401016:	47a0      	blx	r4
  401018:	1c44      	adds	r4, r0, #1
  40101a:	d03c      	beq.n	401096 <__sflush_r+0xd2>
  40101c:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  401020:	692a      	ldr	r2, [r5, #16]
  401022:	602a      	str	r2, [r5, #0]
  401024:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  401028:	2200      	movs	r2, #0
  40102a:	81ab      	strh	r3, [r5, #12]
  40102c:	04db      	lsls	r3, r3, #19
  40102e:	606a      	str	r2, [r5, #4]
  401030:	d449      	bmi.n	4010c6 <__sflush_r+0x102>
  401032:	6b29      	ldr	r1, [r5, #48]	; 0x30
  401034:	f8c8 6000 	str.w	r6, [r8]
  401038:	b311      	cbz	r1, 401080 <__sflush_r+0xbc>
  40103a:	f105 0340 	add.w	r3, r5, #64	; 0x40
  40103e:	4299      	cmp	r1, r3
  401040:	d002      	beq.n	401048 <__sflush_r+0x84>
  401042:	4640      	mov	r0, r8
  401044:	f000 f962 	bl	40130c <_free_r>
  401048:	2000      	movs	r0, #0
  40104a:	6328      	str	r0, [r5, #48]	; 0x30
  40104c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401050:	692e      	ldr	r6, [r5, #16]
  401052:	b1ae      	cbz	r6, 401080 <__sflush_r+0xbc>
  401054:	682c      	ldr	r4, [r5, #0]
  401056:	602e      	str	r6, [r5, #0]
  401058:	0790      	lsls	r0, r2, #30
  40105a:	bf0c      	ite	eq
  40105c:	696b      	ldreq	r3, [r5, #20]
  40105e:	2300      	movne	r3, #0
  401060:	1ba4      	subs	r4, r4, r6
  401062:	60ab      	str	r3, [r5, #8]
  401064:	e00a      	b.n	40107c <__sflush_r+0xb8>
  401066:	4623      	mov	r3, r4
  401068:	4632      	mov	r2, r6
  40106a:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  40106c:	69e9      	ldr	r1, [r5, #28]
  40106e:	4640      	mov	r0, r8
  401070:	47b8      	blx	r7
  401072:	2800      	cmp	r0, #0
  401074:	eba4 0400 	sub.w	r4, r4, r0
  401078:	4406      	add	r6, r0
  40107a:	dd04      	ble.n	401086 <__sflush_r+0xc2>
  40107c:	2c00      	cmp	r4, #0
  40107e:	dcf2      	bgt.n	401066 <__sflush_r+0xa2>
  401080:	2000      	movs	r0, #0
  401082:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401086:	89ab      	ldrh	r3, [r5, #12]
  401088:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40108c:	81ab      	strh	r3, [r5, #12]
  40108e:	f04f 30ff 	mov.w	r0, #4294967295
  401092:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401096:	f8d8 2000 	ldr.w	r2, [r8]
  40109a:	2a1d      	cmp	r2, #29
  40109c:	d8f3      	bhi.n	401086 <__sflush_r+0xc2>
  40109e:	4b1a      	ldr	r3, [pc, #104]	; (401108 <__sflush_r+0x144>)
  4010a0:	40d3      	lsrs	r3, r2
  4010a2:	f003 0301 	and.w	r3, r3, #1
  4010a6:	f083 0401 	eor.w	r4, r3, #1
  4010aa:	2b00      	cmp	r3, #0
  4010ac:	d0eb      	beq.n	401086 <__sflush_r+0xc2>
  4010ae:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  4010b2:	6929      	ldr	r1, [r5, #16]
  4010b4:	6029      	str	r1, [r5, #0]
  4010b6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  4010ba:	04d9      	lsls	r1, r3, #19
  4010bc:	606c      	str	r4, [r5, #4]
  4010be:	81ab      	strh	r3, [r5, #12]
  4010c0:	d5b7      	bpl.n	401032 <__sflush_r+0x6e>
  4010c2:	2a00      	cmp	r2, #0
  4010c4:	d1b5      	bne.n	401032 <__sflush_r+0x6e>
  4010c6:	6528      	str	r0, [r5, #80]	; 0x50
  4010c8:	e7b3      	b.n	401032 <__sflush_r+0x6e>
  4010ca:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  4010cc:	2a00      	cmp	r2, #0
  4010ce:	dc88      	bgt.n	400fe2 <__sflush_r+0x1e>
  4010d0:	e7d6      	b.n	401080 <__sflush_r+0xbc>
  4010d2:	2301      	movs	r3, #1
  4010d4:	69e9      	ldr	r1, [r5, #28]
  4010d6:	4640      	mov	r0, r8
  4010d8:	47a0      	blx	r4
  4010da:	1c43      	adds	r3, r0, #1
  4010dc:	4602      	mov	r2, r0
  4010de:	d002      	beq.n	4010e6 <__sflush_r+0x122>
  4010e0:	89ab      	ldrh	r3, [r5, #12]
  4010e2:	6aac      	ldr	r4, [r5, #40]	; 0x28
  4010e4:	e78c      	b.n	401000 <__sflush_r+0x3c>
  4010e6:	f8d8 3000 	ldr.w	r3, [r8]
  4010ea:	2b00      	cmp	r3, #0
  4010ec:	d0f8      	beq.n	4010e0 <__sflush_r+0x11c>
  4010ee:	2b1d      	cmp	r3, #29
  4010f0:	d001      	beq.n	4010f6 <__sflush_r+0x132>
  4010f2:	2b16      	cmp	r3, #22
  4010f4:	d102      	bne.n	4010fc <__sflush_r+0x138>
  4010f6:	f8c8 6000 	str.w	r6, [r8]
  4010fa:	e7c1      	b.n	401080 <__sflush_r+0xbc>
  4010fc:	89ab      	ldrh	r3, [r5, #12]
  4010fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  401102:	81ab      	strh	r3, [r5, #12]
  401104:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401108:	20400001 	.word	0x20400001

0040110c <_fflush_r>:
  40110c:	b510      	push	{r4, lr}
  40110e:	4604      	mov	r4, r0
  401110:	b082      	sub	sp, #8
  401112:	b108      	cbz	r0, 401118 <_fflush_r+0xc>
  401114:	6b83      	ldr	r3, [r0, #56]	; 0x38
  401116:	b153      	cbz	r3, 40112e <_fflush_r+0x22>
  401118:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
  40111c:	b908      	cbnz	r0, 401122 <_fflush_r+0x16>
  40111e:	b002      	add	sp, #8
  401120:	bd10      	pop	{r4, pc}
  401122:	4620      	mov	r0, r4
  401124:	b002      	add	sp, #8
  401126:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40112a:	f7ff bf4b 	b.w	400fc4 <__sflush_r>
  40112e:	9101      	str	r1, [sp, #4]
  401130:	f000 f880 	bl	401234 <__sinit>
  401134:	9901      	ldr	r1, [sp, #4]
  401136:	e7ef      	b.n	401118 <_fflush_r+0xc>

00401138 <_cleanup_r>:
  401138:	4901      	ldr	r1, [pc, #4]	; (401140 <_cleanup_r+0x8>)
  40113a:	f000 bb51 	b.w	4017e0 <_fwalk_reent>
  40113e:	bf00      	nop
  401140:	004026c5 	.word	0x004026c5

00401144 <__sinit.part.1>:
  401144:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401148:	4b35      	ldr	r3, [pc, #212]	; (401220 <__sinit.part.1+0xdc>)
  40114a:	6845      	ldr	r5, [r0, #4]
  40114c:	63c3      	str	r3, [r0, #60]	; 0x3c
  40114e:	2400      	movs	r4, #0
  401150:	4607      	mov	r7, r0
  401152:	f500 723b 	add.w	r2, r0, #748	; 0x2ec
  401156:	2304      	movs	r3, #4
  401158:	2103      	movs	r1, #3
  40115a:	f8c0 12e4 	str.w	r1, [r0, #740]	; 0x2e4
  40115e:	f8c0 22e8 	str.w	r2, [r0, #744]	; 0x2e8
  401162:	f8c0 42e0 	str.w	r4, [r0, #736]	; 0x2e0
  401166:	b083      	sub	sp, #12
  401168:	602c      	str	r4, [r5, #0]
  40116a:	606c      	str	r4, [r5, #4]
  40116c:	60ac      	str	r4, [r5, #8]
  40116e:	666c      	str	r4, [r5, #100]	; 0x64
  401170:	81ec      	strh	r4, [r5, #14]
  401172:	612c      	str	r4, [r5, #16]
  401174:	616c      	str	r4, [r5, #20]
  401176:	61ac      	str	r4, [r5, #24]
  401178:	81ab      	strh	r3, [r5, #12]
  40117a:	4621      	mov	r1, r4
  40117c:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  401180:	2208      	movs	r2, #8
  401182:	f7ff fced 	bl	400b60 <memset>
  401186:	68be      	ldr	r6, [r7, #8]
  401188:	f8df b098 	ldr.w	fp, [pc, #152]	; 401224 <__sinit.part.1+0xe0>
  40118c:	f8df a098 	ldr.w	sl, [pc, #152]	; 401228 <__sinit.part.1+0xe4>
  401190:	f8df 9098 	ldr.w	r9, [pc, #152]	; 40122c <__sinit.part.1+0xe8>
  401194:	f8df 8098 	ldr.w	r8, [pc, #152]	; 401230 <__sinit.part.1+0xec>
  401198:	f8c5 b020 	str.w	fp, [r5, #32]
  40119c:	2301      	movs	r3, #1
  40119e:	2209      	movs	r2, #9
  4011a0:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  4011a4:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
  4011a8:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
  4011ac:	61ed      	str	r5, [r5, #28]
  4011ae:	4621      	mov	r1, r4
  4011b0:	81f3      	strh	r3, [r6, #14]
  4011b2:	81b2      	strh	r2, [r6, #12]
  4011b4:	f106 005c 	add.w	r0, r6, #92	; 0x5c
  4011b8:	6034      	str	r4, [r6, #0]
  4011ba:	6074      	str	r4, [r6, #4]
  4011bc:	60b4      	str	r4, [r6, #8]
  4011be:	6674      	str	r4, [r6, #100]	; 0x64
  4011c0:	6134      	str	r4, [r6, #16]
  4011c2:	6174      	str	r4, [r6, #20]
  4011c4:	61b4      	str	r4, [r6, #24]
  4011c6:	2208      	movs	r2, #8
  4011c8:	9301      	str	r3, [sp, #4]
  4011ca:	f7ff fcc9 	bl	400b60 <memset>
  4011ce:	68fd      	ldr	r5, [r7, #12]
  4011d0:	61f6      	str	r6, [r6, #28]
  4011d2:	2012      	movs	r0, #18
  4011d4:	2202      	movs	r2, #2
  4011d6:	f8c6 b020 	str.w	fp, [r6, #32]
  4011da:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
  4011de:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
  4011e2:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
  4011e6:	4621      	mov	r1, r4
  4011e8:	81a8      	strh	r0, [r5, #12]
  4011ea:	81ea      	strh	r2, [r5, #14]
  4011ec:	602c      	str	r4, [r5, #0]
  4011ee:	606c      	str	r4, [r5, #4]
  4011f0:	60ac      	str	r4, [r5, #8]
  4011f2:	666c      	str	r4, [r5, #100]	; 0x64
  4011f4:	612c      	str	r4, [r5, #16]
  4011f6:	616c      	str	r4, [r5, #20]
  4011f8:	61ac      	str	r4, [r5, #24]
  4011fa:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  4011fe:	2208      	movs	r2, #8
  401200:	f7ff fcae 	bl	400b60 <memset>
  401204:	9b01      	ldr	r3, [sp, #4]
  401206:	61ed      	str	r5, [r5, #28]
  401208:	f8c5 b020 	str.w	fp, [r5, #32]
  40120c:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  401210:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
  401214:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
  401218:	63bb      	str	r3, [r7, #56]	; 0x38
  40121a:	b003      	add	sp, #12
  40121c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401220:	00401139 	.word	0x00401139
  401224:	00402549 	.word	0x00402549
  401228:	0040256d 	.word	0x0040256d
  40122c:	004025a9 	.word	0x004025a9
  401230:	004025c9 	.word	0x004025c9

00401234 <__sinit>:
  401234:	6b83      	ldr	r3, [r0, #56]	; 0x38
  401236:	b103      	cbz	r3, 40123a <__sinit+0x6>
  401238:	4770      	bx	lr
  40123a:	f7ff bf83 	b.w	401144 <__sinit.part.1>
  40123e:	bf00      	nop

00401240 <__sfp_lock_acquire>:
  401240:	4770      	bx	lr
  401242:	bf00      	nop

00401244 <__sfp_lock_release>:
  401244:	4770      	bx	lr
  401246:	bf00      	nop

00401248 <__libc_fini_array>:
  401248:	b538      	push	{r3, r4, r5, lr}
  40124a:	4d07      	ldr	r5, [pc, #28]	; (401268 <__libc_fini_array+0x20>)
  40124c:	4c07      	ldr	r4, [pc, #28]	; (40126c <__libc_fini_array+0x24>)
  40124e:	1b2c      	subs	r4, r5, r4
  401250:	10a4      	asrs	r4, r4, #2
  401252:	d005      	beq.n	401260 <__libc_fini_array+0x18>
  401254:	3c01      	subs	r4, #1
  401256:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  40125a:	4798      	blx	r3
  40125c:	2c00      	cmp	r4, #0
  40125e:	d1f9      	bne.n	401254 <__libc_fini_array+0xc>
  401260:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  401264:	f001 bb42 	b.w	4028ec <_fini>
  401268:	004028fc 	.word	0x004028fc
  40126c:	004028f8 	.word	0x004028f8

00401270 <_malloc_trim_r>:
  401270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  401272:	4f23      	ldr	r7, [pc, #140]	; (401300 <_malloc_trim_r+0x90>)
  401274:	460c      	mov	r4, r1
  401276:	4606      	mov	r6, r0
  401278:	f000 ff60 	bl	40213c <__malloc_lock>
  40127c:	68bb      	ldr	r3, [r7, #8]
  40127e:	685d      	ldr	r5, [r3, #4]
  401280:	f025 0503 	bic.w	r5, r5, #3
  401284:	1b29      	subs	r1, r5, r4
  401286:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
  40128a:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  40128e:	f021 010f 	bic.w	r1, r1, #15
  401292:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  401296:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  40129a:	db07      	blt.n	4012ac <_malloc_trim_r+0x3c>
  40129c:	2100      	movs	r1, #0
  40129e:	4630      	mov	r0, r6
  4012a0:	f001 f940 	bl	402524 <_sbrk_r>
  4012a4:	68bb      	ldr	r3, [r7, #8]
  4012a6:	442b      	add	r3, r5
  4012a8:	4298      	cmp	r0, r3
  4012aa:	d004      	beq.n	4012b6 <_malloc_trim_r+0x46>
  4012ac:	4630      	mov	r0, r6
  4012ae:	f000 ff47 	bl	402140 <__malloc_unlock>
  4012b2:	2000      	movs	r0, #0
  4012b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4012b6:	4261      	negs	r1, r4
  4012b8:	4630      	mov	r0, r6
  4012ba:	f001 f933 	bl	402524 <_sbrk_r>
  4012be:	3001      	adds	r0, #1
  4012c0:	d00d      	beq.n	4012de <_malloc_trim_r+0x6e>
  4012c2:	4b10      	ldr	r3, [pc, #64]	; (401304 <_malloc_trim_r+0x94>)
  4012c4:	68ba      	ldr	r2, [r7, #8]
  4012c6:	6819      	ldr	r1, [r3, #0]
  4012c8:	1b2d      	subs	r5, r5, r4
  4012ca:	f045 0501 	orr.w	r5, r5, #1
  4012ce:	4630      	mov	r0, r6
  4012d0:	1b09      	subs	r1, r1, r4
  4012d2:	6055      	str	r5, [r2, #4]
  4012d4:	6019      	str	r1, [r3, #0]
  4012d6:	f000 ff33 	bl	402140 <__malloc_unlock>
  4012da:	2001      	movs	r0, #1
  4012dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4012de:	2100      	movs	r1, #0
  4012e0:	4630      	mov	r0, r6
  4012e2:	f001 f91f 	bl	402524 <_sbrk_r>
  4012e6:	68ba      	ldr	r2, [r7, #8]
  4012e8:	1a83      	subs	r3, r0, r2
  4012ea:	2b0f      	cmp	r3, #15
  4012ec:	ddde      	ble.n	4012ac <_malloc_trim_r+0x3c>
  4012ee:	4c06      	ldr	r4, [pc, #24]	; (401308 <_malloc_trim_r+0x98>)
  4012f0:	4904      	ldr	r1, [pc, #16]	; (401304 <_malloc_trim_r+0x94>)
  4012f2:	6824      	ldr	r4, [r4, #0]
  4012f4:	f043 0301 	orr.w	r3, r3, #1
  4012f8:	1b00      	subs	r0, r0, r4
  4012fa:	6053      	str	r3, [r2, #4]
  4012fc:	6008      	str	r0, [r1, #0]
  4012fe:	e7d5      	b.n	4012ac <_malloc_trim_r+0x3c>
  401300:	20000434 	.word	0x20000434
  401304:	20000874 	.word	0x20000874
  401308:	20000840 	.word	0x20000840

0040130c <_free_r>:
  40130c:	2900      	cmp	r1, #0
  40130e:	d045      	beq.n	40139c <_free_r+0x90>
  401310:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401314:	460d      	mov	r5, r1
  401316:	4680      	mov	r8, r0
  401318:	f000 ff10 	bl	40213c <__malloc_lock>
  40131c:	f855 7c04 	ldr.w	r7, [r5, #-4]
  401320:	496a      	ldr	r1, [pc, #424]	; (4014cc <_free_r+0x1c0>)
  401322:	f027 0301 	bic.w	r3, r7, #1
  401326:	f1a5 0408 	sub.w	r4, r5, #8
  40132a:	18e2      	adds	r2, r4, r3
  40132c:	688e      	ldr	r6, [r1, #8]
  40132e:	6850      	ldr	r0, [r2, #4]
  401330:	42b2      	cmp	r2, r6
  401332:	f020 0003 	bic.w	r0, r0, #3
  401336:	d062      	beq.n	4013fe <_free_r+0xf2>
  401338:	07fe      	lsls	r6, r7, #31
  40133a:	6050      	str	r0, [r2, #4]
  40133c:	d40b      	bmi.n	401356 <_free_r+0x4a>
  40133e:	f855 7c08 	ldr.w	r7, [r5, #-8]
  401342:	1be4      	subs	r4, r4, r7
  401344:	f101 0e08 	add.w	lr, r1, #8
  401348:	68a5      	ldr	r5, [r4, #8]
  40134a:	4575      	cmp	r5, lr
  40134c:	443b      	add	r3, r7
  40134e:	d06f      	beq.n	401430 <_free_r+0x124>
  401350:	68e7      	ldr	r7, [r4, #12]
  401352:	60ef      	str	r7, [r5, #12]
  401354:	60bd      	str	r5, [r7, #8]
  401356:	1815      	adds	r5, r2, r0
  401358:	686d      	ldr	r5, [r5, #4]
  40135a:	07ed      	lsls	r5, r5, #31
  40135c:	d542      	bpl.n	4013e4 <_free_r+0xd8>
  40135e:	f043 0201 	orr.w	r2, r3, #1
  401362:	6062      	str	r2, [r4, #4]
  401364:	50e3      	str	r3, [r4, r3]
  401366:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40136a:	d218      	bcs.n	40139e <_free_r+0x92>
  40136c:	08db      	lsrs	r3, r3, #3
  40136e:	1c5a      	adds	r2, r3, #1
  401370:	684d      	ldr	r5, [r1, #4]
  401372:	f851 7032 	ldr.w	r7, [r1, r2, lsl #3]
  401376:	60a7      	str	r7, [r4, #8]
  401378:	2001      	movs	r0, #1
  40137a:	109b      	asrs	r3, r3, #2
  40137c:	fa00 f303 	lsl.w	r3, r0, r3
  401380:	eb01 00c2 	add.w	r0, r1, r2, lsl #3
  401384:	431d      	orrs	r5, r3
  401386:	3808      	subs	r0, #8
  401388:	60e0      	str	r0, [r4, #12]
  40138a:	604d      	str	r5, [r1, #4]
  40138c:	f841 4032 	str.w	r4, [r1, r2, lsl #3]
  401390:	60fc      	str	r4, [r7, #12]
  401392:	4640      	mov	r0, r8
  401394:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  401398:	f000 bed2 	b.w	402140 <__malloc_unlock>
  40139c:	4770      	bx	lr
  40139e:	0a5a      	lsrs	r2, r3, #9
  4013a0:	2a04      	cmp	r2, #4
  4013a2:	d853      	bhi.n	40144c <_free_r+0x140>
  4013a4:	099a      	lsrs	r2, r3, #6
  4013a6:	f102 0739 	add.w	r7, r2, #57	; 0x39
  4013aa:	007f      	lsls	r7, r7, #1
  4013ac:	f102 0538 	add.w	r5, r2, #56	; 0x38
  4013b0:	eb01 0087 	add.w	r0, r1, r7, lsl #2
  4013b4:	f851 2027 	ldr.w	r2, [r1, r7, lsl #2]
  4013b8:	4944      	ldr	r1, [pc, #272]	; (4014cc <_free_r+0x1c0>)
  4013ba:	3808      	subs	r0, #8
  4013bc:	4290      	cmp	r0, r2
  4013be:	d04d      	beq.n	40145c <_free_r+0x150>
  4013c0:	6851      	ldr	r1, [r2, #4]
  4013c2:	f021 0103 	bic.w	r1, r1, #3
  4013c6:	428b      	cmp	r3, r1
  4013c8:	d202      	bcs.n	4013d0 <_free_r+0xc4>
  4013ca:	6892      	ldr	r2, [r2, #8]
  4013cc:	4290      	cmp	r0, r2
  4013ce:	d1f7      	bne.n	4013c0 <_free_r+0xb4>
  4013d0:	68d0      	ldr	r0, [r2, #12]
  4013d2:	60e0      	str	r0, [r4, #12]
  4013d4:	60a2      	str	r2, [r4, #8]
  4013d6:	6084      	str	r4, [r0, #8]
  4013d8:	60d4      	str	r4, [r2, #12]
  4013da:	4640      	mov	r0, r8
  4013dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4013e0:	f000 beae 	b.w	402140 <__malloc_unlock>
  4013e4:	6895      	ldr	r5, [r2, #8]
  4013e6:	4f3a      	ldr	r7, [pc, #232]	; (4014d0 <_free_r+0x1c4>)
  4013e8:	42bd      	cmp	r5, r7
  4013ea:	4403      	add	r3, r0
  4013ec:	d03f      	beq.n	40146e <_free_r+0x162>
  4013ee:	68d0      	ldr	r0, [r2, #12]
  4013f0:	60e8      	str	r0, [r5, #12]
  4013f2:	f043 0201 	orr.w	r2, r3, #1
  4013f6:	6085      	str	r5, [r0, #8]
  4013f8:	6062      	str	r2, [r4, #4]
  4013fa:	50e3      	str	r3, [r4, r3]
  4013fc:	e7b3      	b.n	401366 <_free_r+0x5a>
  4013fe:	07ff      	lsls	r7, r7, #31
  401400:	4403      	add	r3, r0
  401402:	d407      	bmi.n	401414 <_free_r+0x108>
  401404:	f855 2c08 	ldr.w	r2, [r5, #-8]
  401408:	1aa4      	subs	r4, r4, r2
  40140a:	4413      	add	r3, r2
  40140c:	68a0      	ldr	r0, [r4, #8]
  40140e:	68e2      	ldr	r2, [r4, #12]
  401410:	60c2      	str	r2, [r0, #12]
  401412:	6090      	str	r0, [r2, #8]
  401414:	4a2f      	ldr	r2, [pc, #188]	; (4014d4 <_free_r+0x1c8>)
  401416:	6812      	ldr	r2, [r2, #0]
  401418:	f043 0001 	orr.w	r0, r3, #1
  40141c:	4293      	cmp	r3, r2
  40141e:	6060      	str	r0, [r4, #4]
  401420:	608c      	str	r4, [r1, #8]
  401422:	d3b6      	bcc.n	401392 <_free_r+0x86>
  401424:	4b2c      	ldr	r3, [pc, #176]	; (4014d8 <_free_r+0x1cc>)
  401426:	4640      	mov	r0, r8
  401428:	6819      	ldr	r1, [r3, #0]
  40142a:	f7ff ff21 	bl	401270 <_malloc_trim_r>
  40142e:	e7b0      	b.n	401392 <_free_r+0x86>
  401430:	1811      	adds	r1, r2, r0
  401432:	6849      	ldr	r1, [r1, #4]
  401434:	07c9      	lsls	r1, r1, #31
  401436:	d444      	bmi.n	4014c2 <_free_r+0x1b6>
  401438:	6891      	ldr	r1, [r2, #8]
  40143a:	68d2      	ldr	r2, [r2, #12]
  40143c:	60ca      	str	r2, [r1, #12]
  40143e:	4403      	add	r3, r0
  401440:	f043 0001 	orr.w	r0, r3, #1
  401444:	6091      	str	r1, [r2, #8]
  401446:	6060      	str	r0, [r4, #4]
  401448:	50e3      	str	r3, [r4, r3]
  40144a:	e7a2      	b.n	401392 <_free_r+0x86>
  40144c:	2a14      	cmp	r2, #20
  40144e:	d817      	bhi.n	401480 <_free_r+0x174>
  401450:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  401454:	007f      	lsls	r7, r7, #1
  401456:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  40145a:	e7a9      	b.n	4013b0 <_free_r+0xa4>
  40145c:	10aa      	asrs	r2, r5, #2
  40145e:	684b      	ldr	r3, [r1, #4]
  401460:	2501      	movs	r5, #1
  401462:	fa05 f202 	lsl.w	r2, r5, r2
  401466:	4313      	orrs	r3, r2
  401468:	604b      	str	r3, [r1, #4]
  40146a:	4602      	mov	r2, r0
  40146c:	e7b1      	b.n	4013d2 <_free_r+0xc6>
  40146e:	f043 0201 	orr.w	r2, r3, #1
  401472:	614c      	str	r4, [r1, #20]
  401474:	610c      	str	r4, [r1, #16]
  401476:	60e5      	str	r5, [r4, #12]
  401478:	60a5      	str	r5, [r4, #8]
  40147a:	6062      	str	r2, [r4, #4]
  40147c:	50e3      	str	r3, [r4, r3]
  40147e:	e788      	b.n	401392 <_free_r+0x86>
  401480:	2a54      	cmp	r2, #84	; 0x54
  401482:	d806      	bhi.n	401492 <_free_r+0x186>
  401484:	0b1a      	lsrs	r2, r3, #12
  401486:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  40148a:	007f      	lsls	r7, r7, #1
  40148c:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  401490:	e78e      	b.n	4013b0 <_free_r+0xa4>
  401492:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  401496:	d806      	bhi.n	4014a6 <_free_r+0x19a>
  401498:	0bda      	lsrs	r2, r3, #15
  40149a:	f102 0778 	add.w	r7, r2, #120	; 0x78
  40149e:	007f      	lsls	r7, r7, #1
  4014a0:	f102 0577 	add.w	r5, r2, #119	; 0x77
  4014a4:	e784      	b.n	4013b0 <_free_r+0xa4>
  4014a6:	f240 5054 	movw	r0, #1364	; 0x554
  4014aa:	4282      	cmp	r2, r0
  4014ac:	d806      	bhi.n	4014bc <_free_r+0x1b0>
  4014ae:	0c9a      	lsrs	r2, r3, #18
  4014b0:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  4014b4:	007f      	lsls	r7, r7, #1
  4014b6:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  4014ba:	e779      	b.n	4013b0 <_free_r+0xa4>
  4014bc:	27fe      	movs	r7, #254	; 0xfe
  4014be:	257e      	movs	r5, #126	; 0x7e
  4014c0:	e776      	b.n	4013b0 <_free_r+0xa4>
  4014c2:	f043 0201 	orr.w	r2, r3, #1
  4014c6:	6062      	str	r2, [r4, #4]
  4014c8:	50e3      	str	r3, [r4, r3]
  4014ca:	e762      	b.n	401392 <_free_r+0x86>
  4014cc:	20000434 	.word	0x20000434
  4014d0:	2000043c 	.word	0x2000043c
  4014d4:	2000083c 	.word	0x2000083c
  4014d8:	20000870 	.word	0x20000870

004014dc <__sfvwrite_r>:
  4014dc:	6893      	ldr	r3, [r2, #8]
  4014de:	2b00      	cmp	r3, #0
  4014e0:	d076      	beq.n	4015d0 <__sfvwrite_r+0xf4>
  4014e2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4014e6:	898b      	ldrh	r3, [r1, #12]
  4014e8:	b085      	sub	sp, #20
  4014ea:	460c      	mov	r4, r1
  4014ec:	0719      	lsls	r1, r3, #28
  4014ee:	9001      	str	r0, [sp, #4]
  4014f0:	4616      	mov	r6, r2
  4014f2:	d529      	bpl.n	401548 <__sfvwrite_r+0x6c>
  4014f4:	6922      	ldr	r2, [r4, #16]
  4014f6:	b33a      	cbz	r2, 401548 <__sfvwrite_r+0x6c>
  4014f8:	f003 0802 	and.w	r8, r3, #2
  4014fc:	fa1f f088 	uxth.w	r0, r8
  401500:	6835      	ldr	r5, [r6, #0]
  401502:	2800      	cmp	r0, #0
  401504:	d02f      	beq.n	401566 <__sfvwrite_r+0x8a>
  401506:	f04f 0900 	mov.w	r9, #0
  40150a:	4fb4      	ldr	r7, [pc, #720]	; (4017dc <__sfvwrite_r+0x300>)
  40150c:	46c8      	mov	r8, r9
  40150e:	46b2      	mov	sl, r6
  401510:	45b8      	cmp	r8, r7
  401512:	4643      	mov	r3, r8
  401514:	464a      	mov	r2, r9
  401516:	bf28      	it	cs
  401518:	463b      	movcs	r3, r7
  40151a:	9801      	ldr	r0, [sp, #4]
  40151c:	f1b8 0f00 	cmp.w	r8, #0
  401520:	d050      	beq.n	4015c4 <__sfvwrite_r+0xe8>
  401522:	69e1      	ldr	r1, [r4, #28]
  401524:	6a66      	ldr	r6, [r4, #36]	; 0x24
  401526:	47b0      	blx	r6
  401528:	2800      	cmp	r0, #0
  40152a:	dd71      	ble.n	401610 <__sfvwrite_r+0x134>
  40152c:	f8da 3008 	ldr.w	r3, [sl, #8]
  401530:	1a1b      	subs	r3, r3, r0
  401532:	4481      	add	r9, r0
  401534:	ebc0 0808 	rsb	r8, r0, r8
  401538:	f8ca 3008 	str.w	r3, [sl, #8]
  40153c:	2b00      	cmp	r3, #0
  40153e:	d1e7      	bne.n	401510 <__sfvwrite_r+0x34>
  401540:	2000      	movs	r0, #0
  401542:	b005      	add	sp, #20
  401544:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401548:	4621      	mov	r1, r4
  40154a:	9801      	ldr	r0, [sp, #4]
  40154c:	f7ff fcc6 	bl	400edc <__swsetup_r>
  401550:	2800      	cmp	r0, #0
  401552:	f040 813a 	bne.w	4017ca <__sfvwrite_r+0x2ee>
  401556:	89a3      	ldrh	r3, [r4, #12]
  401558:	6835      	ldr	r5, [r6, #0]
  40155a:	f003 0802 	and.w	r8, r3, #2
  40155e:	fa1f f088 	uxth.w	r0, r8
  401562:	2800      	cmp	r0, #0
  401564:	d1cf      	bne.n	401506 <__sfvwrite_r+0x2a>
  401566:	f013 0901 	ands.w	r9, r3, #1
  40156a:	d15b      	bne.n	401624 <__sfvwrite_r+0x148>
  40156c:	464f      	mov	r7, r9
  40156e:	9602      	str	r6, [sp, #8]
  401570:	b31f      	cbz	r7, 4015ba <__sfvwrite_r+0xde>
  401572:	059a      	lsls	r2, r3, #22
  401574:	f8d4 8008 	ldr.w	r8, [r4, #8]
  401578:	d52c      	bpl.n	4015d4 <__sfvwrite_r+0xf8>
  40157a:	4547      	cmp	r7, r8
  40157c:	46c2      	mov	sl, r8
  40157e:	f0c0 80a4 	bcc.w	4016ca <__sfvwrite_r+0x1ee>
  401582:	f413 6f90 	tst.w	r3, #1152	; 0x480
  401586:	f040 80b1 	bne.w	4016ec <__sfvwrite_r+0x210>
  40158a:	6820      	ldr	r0, [r4, #0]
  40158c:	4652      	mov	r2, sl
  40158e:	4649      	mov	r1, r9
  401590:	f000 fd70 	bl	402074 <memmove>
  401594:	68a0      	ldr	r0, [r4, #8]
  401596:	6823      	ldr	r3, [r4, #0]
  401598:	ebc8 0000 	rsb	r0, r8, r0
  40159c:	4453      	add	r3, sl
  40159e:	60a0      	str	r0, [r4, #8]
  4015a0:	6023      	str	r3, [r4, #0]
  4015a2:	4638      	mov	r0, r7
  4015a4:	9a02      	ldr	r2, [sp, #8]
  4015a6:	6893      	ldr	r3, [r2, #8]
  4015a8:	1a1b      	subs	r3, r3, r0
  4015aa:	4481      	add	r9, r0
  4015ac:	1a3f      	subs	r7, r7, r0
  4015ae:	6093      	str	r3, [r2, #8]
  4015b0:	2b00      	cmp	r3, #0
  4015b2:	d0c5      	beq.n	401540 <__sfvwrite_r+0x64>
  4015b4:	89a3      	ldrh	r3, [r4, #12]
  4015b6:	2f00      	cmp	r7, #0
  4015b8:	d1db      	bne.n	401572 <__sfvwrite_r+0x96>
  4015ba:	f8d5 9000 	ldr.w	r9, [r5]
  4015be:	686f      	ldr	r7, [r5, #4]
  4015c0:	3508      	adds	r5, #8
  4015c2:	e7d5      	b.n	401570 <__sfvwrite_r+0x94>
  4015c4:	f8d5 9000 	ldr.w	r9, [r5]
  4015c8:	f8d5 8004 	ldr.w	r8, [r5, #4]
  4015cc:	3508      	adds	r5, #8
  4015ce:	e79f      	b.n	401510 <__sfvwrite_r+0x34>
  4015d0:	2000      	movs	r0, #0
  4015d2:	4770      	bx	lr
  4015d4:	6820      	ldr	r0, [r4, #0]
  4015d6:	6923      	ldr	r3, [r4, #16]
  4015d8:	4298      	cmp	r0, r3
  4015da:	d803      	bhi.n	4015e4 <__sfvwrite_r+0x108>
  4015dc:	6961      	ldr	r1, [r4, #20]
  4015de:	428f      	cmp	r7, r1
  4015e0:	f080 80b7 	bcs.w	401752 <__sfvwrite_r+0x276>
  4015e4:	45b8      	cmp	r8, r7
  4015e6:	bf28      	it	cs
  4015e8:	46b8      	movcs	r8, r7
  4015ea:	4642      	mov	r2, r8
  4015ec:	4649      	mov	r1, r9
  4015ee:	f000 fd41 	bl	402074 <memmove>
  4015f2:	68a3      	ldr	r3, [r4, #8]
  4015f4:	6822      	ldr	r2, [r4, #0]
  4015f6:	ebc8 0303 	rsb	r3, r8, r3
  4015fa:	4442      	add	r2, r8
  4015fc:	60a3      	str	r3, [r4, #8]
  4015fe:	6022      	str	r2, [r4, #0]
  401600:	2b00      	cmp	r3, #0
  401602:	d149      	bne.n	401698 <__sfvwrite_r+0x1bc>
  401604:	4621      	mov	r1, r4
  401606:	9801      	ldr	r0, [sp, #4]
  401608:	f7ff fd80 	bl	40110c <_fflush_r>
  40160c:	2800      	cmp	r0, #0
  40160e:	d043      	beq.n	401698 <__sfvwrite_r+0x1bc>
  401610:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  401614:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  401618:	f04f 30ff 	mov.w	r0, #4294967295
  40161c:	81a3      	strh	r3, [r4, #12]
  40161e:	b005      	add	sp, #20
  401620:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401624:	4680      	mov	r8, r0
  401626:	9002      	str	r0, [sp, #8]
  401628:	4682      	mov	sl, r0
  40162a:	4681      	mov	r9, r0
  40162c:	f1b9 0f00 	cmp.w	r9, #0
  401630:	d02a      	beq.n	401688 <__sfvwrite_r+0x1ac>
  401632:	9b02      	ldr	r3, [sp, #8]
  401634:	2b00      	cmp	r3, #0
  401636:	d04c      	beq.n	4016d2 <__sfvwrite_r+0x1f6>
  401638:	6820      	ldr	r0, [r4, #0]
  40163a:	6923      	ldr	r3, [r4, #16]
  40163c:	6962      	ldr	r2, [r4, #20]
  40163e:	45c8      	cmp	r8, r9
  401640:	46c3      	mov	fp, r8
  401642:	bf28      	it	cs
  401644:	46cb      	movcs	fp, r9
  401646:	4298      	cmp	r0, r3
  401648:	465f      	mov	r7, fp
  40164a:	d904      	bls.n	401656 <__sfvwrite_r+0x17a>
  40164c:	68a3      	ldr	r3, [r4, #8]
  40164e:	4413      	add	r3, r2
  401650:	459b      	cmp	fp, r3
  401652:	f300 8090 	bgt.w	401776 <__sfvwrite_r+0x29a>
  401656:	4593      	cmp	fp, r2
  401658:	db20      	blt.n	40169c <__sfvwrite_r+0x1c0>
  40165a:	4613      	mov	r3, r2
  40165c:	6a67      	ldr	r7, [r4, #36]	; 0x24
  40165e:	69e1      	ldr	r1, [r4, #28]
  401660:	9801      	ldr	r0, [sp, #4]
  401662:	4652      	mov	r2, sl
  401664:	47b8      	blx	r7
  401666:	1e07      	subs	r7, r0, #0
  401668:	ddd2      	ble.n	401610 <__sfvwrite_r+0x134>
  40166a:	ebb8 0807 	subs.w	r8, r8, r7
  40166e:	d023      	beq.n	4016b8 <__sfvwrite_r+0x1dc>
  401670:	68b3      	ldr	r3, [r6, #8]
  401672:	1bdb      	subs	r3, r3, r7
  401674:	44ba      	add	sl, r7
  401676:	ebc7 0909 	rsb	r9, r7, r9
  40167a:	60b3      	str	r3, [r6, #8]
  40167c:	2b00      	cmp	r3, #0
  40167e:	f43f af5f 	beq.w	401540 <__sfvwrite_r+0x64>
  401682:	f1b9 0f00 	cmp.w	r9, #0
  401686:	d1d4      	bne.n	401632 <__sfvwrite_r+0x156>
  401688:	2300      	movs	r3, #0
  40168a:	f8d5 a000 	ldr.w	sl, [r5]
  40168e:	f8d5 9004 	ldr.w	r9, [r5, #4]
  401692:	9302      	str	r3, [sp, #8]
  401694:	3508      	adds	r5, #8
  401696:	e7c9      	b.n	40162c <__sfvwrite_r+0x150>
  401698:	4640      	mov	r0, r8
  40169a:	e783      	b.n	4015a4 <__sfvwrite_r+0xc8>
  40169c:	465a      	mov	r2, fp
  40169e:	4651      	mov	r1, sl
  4016a0:	f000 fce8 	bl	402074 <memmove>
  4016a4:	68a2      	ldr	r2, [r4, #8]
  4016a6:	6823      	ldr	r3, [r4, #0]
  4016a8:	ebcb 0202 	rsb	r2, fp, r2
  4016ac:	445b      	add	r3, fp
  4016ae:	ebb8 0807 	subs.w	r8, r8, r7
  4016b2:	60a2      	str	r2, [r4, #8]
  4016b4:	6023      	str	r3, [r4, #0]
  4016b6:	d1db      	bne.n	401670 <__sfvwrite_r+0x194>
  4016b8:	4621      	mov	r1, r4
  4016ba:	9801      	ldr	r0, [sp, #4]
  4016bc:	f7ff fd26 	bl	40110c <_fflush_r>
  4016c0:	2800      	cmp	r0, #0
  4016c2:	d1a5      	bne.n	401610 <__sfvwrite_r+0x134>
  4016c4:	f8cd 8008 	str.w	r8, [sp, #8]
  4016c8:	e7d2      	b.n	401670 <__sfvwrite_r+0x194>
  4016ca:	6820      	ldr	r0, [r4, #0]
  4016cc:	46b8      	mov	r8, r7
  4016ce:	46ba      	mov	sl, r7
  4016d0:	e75c      	b.n	40158c <__sfvwrite_r+0xb0>
  4016d2:	464a      	mov	r2, r9
  4016d4:	210a      	movs	r1, #10
  4016d6:	4650      	mov	r0, sl
  4016d8:	f000 fbe2 	bl	401ea0 <memchr>
  4016dc:	2800      	cmp	r0, #0
  4016de:	d06f      	beq.n	4017c0 <__sfvwrite_r+0x2e4>
  4016e0:	3001      	adds	r0, #1
  4016e2:	2301      	movs	r3, #1
  4016e4:	ebca 0800 	rsb	r8, sl, r0
  4016e8:	9302      	str	r3, [sp, #8]
  4016ea:	e7a5      	b.n	401638 <__sfvwrite_r+0x15c>
  4016ec:	6962      	ldr	r2, [r4, #20]
  4016ee:	6820      	ldr	r0, [r4, #0]
  4016f0:	6921      	ldr	r1, [r4, #16]
  4016f2:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  4016f6:	ebc1 0a00 	rsb	sl, r1, r0
  4016fa:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  4016fe:	f10a 0001 	add.w	r0, sl, #1
  401702:	ea4f 0868 	mov.w	r8, r8, asr #1
  401706:	4438      	add	r0, r7
  401708:	4540      	cmp	r0, r8
  40170a:	4642      	mov	r2, r8
  40170c:	bf84      	itt	hi
  40170e:	4680      	movhi	r8, r0
  401710:	4642      	movhi	r2, r8
  401712:	055b      	lsls	r3, r3, #21
  401714:	d542      	bpl.n	40179c <__sfvwrite_r+0x2c0>
  401716:	4611      	mov	r1, r2
  401718:	9801      	ldr	r0, [sp, #4]
  40171a:	f000 f907 	bl	40192c <_malloc_r>
  40171e:	4683      	mov	fp, r0
  401720:	2800      	cmp	r0, #0
  401722:	d055      	beq.n	4017d0 <__sfvwrite_r+0x2f4>
  401724:	4652      	mov	r2, sl
  401726:	6921      	ldr	r1, [r4, #16]
  401728:	f000 fc0a 	bl	401f40 <memcpy>
  40172c:	89a3      	ldrh	r3, [r4, #12]
  40172e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  401732:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  401736:	81a3      	strh	r3, [r4, #12]
  401738:	ebca 0308 	rsb	r3, sl, r8
  40173c:	eb0b 000a 	add.w	r0, fp, sl
  401740:	f8c4 8014 	str.w	r8, [r4, #20]
  401744:	f8c4 b010 	str.w	fp, [r4, #16]
  401748:	6020      	str	r0, [r4, #0]
  40174a:	60a3      	str	r3, [r4, #8]
  40174c:	46b8      	mov	r8, r7
  40174e:	46ba      	mov	sl, r7
  401750:	e71c      	b.n	40158c <__sfvwrite_r+0xb0>
  401752:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
  401756:	42bb      	cmp	r3, r7
  401758:	bf28      	it	cs
  40175a:	463b      	movcs	r3, r7
  40175c:	464a      	mov	r2, r9
  40175e:	fb93 f3f1 	sdiv	r3, r3, r1
  401762:	9801      	ldr	r0, [sp, #4]
  401764:	6a66      	ldr	r6, [r4, #36]	; 0x24
  401766:	fb01 f303 	mul.w	r3, r1, r3
  40176a:	69e1      	ldr	r1, [r4, #28]
  40176c:	47b0      	blx	r6
  40176e:	2800      	cmp	r0, #0
  401770:	f73f af18 	bgt.w	4015a4 <__sfvwrite_r+0xc8>
  401774:	e74c      	b.n	401610 <__sfvwrite_r+0x134>
  401776:	461a      	mov	r2, r3
  401778:	4651      	mov	r1, sl
  40177a:	9303      	str	r3, [sp, #12]
  40177c:	f000 fc7a 	bl	402074 <memmove>
  401780:	6822      	ldr	r2, [r4, #0]
  401782:	9b03      	ldr	r3, [sp, #12]
  401784:	9801      	ldr	r0, [sp, #4]
  401786:	441a      	add	r2, r3
  401788:	6022      	str	r2, [r4, #0]
  40178a:	4621      	mov	r1, r4
  40178c:	f7ff fcbe 	bl	40110c <_fflush_r>
  401790:	9b03      	ldr	r3, [sp, #12]
  401792:	2800      	cmp	r0, #0
  401794:	f47f af3c 	bne.w	401610 <__sfvwrite_r+0x134>
  401798:	461f      	mov	r7, r3
  40179a:	e766      	b.n	40166a <__sfvwrite_r+0x18e>
  40179c:	9801      	ldr	r0, [sp, #4]
  40179e:	f000 fcd1 	bl	402144 <_realloc_r>
  4017a2:	4683      	mov	fp, r0
  4017a4:	2800      	cmp	r0, #0
  4017a6:	d1c7      	bne.n	401738 <__sfvwrite_r+0x25c>
  4017a8:	9d01      	ldr	r5, [sp, #4]
  4017aa:	6921      	ldr	r1, [r4, #16]
  4017ac:	4628      	mov	r0, r5
  4017ae:	f7ff fdad 	bl	40130c <_free_r>
  4017b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4017b6:	220c      	movs	r2, #12
  4017b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  4017bc:	602a      	str	r2, [r5, #0]
  4017be:	e729      	b.n	401614 <__sfvwrite_r+0x138>
  4017c0:	2301      	movs	r3, #1
  4017c2:	f109 0801 	add.w	r8, r9, #1
  4017c6:	9302      	str	r3, [sp, #8]
  4017c8:	e736      	b.n	401638 <__sfvwrite_r+0x15c>
  4017ca:	f04f 30ff 	mov.w	r0, #4294967295
  4017ce:	e6b8      	b.n	401542 <__sfvwrite_r+0x66>
  4017d0:	9a01      	ldr	r2, [sp, #4]
  4017d2:	230c      	movs	r3, #12
  4017d4:	6013      	str	r3, [r2, #0]
  4017d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4017da:	e71b      	b.n	401614 <__sfvwrite_r+0x138>
  4017dc:	7ffffc00 	.word	0x7ffffc00

004017e0 <_fwalk_reent>:
  4017e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4017e4:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  4017e8:	d01f      	beq.n	40182a <_fwalk_reent+0x4a>
  4017ea:	4688      	mov	r8, r1
  4017ec:	4606      	mov	r6, r0
  4017ee:	f04f 0900 	mov.w	r9, #0
  4017f2:	687d      	ldr	r5, [r7, #4]
  4017f4:	68bc      	ldr	r4, [r7, #8]
  4017f6:	3d01      	subs	r5, #1
  4017f8:	d411      	bmi.n	40181e <_fwalk_reent+0x3e>
  4017fa:	89a3      	ldrh	r3, [r4, #12]
  4017fc:	2b01      	cmp	r3, #1
  4017fe:	f105 35ff 	add.w	r5, r5, #4294967295
  401802:	d908      	bls.n	401816 <_fwalk_reent+0x36>
  401804:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  401808:	3301      	adds	r3, #1
  40180a:	4621      	mov	r1, r4
  40180c:	4630      	mov	r0, r6
  40180e:	d002      	beq.n	401816 <_fwalk_reent+0x36>
  401810:	47c0      	blx	r8
  401812:	ea49 0900 	orr.w	r9, r9, r0
  401816:	1c6b      	adds	r3, r5, #1
  401818:	f104 0468 	add.w	r4, r4, #104	; 0x68
  40181c:	d1ed      	bne.n	4017fa <_fwalk_reent+0x1a>
  40181e:	683f      	ldr	r7, [r7, #0]
  401820:	2f00      	cmp	r7, #0
  401822:	d1e6      	bne.n	4017f2 <_fwalk_reent+0x12>
  401824:	4648      	mov	r0, r9
  401826:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40182a:	46b9      	mov	r9, r7
  40182c:	4648      	mov	r0, r9
  40182e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  401832:	bf00      	nop

00401834 <__swhatbuf_r>:
  401834:	b570      	push	{r4, r5, r6, lr}
  401836:	460d      	mov	r5, r1
  401838:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40183c:	2900      	cmp	r1, #0
  40183e:	b090      	sub	sp, #64	; 0x40
  401840:	4614      	mov	r4, r2
  401842:	461e      	mov	r6, r3
  401844:	db14      	blt.n	401870 <__swhatbuf_r+0x3c>
  401846:	aa01      	add	r2, sp, #4
  401848:	f000 ff7e 	bl	402748 <_fstat_r>
  40184c:	2800      	cmp	r0, #0
  40184e:	db0f      	blt.n	401870 <__swhatbuf_r+0x3c>
  401850:	9a02      	ldr	r2, [sp, #8]
  401852:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  401856:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  40185a:	fab2 f282 	clz	r2, r2
  40185e:	0952      	lsrs	r2, r2, #5
  401860:	f44f 6380 	mov.w	r3, #1024	; 0x400
  401864:	f44f 6000 	mov.w	r0, #2048	; 0x800
  401868:	6032      	str	r2, [r6, #0]
  40186a:	6023      	str	r3, [r4, #0]
  40186c:	b010      	add	sp, #64	; 0x40
  40186e:	bd70      	pop	{r4, r5, r6, pc}
  401870:	89a8      	ldrh	r0, [r5, #12]
  401872:	f000 0080 	and.w	r0, r0, #128	; 0x80
  401876:	b282      	uxth	r2, r0
  401878:	2000      	movs	r0, #0
  40187a:	6030      	str	r0, [r6, #0]
  40187c:	b11a      	cbz	r2, 401886 <__swhatbuf_r+0x52>
  40187e:	2340      	movs	r3, #64	; 0x40
  401880:	6023      	str	r3, [r4, #0]
  401882:	b010      	add	sp, #64	; 0x40
  401884:	bd70      	pop	{r4, r5, r6, pc}
  401886:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40188a:	4610      	mov	r0, r2
  40188c:	6023      	str	r3, [r4, #0]
  40188e:	b010      	add	sp, #64	; 0x40
  401890:	bd70      	pop	{r4, r5, r6, pc}
  401892:	bf00      	nop

00401894 <__smakebuf_r>:
  401894:	898a      	ldrh	r2, [r1, #12]
  401896:	0792      	lsls	r2, r2, #30
  401898:	460b      	mov	r3, r1
  40189a:	d506      	bpl.n	4018aa <__smakebuf_r+0x16>
  40189c:	f101 0243 	add.w	r2, r1, #67	; 0x43
  4018a0:	2101      	movs	r1, #1
  4018a2:	601a      	str	r2, [r3, #0]
  4018a4:	611a      	str	r2, [r3, #16]
  4018a6:	6159      	str	r1, [r3, #20]
  4018a8:	4770      	bx	lr
  4018aa:	b5f0      	push	{r4, r5, r6, r7, lr}
  4018ac:	b083      	sub	sp, #12
  4018ae:	ab01      	add	r3, sp, #4
  4018b0:	466a      	mov	r2, sp
  4018b2:	460c      	mov	r4, r1
  4018b4:	4605      	mov	r5, r0
  4018b6:	f7ff ffbd 	bl	401834 <__swhatbuf_r>
  4018ba:	9900      	ldr	r1, [sp, #0]
  4018bc:	4606      	mov	r6, r0
  4018be:	4628      	mov	r0, r5
  4018c0:	f000 f834 	bl	40192c <_malloc_r>
  4018c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4018c8:	b1d0      	cbz	r0, 401900 <__smakebuf_r+0x6c>
  4018ca:	9a01      	ldr	r2, [sp, #4]
  4018cc:	4f12      	ldr	r7, [pc, #72]	; (401918 <__smakebuf_r+0x84>)
  4018ce:	9900      	ldr	r1, [sp, #0]
  4018d0:	63ef      	str	r7, [r5, #60]	; 0x3c
  4018d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4018d6:	81a3      	strh	r3, [r4, #12]
  4018d8:	6020      	str	r0, [r4, #0]
  4018da:	6120      	str	r0, [r4, #16]
  4018dc:	6161      	str	r1, [r4, #20]
  4018de:	b91a      	cbnz	r2, 4018e8 <__smakebuf_r+0x54>
  4018e0:	4333      	orrs	r3, r6
  4018e2:	81a3      	strh	r3, [r4, #12]
  4018e4:	b003      	add	sp, #12
  4018e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4018e8:	4628      	mov	r0, r5
  4018ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  4018ee:	f000 ff3f 	bl	402770 <_isatty_r>
  4018f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4018f6:	2800      	cmp	r0, #0
  4018f8:	d0f2      	beq.n	4018e0 <__smakebuf_r+0x4c>
  4018fa:	f043 0301 	orr.w	r3, r3, #1
  4018fe:	e7ef      	b.n	4018e0 <__smakebuf_r+0x4c>
  401900:	059a      	lsls	r2, r3, #22
  401902:	d4ef      	bmi.n	4018e4 <__smakebuf_r+0x50>
  401904:	f104 0243 	add.w	r2, r4, #67	; 0x43
  401908:	f043 0302 	orr.w	r3, r3, #2
  40190c:	2101      	movs	r1, #1
  40190e:	81a3      	strh	r3, [r4, #12]
  401910:	6022      	str	r2, [r4, #0]
  401912:	6122      	str	r2, [r4, #16]
  401914:	6161      	str	r1, [r4, #20]
  401916:	e7e5      	b.n	4018e4 <__smakebuf_r+0x50>
  401918:	00401139 	.word	0x00401139

0040191c <malloc>:
  40191c:	4b02      	ldr	r3, [pc, #8]	; (401928 <malloc+0xc>)
  40191e:	4601      	mov	r1, r0
  401920:	6818      	ldr	r0, [r3, #0]
  401922:	f000 b803 	b.w	40192c <_malloc_r>
  401926:	bf00      	nop
  401928:	20000430 	.word	0x20000430

0040192c <_malloc_r>:
  40192c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401930:	f101 050b 	add.w	r5, r1, #11
  401934:	2d16      	cmp	r5, #22
  401936:	b083      	sub	sp, #12
  401938:	4606      	mov	r6, r0
  40193a:	f240 809f 	bls.w	401a7c <_malloc_r+0x150>
  40193e:	f035 0507 	bics.w	r5, r5, #7
  401942:	f100 80bf 	bmi.w	401ac4 <_malloc_r+0x198>
  401946:	42a9      	cmp	r1, r5
  401948:	f200 80bc 	bhi.w	401ac4 <_malloc_r+0x198>
  40194c:	f000 fbf6 	bl	40213c <__malloc_lock>
  401950:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
  401954:	f0c0 829c 	bcc.w	401e90 <_malloc_r+0x564>
  401958:	0a6b      	lsrs	r3, r5, #9
  40195a:	f000 80ba 	beq.w	401ad2 <_malloc_r+0x1a6>
  40195e:	2b04      	cmp	r3, #4
  401960:	f200 8183 	bhi.w	401c6a <_malloc_r+0x33e>
  401964:	09a8      	lsrs	r0, r5, #6
  401966:	f100 0e39 	add.w	lr, r0, #57	; 0x39
  40196a:	ea4f 034e 	mov.w	r3, lr, lsl #1
  40196e:	3038      	adds	r0, #56	; 0x38
  401970:	4fc4      	ldr	r7, [pc, #784]	; (401c84 <_malloc_r+0x358>)
  401972:	eb07 0383 	add.w	r3, r7, r3, lsl #2
  401976:	f1a3 0108 	sub.w	r1, r3, #8
  40197a:	685c      	ldr	r4, [r3, #4]
  40197c:	42a1      	cmp	r1, r4
  40197e:	d107      	bne.n	401990 <_malloc_r+0x64>
  401980:	e0ac      	b.n	401adc <_malloc_r+0x1b0>
  401982:	2a00      	cmp	r2, #0
  401984:	f280 80ac 	bge.w	401ae0 <_malloc_r+0x1b4>
  401988:	68e4      	ldr	r4, [r4, #12]
  40198a:	42a1      	cmp	r1, r4
  40198c:	f000 80a6 	beq.w	401adc <_malloc_r+0x1b0>
  401990:	6863      	ldr	r3, [r4, #4]
  401992:	f023 0303 	bic.w	r3, r3, #3
  401996:	1b5a      	subs	r2, r3, r5
  401998:	2a0f      	cmp	r2, #15
  40199a:	ddf2      	ble.n	401982 <_malloc_r+0x56>
  40199c:	49b9      	ldr	r1, [pc, #740]	; (401c84 <_malloc_r+0x358>)
  40199e:	693c      	ldr	r4, [r7, #16]
  4019a0:	f101 0e08 	add.w	lr, r1, #8
  4019a4:	4574      	cmp	r4, lr
  4019a6:	f000 81b3 	beq.w	401d10 <_malloc_r+0x3e4>
  4019aa:	6863      	ldr	r3, [r4, #4]
  4019ac:	f023 0303 	bic.w	r3, r3, #3
  4019b0:	1b5a      	subs	r2, r3, r5
  4019b2:	2a0f      	cmp	r2, #15
  4019b4:	f300 8199 	bgt.w	401cea <_malloc_r+0x3be>
  4019b8:	2a00      	cmp	r2, #0
  4019ba:	f8c1 e014 	str.w	lr, [r1, #20]
  4019be:	f8c1 e010 	str.w	lr, [r1, #16]
  4019c2:	f280 809e 	bge.w	401b02 <_malloc_r+0x1d6>
  4019c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  4019ca:	f080 8167 	bcs.w	401c9c <_malloc_r+0x370>
  4019ce:	08db      	lsrs	r3, r3, #3
  4019d0:	f103 0c01 	add.w	ip, r3, #1
  4019d4:	2201      	movs	r2, #1
  4019d6:	109b      	asrs	r3, r3, #2
  4019d8:	fa02 f303 	lsl.w	r3, r2, r3
  4019dc:	684a      	ldr	r2, [r1, #4]
  4019de:	f851 803c 	ldr.w	r8, [r1, ip, lsl #3]
  4019e2:	f8c4 8008 	str.w	r8, [r4, #8]
  4019e6:	eb01 09cc 	add.w	r9, r1, ip, lsl #3
  4019ea:	431a      	orrs	r2, r3
  4019ec:	f1a9 0308 	sub.w	r3, r9, #8
  4019f0:	60e3      	str	r3, [r4, #12]
  4019f2:	604a      	str	r2, [r1, #4]
  4019f4:	f841 403c 	str.w	r4, [r1, ip, lsl #3]
  4019f8:	f8c8 400c 	str.w	r4, [r8, #12]
  4019fc:	1083      	asrs	r3, r0, #2
  4019fe:	2401      	movs	r4, #1
  401a00:	409c      	lsls	r4, r3
  401a02:	4294      	cmp	r4, r2
  401a04:	f200 808a 	bhi.w	401b1c <_malloc_r+0x1f0>
  401a08:	4214      	tst	r4, r2
  401a0a:	d106      	bne.n	401a1a <_malloc_r+0xee>
  401a0c:	f020 0003 	bic.w	r0, r0, #3
  401a10:	0064      	lsls	r4, r4, #1
  401a12:	4214      	tst	r4, r2
  401a14:	f100 0004 	add.w	r0, r0, #4
  401a18:	d0fa      	beq.n	401a10 <_malloc_r+0xe4>
  401a1a:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  401a1e:	46cc      	mov	ip, r9
  401a20:	4680      	mov	r8, r0
  401a22:	f8dc 100c 	ldr.w	r1, [ip, #12]
  401a26:	458c      	cmp	ip, r1
  401a28:	d107      	bne.n	401a3a <_malloc_r+0x10e>
  401a2a:	e173      	b.n	401d14 <_malloc_r+0x3e8>
  401a2c:	2a00      	cmp	r2, #0
  401a2e:	f280 8181 	bge.w	401d34 <_malloc_r+0x408>
  401a32:	68c9      	ldr	r1, [r1, #12]
  401a34:	458c      	cmp	ip, r1
  401a36:	f000 816d 	beq.w	401d14 <_malloc_r+0x3e8>
  401a3a:	684b      	ldr	r3, [r1, #4]
  401a3c:	f023 0303 	bic.w	r3, r3, #3
  401a40:	1b5a      	subs	r2, r3, r5
  401a42:	2a0f      	cmp	r2, #15
  401a44:	ddf2      	ble.n	401a2c <_malloc_r+0x100>
  401a46:	460c      	mov	r4, r1
  401a48:	f8d1 c00c 	ldr.w	ip, [r1, #12]
  401a4c:	f854 8f08 	ldr.w	r8, [r4, #8]!
  401a50:	194b      	adds	r3, r1, r5
  401a52:	f045 0501 	orr.w	r5, r5, #1
  401a56:	604d      	str	r5, [r1, #4]
  401a58:	f042 0101 	orr.w	r1, r2, #1
  401a5c:	f8c8 c00c 	str.w	ip, [r8, #12]
  401a60:	4630      	mov	r0, r6
  401a62:	f8cc 8008 	str.w	r8, [ip, #8]
  401a66:	617b      	str	r3, [r7, #20]
  401a68:	613b      	str	r3, [r7, #16]
  401a6a:	f8c3 e00c 	str.w	lr, [r3, #12]
  401a6e:	f8c3 e008 	str.w	lr, [r3, #8]
  401a72:	6059      	str	r1, [r3, #4]
  401a74:	509a      	str	r2, [r3, r2]
  401a76:	f000 fb63 	bl	402140 <__malloc_unlock>
  401a7a:	e01f      	b.n	401abc <_malloc_r+0x190>
  401a7c:	2910      	cmp	r1, #16
  401a7e:	d821      	bhi.n	401ac4 <_malloc_r+0x198>
  401a80:	f000 fb5c 	bl	40213c <__malloc_lock>
  401a84:	2510      	movs	r5, #16
  401a86:	2306      	movs	r3, #6
  401a88:	2002      	movs	r0, #2
  401a8a:	4f7e      	ldr	r7, [pc, #504]	; (401c84 <_malloc_r+0x358>)
  401a8c:	eb07 0383 	add.w	r3, r7, r3, lsl #2
  401a90:	f1a3 0208 	sub.w	r2, r3, #8
  401a94:	685c      	ldr	r4, [r3, #4]
  401a96:	4294      	cmp	r4, r2
  401a98:	f000 8145 	beq.w	401d26 <_malloc_r+0x3fa>
  401a9c:	6863      	ldr	r3, [r4, #4]
  401a9e:	68e1      	ldr	r1, [r4, #12]
  401aa0:	68a5      	ldr	r5, [r4, #8]
  401aa2:	f023 0303 	bic.w	r3, r3, #3
  401aa6:	4423      	add	r3, r4
  401aa8:	4630      	mov	r0, r6
  401aaa:	685a      	ldr	r2, [r3, #4]
  401aac:	60e9      	str	r1, [r5, #12]
  401aae:	f042 0201 	orr.w	r2, r2, #1
  401ab2:	608d      	str	r5, [r1, #8]
  401ab4:	605a      	str	r2, [r3, #4]
  401ab6:	f000 fb43 	bl	402140 <__malloc_unlock>
  401aba:	3408      	adds	r4, #8
  401abc:	4620      	mov	r0, r4
  401abe:	b003      	add	sp, #12
  401ac0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401ac4:	2400      	movs	r4, #0
  401ac6:	230c      	movs	r3, #12
  401ac8:	4620      	mov	r0, r4
  401aca:	6033      	str	r3, [r6, #0]
  401acc:	b003      	add	sp, #12
  401ace:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401ad2:	2380      	movs	r3, #128	; 0x80
  401ad4:	f04f 0e40 	mov.w	lr, #64	; 0x40
  401ad8:	203f      	movs	r0, #63	; 0x3f
  401ada:	e749      	b.n	401970 <_malloc_r+0x44>
  401adc:	4670      	mov	r0, lr
  401ade:	e75d      	b.n	40199c <_malloc_r+0x70>
  401ae0:	4423      	add	r3, r4
  401ae2:	68e1      	ldr	r1, [r4, #12]
  401ae4:	685a      	ldr	r2, [r3, #4]
  401ae6:	68a5      	ldr	r5, [r4, #8]
  401ae8:	f042 0201 	orr.w	r2, r2, #1
  401aec:	60e9      	str	r1, [r5, #12]
  401aee:	4630      	mov	r0, r6
  401af0:	608d      	str	r5, [r1, #8]
  401af2:	605a      	str	r2, [r3, #4]
  401af4:	f000 fb24 	bl	402140 <__malloc_unlock>
  401af8:	3408      	adds	r4, #8
  401afa:	4620      	mov	r0, r4
  401afc:	b003      	add	sp, #12
  401afe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401b02:	4423      	add	r3, r4
  401b04:	4630      	mov	r0, r6
  401b06:	685a      	ldr	r2, [r3, #4]
  401b08:	f042 0201 	orr.w	r2, r2, #1
  401b0c:	605a      	str	r2, [r3, #4]
  401b0e:	f000 fb17 	bl	402140 <__malloc_unlock>
  401b12:	3408      	adds	r4, #8
  401b14:	4620      	mov	r0, r4
  401b16:	b003      	add	sp, #12
  401b18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401b1c:	68bc      	ldr	r4, [r7, #8]
  401b1e:	6863      	ldr	r3, [r4, #4]
  401b20:	f023 0803 	bic.w	r8, r3, #3
  401b24:	45a8      	cmp	r8, r5
  401b26:	d304      	bcc.n	401b32 <_malloc_r+0x206>
  401b28:	ebc5 0308 	rsb	r3, r5, r8
  401b2c:	2b0f      	cmp	r3, #15
  401b2e:	f300 808c 	bgt.w	401c4a <_malloc_r+0x31e>
  401b32:	4b55      	ldr	r3, [pc, #340]	; (401c88 <_malloc_r+0x35c>)
  401b34:	f8df 9160 	ldr.w	r9, [pc, #352]	; 401c98 <_malloc_r+0x36c>
  401b38:	681a      	ldr	r2, [r3, #0]
  401b3a:	f8d9 3000 	ldr.w	r3, [r9]
  401b3e:	3301      	adds	r3, #1
  401b40:	442a      	add	r2, r5
  401b42:	eb04 0a08 	add.w	sl, r4, r8
  401b46:	f000 8160 	beq.w	401e0a <_malloc_r+0x4de>
  401b4a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
  401b4e:	320f      	adds	r2, #15
  401b50:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
  401b54:	f022 020f 	bic.w	r2, r2, #15
  401b58:	4611      	mov	r1, r2
  401b5a:	4630      	mov	r0, r6
  401b5c:	9201      	str	r2, [sp, #4]
  401b5e:	f000 fce1 	bl	402524 <_sbrk_r>
  401b62:	f1b0 3fff 	cmp.w	r0, #4294967295
  401b66:	4683      	mov	fp, r0
  401b68:	9a01      	ldr	r2, [sp, #4]
  401b6a:	f000 8158 	beq.w	401e1e <_malloc_r+0x4f2>
  401b6e:	4582      	cmp	sl, r0
  401b70:	f200 80fc 	bhi.w	401d6c <_malloc_r+0x440>
  401b74:	4b45      	ldr	r3, [pc, #276]	; (401c8c <_malloc_r+0x360>)
  401b76:	6819      	ldr	r1, [r3, #0]
  401b78:	45da      	cmp	sl, fp
  401b7a:	4411      	add	r1, r2
  401b7c:	6019      	str	r1, [r3, #0]
  401b7e:	f000 8153 	beq.w	401e28 <_malloc_r+0x4fc>
  401b82:	f8d9 0000 	ldr.w	r0, [r9]
  401b86:	f8df e110 	ldr.w	lr, [pc, #272]	; 401c98 <_malloc_r+0x36c>
  401b8a:	3001      	adds	r0, #1
  401b8c:	bf1b      	ittet	ne
  401b8e:	ebca 0a0b 	rsbne	sl, sl, fp
  401b92:	4451      	addne	r1, sl
  401b94:	f8ce b000 	streq.w	fp, [lr]
  401b98:	6019      	strne	r1, [r3, #0]
  401b9a:	f01b 0107 	ands.w	r1, fp, #7
  401b9e:	f000 8117 	beq.w	401dd0 <_malloc_r+0x4a4>
  401ba2:	f1c1 0008 	rsb	r0, r1, #8
  401ba6:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  401baa:	4483      	add	fp, r0
  401bac:	3108      	adds	r1, #8
  401bae:	445a      	add	r2, fp
  401bb0:	f3c2 020b 	ubfx	r2, r2, #0, #12
  401bb4:	ebc2 0901 	rsb	r9, r2, r1
  401bb8:	4649      	mov	r1, r9
  401bba:	4630      	mov	r0, r6
  401bbc:	9301      	str	r3, [sp, #4]
  401bbe:	f000 fcb1 	bl	402524 <_sbrk_r>
  401bc2:	1c43      	adds	r3, r0, #1
  401bc4:	9b01      	ldr	r3, [sp, #4]
  401bc6:	f000 813f 	beq.w	401e48 <_malloc_r+0x51c>
  401bca:	ebcb 0200 	rsb	r2, fp, r0
  401bce:	444a      	add	r2, r9
  401bd0:	f042 0201 	orr.w	r2, r2, #1
  401bd4:	6819      	ldr	r1, [r3, #0]
  401bd6:	f8c7 b008 	str.w	fp, [r7, #8]
  401bda:	4449      	add	r1, r9
  401bdc:	42bc      	cmp	r4, r7
  401bde:	f8cb 2004 	str.w	r2, [fp, #4]
  401be2:	6019      	str	r1, [r3, #0]
  401be4:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 401c8c <_malloc_r+0x360>
  401be8:	d016      	beq.n	401c18 <_malloc_r+0x2ec>
  401bea:	f1b8 0f0f 	cmp.w	r8, #15
  401bee:	f240 80fd 	bls.w	401dec <_malloc_r+0x4c0>
  401bf2:	6862      	ldr	r2, [r4, #4]
  401bf4:	f1a8 030c 	sub.w	r3, r8, #12
  401bf8:	f023 0307 	bic.w	r3, r3, #7
  401bfc:	18e0      	adds	r0, r4, r3
  401bfe:	f002 0201 	and.w	r2, r2, #1
  401c02:	f04f 0e05 	mov.w	lr, #5
  401c06:	431a      	orrs	r2, r3
  401c08:	2b0f      	cmp	r3, #15
  401c0a:	6062      	str	r2, [r4, #4]
  401c0c:	f8c0 e004 	str.w	lr, [r0, #4]
  401c10:	f8c0 e008 	str.w	lr, [r0, #8]
  401c14:	f200 811c 	bhi.w	401e50 <_malloc_r+0x524>
  401c18:	4b1d      	ldr	r3, [pc, #116]	; (401c90 <_malloc_r+0x364>)
  401c1a:	68bc      	ldr	r4, [r7, #8]
  401c1c:	681a      	ldr	r2, [r3, #0]
  401c1e:	4291      	cmp	r1, r2
  401c20:	bf88      	it	hi
  401c22:	6019      	strhi	r1, [r3, #0]
  401c24:	4b1b      	ldr	r3, [pc, #108]	; (401c94 <_malloc_r+0x368>)
  401c26:	681a      	ldr	r2, [r3, #0]
  401c28:	4291      	cmp	r1, r2
  401c2a:	6862      	ldr	r2, [r4, #4]
  401c2c:	bf88      	it	hi
  401c2e:	6019      	strhi	r1, [r3, #0]
  401c30:	f022 0203 	bic.w	r2, r2, #3
  401c34:	4295      	cmp	r5, r2
  401c36:	eba2 0305 	sub.w	r3, r2, r5
  401c3a:	d801      	bhi.n	401c40 <_malloc_r+0x314>
  401c3c:	2b0f      	cmp	r3, #15
  401c3e:	dc04      	bgt.n	401c4a <_malloc_r+0x31e>
  401c40:	4630      	mov	r0, r6
  401c42:	f000 fa7d 	bl	402140 <__malloc_unlock>
  401c46:	2400      	movs	r4, #0
  401c48:	e738      	b.n	401abc <_malloc_r+0x190>
  401c4a:	1962      	adds	r2, r4, r5
  401c4c:	f043 0301 	orr.w	r3, r3, #1
  401c50:	f045 0501 	orr.w	r5, r5, #1
  401c54:	6065      	str	r5, [r4, #4]
  401c56:	4630      	mov	r0, r6
  401c58:	60ba      	str	r2, [r7, #8]
  401c5a:	6053      	str	r3, [r2, #4]
  401c5c:	f000 fa70 	bl	402140 <__malloc_unlock>
  401c60:	3408      	adds	r4, #8
  401c62:	4620      	mov	r0, r4
  401c64:	b003      	add	sp, #12
  401c66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401c6a:	2b14      	cmp	r3, #20
  401c6c:	d971      	bls.n	401d52 <_malloc_r+0x426>
  401c6e:	2b54      	cmp	r3, #84	; 0x54
  401c70:	f200 80a4 	bhi.w	401dbc <_malloc_r+0x490>
  401c74:	0b28      	lsrs	r0, r5, #12
  401c76:	f100 0e6f 	add.w	lr, r0, #111	; 0x6f
  401c7a:	ea4f 034e 	mov.w	r3, lr, lsl #1
  401c7e:	306e      	adds	r0, #110	; 0x6e
  401c80:	e676      	b.n	401970 <_malloc_r+0x44>
  401c82:	bf00      	nop
  401c84:	20000434 	.word	0x20000434
  401c88:	20000870 	.word	0x20000870
  401c8c:	20000874 	.word	0x20000874
  401c90:	2000086c 	.word	0x2000086c
  401c94:	20000868 	.word	0x20000868
  401c98:	20000840 	.word	0x20000840
  401c9c:	0a5a      	lsrs	r2, r3, #9
  401c9e:	2a04      	cmp	r2, #4
  401ca0:	d95e      	bls.n	401d60 <_malloc_r+0x434>
  401ca2:	2a14      	cmp	r2, #20
  401ca4:	f200 80b3 	bhi.w	401e0e <_malloc_r+0x4e2>
  401ca8:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  401cac:	0049      	lsls	r1, r1, #1
  401cae:	325b      	adds	r2, #91	; 0x5b
  401cb0:	eb07 0c81 	add.w	ip, r7, r1, lsl #2
  401cb4:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
  401cb8:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 401e98 <_malloc_r+0x56c>
  401cbc:	f1ac 0c08 	sub.w	ip, ip, #8
  401cc0:	458c      	cmp	ip, r1
  401cc2:	f000 8088 	beq.w	401dd6 <_malloc_r+0x4aa>
  401cc6:	684a      	ldr	r2, [r1, #4]
  401cc8:	f022 0203 	bic.w	r2, r2, #3
  401ccc:	4293      	cmp	r3, r2
  401cce:	d202      	bcs.n	401cd6 <_malloc_r+0x3aa>
  401cd0:	6889      	ldr	r1, [r1, #8]
  401cd2:	458c      	cmp	ip, r1
  401cd4:	d1f7      	bne.n	401cc6 <_malloc_r+0x39a>
  401cd6:	f8d1 c00c 	ldr.w	ip, [r1, #12]
  401cda:	687a      	ldr	r2, [r7, #4]
  401cdc:	f8c4 c00c 	str.w	ip, [r4, #12]
  401ce0:	60a1      	str	r1, [r4, #8]
  401ce2:	f8cc 4008 	str.w	r4, [ip, #8]
  401ce6:	60cc      	str	r4, [r1, #12]
  401ce8:	e688      	b.n	4019fc <_malloc_r+0xd0>
  401cea:	1963      	adds	r3, r4, r5
  401cec:	f042 0701 	orr.w	r7, r2, #1
  401cf0:	f045 0501 	orr.w	r5, r5, #1
  401cf4:	6065      	str	r5, [r4, #4]
  401cf6:	4630      	mov	r0, r6
  401cf8:	614b      	str	r3, [r1, #20]
  401cfa:	610b      	str	r3, [r1, #16]
  401cfc:	f8c3 e00c 	str.w	lr, [r3, #12]
  401d00:	f8c3 e008 	str.w	lr, [r3, #8]
  401d04:	605f      	str	r7, [r3, #4]
  401d06:	509a      	str	r2, [r3, r2]
  401d08:	3408      	adds	r4, #8
  401d0a:	f000 fa19 	bl	402140 <__malloc_unlock>
  401d0e:	e6d5      	b.n	401abc <_malloc_r+0x190>
  401d10:	684a      	ldr	r2, [r1, #4]
  401d12:	e673      	b.n	4019fc <_malloc_r+0xd0>
  401d14:	f108 0801 	add.w	r8, r8, #1
  401d18:	f018 0f03 	tst.w	r8, #3
  401d1c:	f10c 0c08 	add.w	ip, ip, #8
  401d20:	f47f ae7f 	bne.w	401a22 <_malloc_r+0xf6>
  401d24:	e030      	b.n	401d88 <_malloc_r+0x45c>
  401d26:	68dc      	ldr	r4, [r3, #12]
  401d28:	42a3      	cmp	r3, r4
  401d2a:	bf08      	it	eq
  401d2c:	3002      	addeq	r0, #2
  401d2e:	f43f ae35 	beq.w	40199c <_malloc_r+0x70>
  401d32:	e6b3      	b.n	401a9c <_malloc_r+0x170>
  401d34:	440b      	add	r3, r1
  401d36:	460c      	mov	r4, r1
  401d38:	685a      	ldr	r2, [r3, #4]
  401d3a:	68c9      	ldr	r1, [r1, #12]
  401d3c:	f854 5f08 	ldr.w	r5, [r4, #8]!
  401d40:	f042 0201 	orr.w	r2, r2, #1
  401d44:	605a      	str	r2, [r3, #4]
  401d46:	4630      	mov	r0, r6
  401d48:	60e9      	str	r1, [r5, #12]
  401d4a:	608d      	str	r5, [r1, #8]
  401d4c:	f000 f9f8 	bl	402140 <__malloc_unlock>
  401d50:	e6b4      	b.n	401abc <_malloc_r+0x190>
  401d52:	f103 0e5c 	add.w	lr, r3, #92	; 0x5c
  401d56:	f103 005b 	add.w	r0, r3, #91	; 0x5b
  401d5a:	ea4f 034e 	mov.w	r3, lr, lsl #1
  401d5e:	e607      	b.n	401970 <_malloc_r+0x44>
  401d60:	099a      	lsrs	r2, r3, #6
  401d62:	f102 0139 	add.w	r1, r2, #57	; 0x39
  401d66:	0049      	lsls	r1, r1, #1
  401d68:	3238      	adds	r2, #56	; 0x38
  401d6a:	e7a1      	b.n	401cb0 <_malloc_r+0x384>
  401d6c:	42bc      	cmp	r4, r7
  401d6e:	4b4a      	ldr	r3, [pc, #296]	; (401e98 <_malloc_r+0x56c>)
  401d70:	f43f af00 	beq.w	401b74 <_malloc_r+0x248>
  401d74:	689c      	ldr	r4, [r3, #8]
  401d76:	6862      	ldr	r2, [r4, #4]
  401d78:	f022 0203 	bic.w	r2, r2, #3
  401d7c:	e75a      	b.n	401c34 <_malloc_r+0x308>
  401d7e:	f859 3908 	ldr.w	r3, [r9], #-8
  401d82:	4599      	cmp	r9, r3
  401d84:	f040 8082 	bne.w	401e8c <_malloc_r+0x560>
  401d88:	f010 0f03 	tst.w	r0, #3
  401d8c:	f100 30ff 	add.w	r0, r0, #4294967295
  401d90:	d1f5      	bne.n	401d7e <_malloc_r+0x452>
  401d92:	687b      	ldr	r3, [r7, #4]
  401d94:	ea23 0304 	bic.w	r3, r3, r4
  401d98:	607b      	str	r3, [r7, #4]
  401d9a:	0064      	lsls	r4, r4, #1
  401d9c:	429c      	cmp	r4, r3
  401d9e:	f63f aebd 	bhi.w	401b1c <_malloc_r+0x1f0>
  401da2:	2c00      	cmp	r4, #0
  401da4:	f43f aeba 	beq.w	401b1c <_malloc_r+0x1f0>
  401da8:	421c      	tst	r4, r3
  401daa:	4640      	mov	r0, r8
  401dac:	f47f ae35 	bne.w	401a1a <_malloc_r+0xee>
  401db0:	0064      	lsls	r4, r4, #1
  401db2:	421c      	tst	r4, r3
  401db4:	f100 0004 	add.w	r0, r0, #4
  401db8:	d0fa      	beq.n	401db0 <_malloc_r+0x484>
  401dba:	e62e      	b.n	401a1a <_malloc_r+0xee>
  401dbc:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  401dc0:	d818      	bhi.n	401df4 <_malloc_r+0x4c8>
  401dc2:	0be8      	lsrs	r0, r5, #15
  401dc4:	f100 0e78 	add.w	lr, r0, #120	; 0x78
  401dc8:	ea4f 034e 	mov.w	r3, lr, lsl #1
  401dcc:	3077      	adds	r0, #119	; 0x77
  401dce:	e5cf      	b.n	401970 <_malloc_r+0x44>
  401dd0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  401dd4:	e6eb      	b.n	401bae <_malloc_r+0x282>
  401dd6:	2101      	movs	r1, #1
  401dd8:	f8d8 3004 	ldr.w	r3, [r8, #4]
  401ddc:	1092      	asrs	r2, r2, #2
  401dde:	fa01 f202 	lsl.w	r2, r1, r2
  401de2:	431a      	orrs	r2, r3
  401de4:	f8c8 2004 	str.w	r2, [r8, #4]
  401de8:	4661      	mov	r1, ip
  401dea:	e777      	b.n	401cdc <_malloc_r+0x3b0>
  401dec:	2301      	movs	r3, #1
  401dee:	f8cb 3004 	str.w	r3, [fp, #4]
  401df2:	e725      	b.n	401c40 <_malloc_r+0x314>
  401df4:	f240 5254 	movw	r2, #1364	; 0x554
  401df8:	4293      	cmp	r3, r2
  401dfa:	d820      	bhi.n	401e3e <_malloc_r+0x512>
  401dfc:	0ca8      	lsrs	r0, r5, #18
  401dfe:	f100 0e7d 	add.w	lr, r0, #125	; 0x7d
  401e02:	ea4f 034e 	mov.w	r3, lr, lsl #1
  401e06:	307c      	adds	r0, #124	; 0x7c
  401e08:	e5b2      	b.n	401970 <_malloc_r+0x44>
  401e0a:	3210      	adds	r2, #16
  401e0c:	e6a4      	b.n	401b58 <_malloc_r+0x22c>
  401e0e:	2a54      	cmp	r2, #84	; 0x54
  401e10:	d826      	bhi.n	401e60 <_malloc_r+0x534>
  401e12:	0b1a      	lsrs	r2, r3, #12
  401e14:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  401e18:	0049      	lsls	r1, r1, #1
  401e1a:	326e      	adds	r2, #110	; 0x6e
  401e1c:	e748      	b.n	401cb0 <_malloc_r+0x384>
  401e1e:	68bc      	ldr	r4, [r7, #8]
  401e20:	6862      	ldr	r2, [r4, #4]
  401e22:	f022 0203 	bic.w	r2, r2, #3
  401e26:	e705      	b.n	401c34 <_malloc_r+0x308>
  401e28:	f3ca 000b 	ubfx	r0, sl, #0, #12
  401e2c:	2800      	cmp	r0, #0
  401e2e:	f47f aea8 	bne.w	401b82 <_malloc_r+0x256>
  401e32:	4442      	add	r2, r8
  401e34:	68bb      	ldr	r3, [r7, #8]
  401e36:	f042 0201 	orr.w	r2, r2, #1
  401e3a:	605a      	str	r2, [r3, #4]
  401e3c:	e6ec      	b.n	401c18 <_malloc_r+0x2ec>
  401e3e:	23fe      	movs	r3, #254	; 0xfe
  401e40:	f04f 0e7f 	mov.w	lr, #127	; 0x7f
  401e44:	207e      	movs	r0, #126	; 0x7e
  401e46:	e593      	b.n	401970 <_malloc_r+0x44>
  401e48:	2201      	movs	r2, #1
  401e4a:	f04f 0900 	mov.w	r9, #0
  401e4e:	e6c1      	b.n	401bd4 <_malloc_r+0x2a8>
  401e50:	f104 0108 	add.w	r1, r4, #8
  401e54:	4630      	mov	r0, r6
  401e56:	f7ff fa59 	bl	40130c <_free_r>
  401e5a:	f8d9 1000 	ldr.w	r1, [r9]
  401e5e:	e6db      	b.n	401c18 <_malloc_r+0x2ec>
  401e60:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  401e64:	d805      	bhi.n	401e72 <_malloc_r+0x546>
  401e66:	0bda      	lsrs	r2, r3, #15
  401e68:	f102 0178 	add.w	r1, r2, #120	; 0x78
  401e6c:	0049      	lsls	r1, r1, #1
  401e6e:	3277      	adds	r2, #119	; 0x77
  401e70:	e71e      	b.n	401cb0 <_malloc_r+0x384>
  401e72:	f240 5154 	movw	r1, #1364	; 0x554
  401e76:	428a      	cmp	r2, r1
  401e78:	d805      	bhi.n	401e86 <_malloc_r+0x55a>
  401e7a:	0c9a      	lsrs	r2, r3, #18
  401e7c:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  401e80:	0049      	lsls	r1, r1, #1
  401e82:	327c      	adds	r2, #124	; 0x7c
  401e84:	e714      	b.n	401cb0 <_malloc_r+0x384>
  401e86:	21fe      	movs	r1, #254	; 0xfe
  401e88:	227e      	movs	r2, #126	; 0x7e
  401e8a:	e711      	b.n	401cb0 <_malloc_r+0x384>
  401e8c:	687b      	ldr	r3, [r7, #4]
  401e8e:	e784      	b.n	401d9a <_malloc_r+0x46e>
  401e90:	08e8      	lsrs	r0, r5, #3
  401e92:	1c43      	adds	r3, r0, #1
  401e94:	005b      	lsls	r3, r3, #1
  401e96:	e5f8      	b.n	401a8a <_malloc_r+0x15e>
  401e98:	20000434 	.word	0x20000434
  401e9c:	00000000 	.word	0x00000000

00401ea0 <memchr>:
  401ea0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  401ea4:	2a10      	cmp	r2, #16
  401ea6:	db2b      	blt.n	401f00 <memchr+0x60>
  401ea8:	f010 0f07 	tst.w	r0, #7
  401eac:	d008      	beq.n	401ec0 <memchr+0x20>
  401eae:	f810 3b01 	ldrb.w	r3, [r0], #1
  401eb2:	3a01      	subs	r2, #1
  401eb4:	428b      	cmp	r3, r1
  401eb6:	d02d      	beq.n	401f14 <memchr+0x74>
  401eb8:	f010 0f07 	tst.w	r0, #7
  401ebc:	b342      	cbz	r2, 401f10 <memchr+0x70>
  401ebe:	d1f6      	bne.n	401eae <memchr+0xe>
  401ec0:	b4f0      	push	{r4, r5, r6, r7}
  401ec2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  401ec6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  401eca:	f022 0407 	bic.w	r4, r2, #7
  401ece:	f07f 0700 	mvns.w	r7, #0
  401ed2:	2300      	movs	r3, #0
  401ed4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  401ed8:	3c08      	subs	r4, #8
  401eda:	ea85 0501 	eor.w	r5, r5, r1
  401ede:	ea86 0601 	eor.w	r6, r6, r1
  401ee2:	fa85 f547 	uadd8	r5, r5, r7
  401ee6:	faa3 f587 	sel	r5, r3, r7
  401eea:	fa86 f647 	uadd8	r6, r6, r7
  401eee:	faa5 f687 	sel	r6, r5, r7
  401ef2:	b98e      	cbnz	r6, 401f18 <memchr+0x78>
  401ef4:	d1ee      	bne.n	401ed4 <memchr+0x34>
  401ef6:	bcf0      	pop	{r4, r5, r6, r7}
  401ef8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  401efc:	f002 0207 	and.w	r2, r2, #7
  401f00:	b132      	cbz	r2, 401f10 <memchr+0x70>
  401f02:	f810 3b01 	ldrb.w	r3, [r0], #1
  401f06:	3a01      	subs	r2, #1
  401f08:	ea83 0301 	eor.w	r3, r3, r1
  401f0c:	b113      	cbz	r3, 401f14 <memchr+0x74>
  401f0e:	d1f8      	bne.n	401f02 <memchr+0x62>
  401f10:	2000      	movs	r0, #0
  401f12:	4770      	bx	lr
  401f14:	3801      	subs	r0, #1
  401f16:	4770      	bx	lr
  401f18:	2d00      	cmp	r5, #0
  401f1a:	bf06      	itte	eq
  401f1c:	4635      	moveq	r5, r6
  401f1e:	3803      	subeq	r0, #3
  401f20:	3807      	subne	r0, #7
  401f22:	f015 0f01 	tst.w	r5, #1
  401f26:	d107      	bne.n	401f38 <memchr+0x98>
  401f28:	3001      	adds	r0, #1
  401f2a:	f415 7f80 	tst.w	r5, #256	; 0x100
  401f2e:	bf02      	ittt	eq
  401f30:	3001      	addeq	r0, #1
  401f32:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  401f36:	3001      	addeq	r0, #1
  401f38:	bcf0      	pop	{r4, r5, r6, r7}
  401f3a:	3801      	subs	r0, #1
  401f3c:	4770      	bx	lr
  401f3e:	bf00      	nop

00401f40 <memcpy>:
  401f40:	4684      	mov	ip, r0
  401f42:	ea41 0300 	orr.w	r3, r1, r0
  401f46:	f013 0303 	ands.w	r3, r3, #3
  401f4a:	d16d      	bne.n	402028 <memcpy+0xe8>
  401f4c:	3a40      	subs	r2, #64	; 0x40
  401f4e:	d341      	bcc.n	401fd4 <memcpy+0x94>
  401f50:	f851 3b04 	ldr.w	r3, [r1], #4
  401f54:	f840 3b04 	str.w	r3, [r0], #4
  401f58:	f851 3b04 	ldr.w	r3, [r1], #4
  401f5c:	f840 3b04 	str.w	r3, [r0], #4
  401f60:	f851 3b04 	ldr.w	r3, [r1], #4
  401f64:	f840 3b04 	str.w	r3, [r0], #4
  401f68:	f851 3b04 	ldr.w	r3, [r1], #4
  401f6c:	f840 3b04 	str.w	r3, [r0], #4
  401f70:	f851 3b04 	ldr.w	r3, [r1], #4
  401f74:	f840 3b04 	str.w	r3, [r0], #4
  401f78:	f851 3b04 	ldr.w	r3, [r1], #4
  401f7c:	f840 3b04 	str.w	r3, [r0], #4
  401f80:	f851 3b04 	ldr.w	r3, [r1], #4
  401f84:	f840 3b04 	str.w	r3, [r0], #4
  401f88:	f851 3b04 	ldr.w	r3, [r1], #4
  401f8c:	f840 3b04 	str.w	r3, [r0], #4
  401f90:	f851 3b04 	ldr.w	r3, [r1], #4
  401f94:	f840 3b04 	str.w	r3, [r0], #4
  401f98:	f851 3b04 	ldr.w	r3, [r1], #4
  401f9c:	f840 3b04 	str.w	r3, [r0], #4
  401fa0:	f851 3b04 	ldr.w	r3, [r1], #4
  401fa4:	f840 3b04 	str.w	r3, [r0], #4
  401fa8:	f851 3b04 	ldr.w	r3, [r1], #4
  401fac:	f840 3b04 	str.w	r3, [r0], #4
  401fb0:	f851 3b04 	ldr.w	r3, [r1], #4
  401fb4:	f840 3b04 	str.w	r3, [r0], #4
  401fb8:	f851 3b04 	ldr.w	r3, [r1], #4
  401fbc:	f840 3b04 	str.w	r3, [r0], #4
  401fc0:	f851 3b04 	ldr.w	r3, [r1], #4
  401fc4:	f840 3b04 	str.w	r3, [r0], #4
  401fc8:	f851 3b04 	ldr.w	r3, [r1], #4
  401fcc:	f840 3b04 	str.w	r3, [r0], #4
  401fd0:	3a40      	subs	r2, #64	; 0x40
  401fd2:	d2bd      	bcs.n	401f50 <memcpy+0x10>
  401fd4:	3230      	adds	r2, #48	; 0x30
  401fd6:	d311      	bcc.n	401ffc <memcpy+0xbc>
  401fd8:	f851 3b04 	ldr.w	r3, [r1], #4
  401fdc:	f840 3b04 	str.w	r3, [r0], #4
  401fe0:	f851 3b04 	ldr.w	r3, [r1], #4
  401fe4:	f840 3b04 	str.w	r3, [r0], #4
  401fe8:	f851 3b04 	ldr.w	r3, [r1], #4
  401fec:	f840 3b04 	str.w	r3, [r0], #4
  401ff0:	f851 3b04 	ldr.w	r3, [r1], #4
  401ff4:	f840 3b04 	str.w	r3, [r0], #4
  401ff8:	3a10      	subs	r2, #16
  401ffa:	d2ed      	bcs.n	401fd8 <memcpy+0x98>
  401ffc:	320c      	adds	r2, #12
  401ffe:	d305      	bcc.n	40200c <memcpy+0xcc>
  402000:	f851 3b04 	ldr.w	r3, [r1], #4
  402004:	f840 3b04 	str.w	r3, [r0], #4
  402008:	3a04      	subs	r2, #4
  40200a:	d2f9      	bcs.n	402000 <memcpy+0xc0>
  40200c:	3204      	adds	r2, #4
  40200e:	d008      	beq.n	402022 <memcpy+0xe2>
  402010:	07d2      	lsls	r2, r2, #31
  402012:	bf1c      	itt	ne
  402014:	f811 3b01 	ldrbne.w	r3, [r1], #1
  402018:	f800 3b01 	strbne.w	r3, [r0], #1
  40201c:	d301      	bcc.n	402022 <memcpy+0xe2>
  40201e:	880b      	ldrh	r3, [r1, #0]
  402020:	8003      	strh	r3, [r0, #0]
  402022:	4660      	mov	r0, ip
  402024:	4770      	bx	lr
  402026:	bf00      	nop
  402028:	2a08      	cmp	r2, #8
  40202a:	d313      	bcc.n	402054 <memcpy+0x114>
  40202c:	078b      	lsls	r3, r1, #30
  40202e:	d08d      	beq.n	401f4c <memcpy+0xc>
  402030:	f010 0303 	ands.w	r3, r0, #3
  402034:	d08a      	beq.n	401f4c <memcpy+0xc>
  402036:	f1c3 0304 	rsb	r3, r3, #4
  40203a:	1ad2      	subs	r2, r2, r3
  40203c:	07db      	lsls	r3, r3, #31
  40203e:	bf1c      	itt	ne
  402040:	f811 3b01 	ldrbne.w	r3, [r1], #1
  402044:	f800 3b01 	strbne.w	r3, [r0], #1
  402048:	d380      	bcc.n	401f4c <memcpy+0xc>
  40204a:	f831 3b02 	ldrh.w	r3, [r1], #2
  40204e:	f820 3b02 	strh.w	r3, [r0], #2
  402052:	e77b      	b.n	401f4c <memcpy+0xc>
  402054:	3a04      	subs	r2, #4
  402056:	d3d9      	bcc.n	40200c <memcpy+0xcc>
  402058:	3a01      	subs	r2, #1
  40205a:	f811 3b01 	ldrb.w	r3, [r1], #1
  40205e:	f800 3b01 	strb.w	r3, [r0], #1
  402062:	d2f9      	bcs.n	402058 <memcpy+0x118>
  402064:	780b      	ldrb	r3, [r1, #0]
  402066:	7003      	strb	r3, [r0, #0]
  402068:	784b      	ldrb	r3, [r1, #1]
  40206a:	7043      	strb	r3, [r0, #1]
  40206c:	788b      	ldrb	r3, [r1, #2]
  40206e:	7083      	strb	r3, [r0, #2]
  402070:	4660      	mov	r0, ip
  402072:	4770      	bx	lr

00402074 <memmove>:
  402074:	4288      	cmp	r0, r1
  402076:	b5f0      	push	{r4, r5, r6, r7, lr}
  402078:	d90d      	bls.n	402096 <memmove+0x22>
  40207a:	188b      	adds	r3, r1, r2
  40207c:	4298      	cmp	r0, r3
  40207e:	d20a      	bcs.n	402096 <memmove+0x22>
  402080:	1881      	adds	r1, r0, r2
  402082:	2a00      	cmp	r2, #0
  402084:	d051      	beq.n	40212a <memmove+0xb6>
  402086:	1a9a      	subs	r2, r3, r2
  402088:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  40208c:	f801 4d01 	strb.w	r4, [r1, #-1]!
  402090:	4293      	cmp	r3, r2
  402092:	d1f9      	bne.n	402088 <memmove+0x14>
  402094:	bdf0      	pop	{r4, r5, r6, r7, pc}
  402096:	2a0f      	cmp	r2, #15
  402098:	d948      	bls.n	40212c <memmove+0xb8>
  40209a:	ea41 0300 	orr.w	r3, r1, r0
  40209e:	079b      	lsls	r3, r3, #30
  4020a0:	d146      	bne.n	402130 <memmove+0xbc>
  4020a2:	f100 0410 	add.w	r4, r0, #16
  4020a6:	f101 0310 	add.w	r3, r1, #16
  4020aa:	4615      	mov	r5, r2
  4020ac:	f853 6c10 	ldr.w	r6, [r3, #-16]
  4020b0:	f844 6c10 	str.w	r6, [r4, #-16]
  4020b4:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  4020b8:	f844 6c0c 	str.w	r6, [r4, #-12]
  4020bc:	f853 6c08 	ldr.w	r6, [r3, #-8]
  4020c0:	f844 6c08 	str.w	r6, [r4, #-8]
  4020c4:	3d10      	subs	r5, #16
  4020c6:	f853 6c04 	ldr.w	r6, [r3, #-4]
  4020ca:	f844 6c04 	str.w	r6, [r4, #-4]
  4020ce:	2d0f      	cmp	r5, #15
  4020d0:	f103 0310 	add.w	r3, r3, #16
  4020d4:	f104 0410 	add.w	r4, r4, #16
  4020d8:	d8e8      	bhi.n	4020ac <memmove+0x38>
  4020da:	f1a2 0310 	sub.w	r3, r2, #16
  4020de:	f023 030f 	bic.w	r3, r3, #15
  4020e2:	f002 0e0f 	and.w	lr, r2, #15
  4020e6:	3310      	adds	r3, #16
  4020e8:	f1be 0f03 	cmp.w	lr, #3
  4020ec:	4419      	add	r1, r3
  4020ee:	4403      	add	r3, r0
  4020f0:	d921      	bls.n	402136 <memmove+0xc2>
  4020f2:	1f1e      	subs	r6, r3, #4
  4020f4:	460d      	mov	r5, r1
  4020f6:	4674      	mov	r4, lr
  4020f8:	3c04      	subs	r4, #4
  4020fa:	f855 7b04 	ldr.w	r7, [r5], #4
  4020fe:	f846 7f04 	str.w	r7, [r6, #4]!
  402102:	2c03      	cmp	r4, #3
  402104:	d8f8      	bhi.n	4020f8 <memmove+0x84>
  402106:	f1ae 0404 	sub.w	r4, lr, #4
  40210a:	f024 0403 	bic.w	r4, r4, #3
  40210e:	3404      	adds	r4, #4
  402110:	4423      	add	r3, r4
  402112:	4421      	add	r1, r4
  402114:	f002 0203 	and.w	r2, r2, #3
  402118:	b162      	cbz	r2, 402134 <memmove+0xc0>
  40211a:	3b01      	subs	r3, #1
  40211c:	440a      	add	r2, r1
  40211e:	f811 4b01 	ldrb.w	r4, [r1], #1
  402122:	f803 4f01 	strb.w	r4, [r3, #1]!
  402126:	428a      	cmp	r2, r1
  402128:	d1f9      	bne.n	40211e <memmove+0xaa>
  40212a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40212c:	4603      	mov	r3, r0
  40212e:	e7f3      	b.n	402118 <memmove+0xa4>
  402130:	4603      	mov	r3, r0
  402132:	e7f2      	b.n	40211a <memmove+0xa6>
  402134:	bdf0      	pop	{r4, r5, r6, r7, pc}
  402136:	4672      	mov	r2, lr
  402138:	e7ee      	b.n	402118 <memmove+0xa4>
  40213a:	bf00      	nop

0040213c <__malloc_lock>:
  40213c:	4770      	bx	lr
  40213e:	bf00      	nop

00402140 <__malloc_unlock>:
  402140:	4770      	bx	lr
  402142:	bf00      	nop

00402144 <_realloc_r>:
  402144:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402148:	4617      	mov	r7, r2
  40214a:	b083      	sub	sp, #12
  40214c:	2900      	cmp	r1, #0
  40214e:	f000 80c1 	beq.w	4022d4 <_realloc_r+0x190>
  402152:	460e      	mov	r6, r1
  402154:	4681      	mov	r9, r0
  402156:	f107 050b 	add.w	r5, r7, #11
  40215a:	f7ff ffef 	bl	40213c <__malloc_lock>
  40215e:	f856 ec04 	ldr.w	lr, [r6, #-4]
  402162:	2d16      	cmp	r5, #22
  402164:	f02e 0403 	bic.w	r4, lr, #3
  402168:	f1a6 0808 	sub.w	r8, r6, #8
  40216c:	d840      	bhi.n	4021f0 <_realloc_r+0xac>
  40216e:	2210      	movs	r2, #16
  402170:	4615      	mov	r5, r2
  402172:	42af      	cmp	r7, r5
  402174:	d841      	bhi.n	4021fa <_realloc_r+0xb6>
  402176:	4294      	cmp	r4, r2
  402178:	da75      	bge.n	402266 <_realloc_r+0x122>
  40217a:	4bc9      	ldr	r3, [pc, #804]	; (4024a0 <_realloc_r+0x35c>)
  40217c:	6899      	ldr	r1, [r3, #8]
  40217e:	eb08 0004 	add.w	r0, r8, r4
  402182:	4288      	cmp	r0, r1
  402184:	6841      	ldr	r1, [r0, #4]
  402186:	f000 80d9 	beq.w	40233c <_realloc_r+0x1f8>
  40218a:	f021 0301 	bic.w	r3, r1, #1
  40218e:	4403      	add	r3, r0
  402190:	685b      	ldr	r3, [r3, #4]
  402192:	07db      	lsls	r3, r3, #31
  402194:	d57d      	bpl.n	402292 <_realloc_r+0x14e>
  402196:	f01e 0f01 	tst.w	lr, #1
  40219a:	d035      	beq.n	402208 <_realloc_r+0xc4>
  40219c:	4639      	mov	r1, r7
  40219e:	4648      	mov	r0, r9
  4021a0:	f7ff fbc4 	bl	40192c <_malloc_r>
  4021a4:	4607      	mov	r7, r0
  4021a6:	b1e0      	cbz	r0, 4021e2 <_realloc_r+0x9e>
  4021a8:	f856 3c04 	ldr.w	r3, [r6, #-4]
  4021ac:	f023 0301 	bic.w	r3, r3, #1
  4021b0:	4443      	add	r3, r8
  4021b2:	f1a0 0208 	sub.w	r2, r0, #8
  4021b6:	429a      	cmp	r2, r3
  4021b8:	f000 8144 	beq.w	402444 <_realloc_r+0x300>
  4021bc:	1f22      	subs	r2, r4, #4
  4021be:	2a24      	cmp	r2, #36	; 0x24
  4021c0:	f200 8131 	bhi.w	402426 <_realloc_r+0x2e2>
  4021c4:	2a13      	cmp	r2, #19
  4021c6:	f200 8104 	bhi.w	4023d2 <_realloc_r+0x28e>
  4021ca:	4603      	mov	r3, r0
  4021cc:	4632      	mov	r2, r6
  4021ce:	6811      	ldr	r1, [r2, #0]
  4021d0:	6019      	str	r1, [r3, #0]
  4021d2:	6851      	ldr	r1, [r2, #4]
  4021d4:	6059      	str	r1, [r3, #4]
  4021d6:	6892      	ldr	r2, [r2, #8]
  4021d8:	609a      	str	r2, [r3, #8]
  4021da:	4631      	mov	r1, r6
  4021dc:	4648      	mov	r0, r9
  4021de:	f7ff f895 	bl	40130c <_free_r>
  4021e2:	4648      	mov	r0, r9
  4021e4:	f7ff ffac 	bl	402140 <__malloc_unlock>
  4021e8:	4638      	mov	r0, r7
  4021ea:	b003      	add	sp, #12
  4021ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4021f0:	f025 0507 	bic.w	r5, r5, #7
  4021f4:	2d00      	cmp	r5, #0
  4021f6:	462a      	mov	r2, r5
  4021f8:	dabb      	bge.n	402172 <_realloc_r+0x2e>
  4021fa:	230c      	movs	r3, #12
  4021fc:	2000      	movs	r0, #0
  4021fe:	f8c9 3000 	str.w	r3, [r9]
  402202:	b003      	add	sp, #12
  402204:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402208:	f856 3c08 	ldr.w	r3, [r6, #-8]
  40220c:	ebc3 0a08 	rsb	sl, r3, r8
  402210:	f8da 3004 	ldr.w	r3, [sl, #4]
  402214:	f023 0c03 	bic.w	ip, r3, #3
  402218:	eb04 030c 	add.w	r3, r4, ip
  40221c:	4293      	cmp	r3, r2
  40221e:	dbbd      	blt.n	40219c <_realloc_r+0x58>
  402220:	4657      	mov	r7, sl
  402222:	f8da 100c 	ldr.w	r1, [sl, #12]
  402226:	f857 0f08 	ldr.w	r0, [r7, #8]!
  40222a:	1f22      	subs	r2, r4, #4
  40222c:	2a24      	cmp	r2, #36	; 0x24
  40222e:	60c1      	str	r1, [r0, #12]
  402230:	6088      	str	r0, [r1, #8]
  402232:	f200 8117 	bhi.w	402464 <_realloc_r+0x320>
  402236:	2a13      	cmp	r2, #19
  402238:	f240 8112 	bls.w	402460 <_realloc_r+0x31c>
  40223c:	6831      	ldr	r1, [r6, #0]
  40223e:	f8ca 1008 	str.w	r1, [sl, #8]
  402242:	6871      	ldr	r1, [r6, #4]
  402244:	f8ca 100c 	str.w	r1, [sl, #12]
  402248:	2a1b      	cmp	r2, #27
  40224a:	f200 812b 	bhi.w	4024a4 <_realloc_r+0x360>
  40224e:	3608      	adds	r6, #8
  402250:	f10a 0210 	add.w	r2, sl, #16
  402254:	6831      	ldr	r1, [r6, #0]
  402256:	6011      	str	r1, [r2, #0]
  402258:	6871      	ldr	r1, [r6, #4]
  40225a:	6051      	str	r1, [r2, #4]
  40225c:	68b1      	ldr	r1, [r6, #8]
  40225e:	6091      	str	r1, [r2, #8]
  402260:	463e      	mov	r6, r7
  402262:	461c      	mov	r4, r3
  402264:	46d0      	mov	r8, sl
  402266:	1b63      	subs	r3, r4, r5
  402268:	2b0f      	cmp	r3, #15
  40226a:	d81d      	bhi.n	4022a8 <_realloc_r+0x164>
  40226c:	f8d8 3004 	ldr.w	r3, [r8, #4]
  402270:	f003 0301 	and.w	r3, r3, #1
  402274:	4323      	orrs	r3, r4
  402276:	4444      	add	r4, r8
  402278:	f8c8 3004 	str.w	r3, [r8, #4]
  40227c:	6863      	ldr	r3, [r4, #4]
  40227e:	f043 0301 	orr.w	r3, r3, #1
  402282:	6063      	str	r3, [r4, #4]
  402284:	4648      	mov	r0, r9
  402286:	f7ff ff5b 	bl	402140 <__malloc_unlock>
  40228a:	4630      	mov	r0, r6
  40228c:	b003      	add	sp, #12
  40228e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402292:	f021 0103 	bic.w	r1, r1, #3
  402296:	4421      	add	r1, r4
  402298:	4291      	cmp	r1, r2
  40229a:	db21      	blt.n	4022e0 <_realloc_r+0x19c>
  40229c:	68c3      	ldr	r3, [r0, #12]
  40229e:	6882      	ldr	r2, [r0, #8]
  4022a0:	460c      	mov	r4, r1
  4022a2:	60d3      	str	r3, [r2, #12]
  4022a4:	609a      	str	r2, [r3, #8]
  4022a6:	e7de      	b.n	402266 <_realloc_r+0x122>
  4022a8:	f8d8 2004 	ldr.w	r2, [r8, #4]
  4022ac:	eb08 0105 	add.w	r1, r8, r5
  4022b0:	f002 0201 	and.w	r2, r2, #1
  4022b4:	4315      	orrs	r5, r2
  4022b6:	f043 0201 	orr.w	r2, r3, #1
  4022ba:	440b      	add	r3, r1
  4022bc:	f8c8 5004 	str.w	r5, [r8, #4]
  4022c0:	604a      	str	r2, [r1, #4]
  4022c2:	685a      	ldr	r2, [r3, #4]
  4022c4:	f042 0201 	orr.w	r2, r2, #1
  4022c8:	3108      	adds	r1, #8
  4022ca:	605a      	str	r2, [r3, #4]
  4022cc:	4648      	mov	r0, r9
  4022ce:	f7ff f81d 	bl	40130c <_free_r>
  4022d2:	e7d7      	b.n	402284 <_realloc_r+0x140>
  4022d4:	4611      	mov	r1, r2
  4022d6:	b003      	add	sp, #12
  4022d8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4022dc:	f7ff bb26 	b.w	40192c <_malloc_r>
  4022e0:	f01e 0f01 	tst.w	lr, #1
  4022e4:	f47f af5a 	bne.w	40219c <_realloc_r+0x58>
  4022e8:	f856 3c08 	ldr.w	r3, [r6, #-8]
  4022ec:	ebc3 0a08 	rsb	sl, r3, r8
  4022f0:	f8da 3004 	ldr.w	r3, [sl, #4]
  4022f4:	f023 0c03 	bic.w	ip, r3, #3
  4022f8:	eb01 0e0c 	add.w	lr, r1, ip
  4022fc:	4596      	cmp	lr, r2
  4022fe:	db8b      	blt.n	402218 <_realloc_r+0xd4>
  402300:	68c3      	ldr	r3, [r0, #12]
  402302:	6882      	ldr	r2, [r0, #8]
  402304:	4657      	mov	r7, sl
  402306:	60d3      	str	r3, [r2, #12]
  402308:	609a      	str	r2, [r3, #8]
  40230a:	f857 1f08 	ldr.w	r1, [r7, #8]!
  40230e:	f8da 300c 	ldr.w	r3, [sl, #12]
  402312:	60cb      	str	r3, [r1, #12]
  402314:	1f22      	subs	r2, r4, #4
  402316:	2a24      	cmp	r2, #36	; 0x24
  402318:	6099      	str	r1, [r3, #8]
  40231a:	f200 8099 	bhi.w	402450 <_realloc_r+0x30c>
  40231e:	2a13      	cmp	r2, #19
  402320:	d962      	bls.n	4023e8 <_realloc_r+0x2a4>
  402322:	6833      	ldr	r3, [r6, #0]
  402324:	f8ca 3008 	str.w	r3, [sl, #8]
  402328:	6873      	ldr	r3, [r6, #4]
  40232a:	f8ca 300c 	str.w	r3, [sl, #12]
  40232e:	2a1b      	cmp	r2, #27
  402330:	f200 80a0 	bhi.w	402474 <_realloc_r+0x330>
  402334:	3608      	adds	r6, #8
  402336:	f10a 0310 	add.w	r3, sl, #16
  40233a:	e056      	b.n	4023ea <_realloc_r+0x2a6>
  40233c:	f021 0b03 	bic.w	fp, r1, #3
  402340:	44a3      	add	fp, r4
  402342:	f105 0010 	add.w	r0, r5, #16
  402346:	4583      	cmp	fp, r0
  402348:	da59      	bge.n	4023fe <_realloc_r+0x2ba>
  40234a:	f01e 0f01 	tst.w	lr, #1
  40234e:	f47f af25 	bne.w	40219c <_realloc_r+0x58>
  402352:	f856 1c08 	ldr.w	r1, [r6, #-8]
  402356:	ebc1 0a08 	rsb	sl, r1, r8
  40235a:	f8da 1004 	ldr.w	r1, [sl, #4]
  40235e:	f021 0c03 	bic.w	ip, r1, #3
  402362:	44e3      	add	fp, ip
  402364:	4558      	cmp	r0, fp
  402366:	f73f af57 	bgt.w	402218 <_realloc_r+0xd4>
  40236a:	4657      	mov	r7, sl
  40236c:	f8da 100c 	ldr.w	r1, [sl, #12]
  402370:	f857 0f08 	ldr.w	r0, [r7, #8]!
  402374:	1f22      	subs	r2, r4, #4
  402376:	2a24      	cmp	r2, #36	; 0x24
  402378:	60c1      	str	r1, [r0, #12]
  40237a:	6088      	str	r0, [r1, #8]
  40237c:	f200 80b4 	bhi.w	4024e8 <_realloc_r+0x3a4>
  402380:	2a13      	cmp	r2, #19
  402382:	f240 80a5 	bls.w	4024d0 <_realloc_r+0x38c>
  402386:	6831      	ldr	r1, [r6, #0]
  402388:	f8ca 1008 	str.w	r1, [sl, #8]
  40238c:	6871      	ldr	r1, [r6, #4]
  40238e:	f8ca 100c 	str.w	r1, [sl, #12]
  402392:	2a1b      	cmp	r2, #27
  402394:	f200 80af 	bhi.w	4024f6 <_realloc_r+0x3b2>
  402398:	3608      	adds	r6, #8
  40239a:	f10a 0210 	add.w	r2, sl, #16
  40239e:	6831      	ldr	r1, [r6, #0]
  4023a0:	6011      	str	r1, [r2, #0]
  4023a2:	6871      	ldr	r1, [r6, #4]
  4023a4:	6051      	str	r1, [r2, #4]
  4023a6:	68b1      	ldr	r1, [r6, #8]
  4023a8:	6091      	str	r1, [r2, #8]
  4023aa:	eb0a 0105 	add.w	r1, sl, r5
  4023ae:	ebc5 020b 	rsb	r2, r5, fp
  4023b2:	f042 0201 	orr.w	r2, r2, #1
  4023b6:	6099      	str	r1, [r3, #8]
  4023b8:	604a      	str	r2, [r1, #4]
  4023ba:	f8da 3004 	ldr.w	r3, [sl, #4]
  4023be:	f003 0301 	and.w	r3, r3, #1
  4023c2:	431d      	orrs	r5, r3
  4023c4:	4648      	mov	r0, r9
  4023c6:	f8ca 5004 	str.w	r5, [sl, #4]
  4023ca:	f7ff feb9 	bl	402140 <__malloc_unlock>
  4023ce:	4638      	mov	r0, r7
  4023d0:	e75c      	b.n	40228c <_realloc_r+0x148>
  4023d2:	6833      	ldr	r3, [r6, #0]
  4023d4:	6003      	str	r3, [r0, #0]
  4023d6:	6873      	ldr	r3, [r6, #4]
  4023d8:	6043      	str	r3, [r0, #4]
  4023da:	2a1b      	cmp	r2, #27
  4023dc:	d827      	bhi.n	40242e <_realloc_r+0x2ea>
  4023de:	f100 0308 	add.w	r3, r0, #8
  4023e2:	f106 0208 	add.w	r2, r6, #8
  4023e6:	e6f2      	b.n	4021ce <_realloc_r+0x8a>
  4023e8:	463b      	mov	r3, r7
  4023ea:	6832      	ldr	r2, [r6, #0]
  4023ec:	601a      	str	r2, [r3, #0]
  4023ee:	6872      	ldr	r2, [r6, #4]
  4023f0:	605a      	str	r2, [r3, #4]
  4023f2:	68b2      	ldr	r2, [r6, #8]
  4023f4:	609a      	str	r2, [r3, #8]
  4023f6:	463e      	mov	r6, r7
  4023f8:	4674      	mov	r4, lr
  4023fa:	46d0      	mov	r8, sl
  4023fc:	e733      	b.n	402266 <_realloc_r+0x122>
  4023fe:	eb08 0105 	add.w	r1, r8, r5
  402402:	ebc5 0b0b 	rsb	fp, r5, fp
  402406:	f04b 0201 	orr.w	r2, fp, #1
  40240a:	6099      	str	r1, [r3, #8]
  40240c:	604a      	str	r2, [r1, #4]
  40240e:	f856 3c04 	ldr.w	r3, [r6, #-4]
  402412:	f003 0301 	and.w	r3, r3, #1
  402416:	431d      	orrs	r5, r3
  402418:	4648      	mov	r0, r9
  40241a:	f846 5c04 	str.w	r5, [r6, #-4]
  40241e:	f7ff fe8f 	bl	402140 <__malloc_unlock>
  402422:	4630      	mov	r0, r6
  402424:	e732      	b.n	40228c <_realloc_r+0x148>
  402426:	4631      	mov	r1, r6
  402428:	f7ff fe24 	bl	402074 <memmove>
  40242c:	e6d5      	b.n	4021da <_realloc_r+0x96>
  40242e:	68b3      	ldr	r3, [r6, #8]
  402430:	6083      	str	r3, [r0, #8]
  402432:	68f3      	ldr	r3, [r6, #12]
  402434:	60c3      	str	r3, [r0, #12]
  402436:	2a24      	cmp	r2, #36	; 0x24
  402438:	d028      	beq.n	40248c <_realloc_r+0x348>
  40243a:	f100 0310 	add.w	r3, r0, #16
  40243e:	f106 0210 	add.w	r2, r6, #16
  402442:	e6c4      	b.n	4021ce <_realloc_r+0x8a>
  402444:	f850 3c04 	ldr.w	r3, [r0, #-4]
  402448:	f023 0303 	bic.w	r3, r3, #3
  40244c:	441c      	add	r4, r3
  40244e:	e70a      	b.n	402266 <_realloc_r+0x122>
  402450:	4631      	mov	r1, r6
  402452:	4638      	mov	r0, r7
  402454:	4674      	mov	r4, lr
  402456:	46d0      	mov	r8, sl
  402458:	f7ff fe0c 	bl	402074 <memmove>
  40245c:	463e      	mov	r6, r7
  40245e:	e702      	b.n	402266 <_realloc_r+0x122>
  402460:	463a      	mov	r2, r7
  402462:	e6f7      	b.n	402254 <_realloc_r+0x110>
  402464:	4631      	mov	r1, r6
  402466:	4638      	mov	r0, r7
  402468:	461c      	mov	r4, r3
  40246a:	46d0      	mov	r8, sl
  40246c:	f7ff fe02 	bl	402074 <memmove>
  402470:	463e      	mov	r6, r7
  402472:	e6f8      	b.n	402266 <_realloc_r+0x122>
  402474:	68b3      	ldr	r3, [r6, #8]
  402476:	f8ca 3010 	str.w	r3, [sl, #16]
  40247a:	68f3      	ldr	r3, [r6, #12]
  40247c:	f8ca 3014 	str.w	r3, [sl, #20]
  402480:	2a24      	cmp	r2, #36	; 0x24
  402482:	d01b      	beq.n	4024bc <_realloc_r+0x378>
  402484:	3610      	adds	r6, #16
  402486:	f10a 0318 	add.w	r3, sl, #24
  40248a:	e7ae      	b.n	4023ea <_realloc_r+0x2a6>
  40248c:	6933      	ldr	r3, [r6, #16]
  40248e:	6103      	str	r3, [r0, #16]
  402490:	6973      	ldr	r3, [r6, #20]
  402492:	6143      	str	r3, [r0, #20]
  402494:	f106 0218 	add.w	r2, r6, #24
  402498:	f100 0318 	add.w	r3, r0, #24
  40249c:	e697      	b.n	4021ce <_realloc_r+0x8a>
  40249e:	bf00      	nop
  4024a0:	20000434 	.word	0x20000434
  4024a4:	68b1      	ldr	r1, [r6, #8]
  4024a6:	f8ca 1010 	str.w	r1, [sl, #16]
  4024aa:	68f1      	ldr	r1, [r6, #12]
  4024ac:	f8ca 1014 	str.w	r1, [sl, #20]
  4024b0:	2a24      	cmp	r2, #36	; 0x24
  4024b2:	d00f      	beq.n	4024d4 <_realloc_r+0x390>
  4024b4:	3610      	adds	r6, #16
  4024b6:	f10a 0218 	add.w	r2, sl, #24
  4024ba:	e6cb      	b.n	402254 <_realloc_r+0x110>
  4024bc:	6933      	ldr	r3, [r6, #16]
  4024be:	f8ca 3018 	str.w	r3, [sl, #24]
  4024c2:	6973      	ldr	r3, [r6, #20]
  4024c4:	f8ca 301c 	str.w	r3, [sl, #28]
  4024c8:	3618      	adds	r6, #24
  4024ca:	f10a 0320 	add.w	r3, sl, #32
  4024ce:	e78c      	b.n	4023ea <_realloc_r+0x2a6>
  4024d0:	463a      	mov	r2, r7
  4024d2:	e764      	b.n	40239e <_realloc_r+0x25a>
  4024d4:	6932      	ldr	r2, [r6, #16]
  4024d6:	f8ca 2018 	str.w	r2, [sl, #24]
  4024da:	6972      	ldr	r2, [r6, #20]
  4024dc:	f8ca 201c 	str.w	r2, [sl, #28]
  4024e0:	3618      	adds	r6, #24
  4024e2:	f10a 0220 	add.w	r2, sl, #32
  4024e6:	e6b5      	b.n	402254 <_realloc_r+0x110>
  4024e8:	4631      	mov	r1, r6
  4024ea:	4638      	mov	r0, r7
  4024ec:	9301      	str	r3, [sp, #4]
  4024ee:	f7ff fdc1 	bl	402074 <memmove>
  4024f2:	9b01      	ldr	r3, [sp, #4]
  4024f4:	e759      	b.n	4023aa <_realloc_r+0x266>
  4024f6:	68b1      	ldr	r1, [r6, #8]
  4024f8:	f8ca 1010 	str.w	r1, [sl, #16]
  4024fc:	68f1      	ldr	r1, [r6, #12]
  4024fe:	f8ca 1014 	str.w	r1, [sl, #20]
  402502:	2a24      	cmp	r2, #36	; 0x24
  402504:	d003      	beq.n	40250e <_realloc_r+0x3ca>
  402506:	3610      	adds	r6, #16
  402508:	f10a 0218 	add.w	r2, sl, #24
  40250c:	e747      	b.n	40239e <_realloc_r+0x25a>
  40250e:	6932      	ldr	r2, [r6, #16]
  402510:	f8ca 2018 	str.w	r2, [sl, #24]
  402514:	6972      	ldr	r2, [r6, #20]
  402516:	f8ca 201c 	str.w	r2, [sl, #28]
  40251a:	3618      	adds	r6, #24
  40251c:	f10a 0220 	add.w	r2, sl, #32
  402520:	e73d      	b.n	40239e <_realloc_r+0x25a>
  402522:	bf00      	nop

00402524 <_sbrk_r>:
  402524:	b538      	push	{r3, r4, r5, lr}
  402526:	4c07      	ldr	r4, [pc, #28]	; (402544 <_sbrk_r+0x20>)
  402528:	2300      	movs	r3, #0
  40252a:	4605      	mov	r5, r0
  40252c:	4608      	mov	r0, r1
  40252e:	6023      	str	r3, [r4, #0]
  402530:	f7fe f94e 	bl	4007d0 <_sbrk>
  402534:	1c43      	adds	r3, r0, #1
  402536:	d000      	beq.n	40253a <_sbrk_r+0x16>
  402538:	bd38      	pop	{r3, r4, r5, pc}
  40253a:	6823      	ldr	r3, [r4, #0]
  40253c:	2b00      	cmp	r3, #0
  40253e:	d0fb      	beq.n	402538 <_sbrk_r+0x14>
  402540:	602b      	str	r3, [r5, #0]
  402542:	bd38      	pop	{r3, r4, r5, pc}
  402544:	200008a8 	.word	0x200008a8

00402548 <__sread>:
  402548:	b510      	push	{r4, lr}
  40254a:	460c      	mov	r4, r1
  40254c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  402550:	f000 f936 	bl	4027c0 <_read_r>
  402554:	2800      	cmp	r0, #0
  402556:	db03      	blt.n	402560 <__sread+0x18>
  402558:	6d23      	ldr	r3, [r4, #80]	; 0x50
  40255a:	4403      	add	r3, r0
  40255c:	6523      	str	r3, [r4, #80]	; 0x50
  40255e:	bd10      	pop	{r4, pc}
  402560:	89a3      	ldrh	r3, [r4, #12]
  402562:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  402566:	81a3      	strh	r3, [r4, #12]
  402568:	bd10      	pop	{r4, pc}
  40256a:	bf00      	nop

0040256c <__swrite>:
  40256c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402570:	4616      	mov	r6, r2
  402572:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  402576:	461f      	mov	r7, r3
  402578:	05d3      	lsls	r3, r2, #23
  40257a:	460c      	mov	r4, r1
  40257c:	4605      	mov	r5, r0
  40257e:	d507      	bpl.n	402590 <__swrite+0x24>
  402580:	2200      	movs	r2, #0
  402582:	2302      	movs	r3, #2
  402584:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  402588:	f000 f904 	bl	402794 <_lseek_r>
  40258c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  402590:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  402594:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  402598:	81a2      	strh	r2, [r4, #12]
  40259a:	463b      	mov	r3, r7
  40259c:	4632      	mov	r2, r6
  40259e:	4628      	mov	r0, r5
  4025a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4025a4:	f000 b814 	b.w	4025d0 <_write_r>

004025a8 <__sseek>:
  4025a8:	b510      	push	{r4, lr}
  4025aa:	460c      	mov	r4, r1
  4025ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4025b0:	f000 f8f0 	bl	402794 <_lseek_r>
  4025b4:	89a3      	ldrh	r3, [r4, #12]
  4025b6:	1c42      	adds	r2, r0, #1
  4025b8:	bf0e      	itee	eq
  4025ba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  4025be:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  4025c2:	6520      	strne	r0, [r4, #80]	; 0x50
  4025c4:	81a3      	strh	r3, [r4, #12]
  4025c6:	bd10      	pop	{r4, pc}

004025c8 <__sclose>:
  4025c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4025cc:	f000 b868 	b.w	4026a0 <_close_r>

004025d0 <_write_r>:
  4025d0:	b570      	push	{r4, r5, r6, lr}
  4025d2:	460d      	mov	r5, r1
  4025d4:	4c08      	ldr	r4, [pc, #32]	; (4025f8 <_write_r+0x28>)
  4025d6:	4611      	mov	r1, r2
  4025d8:	4606      	mov	r6, r0
  4025da:	461a      	mov	r2, r3
  4025dc:	4628      	mov	r0, r5
  4025de:	2300      	movs	r3, #0
  4025e0:	6023      	str	r3, [r4, #0]
  4025e2:	f7fd fdeb 	bl	4001bc <_write>
  4025e6:	1c43      	adds	r3, r0, #1
  4025e8:	d000      	beq.n	4025ec <_write_r+0x1c>
  4025ea:	bd70      	pop	{r4, r5, r6, pc}
  4025ec:	6823      	ldr	r3, [r4, #0]
  4025ee:	2b00      	cmp	r3, #0
  4025f0:	d0fb      	beq.n	4025ea <_write_r+0x1a>
  4025f2:	6033      	str	r3, [r6, #0]
  4025f4:	bd70      	pop	{r4, r5, r6, pc}
  4025f6:	bf00      	nop
  4025f8:	200008a8 	.word	0x200008a8

004025fc <__register_exitproc>:
  4025fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402600:	4c25      	ldr	r4, [pc, #148]	; (402698 <__register_exitproc+0x9c>)
  402602:	6825      	ldr	r5, [r4, #0]
  402604:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
  402608:	4606      	mov	r6, r0
  40260a:	4688      	mov	r8, r1
  40260c:	4692      	mov	sl, r2
  40260e:	4699      	mov	r9, r3
  402610:	b3c4      	cbz	r4, 402684 <__register_exitproc+0x88>
  402612:	6860      	ldr	r0, [r4, #4]
  402614:	281f      	cmp	r0, #31
  402616:	dc17      	bgt.n	402648 <__register_exitproc+0x4c>
  402618:	1c43      	adds	r3, r0, #1
  40261a:	b176      	cbz	r6, 40263a <__register_exitproc+0x3e>
  40261c:	eb04 0580 	add.w	r5, r4, r0, lsl #2
  402620:	2201      	movs	r2, #1
  402622:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
  402626:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
  40262a:	4082      	lsls	r2, r0
  40262c:	4311      	orrs	r1, r2
  40262e:	2e02      	cmp	r6, #2
  402630:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
  402634:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
  402638:	d01e      	beq.n	402678 <__register_exitproc+0x7c>
  40263a:	3002      	adds	r0, #2
  40263c:	6063      	str	r3, [r4, #4]
  40263e:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
  402642:	2000      	movs	r0, #0
  402644:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402648:	4b14      	ldr	r3, [pc, #80]	; (40269c <__register_exitproc+0xa0>)
  40264a:	b303      	cbz	r3, 40268e <__register_exitproc+0x92>
  40264c:	f44f 70c8 	mov.w	r0, #400	; 0x190
  402650:	f7ff f964 	bl	40191c <malloc>
  402654:	4604      	mov	r4, r0
  402656:	b1d0      	cbz	r0, 40268e <__register_exitproc+0x92>
  402658:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
  40265c:	2700      	movs	r7, #0
  40265e:	e880 0088 	stmia.w	r0, {r3, r7}
  402662:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  402666:	4638      	mov	r0, r7
  402668:	2301      	movs	r3, #1
  40266a:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  40266e:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
  402672:	2e00      	cmp	r6, #0
  402674:	d0e1      	beq.n	40263a <__register_exitproc+0x3e>
  402676:	e7d1      	b.n	40261c <__register_exitproc+0x20>
  402678:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
  40267c:	430a      	orrs	r2, r1
  40267e:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  402682:	e7da      	b.n	40263a <__register_exitproc+0x3e>
  402684:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
  402688:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  40268c:	e7c1      	b.n	402612 <__register_exitproc+0x16>
  40268e:	f04f 30ff 	mov.w	r0, #4294967295
  402692:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402696:	bf00      	nop
  402698:	004028d0 	.word	0x004028d0
  40269c:	0040191d 	.word	0x0040191d

004026a0 <_close_r>:
  4026a0:	b538      	push	{r3, r4, r5, lr}
  4026a2:	4c07      	ldr	r4, [pc, #28]	; (4026c0 <_close_r+0x20>)
  4026a4:	2300      	movs	r3, #0
  4026a6:	4605      	mov	r5, r0
  4026a8:	4608      	mov	r0, r1
  4026aa:	6023      	str	r3, [r4, #0]
  4026ac:	f7fe f8aa 	bl	400804 <_close>
  4026b0:	1c43      	adds	r3, r0, #1
  4026b2:	d000      	beq.n	4026b6 <_close_r+0x16>
  4026b4:	bd38      	pop	{r3, r4, r5, pc}
  4026b6:	6823      	ldr	r3, [r4, #0]
  4026b8:	2b00      	cmp	r3, #0
  4026ba:	d0fb      	beq.n	4026b4 <_close_r+0x14>
  4026bc:	602b      	str	r3, [r5, #0]
  4026be:	bd38      	pop	{r3, r4, r5, pc}
  4026c0:	200008a8 	.word	0x200008a8

004026c4 <_fclose_r>:
  4026c4:	2900      	cmp	r1, #0
  4026c6:	d03d      	beq.n	402744 <_fclose_r+0x80>
  4026c8:	b570      	push	{r4, r5, r6, lr}
  4026ca:	4605      	mov	r5, r0
  4026cc:	460c      	mov	r4, r1
  4026ce:	b108      	cbz	r0, 4026d4 <_fclose_r+0x10>
  4026d0:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4026d2:	b37b      	cbz	r3, 402734 <_fclose_r+0x70>
  4026d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4026d8:	b90b      	cbnz	r3, 4026de <_fclose_r+0x1a>
  4026da:	2000      	movs	r0, #0
  4026dc:	bd70      	pop	{r4, r5, r6, pc}
  4026de:	4621      	mov	r1, r4
  4026e0:	4628      	mov	r0, r5
  4026e2:	f7fe fc6f 	bl	400fc4 <__sflush_r>
  4026e6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  4026e8:	4606      	mov	r6, r0
  4026ea:	b133      	cbz	r3, 4026fa <_fclose_r+0x36>
  4026ec:	69e1      	ldr	r1, [r4, #28]
  4026ee:	4628      	mov	r0, r5
  4026f0:	4798      	blx	r3
  4026f2:	2800      	cmp	r0, #0
  4026f4:	bfb8      	it	lt
  4026f6:	f04f 36ff 	movlt.w	r6, #4294967295
  4026fa:	89a3      	ldrh	r3, [r4, #12]
  4026fc:	061b      	lsls	r3, r3, #24
  4026fe:	d41c      	bmi.n	40273a <_fclose_r+0x76>
  402700:	6b21      	ldr	r1, [r4, #48]	; 0x30
  402702:	b141      	cbz	r1, 402716 <_fclose_r+0x52>
  402704:	f104 0340 	add.w	r3, r4, #64	; 0x40
  402708:	4299      	cmp	r1, r3
  40270a:	d002      	beq.n	402712 <_fclose_r+0x4e>
  40270c:	4628      	mov	r0, r5
  40270e:	f7fe fdfd 	bl	40130c <_free_r>
  402712:	2300      	movs	r3, #0
  402714:	6323      	str	r3, [r4, #48]	; 0x30
  402716:	6c61      	ldr	r1, [r4, #68]	; 0x44
  402718:	b121      	cbz	r1, 402724 <_fclose_r+0x60>
  40271a:	4628      	mov	r0, r5
  40271c:	f7fe fdf6 	bl	40130c <_free_r>
  402720:	2300      	movs	r3, #0
  402722:	6463      	str	r3, [r4, #68]	; 0x44
  402724:	f7fe fd8c 	bl	401240 <__sfp_lock_acquire>
  402728:	2300      	movs	r3, #0
  40272a:	81a3      	strh	r3, [r4, #12]
  40272c:	f7fe fd8a 	bl	401244 <__sfp_lock_release>
  402730:	4630      	mov	r0, r6
  402732:	bd70      	pop	{r4, r5, r6, pc}
  402734:	f7fe fd7e 	bl	401234 <__sinit>
  402738:	e7cc      	b.n	4026d4 <_fclose_r+0x10>
  40273a:	6921      	ldr	r1, [r4, #16]
  40273c:	4628      	mov	r0, r5
  40273e:	f7fe fde5 	bl	40130c <_free_r>
  402742:	e7dd      	b.n	402700 <_fclose_r+0x3c>
  402744:	2000      	movs	r0, #0
  402746:	4770      	bx	lr

00402748 <_fstat_r>:
  402748:	b538      	push	{r3, r4, r5, lr}
  40274a:	460b      	mov	r3, r1
  40274c:	4c07      	ldr	r4, [pc, #28]	; (40276c <_fstat_r+0x24>)
  40274e:	4605      	mov	r5, r0
  402750:	4611      	mov	r1, r2
  402752:	4618      	mov	r0, r3
  402754:	2300      	movs	r3, #0
  402756:	6023      	str	r3, [r4, #0]
  402758:	f7fe f858 	bl	40080c <_fstat>
  40275c:	1c43      	adds	r3, r0, #1
  40275e:	d000      	beq.n	402762 <_fstat_r+0x1a>
  402760:	bd38      	pop	{r3, r4, r5, pc}
  402762:	6823      	ldr	r3, [r4, #0]
  402764:	2b00      	cmp	r3, #0
  402766:	d0fb      	beq.n	402760 <_fstat_r+0x18>
  402768:	602b      	str	r3, [r5, #0]
  40276a:	bd38      	pop	{r3, r4, r5, pc}
  40276c:	200008a8 	.word	0x200008a8

00402770 <_isatty_r>:
  402770:	b538      	push	{r3, r4, r5, lr}
  402772:	4c07      	ldr	r4, [pc, #28]	; (402790 <_isatty_r+0x20>)
  402774:	2300      	movs	r3, #0
  402776:	4605      	mov	r5, r0
  402778:	4608      	mov	r0, r1
  40277a:	6023      	str	r3, [r4, #0]
  40277c:	f7fe f84c 	bl	400818 <_isatty>
  402780:	1c43      	adds	r3, r0, #1
  402782:	d000      	beq.n	402786 <_isatty_r+0x16>
  402784:	bd38      	pop	{r3, r4, r5, pc}
  402786:	6823      	ldr	r3, [r4, #0]
  402788:	2b00      	cmp	r3, #0
  40278a:	d0fb      	beq.n	402784 <_isatty_r+0x14>
  40278c:	602b      	str	r3, [r5, #0]
  40278e:	bd38      	pop	{r3, r4, r5, pc}
  402790:	200008a8 	.word	0x200008a8

00402794 <_lseek_r>:
  402794:	b570      	push	{r4, r5, r6, lr}
  402796:	460d      	mov	r5, r1
  402798:	4c08      	ldr	r4, [pc, #32]	; (4027bc <_lseek_r+0x28>)
  40279a:	4611      	mov	r1, r2
  40279c:	4606      	mov	r6, r0
  40279e:	461a      	mov	r2, r3
  4027a0:	4628      	mov	r0, r5
  4027a2:	2300      	movs	r3, #0
  4027a4:	6023      	str	r3, [r4, #0]
  4027a6:	f7fe f839 	bl	40081c <_lseek>
  4027aa:	1c43      	adds	r3, r0, #1
  4027ac:	d000      	beq.n	4027b0 <_lseek_r+0x1c>
  4027ae:	bd70      	pop	{r4, r5, r6, pc}
  4027b0:	6823      	ldr	r3, [r4, #0]
  4027b2:	2b00      	cmp	r3, #0
  4027b4:	d0fb      	beq.n	4027ae <_lseek_r+0x1a>
  4027b6:	6033      	str	r3, [r6, #0]
  4027b8:	bd70      	pop	{r4, r5, r6, pc}
  4027ba:	bf00      	nop
  4027bc:	200008a8 	.word	0x200008a8

004027c0 <_read_r>:
  4027c0:	b570      	push	{r4, r5, r6, lr}
  4027c2:	460d      	mov	r5, r1
  4027c4:	4c08      	ldr	r4, [pc, #32]	; (4027e8 <_read_r+0x28>)
  4027c6:	4611      	mov	r1, r2
  4027c8:	4606      	mov	r6, r0
  4027ca:	461a      	mov	r2, r3
  4027cc:	4628      	mov	r0, r5
  4027ce:	2300      	movs	r3, #0
  4027d0:	6023      	str	r3, [r4, #0]
  4027d2:	f7fd fcd5 	bl	400180 <_read>
  4027d6:	1c43      	adds	r3, r0, #1
  4027d8:	d000      	beq.n	4027dc <_read_r+0x1c>
  4027da:	bd70      	pop	{r4, r5, r6, pc}
  4027dc:	6823      	ldr	r3, [r4, #0]
  4027de:	2b00      	cmp	r3, #0
  4027e0:	d0fb      	beq.n	4027da <_read_r+0x1a>
  4027e2:	6033      	str	r3, [r6, #0]
  4027e4:	bd70      	pop	{r4, r5, r6, pc}
  4027e6:	bf00      	nop
  4027e8:	200008a8 	.word	0x200008a8
  4027ec:	57542d2d 	.word	0x57542d2d
  4027f0:	45452049 	.word	0x45452049
  4027f4:	4d4f5250 	.word	0x4d4f5250
  4027f8:	61784520 	.word	0x61784520
  4027fc:	656c706d 	.word	0x656c706d
  402800:	0d2d2d20 	.word	0x0d2d2d20
  402804:	202d2d0a 	.word	0x202d2d0a
  402808:	344d4153 	.word	0x344d4153
  40280c:	50585f4e 	.word	0x50585f4e
  402810:	4e49414c 	.word	0x4e49414c
  402814:	505f4445 	.word	0x505f4445
  402818:	2d204f52 	.word	0x2d204f52
  40281c:	2d0a0d2d 	.word	0x2d0a0d2d
  402820:	6f43202d 	.word	0x6f43202d
  402824:	6c69706d 	.word	0x6c69706d
  402828:	203a6465 	.word	0x203a6465
  40282c:	2074634f 	.word	0x2074634f
  402830:	32203132 	.word	0x32203132
  402834:	20373130 	.word	0x20373130
  402838:	313a3331 	.word	0x313a3331
  40283c:	37313a31 	.word	0x37313a31
  402840:	0d2d2d20 	.word	0x0d2d2d20
  402844:	00000000 	.word	0x00000000
  402848:	666e6f43 	.word	0x666e6f43
  40284c:	72756769 	.word	0x72756769
  402850:	79732065 	.word	0x79732065
  402854:	6d657473 	.word	0x6d657473
  402858:	63697420 	.word	0x63697420
  40285c:	6f74206b 	.word	0x6f74206b
  402860:	74656720 	.word	0x74656720
  402864:	736d3120 	.word	0x736d3120
  402868:	63697420 	.word	0x63697420
  40286c:	6570206b 	.word	0x6570206b
  402870:	646f6972 	.word	0x646f6972
  402874:	00000d2e 	.word	0x00000d2e
  402878:	092d452d 	.word	0x092d452d
  40287c:	20495754 	.word	0x20495754
  402880:	7473616d 	.word	0x7473616d
  402884:	69207265 	.word	0x69207265
  402888:	6974696e 	.word	0x6974696e
  40288c:	7a696c61 	.word	0x7a696c61
  402890:	6f697461 	.word	0x6f697461
  402894:	6166206e 	.word	0x6166206e
  402898:	64656c69 	.word	0x64656c69
  40289c:	00000d2e 	.word	0x00000d2e
  4028a0:	092d452d 	.word	0x092d452d
  4028a4:	20495754 	.word	0x20495754
  4028a8:	7473616d 	.word	0x7473616d
  4028ac:	77207265 	.word	0x77207265
  4028b0:	65746972 	.word	0x65746972
  4028b4:	63617020 	.word	0x63617020
  4028b8:	2074656b 	.word	0x2074656b
  4028bc:	6c696166 	.word	0x6c696166
  4028c0:	0d2e6465 	.word	0x0d2e6465
  4028c4:	00000000 	.word	0x00000000

004028c8 <test_data_tx>:
  4028c8:	00000053 00000043                       S...C...

004028d0 <_global_impure_ptr>:
  4028d0:	20000008 0000000a                       ... ....

004028d8 <_init>:
  4028d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4028da:	bf00      	nop
  4028dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4028de:	bc08      	pop	{r3}
  4028e0:	469e      	mov	lr, r3
  4028e2:	4770      	bx	lr

004028e4 <__init_array_start>:
  4028e4:	00400fa5 	.word	0x00400fa5

004028e8 <__frame_dummy_init_array_entry>:
  4028e8:	004000e5                                ..@.

004028ec <_fini>:
  4028ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4028ee:	bf00      	nop
  4028f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4028f2:	bc08      	pop	{r3}
  4028f4:	469e      	mov	lr, r3
  4028f6:	4770      	bx	lr

004028f8 <__fini_array_start>:
  4028f8:	004000c1 	.word	0x004000c1
